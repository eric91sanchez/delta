
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  080127a0  080127a0  000227a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144e8  080144e8  000302d4  2**0
                  CONTENTS
  4 .ARM          00000008  080144e8  080144e8  000244e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144f0  080144f0  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144f0  080144f0  000244f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080144f4  080144f4  000244f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  24000000  080144f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  240002d8  080147cc  000302d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000ca0  080147cc  00030ca0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c291  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366b  00000000  00000000  0004c593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0004fc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  00050f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039628  00000000  00000000  000520d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d21e  00000000  00000000  0008b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165a62  00000000  00000000  000a891e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020e380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000623c  00000000  00000000  0020e3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d8 	.word	0x240002d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012784 	.word	0x08012784

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002dc 	.word	0x240002dc
 80002dc:	08012784 	.word	0x08012784

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <transpuesta>:
 *      Author: Elias Correa y Eliseo Elorga
 */

#include <GlobalFunc.h>

array2D transpuesta(double Maux[3][3]) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b096      	sub	sp, #88	; 0x58
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
 8000a8a:	e024      	b.n	8000ad6 <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8000a90:	e01b      	b.n	8000aca <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 8000a92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	3358      	adds	r3, #88	; 0x58
 8000abc:	443b      	add	r3, r7
 8000abe:	3b50      	subs	r3, #80	; 0x50
 8000ac0:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 8000ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8000aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	dde0      	ble.n	8000a92 <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8000ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
 8000ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	ddd7      	ble.n	8000a8c <transpuesta+0x10>
		}
	}
	return MTaux;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2248      	movs	r2, #72	; 0x48
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f00e fb7c 	bl	800f1e4 <memcpy>
}
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	3758      	adds	r7, #88	; 0x58
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <productDot>:

double productDot(double VectA[], double VectB[]) {
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8000afe:	f04f 0200 	mov.w	r2, #0
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e016      	b.n	8000b3e <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	ed93 6b00 	vldr	d6, [r3]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	ed93 7b00 	vldr	d7, [r3]
 8000b28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b2c:	ed97 6b04 	vldr	d6, [r7, #16]
 8000b30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b34:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	dde5      	ble.n	8000b10 <productDot+0x1c>
	}
	return dotaux;
 8000b44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b48:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b50:	371c      	adds	r7, #28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <determinante>:

double determinante(double Maux[3][3]) {
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	ed93 6b00 	vldr	d6, [r3]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3318      	adds	r3, #24
 8000b6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000b70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3330      	adds	r3, #48	; 0x30
 8000b78:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b80:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8000b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b88:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b8c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <adjunta>:

array2D adjunta(double Maux[3][3]) {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b094      	sub	sp, #80	; 0x50
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	ed93 6b02 	vldr	d6, [r3, #8]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	3330      	adds	r3, #48	; 0x30
 8000bb0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	3330      	adds	r3, #48	; 0x30
 8000bbc:	ed93 5b02 	vldr	d5, [r3, #8]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3318      	adds	r3, #24
 8000bc4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bc8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bd0:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	ed93 6b00 	vldr	d6, [r3]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3330      	adds	r3, #48	; 0x30
 8000be0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000be4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	3330      	adds	r3, #48	; 0x30
 8000bec:	ed93 5b00 	vldr	d5, [r3]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3318      	adds	r3, #24
 8000bf4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000bf8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c00:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	3318      	adds	r3, #24
 8000c08:	ed93 6b00 	vldr	d6, [r3]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	3330      	adds	r3, #48	; 0x30
 8000c10:	ed93 7b02 	vldr	d7, [r3, #8]
 8000c14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3330      	adds	r3, #48	; 0x30
 8000c1c:	ed93 5b00 	vldr	d5, [r3]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3318      	adds	r3, #24
 8000c24:	ed93 7b02 	vldr	d7, [r3, #8]
 8000c28:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c30:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	3330      	adds	r3, #48	; 0x30
 8000c3e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	3330      	adds	r3, #48	; 0x30
 8000c4a:	ed93 5b02 	vldr	d5, [r3, #8]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c5c:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	ed93 6b00 	vldr	d6, [r3]
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	3330      	adds	r3, #48	; 0x30
 8000c6a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	3330      	adds	r3, #48	; 0x30
 8000c76:	ed93 5b00 	vldr	d5, [r3]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000c80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c88:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	ed93 6b00 	vldr	d6, [r3]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3330      	adds	r3, #48	; 0x30
 8000c96:	ed93 7b02 	vldr	d7, [r3, #8]
 8000c9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3330      	adds	r3, #48	; 0x30
 8000ca2:	ed93 5b00 	vldr	d5, [r3]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	ed93 7b02 	vldr	d7, [r3, #8]
 8000cac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cb4:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	ed93 6b02 	vldr	d6, [r3, #8]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3318      	adds	r3, #24
 8000cc2:	ed93 7b04 	vldr	d7, [r3, #16]
 8000cc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	ed93 5b02 	vldr	d5, [r3, #8]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000cd8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cdc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ce0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	ed93 6b00 	vldr	d6, [r3]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3318      	adds	r3, #24
 8000cee:	ed93 7b04 	vldr	d7, [r3, #16]
 8000cf2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3318      	adds	r3, #24
 8000cfa:	ed93 5b00 	vldr	d5, [r3]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d0c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	ed93 6b00 	vldr	d6, [r3]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3318      	adds	r3, #24
 8000d1a:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	3318      	adds	r3, #24
 8000d26:	ed93 5b00 	vldr	d5, [r3]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000d30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d38:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2248      	movs	r2, #72	; 0x48
 8000d46:	4619      	mov	r1, r3
 8000d48:	f00e fa4c 	bl	800f1e4 <memcpy>
}
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	3750      	adds	r7, #80	; 0x50
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <inversa>:

array2D inversa(double A[3][3]) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0bc      	sub	sp, #240	; 0xf0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000d5c:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8000d5e:	463b      	mov	r3, r7
 8000d60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff19 	bl	8000b9a <adjunta>
 8000d68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	2248      	movs	r2, #72	; 0x48
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00e fa37 	bl	800f1e4 <memcpy>
	Maux = transpuesta(Maux.m);
 8000d76:	463b      	mov	r3, r7
 8000d78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe7c 	bl	8000a7c <transpuesta>
 8000d84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d88:	4639      	mov	r1, r7
 8000d8a:	2248      	movs	r2, #72	; 0x48
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00e fa29 	bl	800f1e4 <memcpy>
	det = determinante(A);
 8000d92:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d94:	f7ff fee1 	bl	8000b5a <determinante>
 8000d98:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000da2:	e035      	b.n	8000e10 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000daa:	e028      	b.n	8000dfe <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8000dac:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000db0:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8000db4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000db8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	33f0      	adds	r3, #240	; 0xf0
 8000dcc:	443b      	add	r3, r7
 8000dce:	3ba0      	subs	r3, #160	; 0xa0
 8000dd0:	ed93 7b00 	vldr	d7, [r3]
 8000dd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dd8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	33f0      	adds	r3, #240	; 0xf0
 8000dec:	443b      	add	r3, r7
 8000dee:	3b58      	subs	r3, #88	; 0x58
 8000df0:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8000df4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	ddd2      	ble.n	8000dac <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8000e06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000e10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	ddc5      	ble.n	8000da4 <inversa+0x50>
		}
	}
	return Minv;
 8000e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e20:	2248      	movs	r2, #72	; 0x48
 8000e22:	4619      	mov	r1, r3
 8000e24:	f00e f9de 	bl	800f1e4 <memcpy>
}
 8000e28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e2a:	37f0      	adds	r7, #240	; 0xf0
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	; 0x70
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e40:	e04b      	b.n	8000eda <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e46:	e042      	b.n	8000ece <productMatriz+0x9e>
			double suma = 0;
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e58:	e024      	b.n	8000ea4 <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8000e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	461a      	mov	r2, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	441a      	add	r2, r3
 8000e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4413      	add	r3, r2
 8000e70:	ed93 6b00 	vldr	d6, [r3]
 8000e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	441a      	add	r2, r3
 8000e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	ed93 7b00 	vldr	d7, [r3]
 8000e8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e92:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000e96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e9a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8000e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	ddd7      	ble.n	8000e5a <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8000eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	3370      	adds	r3, #112	; 0x70
 8000eba:	443b      	add	r3, r7
 8000ebc:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8000ec0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ec4:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8000ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000eca:	3301      	adds	r3, #1
 8000ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	ddb9      	ble.n	8000e48 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8000ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	ddb0      	ble.n	8000e42 <productMatriz+0x12>
		}
	}
	return producto;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2248      	movs	r2, #72	; 0x48
 8000eea:	4619      	mov	r1, r3
 8000eec:	f00e f97a 	bl	800f1e4 <memcpy>
}
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	3770      	adds	r7, #112	; 0x70
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <cinematicaInversa>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void cinematicaInversa(Vec3D _Pfin) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	ed2d 8b04 	vpush	{d8-d9}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	eeb0 5b40 	vmov.f64	d5, d0
 8000f06:	eeb0 6b41 	vmov.f64	d6, d1
 8000f0a:	eeb0 7b42 	vmov.f64	d7, d2
 8000f0e:	ed87 5b00 	vstr	d5, [r7]
 8000f12:	ed87 6b02 	vstr	d6, [r7, #8]
 8000f16:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8000f1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f1e:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80012d8 <cinematicaInversa+0x3e0>
 8000f22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f26:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80012e0 <cinematicaInversa+0x3e8>
 8000f2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f2e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000f32:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f36:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f3e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f42:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f46:	eeb0 0b45 	vmov.f64	d0, d5
 8000f4a:	f010 ffed 	bl	8011f28 <pow>
 8000f4e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f52:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f5a:	4bf9      	ldr	r3, [pc, #996]	; (8001340 <cinematicaInversa+0x448>)
 8000f5c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8000f60:	ed97 7b00 	vldr	d7, [r7]
 8000f64:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80012e8 <cinematicaInversa+0x3f0>
 8000f68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f6c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80012f0 <cinematicaInversa+0x3f8>
 8000f70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f74:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80012f8 <cinematicaInversa+0x400>
 8000f78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f80:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001300 <cinematicaInversa+0x408>
 8000f84:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000f88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f90:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f94:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f98:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fa0:	eeb0 0b45 	vmov.f64	d0, d5
 8000fa4:	f010 ffc0 	bl	8011f28 <pow>
 8000fa8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fac:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000fb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fb4:	4be3      	ldr	r3, [pc, #908]	; (8001344 <cinematicaInversa+0x44c>)
 8000fb6:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8000fba:	ed97 7b00 	vldr	d7, [r7]
 8000fbe:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80012e8 <cinematicaInversa+0x3f0>
 8000fc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fc6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80012f0 <cinematicaInversa+0x3f8>
 8000fca:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fce:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fd2:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8001300 <cinematicaInversa+0x408>
 8000fd6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000fda:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000fde:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fe2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8001308 <cinematicaInversa+0x410>
 8000fe6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fea:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 80012e0 <cinematicaInversa+0x3e8>
 8000fee:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000ff2:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ff6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ffa:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ffe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001002:	eeb0 0b45 	vmov.f64	d0, d5
 8001006:	f010 ff8f 	bl	8011f28 <pow>
 800100a:	eeb0 7b40 	vmov.f64	d7, d0
 800100e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001012:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001016:	4bcc      	ldr	r3, [pc, #816]	; (8001348 <cinematicaInversa+0x450>)
 8001018:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 800101c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001020:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80012d8 <cinematicaInversa+0x3e0>
 8001024:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001028:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80012e0 <cinematicaInversa+0x3e8>
 800102c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001030:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001034:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001038:	ed97 7b04 	vldr	d7, [r7, #16]
 800103c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001040:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001044:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001048:	ed97 7b02 	vldr	d7, [r7, #8]
 800104c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80012d8 <cinematicaInversa+0x3e0>
 8001050:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001054:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001058:	eeb0 0b47 	vmov.f64	d0, d7
 800105c:	f010 ff64 	bl	8011f28 <pow>
 8001060:	eeb0 7b40 	vmov.f64	d7, d0
 8001064:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001310 <cinematicaInversa+0x418>
 8001068:	ee37 9b06 	vadd.f64	d9, d7, d6
 800106c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001070:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001074:	eeb0 0b47 	vmov.f64	d0, d7
 8001078:	f010 ff56 	bl	8011f28 <pow>
 800107c:	eeb0 7b40 	vmov.f64	d7, d0
 8001080:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001084:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001318 <cinematicaInversa+0x420>
 8001088:	ee37 9b46 	vsub.f64	d9, d7, d6
 800108c:	ed97 7b00 	vldr	d7, [r7]
 8001090:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001094:	eeb0 0b47 	vmov.f64	d0, d7
 8001098:	f010 ff46 	bl	8011f28 <pow>
 800109c:	eeb0 7b40 	vmov.f64	d7, d0
 80010a0:	ee39 5b07 	vadd.f64	d5, d9, d7
 80010a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80010a8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80010ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010b0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80010b4:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001320 <cinematicaInversa+0x428>
 80010b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010bc:	4ba3      	ldr	r3, [pc, #652]	; (800134c <cinematicaInversa+0x454>)
 80010be:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80010c2:	ed97 7b00 	vldr	d7, [r7]
 80010c6:	ed9f 6b88 	vldr	d6, [pc, #544]	; 80012e8 <cinematicaInversa+0x3f0>
 80010ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010ce:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001328 <cinematicaInversa+0x430>
 80010d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80010da:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001300 <cinematicaInversa+0x408>
 80010de:	ee37 7b05 	vadd.f64	d7, d7, d5
 80010e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010ea:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80012f8 <cinematicaInversa+0x400>
 80010ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 80010f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80010f6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80010fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010fe:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001102:	ed97 7b00 	vldr	d7, [r7]
 8001106:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80012e8 <cinematicaInversa+0x3f0>
 800110a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800110e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001112:	eeb0 0b47 	vmov.f64	d0, d7
 8001116:	f010 ff07 	bl	8011f28 <pow>
 800111a:	eeb0 7b40 	vmov.f64	d7, d0
 800111e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001310 <cinematicaInversa+0x418>
 8001122:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001126:	ed97 7b02 	vldr	d7, [r7, #8]
 800112a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001300 <cinematicaInversa+0x408>
 800112e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001132:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001136:	eeb0 0b47 	vmov.f64	d0, d7
 800113a:	f010 fef5 	bl	8011f28 <pow>
 800113e:	eeb0 7b40 	vmov.f64	d7, d0
 8001142:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001146:	ed97 7b04 	vldr	d7, [r7, #16]
 800114a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800114e:	eeb0 0b47 	vmov.f64	d0, d7
 8001152:	f010 fee9 	bl	8011f28 <pow>
 8001156:	eeb0 7b40 	vmov.f64	d7, d0
 800115a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800115e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001318 <cinematicaInversa+0x420>
 8001162:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001166:	ed97 7b04 	vldr	d7, [r7, #16]
 800116a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800116e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001172:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001176:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80012f8 <cinematicaInversa+0x400>
 800117a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800117e:	4b74      	ldr	r3, [pc, #464]	; (8001350 <cinematicaInversa+0x458>)
 8001180:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001184:	ed97 7b00 	vldr	d7, [r7]
 8001188:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80012e8 <cinematicaInversa+0x3f0>
 800118c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001190:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80012f0 <cinematicaInversa+0x3f8>
 8001194:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001198:	ed97 7b02 	vldr	d7, [r7, #8]
 800119c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001300 <cinematicaInversa+0x408>
 80011a0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80011a4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80011ac:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001308 <cinematicaInversa+0x410>
 80011b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011b4:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80012e0 <cinematicaInversa+0x3e8>
 80011b8:	ee37 5b06 	vadd.f64	d5, d7, d6
 80011bc:	ed97 7b04 	vldr	d7, [r7, #16]
 80011c0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011c8:	ee37 8b07 	vadd.f64	d8, d7, d7
 80011cc:	ed97 7b00 	vldr	d7, [r7]
 80011d0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80012e8 <cinematicaInversa+0x3f0>
 80011d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80011d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80011dc:	eeb0 0b47 	vmov.f64	d0, d7
 80011e0:	f010 fea2 	bl	8011f28 <pow>
 80011e4:	eeb0 9b40 	vmov.f64	d9, d0
 80011e8:	ed97 7b02 	vldr	d7, [r7, #8]
 80011ec:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001300 <cinematicaInversa+0x408>
 80011f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80011f8:	eeb0 0b47 	vmov.f64	d0, d7
 80011fc:	f010 fe94 	bl	8011f28 <pow>
 8001200:	eeb0 7b40 	vmov.f64	d7, d0
 8001204:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001208:	ed97 7b04 	vldr	d7, [r7, #16]
 800120c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001210:	eeb0 0b47 	vmov.f64	d0, d7
 8001214:	f010 fe88 	bl	8011f28 <pow>
 8001218:	eeb0 7b40 	vmov.f64	d7, d0
 800121c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001220:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001318 <cinematicaInversa+0x420>
 8001224:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001228:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001330 <cinematicaInversa+0x438>
 800122c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001230:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001338 <cinematicaInversa+0x440>
 8001234:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001238:	ed97 7b04 	vldr	d7, [r7, #16]
 800123c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001240:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001244:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001248:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80012f8 <cinematicaInversa+0x400>
 800124c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001250:	4b40      	ldr	r3, [pc, #256]	; (8001354 <cinematicaInversa+0x45c>)
 8001252:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8001256:	ed97 7b02 	vldr	d7, [r7, #8]
 800125a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80012d8 <cinematicaInversa+0x3e0>
 800125e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001262:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001266:	eeb0 0b47 	vmov.f64	d0, d7
 800126a:	f010 fe5d 	bl	8011f28 <pow>
 800126e:	eeb0 8b40 	vmov.f64	d8, d0
 8001272:	ed97 7b04 	vldr	d7, [r7, #16]
 8001276:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800127a:	eeb0 0b47 	vmov.f64	d0, d7
 800127e:	f010 fe53 	bl	8011f28 <pow>
 8001282:	eeb0 7b40 	vmov.f64	d7, d0
 8001286:	ee38 7b07 	vadd.f64	d7, d8, d7
 800128a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001318 <cinematicaInversa+0x420>
 800128e:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001292:	ed97 7b00 	vldr	d7, [r7]
 8001296:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800129a:	eeb0 0b47 	vmov.f64	d0, d7
 800129e:	f010 fe43 	bl	8011f28 <pow>
 80012a2:	eeb0 7b40 	vmov.f64	d7, d0
 80012a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80012aa:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001330 <cinematicaInversa+0x438>
 80012ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012b2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001338 <cinematicaInversa+0x440>
 80012b6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80012ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80012be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80012c2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80012c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80012ca:	eeb0 0b45 	vmov.f64	d0, d5
 80012ce:	f010 fe2b 	bl	8011f28 <pow>
 80012d2:	eeb0 7b40 	vmov.f64	d7, d0
 80012d6:	e03f      	b.n	8001358 <cinematicaInversa+0x460>
 80012d8:	1eb851ec 	.word	0x1eb851ec
 80012dc:	3fb1eb85 	.word	0x3fb1eb85
 80012e0:	24dd2f1b 	.word	0x24dd2f1b
 80012e4:	3fc58106 	.word	0x3fc58106
 80012e8:	5625749b 	.word	0x5625749b
 80012ec:	3faf09d1 	.word	0x3faf09d1
 80012f0:	e8584caa 	.word	0xe8584caa
 80012f4:	400bb67a 	.word	0x400bb67a
 80012f8:	24dd2f1d 	.word	0x24dd2f1d
 80012fc:	3fe58106 	.word	0x3fe58106
 8001300:	1eb851ec 	.word	0x1eb851ec
 8001304:	3fa1eb85 	.word	0x3fa1eb85
 8001308:	9ba5e356 	.word	0x9ba5e356
 800130c:	3fe020c4 	.word	0x3fe020c4
 8001310:	f705857e 	.word	0xf705857e
 8001314:	3f881e03 	.word	0x3f881e03
 8001318:	70a3d70a 	.word	0x70a3d70a
 800131c:	3fd70a3d 	.word	0x3fd70a3d
 8001320:	24dd2f1b 	.word	0x24dd2f1b
 8001324:	3fd58106 	.word	0x3fd58106
 8001328:	e8584caa 	.word	0xe8584caa
 800132c:	c00bb67a 	.word	0xc00bb67a
 8001330:	93d96639 	.word	0x93d96639
 8001334:	3f9ce6c0 	.word	0x3f9ce6c0
 8001338:	47ae147c 	.word	0x47ae147c
 800133c:	3fa47ae1 	.word	0x3fa47ae1
 8001340:	240002f8 	.word	0x240002f8
 8001344:	24000340 	.word	0x24000340
 8001348:	24000388 	.word	0x24000388
 800134c:	24000300 	.word	0x24000300
 8001350:	24000348 	.word	0x24000348
 8001354:	24000390 	.word	0x24000390
 8001358:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 80016d8 <cinematicaInversa+0x7e0>
 800135c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001360:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 80016e0 <cinematicaInversa+0x7e8>
 8001364:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001368:	4be7      	ldr	r3, [pc, #924]	; (8001708 <cinematicaInversa+0x810>)
 800136a:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 800136e:	ed97 7b00 	vldr	d7, [r7]
 8001372:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 80016e8 <cinematicaInversa+0x7f0>
 8001376:	ee37 7b06 	vadd.f64	d7, d7, d6
 800137a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800137e:	eeb0 0b47 	vmov.f64	d0, d7
 8001382:	f010 fdd1 	bl	8011f28 <pow>
 8001386:	eeb0 7b40 	vmov.f64	d7, d0
 800138a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 80016f0 <cinematicaInversa+0x7f8>
 800138e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001392:	ed97 7b02 	vldr	d7, [r7, #8]
 8001396:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 80016f8 <cinematicaInversa+0x800>
 800139a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800139e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013a2:	eeb0 0b47 	vmov.f64	d0, d7
 80013a6:	f010 fdbf 	bl	8011f28 <pow>
 80013aa:	eeb0 7b40 	vmov.f64	d7, d0
 80013ae:	ee38 8b07 	vadd.f64	d8, d8, d7
 80013b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80013b6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013ba:	eeb0 0b47 	vmov.f64	d0, d7
 80013be:	f010 fdb3 	bl	8011f28 <pow>
 80013c2:	eeb0 7b40 	vmov.f64	d7, d0
 80013c6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013ca:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001700 <cinematicaInversa+0x808>
 80013ce:	ee37 6b46 	vsub.f64	d6, d7, d6
 80013d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80013d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013da:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80013de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013e2:	eeb0 0b45 	vmov.f64	d0, d5
 80013e6:	f010 fd9f 	bl	8011f28 <pow>
 80013ea:	eeb0 7b40 	vmov.f64	d7, d0
 80013ee:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80016f0 <cinematicaInversa+0x7f8>
 80013f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013f6:	4bc5      	ldr	r3, [pc, #788]	; (800170c <cinematicaInversa+0x814>)
 80013f8:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 80013fc:	ed97 7b00 	vldr	d7, [r7]
 8001400:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80016e8 <cinematicaInversa+0x7f0>
 8001404:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001408:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800140c:	eeb0 0b47 	vmov.f64	d0, d7
 8001410:	f010 fd8a 	bl	8011f28 <pow>
 8001414:	eeb0 8b40 	vmov.f64	d8, d0
 8001418:	ed97 7b02 	vldr	d7, [r7, #8]
 800141c:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 80016f8 <cinematicaInversa+0x800>
 8001420:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001424:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001428:	eeb0 0b47 	vmov.f64	d0, d7
 800142c:	f010 fd7c 	bl	8011f28 <pow>
 8001430:	eeb0 7b40 	vmov.f64	d7, d0
 8001434:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001438:	ed97 7b04 	vldr	d7, [r7, #16]
 800143c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001440:	eeb0 0b47 	vmov.f64	d0, d7
 8001444:	f010 fd70 	bl	8011f28 <pow>
 8001448:	eeb0 7b40 	vmov.f64	d7, d0
 800144c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001450:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001700 <cinematicaInversa+0x808>
 8001454:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001458:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 80016e0 <cinematicaInversa+0x7e8>
 800145c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001460:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 80016d8 <cinematicaInversa+0x7e0>
 8001464:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001468:	ed97 7b04 	vldr	d7, [r7, #16]
 800146c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001470:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001474:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001478:	eeb0 0b45 	vmov.f64	d0, d5
 800147c:	f010 fd54 	bl	8011f28 <pow>
 8001480:	eeb0 7b40 	vmov.f64	d7, d0
 8001484:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 80016f0 <cinematicaInversa+0x7f8>
 8001488:	ee37 7b46 	vsub.f64	d7, d7, d6
 800148c:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <cinematicaInversa+0x818>)
 800148e:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001492:	4ba0      	ldr	r3, [pc, #640]	; (8001714 <cinematicaInversa+0x81c>)
 8001494:	ed93 7b00 	vldr	d7, [r3]
 8001498:	eeb1 8b47 	vneg.f64	d8, d7
 800149c:	4b9d      	ldr	r3, [pc, #628]	; (8001714 <cinematicaInversa+0x81c>)
 800149e:	ed93 7b00 	vldr	d7, [r3]
 80014a2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014a6:	eeb0 0b47 	vmov.f64	d0, d7
 80014aa:	f010 fd3d 	bl	8011f28 <pow>
 80014ae:	eeb0 5b40 	vmov.f64	d5, d0
 80014b2:	4b99      	ldr	r3, [pc, #612]	; (8001718 <cinematicaInversa+0x820>)
 80014b4:	ed93 7b00 	vldr	d7, [r3]
 80014b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80014bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014c0:	4b91      	ldr	r3, [pc, #580]	; (8001708 <cinematicaInversa+0x810>)
 80014c2:	ed93 7b00 	vldr	d7, [r3]
 80014c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80014ce:	eeb0 0b47 	vmov.f64	d0, d7
 80014d2:	f010 ffa9 	bl	8012428 <sqrt>
 80014d6:	eeb0 7b40 	vmov.f64	d7, d0
 80014da:	ee38 5b47 	vsub.f64	d5, d8, d7
 80014de:	4b8e      	ldr	r3, [pc, #568]	; (8001718 <cinematicaInversa+0x820>)
 80014e0:	ed93 7b00 	vldr	d7, [r3]
 80014e4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80014e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014ec:	4b8b      	ldr	r3, [pc, #556]	; (800171c <cinematicaInversa+0x824>)
 80014ee:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <cinematicaInversa+0x81c>)
 80014f4:	ed93 7b00 	vldr	d7, [r3]
 80014f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001500:	f010 fd12 	bl	8011f28 <pow>
 8001504:	eeb0 5b40 	vmov.f64	d5, d0
 8001508:	4b83      	ldr	r3, [pc, #524]	; (8001718 <cinematicaInversa+0x820>)
 800150a:	ed93 7b00 	vldr	d7, [r3]
 800150e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001512:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001516:	4b7c      	ldr	r3, [pc, #496]	; (8001708 <cinematicaInversa+0x810>)
 8001518:	ed93 7b00 	vldr	d7, [r3]
 800151c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001520:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001524:	eeb0 0b47 	vmov.f64	d0, d7
 8001528:	f010 ff7e 	bl	8012428 <sqrt>
 800152c:	eeb0 6b40 	vmov.f64	d6, d0
 8001530:	4b78      	ldr	r3, [pc, #480]	; (8001714 <cinematicaInversa+0x81c>)
 8001532:	ed93 7b00 	vldr	d7, [r3]
 8001536:	ee36 5b47 	vsub.f64	d5, d6, d7
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <cinematicaInversa+0x820>)
 800153c:	ed93 7b00 	vldr	d7, [r3]
 8001540:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001544:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001548:	4b75      	ldr	r3, [pc, #468]	; (8001720 <cinematicaInversa+0x828>)
 800154a:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 800154e:	4b75      	ldr	r3, [pc, #468]	; (8001724 <cinematicaInversa+0x82c>)
 8001550:	ed93 7b00 	vldr	d7, [r3]
 8001554:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001558:	eeb0 0b47 	vmov.f64	d0, d7
 800155c:	f010 fce4 	bl	8011f28 <pow>
 8001560:	eeb0 5b40 	vmov.f64	d5, d0
 8001564:	4b70      	ldr	r3, [pc, #448]	; (8001728 <cinematicaInversa+0x830>)
 8001566:	ed93 7b00 	vldr	d7, [r3]
 800156a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800156e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001572:	4b66      	ldr	r3, [pc, #408]	; (800170c <cinematicaInversa+0x814>)
 8001574:	ed93 7b00 	vldr	d7, [r3]
 8001578:	ee26 7b07 	vmul.f64	d7, d6, d7
 800157c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001580:	eeb0 0b47 	vmov.f64	d0, d7
 8001584:	f010 ff50 	bl	8012428 <sqrt>
 8001588:	eeb0 6b40 	vmov.f64	d6, d0
 800158c:	4b65      	ldr	r3, [pc, #404]	; (8001724 <cinematicaInversa+0x82c>)
 800158e:	ed93 7b00 	vldr	d7, [r3]
 8001592:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001596:	4b64      	ldr	r3, [pc, #400]	; (8001728 <cinematicaInversa+0x830>)
 8001598:	ed93 7b00 	vldr	d7, [r3]
 800159c:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015a4:	4b61      	ldr	r3, [pc, #388]	; (800172c <cinematicaInversa+0x834>)
 80015a6:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80015aa:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <cinematicaInversa+0x82c>)
 80015ac:	ed93 7b00 	vldr	d7, [r3]
 80015b0:	eeb1 8b47 	vneg.f64	d8, d7
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <cinematicaInversa+0x82c>)
 80015b6:	ed93 7b00 	vldr	d7, [r3]
 80015ba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015be:	eeb0 0b47 	vmov.f64	d0, d7
 80015c2:	f010 fcb1 	bl	8011f28 <pow>
 80015c6:	eeb0 5b40 	vmov.f64	d5, d0
 80015ca:	4b57      	ldr	r3, [pc, #348]	; (8001728 <cinematicaInversa+0x830>)
 80015cc:	ed93 7b00 	vldr	d7, [r3]
 80015d0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80015d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <cinematicaInversa+0x814>)
 80015da:	ed93 7b00 	vldr	d7, [r3]
 80015de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80015e6:	eeb0 0b47 	vmov.f64	d0, d7
 80015ea:	f010 ff1d 	bl	8012428 <sqrt>
 80015ee:	eeb0 7b40 	vmov.f64	d7, d0
 80015f2:	ee38 5b47 	vsub.f64	d5, d8, d7
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <cinematicaInversa+0x830>)
 80015f8:	ed93 7b00 	vldr	d7, [r3]
 80015fc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001600:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <cinematicaInversa+0x838>)
 8001606:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 800160a:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <cinematicaInversa+0x83c>)
 800160c:	ed93 7b00 	vldr	d7, [r3]
 8001610:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001614:	eeb0 0b47 	vmov.f64	d0, d7
 8001618:	f010 fc86 	bl	8011f28 <pow>
 800161c:	eeb0 5b40 	vmov.f64	d5, d0
 8001620:	4b45      	ldr	r3, [pc, #276]	; (8001738 <cinematicaInversa+0x840>)
 8001622:	ed93 7b00 	vldr	d7, [r3]
 8001626:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800162a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <cinematicaInversa+0x818>)
 8001630:	ed93 7b00 	vldr	d7, [r3]
 8001634:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001638:	ee35 7b47 	vsub.f64	d7, d5, d7
 800163c:	eeb0 0b47 	vmov.f64	d0, d7
 8001640:	f010 fef2 	bl	8012428 <sqrt>
 8001644:	eeb0 6b40 	vmov.f64	d6, d0
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <cinematicaInversa+0x83c>)
 800164a:	ed93 7b00 	vldr	d7, [r3]
 800164e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <cinematicaInversa+0x840>)
 8001654:	ed93 7b00 	vldr	d7, [r3]
 8001658:	ee37 6b07 	vadd.f64	d6, d7, d7
 800165c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <cinematicaInversa+0x844>)
 8001662:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <cinematicaInversa+0x83c>)
 8001668:	ed93 7b00 	vldr	d7, [r3]
 800166c:	eeb1 8b47 	vneg.f64	d8, d7
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <cinematicaInversa+0x83c>)
 8001672:	ed93 7b00 	vldr	d7, [r3]
 8001676:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800167a:	eeb0 0b47 	vmov.f64	d0, d7
 800167e:	f010 fc53 	bl	8011f28 <pow>
 8001682:	eeb0 5b40 	vmov.f64	d5, d0
 8001686:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <cinematicaInversa+0x840>)
 8001688:	ed93 7b00 	vldr	d7, [r3]
 800168c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001690:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <cinematicaInversa+0x818>)
 8001696:	ed93 7b00 	vldr	d7, [r3]
 800169a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800169e:	ee35 7b47 	vsub.f64	d7, d5, d7
 80016a2:	eeb0 0b47 	vmov.f64	d0, d7
 80016a6:	f010 febf 	bl	8012428 <sqrt>
 80016aa:	eeb0 7b40 	vmov.f64	d7, d0
 80016ae:	ee38 5b47 	vsub.f64	d5, d8, d7
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <cinematicaInversa+0x840>)
 80016b4:	ed93 7b00 	vldr	d7, [r3]
 80016b8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80016bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <cinematicaInversa+0x848>)
 80016c2:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 80016c6:	491f      	ldr	r1, [pc, #124]	; (8001744 <cinematicaInversa+0x84c>)
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9c1 2300 	strd	r2, r3, [r1]
 80016d4:	e038      	b.n	8001748 <cinematicaInversa+0x850>
 80016d6:	bf00      	nop
 80016d8:	47ae147c 	.word	0x47ae147c
 80016dc:	3fa47ae1 	.word	0x3fa47ae1
 80016e0:	93d96639 	.word	0x93d96639
 80016e4:	3f9ce6c0 	.word	0x3f9ce6c0
 80016e8:	5625749b 	.word	0x5625749b
 80016ec:	3faf09d1 	.word	0x3faf09d1
 80016f0:	f705857e 	.word	0xf705857e
 80016f4:	3f881e03 	.word	0x3f881e03
 80016f8:	1eb851ec 	.word	0x1eb851ec
 80016fc:	3fa1eb85 	.word	0x3fa1eb85
 8001700:	70a3d70a 	.word	0x70a3d70a
 8001704:	3fd70a3d 	.word	0x3fd70a3d
 8001708:	24000308 	.word	0x24000308
 800170c:	24000350 	.word	0x24000350
 8001710:	24000398 	.word	0x24000398
 8001714:	24000300 	.word	0x24000300
 8001718:	240002f8 	.word	0x240002f8
 800171c:	24000320 	.word	0x24000320
 8001720:	24000328 	.word	0x24000328
 8001724:	24000348 	.word	0x24000348
 8001728:	24000340 	.word	0x24000340
 800172c:	24000368 	.word	0x24000368
 8001730:	24000370 	.word	0x24000370
 8001734:	24000390 	.word	0x24000390
 8001738:	24000388 	.word	0x24000388
 800173c:	240003b0 	.word	0x240003b0
 8001740:	240003b8 	.word	0x240003b8
 8001744:	24000310 	.word	0x24000310
	XJ1_2 = 0;
 8001748:	49f1      	ldr	r1, [pc, #964]	; (8001b10 <cinematicaInversa+0xc18>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001756:	4bef      	ldr	r3, [pc, #956]	; (8001b14 <cinematicaInversa+0xc1c>)
 8001758:	ed93 7b00 	vldr	d7, [r3]
 800175c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8001aa8 <cinematicaInversa+0xbb0>
 8001760:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001764:	4bec      	ldr	r3, [pc, #944]	; (8001b18 <cinematicaInversa+0xc20>)
 8001766:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 800176a:	4bec      	ldr	r3, [pc, #944]	; (8001b1c <cinematicaInversa+0xc24>)
 800176c:	ed93 7b00 	vldr	d7, [r3]
 8001770:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001aa8 <cinematicaInversa+0xbb0>
 8001774:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001778:	4be9      	ldr	r3, [pc, #932]	; (8001b20 <cinematicaInversa+0xc28>)
 800177a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 800177e:	4be9      	ldr	r3, [pc, #932]	; (8001b24 <cinematicaInversa+0xc2c>)
 8001780:	ed93 7b00 	vldr	d7, [r3]
 8001784:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001ab0 <cinematicaInversa+0xbb8>
 8001788:	ee27 7b06 	vmul.f64	d7, d7, d6
 800178c:	4be6      	ldr	r3, [pc, #920]	; (8001b28 <cinematicaInversa+0xc30>)
 800178e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001792:	4be6      	ldr	r3, [pc, #920]	; (8001b2c <cinematicaInversa+0xc34>)
 8001794:	ed93 7b00 	vldr	d7, [r3]
 8001798:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8001ab0 <cinematicaInversa+0xbb8>
 800179c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017a0:	4be3      	ldr	r3, [pc, #908]	; (8001b30 <cinematicaInversa+0xc38>)
 80017a2:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80017a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80017aa:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001ab8 <cinematicaInversa+0xbc0>
 80017ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017b2:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001ac0 <cinematicaInversa+0xbc8>
 80017b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ba:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80017be:	ee27 5b06 	vmul.f64	d5, d7, d6
 80017c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80017c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017ca:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017ce:	4bd9      	ldr	r3, [pc, #868]	; (8001b34 <cinematicaInversa+0xc3c>)
 80017d0:	ed93 7b00 	vldr	d7, [r3]
 80017d4:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80017dc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001ab8 <cinematicaInversa+0xbc0>
 80017e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017e8:	eeb0 0b47 	vmov.f64	d0, d7
 80017ec:	f010 fb9c 	bl	8011f28 <pow>
 80017f0:	eeb0 9b40 	vmov.f64	d9, d0
 80017f4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001800:	f010 fb92 	bl	8011f28 <pow>
 8001804:	eeb0 7b40 	vmov.f64	d7, d0
 8001808:	ee39 7b07 	vadd.f64	d7, d9, d7
 800180c:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001ac8 <cinematicaInversa+0xbd0>
 8001810:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001814:	ed97 7b00 	vldr	d7, [r7]
 8001818:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800181c:	eeb0 0b47 	vmov.f64	d0, d7
 8001820:	f010 fb82 	bl	8011f28 <pow>
 8001824:	eeb0 7b40 	vmov.f64	d7, d0
 8001828:	ee39 7b07 	vadd.f64	d7, d9, d7
 800182c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001ad0 <cinematicaInversa+0xbd8>
 8001830:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001834:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001ad8 <cinematicaInversa+0xbe0>
 8001838:	ee37 5b06 	vadd.f64	d5, d7, d6
 800183c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001840:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001844:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001848:	ee38 7b07 	vadd.f64	d7, d8, d7
 800184c:	4bba      	ldr	r3, [pc, #744]	; (8001b38 <cinematicaInversa+0xc40>)
 800184e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001852:	ed97 7b02 	vldr	d7, [r7, #8]
 8001856:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001ab8 <cinematicaInversa+0xbc0>
 800185a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800185e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001ac0 <cinematicaInversa+0xbc8>
 8001862:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001866:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800186a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800186e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001872:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001876:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800187a:	4bb0      	ldr	r3, [pc, #704]	; (8001b3c <cinematicaInversa+0xc44>)
 800187c:	ed93 7b00 	vldr	d7, [r3]
 8001880:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001884:	ed97 7b02 	vldr	d7, [r7, #8]
 8001888:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001ab8 <cinematicaInversa+0xbc0>
 800188c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001890:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001894:	eeb0 0b47 	vmov.f64	d0, d7
 8001898:	f010 fb46 	bl	8011f28 <pow>
 800189c:	eeb0 9b40 	vmov.f64	d9, d0
 80018a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80018a4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018a8:	eeb0 0b47 	vmov.f64	d0, d7
 80018ac:	f010 fb3c 	bl	8011f28 <pow>
 80018b0:	eeb0 7b40 	vmov.f64	d7, d0
 80018b4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80018b8:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001ac8 <cinematicaInversa+0xbd0>
 80018bc:	ee37 9b46 	vsub.f64	d9, d7, d6
 80018c0:	ed97 7b00 	vldr	d7, [r7]
 80018c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018c8:	eeb0 0b47 	vmov.f64	d0, d7
 80018cc:	f010 fb2c 	bl	8011f28 <pow>
 80018d0:	eeb0 7b40 	vmov.f64	d7, d0
 80018d4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80018d8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001ad0 <cinematicaInversa+0xbd8>
 80018dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018e0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001ad8 <cinematicaInversa+0xbe0>
 80018e4:	ee37 5b06 	vadd.f64	d5, d7, d6
 80018e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80018ec:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018f4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80018f8:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <cinematicaInversa+0xc48>)
 80018fa:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80018fe:	ed97 7b00 	vldr	d7, [r7]
 8001902:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001ae0 <cinematicaInversa+0xbe8>
 8001906:	ee37 7b06 	vadd.f64	d7, d7, d6
 800190a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001ae8 <cinematicaInversa+0xbf0>
 800190e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001912:	ed97 7b02 	vldr	d7, [r7, #8]
 8001916:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001af0 <cinematicaInversa+0xbf8>
 800191a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800191e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001922:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001926:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001af8 <cinematicaInversa+0xc00>
 800192a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800192e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001932:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001936:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800193a:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <cinematicaInversa+0xc1c>)
 800193c:	ed93 7b00 	vldr	d7, [r3]
 8001940:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001944:	ed97 7b00 	vldr	d7, [r7]
 8001948:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001ae0 <cinematicaInversa+0xbe8>
 800194c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001950:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001954:	eeb0 0b47 	vmov.f64	d0, d7
 8001958:	f010 fae6 	bl	8011f28 <pow>
 800195c:	eeb0 7b40 	vmov.f64	d7, d0
 8001960:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001b00 <cinematicaInversa+0xc08>
 8001964:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001968:	ed97 7b02 	vldr	d7, [r7, #8]
 800196c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001af0 <cinematicaInversa+0xbf8>
 8001970:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001974:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001978:	eeb0 0b47 	vmov.f64	d0, d7
 800197c:	f010 fad4 	bl	8011f28 <pow>
 8001980:	eeb0 7b40 	vmov.f64	d7, d0
 8001984:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001988:	ed97 7b04 	vldr	d7, [r7, #16]
 800198c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001990:	eeb0 0b47 	vmov.f64	d0, d7
 8001994:	f010 fac8 	bl	8011f28 <pow>
 8001998:	eeb0 7b40 	vmov.f64	d7, d0
 800199c:	ee39 7b07 	vadd.f64	d7, d9, d7
 80019a0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001ac8 <cinematicaInversa+0xbd0>
 80019a4:	ee37 5b46 	vsub.f64	d5, d7, d6
 80019a8:	ed97 7b04 	vldr	d7, [r7, #16]
 80019ac:	ee37 6b07 	vadd.f64	d6, d7, d7
 80019b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019b4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <cinematicaInversa+0xc4c>)
 80019ba:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80019be:	ed97 7b00 	vldr	d7, [r7]
 80019c2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001ae0 <cinematicaInversa+0xbe8>
 80019c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019ca:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001ae8 <cinematicaInversa+0xbf0>
 80019ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80019d6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001af0 <cinematicaInversa+0xbf8>
 80019da:	ee37 7b05 	vadd.f64	d7, d7, d5
 80019de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80019e6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001af8 <cinematicaInversa+0xc00>
 80019ea:	ee37 5b06 	vadd.f64	d5, d7, d6
 80019ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80019f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019f6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80019fa:	4b48      	ldr	r3, [pc, #288]	; (8001b1c <cinematicaInversa+0xc24>)
 80019fc:	ed93 7b00 	vldr	d7, [r3]
 8001a00:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001a04:	ed97 7b00 	vldr	d7, [r7]
 8001a08:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001ae0 <cinematicaInversa+0xbe8>
 8001a0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a10:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a14:	eeb0 0b47 	vmov.f64	d0, d7
 8001a18:	f010 fa86 	bl	8011f28 <pow>
 8001a1c:	eeb0 7b40 	vmov.f64	d7, d0
 8001a20:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001b00 <cinematicaInversa+0xc08>
 8001a24:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001a28:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a2c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001af0 <cinematicaInversa+0xbf8>
 8001a30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a34:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a38:	eeb0 0b47 	vmov.f64	d0, d7
 8001a3c:	f010 fa74 	bl	8011f28 <pow>
 8001a40:	eeb0 7b40 	vmov.f64	d7, d0
 8001a44:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001a48:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a4c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a50:	eeb0 0b47 	vmov.f64	d0, d7
 8001a54:	f010 fa68 	bl	8011f28 <pow>
 8001a58:	eeb0 7b40 	vmov.f64	d7, d0
 8001a5c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001a60:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001ac8 <cinematicaInversa+0xbd0>
 8001a64:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001a68:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a6c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001a70:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a74:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <cinematicaInversa+0xc50>)
 8001a7a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001a7e:	ed97 7b00 	vldr	d7, [r7]
 8001a82:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001ae0 <cinematicaInversa+0xbe8>
 8001a86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a8a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001b08 <cinematicaInversa+0xc10>
 8001a8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a92:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a96:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001af0 <cinematicaInversa+0xbf8>
 8001a9a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001a9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001aa2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001aa6:	e051      	b.n	8001b4c <cinematicaInversa+0xc54>
 8001aa8:	e8584caa 	.word	0xe8584caa
 8001aac:	3ffbb67a 	.word	0x3ffbb67a
 8001ab0:	e8584caa 	.word	0xe8584caa
 8001ab4:	bffbb67a 	.word	0xbffbb67a
 8001ab8:	1eb851ec 	.word	0x1eb851ec
 8001abc:	3fb1eb85 	.word	0x3fb1eb85
 8001ac0:	24dd2f1b 	.word	0x24dd2f1b
 8001ac4:	3fc58106 	.word	0x3fc58106
 8001ac8:	70a3d70a 	.word	0x70a3d70a
 8001acc:	3fd70a3d 	.word	0x3fd70a3d
 8001ad0:	93d96639 	.word	0x93d96639
 8001ad4:	3f9ce6c0 	.word	0x3f9ce6c0
 8001ad8:	47ae147c 	.word	0x47ae147c
 8001adc:	3fa47ae1 	.word	0x3fa47ae1
 8001ae0:	5625749b 	.word	0x5625749b
 8001ae4:	3faf09d1 	.word	0x3faf09d1
 8001ae8:	e8584caa 	.word	0xe8584caa
 8001aec:	c00bb67a 	.word	0xc00bb67a
 8001af0:	1eb851ec 	.word	0x1eb851ec
 8001af4:	3fa1eb85 	.word	0x3fa1eb85
 8001af8:	24dd2f1d 	.word	0x24dd2f1d
 8001afc:	3fe58106 	.word	0x3fe58106
 8001b00:	f705857e 	.word	0xf705857e
 8001b04:	3f881e03 	.word	0x3f881e03
 8001b08:	e8584caa 	.word	0xe8584caa
 8001b0c:	400bb67a 	.word	0x400bb67a
 8001b10:	24000318 	.word	0x24000318
 8001b14:	24000368 	.word	0x24000368
 8001b18:	24000358 	.word	0x24000358
 8001b1c:	24000370 	.word	0x24000370
 8001b20:	24000360 	.word	0x24000360
 8001b24:	240003b0 	.word	0x240003b0
 8001b28:	240003a0 	.word	0x240003a0
 8001b2c:	240003b8 	.word	0x240003b8
 8001b30:	240003a8 	.word	0x240003a8
 8001b34:	24000320 	.word	0x24000320
 8001b38:	24000330 	.word	0x24000330
 8001b3c:	24000328 	.word	0x24000328
 8001b40:	24000338 	.word	0x24000338
 8001b44:	24000378 	.word	0x24000378
 8001b48:	24000380 	.word	0x24000380
 8001b4c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001d90 <cinematicaInversa+0xe98>
 8001b50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b54:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001d98 <cinematicaInversa+0xea0>
 8001b58:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001b5c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001b68:	4b9f      	ldr	r3, [pc, #636]	; (8001de8 <cinematicaInversa+0xef0>)
 8001b6a:	ed93 7b00 	vldr	d7, [r3]
 8001b6e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001b72:	ed97 7b00 	vldr	d7, [r7]
 8001b76:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001da0 <cinematicaInversa+0xea8>
 8001b7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b7e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b82:	eeb0 0b47 	vmov.f64	d0, d7
 8001b86:	f010 f9cf 	bl	8011f28 <pow>
 8001b8a:	eeb0 9b40 	vmov.f64	d9, d0
 8001b8e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b92:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8001da8 <cinematicaInversa+0xeb0>
 8001b96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba2:	f010 f9c1 	bl	8011f28 <pow>
 8001ba6:	eeb0 7b40 	vmov.f64	d7, d0
 8001baa:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001bae:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bb2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bb6:	eeb0 0b47 	vmov.f64	d0, d7
 8001bba:	f010 f9b5 	bl	8011f28 <pow>
 8001bbe:	eeb0 7b40 	vmov.f64	d7, d0
 8001bc2:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001bc6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001db0 <cinematicaInversa+0xeb8>
 8001bca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bce:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001db8 <cinematicaInversa+0xec0>
 8001bd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001dc0 <cinematicaInversa+0xec8>
 8001bda:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001bde:	ed97 7b04 	vldr	d7, [r7, #16]
 8001be2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001be6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001bea:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001bee:	4b7f      	ldr	r3, [pc, #508]	; (8001dec <cinematicaInversa+0xef4>)
 8001bf0:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001bf4:	ed97 7b00 	vldr	d7, [r7]
 8001bf8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001da0 <cinematicaInversa+0xea8>
 8001bfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c00:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8001dc8 <cinematicaInversa+0xed0>
 8001c04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c08:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c0c:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001da8 <cinematicaInversa+0xeb0>
 8001c10:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001c14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c1c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001d90 <cinematicaInversa+0xe98>
 8001c20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c24:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001d98 <cinematicaInversa+0xea0>
 8001c28:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001c2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c34:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001c38:	4b6d      	ldr	r3, [pc, #436]	; (8001df0 <cinematicaInversa+0xef8>)
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001c42:	ed97 7b00 	vldr	d7, [r7]
 8001c46:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001da0 <cinematicaInversa+0xea8>
 8001c4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c52:	eeb0 0b47 	vmov.f64	d0, d7
 8001c56:	f010 f967 	bl	8011f28 <pow>
 8001c5a:	eeb0 9b40 	vmov.f64	d9, d0
 8001c5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c62:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001da8 <cinematicaInversa+0xeb0>
 8001c66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c6a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c6e:	eeb0 0b47 	vmov.f64	d0, d7
 8001c72:	f010 f959 	bl	8011f28 <pow>
 8001c76:	eeb0 7b40 	vmov.f64	d7, d0
 8001c7a:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001c7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c86:	eeb0 0b47 	vmov.f64	d0, d7
 8001c8a:	f010 f94d 	bl	8011f28 <pow>
 8001c8e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c92:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001c96:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001db0 <cinematicaInversa+0xeb8>
 8001c9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c9e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001db8 <cinematicaInversa+0xec0>
 8001ca2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ca6:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001dc0 <cinematicaInversa+0xec8>
 8001caa:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001cae:	ed97 7b04 	vldr	d7, [r7, #16]
 8001cb2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001cb6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cba:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001cbe:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <cinematicaInversa+0xefc>)
 8001cc0:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <cinematicaInversa+0xf00>)
 8001cc6:	ed93 7b00 	vldr	d7, [r3]
 8001cca:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001dd0 <cinematicaInversa+0xed8>
 8001cce:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001cd2:	eeb0 0b46 	vmov.f64	d0, d6
 8001cd6:	f010 fb79 	bl	80123cc <asin>
 8001cda:	eeb0 7b40 	vmov.f64	d7, d0
 8001cde:	eeb1 7b47 	vneg.f64	d7, d7
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <cinematicaInversa+0xf04>)
 8001ce4:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * RAD_TO_DEG;
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <cinematicaInversa+0xf04>)
 8001cea:	ed93 7b00 	vldr	d7, [r3]
 8001cee:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001dd8 <cinematicaInversa+0xee0>
 8001cf2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cf6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001de0 <cinematicaInversa+0xee8>
 8001cfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cfe:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <cinematicaInversa+0xf04>)
 8001d00:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 8001d04:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <cinematicaInversa+0xf08>)
 8001d06:	ed93 7b00 	vldr	d7, [r3]
 8001d0a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001dd0 <cinematicaInversa+0xed8>
 8001d0e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001d12:	eeb0 0b46 	vmov.f64	d0, d6
 8001d16:	f010 fb59 	bl	80123cc <asin>
 8001d1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d1e:	eeb1 7b47 	vneg.f64	d7, d7
 8001d22:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <cinematicaInversa+0xf0c>)
 8001d24:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * RAD_TO_DEG;
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <cinematicaInversa+0xf0c>)
 8001d2a:	ed93 7b00 	vldr	d7, [r3]
 8001d2e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001dd8 <cinematicaInversa+0xee0>
 8001d32:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d36:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001de0 <cinematicaInversa+0xee8>
 8001d3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <cinematicaInversa+0xf0c>)
 8001d40:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <cinematicaInversa+0xef4>)
 8001d46:	ed93 7b00 	vldr	d7, [r3]
 8001d4a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001dd0 <cinematicaInversa+0xed8>
 8001d4e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001d52:	eeb0 0b46 	vmov.f64	d0, d6
 8001d56:	f010 fb39 	bl	80123cc <asin>
 8001d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d5e:	eeb1 7b47 	vneg.f64	d7, d7
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <cinematicaInversa+0xf10>)
 8001d64:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * RAD_TO_DEG;
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <cinematicaInversa+0xf10>)
 8001d6a:	ed93 7b00 	vldr	d7, [r3]
 8001d6e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001dd8 <cinematicaInversa+0xee0>
 8001d72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d76:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8001de0 <cinematicaInversa+0xee8>
 8001d7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <cinematicaInversa+0xf10>)
 8001d80:	ed83 7b00 	vstr	d7, [r3]
}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	ecbd 8b04 	vpop	{d8-d9}
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	9ba5e356 	.word	0x9ba5e356
 8001d94:	3fe020c4 	.word	0x3fe020c4
 8001d98:	24dd2f1b 	.word	0x24dd2f1b
 8001d9c:	3fc58106 	.word	0x3fc58106
 8001da0:	5625749b 	.word	0x5625749b
 8001da4:	3faf09d1 	.word	0x3faf09d1
 8001da8:	1eb851ec 	.word	0x1eb851ec
 8001dac:	3fa1eb85 	.word	0x3fa1eb85
 8001db0:	70a3d70a 	.word	0x70a3d70a
 8001db4:	3fd70a3d 	.word	0x3fd70a3d
 8001db8:	93d96639 	.word	0x93d96639
 8001dbc:	3f9ce6c0 	.word	0x3f9ce6c0
 8001dc0:	47ae147c 	.word	0x47ae147c
 8001dc4:	3fa47ae1 	.word	0x3fa47ae1
 8001dc8:	e8584caa 	.word	0xe8584caa
 8001dcc:	400bb67a 	.word	0x400bb67a
 8001dd0:	9999999a 	.word	0x9999999a
 8001dd4:	3fc99999 	.word	0x3fc99999
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	40668000 	.word	0x40668000
 8001de0:	54442eea 	.word	0x54442eea
 8001de4:	400921fb 	.word	0x400921fb
 8001de8:	240003b0 	.word	0x240003b0
 8001dec:	240003c0 	.word	0x240003c0
 8001df0:	240003b8 	.word	0x240003b8
 8001df4:	240003c8 	.word	0x240003c8
 8001df8:	24000330 	.word	0x24000330
 8001dfc:	24000658 	.word	0x24000658
 8001e00:	24000378 	.word	0x24000378
 8001e04:	24000660 	.word	0x24000660
 8001e08:	24000668 	.word	0x24000668

08001e0c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e22:	4b74      	ldr	r3, [pc, #464]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e28:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e32:	4b70      	ldr	r3, [pc, #448]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	4b6c      	ldr	r3, [pc, #432]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e46:	4a6b      	ldr	r2, [pc, #428]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e66:	f043 0320 	orr.w	r3, r3, #32
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6e:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e82:	4a5c      	ldr	r2, [pc, #368]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e8c:	4b59      	ldr	r3, [pc, #356]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	4b56      	ldr	r3, [pc, #344]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea0:	4a54      	ldr	r2, [pc, #336]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eaa:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebe:	4a4d      	ldr	r2, [pc, #308]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <MX_GPIO_Init+0x1e8>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001efa:	483f      	ldr	r0, [pc, #252]	; (8001ff8 <MX_GPIO_Init+0x1ec>)
 8001efc:	f006 f82e 	bl	8007f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	2170      	movs	r1, #112	; 0x70
 8001f04:	483d      	ldr	r0, [pc, #244]	; (8001ffc <MX_GPIO_Init+0x1f0>)
 8001f06:	f006 f829 	bl	8007f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8001f0a:	233f      	movs	r3, #63	; 0x3f
 8001f0c:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4838      	ldr	r0, [pc, #224]	; (8002000 <MX_GPIO_Init+0x1f4>)
 8001f20:	f005 fe54 	bl	8007bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f30:	2302      	movs	r3, #2
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	482f      	ldr	r0, [pc, #188]	; (8001ff8 <MX_GPIO_Init+0x1ec>)
 8001f3c:	f005 fe46 	bl	8007bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8001f40:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4827      	ldr	r0, [pc, #156]	; (8001ff8 <MX_GPIO_Init+0x1ec>)
 8001f5a:	f005 fe37 	bl	8007bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8001f5e:	2370      	movs	r3, #112	; 0x70
 8001f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	2301      	movs	r3, #1
 8001f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	4619      	mov	r1, r3
 8001f74:	4821      	ldr	r0, [pc, #132]	; (8001ffc <MX_GPIO_Init+0x1f0>)
 8001f76:	f005 fe29 	bl	8007bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2006      	movs	r0, #6
 8001f80:	f005 f87d 	bl	800707e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f84:	2006      	movs	r0, #6
 8001f86:	f005 f894 	bl	80070b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	2007      	movs	r0, #7
 8001f90:	f005 f875 	bl	800707e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f94:	2007      	movs	r0, #7
 8001f96:	f005 f88c 	bl	80070b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	2008      	movs	r0, #8
 8001fa0:	f005 f86d 	bl	800707e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fa4:	2008      	movs	r0, #8
 8001fa6:	f005 f884 	bl	80070b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2101      	movs	r1, #1
 8001fae:	2009      	movs	r0, #9
 8001fb0:	f005 f865 	bl	800707e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001fb4:	2009      	movs	r0, #9
 8001fb6:	f005 f87c 	bl	80070b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f005 f85d 	bl	800707e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001fc4:	200a      	movs	r0, #10
 8001fc6:	f005 f874 	bl	80070b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2101      	movs	r1, #1
 8001fce:	2017      	movs	r0, #23
 8001fd0:	f005 f855 	bl	800707e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fd4:	2017      	movs	r0, #23
 8001fd6:	f005 f86c 	bl	80070b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2102      	movs	r1, #2
 8001fde:	2028      	movs	r0, #40	; 0x28
 8001fe0:	f005 f84d 	bl	800707e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fe4:	2028      	movs	r0, #40	; 0x28
 8001fe6:	f005 f864 	bl	80070b2 <HAL_NVIC_EnableIRQ>

}
 8001fea:	bf00      	nop
 8001fec:	3730      	adds	r7, #48	; 0x30
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020800 	.word	0x58020800
 8001ffc:	58020c00 	.word	0x58020c00
 8002000:	58021000 	.word	0x58021000
 8002004:	00000000 	.word	0x00000000

08002008 <homing>:
double rpm = 2.0;  //Valor experimental.
bool homAprox, homStart,homFin;
bool hom1,hom2,hom3;


void homing(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

	homAprox = true;
 800200c:	4bb6      	ldr	r3, [pc, #728]	; (80022e8 <homing+0x2e0>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8002012:	4bb6      	ldr	r3, [pc, #728]	; (80022ec <homing+0x2e4>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]

    homFin = false;
 8002018:	4bb5      	ldr	r3, [pc, #724]	; (80022f0 <homing+0x2e8>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    hom1=false;
 800201e:	4bb5      	ldr	r3, [pc, #724]	; (80022f4 <homing+0x2ec>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hom2=false;
 8002024:	4bb4      	ldr	r3, [pc, #720]	; (80022f8 <homing+0x2f0>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
    hom3=false;
 800202a:	4bb4      	ldr	r3, [pc, #720]	; (80022fc <homing+0x2f4>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002036:	48b2      	ldr	r0, [pc, #712]	; (8002300 <homing+0x2f8>)
 8002038:	f005 ff90 	bl	8007f5c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002042:	48af      	ldr	r0, [pc, #700]	; (8002300 <homing+0x2f8>)
 8002044:	f005 ff8a 	bl	8007f5c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800204e:	48ac      	ldr	r0, [pc, #688]	; (8002300 <homing+0x2f8>)
 8002050:	f005 ff84 	bl	8007f5c <HAL_GPIO_WritePin>

	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8002054:	2100      	movs	r1, #0
 8002056:	48ab      	ldr	r0, [pc, #684]	; (8002304 <homing+0x2fc>)
 8002058:	f009 f962 	bl	800b320 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 800205c:	2100      	movs	r1, #0
 800205e:	48aa      	ldr	r0, [pc, #680]	; (8002308 <homing+0x300>)
 8002060:	f009 f95e 	bl	800b320 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8002064:	2100      	movs	r1, #0
 8002066:	48a9      	ldr	r0, [pc, #676]	; (800230c <homing+0x304>)
 8002068:	f009 f95a 	bl	800b320 <HAL_TIM_IC_Stop_IT>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 800206c:	2006      	movs	r0, #6
 800206e:	f005 f82e 	bl	80070ce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8002072:	2007      	movs	r0, #7
 8002074:	f005 f82b 	bl	80070ce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8002078:	2008      	movs	r0, #8
 800207a:	f005 f828 	bl	80070ce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 800207e:	2009      	movs	r0, #9
 8002080:	f005 f825 	bl	80070ce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8002084:	200a      	movs	r0, #10
 8002086:	f005 f822 	bl	80070ce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 800208a:	2017      	movs	r0, #23
 800208c:	f005 f81f 	bl	80070ce <HAL_NVIC_DisableIRQ>

    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8002090:	2100      	movs	r1, #0
 8002092:	489f      	ldr	r0, [pc, #636]	; (8002310 <homing+0x308>)
 8002094:	f008 fdf8 	bl	800ac88 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8002098:	2100      	movs	r1, #0
 800209a:	489e      	ldr	r0, [pc, #632]	; (8002314 <homing+0x30c>)
 800209c:	f008 fdf4 	bl	800ac88 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 80020a0:	2100      	movs	r1, #0
 80020a2:	489d      	ldr	r0, [pc, #628]	; (8002318 <homing+0x310>)
 80020a4:	f008 fdf0 	bl	800ac88 <HAL_TIM_PWM_Stop>

	periodoM[0] = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * STEPREV)) - 1.0);
 80020a8:	4b9c      	ldr	r3, [pc, #624]	; (800231c <homing+0x314>)
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	ee07 3a90 	vmov	s15, r3
 80020b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80020b8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80020bc:	4b98      	ldr	r3, [pc, #608]	; (8002320 <homing+0x318>)
 80020be:	ed93 7b00 	vldr	d7, [r3]
 80020c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80020c6:	ed9f 6b84 	vldr	d6, [pc, #528]	; 80022d8 <homing+0x2d0>
 80020ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020ce:	ed9f 5b84 	vldr	d5, [pc, #528]	; 80022e0 <homing+0x2d8>
 80020d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80020da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020e6:	4b8f      	ldr	r3, [pc, #572]	; (8002324 <homing+0x31c>)
 80020e8:	ed83 7b00 	vstr	d7, [r3]
	periodoM[1] = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * STEPREV)) - 1.0);
 80020ec:	4b8e      	ldr	r3, [pc, #568]	; (8002328 <homing+0x320>)
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80020fc:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002100:	4b87      	ldr	r3, [pc, #540]	; (8002320 <homing+0x318>)
 8002102:	ed93 7b00 	vldr	d7, [r3]
 8002106:	ee26 7b07 	vmul.f64	d7, d6, d7
 800210a:	ed9f 6b73 	vldr	d6, [pc, #460]	; 80022d8 <homing+0x2d0>
 800210e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002112:	ed9f 5b73 	vldr	d5, [pc, #460]	; 80022e0 <homing+0x2d8>
 8002116:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800211a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800211e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002122:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800212a:	4b7e      	ldr	r3, [pc, #504]	; (8002324 <homing+0x31c>)
 800212c:	ed83 7b02 	vstr	d7, [r3, #8]
	periodoM[2] = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * STEPREV)) - 1.0);
 8002130:	4b7e      	ldr	r3, [pc, #504]	; (800232c <homing+0x324>)
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800213c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002140:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <homing+0x318>)
 8002146:	ed93 7b00 	vldr	d7, [r3]
 800214a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800214e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80022d8 <homing+0x2d0>
 8002152:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002156:	ed9f 5b62 	vldr	d5, [pc, #392]	; 80022e0 <homing+0x2d8>
 800215a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800215e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002162:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002166:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800216a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800216e:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <homing+0x31c>)
 8002170:	ed83 7b04 	vstr	d7, [r3, #16]

	TIM12->ARR = periodoM[0];
 8002174:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <homing+0x31c>)
 8002176:	ed93 7b00 	vldr	d7, [r3]
 800217a:	4b68      	ldr	r3, [pc, #416]	; (800231c <homing+0x314>)
 800217c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002180:	ee17 2a90 	vmov	r2, s15
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8002186:	4b65      	ldr	r3, [pc, #404]	; (800231c <homing+0x314>)
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002192:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002196:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800219a:	4b60      	ldr	r3, [pc, #384]	; (800231c <homing+0x314>)
 800219c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021a0:	ee17 2a90 	vmov	r2, s15
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->ARR =periodoM[1];
 80021a6:	4b5f      	ldr	r3, [pc, #380]	; (8002324 <homing+0x31c>)
 80021a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80021ac:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <homing+0x320>)
 80021ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021b2:	ee17 2a90 	vmov	r2, s15
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80021b8:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <homing+0x320>)
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80021c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80021c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <homing+0x320>)
 80021ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021d2:	ee17 2a90 	vmov	r2, s15
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->ARR =periodoM[2];
 80021d8:	4b52      	ldr	r3, [pc, #328]	; (8002324 <homing+0x31c>)
 80021da:	ed93 7b04 	vldr	d7, [r3, #16]
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <homing+0x324>)
 80021e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021e4:	ee17 2a90 	vmov	r2, s15
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80021ea:	4b50      	ldr	r3, [pc, #320]	; (800232c <homing+0x324>)
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80021f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80021fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021fe:	4b4b      	ldr	r3, [pc, #300]	; (800232c <homing+0x324>)
 8002200:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002204:	ee17 2a90 	vmov	r2, s15
 8002208:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 800220a:	e047      	b.n	800229c <homing+0x294>

        Start_PWM_MOTOR_1;
 800220c:	2100      	movs	r1, #0
 800220e:	4840      	ldr	r0, [pc, #256]	; (8002310 <homing+0x308>)
 8002210:	f008 fc2c 	bl	800aa6c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8002214:	2100      	movs	r1, #0
 8002216:	483f      	ldr	r0, [pc, #252]	; (8002314 <homing+0x30c>)
 8002218:	f008 fc28 	bl	800aa6c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 800221c:	2100      	movs	r1, #0
 800221e:	483e      	ldr	r0, [pc, #248]	; (8002318 <homing+0x310>)
 8002220:	f008 fc24 	bl	800aa6c <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8002224:	2101      	movs	r1, #1
 8002226:	4842      	ldr	r0, [pc, #264]	; (8002330 <homing+0x328>)
 8002228:	f005 fe80 	bl	8007f2c <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <homing+0x246>
 8002232:	2104      	movs	r1, #4
 8002234:	483e      	ldr	r0, [pc, #248]	; (8002330 <homing+0x328>)
 8002236:	f005 fe79 	bl	8007f2c <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <homing+0x246>
 8002240:	2110      	movs	r1, #16
 8002242:	483b      	ldr	r0, [pc, #236]	; (8002330 <homing+0x328>)
 8002244:	f005 fe72 	bl	8007f2c <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d126      	bne.n	800229c <homing+0x294>
            HAL_Delay(30);
 800224e:	201e      	movs	r0, #30
 8002250:	f004 fde6 	bl	8006e20 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8002254:	2101      	movs	r1, #1
 8002256:	4836      	ldr	r0, [pc, #216]	; (8002330 <homing+0x328>)
 8002258:	f005 fe68 	bl	8007f2c <HAL_GPIO_ReadPin>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <homing+0x276>
 8002262:	2104      	movs	r1, #4
 8002264:	4832      	ldr	r0, [pc, #200]	; (8002330 <homing+0x328>)
 8002266:	f005 fe61 	bl	8007f2c <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <homing+0x276>
 8002270:	2110      	movs	r1, #16
 8002272:	482f      	ldr	r0, [pc, #188]	; (8002330 <homing+0x328>)
 8002274:	f005 fe5a 	bl	8007f2c <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <homing+0x294>

                Stop_PWM_MOTOR_1;
 800227e:	2100      	movs	r1, #0
 8002280:	4823      	ldr	r0, [pc, #140]	; (8002310 <homing+0x308>)
 8002282:	f008 fd01 	bl	800ac88 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8002286:	2100      	movs	r1, #0
 8002288:	4822      	ldr	r0, [pc, #136]	; (8002314 <homing+0x30c>)
 800228a:	f008 fcfd 	bl	800ac88 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 800228e:	2100      	movs	r1, #0
 8002290:	4821      	ldr	r0, [pc, #132]	; (8002318 <homing+0x310>)
 8002292:	f008 fcf9 	bl	800ac88 <HAL_TIM_PWM_Stop>

                homAprox = false;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <homing+0x2e0>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <homing+0x2e0>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1b3      	bne.n	800220c <homing+0x204>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 80022a4:	e16c      	b.n	8002580 <homing+0x578>

        if (ES1s_PRESSED && !hom1) {
 80022a6:	2101      	movs	r1, #1
 80022a8:	4821      	ldr	r0, [pc, #132]	; (8002330 <homing+0x328>)
 80022aa:	f005 fe3f 	bl	8007f2c <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d17d      	bne.n	80023b0 <homing+0x3a8>
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <homing+0x2ec>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d179      	bne.n	80023b0 <homing+0x3a8>

            Stop_PWM_MOTOR_2;
 80022bc:	2100      	movs	r1, #0
 80022be:	4815      	ldr	r0, [pc, #84]	; (8002314 <homing+0x30c>)
 80022c0:	f008 fce2 	bl	800ac88 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80022c4:	2100      	movs	r1, #0
 80022c6:	4814      	ldr	r0, [pc, #80]	; (8002318 <homing+0x310>)
 80022c8:	f008 fcde 	bl	800ac88 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80022cc:	201e      	movs	r0, #30
 80022ce:	f004 fda7 	bl	8006e20 <HAL_Delay>

            while(ES1s_PRESSED){
 80022d2:	e040      	b.n	8002356 <homing+0x34e>
 80022d4:	f3af 8000 	nop.w
 80022d8:	00000000 	.word	0x00000000
 80022dc:	40bf4000 	.word	0x40bf4000
 80022e0:	00000000 	.word	0x00000000
 80022e4:	41ec9c38 	.word	0x41ec9c38
 80022e8:	240003d0 	.word	0x240003d0
 80022ec:	240003d1 	.word	0x240003d1
 80022f0:	240003d2 	.word	0x240003d2
 80022f4:	240003d3 	.word	0x240003d3
 80022f8:	240003d4 	.word	0x240003d4
 80022fc:	240003d5 	.word	0x240003d5
 8002300:	58020800 	.word	0x58020800
 8002304:	24000844 	.word	0x24000844
 8002308:	24000890 	.word	0x24000890
 800230c:	240008dc 	.word	0x240008dc
 8002310:	24000974 	.word	0x24000974
 8002314:	240009c0 	.word	0x240009c0
 8002318:	24000a0c 	.word	0x24000a0c
 800231c:	40001800 	.word	0x40001800
 8002320:	24000000 	.word	0x24000000
 8002324:	24000778 	.word	0x24000778
 8002328:	40001c00 	.word	0x40001c00
 800232c:	40002000 	.word	0x40002000
 8002330:	58021000 	.word	0x58021000

                negative_Dir_MOTOR_1;
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233a:	4895      	ldr	r0, [pc, #596]	; (8002590 <homing+0x588>)
 800233c:	f005 fe0e 	bl	8007f5c <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 8002340:	2000      	movs	r0, #0
 8002342:	f004 fd6d 	bl	8006e20 <HAL_Delay>
                Start_PWM_MOTOR_1;
 8002346:	2100      	movs	r1, #0
 8002348:	4892      	ldr	r0, [pc, #584]	; (8002594 <homing+0x58c>)
 800234a:	f008 fb8f 	bl	800aa6c <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 800234e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002352:	f004 fd65 	bl	8006e20 <HAL_Delay>
            while(ES1s_PRESSED){
 8002356:	2101      	movs	r1, #1
 8002358:	488f      	ldr	r0, [pc, #572]	; (8002598 <homing+0x590>)
 800235a:	f005 fde7 	bl	8007f2c <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0e7      	beq.n	8002334 <homing+0x32c>

            }

            Stop_PWM_MOTOR_1;
 8002364:	2100      	movs	r1, #0
 8002366:	488b      	ldr	r0, [pc, #556]	; (8002594 <homing+0x58c>)
 8002368:	f008 fc8e 	bl	800ac88 <HAL_TIM_PWM_Stop>
            titha1 = 0;
 800236c:	498b      	ldr	r1, [pc, #556]	; (800259c <homing+0x594>)
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9c1 2300 	strd	r2, r3, [r1]
            hom1=true;
 800237a:	4b89      	ldr	r3, [pc, #548]	; (80025a0 <homing+0x598>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 8002380:	2364      	movs	r3, #100	; 0x64
 8002382:	2204      	movs	r2, #4
 8002384:	4987      	ldr	r1, [pc, #540]	; (80025a4 <homing+0x59c>)
 8002386:	4888      	ldr	r0, [pc, #544]	; (80025a8 <homing+0x5a0>)
 8002388:	f00a fbf4 	bl	800cb74 <HAL_UART_Transmit>
            HAL_Delay(30);
 800238c:	201e      	movs	r0, #30
 800238e:	f004 fd47 	bl	8006e20 <HAL_Delay>

            if (ES2s_UNPRESSED && !hom2)Start_PWM_MOTOR_2;
 8002392:	2104      	movs	r1, #4
 8002394:	4880      	ldr	r0, [pc, #512]	; (8002598 <homing+0x590>)
 8002396:	f005 fdc9 	bl	8007f2c <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <homing+0x3a8>
 80023a0:	4b82      	ldr	r3, [pc, #520]	; (80025ac <homing+0x5a4>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d103      	bne.n	80023b0 <homing+0x3a8>
 80023a8:	2100      	movs	r1, #0
 80023aa:	4881      	ldr	r0, [pc, #516]	; (80025b0 <homing+0x5a8>)
 80023ac:	f008 fb5e 	bl	800aa6c <HAL_TIM_PWM_Start>
            //if (ES3s_UNPRESSED && !hom3)Start_PWM_MOTOR_3;


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !hom2){
 80023b0:	2104      	movs	r1, #4
 80023b2:	4879      	ldr	r0, [pc, #484]	; (8002598 <homing+0x590>)
 80023b4:	f005 fdba 	bl	8007f2c <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d14d      	bne.n	800245a <homing+0x452>
 80023be:	4b7b      	ldr	r3, [pc, #492]	; (80025ac <homing+0x5a4>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d149      	bne.n	800245a <homing+0x452>

            Stop_PWM_MOTOR_1;
 80023c6:	2100      	movs	r1, #0
 80023c8:	4872      	ldr	r0, [pc, #456]	; (8002594 <homing+0x58c>)
 80023ca:	f008 fc5d 	bl	800ac88 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80023ce:	2100      	movs	r1, #0
 80023d0:	4878      	ldr	r0, [pc, #480]	; (80025b4 <homing+0x5ac>)
 80023d2:	f008 fc59 	bl	800ac88 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 80023d6:	201e      	movs	r0, #30
 80023d8:	f004 fd22 	bl	8006e20 <HAL_Delay>

            while(ES2s_PRESSED){
 80023dc:	e010      	b.n	8002400 <homing+0x3f8>

                negative_Dir_MOTOR_2;
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023e4:	486a      	ldr	r0, [pc, #424]	; (8002590 <homing+0x588>)
 80023e6:	f005 fdb9 	bl	8007f5c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f004 fd18 	bl	8006e20 <HAL_Delay>
                Start_PWM_MOTOR_2;
 80023f0:	2100      	movs	r1, #0
 80023f2:	486f      	ldr	r0, [pc, #444]	; (80025b0 <homing+0x5a8>)
 80023f4:	f008 fb3a 	bl	800aa6c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80023f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023fc:	f004 fd10 	bl	8006e20 <HAL_Delay>
            while(ES2s_PRESSED){
 8002400:	2104      	movs	r1, #4
 8002402:	4865      	ldr	r0, [pc, #404]	; (8002598 <homing+0x590>)
 8002404:	f005 fd92 	bl	8007f2c <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0e7      	beq.n	80023de <homing+0x3d6>

            }

            Stop_PWM_MOTOR_2;
 800240e:	2100      	movs	r1, #0
 8002410:	4867      	ldr	r0, [pc, #412]	; (80025b0 <homing+0x5a8>)
 8002412:	f008 fc39 	bl	800ac88 <HAL_TIM_PWM_Stop>
            titha2 = 0;
 8002416:	4968      	ldr	r1, [pc, #416]	; (80025b8 <homing+0x5b0>)
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9c1 2300 	strd	r2, r3, [r1]
            hom2=true;
 8002424:	4b61      	ldr	r3, [pc, #388]	; (80025ac <homing+0x5a4>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 800242a:	2364      	movs	r3, #100	; 0x64
 800242c:	2204      	movs	r2, #4
 800242e:	4963      	ldr	r1, [pc, #396]	; (80025bc <homing+0x5b4>)
 8002430:	485d      	ldr	r0, [pc, #372]	; (80025a8 <homing+0x5a0>)
 8002432:	f00a fb9f 	bl	800cb74 <HAL_UART_Transmit>
            HAL_Delay(30);
 8002436:	201e      	movs	r0, #30
 8002438:	f004 fcf2 	bl	8006e20 <HAL_Delay>

            if (ES1s_UNPRESSED && !hom1)Start_PWM_MOTOR_1;
 800243c:	2101      	movs	r1, #1
 800243e:	4856      	ldr	r0, [pc, #344]	; (8002598 <homing+0x590>)
 8002440:	f005 fd74 	bl	8007f2c <HAL_GPIO_ReadPin>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <homing+0x452>
 800244a:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <homing+0x598>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <homing+0x452>
 8002452:	2100      	movs	r1, #0
 8002454:	484f      	ldr	r0, [pc, #316]	; (8002594 <homing+0x58c>)
 8002456:	f008 fb09 	bl	800aa6c <HAL_TIM_PWM_Start>
            //if (ES3s_UNPRESSED && !hom3)Start_PWM_MOTOR_3;

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 800245a:	2110      	movs	r1, #16
 800245c:	484e      	ldr	r0, [pc, #312]	; (8002598 <homing+0x590>)
 800245e:	f005 fd65 	bl	8007f2c <HAL_GPIO_ReadPin>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d158      	bne.n	800251a <homing+0x512>

            Stop_PWM_MOTOR_1;
 8002468:	2100      	movs	r1, #0
 800246a:	484a      	ldr	r0, [pc, #296]	; (8002594 <homing+0x58c>)
 800246c:	f008 fc0c 	bl	800ac88 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 8002470:	2100      	movs	r1, #0
 8002472:	484f      	ldr	r0, [pc, #316]	; (80025b0 <homing+0x5a8>)
 8002474:	f008 fc08 	bl	800ac88 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8002478:	201e      	movs	r0, #30
 800247a:	f004 fcd1 	bl	8006e20 <HAL_Delay>

            while(ES3s_PRESSED){
 800247e:	e010      	b.n	80024a2 <homing+0x49a>

                negative_Dir_MOTOR_3;
 8002480:	2201      	movs	r2, #1
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	4842      	ldr	r0, [pc, #264]	; (8002590 <homing+0x588>)
 8002488:	f005 fd68 	bl	8007f5c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 800248c:	2000      	movs	r0, #0
 800248e:	f004 fcc7 	bl	8006e20 <HAL_Delay>
                Start_PWM_MOTOR_3;
 8002492:	2100      	movs	r1, #0
 8002494:	4847      	ldr	r0, [pc, #284]	; (80025b4 <homing+0x5ac>)
 8002496:	f008 fae9 	bl	800aa6c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800249a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800249e:	f004 fcbf 	bl	8006e20 <HAL_Delay>
            while(ES3s_PRESSED){
 80024a2:	2110      	movs	r1, #16
 80024a4:	483c      	ldr	r0, [pc, #240]	; (8002598 <homing+0x590>)
 80024a6:	f005 fd41 	bl	8007f2c <HAL_GPIO_ReadPin>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0e7      	beq.n	8002480 <homing+0x478>
            }

            Stop_PWM_MOTOR_3;
 80024b0:	2100      	movs	r1, #0
 80024b2:	4840      	ldr	r0, [pc, #256]	; (80025b4 <homing+0x5ac>)
 80024b4:	f008 fbe8 	bl	800ac88 <HAL_TIM_PWM_Stop>
            titha3 = 0;
 80024b8:	4941      	ldr	r1, [pc, #260]	; (80025c0 <homing+0x5b8>)
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9c1 2300 	strd	r2, r3, [r1]
            hom3=true;
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <homing+0x5bc>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80024cc:	2364      	movs	r3, #100	; 0x64
 80024ce:	2204      	movs	r2, #4
 80024d0:	493d      	ldr	r1, [pc, #244]	; (80025c8 <homing+0x5c0>)
 80024d2:	4835      	ldr	r0, [pc, #212]	; (80025a8 <homing+0x5a0>)
 80024d4:	f00a fb4e 	bl	800cb74 <HAL_UART_Transmit>
			HAL_Delay(30);
 80024d8:	201e      	movs	r0, #30
 80024da:	f004 fca1 	bl	8006e20 <HAL_Delay>
            if (ES1s_UNPRESSED && !hom1)Start_PWM_MOTOR_1;
 80024de:	2101      	movs	r1, #1
 80024e0:	482d      	ldr	r0, [pc, #180]	; (8002598 <homing+0x590>)
 80024e2:	f005 fd23 	bl	8007f2c <HAL_GPIO_ReadPin>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <homing+0x4f4>
 80024ec:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <homing+0x598>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <homing+0x4f4>
 80024f4:	2100      	movs	r1, #0
 80024f6:	4827      	ldr	r0, [pc, #156]	; (8002594 <homing+0x58c>)
 80024f8:	f008 fab8 	bl	800aa6c <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !hom2)Start_PWM_MOTOR_2;
 80024fc:	2104      	movs	r1, #4
 80024fe:	4826      	ldr	r0, [pc, #152]	; (8002598 <homing+0x590>)
 8002500:	f005 fd14 	bl	8007f2c <HAL_GPIO_ReadPin>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <homing+0x512>
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <homing+0x5a4>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <homing+0x512>
 8002512:	2100      	movs	r1, #0
 8002514:	4826      	ldr	r0, [pc, #152]	; (80025b0 <homing+0x5a8>)
 8002516:	f008 faa9 	bl	800aa6c <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (hom1 &&hom2 && hom3){
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <homing+0x598>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d02e      	beq.n	8002580 <homing+0x578>
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <homing+0x5a4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d02a      	beq.n	8002580 <homing+0x578>
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <homing+0x5bc>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d026      	beq.n	8002580 <homing+0x578>
        	homFin=true;
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <homing+0x5c4>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]

        	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);//Enciendo interrupcion input capture motor 1
 8002538:	2100      	movs	r1, #0
 800253a:	4825      	ldr	r0, [pc, #148]	; (80025d0 <homing+0x5c8>)
 800253c:	f008 fda0 	bl	800b080 <HAL_TIM_IC_Start_IT>
        	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);//Enciendo interrupcion input capture motor 2
 8002540:	2100      	movs	r1, #0
 8002542:	4824      	ldr	r0, [pc, #144]	; (80025d4 <homing+0x5cc>)
 8002544:	f008 fd9c 	bl	800b080 <HAL_TIM_IC_Start_IT>
        	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//Enciendo interrupcion input capture motor 3
 8002548:	2100      	movs	r1, #0
 800254a:	4823      	ldr	r0, [pc, #140]	; (80025d8 <homing+0x5d0>)
 800254c:	f008 fd98 	bl	800b080 <HAL_TIM_IC_Start_IT>

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002550:	2006      	movs	r0, #6
 8002552:	f004 fdae 	bl	80070b2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8002556:	2007      	movs	r0, #7
 8002558:	f004 fdab 	bl	80070b2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 800255c:	2008      	movs	r0, #8
 800255e:	f004 fda8 	bl	80070b2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002562:	2009      	movs	r0, #9
 8002564:	f004 fda5 	bl	80070b2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8002568:	200a      	movs	r0, #10
 800256a:	f004 fda2 	bl	80070b2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 800256e:	2017      	movs	r0, #23
 8002570:	f004 fd9f 	bl	80070b2 <HAL_NVIC_EnableIRQ>


        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 8002574:	2364      	movs	r3, #100	; 0x64
 8002576:	2204      	movs	r2, #4
 8002578:	4918      	ldr	r1, [pc, #96]	; (80025dc <homing+0x5d4>)
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <homing+0x5a0>)
 800257c:	f00a fafa 	bl	800cb74 <HAL_UART_Transmit>
    while (!homFin){
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <homing+0x5c4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f43f ae8e 	beq.w	80022a6 <homing+0x29e>
        }
       }


    }
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	58020800 	.word	0x58020800
 8002594:	24000974 	.word	0x24000974
 8002598:	58021000 	.word	0x58021000
 800259c:	24000658 	.word	0x24000658
 80025a0:	240003d3 	.word	0x240003d3
 80025a4:	080127a0 	.word	0x080127a0
 80025a8:	24000bfc 	.word	0x24000bfc
 80025ac:	240003d4 	.word	0x240003d4
 80025b0:	240009c0 	.word	0x240009c0
 80025b4:	24000a0c 	.word	0x24000a0c
 80025b8:	24000660 	.word	0x24000660
 80025bc:	080127a4 	.word	0x080127a4
 80025c0:	24000668 	.word	0x24000668
 80025c4:	240003d5 	.word	0x240003d5
 80025c8:	080127a8 	.word	0x080127a8
 80025cc:	240003d2 	.word	0x240003d2
 80025d0:	24000844 	.word	0x24000844
 80025d4:	24000890 	.word	0x24000890
 80025d8:	240008dc 	.word	0x240008dc
 80025dc:	080127ac 	.word	0x080127ac

080025e0 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80025e6:	4b88      	ldr	r3, [pc, #544]	; (8002808 <interpretaComando+0x228>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b70      	cmp	r3, #112	; 0x70
 80025ec:	d035      	beq.n	800265a <interpretaComando+0x7a>
 80025ee:	2b70      	cmp	r3, #112	; 0x70
 80025f0:	f300 8102 	bgt.w	80027f8 <interpretaComando+0x218>
 80025f4:	2b68      	cmp	r3, #104	; 0x68
 80025f6:	d007      	beq.n	8002608 <interpretaComando+0x28>
 80025f8:	2b68      	cmp	r3, #104	; 0x68
 80025fa:	f300 80fd 	bgt.w	80027f8 <interpretaComando+0x218>
 80025fe:	2b48      	cmp	r3, #72	; 0x48
 8002600:	d002      	beq.n	8002608 <interpretaComando+0x28>
 8002602:	2b50      	cmp	r3, #80	; 0x50
 8002604:	d029      	beq.n	800265a <interpretaComando+0x7a>



	}

}
 8002606:	e0f7      	b.n	80027f8 <interpretaComando+0x218>
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	2110      	movs	r1, #16
 800260c:	487f      	ldr	r0, [pc, #508]	; (800280c <interpretaComando+0x22c>)
 800260e:	f005 fca5 	bl	8007f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002612:	2200      	movs	r2, #0
 8002614:	2120      	movs	r1, #32
 8002616:	487d      	ldr	r0, [pc, #500]	; (800280c <interpretaComando+0x22c>)
 8002618:	f005 fca0 	bl	8007f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	2140      	movs	r1, #64	; 0x40
 8002620:	487a      	ldr	r0, [pc, #488]	; (800280c <interpretaComando+0x22c>)
 8002622:	f005 fc9b 	bl	8007f5c <HAL_GPIO_WritePin>
		HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002626:	2032      	movs	r0, #50	; 0x32
 8002628:	f004 fbfa 	bl	8006e20 <HAL_Delay>
		homing();
 800262c:	f7ff fcec 	bl	8002008 <homing>
		Pini.x=0;
 8002630:	4977      	ldr	r1, [pc, #476]	; (8002810 <interpretaComando+0x230>)
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y=0;
 800263e:	4974      	ldr	r1, [pc, #464]	; (8002810 <interpretaComando+0x230>)
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z =-0.5208; //antes era -0.33
 800264c:	4970      	ldr	r1, [pc, #448]	; (8002810 <interpretaComando+0x230>)
 800264e:	a36c      	add	r3, pc, #432	; (adr r3, 8002800 <interpretaComando+0x220>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	e9c1 2304 	strd	r2, r3, [r1, #16]
	break;
 8002658:	e0ce      	b.n	80027f8 <interpretaComando+0x218>
		flagErrorEndStop = 0;
 800265a:	496e      	ldr	r1, [pc, #440]	; (8002814 <interpretaComando+0x234>)
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 8002670:	e0ac      	b.n	80027cc <interpretaComando+0x1ec>
			if(rx_buffer[i] == 'x'){
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	4a64      	ldr	r2, [pc, #400]	; (8002808 <interpretaComando+0x228>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	2b78      	cmp	r3, #120	; 0x78
 800267a:	d133      	bne.n	80026e4 <interpretaComando+0x104>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800267c:	e00c      	b.n	8002698 <interpretaComando+0xb8>
					auxString[j] = rx_buffer[i+1];
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	7bbb      	ldrb	r3, [r7, #14]
 8002684:	4960      	ldr	r1, [pc, #384]	; (8002808 <interpretaComando+0x228>)
 8002686:	5c89      	ldrb	r1, [r1, r2]
 8002688:	4a63      	ldr	r2, [pc, #396]	; (8002818 <interpretaComando+0x238>)
 800268a:	54d1      	strb	r1, [r2, r3]
					j++;
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	3301      	adds	r3, #1
 8002690:	73bb      	strb	r3, [r7, #14]
					i++;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	3301      	adds	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	3301      	adds	r3, #1
 800269c:	4a5a      	ldr	r2, [pc, #360]	; (8002808 <interpretaComando+0x228>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d1ec      	bne.n	800267e <interpretaComando+0x9e>
				Pfin.x = strtod(&auxString[0], NULL);
 80026a4:	2100      	movs	r1, #0
 80026a6:	485c      	ldr	r0, [pc, #368]	; (8002818 <interpretaComando+0x238>)
 80026a8:	f00d fb84 	bl	800fdb4 <strtod>
 80026ac:	eeb0 7b40 	vmov.f64	d7, d0
 80026b0:	4b5a      	ldr	r3, [pc, #360]	; (800281c <interpretaComando+0x23c>)
 80026b2:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	e007      	b.n	80026cc <interpretaComando+0xec>
					auxString[k] = 0;
 80026bc:	4a56      	ldr	r2, [pc, #344]	; (8002818 <interpretaComando+0x238>)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4413      	add	r3, r2
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b0a      	cmp	r3, #10
 80026d0:	ddf4      	ble.n	80026bc <interpretaComando+0xdc>
				j=0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 80026d6:	2364      	movs	r3, #100	; 0x64
 80026d8:	2207      	movs	r2, #7
 80026da:	4951      	ldr	r1, [pc, #324]	; (8002820 <interpretaComando+0x240>)
 80026dc:	4851      	ldr	r0, [pc, #324]	; (8002824 <interpretaComando+0x244>)
 80026de:	f00a fa49 	bl	800cb74 <HAL_UART_Transmit>
 80026e2:	e070      	b.n	80027c6 <interpretaComando+0x1e6>
			else if(rx_buffer[i] == 'y'){
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	4a48      	ldr	r2, [pc, #288]	; (8002808 <interpretaComando+0x228>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	2b79      	cmp	r3, #121	; 0x79
 80026ec:	d133      	bne.n	8002756 <interpretaComando+0x176>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80026ee:	e00c      	b.n	800270a <interpretaComando+0x12a>
					auxString[j] = rx_buffer[i+1];
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	7bbb      	ldrb	r3, [r7, #14]
 80026f6:	4944      	ldr	r1, [pc, #272]	; (8002808 <interpretaComando+0x228>)
 80026f8:	5c89      	ldrb	r1, [r1, r2]
 80026fa:	4a47      	ldr	r2, [pc, #284]	; (8002818 <interpretaComando+0x238>)
 80026fc:	54d1      	strb	r1, [r2, r3]
					j++;
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
 8002700:	3301      	adds	r3, #1
 8002702:	73bb      	strb	r3, [r7, #14]
					i++;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	3301      	adds	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	3301      	adds	r3, #1
 800270e:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <interpretaComando+0x228>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d1ec      	bne.n	80026f0 <interpretaComando+0x110>
				Pfin.y = strtod(&auxString[0], NULL);
 8002716:	2100      	movs	r1, #0
 8002718:	483f      	ldr	r0, [pc, #252]	; (8002818 <interpretaComando+0x238>)
 800271a:	f00d fb4b 	bl	800fdb4 <strtod>
 800271e:	eeb0 7b40 	vmov.f64	d7, d0
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <interpretaComando+0x23c>)
 8002724:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	e007      	b.n	800273e <interpretaComando+0x15e>
					auxString[k] = 0;
 800272e:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <interpretaComando+0x238>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0a      	cmp	r3, #10
 8002742:	ddf4      	ble.n	800272e <interpretaComando+0x14e>
				j=0;
 8002744:	2300      	movs	r3, #0
 8002746:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 8002748:	2364      	movs	r3, #100	; 0x64
 800274a:	2207      	movs	r2, #7
 800274c:	4936      	ldr	r1, [pc, #216]	; (8002828 <interpretaComando+0x248>)
 800274e:	4835      	ldr	r0, [pc, #212]	; (8002824 <interpretaComando+0x244>)
 8002750:	f00a fa10 	bl	800cb74 <HAL_UART_Transmit>
 8002754:	e037      	b.n	80027c6 <interpretaComando+0x1e6>
			else if(rx_buffer[i] == 'z'){
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <interpretaComando+0x228>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	2b7a      	cmp	r3, #122	; 0x7a
 800275e:	d132      	bne.n	80027c6 <interpretaComando+0x1e6>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002760:	e00c      	b.n	800277c <interpretaComando+0x19c>
					auxString[j] = rx_buffer[i+1];
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	7bbb      	ldrb	r3, [r7, #14]
 8002768:	4927      	ldr	r1, [pc, #156]	; (8002808 <interpretaComando+0x228>)
 800276a:	5c89      	ldrb	r1, [r1, r2]
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <interpretaComando+0x238>)
 800276e:	54d1      	strb	r1, [r2, r3]
					j++;
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	3301      	adds	r3, #1
 8002774:	73bb      	strb	r3, [r7, #14]
					i++;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	3301      	adds	r3, #1
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <interpretaComando+0x228>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	2b20      	cmp	r3, #32
 8002786:	d1ec      	bne.n	8002762 <interpretaComando+0x182>
				Pfin.z = strtod(&auxString[0], NULL);
 8002788:	2100      	movs	r1, #0
 800278a:	4823      	ldr	r0, [pc, #140]	; (8002818 <interpretaComando+0x238>)
 800278c:	f00d fb12 	bl	800fdb4 <strtod>
 8002790:	eeb0 7b40 	vmov.f64	d7, d0
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <interpretaComando+0x23c>)
 8002796:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	e007      	b.n	80027b0 <interpretaComando+0x1d0>
					auxString[k] = 0;
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <interpretaComando+0x238>)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b0a      	cmp	r3, #10
 80027b4:	ddf4      	ble.n	80027a0 <interpretaComando+0x1c0>
				j=0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 80027ba:	2364      	movs	r3, #100	; 0x64
 80027bc:	2207      	movs	r2, #7
 80027be:	491b      	ldr	r1, [pc, #108]	; (800282c <interpretaComando+0x24c>)
 80027c0:	4818      	ldr	r0, [pc, #96]	; (8002824 <interpretaComando+0x244>)
 80027c2:	f00a f9d7 	bl	800cb74 <HAL_UART_Transmit>
			i++;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3301      	adds	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <interpretaComando+0x228>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f47f af4d 	bne.w	8002672 <interpretaComando+0x92>
		cinematicaInversa(Pfin);
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <interpretaComando+0x23c>)
 80027da:	ed93 5b00 	vldr	d5, [r3]
 80027de:	ed93 6b02 	vldr	d6, [r3, #8]
 80027e2:	ed93 7b04 	vldr	d7, [r3, #16]
 80027e6:	eeb0 0b45 	vmov.f64	d0, d5
 80027ea:	eeb0 1b46 	vmov.f64	d1, d6
 80027ee:	eeb0 2b47 	vmov.f64	d2, d7
 80027f2:	f7fe fb81 	bl	8000ef8 <cinematicaInversa>
		break;
 80027f6:	bf00      	nop
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	c2f837b5 	.word	0xc2f837b5
 8002804:	bfe0aa64 	.word	0xbfe0aa64
 8002808:	24000724 	.word	0x24000724
 800280c:	58020c00 	.word	0x58020c00
 8002810:	24000698 	.word	0x24000698
 8002814:	240007a0 	.word	0x240007a0
 8002818:	240003d8 	.word	0x240003d8
 800281c:	240006b0 	.word	0x240006b0
 8002820:	080127b0 	.word	0x080127b0
 8002824:	24000bfc 	.word	0x24000bfc
 8002828:	080127b8 	.word	0x080127b8
 800282c:	080127c0 	.word	0x080127c0

08002830 <jacobianoInverso>:
double cross_P2[3];
double cross_P3[3];
double dot[3];


void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b0ad      	sub	sp, #180	; 0xb4
 8002834:	af00      	add	r7, sp, #0
 8002836:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 800283a:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 800283e:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8002842:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8002846:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 800284a:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 800284e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002852:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8002856:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800285a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800285e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002862:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8002866:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800286a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002b78 <jacobianoInverso+0x348>
 800286e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002872:	4bc9      	ldr	r3, [pc, #804]	; (8002b98 <jacobianoInverso+0x368>)
 8002874:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8002878:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800287c:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8002b80 <jacobianoInverso+0x350>
 8002880:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002884:	4bc4      	ldr	r3, [pc, #784]	; (8002b98 <jacobianoInverso+0x368>)
 8002886:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 800288a:	49c3      	ldr	r1, [pc, #780]	; (8002b98 <jacobianoInverso+0x368>)
 800288c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002890:	e9c1 2304 	strd	r2, r3, [r1, #16]

	E2[0] = Pxaux + 0.060621778264911;
 8002894:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002898:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8002b88 <jacobianoInverso+0x358>
 800289c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028a0:	4bbe      	ldr	r3, [pc, #760]	; (8002b9c <jacobianoInverso+0x36c>)
 80028a2:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 80028a6:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80028aa:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8002b90 <jacobianoInverso+0x360>
 80028ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028b2:	4bba      	ldr	r3, [pc, #744]	; (8002b9c <jacobianoInverso+0x36c>)
 80028b4:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 80028b8:	49b8      	ldr	r1, [pc, #736]	; (8002b9c <jacobianoInverso+0x36c>)
 80028ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028be:	e9c1 2304 	strd	r2, r3, [r1, #16]

	E3[0] = Pxaux - 0.060621778264911;
 80028c2:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80028c6:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8002b88 <jacobianoInverso+0x358>
 80028ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028ce:	4bb4      	ldr	r3, [pc, #720]	; (8002ba0 <jacobianoInverso+0x370>)
 80028d0:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 80028d4:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80028d8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8002b90 <jacobianoInverso+0x360>
 80028dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028e0:	4baf      	ldr	r3, [pc, #700]	; (8002ba0 <jacobianoInverso+0x370>)
 80028e2:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 80028e6:	49ae      	ldr	r1, [pc, #696]	; (8002ba0 <jacobianoInverso+0x370>)
 80028e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028ec:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 80028f0:	4bac      	ldr	r3, [pc, #688]	; (8002ba4 <jacobianoInverso+0x374>)
 80028f2:	ed93 6b00 	vldr	d6, [r3]
 80028f6:	4bac      	ldr	r3, [pc, #688]	; (8002ba8 <jacobianoInverso+0x378>)
 80028f8:	ed93 7b00 	vldr	d7, [r3]
 80028fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002900:	4baa      	ldr	r3, [pc, #680]	; (8002bac <jacobianoInverso+0x37c>)
 8002902:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8002906:	4baa      	ldr	r3, [pc, #680]	; (8002bb0 <jacobianoInverso+0x380>)
 8002908:	ed93 6b00 	vldr	d6, [r3]
 800290c:	4ba6      	ldr	r3, [pc, #664]	; (8002ba8 <jacobianoInverso+0x378>)
 800290e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002912:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002916:	4ba5      	ldr	r3, [pc, #660]	; (8002bac <jacobianoInverso+0x37c>)
 8002918:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 800291c:	4ba5      	ldr	r3, [pc, #660]	; (8002bb4 <jacobianoInverso+0x384>)
 800291e:	ed93 6b00 	vldr	d6, [r3]
 8002922:	4ba1      	ldr	r3, [pc, #644]	; (8002ba8 <jacobianoInverso+0x378>)
 8002924:	ed93 7b04 	vldr	d7, [r3, #16]
 8002928:	ee36 7b47 	vsub.f64	d7, d6, d7
 800292c:	4b9f      	ldr	r3, [pc, #636]	; (8002bac <jacobianoInverso+0x37c>)
 800292e:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8002932:	4ba1      	ldr	r3, [pc, #644]	; (8002bb8 <jacobianoInverso+0x388>)
 8002934:	ed93 6b00 	vldr	d6, [r3]
 8002938:	4ba0      	ldr	r3, [pc, #640]	; (8002bbc <jacobianoInverso+0x38c>)
 800293a:	ed93 7b00 	vldr	d7, [r3]
 800293e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002942:	4b9a      	ldr	r3, [pc, #616]	; (8002bac <jacobianoInverso+0x37c>)
 8002944:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8002948:	4b9d      	ldr	r3, [pc, #628]	; (8002bc0 <jacobianoInverso+0x390>)
 800294a:	ed93 6b00 	vldr	d6, [r3]
 800294e:	4b9b      	ldr	r3, [pc, #620]	; (8002bbc <jacobianoInverso+0x38c>)
 8002950:	ed93 7b02 	vldr	d7, [r3, #8]
 8002954:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002958:	4b94      	ldr	r3, [pc, #592]	; (8002bac <jacobianoInverso+0x37c>)
 800295a:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 800295e:	4b99      	ldr	r3, [pc, #612]	; (8002bc4 <jacobianoInverso+0x394>)
 8002960:	ed93 6b00 	vldr	d6, [r3]
 8002964:	4b95      	ldr	r3, [pc, #596]	; (8002bbc <jacobianoInverso+0x38c>)
 8002966:	ed93 7b04 	vldr	d7, [r3, #16]
 800296a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800296e:	4b8f      	ldr	r3, [pc, #572]	; (8002bac <jacobianoInverso+0x37c>)
 8002970:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8002974:	4b94      	ldr	r3, [pc, #592]	; (8002bc8 <jacobianoInverso+0x398>)
 8002976:	ed93 6b00 	vldr	d6, [r3]
 800297a:	4b94      	ldr	r3, [pc, #592]	; (8002bcc <jacobianoInverso+0x39c>)
 800297c:	ed93 7b00 	vldr	d7, [r3]
 8002980:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002984:	4b89      	ldr	r3, [pc, #548]	; (8002bac <jacobianoInverso+0x37c>)
 8002986:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 800298a:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <jacobianoInverso+0x3a0>)
 800298c:	ed93 6b00 	vldr	d6, [r3]
 8002990:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <jacobianoInverso+0x39c>)
 8002992:	ed93 7b02 	vldr	d7, [r3, #8]
 8002996:	ee36 7b47 	vsub.f64	d7, d6, d7
 800299a:	4b84      	ldr	r3, [pc, #528]	; (8002bac <jacobianoInverso+0x37c>)
 800299c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 80029a0:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <jacobianoInverso+0x3a4>)
 80029a2:	ed93 6b00 	vldr	d6, [r3]
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <jacobianoInverso+0x39c>)
 80029a8:	ed93 7b04 	vldr	d7, [r3, #16]
 80029ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <jacobianoInverso+0x37c>)
 80029b2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 80029b6:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <jacobianoInverso+0x368>)
 80029b8:	ed93 6b00 	vldr	d6, [r3]
 80029bc:	4b79      	ldr	r3, [pc, #484]	; (8002ba4 <jacobianoInverso+0x374>)
 80029be:	ed93 7b00 	vldr	d7, [r3]
 80029c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029c6:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <jacobianoInverso+0x3a8>)
 80029c8:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 80029cc:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <jacobianoInverso+0x368>)
 80029ce:	ed93 6b02 	vldr	d6, [r3, #8]
 80029d2:	4b77      	ldr	r3, [pc, #476]	; (8002bb0 <jacobianoInverso+0x380>)
 80029d4:	ed93 7b00 	vldr	d7, [r3]
 80029d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029dc:	4b7e      	ldr	r3, [pc, #504]	; (8002bd8 <jacobianoInverso+0x3a8>)
 80029de:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <jacobianoInverso+0x368>)
 80029e4:	ed93 6b04 	vldr	d6, [r3, #16]
 80029e8:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <jacobianoInverso+0x384>)
 80029ea:	ed93 7b00 	vldr	d7, [r3]
 80029ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029f2:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <jacobianoInverso+0x3a8>)
 80029f4:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <jacobianoInverso+0x36c>)
 80029fa:	ed93 6b00 	vldr	d6, [r3]
 80029fe:	4b6e      	ldr	r3, [pc, #440]	; (8002bb8 <jacobianoInverso+0x388>)
 8002a00:	ed93 7b00 	vldr	d7, [r3]
 8002a04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a08:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <jacobianoInverso+0x3a8>)
 8002a0a:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <jacobianoInverso+0x36c>)
 8002a10:	ed93 6b02 	vldr	d6, [r3, #8]
 8002a14:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <jacobianoInverso+0x390>)
 8002a16:	ed93 7b00 	vldr	d7, [r3]
 8002a1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a1e:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <jacobianoInverso+0x3a8>)
 8002a20:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 8002a24:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <jacobianoInverso+0x36c>)
 8002a26:	ed93 6b04 	vldr	d6, [r3, #16]
 8002a2a:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <jacobianoInverso+0x394>)
 8002a2c:	ed93 7b00 	vldr	d7, [r3]
 8002a30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a34:	4b68      	ldr	r3, [pc, #416]	; (8002bd8 <jacobianoInverso+0x3a8>)
 8002a36:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8002a3a:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <jacobianoInverso+0x370>)
 8002a3c:	ed93 6b00 	vldr	d6, [r3]
 8002a40:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <jacobianoInverso+0x398>)
 8002a42:	ed93 7b00 	vldr	d7, [r3]
 8002a46:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <jacobianoInverso+0x3a8>)
 8002a4c:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <jacobianoInverso+0x370>)
 8002a52:	ed93 6b02 	vldr	d6, [r3, #8]
 8002a56:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <jacobianoInverso+0x3a0>)
 8002a58:	ed93 7b00 	vldr	d7, [r3]
 8002a5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a60:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <jacobianoInverso+0x3a8>)
 8002a62:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 8002a66:	4b4e      	ldr	r3, [pc, #312]	; (8002ba0 <jacobianoInverso+0x370>)
 8002a68:	ed93 6b04 	vldr	d6, [r3, #16]
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <jacobianoInverso+0x3a4>)
 8002a6e:	ed93 7b00 	vldr	d7, [r3]
 8002a72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a76:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <jacobianoInverso+0x3a8>)
 8002a78:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8002a7c:	4c57      	ldr	r4, [pc, #348]	; (8002bdc <jacobianoInverso+0x3ac>)
 8002a7e:	463b      	mov	r3, r7
 8002a80:	4955      	ldr	r1, [pc, #340]	; (8002bd8 <jacobianoInverso+0x3a8>)
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fffa 	bl	8000a7c <transpuesta>
 8002a88:	4620      	mov	r0, r4
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2248      	movs	r2, #72	; 0x48
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f00c fba8 	bl	800f1e4 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8002a94:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <jacobianoInverso+0x3b0>)
 8002a96:	ed93 6b02 	vldr	d6, [r3, #8]
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <jacobianoInverso+0x37c>)
 8002a9c:	ed93 7b04 	vldr	d7, [r3, #16]
 8002aa0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002aa4:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <jacobianoInverso+0x3b0>)
 8002aa6:	ed93 5b04 	vldr	d5, [r3, #16]
 8002aaa:	4b40      	ldr	r3, [pc, #256]	; (8002bac <jacobianoInverso+0x37c>)
 8002aac:	ed93 7b02 	vldr	d7, [r3, #8]
 8002ab0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002ab4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <jacobianoInverso+0x3b4>)
 8002aba:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8002abe:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <jacobianoInverso+0x3b0>)
 8002ac0:	ed93 6b04 	vldr	d6, [r3, #16]
 8002ac4:	4b39      	ldr	r3, [pc, #228]	; (8002bac <jacobianoInverso+0x37c>)
 8002ac6:	ed93 7b00 	vldr	d7, [r3]
 8002aca:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <jacobianoInverso+0x3b0>)
 8002ad0:	ed93 5b00 	vldr	d5, [r3]
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <jacobianoInverso+0x37c>)
 8002ad6:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ada:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002ade:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ae2:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <jacobianoInverso+0x3b4>)
 8002ae4:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8002ae8:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <jacobianoInverso+0x3b0>)
 8002aea:	ed93 6b00 	vldr	d6, [r3]
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <jacobianoInverso+0x37c>)
 8002af0:	ed93 7b02 	vldr	d7, [r3, #8]
 8002af4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002af8:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <jacobianoInverso+0x3b0>)
 8002afa:	ed93 5b02 	vldr	d5, [r3, #8]
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <jacobianoInverso+0x37c>)
 8002b00:	ed93 7b00 	vldr	d7, [r3]
 8002b04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <jacobianoInverso+0x3b4>)
 8002b0e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <jacobianoInverso+0x3b8>)
 8002b14:	ed93 6b02 	vldr	d6, [r3, #8]
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <jacobianoInverso+0x37c>)
 8002b1a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002b1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <jacobianoInverso+0x3b8>)
 8002b24:	ed93 5b04 	vldr	d5, [r3, #16]
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <jacobianoInverso+0x37c>)
 8002b2a:	ed93 7b08 	vldr	d7, [r3, #32]
 8002b2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <jacobianoInverso+0x3bc>)
 8002b38:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <jacobianoInverso+0x3b8>)
 8002b3e:	ed93 6b04 	vldr	d6, [r3, #16]
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <jacobianoInverso+0x37c>)
 8002b44:	ed93 7b06 	vldr	d7, [r3, #24]
 8002b48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <jacobianoInverso+0x3b8>)
 8002b4e:	ed93 5b00 	vldr	d5, [r3]
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <jacobianoInverso+0x37c>)
 8002b54:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002b58:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <jacobianoInverso+0x3bc>)
 8002b62:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <jacobianoInverso+0x3b8>)
 8002b68:	ed93 6b00 	vldr	d6, [r3]
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <jacobianoInverso+0x37c>)
 8002b6e:	ed93 7b08 	vldr	d7, [r3, #32]
 8002b72:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b76:	e03b      	b.n	8002bf0 <jacobianoInverso+0x3c0>
	...
 8002b80:	1eb851ec 	.word	0x1eb851ec
 8002b84:	3fb1eb85 	.word	0x3fb1eb85
 8002b88:	562574c0 	.word	0x562574c0
 8002b8c:	3faf09d1 	.word	0x3faf09d1
 8002b90:	1eb851ec 	.word	0x1eb851ec
 8002b94:	3fa1eb85 	.word	0x3fa1eb85
 8002b98:	240003e8 	.word	0x240003e8
 8002b9c:	24000400 	.word	0x24000400
 8002ba0:	24000418 	.word	0x24000418
 8002ba4:	24000310 	.word	0x24000310
 8002ba8:	24000008 	.word	0x24000008
 8002bac:	24000430 	.word	0x24000430
 8002bb0:	24000320 	.word	0x24000320
 8002bb4:	24000330 	.word	0x24000330
 8002bb8:	24000358 	.word	0x24000358
 8002bbc:	24000020 	.word	0x24000020
 8002bc0:	24000368 	.word	0x24000368
 8002bc4:	24000378 	.word	0x24000378
 8002bc8:	240003a0 	.word	0x240003a0
 8002bcc:	24000038 	.word	0x24000038
 8002bd0:	240003b0 	.word	0x240003b0
 8002bd4:	240003c0 	.word	0x240003c0
 8002bd8:	24000478 	.word	0x24000478
 8002bdc:	240004c0 	.word	0x240004c0
 8002be0:	24000050 	.word	0x24000050
 8002be4:	240005e0 	.word	0x240005e0
 8002be8:	24000068 	.word	0x24000068
 8002bec:	240005f8 	.word	0x240005f8
 8002bf0:	4b92      	ldr	r3, [pc, #584]	; (8002e3c <jacobianoInverso+0x60c>)
 8002bf2:	ed93 5b02 	vldr	d5, [r3, #8]
 8002bf6:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <jacobianoInverso+0x610>)
 8002bf8:	ed93 7b06 	vldr	d7, [r3, #24]
 8002bfc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c04:	4b8f      	ldr	r3, [pc, #572]	; (8002e44 <jacobianoInverso+0x614>)
 8002c06:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 8002c0a:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <jacobianoInverso+0x618>)
 8002c0c:	ed93 6b02 	vldr	d6, [r3, #8]
 8002c10:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <jacobianoInverso+0x610>)
 8002c12:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002c16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002c1a:	4b8b      	ldr	r3, [pc, #556]	; (8002e48 <jacobianoInverso+0x618>)
 8002c1c:	ed93 5b04 	vldr	d5, [r3, #16]
 8002c20:	4b87      	ldr	r3, [pc, #540]	; (8002e40 <jacobianoInverso+0x610>)
 8002c22:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002c26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c2e:	4b87      	ldr	r3, [pc, #540]	; (8002e4c <jacobianoInverso+0x61c>)
 8002c30:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <jacobianoInverso+0x618>)
 8002c36:	ed93 6b04 	vldr	d6, [r3, #16]
 8002c3a:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <jacobianoInverso+0x610>)
 8002c3c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002c40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002c44:	4b80      	ldr	r3, [pc, #512]	; (8002e48 <jacobianoInverso+0x618>)
 8002c46:	ed93 5b00 	vldr	d5, [r3]
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <jacobianoInverso+0x610>)
 8002c4c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002c50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c58:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <jacobianoInverso+0x61c>)
 8002c5a:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 8002c5e:	4b7a      	ldr	r3, [pc, #488]	; (8002e48 <jacobianoInverso+0x618>)
 8002c60:	ed93 6b00 	vldr	d6, [r3]
 8002c64:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <jacobianoInverso+0x610>)
 8002c66:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002c6a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002c6e:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <jacobianoInverso+0x618>)
 8002c70:	ed93 5b02 	vldr	d5, [r3, #8]
 8002c74:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <jacobianoInverso+0x610>)
 8002c76:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002c7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c82:	4b72      	ldr	r3, [pc, #456]	; (8002e4c <jacobianoInverso+0x61c>)
 8002c84:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 8002c88:	4971      	ldr	r1, [pc, #452]	; (8002e50 <jacobianoInverso+0x620>)
 8002c8a:	4872      	ldr	r0, [pc, #456]	; (8002e54 <jacobianoInverso+0x624>)
 8002c8c:	f7fd ff32 	bl	8000af4 <productDot>
 8002c90:	eeb0 7b40 	vmov.f64	d7, d0
 8002c94:	4b70      	ldr	r3, [pc, #448]	; (8002e58 <jacobianoInverso+0x628>)
 8002c96:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 8002c9a:	4970      	ldr	r1, [pc, #448]	; (8002e5c <jacobianoInverso+0x62c>)
 8002c9c:	4869      	ldr	r0, [pc, #420]	; (8002e44 <jacobianoInverso+0x614>)
 8002c9e:	f7fd ff29 	bl	8000af4 <productDot>
 8002ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8002ca6:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <jacobianoInverso+0x628>)
 8002ca8:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 8002cac:	496c      	ldr	r1, [pc, #432]	; (8002e60 <jacobianoInverso+0x630>)
 8002cae:	4867      	ldr	r0, [pc, #412]	; (8002e4c <jacobianoInverso+0x61c>)
 8002cb0:	f7fd ff20 	bl	8000af4 <productDot>
 8002cb4:	eeb0 7b40 	vmov.f64	d7, d0
 8002cb8:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <jacobianoInverso+0x628>)
 8002cba:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cc4:	e03d      	b.n	8002d42 <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ccc:	e030      	b.n	8002d30 <jacobianoInverso+0x500>
			if (i == j) {
 8002cce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d114      	bne.n	8002d04 <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 8002cda:	4a5f      	ldr	r2, [pc, #380]	; (8002e58 <jacobianoInverso+0x628>)
 8002cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce8:	4c5e      	ldr	r4, [pc, #376]	; (8002e64 <jacobianoInverso+0x634>)
 8002cea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4423      	add	r3, r4
 8002cfe:	e9c3 0100 	strd	r0, r1, [r3]
 8002d02:	e010      	b.n	8002d26 <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 8002d04:	4957      	ldr	r1, [pc, #348]	; (8002e64 <jacobianoInverso+0x634>)
 8002d06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4419      	add	r1, r3
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 8002d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	ddca      	ble.n	8002cce <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8002d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	ddbd      	ble.n	8002cc6 <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 8002d4a:	4c47      	ldr	r4, [pc, #284]	; (8002e68 <jacobianoInverso+0x638>)
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	4945      	ldr	r1, [pc, #276]	; (8002e64 <jacobianoInverso+0x634>)
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd ffff 	bl	8000d54 <inversa>
 8002d56:	4620      	mov	r0, r4
 8002d58:	463b      	mov	r3, r7
 8002d5a:	2248      	movs	r2, #72	; 0x48
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f00c fa41 	bl	800f1e4 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 8002d62:	4c42      	ldr	r4, [pc, #264]	; (8002e6c <jacobianoInverso+0x63c>)
 8002d64:	463b      	mov	r3, r7
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <jacobianoInverso+0x638>)
 8002d68:	4939      	ldr	r1, [pc, #228]	; (8002e50 <jacobianoInverso+0x620>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f860 	bl	8000e30 <productMatriz>
 8002d70:	4620      	mov	r0, r4
 8002d72:	463b      	mov	r3, r7
 8002d74:	2248      	movs	r2, #72	; 0x48
 8002d76:	4619      	mov	r1, r3
 8002d78:	f00c fa34 	bl	800f1e4 <memcpy>

	for (int i = 0; i < 3; ++i) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d82:	e041      	b.n	8002e08 <jacobianoInverso+0x5d8>
		double sum = 0;
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d96:	e025      	b.n	8002de4 <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 8002d98:	4934      	ldr	r1, [pc, #208]	; (8002e6c <jacobianoInverso+0x63c>)
 8002d9a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	ed93 6b00 	vldr	d6, [r3]
 8002db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	33b0      	adds	r3, #176	; 0xb0
 8002dba:	443b      	add	r3, r7
 8002dbc:	3b38      	subs	r3, #56	; 0x38
 8002dbe:	ed93 7b00 	vldr	d7, [r3]
 8002dc2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002dc6:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8002dca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002dce:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 8002dd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002dd6:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8002dda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dde:	3301      	adds	r3, #1
 8002de0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	ddd5      	ble.n	8002d98 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <jacobianoInverso+0x640>)
 8002dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	18d1      	adds	r1, r2, r3
 8002df6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002dfa:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 8002dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e02:	3301      	adds	r3, #1
 8002e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002e08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	ddb9      	ble.n	8002d84 <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <jacobianoInverso+0x640>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	4917      	ldr	r1, [pc, #92]	; (8002e74 <jacobianoInverso+0x644>)
 8002e18:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <jacobianoInverso+0x640>)
 8002e1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e22:	4915      	ldr	r1, [pc, #84]	; (8002e78 <jacobianoInverso+0x648>)
 8002e24:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <jacobianoInverso+0x640>)
 8002e2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e2e:	4913      	ldr	r1, [pc, #76]	; (8002e7c <jacobianoInverso+0x64c>)
 8002e30:	e9c1 2300 	strd	r2, r3, [r1]

}
 8002e34:	bf00      	nop
 8002e36:	37b4      	adds	r7, #180	; 0xb4
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}
 8002e3c:	24000068 	.word	0x24000068
 8002e40:	24000430 	.word	0x24000430
 8002e44:	240005f8 	.word	0x240005f8
 8002e48:	24000080 	.word	0x24000080
 8002e4c:	24000610 	.word	0x24000610
 8002e50:	240004c0 	.word	0x240004c0
 8002e54:	240005e0 	.word	0x240005e0
 8002e58:	24000628 	.word	0x24000628
 8002e5c:	240004d8 	.word	0x240004d8
 8002e60:	240004f0 	.word	0x240004f0
 8002e64:	24000508 	.word	0x24000508
 8002e68:	24000550 	.word	0x24000550
 8002e6c:	24000598 	.word	0x24000598
 8002e70:	24000708 	.word	0x24000708
 8002e74:	24000760 	.word	0x24000760
 8002e78:	24000768 	.word	0x24000768
 8002e7c:	24000770 	.word	0x24000770

08002e80 <robotInitialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robotInitialization(void){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	double rpm = 2.0;
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e8e:	e9c7 2300 	strd	r2, r3, [r7]

	HAL_TIM_Base_Start(&htim12);
 8002e92:	4881      	ldr	r0, [pc, #516]	; (8003098 <robotInitialization+0x218>)
 8002e94:	f007 fc4a 	bl	800a72c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002e98:	4880      	ldr	r0, [pc, #512]	; (800309c <robotInitialization+0x21c>)
 8002e9a:	f007 fc47 	bl	800a72c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002e9e:	4880      	ldr	r0, [pc, #512]	; (80030a0 <robotInitialization+0x220>)
 8002ea0:	f007 fc44 	bl	800a72c <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
	*/

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	487e      	ldr	r0, [pc, #504]	; (80030a4 <robotInitialization+0x224>)
 8002eaa:	f005 f857 	bl	8007f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	487c      	ldr	r0, [pc, #496]	; (80030a4 <robotInitialization+0x224>)
 8002eb4:	f005 f852 	bl	8007f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	4879      	ldr	r0, [pc, #484]	; (80030a4 <robotInitialization+0x224>)
 8002ebe:	f005 f84d 	bl	8007f5c <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002ec2:	2032      	movs	r0, #50	; 0x32
 8002ec4:	f003 ffac 	bl	8006e20 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ece:	4876      	ldr	r0, [pc, #472]	; (80030a8 <robotInitialization+0x228>)
 8002ed0:	f005 f844 	bl	8007f5c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eda:	4873      	ldr	r0, [pc, #460]	; (80030a8 <robotInitialization+0x228>)
 8002edc:	f005 f83e 	bl	8007f5c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee6:	4870      	ldr	r0, [pc, #448]	; (80030a8 <robotInitialization+0x228>)
 8002ee8:	f005 f838 	bl	8007f5c <HAL_GPIO_WritePin>

	periodoM[0] = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * STEPREV)) - 1.0);
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <robotInitialization+0x22c>)
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ef8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002efc:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002f00:	ed97 7b00 	vldr	d7, [r7]
 8002f04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002f08:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8003088 <robotInitialization+0x208>
 8002f0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f10:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8003090 <robotInitialization+0x210>
 8002f14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f28:	4b61      	ldr	r3, [pc, #388]	; (80030b0 <robotInitialization+0x230>)
 8002f2a:	ed83 7b00 	vstr	d7, [r3]
	periodoM[1] = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * STEPREV)) - 1.0);
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <robotInitialization+0x234>)
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f3a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f3e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002f42:	ed97 7b00 	vldr	d7, [r7]
 8002f46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002f4a:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8003088 <robotInitialization+0x208>
 8002f4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f52:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8003090 <robotInitialization+0x210>
 8002f56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <robotInitialization+0x230>)
 8002f6c:	ed83 7b02 	vstr	d7, [r3, #8]
	periodoM[2] = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * STEPREV)) - 1.0);
 8002f70:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <robotInitialization+0x238>)
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002f7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002f80:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002f84:	ed97 7b00 	vldr	d7, [r7]
 8002f88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002f8c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8003088 <robotInitialization+0x208>
 8002f90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f94:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8003090 <robotInitialization+0x210>
 8002f98:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002fa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002fa8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <robotInitialization+0x230>)
 8002fae:	ed83 7b04 	vstr	d7, [r3, #16]

	TIM12->ARR = periodoM[0];
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <robotInitialization+0x230>)
 8002fb4:	ed93 7b00 	vldr	d7, [r3]
 8002fb8:	4b3c      	ldr	r3, [pc, #240]	; (80030ac <robotInitialization+0x22c>)
 8002fba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002fbe:	ee17 2a90 	vmov	r2, s15
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8002fc4:	4b39      	ldr	r3, [pc, #228]	; (80030ac <robotInitialization+0x22c>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002fd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002fd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <robotInitialization+0x22c>)
 8002fda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002fde:	ee17 2a90 	vmov	r2, s15
 8002fe2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->ARR =periodoM[1];
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <robotInitialization+0x230>)
 8002fe6:	ed93 7b02 	vldr	d7, [r3, #8]
 8002fea:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <robotInitialization+0x234>)
 8002fec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ff0:	ee17 2a90 	vmov	r2, s15
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8002ff6:	4b2f      	ldr	r3, [pc, #188]	; (80030b4 <robotInitialization+0x234>)
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003002:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003006:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800300a:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <robotInitialization+0x234>)
 800300c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003010:	ee17 2a90 	vmov	r2, s15
 8003014:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->ARR =periodoM[2];
 8003016:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <robotInitialization+0x230>)
 8003018:	ed93 7b04 	vldr	d7, [r3, #16]
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <robotInitialization+0x238>)
 800301e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003022:	ee17 2a90 	vmov	r2, s15
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <robotInitialization+0x238>)
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003034:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003038:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <robotInitialization+0x238>)
 800303e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003042:	ee17 2a90 	vmov	r2, s15
 8003046:	635a      	str	r2, [r3, #52]	; 0x34

	Start_PWM_MOTOR_1;
 8003048:	2100      	movs	r1, #0
 800304a:	4813      	ldr	r0, [pc, #76]	; (8003098 <robotInitialization+0x218>)
 800304c:	f007 fd0e 	bl	800aa6c <HAL_TIM_PWM_Start>
	Start_PWM_MOTOR_2;
 8003050:	2100      	movs	r1, #0
 8003052:	4812      	ldr	r0, [pc, #72]	; (800309c <robotInitialization+0x21c>)
 8003054:	f007 fd0a 	bl	800aa6c <HAL_TIM_PWM_Start>
	Start_PWM_MOTOR_3;
 8003058:	2100      	movs	r1, #0
 800305a:	4811      	ldr	r0, [pc, #68]	; (80030a0 <robotInitialization+0x220>)
 800305c:	f007 fd06 	bl	800aa6c <HAL_TIM_PWM_Start>

    HAL_Delay(1000); //offset experimental
 8003060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003064:	f003 fedc 	bl	8006e20 <HAL_Delay>

    Stop_PWM_MOTOR_1;
 8003068:	2100      	movs	r1, #0
 800306a:	480b      	ldr	r0, [pc, #44]	; (8003098 <robotInitialization+0x218>)
 800306c:	f007 fe0c 	bl	800ac88 <HAL_TIM_PWM_Stop>
    Stop_PWM_MOTOR_2;
 8003070:	2100      	movs	r1, #0
 8003072:	480a      	ldr	r0, [pc, #40]	; (800309c <robotInitialization+0x21c>)
 8003074:	f007 fe08 	bl	800ac88 <HAL_TIM_PWM_Stop>
    Stop_PWM_MOTOR_3;
 8003078:	2100      	movs	r1, #0
 800307a:	4809      	ldr	r0, [pc, #36]	; (80030a0 <robotInitialization+0x220>)
 800307c:	f007 fe04 	bl	800ac88 <HAL_TIM_PWM_Stop>



}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	00000000 	.word	0x00000000
 800308c:	40bf4000 	.word	0x40bf4000
 8003090:	00000000 	.word	0x00000000
 8003094:	41ec9c38 	.word	0x41ec9c38
 8003098:	24000974 	.word	0x24000974
 800309c:	240009c0 	.word	0x240009c0
 80030a0:	24000a0c 	.word	0x24000a0c
 80030a4:	58020c00 	.word	0x58020c00
 80030a8:	58020800 	.word	0x58020800
 80030ac:	40001800 	.word	0x40001800
 80030b0:	24000778 	.word	0x24000778
 80030b4:	40001c00 	.word	0x40001c00
 80030b8:	40002000 	.word	0x40002000

080030bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	ed2d 8b02 	vpush	{d8}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030c4:	f003 fe1a 	bl	8006cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030c8:	f000 f95e 	bl	8003388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030cc:	f7fe fe9e 	bl	8001e0c <MX_GPIO_Init>
  MX_TIM2_Init();
 80030d0:	f001 f850 	bl	8004174 <MX_TIM2_Init>
  MX_TIM3_Init();
 80030d4:	f001 f8ec 	bl	80042b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80030d8:	f001 f95c 	bl	8004394 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80030dc:	f003 fc6c 	bl	80069b8 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80030e0:	f001 fa1a 	bl	8004518 <MX_TIM12_Init>
  MX_TIM13_Init();
 80030e4:	f001 fa7c 	bl	80045e0 <MX_TIM13_Init>
  MX_TIM14_Init();
 80030e8:	f001 faca 	bl	8004680 <MX_TIM14_Init>
  MX_TIM5_Init();
 80030ec:	f001 f9c4 	bl	8004478 <MX_TIM5_Init>
  MX_TIM15_Init();
 80030f0:	f001 fb16 	bl	8004720 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80030f4:	f003 fbc8 	bl	8006888 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80030f8:	f003 fc12 	bl	8006920 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 80030fc:	2364      	movs	r3, #100	; 0x64
 80030fe:	221c      	movs	r2, #28
 8003100:	4984      	ldr	r1, [pc, #528]	; (8003314 <main+0x258>)
 8003102:	4885      	ldr	r0, [pc, #532]	; (8003318 <main+0x25c>)
 8003104:	f009 fd36 	bl	800cb74 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8003108:	2201      	movs	r2, #1
 800310a:	4984      	ldr	r1, [pc, #528]	; (800331c <main+0x260>)
 800310c:	4882      	ldr	r0, [pc, #520]	; (8003318 <main+0x25c>)
 800310e:	f009 fdc7 	bl	800cca0 <HAL_UART_Receive_IT>

  robotInitialization();
 8003112:	f7ff feb5 	bl	8002e80 <robotInitialization>

  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8003116:	2364      	movs	r3, #100	; 0x64
 8003118:	2227      	movs	r2, #39	; 0x27
 800311a:	4981      	ldr	r1, [pc, #516]	; (8003320 <main+0x264>)
 800311c:	487e      	ldr	r0, [pc, #504]	; (8003318 <main+0x25c>)
 800311e:	f009 fd29 	bl	800cb74 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8003122:	4b80      	ldr	r3, [pc, #512]	; (8003324 <main+0x268>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d1fb      	bne.n	8003122 <main+0x66>



			FlagButton = 0;
 800312a:	4b7e      	ldr	r3, [pc, #504]	; (8003324 <main+0x268>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
			distancia = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 8003130:	4b7d      	ldr	r3, [pc, #500]	; (8003328 <main+0x26c>)
 8003132:	ed93 6b00 	vldr	d6, [r3]
 8003136:	4b7d      	ldr	r3, [pc, #500]	; (800332c <main+0x270>)
 8003138:	ed93 7b00 	vldr	d7, [r3]
 800313c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003140:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003144:	eeb0 0b47 	vmov.f64	d0, d7
 8003148:	f00e feee 	bl	8011f28 <pow>
 800314c:	eeb0 8b40 	vmov.f64	d8, d0
 8003150:	4b75      	ldr	r3, [pc, #468]	; (8003328 <main+0x26c>)
 8003152:	ed93 6b02 	vldr	d6, [r3, #8]
 8003156:	4b75      	ldr	r3, [pc, #468]	; (800332c <main+0x270>)
 8003158:	ed93 7b02 	vldr	d7, [r3, #8]
 800315c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003160:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003164:	eeb0 0b47 	vmov.f64	d0, d7
 8003168:	f00e fede 	bl	8011f28 <pow>
 800316c:	eeb0 7b40 	vmov.f64	d7, d0
 8003170:	ee38 8b07 	vadd.f64	d8, d8, d7
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <main+0x26c>)
 8003176:	ed93 6b04 	vldr	d6, [r3, #16]
 800317a:	4b6c      	ldr	r3, [pc, #432]	; (800332c <main+0x270>)
 800317c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003180:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003184:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003188:	eeb0 0b47 	vmov.f64	d0, d7
 800318c:	f00e fecc 	bl	8011f28 <pow>
 8003190:	eeb0 7b40 	vmov.f64	d7, d0
 8003194:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003198:	eeb0 0b47 	vmov.f64	d0, d7
 800319c:	f00f f944 	bl	8012428 <sqrt>
 80031a0:	eeb0 7b40 	vmov.f64	d7, d0
 80031a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031a8:	4b61      	ldr	r3, [pc, #388]	; (8003330 <main+0x274>)
 80031aa:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pfin.x - Pini.x) / distancia;	//Vector director en X
 80031ae:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <main+0x26c>)
 80031b0:	ed93 6b00 	vldr	d6, [r3]
 80031b4:	4b5d      	ldr	r3, [pc, #372]	; (800332c <main+0x270>)
 80031b6:	ed93 7b00 	vldr	d7, [r3]
 80031ba:	ee36 5b47 	vsub.f64	d5, d6, d7
 80031be:	4b5c      	ldr	r3, [pc, #368]	; (8003330 <main+0x274>)
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80031cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031d0:	4b58      	ldr	r3, [pc, #352]	; (8003334 <main+0x278>)
 80031d2:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pfin.y - Pini.y) / distancia;	//Vector director en Y
 80031d6:	4b54      	ldr	r3, [pc, #336]	; (8003328 <main+0x26c>)
 80031d8:	ed93 6b02 	vldr	d6, [r3, #8]
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <main+0x270>)
 80031de:	ed93 7b02 	vldr	d7, [r3, #8]
 80031e2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80031e6:	4b52      	ldr	r3, [pc, #328]	; (8003330 <main+0x274>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80031f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031f8:	4b4e      	ldr	r3, [pc, #312]	; (8003334 <main+0x278>)
 80031fa:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pfin.z - Pini.z) / distancia;	//Vector director en Z
 80031fe:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <main+0x26c>)
 8003200:	ed93 6b04 	vldr	d6, [r3, #16]
 8003204:	4b49      	ldr	r3, [pc, #292]	; (800332c <main+0x270>)
 8003206:	ed93 7b04 	vldr	d7, [r3, #16]
 800320a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800320e:	4b48      	ldr	r3, [pc, #288]	; (8003330 <main+0x274>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003218:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800321c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003220:	4b44      	ldr	r3, [pc, #272]	; (8003334 <main+0x278>)
 8003222:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8003226:	4b44      	ldr	r3, [pc, #272]	; (8003338 <main+0x27c>)
 8003228:	ed93 7b00 	vldr	d7, [r3]
 800322c:	eeb0 0b47 	vmov.f64	d0, d7
 8003230:	f000 fb92 	bl	8003958 <configStepMotor1>
			configStepMotor2(titha2);
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <main+0x280>)
 8003236:	ed93 7b00 	vldr	d7, [r3]
 800323a:	eeb0 0b47 	vmov.f64	d0, d7
 800323e:	f000 fc47 	bl	8003ad0 <configStepMotor2>
			configStepMotor3(titha3);
 8003242:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <main+0x284>)
 8003244:	ed93 7b00 	vldr	d7, [r3]
 8003248:	eeb0 0b47 	vmov.f64	d0, d7
 800324c:	f000 fcfc 	bl	8003c48 <configStepMotor3>

			update_ScurveTraj(0, distancia, vi, vf, vmax, amax, jmax);
 8003250:	4b37      	ldr	r3, [pc, #220]	; (8003330 <main+0x274>)
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <main+0x288>)
 8003258:	ed93 7a00 	vldr	s14, [r3]
 800325c:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <main+0x28c>)
 800325e:	edd3 6a00 	vldr	s13, [r3]
 8003262:	4b3a      	ldr	r3, [pc, #232]	; (800334c <main+0x290>)
 8003264:	ed93 6a00 	vldr	s12, [r3]
 8003268:	4b39      	ldr	r3, [pc, #228]	; (8003350 <main+0x294>)
 800326a:	edd3 5a00 	vldr	s11, [r3]
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <main+0x298>)
 8003270:	ed93 5a00 	vldr	s10, [r3]
 8003274:	eeb0 3a45 	vmov.f32	s6, s10
 8003278:	eef0 2a65 	vmov.f32	s5, s11
 800327c:	eeb0 2a46 	vmov.f32	s4, s12
 8003280:	eef0 1a66 	vmov.f32	s3, s13
 8003284:	eeb0 1a47 	vmov.f32	s2, s14
 8003288:	eef0 0a67 	vmov.f32	s1, s15
 800328c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003358 <main+0x29c>
 8003290:	f002 fb1e 	bl	80058d0 <update_ScurveTraj>

			FlagTiempo = 0;
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <main+0x2a0>)
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 800329a:	4931      	ldr	r1, [pc, #196]	; (8003360 <main+0x2a4>)
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 80032a8:	492e      	ldr	r1, [pc, #184]	; (8003364 <main+0x2a8>)
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 80032b6:	492c      	ldr	r1, [pc, #176]	; (8003368 <main+0x2ac>)
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <main+0x2b0>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 80032ca:	4929      	ldr	r1, [pc, #164]	; (8003370 <main+0x2b4>)
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 80032d8:	4926      	ldr	r1, [pc, #152]	; (8003374 <main+0x2b8>)
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 80032e6:	4924      	ldr	r1, [pc, #144]	; (8003378 <main+0x2bc>)
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_TIM_Base_Start(&htim5);
 80032f4:	4821      	ldr	r0, [pc, #132]	; (800337c <main+0x2c0>)
 80032f6:	f007 fa19 	bl	800a72c <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 80032fa:	4821      	ldr	r0, [pc, #132]	; (8003380 <main+0x2c4>)
 80032fc:	f007 faae 	bl	800a85c <HAL_TIM_Base_Start_IT>

			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);   // main channel
 8003300:	2100      	movs	r1, #0
 8003302:	4820      	ldr	r0, [pc, #128]	; (8003384 <main+0x2c8>)
 8003304:	f007 febc 	bl	800b080 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);   // indirect channel
 8003308:	2104      	movs	r1, #4
 800330a:	481e      	ldr	r0, [pc, #120]	; (8003384 <main+0x2c8>)
 800330c:	f007 fdb4 	bl	800ae78 <HAL_TIM_IC_Start>
		if (FlagButton == 1) {
 8003310:	e707      	b.n	8003122 <main+0x66>
 8003312:	bf00      	nop
 8003314:	240000a4 	.word	0x240000a4
 8003318:	24000bfc 	.word	0x24000bfc
 800331c:	24000742 	.word	0x24000742
 8003320:	240000c0 	.word	0x240000c0
 8003324:	24000790 	.word	0x24000790
 8003328:	240006b0 	.word	0x240006b0
 800332c:	24000698 	.word	0x24000698
 8003330:	240006c8 	.word	0x240006c8
 8003334:	240006cc 	.word	0x240006cc
 8003338:	24000658 	.word	0x24000658
 800333c:	24000660 	.word	0x24000660
 8003340:	24000668 	.word	0x24000668
 8003344:	24000688 	.word	0x24000688
 8003348:	2400068c 	.word	0x2400068c
 800334c:	2400009c 	.word	0x2400009c
 8003350:	240000a0 	.word	0x240000a0
 8003354:	24000098 	.word	0x24000098
 8003358:	00000000 	.word	0x00000000
 800335c:	24000744 	.word	0x24000744
 8003360:	24000750 	.word	0x24000750
 8003364:	24000758 	.word	0x24000758
 8003368:	240000e8 	.word	0x240000e8
 800336c:	240007f0 	.word	0x240007f0
 8003370:	240007a8 	.word	0x240007a8
 8003374:	240007b0 	.word	0x240007b0
 8003378:	240007b8 	.word	0x240007b8
 800337c:	24000928 	.word	0x24000928
 8003380:	24000a58 	.word	0x24000a58
 8003384:	24000844 	.word	0x24000844

08003388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b09c      	sub	sp, #112	; 0x70
 800338c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800338e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003392:	224c      	movs	r2, #76	; 0x4c
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f00b ff32 	bl	800f200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	2220      	movs	r2, #32
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f00b ff2c 	bl	800f200 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80033a8:	2002      	movs	r0, #2
 80033aa:	f004 fe0b 	bl	8007fc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80033ae:	2300      	movs	r3, #0
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4b32      	ldr	r3, [pc, #200]	; (800347c <SystemClock_Config+0xf4>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	4a31      	ldr	r2, [pc, #196]	; (800347c <SystemClock_Config+0xf4>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <SystemClock_Config+0xf4>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <SystemClock_Config+0xf8>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033d0:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <SystemClock_Config+0xf8>)
 80033d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d6:	6193      	str	r3, [r2, #24]
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <SystemClock_Config+0xf8>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80033e4:	bf00      	nop
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <SystemClock_Config+0xf8>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f2:	d1f8      	bne.n	80033e6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033f4:	2302      	movs	r3, #2
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80033f8:	2301      	movs	r3, #1
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033fc:	2340      	movs	r3, #64	; 0x40
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003400:	2302      	movs	r3, #2
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003404:	2300      	movs	r3, #0
 8003406:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003408:	2304      	movs	r3, #4
 800340a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800340c:	2310      	movs	r3, #16
 800340e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003410:	2302      	movs	r3, #2
 8003412:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003414:	2302      	movs	r3, #2
 8003416:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003418:	2302      	movs	r3, #2
 800341a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800341c:	230c      	movs	r3, #12
 800341e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003420:	2300      	movs	r3, #0
 8003422:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342c:	4618      	mov	r0, r3
 800342e:	f004 fe03 	bl	8008038 <HAL_RCC_OscConfig>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003438:	f000 fa84 	bl	8003944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800343c:	233f      	movs	r3, #63	; 0x3f
 800343e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003440:	2303      	movs	r3, #3
 8003442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003448:	2308      	movs	r3, #8
 800344a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003450:	2340      	movs	r3, #64	; 0x40
 8003452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003458:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	2101      	movs	r1, #1
 8003462:	4618      	mov	r0, r3
 8003464:	f005 fa16 	bl	8008894 <HAL_RCC_ClockConfig>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800346e:	f000 fa69 	bl	8003944 <Error_Handler>
  }
}
 8003472:	bf00      	nop
 8003474:	3770      	adds	r7, #112	; 0x70
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	58000400 	.word	0x58000400
 8003480:	58024800 	.word	0x58024800

08003484 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]

	  if(GPIO_Pin == BUTTON_Pin) {
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003494:	d103      	bne.n	800349e <HAL_GPIO_EXTI_Callback+0x1a>
		  FlagButton=1;
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_GPIO_EXTI_Callback+0x28>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/


}
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_EXTI_Callback+0x1c>
	      __NOP();
 800349e:	bf00      	nop
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	24000790 	.word	0x24000790

080034b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a30      	ldr	r2, [pc, #192]	; (8003580 <HAL_UART_RxCpltCallback+0xd0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d14d      	bne.n	800355e <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 80034c2:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_UART_RxCpltCallback+0xd4>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b3a      	cmp	r3, #58	; 0x3a
 80034cc:	d006      	beq.n	80034dc <HAL_UART_RxCpltCallback+0x2c>
 80034ce:	2b3a      	cmp	r3, #58	; 0x3a
 80034d0:	dc36      	bgt.n	8003540 <HAL_UART_RxCpltCallback+0x90>
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d009      	beq.n	80034ea <HAL_UART_RxCpltCallback+0x3a>
 80034d6:	2b0d      	cmp	r3, #13
 80034d8:	d01e      	beq.n	8003518 <HAL_UART_RxCpltCallback+0x68>
 80034da:	e031      	b.n	8003540 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 80034dc:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 80034e2:	4b2a      	ldr	r3, [pc, #168]	; (800358c <HAL_UART_RxCpltCallback+0xdc>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
			break;
 80034e8:	e040      	b.n	800356c <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 80034ea:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d037      	beq.n	8003562 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 80034f2:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 80034fc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80034fe:	e030      	b.n	8003562 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <HAL_UART_RxCpltCallback+0xe0>)
 8003508:	2100      	movs	r1, #0
 800350a:	5499      	strb	r1, [r3, r2]
				rx_index++;
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 8003516:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b1e      	cmp	r3, #30
 800351e:	d1ef      	bne.n	8003500 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_UART_RxCpltCallback+0xdc>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11e      	bne.n	8003566 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b18      	ldr	r3, [pc, #96]	; (8003590 <HAL_UART_RxCpltCallback+0xe0>)
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8003534:	f7ff f854 	bl	80025e0 <interpretaComando>
				cm0 = 0;
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_UART_RxCpltCallback+0xdc>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]

			}
			break;
 800353e:	e012      	b.n	8003566 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b1d      	cmp	r3, #29
 8003546:	d810      	bhi.n	800356a <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	b2d1      	uxtb	r1, r2
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_UART_RxCpltCallback+0xd8>)
 8003552:	7011      	strb	r1, [r2, #0]
 8003554:	4619      	mov	r1, r3
 8003556:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <HAL_UART_RxCpltCallback+0xe0>)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	5453      	strb	r3, [r2, r1]
			}
			break;
 800355c:	e005      	b.n	800356a <HAL_UART_RxCpltCallback+0xba>
		}
	}
 800355e:	bf00      	nop
 8003560:	e004      	b.n	800356c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800356a:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 800356c:	2201      	movs	r2, #1
 800356e:	4905      	ldr	r1, [pc, #20]	; (8003584 <HAL_UART_RxCpltCallback+0xd4>)
 8003570:	4808      	ldr	r0, [pc, #32]	; (8003594 <HAL_UART_RxCpltCallback+0xe4>)
 8003572:	f009 fb95 	bl	800cca0 <HAL_UART_Receive_IT>
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40004800 	.word	0x40004800
 8003584:	24000742 	.word	0x24000742
 8003588:	24000720 	.word	0x24000720
 800358c:	24000743 	.word	0x24000743
 8003590:	24000724 	.word	0x24000724
 8003594:	24000bfc 	.word	0x24000bfc

08003598 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	__NOP();
 80035a0:	bf00      	nop
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	test++;
 80035b8:	4b30      	ldr	r3, [pc, #192]	; (800367c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	4a2f      	ldr	r2, [pc, #188]	; (800367c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80035c0:	6013      	str	r3, [r2, #0]
	if (htim->Instance == TIM2) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IC_CaptureCallback+0x54>
		test1++;
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80035d4:	6013      	str	r3, [r2, #0]
		if (pMotor1 == numStep1) {
 80035d6:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d10a      	bne.n	80035f8 <HAL_TIM_IC_CaptureCallback+0x48>
			Stop_PWM_MOTOR_1; //Apago el PWM del motor 1
 80035e2:	2100      	movs	r1, #0
 80035e4:	4829      	ldr	r0, [pc, #164]	; (800368c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80035e6:	f007 fb4f 	bl	800ac88 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 80035ea:	4929      	ldr	r1, [pc, #164]	; (8003690 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80035f2:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 80035f6:	e03c      	b.n	8003672 <HAL_TIM_IC_CaptureCallback+0xc2>
			pMotor1++;
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	4a21      	ldr	r2, [pc, #132]	; (8003684 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003600:	6013      	str	r3, [r2, #0]
}
 8003602:	e036      	b.n	8003672 <HAL_TIM_IC_CaptureCallback+0xc2>
	} else if (htim->Instance == TIM3) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d116      	bne.n	800363c <HAL_TIM_IC_CaptureCallback+0x8c>
		if (pMotor2 == numStep2) {
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_TIM_IC_CaptureCallback+0xec>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d10a      	bne.n	8003630 <HAL_TIM_IC_CaptureCallback+0x80>
			Stop_PWM_MOTOR_2;//Apago el PWM del motor 1
 800361a:	2100      	movs	r1, #0
 800361c:	4821      	ldr	r0, [pc, #132]	; (80036a4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800361e:	f007 fb33 	bl	800ac88 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 8003622:	4921      	ldr	r1, [pc, #132]	; (80036a8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800362a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800362e:	e020      	b.n	8003672 <HAL_TIM_IC_CaptureCallback+0xc2>
			pMotor2++;
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_TIM_IC_CaptureCallback+0xec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a19      	ldr	r2, [pc, #100]	; (800369c <HAL_TIM_IC_CaptureCallback+0xec>)
 8003638:	6013      	str	r3, [r2, #0]
}
 800363a:	e01a      	b.n	8003672 <HAL_TIM_IC_CaptureCallback+0xc2>
	} else if (htim->Instance == TIM4) {
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_TIM_IC_CaptureCallback+0xfc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d115      	bne.n	8003672 <HAL_TIM_IC_CaptureCallback+0xc2>
		if (pMotor3 == numStep3) {
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_TIM_IC_CaptureCallback+0x104>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d10a      	bne.n	8003668 <HAL_TIM_IC_CaptureCallback+0xb8>
			Stop_PWM_MOTOR_3;//Apago el PWM del motor 1
 8003652:	2100      	movs	r1, #0
 8003654:	4818      	ldr	r0, [pc, #96]	; (80036b8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8003656:	f007 fb17 	bl	800ac88 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 800365a:	4918      	ldr	r1, [pc, #96]	; (80036bc <HAL_TIM_IC_CaptureCallback+0x10c>)
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003662:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003666:	e004      	b.n	8003672 <HAL_TIM_IC_CaptureCallback+0xc2>
			pMotor3++;
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <HAL_TIM_IC_CaptureCallback+0x100>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8003670:	6013      	str	r3, [r2, #0]
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	24000794 	.word	0x24000794
 8003680:	24000798 	.word	0x24000798
 8003684:	24000640 	.word	0x24000640
 8003688:	2400064c 	.word	0x2400064c
 800368c:	24000974 	.word	0x24000974
 8003690:	24000750 	.word	0x24000750
 8003694:	3ff00000 	.word	0x3ff00000
 8003698:	40000400 	.word	0x40000400
 800369c:	24000644 	.word	0x24000644
 80036a0:	24000650 	.word	0x24000650
 80036a4:	240009c0 	.word	0x240009c0
 80036a8:	24000758 	.word	0x24000758
 80036ac:	40000800 	.word	0x40000800
 80036b0:	24000648 	.word	0x24000648
 80036b4:	24000654 	.word	0x24000654
 80036b8:	24000a0c 	.word	0x24000a0c
 80036bc:	240000e8 	.word	0x240000e8

080036c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a89      	ldr	r2, [pc, #548]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	f040 8105 	bne.w	80038dc <HAL_TIM_PeriodElapsedCallback+0x21c>

		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 80036d2:	4b88      	ldr	r3, [pc, #544]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80036d4:	ed93 7b00 	vldr	d7, [r3]
 80036d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80036dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	d12c      	bne.n	8003740 <HAL_TIM_PeriodElapsedCallback+0x80>
 80036e6:	4b84      	ldr	r3, [pc, #528]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80036e8:	ed93 7b00 	vldr	d7, [r3]
 80036ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80036f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_PeriodElapsedCallback+0x80>
 80036fa:	4b80      	ldr	r3, [pc, #512]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80036fc:	ed93 7b00 	vldr	d7, [r3]
 8003700:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003704:	eeb4 7b46 	vcmp.f64	d7, d6
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	d118      	bne.n	8003740 <HAL_TIM_PeriodElapsedCallback+0x80>
			HAL_TIM_Base_Stop_IT(&htim15);
 800370e:	4878      	ldr	r0, [pc, #480]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003710:	f007 f91c 	bl	800a94c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8003714:	487a      	ldr	r0, [pc, #488]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003716:	f007 f879 	bl	800a80c <HAL_TIM_Base_Stop>
			Pini.x = Pfin.x;
 800371a:	4b7a      	ldr	r3, [pc, #488]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	4979      	ldr	r1, [pc, #484]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003722:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 8003726:	4b77      	ldr	r3, [pc, #476]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003728:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800372c:	4976      	ldr	r1, [pc, #472]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800372e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 8003732:	4b74      	ldr	r3, [pc, #464]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003734:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003738:	4973      	ldr	r1, [pc, #460]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800373a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
			}
		}
	}
}
 800373e:	e0cd      	b.n	80038dc <HAL_TIM_PeriodElapsedCallback+0x21c>
			if (!FlagTiempo) {
 8003740:	4b72      	ldr	r3, [pc, #456]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_TIM_PeriodElapsedCallback+0x94>
				FlagTiempo = 1;
 8003748:	4b70      	ldr	r3, [pc, #448]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 800374e:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003750:	2200      	movs	r2, #0
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 8003754:	4b6e      	ldr	r3, [pc, #440]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003760:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	3301      	adds	r3, #1
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800376e:	ed9f 4b5e 	vldr	d4, [pc, #376]	; 80038e8 <HAL_TIM_PeriodElapsedCallback+0x228>
 8003772:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003776:	ee26 7b07 	vmul.f64	d7, d6, d7
 800377a:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800377c:	ed83 7b00 	vstr	d7, [r3]
			get_Straj(Tiempo);
 8003780:	4b64      	ldr	r3, [pc, #400]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003782:	ed93 7b00 	vldr	d7, [r3]
 8003786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800378a:	eeb0 0a67 	vmov.f32	s0, s15
 800378e:	f001 f9f1 	bl	8004b74 <get_Straj>
			Recta3D[0] = Pini.x + q * vDirector[0];
 8003792:	4b5d      	ldr	r3, [pc, #372]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003794:	ed93 6b00 	vldr	d6, [r3]
 8003798:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800379a:	ed93 7a00 	vldr	s14, [r3]
 800379e:	4b5f      	ldr	r3, [pc, #380]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037b0:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80037b2:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pini.y + q * vDirector[1];
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037b8:	ed93 6b02 	vldr	d6, [r3, #8]
 80037bc:	4b56      	ldr	r3, [pc, #344]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80037be:	ed93 7a01 	vldr	s14, [r3, #4]
 80037c2:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037d4:	4b52      	ldr	r3, [pc, #328]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80037d6:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pini.z + q * vDirector[2];
 80037da:	4b4b      	ldr	r3, [pc, #300]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80037dc:	ed93 6b04 	vldr	d6, [r3, #16]
 80037e0:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80037e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80037e6:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80037e8:	edd3 7a00 	vldr	s15, [r3]
 80037ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f8:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80037fa:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + qd * vDirector[0];
 80037fe:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003800:	ed93 7a00 	vldr	s14, [r3]
 8003804:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003928 <HAL_TIM_PeriodElapsedCallback+0x268>
 8003812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800381c:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + qd * vDirector[1];
 8003820:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003822:	ed93 7a01 	vldr	s14, [r3, #4]
 8003826:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003928 <HAL_TIM_PeriodElapsedCallback+0x268>
 8003834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383c:	4b3b      	ldr	r3, [pc, #236]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800383e:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + qd * vDirector[2];
 8003842:	4b35      	ldr	r3, [pc, #212]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003844:	ed93 7a02 	vldr	s14, [r3, #8]
 8003848:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003928 <HAL_TIM_PeriodElapsedCallback+0x268>
 8003856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800385a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800385e:	4b33      	ldr	r3, [pc, #204]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003860:	ed83 7b04 	vstr	d7, [r3, #16]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003866:	ed93 7b00 	vldr	d7, [r3]
 800386a:	4b30      	ldr	r3, [pc, #192]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800386c:	ed93 6b02 	vldr	d6, [r3, #8]
 8003870:	4b2e      	ldr	r3, [pc, #184]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003872:	ed93 2b04 	vldr	d2, [r3, #16]
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003878:	ed93 3b00 	vldr	d3, [r3]
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800387e:	ed93 4b02 	vldr	d4, [r3, #8]
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003884:	ed93 5b04 	vldr	d5, [r3, #16]
 8003888:	eeb0 1b46 	vmov.f64	d1, d6
 800388c:	eeb0 0b47 	vmov.f64	d0, d7
 8003890:	f7fe ffce 	bl	8002830 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003896:	ed93 7b00 	vldr	d7, [r3]
 800389a:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800389c:	ed93 6b02 	vldr	d6, [r3, #8]
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80038a2:	ed93 5b04 	vldr	d5, [r3, #16]
 80038a6:	eeb0 2b45 	vmov.f64	d2, d5
 80038aa:	eeb0 1b46 	vmov.f64	d1, d6
 80038ae:	eeb0 0b47 	vmov.f64	d0, d7
 80038b2:	f002 fd4d 	bl	8006350 <SetPerfilTimers>
			if(Start==1){
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_PeriodElapsedCallback+0x21c>
				Start=0;
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 80038c4:	2100      	movs	r1, #0
 80038c6:	481c      	ldr	r0, [pc, #112]	; (8003938 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80038c8:	f007 f8d0 	bl	800aa6c <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 80038cc:	2100      	movs	r1, #0
 80038ce:	481b      	ldr	r0, [pc, #108]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80038d0:	f007 f8cc 	bl	800aa6c <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 80038d4:	2100      	movs	r1, #0
 80038d6:	481a      	ldr	r0, [pc, #104]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80038d8:	f007 f8c8 	bl	800aa6c <HAL_TIM_PWM_Start>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	f3af 8000 	nop.w
 80038e8:	00000000 	.word	0x00000000
 80038ec:	418e8480 	.word	0x418e8480
 80038f0:	24000a58 	.word	0x24000a58
 80038f4:	24000750 	.word	0x24000750
 80038f8:	24000758 	.word	0x24000758
 80038fc:	240000e8 	.word	0x240000e8
 8003900:	24000928 	.word	0x24000928
 8003904:	240006b0 	.word	0x240006b0
 8003908:	24000698 	.word	0x24000698
 800390c:	24000744 	.word	0x24000744
 8003910:	40000c00 	.word	0x40000c00
 8003914:	24000748 	.word	0x24000748
 8003918:	240006cc 	.word	0x240006cc
 800391c:	24000670 	.word	0x24000670
 8003920:	240006d8 	.word	0x240006d8
 8003924:	24000674 	.word	0x24000674
 8003928:	00000000 	.word	0x00000000
 800392c:	240006f0 	.word	0x240006f0
 8003930:	24000708 	.word	0x24000708
 8003934:	240007f0 	.word	0x240007f0
 8003938:	24000974 	.word	0x24000974
 800393c:	240009c0 	.word	0x240009c0
 8003940:	24000a0c 	.word	0x24000a0c

08003944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	0000      	movs	r0, r0
 8003954:	0000      	movs	r0, r0
	...

08003958 <configStepMotor1>:
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];



void configStepMotor1(double angulo) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <configStepMotor1+0x150>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <configStepMotor1+0x154>)
 800396a:	ed93 7b00 	vldr	d7, [r3]
 800396e:	ed97 6b00 	vldr	d6, [r7]
 8003972:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397a:	db22      	blt.n	80039c2 <configStepMotor1+0x6a>
		if(ES1i_PRESSED){
 800397c:	2102      	movs	r1, #2
 800397e:	484c      	ldr	r0, [pc, #304]	; (8003ab0 <configStepMotor1+0x158>)
 8003980:	f004 fad4 	bl	8007f2c <HAL_GPIO_ReadPin>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 800398a:	494a      	ldr	r1, [pc, #296]	; (8003ab4 <configStepMotor1+0x15c>)
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	4b49      	ldr	r3, [pc, #292]	; (8003ab8 <configStepMotor1+0x160>)
 8003992:	e9c1 2300 	strd	r2, r3, [r1]
 8003996:	e036      	b.n	8003a06 <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 8003998:	4b44      	ldr	r3, [pc, #272]	; (8003aac <configStepMotor1+0x154>)
 800399a:	ed93 7b00 	vldr	d7, [r3]
 800399e:	ed97 6b00 	vldr	d6, [r7]
 80039a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039a6:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 80039aa:	4940      	ldr	r1, [pc, #256]	; (8003aac <configStepMotor1+0x154>)
 80039ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 80039b4:	2201      	movs	r2, #1
 80039b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039ba:	4840      	ldr	r0, [pc, #256]	; (8003abc <configStepMotor1+0x164>)
 80039bc:	f004 face 	bl	8007f5c <HAL_GPIO_WritePin>
 80039c0:	e021      	b.n	8003a06 <configStepMotor1+0xae>
		}
	} else {
		if(ES1s_PRESSED){
 80039c2:	2101      	movs	r1, #1
 80039c4:	483a      	ldr	r0, [pc, #232]	; (8003ab0 <configStepMotor1+0x158>)
 80039c6:	f004 fab1 	bl	8007f2c <HAL_GPIO_ReadPin>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 80039d0:	4938      	ldr	r1, [pc, #224]	; (8003ab4 <configStepMotor1+0x15c>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <configStepMotor1+0x160>)
 80039d8:	e9c1 2300 	strd	r2, r3, [r1]
 80039dc:	e013      	b.n	8003a06 <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 80039de:	4b33      	ldr	r3, [pc, #204]	; (8003aac <configStepMotor1+0x154>)
 80039e0:	ed93 6b00 	vldr	d6, [r3]
 80039e4:	ed97 7b00 	vldr	d7, [r7]
 80039e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039ec:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 80039f0:	492e      	ldr	r1, [pc, #184]	; (8003aac <configStepMotor1+0x154>)
 80039f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f6:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 80039fa:	2200      	movs	r2, #0
 80039fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a00:	482e      	ldr	r0, [pc, #184]	; (8003abc <configStepMotor1+0x164>)
 8003a02:	f004 faab 	bl	8007f5c <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8003a06:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a0a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003a98 <configStepMotor1+0x140>
 8003a0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003a12:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003aa0 <configStepMotor1+0x148>
 8003a16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a1a:	4b29      	ldr	r3, [pc, #164]	; (8003ac0 <configStepMotor1+0x168>)
 8003a1c:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <configStepMotor1+0x168>)
 8003a22:	ed93 7b00 	vldr	d7, [r3]
 8003a26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a2a:	ee17 2a90 	vmov	r2, s15
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <configStepMotor1+0x16c>)
 8003a30:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <configStepMotor1+0x168>)
 8003a34:	ed93 6b00 	vldr	d6, [r3]
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <configStepMotor1+0x16c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003a44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003a48:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <configStepMotor1+0x170>)
 8003a4a:	ed93 7b00 	vldr	d7, [r3]
 8003a4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <configStepMotor1+0x170>)
 8003a54:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <configStepMotor1+0x170>)
 8003a5a:	ed93 7b00 	vldr	d7, [r3]
 8003a5e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	da00      	bge.n	8003a6e <configStepMotor1+0x116>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 8003a6c:	e00e      	b.n	8003a8c <configStepMotor1+0x134>
		remanente1 = remanente1 - 1;
 8003a6e:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <configStepMotor1+0x170>)
 8003a70:	ed93 7b00 	vldr	d7, [r3]
 8003a74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <configStepMotor1+0x170>)
 8003a7e:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <configStepMotor1+0x16c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <configStepMotor1+0x16c>)
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	f3af 8000 	nop.w
 8003a98:	00000000 	.word	0x00000000
 8003a9c:	40bf4000 	.word	0x40bf4000
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	40768000 	.word	0x40768000
 8003aa8:	24000640 	.word	0x24000640
 8003aac:	240007f8 	.word	0x240007f8
 8003ab0:	58021000 	.word	0x58021000
 8003ab4:	240007a0 	.word	0x240007a0
 8003ab8:	3ff00000 	.word	0x3ff00000
 8003abc:	58020800 	.word	0x58020800
 8003ac0:	24000810 	.word	0x24000810
 8003ac4:	2400064c 	.word	0x2400064c
 8003ac8:	24000828 	.word	0x24000828
 8003acc:	00000000 	.word	0x00000000

08003ad0 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 8003ada:	4b51      	ldr	r3, [pc, #324]	; (8003c20 <configStepMotor2+0x150>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 8003ae0:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <configStepMotor2+0x154>)
 8003ae2:	ed93 7b00 	vldr	d7, [r3]
 8003ae6:	ed97 6b00 	vldr	d6, [r7]
 8003aea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	db22      	blt.n	8003b3a <configStepMotor2+0x6a>
		if(ES2i_PRESSED){
 8003af4:	2108      	movs	r1, #8
 8003af6:	484c      	ldr	r0, [pc, #304]	; (8003c28 <configStepMotor2+0x158>)
 8003af8:	f004 fa18 	bl	8007f2c <HAL_GPIO_ReadPin>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 8003b02:	494a      	ldr	r1, [pc, #296]	; (8003c2c <configStepMotor2+0x15c>)
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	4b49      	ldr	r3, [pc, #292]	; (8003c30 <configStepMotor2+0x160>)
 8003b0a:	e9c1 2300 	strd	r2, r3, [r1]
 8003b0e:	e036      	b.n	8003b7e <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 8003b10:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <configStepMotor2+0x154>)
 8003b12:	ed93 7b00 	vldr	d7, [r3]
 8003b16:	ed97 6b00 	vldr	d6, [r7]
 8003b1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003b1e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8003b22:	4940      	ldr	r1, [pc, #256]	; (8003c24 <configStepMotor2+0x154>)
 8003b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b28:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b32:	4840      	ldr	r0, [pc, #256]	; (8003c34 <configStepMotor2+0x164>)
 8003b34:	f004 fa12 	bl	8007f5c <HAL_GPIO_WritePin>
 8003b38:	e021      	b.n	8003b7e <configStepMotor2+0xae>
		}
	} else {
		if(ES2s_PRESSED){
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	483a      	ldr	r0, [pc, #232]	; (8003c28 <configStepMotor2+0x158>)
 8003b3e:	f004 f9f5 	bl	8007f2c <HAL_GPIO_ReadPin>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 8003b48:	4938      	ldr	r1, [pc, #224]	; (8003c2c <configStepMotor2+0x15c>)
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <configStepMotor2+0x160>)
 8003b50:	e9c1 2300 	strd	r2, r3, [r1]
 8003b54:	e013      	b.n	8003b7e <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003b56:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <configStepMotor2+0x154>)
 8003b58:	ed93 6b00 	vldr	d6, [r3]
 8003b5c:	ed97 7b00 	vldr	d7, [r7]
 8003b60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003b64:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8003b68:	492e      	ldr	r1, [pc, #184]	; (8003c24 <configStepMotor2+0x154>)
 8003b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 8003b72:	2200      	movs	r2, #0
 8003b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b78:	482e      	ldr	r0, [pc, #184]	; (8003c34 <configStepMotor2+0x164>)
 8003b7a:	f004 f9ef 	bl	8007f5c <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8003b7e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003b82:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003c10 <configStepMotor2+0x140>
 8003b86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003b8a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003c18 <configStepMotor2+0x148>
 8003b8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003b92:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <configStepMotor2+0x168>)
 8003b94:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <configStepMotor2+0x168>)
 8003b9a:	ed93 7b00 	vldr	d7, [r3]
 8003b9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ba2:	ee17 2a90 	vmov	r2, s15
 8003ba6:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <configStepMotor2+0x16c>)
 8003ba8:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <configStepMotor2+0x168>)
 8003bac:	ed93 6b00 	vldr	d6, [r3]
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <configStepMotor2+0x16c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003bbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <configStepMotor2+0x170>)
 8003bc2:	ed93 7b00 	vldr	d7, [r3]
 8003bc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <configStepMotor2+0x170>)
 8003bcc:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <configStepMotor2+0x170>)
 8003bd2:	ed93 7b00 	vldr	d7, [r3]
 8003bd6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003bda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	da00      	bge.n	8003be6 <configStepMotor2+0x116>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 8003be4:	e00e      	b.n	8003c04 <configStepMotor2+0x134>
		remanente2 = remanente2 - 1;
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <configStepMotor2+0x170>)
 8003be8:	ed93 7b00 	vldr	d7, [r3]
 8003bec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003bf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <configStepMotor2+0x170>)
 8003bf6:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <configStepMotor2+0x16c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <configStepMotor2+0x16c>)
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	f3af 8000 	nop.w
 8003c10:	00000000 	.word	0x00000000
 8003c14:	40bf4000 	.word	0x40bf4000
 8003c18:	00000000 	.word	0x00000000
 8003c1c:	40768000 	.word	0x40768000
 8003c20:	24000644 	.word	0x24000644
 8003c24:	24000800 	.word	0x24000800
 8003c28:	58021000 	.word	0x58021000
 8003c2c:	240007a0 	.word	0x240007a0
 8003c30:	3ff00000 	.word	0x3ff00000
 8003c34:	58020800 	.word	0x58020800
 8003c38:	24000818 	.word	0x24000818
 8003c3c:	24000650 	.word	0x24000650
 8003c40:	24000830 	.word	0x24000830
 8003c44:	00000000 	.word	0x00000000

08003c48 <configStepMotor3>:

void configStepMotor3(double angulo) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 8003c52:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <configStepMotor3+0x150>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <configStepMotor3+0x154>)
 8003c5a:	ed93 7b00 	vldr	d7, [r3]
 8003c5e:	ed97 6b00 	vldr	d6, [r7]
 8003c62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	db22      	blt.n	8003cb2 <configStepMotor3+0x6a>
		if(ES3i_PRESSED){
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	484c      	ldr	r0, [pc, #304]	; (8003da0 <configStepMotor3+0x158>)
 8003c70:	f004 f95c 	bl	8007f2c <HAL_GPIO_ReadPin>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 8003c7a:	494a      	ldr	r1, [pc, #296]	; (8003da4 <configStepMotor3+0x15c>)
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <configStepMotor3+0x160>)
 8003c82:	e9c1 2300 	strd	r2, r3, [r1]
 8003c86:	e036      	b.n	8003cf6 <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 8003c88:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <configStepMotor3+0x154>)
 8003c8a:	ed93 7b00 	vldr	d7, [r3]
 8003c8e:	ed97 6b00 	vldr	d6, [r7]
 8003c92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c96:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003c9a:	4940      	ldr	r1, [pc, #256]	; (8003d9c <configStepMotor3+0x154>)
 8003c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ca0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003caa:	4840      	ldr	r0, [pc, #256]	; (8003dac <configStepMotor3+0x164>)
 8003cac:	f004 f956 	bl	8007f5c <HAL_GPIO_WritePin>
 8003cb0:	e021      	b.n	8003cf6 <configStepMotor3+0xae>
		}
	} else {
		if(ES3s_PRESSED){
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	483a      	ldr	r0, [pc, #232]	; (8003da0 <configStepMotor3+0x158>)
 8003cb6:	f004 f939 	bl	8007f2c <HAL_GPIO_ReadPin>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <configStepMotor3+0x86>
			flagErrorEndStop = 1;
 8003cc0:	4938      	ldr	r1, [pc, #224]	; (8003da4 <configStepMotor3+0x15c>)
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b38      	ldr	r3, [pc, #224]	; (8003da8 <configStepMotor3+0x160>)
 8003cc8:	e9c1 2300 	strd	r2, r3, [r1]
 8003ccc:	e013      	b.n	8003cf6 <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003cce:	4b33      	ldr	r3, [pc, #204]	; (8003d9c <configStepMotor3+0x154>)
 8003cd0:	ed93 6b00 	vldr	d6, [r3]
 8003cd4:	ed97 7b00 	vldr	d7, [r7]
 8003cd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003cdc:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003ce0:	492e      	ldr	r1, [pc, #184]	; (8003d9c <configStepMotor3+0x154>)
 8003ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce6:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cf0:	482e      	ldr	r0, [pc, #184]	; (8003dac <configStepMotor3+0x164>)
 8003cf2:	f004 f933 	bl	8007f5c <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8003cf6:	ed97 7b02 	vldr	d7, [r7, #8]
 8003cfa:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003d88 <configStepMotor3+0x140>
 8003cfe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003d02:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003d90 <configStepMotor3+0x148>
 8003d06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003d0a:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <configStepMotor3+0x168>)
 8003d0c:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <configStepMotor3+0x168>)
 8003d12:	ed93 7b00 	vldr	d7, [r3]
 8003d16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003d1a:	ee17 2a90 	vmov	r2, s15
 8003d1e:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <configStepMotor3+0x16c>)
 8003d20:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <configStepMotor3+0x168>)
 8003d24:	ed93 6b00 	vldr	d6, [r3]
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <configStepMotor3+0x16c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003d34:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003d38:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <configStepMotor3+0x170>)
 8003d3a:	ed93 7b00 	vldr	d7, [r3]
 8003d3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <configStepMotor3+0x170>)
 8003d44:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <configStepMotor3+0x170>)
 8003d4a:	ed93 7b00 	vldr	d7, [r3]
 8003d4e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003d52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5a:	da00      	bge.n	8003d5e <configStepMotor3+0x116>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 8003d5c:	e00e      	b.n	8003d7c <configStepMotor3+0x134>
		remanente3 = remanente3 - 1;
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <configStepMotor3+0x170>)
 8003d60:	ed93 7b00 	vldr	d7, [r3]
 8003d64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003d68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <configStepMotor3+0x170>)
 8003d6e:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <configStepMotor3+0x16c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <configStepMotor3+0x16c>)
 8003d7a:	6013      	str	r3, [r2, #0]
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	f3af 8000 	nop.w
 8003d88:	00000000 	.word	0x00000000
 8003d8c:	40bf4000 	.word	0x40bf4000
 8003d90:	00000000 	.word	0x00000000
 8003d94:	40768000 	.word	0x40768000
 8003d98:	24000648 	.word	0x24000648
 8003d9c:	24000808 	.word	0x24000808
 8003da0:	58021000 	.word	0x58021000
 8003da4:	240007a0 	.word	0x240007a0
 8003da8:	3ff00000 	.word	0x3ff00000
 8003dac:	58020800 	.word	0x58020800
 8003db0:	24000820 	.word	0x24000820
 8003db4:	24000654 	.word	0x24000654
 8003db8:	24000838 	.word	0x24000838

08003dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_MspInit+0x44>)
 8003dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <HAL_MspInit+0x44>)
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_MspInit+0x44>)
 8003dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003de0:	2005      	movs	r0, #5
 8003de2:	f003 f941 	bl	8007068 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2101      	movs	r1, #1
 8003dea:	2051      	movs	r0, #81	; 0x51
 8003dec:	f003 f947 	bl	800707e <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003df0:	2051      	movs	r0, #81	; 0x51
 8003df2:	f003 f95e 	bl	80070b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400

08003e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e16:	e7fe      	b.n	8003e16 <HardFault_Handler+0x4>

08003e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <MemManage_Handler+0x4>

08003e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <BusFault_Handler+0x4>

08003e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <UsageFault_Handler+0x4>

08003e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e58:	f002 ffc2 	bl	8006de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003e64:	2001      	movs	r0, #1
 8003e66:	f004 f892 	bl	8007f8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003e72:	2002      	movs	r0, #2
 8003e74:	f004 f88b 	bl	8007f8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003e80:	2004      	movs	r0, #4
 8003e82:	f004 f884 	bl	8007f8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003e8e:	2008      	movs	r0, #8
 8003e90:	f004 f87d 	bl	8007f8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003e94:	bf00      	nop
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003e9c:	2010      	movs	r0, #16
 8003e9e:	f004 f876 	bl	8007f8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003eaa:	2020      	movs	r0, #32
 8003eac:	f004 f86f 	bl	8007f8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003eb0:	bf00      	nop
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <TIM2_IRQHandler+0x10>)
 8003eba:	f007 faef 	bl	800b49c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	24000844 	.word	0x24000844

08003ec8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <TIM3_IRQHandler+0x10>)
 8003ece:	f007 fae5 	bl	800b49c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	24000890 	.word	0x24000890

08003edc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ee0:	4802      	ldr	r0, [pc, #8]	; (8003eec <TIM4_IRQHandler+0x10>)
 8003ee2:	f007 fadb 	bl	800b49c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	240008dc 	.word	0x240008dc

08003ef0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <USART3_IRQHandler+0x10>)
 8003ef6:	f008 ff29 	bl	800cd4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	24000bfc 	.word	0x24000bfc

08003f04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003f08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003f0c:	f004 f83f 	bl	8007f8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <TIM15_IRQHandler+0x10>)
 8003f2a:	f007 fab7 	bl	800b49c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	24000a58 	.word	0x24000a58

08003f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
	return 1;
 8003f3c:	2301      	movs	r3, #1
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_kill>:

int _kill(int pid, int sig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f52:	f00b f91d 	bl	800f190 <__errno>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2216      	movs	r2, #22
 8003f5a:	601a      	str	r2, [r3, #0]
	return -1;
 8003f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_exit>:

void _exit (int status)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f70:	f04f 31ff 	mov.w	r1, #4294967295
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ffe7 	bl	8003f48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f7a:	e7fe      	b.n	8003f7a <_exit+0x12>

08003f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e00a      	b.n	8003fa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f8e:	f3af 8000 	nop.w
 8003f92:	4601      	mov	r1, r0
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	60ba      	str	r2, [r7, #8]
 8003f9a:	b2ca      	uxtb	r2, r1
 8003f9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	dbf0      	blt.n	8003f8e <_read+0x12>
	}

return len;
 8003fac:	687b      	ldr	r3, [r7, #4]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e009      	b.n	8003fdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	60ba      	str	r2, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	dbf1      	blt.n	8003fc8 <_write+0x12>
	}
	return len;
 8003fe4:	687b      	ldr	r3, [r7, #4]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <_close>:

int _close(int file)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
	return -1;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004016:	605a      	str	r2, [r3, #4]
	return 0;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <_isatty>:

int _isatty(int file)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
	return 1;
 800402e:	2301      	movs	r3, #1
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	return 0;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <_sbrk+0x50>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <_sbrk+0x16>
		heap_end = &end;
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <_sbrk+0x50>)
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <_sbrk+0x54>)
 800406c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <_sbrk+0x50>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <_sbrk+0x50>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	466a      	mov	r2, sp
 800407e:	4293      	cmp	r3, r2
 8004080:	d907      	bls.n	8004092 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004082:	f00b f885 	bl	800f190 <__errno>
 8004086:	4603      	mov	r3, r0
 8004088:	220c      	movs	r2, #12
 800408a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	e006      	b.n	80040a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <_sbrk+0x50>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <_sbrk+0x50>)
 800409c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	24000840 	.word	0x24000840
 80040ac:	24000ca0 	.word	0x24000ca0

080040b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <SystemInit+0xac>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	4a28      	ldr	r2, [pc, #160]	; (800415c <SystemInit+0xac>)
 80040bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80040c4:	4b26      	ldr	r3, [pc, #152]	; (8004160 <SystemInit+0xb0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a25      	ldr	r2, [pc, #148]	; (8004160 <SystemInit+0xb0>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040d0:	4b23      	ldr	r3, [pc, #140]	; (8004160 <SystemInit+0xb0>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <SystemInit+0xb0>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4921      	ldr	r1, [pc, #132]	; (8004160 <SystemInit+0xb0>)
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <SystemInit+0xb4>)
 80040de:	4013      	ands	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80040e2:	4b1f      	ldr	r3, [pc, #124]	; (8004160 <SystemInit+0xb0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80040e8:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <SystemInit+0xb0>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80040ee:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <SystemInit+0xb0>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80040f4:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <SystemInit+0xb0>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80040fa:	4b19      	ldr	r3, [pc, #100]	; (8004160 <SystemInit+0xb0>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8004100:	4b17      	ldr	r3, [pc, #92]	; (8004160 <SystemInit+0xb0>)
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004106:	4b16      	ldr	r3, [pc, #88]	; (8004160 <SystemInit+0xb0>)
 8004108:	2200      	movs	r2, #0
 800410a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <SystemInit+0xb0>)
 800410e:	2200      	movs	r2, #0
 8004110:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <SystemInit+0xb0>)
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <SystemInit+0xb0>)
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <SystemInit+0xb0>)
 8004120:	2200      	movs	r2, #0
 8004122:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <SystemInit+0xb0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <SystemInit+0xb0>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <SystemInit+0xb0>)
 8004132:	2200      	movs	r2, #0
 8004134:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <SystemInit+0xb8>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <SystemInit+0xbc>)
 800413c:	4013      	ands	r3, r2
 800413e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004142:	d202      	bcs.n	800414a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <SystemInit+0xc0>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <SystemInit+0xac>)
 800414c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004150:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000ed00 	.word	0xe000ed00
 8004160:	58024400 	.word	0x58024400
 8004164:	eaf6ed7f 	.word	0xeaf6ed7f
 8004168:	5c001000 	.word	0x5c001000
 800416c:	ffff0000 	.word	0xffff0000
 8004170:	51008108 	.word	0x51008108

08004174 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b090      	sub	sp, #64	; 0x40
 8004178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800417a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004188:	f107 031c 	add.w	r3, r7, #28
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004198:	f107 030c 	add.w	r3, r7, #12
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a6:	463b      	mov	r3, r7
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041b0:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <MX_TIM2_Init+0x138>)
 80041b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80041b8:	4b3c      	ldr	r3, [pc, #240]	; (80042ac <MX_TIM2_Init+0x138>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <MX_TIM2_Init+0x138>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80041c4:	4b39      	ldr	r3, [pc, #228]	; (80042ac <MX_TIM2_Init+0x138>)
 80041c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041cc:	4b37      	ldr	r3, [pc, #220]	; (80042ac <MX_TIM2_Init+0x138>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <MX_TIM2_Init+0x138>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041d8:	4834      	ldr	r0, [pc, #208]	; (80042ac <MX_TIM2_Init+0x138>)
 80041da:	f006 fa4f 	bl	800a67c <HAL_TIM_Base_Init>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80041e4:	f7ff fbae 	bl	8003944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041f2:	4619      	mov	r1, r3
 80041f4:	482d      	ldr	r0, [pc, #180]	; (80042ac <MX_TIM2_Init+0x138>)
 80041f6:	f007 fc21 	bl	800ba3c <HAL_TIM_ConfigClockSource>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004200:	f7ff fba0 	bl	8003944 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004204:	4829      	ldr	r0, [pc, #164]	; (80042ac <MX_TIM2_Init+0x138>)
 8004206:	f006 fdd5 	bl	800adb4 <HAL_TIM_IC_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8004210:	f7ff fb98 	bl	8003944 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004214:	2304      	movs	r3, #4
 8004216:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004218:	2350      	movs	r3, #80	; 0x50
 800421a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800421c:	2300      	movs	r3, #0
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004220:	2300      	movs	r3, #0
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8004228:	f107 031c 	add.w	r3, r7, #28
 800422c:	4619      	mov	r1, r3
 800422e:	481f      	ldr	r0, [pc, #124]	; (80042ac <MX_TIM2_Init+0x138>)
 8004230:	f007 fcfc 	bl	800bc2c <HAL_TIM_SlaveConfigSynchro>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800423a:	f7ff fb83 	bl	8003944 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004242:	2301      	movs	r3, #1
 8004244:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800424e:	f107 030c 	add.w	r3, r7, #12
 8004252:	2200      	movs	r2, #0
 8004254:	4619      	mov	r1, r3
 8004256:	4815      	ldr	r0, [pc, #84]	; (80042ac <MX_TIM2_Init+0x138>)
 8004258:	f007 fa3f 	bl	800b6da <HAL_TIM_IC_ConfigChannel>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8004262:	f7ff fb6f 	bl	8003944 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004266:	2302      	movs	r3, #2
 8004268:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800426a:	2302      	movs	r3, #2
 800426c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800426e:	f107 030c 	add.w	r3, r7, #12
 8004272:	2204      	movs	r2, #4
 8004274:	4619      	mov	r1, r3
 8004276:	480d      	ldr	r0, [pc, #52]	; (80042ac <MX_TIM2_Init+0x138>)
 8004278:	f007 fa2f 	bl	800b6da <HAL_TIM_IC_ConfigChannel>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8004282:	f7ff fb5f 	bl	8003944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800428e:	463b      	mov	r3, r7
 8004290:	4619      	mov	r1, r3
 8004292:	4806      	ldr	r0, [pc, #24]	; (80042ac <MX_TIM2_Init+0x138>)
 8004294:	f008 fb72 	bl	800c97c <HAL_TIMEx_MasterConfigSynchronization>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800429e:	f7ff fb51 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042a2:	bf00      	nop
 80042a4:	3740      	adds	r7, #64	; 0x40
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	24000844 	.word	0x24000844

080042b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	; 0x30
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042b6:	f107 0320 	add.w	r3, r7, #32
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <MX_TIM3_Init+0xdc>)
 80042de:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <MX_TIM3_Init+0xe0>)
 80042e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <MX_TIM3_Init+0xdc>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e8:	4b28      	ldr	r3, [pc, #160]	; (800438c <MX_TIM3_Init+0xdc>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80042ee:	4b27      	ldr	r3, [pc, #156]	; (800438c <MX_TIM3_Init+0xdc>)
 80042f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f6:	4b25      	ldr	r3, [pc, #148]	; (800438c <MX_TIM3_Init+0xdc>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042fc:	4b23      	ldr	r3, [pc, #140]	; (800438c <MX_TIM3_Init+0xdc>)
 80042fe:	2200      	movs	r2, #0
 8004300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004302:	4822      	ldr	r0, [pc, #136]	; (800438c <MX_TIM3_Init+0xdc>)
 8004304:	f006 f9ba 	bl	800a67c <HAL_TIM_Base_Init>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800430e:	f7ff fb19 	bl	8003944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004316:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004318:	f107 0320 	add.w	r3, r7, #32
 800431c:	4619      	mov	r1, r3
 800431e:	481b      	ldr	r0, [pc, #108]	; (800438c <MX_TIM3_Init+0xdc>)
 8004320:	f007 fb8c 	bl	800ba3c <HAL_TIM_ConfigClockSource>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800432a:	f7ff fb0b 	bl	8003944 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800432e:	4817      	ldr	r0, [pc, #92]	; (800438c <MX_TIM3_Init+0xdc>)
 8004330:	f006 fd40 	bl	800adb4 <HAL_TIM_IC_Init>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800433a:	f7ff fb03 	bl	8003944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	4619      	mov	r1, r3
 800434c:	480f      	ldr	r0, [pc, #60]	; (800438c <MX_TIM3_Init+0xdc>)
 800434e:	f008 fb15 	bl	800c97c <HAL_TIMEx_MasterConfigSynchronization>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8004358:	f7ff faf4 	bl	8003944 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800435c:	2300      	movs	r3, #0
 800435e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004360:	2301      	movs	r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	2200      	movs	r2, #0
 8004370:	4619      	mov	r1, r3
 8004372:	4806      	ldr	r0, [pc, #24]	; (800438c <MX_TIM3_Init+0xdc>)
 8004374:	f007 f9b1 	bl	800b6da <HAL_TIM_IC_ConfigChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800437e:	f7ff fae1 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004382:	bf00      	nop
 8004384:	3730      	adds	r7, #48	; 0x30
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	24000890 	.word	0x24000890
 8004390:	40000400 	.word	0x40000400

08004394 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800439a:	f107 0320 	add.w	r3, r7, #32
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <MX_TIM4_Init+0xdc>)
 80043c2:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <MX_TIM4_Init+0xe0>)
 80043c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <MX_TIM4_Init+0xdc>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <MX_TIM4_Init+0xdc>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <MX_TIM4_Init+0xdc>)
 80043d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043da:	4b25      	ldr	r3, [pc, #148]	; (8004470 <MX_TIM4_Init+0xdc>)
 80043dc:	2200      	movs	r2, #0
 80043de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <MX_TIM4_Init+0xdc>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80043e6:	4822      	ldr	r0, [pc, #136]	; (8004470 <MX_TIM4_Init+0xdc>)
 80043e8:	f006 f948 	bl	800a67c <HAL_TIM_Base_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80043f2:	f7ff faa7 	bl	8003944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80043fc:	f107 0320 	add.w	r3, r7, #32
 8004400:	4619      	mov	r1, r3
 8004402:	481b      	ldr	r0, [pc, #108]	; (8004470 <MX_TIM4_Init+0xdc>)
 8004404:	f007 fb1a 	bl	800ba3c <HAL_TIM_ConfigClockSource>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800440e:	f7ff fa99 	bl	8003944 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004412:	4817      	ldr	r0, [pc, #92]	; (8004470 <MX_TIM4_Init+0xdc>)
 8004414:	f006 fcce 	bl	800adb4 <HAL_TIM_IC_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800441e:	f7ff fa91 	bl	8003944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800442a:	f107 0314 	add.w	r3, r7, #20
 800442e:	4619      	mov	r1, r3
 8004430:	480f      	ldr	r0, [pc, #60]	; (8004470 <MX_TIM4_Init+0xdc>)
 8004432:	f008 faa3 	bl	800c97c <HAL_TIMEx_MasterConfigSynchronization>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800443c:	f7ff fa82 	bl	8003944 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004440:	2300      	movs	r3, #0
 8004442:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004444:	2301      	movs	r3, #1
 8004446:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	2200      	movs	r2, #0
 8004454:	4619      	mov	r1, r3
 8004456:	4806      	ldr	r0, [pc, #24]	; (8004470 <MX_TIM4_Init+0xdc>)
 8004458:	f007 f93f 	bl	800b6da <HAL_TIM_IC_ConfigChannel>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004462:	f7ff fa6f 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004466:	bf00      	nop
 8004468:	3730      	adds	r7, #48	; 0x30
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	240008dc 	.word	0x240008dc
 8004474:	40000800 	.word	0x40000800

08004478 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800447e:	f107 0310 	add.w	r3, r7, #16
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <MX_TIM5_Init+0x98>)
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <MX_TIM5_Init+0x9c>)
 800449a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 800449c:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <MX_TIM5_Init+0x98>)
 800449e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80044a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <MX_TIM5_Init+0x98>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <MX_TIM5_Init+0x98>)
 80044ac:	f04f 32ff 	mov.w	r2, #4294967295
 80044b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <MX_TIM5_Init+0x98>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <MX_TIM5_Init+0x98>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80044be:	4814      	ldr	r0, [pc, #80]	; (8004510 <MX_TIM5_Init+0x98>)
 80044c0:	f006 f8dc 	bl	800a67c <HAL_TIM_Base_Init>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80044ca:	f7ff fa3b 	bl	8003944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4619      	mov	r1, r3
 80044da:	480d      	ldr	r0, [pc, #52]	; (8004510 <MX_TIM5_Init+0x98>)
 80044dc:	f007 faae 	bl	800ba3c <HAL_TIM_ConfigClockSource>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80044e6:	f7ff fa2d 	bl	8003944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4806      	ldr	r0, [pc, #24]	; (8004510 <MX_TIM5_Init+0x98>)
 80044f8:	f008 fa40 	bl	800c97c <HAL_TIMEx_MasterConfigSynchronization>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8004502:	f7ff fa1f 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004506:	bf00      	nop
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	24000928 	.word	0x24000928
 8004514:	40000c00 	.word	0x40000c00

08004518 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800451e:	f107 0320 	add.w	r3, r7, #32
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	615a      	str	r2, [r3, #20]
 800453c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <MX_TIM12_Init+0xc0>)
 8004540:	4a26      	ldr	r2, [pc, #152]	; (80045dc <MX_TIM12_Init+0xc4>)
 8004542:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 8004544:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <MX_TIM12_Init+0xc0>)
 8004546:	f240 12f3 	movw	r2, #499	; 0x1f3
 800454a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454c:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <MX_TIM12_Init+0xc0>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 8004552:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <MX_TIM12_Init+0xc0>)
 8004554:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004558:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800455a:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <MX_TIM12_Init+0xc0>)
 800455c:	2200      	movs	r2, #0
 800455e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <MX_TIM12_Init+0xc0>)
 8004562:	2200      	movs	r2, #0
 8004564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004566:	481c      	ldr	r0, [pc, #112]	; (80045d8 <MX_TIM12_Init+0xc0>)
 8004568:	f006 f888 	bl	800a67c <HAL_TIM_Base_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8004572:	f7ff f9e7 	bl	8003944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800457a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800457c:	f107 0320 	add.w	r3, r7, #32
 8004580:	4619      	mov	r1, r3
 8004582:	4815      	ldr	r0, [pc, #84]	; (80045d8 <MX_TIM12_Init+0xc0>)
 8004584:	f007 fa5a 	bl	800ba3c <HAL_TIM_ConfigClockSource>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800458e:	f7ff f9d9 	bl	8003944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004592:	4811      	ldr	r0, [pc, #68]	; (80045d8 <MX_TIM12_Init+0xc0>)
 8004594:	f006 fa09 	bl	800a9aa <HAL_TIM_PWM_Init>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800459e:	f7ff f9d1 	bl	8003944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045a2:	2360      	movs	r3, #96	; 0x60
 80045a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80045a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80045aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	2200      	movs	r2, #0
 80045b8:	4619      	mov	r1, r3
 80045ba:	4807      	ldr	r0, [pc, #28]	; (80045d8 <MX_TIM12_Init+0xc0>)
 80045bc:	f007 f92a 	bl	800b814 <HAL_TIM_PWM_ConfigChannel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 80045c6:	f7ff f9bd 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80045ca:	4803      	ldr	r0, [pc, #12]	; (80045d8 <MX_TIM12_Init+0xc0>)
 80045cc:	f000 fa44 	bl	8004a58 <HAL_TIM_MspPostInit>

}
 80045d0:	bf00      	nop
 80045d2:	3730      	adds	r7, #48	; 0x30
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	24000974 	.word	0x24000974
 80045dc:	40001800 	.word	0x40001800

080045e0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	611a      	str	r2, [r3, #16]
 80045f4:	615a      	str	r2, [r3, #20]
 80045f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80045f8:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <MX_TIM13_Init+0x98>)
 80045fa:	4a20      	ldr	r2, [pc, #128]	; (800467c <MX_TIM13_Init+0x9c>)
 80045fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <MX_TIM13_Init+0x98>)
 8004600:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004604:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004606:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <MX_TIM13_Init+0x98>)
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <MX_TIM13_Init+0x98>)
 800460e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004612:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <MX_TIM13_Init+0x98>)
 8004616:	2200      	movs	r2, #0
 8004618:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <MX_TIM13_Init+0x98>)
 800461c:	2200      	movs	r2, #0
 800461e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004620:	4815      	ldr	r0, [pc, #84]	; (8004678 <MX_TIM13_Init+0x98>)
 8004622:	f006 f82b 	bl	800a67c <HAL_TIM_Base_Init>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800462c:	f7ff f98a 	bl	8003944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004630:	4811      	ldr	r0, [pc, #68]	; (8004678 <MX_TIM13_Init+0x98>)
 8004632:	f006 f9ba 	bl	800a9aa <HAL_TIM_PWM_Init>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800463c:	f7ff f982 	bl	8003944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004640:	2360      	movs	r3, #96	; 0x60
 8004642:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8004644:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	2200      	movs	r2, #0
 8004656:	4619      	mov	r1, r3
 8004658:	4807      	ldr	r0, [pc, #28]	; (8004678 <MX_TIM13_Init+0x98>)
 800465a:	f007 f8db 	bl	800b814 <HAL_TIM_PWM_ConfigChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8004664:	f7ff f96e 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004668:	4803      	ldr	r0, [pc, #12]	; (8004678 <MX_TIM13_Init+0x98>)
 800466a:	f000 f9f5 	bl	8004a58 <HAL_TIM_MspPostInit>

}
 800466e:	bf00      	nop
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	240009c0 	.word	0x240009c0
 800467c:	40001c00 	.word	0x40001c00

08004680 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	611a      	str	r2, [r3, #16]
 8004694:	615a      	str	r2, [r3, #20]
 8004696:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004698:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <MX_TIM14_Init+0x98>)
 800469a:	4a20      	ldr	r2, [pc, #128]	; (800471c <MX_TIM14_Init+0x9c>)
 800469c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 800469e:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <MX_TIM14_Init+0x98>)
 80046a0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80046a4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <MX_TIM14_Init+0x98>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 80046ac:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <MX_TIM14_Init+0x98>)
 80046ae:	f649 4240 	movw	r2, #40000	; 0x9c40
 80046b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046b4:	4b18      	ldr	r3, [pc, #96]	; (8004718 <MX_TIM14_Init+0x98>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <MX_TIM14_Init+0x98>)
 80046bc:	2200      	movs	r2, #0
 80046be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80046c0:	4815      	ldr	r0, [pc, #84]	; (8004718 <MX_TIM14_Init+0x98>)
 80046c2:	f005 ffdb 	bl	800a67c <HAL_TIM_Base_Init>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80046cc:	f7ff f93a 	bl	8003944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80046d0:	4811      	ldr	r0, [pc, #68]	; (8004718 <MX_TIM14_Init+0x98>)
 80046d2:	f006 f96a 	bl	800a9aa <HAL_TIM_PWM_Init>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80046dc:	f7ff f932 	bl	8003944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046e0:	2360      	movs	r3, #96	; 0x60
 80046e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80046e4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80046e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	2200      	movs	r2, #0
 80046f6:	4619      	mov	r1, r3
 80046f8:	4807      	ldr	r0, [pc, #28]	; (8004718 <MX_TIM14_Init+0x98>)
 80046fa:	f007 f88b 	bl	800b814 <HAL_TIM_PWM_ConfigChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8004704:	f7ff f91e 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004708:	4803      	ldr	r0, [pc, #12]	; (8004718 <MX_TIM14_Init+0x98>)
 800470a:	f000 f9a5 	bl	8004a58 <HAL_TIM_MspPostInit>

}
 800470e:	bf00      	nop
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	24000a0c 	.word	0x24000a0c
 800471c:	40002000 	.word	0x40002000

08004720 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004726:	f107 0310 	add.w	r3, r7, #16
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	609a      	str	r2, [r3, #8]
 8004732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800473e:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <MX_TIM15_Init+0x9c>)
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <MX_TIM15_Init+0xa0>)
 8004742:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 8004744:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <MX_TIM15_Init+0x9c>)
 8004746:	2201      	movs	r2, #1
 8004748:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <MX_TIM15_Init+0x9c>)
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <MX_TIM15_Init+0x9c>)
 8004752:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8004756:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004758:	4b18      	ldr	r3, [pc, #96]	; (80047bc <MX_TIM15_Init+0x9c>)
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800475e:	4b17      	ldr	r3, [pc, #92]	; (80047bc <MX_TIM15_Init+0x9c>)
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004764:	4b15      	ldr	r3, [pc, #84]	; (80047bc <MX_TIM15_Init+0x9c>)
 8004766:	2200      	movs	r2, #0
 8004768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800476a:	4814      	ldr	r0, [pc, #80]	; (80047bc <MX_TIM15_Init+0x9c>)
 800476c:	f005 ff86 	bl	800a67c <HAL_TIM_Base_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004776:	f7ff f8e5 	bl	8003944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800477a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004780:	f107 0310 	add.w	r3, r7, #16
 8004784:	4619      	mov	r1, r3
 8004786:	480d      	ldr	r0, [pc, #52]	; (80047bc <MX_TIM15_Init+0x9c>)
 8004788:	f007 f958 	bl	800ba3c <HAL_TIM_ConfigClockSource>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004792:	f7ff f8d7 	bl	8003944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4806      	ldr	r0, [pc, #24]	; (80047bc <MX_TIM15_Init+0x9c>)
 80047a4:	f008 f8ea 	bl	800c97c <HAL_TIMEx_MasterConfigSynchronization>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80047ae:	f7ff f8c9 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80047b2:	bf00      	nop
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	24000a58 	.word	0x24000a58
 80047c0:	40014000 	.word	0x40014000

080047c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b092      	sub	sp, #72	; 0x48
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d136      	bne.n	8004854 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047e6:	4b92      	ldr	r3, [pc, #584]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80047e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ec:	4a90      	ldr	r2, [pc, #576]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047f6:	4b8e      	ldr	r3, [pc, #568]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80047f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004804:	4b8a      	ldr	r3, [pc, #552]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800480a:	4a89      	ldr	r2, [pc, #548]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004814:	4b86      	ldr	r3, [pc, #536]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004822:	2301      	movs	r3, #1
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	2302      	movs	r3, #2
 8004828:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	2300      	movs	r3, #0
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482e:	2300      	movs	r3, #0
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004832:	2301      	movs	r3, #1
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800483a:	4619      	mov	r1, r3
 800483c:	487d      	ldr	r0, [pc, #500]	; (8004a34 <HAL_TIM_Base_MspInit+0x270>)
 800483e:	f003 f9c5 	bl	8007bcc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2101      	movs	r1, #1
 8004846:	201c      	movs	r0, #28
 8004848:	f002 fc19 	bl	800707e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800484c:	201c      	movs	r0, #28
 800484e:	f002 fc30 	bl	80070b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004852:	e0e8      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a77      	ldr	r2, [pc, #476]	; (8004a38 <HAL_TIM_Base_MspInit+0x274>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d136      	bne.n	80048cc <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800485e:	4b74      	ldr	r3, [pc, #464]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004864:	4a72      	ldr	r2, [pc, #456]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004866:	f043 0302 	orr.w	r3, r3, #2
 800486a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800486e:	4b70      	ldr	r3, [pc, #448]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487c:	4b6c      	ldr	r3, [pc, #432]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 800487e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004882:	4a6b      	ldr	r2, [pc, #428]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800488c:	4b68      	ldr	r3, [pc, #416]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 800488e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489e:	2302      	movs	r3, #2
 80048a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048a2:	2302      	movs	r3, #2
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a6:	2300      	movs	r3, #0
 80048a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048aa:	2302      	movs	r3, #2
 80048ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 80048ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048b2:	4619      	mov	r1, r3
 80048b4:	485f      	ldr	r0, [pc, #380]	; (8004a34 <HAL_TIM_Base_MspInit+0x270>)
 80048b6:	f003 f989 	bl	8007bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2101      	movs	r1, #1
 80048be:	201d      	movs	r0, #29
 80048c0:	f002 fbdd 	bl	800707e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048c4:	201d      	movs	r0, #29
 80048c6:	f002 fbf4 	bl	80070b2 <HAL_NVIC_EnableIRQ>
}
 80048ca:	e0ac      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5a      	ldr	r2, [pc, #360]	; (8004a3c <HAL_TIM_Base_MspInit+0x278>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d137      	bne.n	8004946 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048d6:	4b56      	ldr	r3, [pc, #344]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80048d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048dc:	4a54      	ldr	r2, [pc, #336]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048e6:	4b52      	ldr	r3, [pc, #328]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80048e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048f4:	4b4e      	ldr	r3, [pc, #312]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80048f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048fa:	4a4d      	ldr	r2, [pc, #308]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004904:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 8004912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800491c:	2302      	movs	r3, #2
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004920:	2300      	movs	r3, #0
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004924:	2302      	movs	r3, #2
 8004926:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 8004928:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800492c:	4619      	mov	r1, r3
 800492e:	4844      	ldr	r0, [pc, #272]	; (8004a40 <HAL_TIM_Base_MspInit+0x27c>)
 8004930:	f003 f94c 	bl	8007bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004934:	2200      	movs	r2, #0
 8004936:	2101      	movs	r1, #1
 8004938:	201e      	movs	r0, #30
 800493a:	f002 fba0 	bl	800707e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800493e:	201e      	movs	r0, #30
 8004940:	f002 fbb7 	bl	80070b2 <HAL_NVIC_EnableIRQ>
}
 8004944:	e06f      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <HAL_TIM_Base_MspInit+0x280>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10f      	bne.n	8004970 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004950:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004956:	4a36      	ldr	r2, [pc, #216]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004958:	f043 0308 	orr.w	r3, r3, #8
 800495c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004960:	4b33      	ldr	r3, [pc, #204]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	69bb      	ldr	r3, [r7, #24]
}
 800496e:	e05a      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <HAL_TIM_Base_MspInit+0x284>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10f      	bne.n	800499a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800497a:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 800497c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004980:	4a2b      	ldr	r2, [pc, #172]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004986:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800498a:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 800498c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	697b      	ldr	r3, [r7, #20]
}
 8004998:	e045      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <HAL_TIM_Base_MspInit+0x288>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10f      	bne.n	80049c4 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80049a4:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80049a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049aa:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049b4:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80049b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
}
 80049c2:	e030      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <HAL_TIM_Base_MspInit+0x28c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10f      	bne.n	80049ee <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80049d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80049d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80049e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	e01b      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_TIM_Base_MspInit+0x290>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d116      	bne.n	8004a26 <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 80049fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049fe:	4a0c      	ldr	r2, [pc, #48]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_TIM_Base_MspInit+0x26c>)
 8004a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	2101      	movs	r1, #1
 8004a1a:	2074      	movs	r0, #116	; 0x74
 8004a1c:	f002 fb2f 	bl	800707e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004a20:	2074      	movs	r0, #116	; 0x74
 8004a22:	f002 fb46 	bl	80070b2 <HAL_NVIC_EnableIRQ>
}
 8004a26:	bf00      	nop
 8004a28:	3748      	adds	r7, #72	; 0x48
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	58024400 	.word	0x58024400
 8004a34:	58020000 	.word	0x58020000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	58020c00 	.word	0x58020c00
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40001800 	.word	0x40001800
 8004a4c:	40001c00 	.word	0x40001c00
 8004a50:	40002000 	.word	0x40002000
 8004a54:	40014000 	.word	0x40014000

08004a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	60da      	str	r2, [r3, #12]
 8004a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a39      	ldr	r2, [pc, #228]	; (8004b5c <HAL_TIM_MspPostInit+0x104>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d120      	bne.n	8004abc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a80:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004a82:	f043 0302 	orr.w	r3, r3, #2
 8004a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a8a:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004aae:	f107 0314 	add.w	r3, r7, #20
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	482b      	ldr	r0, [pc, #172]	; (8004b64 <HAL_TIM_MspPostInit+0x10c>)
 8004ab6:	f003 f889 	bl	8007bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004aba:	e04a      	b.n	8004b52 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <HAL_TIM_MspPostInit+0x110>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d120      	bne.n	8004b08 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ac6:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004ace:	f043 0320 	orr.w	r3, r3, #32
 8004ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aea:	2302      	movs	r3, #2
 8004aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004aee:	2302      	movs	r3, #2
 8004af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af2:	2300      	movs	r3, #0
 8004af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004af6:	2309      	movs	r3, #9
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004afa:	f107 0314 	add.w	r3, r7, #20
 8004afe:	4619      	mov	r1, r3
 8004b00:	481a      	ldr	r0, [pc, #104]	; (8004b6c <HAL_TIM_MspPostInit+0x114>)
 8004b02:	f003 f863 	bl	8007bcc <HAL_GPIO_Init>
}
 8004b06:	e024      	b.n	8004b52 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <HAL_TIM_MspPostInit+0x118>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d11f      	bne.n	8004b52 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b12:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b18:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004b1a:	f043 0320 	orr.w	r3, r3, #32
 8004b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b22:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <HAL_TIM_MspPostInit+0x108>)
 8004b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b36:	2302      	movs	r3, #2
 8004b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004b42:	2309      	movs	r3, #9
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4807      	ldr	r0, [pc, #28]	; (8004b6c <HAL_TIM_MspPostInit+0x114>)
 8004b4e:	f003 f83d 	bl	8007bcc <HAL_GPIO_Init>
}
 8004b52:	bf00      	nop
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40001800 	.word	0x40001800
 8004b60:	58024400 	.word	0x58024400
 8004b64:	58020400 	.word	0x58020400
 8004b68:	40001c00 	.word	0x40001c00
 8004b6c:	58021400 	.word	0x58021400
 8004b70:	40002000 	.word	0x40002000

08004b74 <get_Straj>:
float alimd;
float vlim;
float T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
float qi,qf;

void get_Straj(float t){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	ed2d 8b06 	vpush	{d8-d10}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	ed87 0a01 	vstr	s0, [r7, #4]

    if (qf < qi){
 8004b82:	4bb6      	ldr	r3, [pc, #728]	; (8004e5c <get_Straj+0x2e8>)
 8004b84:	ed93 7a00 	vldr	s14, [r3]
 8004b88:	4bb5      	ldr	r3, [pc, #724]	; (8004e60 <get_Straj+0x2ec>)
 8004b8a:	edd3 7a00 	vldr	s15, [r3]
 8004b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b96:	f140 8081 	bpl.w	8004c9c <get_Straj+0x128>

    flagInv = true;
 8004b9a:	4bb2      	ldr	r3, [pc, #712]	; (8004e64 <get_Straj+0x2f0>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8004ba0:	4baf      	ldr	r3, [pc, #700]	; (8004e60 <get_Straj+0x2ec>)
 8004ba2:	edd3 7a00 	vldr	s15, [r3]
 8004ba6:	eef1 7a67 	vneg.f32	s15, s15
 8004baa:	4bad      	ldr	r3, [pc, #692]	; (8004e60 <get_Straj+0x2ec>)
 8004bac:	edc3 7a00 	vstr	s15, [r3]
    qf = -qf;
 8004bb0:	4baa      	ldr	r3, [pc, #680]	; (8004e5c <get_Straj+0x2e8>)
 8004bb2:	edd3 7a00 	vldr	s15, [r3]
 8004bb6:	eef1 7a67 	vneg.f32	s15, s15
 8004bba:	4ba8      	ldr	r3, [pc, #672]	; (8004e5c <get_Straj+0x2e8>)
 8004bbc:	edc3 7a00 	vstr	s15, [r3]
    vi = -vi;
 8004bc0:	4ba9      	ldr	r3, [pc, #676]	; (8004e68 <get_Straj+0x2f4>)
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	eef1 7a67 	vneg.f32	s15, s15
 8004bca:	4ba7      	ldr	r3, [pc, #668]	; (8004e68 <get_Straj+0x2f4>)
 8004bcc:	edc3 7a00 	vstr	s15, [r3]
    vf = -vf;
 8004bd0:	4ba6      	ldr	r3, [pc, #664]	; (8004e6c <get_Straj+0x2f8>)
 8004bd2:	edd3 7a00 	vldr	s15, [r3]
 8004bd6:	eef1 7a67 	vneg.f32	s15, s15
 8004bda:	4ba4      	ldr	r3, [pc, #656]	; (8004e6c <get_Straj+0x2f8>)
 8004bdc:	edc3 7a00 	vstr	s15, [r3]

    vmax = -vmin;
 8004be0:	4ba3      	ldr	r3, [pc, #652]	; (8004e70 <get_Straj+0x2fc>)
 8004be2:	edd3 7a00 	vldr	s15, [r3]
 8004be6:	eef1 7a67 	vneg.f32	s15, s15
 8004bea:	4ba2      	ldr	r3, [pc, #648]	; (8004e74 <get_Straj+0x300>)
 8004bec:	edc3 7a00 	vstr	s15, [r3]
    vmin = -vmax;
 8004bf0:	4ba0      	ldr	r3, [pc, #640]	; (8004e74 <get_Straj+0x300>)
 8004bf2:	edd3 7a00 	vldr	s15, [r3]
 8004bf6:	eef1 7a67 	vneg.f32	s15, s15
 8004bfa:	4b9d      	ldr	r3, [pc, #628]	; (8004e70 <get_Straj+0x2fc>)
 8004bfc:	edc3 7a00 	vstr	s15, [r3]
    amax = -amin;
 8004c00:	4b9d      	ldr	r3, [pc, #628]	; (8004e78 <get_Straj+0x304>)
 8004c02:	edd3 7a00 	vldr	s15, [r3]
 8004c06:	eef1 7a67 	vneg.f32	s15, s15
 8004c0a:	4b9c      	ldr	r3, [pc, #624]	; (8004e7c <get_Straj+0x308>)
 8004c0c:	edc3 7a00 	vstr	s15, [r3]
    amin = -amax;
 8004c10:	4b9a      	ldr	r3, [pc, #616]	; (8004e7c <get_Straj+0x308>)
 8004c12:	edd3 7a00 	vldr	s15, [r3]
 8004c16:	eef1 7a67 	vneg.f32	s15, s15
 8004c1a:	4b97      	ldr	r3, [pc, #604]	; (8004e78 <get_Straj+0x304>)
 8004c1c:	edc3 7a00 	vstr	s15, [r3]
    jmax = -jmin;
 8004c20:	4b97      	ldr	r3, [pc, #604]	; (8004e80 <get_Straj+0x30c>)
 8004c22:	edd3 7a00 	vldr	s15, [r3]
 8004c26:	eef1 7a67 	vneg.f32	s15, s15
 8004c2a:	4b96      	ldr	r3, [pc, #600]	; (8004e84 <get_Straj+0x310>)
 8004c2c:	edc3 7a00 	vstr	s15, [r3]
    jmin = -jmax;
 8004c30:	4b94      	ldr	r3, [pc, #592]	; (8004e84 <get_Straj+0x310>)
 8004c32:	edd3 7a00 	vldr	s15, [r3]
 8004c36:	eef1 7a67 	vneg.f32	s15, s15
 8004c3a:	4b91      	ldr	r3, [pc, #580]	; (8004e80 <get_Straj+0x30c>)
 8004c3c:	edc3 7a00 	vstr	s15, [r3]

    alima = jmax*Tj1;
 8004c40:	4b90      	ldr	r3, [pc, #576]	; (8004e84 <get_Straj+0x310>)
 8004c42:	ed93 7a00 	vldr	s14, [r3]
 8004c46:	4b90      	ldr	r3, [pc, #576]	; (8004e88 <get_Straj+0x314>)
 8004c48:	edd3 7a00 	vldr	s15, [r3]
 8004c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c50:	4b8e      	ldr	r3, [pc, #568]	; (8004e8c <get_Straj+0x318>)
 8004c52:	edc3 7a00 	vstr	s15, [r3]
    alimd = -jmax*Tj2;
 8004c56:	4b8b      	ldr	r3, [pc, #556]	; (8004e84 <get_Straj+0x310>)
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	eeb1 7a67 	vneg.f32	s14, s15
 8004c60:	4b8b      	ldr	r3, [pc, #556]	; (8004e90 <get_Straj+0x31c>)
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	4b8a      	ldr	r3, [pc, #552]	; (8004e94 <get_Straj+0x320>)
 8004c6c:	edc3 7a00 	vstr	s15, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8004c70:	4b89      	ldr	r3, [pc, #548]	; (8004e98 <get_Straj+0x324>)
 8004c72:	ed93 7a00 	vldr	s14, [r3]
 8004c76:	4b84      	ldr	r3, [pc, #528]	; (8004e88 <get_Straj+0x314>)
 8004c78:	edd3 7a00 	vldr	s15, [r3]
 8004c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c80:	4b82      	ldr	r3, [pc, #520]	; (8004e8c <get_Straj+0x318>)
 8004c82:	edd3 7a00 	vldr	s15, [r3]
 8004c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c8a:	4b77      	ldr	r3, [pc, #476]	; (8004e68 <get_Straj+0x2f4>)
 8004c8c:	edd3 7a00 	vldr	s15, [r3]
 8004c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c94:	4b81      	ldr	r3, [pc, #516]	; (8004e9c <get_Straj+0x328>)
 8004c96:	edc3 7a00 	vstr	s15, [r3]
 8004c9a:	e044      	b.n	8004d26 <get_Straj+0x1b2>

    }else{
        jmin = -jmax;
 8004c9c:	4b79      	ldr	r3, [pc, #484]	; (8004e84 <get_Straj+0x310>)
 8004c9e:	edd3 7a00 	vldr	s15, [r3]
 8004ca2:	eef1 7a67 	vneg.f32	s15, s15
 8004ca6:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <get_Straj+0x30c>)
 8004ca8:	edc3 7a00 	vstr	s15, [r3]
        amin = -amax;
 8004cac:	4b73      	ldr	r3, [pc, #460]	; (8004e7c <get_Straj+0x308>)
 8004cae:	edd3 7a00 	vldr	s15, [r3]
 8004cb2:	eef1 7a67 	vneg.f32	s15, s15
 8004cb6:	4b70      	ldr	r3, [pc, #448]	; (8004e78 <get_Straj+0x304>)
 8004cb8:	edc3 7a00 	vstr	s15, [r3]
        vmin = -vmax;
 8004cbc:	4b6d      	ldr	r3, [pc, #436]	; (8004e74 <get_Straj+0x300>)
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	eef1 7a67 	vneg.f32	s15, s15
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <get_Straj+0x2fc>)
 8004cc8:	edc3 7a00 	vstr	s15, [r3]

        alima = jmax*Tj1;
 8004ccc:	4b6d      	ldr	r3, [pc, #436]	; (8004e84 <get_Straj+0x310>)
 8004cce:	ed93 7a00 	vldr	s14, [r3]
 8004cd2:	4b6d      	ldr	r3, [pc, #436]	; (8004e88 <get_Straj+0x314>)
 8004cd4:	edd3 7a00 	vldr	s15, [r3]
 8004cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cdc:	4b6b      	ldr	r3, [pc, #428]	; (8004e8c <get_Straj+0x318>)
 8004cde:	edc3 7a00 	vstr	s15, [r3]
        alimd = -jmax*Tj2;
 8004ce2:	4b68      	ldr	r3, [pc, #416]	; (8004e84 <get_Straj+0x310>)
 8004ce4:	edd3 7a00 	vldr	s15, [r3]
 8004ce8:	eeb1 7a67 	vneg.f32	s14, s15
 8004cec:	4b68      	ldr	r3, [pc, #416]	; (8004e90 <get_Straj+0x31c>)
 8004cee:	edd3 7a00 	vldr	s15, [r3]
 8004cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <get_Straj+0x320>)
 8004cf8:	edc3 7a00 	vstr	s15, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8004cfc:	4b66      	ldr	r3, [pc, #408]	; (8004e98 <get_Straj+0x324>)
 8004cfe:	ed93 7a00 	vldr	s14, [r3]
 8004d02:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <get_Straj+0x314>)
 8004d04:	edd3 7a00 	vldr	s15, [r3]
 8004d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d0c:	4b5f      	ldr	r3, [pc, #380]	; (8004e8c <get_Straj+0x318>)
 8004d0e:	edd3 7a00 	vldr	s15, [r3]
 8004d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d16:	4b54      	ldr	r3, [pc, #336]	; (8004e68 <get_Straj+0x2f4>)
 8004d18:	edd3 7a00 	vldr	s15, [r3]
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	4b5e      	ldr	r3, [pc, #376]	; (8004e9c <get_Straj+0x328>)
 8004d22:	edc3 7a00 	vstr	s15, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8004d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d32:	f2c0 80bd 	blt.w	8004eb0 <get_Straj+0x33c>
 8004d36:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <get_Straj+0x314>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	f200 80b2 	bhi.w	8004eb0 <get_Straj+0x33c>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8004d4c:	4b46      	ldr	r3, [pc, #280]	; (8004e68 <get_Straj+0x2f4>)
 8004d4e:	ed93 7a00 	vldr	s14, [r3]
 8004d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <get_Straj+0x2ec>)
 8004d5c:	edd3 7a00 	vldr	s15, [r3]
 8004d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d64:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004d68:	4b46      	ldr	r3, [pc, #280]	; (8004e84 <get_Straj+0x310>)
 8004d6a:	edd3 7a00 	vldr	s15, [r3]
 8004d6e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d7a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004d7e:	eeb0 0b47 	vmov.f64	d0, d7
 8004d82:	f00d f8d1 	bl	8011f28 <pow>
 8004d86:	eeb0 7b40 	vmov.f64	d7, d0
 8004d8a:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004d8e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004d92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d96:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004d9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d9e:	4b40      	ldr	r3, [pc, #256]	; (8004ea0 <get_Straj+0x32c>)
 8004da0:	edc3 7a00 	vstr	s15, [r3]
        qd = vi+jmax*pow(t,2)/2;
 8004da4:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <get_Straj+0x2f4>)
 8004da6:	edd3 7a00 	vldr	s15, [r3]
 8004daa:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004dae:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <get_Straj+0x310>)
 8004db0:	edd3 7a00 	vldr	s15, [r3]
 8004db4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dc0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004dc4:	eeb0 0b47 	vmov.f64	d0, d7
 8004dc8:	f00d f8ae 	bl	8011f28 <pow>
 8004dcc:	eeb0 7b40 	vmov.f64	d7, d0
 8004dd0:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004dd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004dd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ddc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004de0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004de4:	4b2f      	ldr	r3, [pc, #188]	; (8004ea4 <get_Straj+0x330>)
 8004de6:	edc3 7a00 	vstr	s15, [r3]
        qdd = jmax*t;
 8004dea:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <get_Straj+0x310>)
 8004dec:	ed93 7a00 	vldr	s14, [r3]
 8004df0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df8:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <get_Straj+0x334>)
 8004dfa:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmax;
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <get_Straj+0x310>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <get_Straj+0x338>)
 8004e04:	6013      	str	r3, [r2, #0]
        if (flagInv){
 8004e06:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <get_Straj+0x2f0>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8545 	beq.w	800589a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004e10:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <get_Straj+0x32c>)
 8004e12:	edd3 7a00 	vldr	s15, [r3]
 8004e16:	eef1 7a67 	vneg.f32	s15, s15
 8004e1a:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <get_Straj+0x32c>)
 8004e1c:	edc3 7a00 	vstr	s15, [r3]
 8004e20:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <get_Straj+0x330>)
 8004e22:	edd3 7a00 	vldr	s15, [r3]
 8004e26:	eef1 7a67 	vneg.f32	s15, s15
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <get_Straj+0x330>)
 8004e2c:	edc3 7a00 	vstr	s15, [r3]
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <get_Straj+0x334>)
 8004e32:	edd3 7a00 	vldr	s15, [r3]
 8004e36:	eef1 7a67 	vneg.f32	s15, s15
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <get_Straj+0x334>)
 8004e3c:	edc3 7a00 	vstr	s15, [r3]
 8004e40:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <get_Straj+0x338>)
 8004e42:	edd3 7a00 	vldr	s15, [r3]
 8004e46:	eef1 7a67 	vneg.f32	s15, s15
 8004e4a:	4b18      	ldr	r3, [pc, #96]	; (8004eac <get_Straj+0x338>)
 8004e4c:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <get_Straj+0x2f0>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004e56:	f000 bd20 	b.w	800589a <get_Straj+0xd26>
 8004e5a:	bf00      	nop
 8004e5c:	24000ad8 	.word	0x24000ad8
 8004e60:	24000ad4 	.word	0x24000ad4
 8004e64:	24000aa4 	.word	0x24000aa4
 8004e68:	24000688 	.word	0x24000688
 8004e6c:	2400068c 	.word	0x2400068c
 8004e70:	24000684 	.word	0x24000684
 8004e74:	2400009c 	.word	0x2400009c
 8004e78:	24000690 	.word	0x24000690
 8004e7c:	240000a0 	.word	0x240000a0
 8004e80:	24000680 	.word	0x24000680
 8004e84:	24000098 	.word	0x24000098
 8004e88:	24000ac4 	.word	0x24000ac4
 8004e8c:	24000aa8 	.word	0x24000aa8
 8004e90:	24000ac8 	.word	0x24000ac8
 8004e94:	24000aac 	.word	0x24000aac
 8004e98:	24000ab8 	.word	0x24000ab8
 8004e9c:	24000ab0 	.word	0x24000ab0
 8004ea0:	24000670 	.word	0x24000670
 8004ea4:	24000674 	.word	0x24000674
 8004ea8:	24000678 	.word	0x24000678
 8004eac:	2400067c 	.word	0x2400067c
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004eb0:	4bc1      	ldr	r3, [pc, #772]	; (80051b8 <get_Straj+0x644>)
 8004eb2:	edd3 7a00 	vldr	s15, [r3]
 8004eb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec2:	f340 80af 	ble.w	8005024 <get_Straj+0x4b0>
 8004ec6:	4bbd      	ldr	r3, [pc, #756]	; (80051bc <get_Straj+0x648>)
 8004ec8:	ed93 7a00 	vldr	s14, [r3]
 8004ecc:	4bba      	ldr	r3, [pc, #744]	; (80051b8 <get_Straj+0x644>)
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee2:	f200 809f 	bhi.w	8005024 <get_Straj+0x4b0>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004ee6:	4bb6      	ldr	r3, [pc, #728]	; (80051c0 <get_Straj+0x64c>)
 8004ee8:	ed93 7a00 	vldr	s14, [r3]
 8004eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ef4:	4bb3      	ldr	r3, [pc, #716]	; (80051c4 <get_Straj+0x650>)
 8004ef6:	edd3 7a00 	vldr	s15, [r3]
 8004efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004efe:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004f02:	4bb1      	ldr	r3, [pc, #708]	; (80051c8 <get_Straj+0x654>)
 8004f04:	ed93 7a00 	vldr	s14, [r3]
 8004f08:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8004f0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f10:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004f14:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f20:	eeb0 0b47 	vmov.f64	d0, d7
 8004f24:	f00d f800 	bl	8011f28 <pow>
 8004f28:	eeb0 7b40 	vmov.f64	d7, d0
 8004f2c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004f30:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004f34:	4ba0      	ldr	r3, [pc, #640]	; (80051b8 <get_Straj+0x644>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004f3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f4e:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004f52:	4b99      	ldr	r3, [pc, #612]	; (80051b8 <get_Straj+0x644>)
 8004f54:	edd3 7a00 	vldr	s15, [r3]
 8004f58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f5c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f60:	eeb0 0b47 	vmov.f64	d0, d7
 8004f64:	f00c ffe0 	bl	8011f28 <pow>
 8004f68:	eeb0 7b40 	vmov.f64	d7, d0
 8004f6c:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004f70:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004f74:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004f78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004f7c:	4b93      	ldr	r3, [pc, #588]	; (80051cc <get_Straj+0x658>)
 8004f7e:	edc3 7a00 	vstr	s15, [r3]
        qd = vi+amax*(t-Tj1/2);
 8004f82:	4b8d      	ldr	r3, [pc, #564]	; (80051b8 <get_Straj+0x644>)
 8004f84:	ed93 7a00 	vldr	s14, [r3]
 8004f88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f90:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f98:	4b8d      	ldr	r3, [pc, #564]	; (80051d0 <get_Straj+0x65c>)
 8004f9a:	edd3 7a00 	vldr	s15, [r3]
 8004f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fa2:	4b87      	ldr	r3, [pc, #540]	; (80051c0 <get_Straj+0x64c>)
 8004fa4:	edd3 7a00 	vldr	s15, [r3]
 8004fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fac:	4b89      	ldr	r3, [pc, #548]	; (80051d4 <get_Straj+0x660>)
 8004fae:	edc3 7a00 	vstr	s15, [r3]
        qdd = jmax*Tj1;
 8004fb2:	4b89      	ldr	r3, [pc, #548]	; (80051d8 <get_Straj+0x664>)
 8004fb4:	ed93 7a00 	vldr	s14, [r3]
 8004fb8:	4b7f      	ldr	r3, [pc, #508]	; (80051b8 <get_Straj+0x644>)
 8004fba:	edd3 7a00 	vldr	s15, [r3]
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	4b86      	ldr	r3, [pc, #536]	; (80051dc <get_Straj+0x668>)
 8004fc4:	edc3 7a00 	vstr	s15, [r3]
        qddd = 0;
 8004fc8:	4b85      	ldr	r3, [pc, #532]	; (80051e0 <get_Straj+0x66c>)
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

        if (flagInv){
 8004fd0:	4b84      	ldr	r3, [pc, #528]	; (80051e4 <get_Straj+0x670>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8460 	beq.w	800589a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004fda:	4b7c      	ldr	r3, [pc, #496]	; (80051cc <get_Straj+0x658>)
 8004fdc:	edd3 7a00 	vldr	s15, [r3]
 8004fe0:	eef1 7a67 	vneg.f32	s15, s15
 8004fe4:	4b79      	ldr	r3, [pc, #484]	; (80051cc <get_Straj+0x658>)
 8004fe6:	edc3 7a00 	vstr	s15, [r3]
 8004fea:	4b7a      	ldr	r3, [pc, #488]	; (80051d4 <get_Straj+0x660>)
 8004fec:	edd3 7a00 	vldr	s15, [r3]
 8004ff0:	eef1 7a67 	vneg.f32	s15, s15
 8004ff4:	4b77      	ldr	r3, [pc, #476]	; (80051d4 <get_Straj+0x660>)
 8004ff6:	edc3 7a00 	vstr	s15, [r3]
 8004ffa:	4b78      	ldr	r3, [pc, #480]	; (80051dc <get_Straj+0x668>)
 8004ffc:	edd3 7a00 	vldr	s15, [r3]
 8005000:	eef1 7a67 	vneg.f32	s15, s15
 8005004:	4b75      	ldr	r3, [pc, #468]	; (80051dc <get_Straj+0x668>)
 8005006:	edc3 7a00 	vstr	s15, [r3]
 800500a:	4b75      	ldr	r3, [pc, #468]	; (80051e0 <get_Straj+0x66c>)
 800500c:	edd3 7a00 	vldr	s15, [r3]
 8005010:	eef1 7a67 	vneg.f32	s15, s15
 8005014:	4b72      	ldr	r3, [pc, #456]	; (80051e0 <get_Straj+0x66c>)
 8005016:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 800501a:	4b72      	ldr	r3, [pc, #456]	; (80051e4 <get_Straj+0x670>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005020:	f000 bc3b 	b.w	800589a <get_Straj+0xd26>
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8005024:	4b65      	ldr	r3, [pc, #404]	; (80051bc <get_Straj+0x648>)
 8005026:	ed93 7a00 	vldr	s14, [r3]
 800502a:	4b63      	ldr	r3, [pc, #396]	; (80051b8 <get_Straj+0x644>)
 800502c:	edd3 7a00 	vldr	s15, [r3]
 8005030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005034:	ed97 7a01 	vldr	s14, [r7, #4]
 8005038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800503c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005040:	f340 80d8 	ble.w	80051f4 <get_Straj+0x680>
 8005044:	4b5d      	ldr	r3, [pc, #372]	; (80051bc <get_Straj+0x648>)
 8005046:	edd3 7a00 	vldr	s15, [r3]
 800504a:	ed97 7a01 	vldr	s14, [r7, #4]
 800504e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	f200 80cd 	bhi.w	80051f4 <get_Straj+0x680>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 800505a:	4b63      	ldr	r3, [pc, #396]	; (80051e8 <get_Straj+0x674>)
 800505c:	ed93 7a00 	vldr	s14, [r3]
 8005060:	4b57      	ldr	r3, [pc, #348]	; (80051c0 <get_Straj+0x64c>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	ee37 7a27 	vadd.f32	s14, s14, s15
 800506a:	4b54      	ldr	r3, [pc, #336]	; (80051bc <get_Straj+0x648>)
 800506c:	edd3 7a00 	vldr	s15, [r3]
 8005070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005074:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005078:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800507c:	4b51      	ldr	r3, [pc, #324]	; (80051c4 <get_Straj+0x650>)
 800507e:	edd3 7a00 	vldr	s15, [r3]
 8005082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005086:	4b4d      	ldr	r3, [pc, #308]	; (80051bc <get_Straj+0x648>)
 8005088:	edd3 6a00 	vldr	s13, [r3]
 800508c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005090:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005094:	4b54      	ldr	r3, [pc, #336]	; (80051e8 <get_Straj+0x674>)
 8005096:	edd3 7a00 	vldr	s15, [r3]
 800509a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800509e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050a2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80050a6:	4b51      	ldr	r3, [pc, #324]	; (80051ec <get_Straj+0x678>)
 80050a8:	edd3 7a00 	vldr	s15, [r3]
 80050ac:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80050b0:	4b42      	ldr	r3, [pc, #264]	; (80051bc <get_Straj+0x648>)
 80050b2:	ed93 7a00 	vldr	s14, [r3]
 80050b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80050ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050c2:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80050c6:	eeb0 0b47 	vmov.f64	d0, d7
 80050ca:	f00c ff2d 	bl	8011f28 <pow>
 80050ce:	eeb0 7b40 	vmov.f64	d7, d0
 80050d2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80050d6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80050da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80050de:	ee38 7b47 	vsub.f64	d7, d8, d7
 80050e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80050e6:	4b39      	ldr	r3, [pc, #228]	; (80051cc <get_Straj+0x658>)
 80050e8:	edc3 7a00 	vstr	s15, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 80050ec:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <get_Straj+0x67c>)
 80050ee:	edd3 7a00 	vldr	s15, [r3]
 80050f2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80050f6:	4b3d      	ldr	r3, [pc, #244]	; (80051ec <get_Straj+0x678>)
 80050f8:	edd3 7a00 	vldr	s15, [r3]
 80050fc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005100:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <get_Straj+0x648>)
 8005102:	ed93 7a00 	vldr	s14, [r3]
 8005106:	edd7 7a01 	vldr	s15, [r7, #4]
 800510a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800510e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005112:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005116:	eeb0 0b47 	vmov.f64	d0, d7
 800511a:	f00c ff05 	bl	8011f28 <pow>
 800511e:	eeb0 7b40 	vmov.f64	d7, d0
 8005122:	ee29 6b07 	vmul.f64	d6, d9, d7
 8005126:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800512a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800512e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005132:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005136:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <get_Straj+0x660>)
 8005138:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmin*(Ta-t);
 800513c:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <get_Straj+0x678>)
 800513e:	edd3 7a00 	vldr	s15, [r3]
 8005142:	eeb1 7a67 	vneg.f32	s14, s15
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <get_Straj+0x648>)
 8005148:	edd3 6a00 	vldr	s13, [r3]
 800514c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005150:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <get_Straj+0x668>)
 800515a:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmin;
 800515e:	4b23      	ldr	r3, [pc, #140]	; (80051ec <get_Straj+0x678>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <get_Straj+0x66c>)
 8005164:	6013      	str	r3, [r2, #0]
        if (flagInv){
 8005166:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <get_Straj+0x670>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8395 	beq.w	800589a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005170:	4b16      	ldr	r3, [pc, #88]	; (80051cc <get_Straj+0x658>)
 8005172:	edd3 7a00 	vldr	s15, [r3]
 8005176:	eef1 7a67 	vneg.f32	s15, s15
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <get_Straj+0x658>)
 800517c:	edc3 7a00 	vstr	s15, [r3]
 8005180:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <get_Straj+0x660>)
 8005182:	edd3 7a00 	vldr	s15, [r3]
 8005186:	eef1 7a67 	vneg.f32	s15, s15
 800518a:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <get_Straj+0x660>)
 800518c:	edc3 7a00 	vstr	s15, [r3]
 8005190:	4b12      	ldr	r3, [pc, #72]	; (80051dc <get_Straj+0x668>)
 8005192:	edd3 7a00 	vldr	s15, [r3]
 8005196:	eef1 7a67 	vneg.f32	s15, s15
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <get_Straj+0x668>)
 800519c:	edc3 7a00 	vstr	s15, [r3]
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <get_Straj+0x66c>)
 80051a2:	edd3 7a00 	vldr	s15, [r3]
 80051a6:	eef1 7a67 	vneg.f32	s15, s15
 80051aa:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <get_Straj+0x66c>)
 80051ac:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <get_Straj+0x670>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80051b6:	e370      	b.n	800589a <get_Straj+0xd26>
 80051b8:	24000ac4 	.word	0x24000ac4
 80051bc:	24000ab8 	.word	0x24000ab8
 80051c0:	24000688 	.word	0x24000688
 80051c4:	24000ad4 	.word	0x24000ad4
 80051c8:	24000aa8 	.word	0x24000aa8
 80051cc:	24000670 	.word	0x24000670
 80051d0:	240000a0 	.word	0x240000a0
 80051d4:	24000674 	.word	0x24000674
 80051d8:	24000098 	.word	0x24000098
 80051dc:	24000678 	.word	0x24000678
 80051e0:	2400067c 	.word	0x2400067c
 80051e4:	24000aa4 	.word	0x24000aa4
 80051e8:	24000ab0 	.word	0x24000ab0
 80051ec:	24000680 	.word	0x24000680
 80051f0:	2400009c 	.word	0x2400009c
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 80051f4:	4bae      	ldr	r3, [pc, #696]	; (80054b0 <get_Straj+0x93c>)
 80051f6:	edd3 7a00 	vldr	s15, [r3]
 80051fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80051fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005206:	dd6a      	ble.n	80052de <get_Straj+0x76a>
 8005208:	4ba9      	ldr	r3, [pc, #676]	; (80054b0 <get_Straj+0x93c>)
 800520a:	ed93 7a00 	vldr	s14, [r3]
 800520e:	4ba9      	ldr	r3, [pc, #676]	; (80054b4 <get_Straj+0x940>)
 8005210:	edd3 7a00 	vldr	s15, [r3]
 8005214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005218:	ed97 7a01 	vldr	s14, [r7, #4]
 800521c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	d85b      	bhi.n	80052de <get_Straj+0x76a>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8005226:	4ba4      	ldr	r3, [pc, #656]	; (80054b8 <get_Straj+0x944>)
 8005228:	ed93 7a00 	vldr	s14, [r3]
 800522c:	4ba3      	ldr	r3, [pc, #652]	; (80054bc <get_Straj+0x948>)
 800522e:	edd3 7a00 	vldr	s15, [r3]
 8005232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005236:	4b9e      	ldr	r3, [pc, #632]	; (80054b0 <get_Straj+0x93c>)
 8005238:	edd3 7a00 	vldr	s15, [r3]
 800523c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005240:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005244:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005248:	4b9d      	ldr	r3, [pc, #628]	; (80054c0 <get_Straj+0x94c>)
 800524a:	edd3 7a00 	vldr	s15, [r3]
 800524e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005252:	4b97      	ldr	r3, [pc, #604]	; (80054b0 <get_Straj+0x93c>)
 8005254:	edd3 7a00 	vldr	s15, [r3]
 8005258:	edd7 6a01 	vldr	s13, [r7, #4]
 800525c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005260:	4b95      	ldr	r3, [pc, #596]	; (80054b8 <get_Straj+0x944>)
 8005262:	edd3 7a00 	vldr	s15, [r3]
 8005266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800526a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526e:	4b95      	ldr	r3, [pc, #596]	; (80054c4 <get_Straj+0x950>)
 8005270:	edc3 7a00 	vstr	s15, [r3]
        qd = vmax;
 8005274:	4b94      	ldr	r3, [pc, #592]	; (80054c8 <get_Straj+0x954>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a94      	ldr	r2, [pc, #592]	; (80054cc <get_Straj+0x958>)
 800527a:	6013      	str	r3, [r2, #0]
        qdd = 0;
 800527c:	4b94      	ldr	r3, [pc, #592]	; (80054d0 <get_Straj+0x95c>)
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
        qddd = 0;
 8005284:	4b93      	ldr	r3, [pc, #588]	; (80054d4 <get_Straj+0x960>)
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
        if (flagInv){
 800528c:	4b92      	ldr	r3, [pc, #584]	; (80054d8 <get_Straj+0x964>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8302 	beq.w	800589a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005296:	4b8b      	ldr	r3, [pc, #556]	; (80054c4 <get_Straj+0x950>)
 8005298:	edd3 7a00 	vldr	s15, [r3]
 800529c:	eef1 7a67 	vneg.f32	s15, s15
 80052a0:	4b88      	ldr	r3, [pc, #544]	; (80054c4 <get_Straj+0x950>)
 80052a2:	edc3 7a00 	vstr	s15, [r3]
 80052a6:	4b89      	ldr	r3, [pc, #548]	; (80054cc <get_Straj+0x958>)
 80052a8:	edd3 7a00 	vldr	s15, [r3]
 80052ac:	eef1 7a67 	vneg.f32	s15, s15
 80052b0:	4b86      	ldr	r3, [pc, #536]	; (80054cc <get_Straj+0x958>)
 80052b2:	edc3 7a00 	vstr	s15, [r3]
 80052b6:	4b86      	ldr	r3, [pc, #536]	; (80054d0 <get_Straj+0x95c>)
 80052b8:	edd3 7a00 	vldr	s15, [r3]
 80052bc:	eef1 7a67 	vneg.f32	s15, s15
 80052c0:	4b83      	ldr	r3, [pc, #524]	; (80054d0 <get_Straj+0x95c>)
 80052c2:	edc3 7a00 	vstr	s15, [r3]
 80052c6:	4b83      	ldr	r3, [pc, #524]	; (80054d4 <get_Straj+0x960>)
 80052c8:	edd3 7a00 	vldr	s15, [r3]
 80052cc:	eef1 7a67 	vneg.f32	s15, s15
 80052d0:	4b80      	ldr	r3, [pc, #512]	; (80054d4 <get_Straj+0x960>)
 80052d2:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 80052d6:	4b80      	ldr	r3, [pc, #512]	; (80054d8 <get_Straj+0x964>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80052dc:	e2dd      	b.n	800589a <get_Straj+0xd26>
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 80052de:	4b7f      	ldr	r3, [pc, #508]	; (80054dc <get_Straj+0x968>)
 80052e0:	ed93 7a00 	vldr	s14, [r3]
 80052e4:	4b7e      	ldr	r3, [pc, #504]	; (80054e0 <get_Straj+0x96c>)
 80052e6:	edd3 7a00 	vldr	s15, [r3]
 80052ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80052f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	f2c0 80fd 	blt.w	80054f8 <get_Straj+0x984>
 80052fe:	4b77      	ldr	r3, [pc, #476]	; (80054dc <get_Straj+0x968>)
 8005300:	ed93 7a00 	vldr	s14, [r3]
 8005304:	4b76      	ldr	r3, [pc, #472]	; (80054e0 <get_Straj+0x96c>)
 8005306:	edd3 7a00 	vldr	s15, [r3]
 800530a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800530e:	4b75      	ldr	r3, [pc, #468]	; (80054e4 <get_Straj+0x970>)
 8005310:	edd3 7a00 	vldr	s15, [r3]
 8005314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005318:	ed97 7a01 	vldr	s14, [r7, #4]
 800531c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	f200 80e8 	bhi.w	80054f8 <get_Straj+0x984>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8005328:	4b6f      	ldr	r3, [pc, #444]	; (80054e8 <get_Straj+0x974>)
 800532a:	ed93 7a00 	vldr	s14, [r3]
 800532e:	4b62      	ldr	r3, [pc, #392]	; (80054b8 <get_Straj+0x944>)
 8005330:	edd3 6a00 	vldr	s13, [r3]
 8005334:	4b6d      	ldr	r3, [pc, #436]	; (80054ec <get_Straj+0x978>)
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800533e:	4b68      	ldr	r3, [pc, #416]	; (80054e0 <get_Straj+0x96c>)
 8005340:	edd3 7a00 	vldr	s15, [r3]
 8005344:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005348:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800534c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005350:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005354:	4b61      	ldr	r3, [pc, #388]	; (80054dc <get_Straj+0x968>)
 8005356:	edd3 7a00 	vldr	s15, [r3]
 800535a:	edd7 6a01 	vldr	s13, [r7, #4]
 800535e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005362:	4b5f      	ldr	r3, [pc, #380]	; (80054e0 <get_Straj+0x96c>)
 8005364:	edd3 7a00 	vldr	s15, [r3]
 8005368:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800536c:	4b52      	ldr	r3, [pc, #328]	; (80054b8 <get_Straj+0x944>)
 800536e:	edd3 7a00 	vldr	s15, [r3]
 8005372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800537e:	4b5c      	ldr	r3, [pc, #368]	; (80054f0 <get_Straj+0x97c>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005388:	4b54      	ldr	r3, [pc, #336]	; (80054dc <get_Straj+0x968>)
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005396:	4b52      	ldr	r3, [pc, #328]	; (80054e0 <get_Straj+0x96c>)
 8005398:	edd3 7a00 	vldr	s15, [r3]
 800539c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053a4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80053a8:	eeb0 0b47 	vmov.f64	d0, d7
 80053ac:	f00c fdbc 	bl	8011f28 <pow>
 80053b0:	eeb0 6b40 	vmov.f64	d6, d0
 80053b4:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80053b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80053bc:	ee29 7b07 	vmul.f64	d7, d9, d7
 80053c0:	ee38 7b47 	vsub.f64	d7, d8, d7
 80053c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80053c8:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <get_Straj+0x950>)
 80053ca:	edc3 7a00 	vstr	s15, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 80053ce:	4b3a      	ldr	r3, [pc, #232]	; (80054b8 <get_Straj+0x944>)
 80053d0:	edd3 7a00 	vldr	s15, [r3]
 80053d4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80053d8:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <get_Straj+0x97c>)
 80053da:	edd3 7a00 	vldr	s15, [r3]
 80053de:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80053e2:	4b3e      	ldr	r3, [pc, #248]	; (80054dc <get_Straj+0x968>)
 80053e4:	edd3 7a00 	vldr	s15, [r3]
 80053e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80053ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <get_Straj+0x96c>)
 80053f2:	edd3 7a00 	vldr	s15, [r3]
 80053f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80053fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005402:	eeb0 0b47 	vmov.f64	d0, d7
 8005406:	f00c fd8f 	bl	8011f28 <pow>
 800540a:	eeb0 6b40 	vmov.f64	d6, d0
 800540e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005412:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005416:	ee29 7b07 	vmul.f64	d7, d9, d7
 800541a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800541e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <get_Straj+0x958>)
 8005424:	edc3 7a00 	vstr	s15, [r3]
        qdd=-jmax*(t-T+Td);
 8005428:	4b31      	ldr	r3, [pc, #196]	; (80054f0 <get_Straj+0x97c>)
 800542a:	edd3 7a00 	vldr	s15, [r3]
 800542e:	eeb1 7a67 	vneg.f32	s14, s15
 8005432:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <get_Straj+0x968>)
 8005434:	edd3 7a00 	vldr	s15, [r3]
 8005438:	edd7 6a01 	vldr	s13, [r7, #4]
 800543c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <get_Straj+0x96c>)
 8005442:	edd3 7a00 	vldr	s15, [r3]
 8005446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <get_Straj+0x95c>)
 8005450:	edc3 7a00 	vstr	s15, [r3]
        qddd=jmin;
 8005454:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <get_Straj+0x980>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <get_Straj+0x960>)
 800545a:	6013      	str	r3, [r2, #0]
        if (flagInv){
 800545c:	4b1e      	ldr	r3, [pc, #120]	; (80054d8 <get_Straj+0x964>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 821a 	beq.w	800589a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005466:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <get_Straj+0x950>)
 8005468:	edd3 7a00 	vldr	s15, [r3]
 800546c:	eef1 7a67 	vneg.f32	s15, s15
 8005470:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <get_Straj+0x950>)
 8005472:	edc3 7a00 	vstr	s15, [r3]
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <get_Straj+0x958>)
 8005478:	edd3 7a00 	vldr	s15, [r3]
 800547c:	eef1 7a67 	vneg.f32	s15, s15
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <get_Straj+0x958>)
 8005482:	edc3 7a00 	vstr	s15, [r3]
 8005486:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <get_Straj+0x95c>)
 8005488:	edd3 7a00 	vldr	s15, [r3]
 800548c:	eef1 7a67 	vneg.f32	s15, s15
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <get_Straj+0x95c>)
 8005492:	edc3 7a00 	vstr	s15, [r3]
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <get_Straj+0x960>)
 8005498:	edd3 7a00 	vldr	s15, [r3]
 800549c:	eef1 7a67 	vneg.f32	s15, s15
 80054a0:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <get_Straj+0x960>)
 80054a2:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <get_Straj+0x964>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80054ac:	e1f5      	b.n	800589a <get_Straj+0xd26>
 80054ae:	bf00      	nop
 80054b0:	24000ab8 	.word	0x24000ab8
 80054b4:	24000ac0 	.word	0x24000ac0
 80054b8:	24000ab0 	.word	0x24000ab0
 80054bc:	24000688 	.word	0x24000688
 80054c0:	24000ad4 	.word	0x24000ad4
 80054c4:	24000670 	.word	0x24000670
 80054c8:	2400009c 	.word	0x2400009c
 80054cc:	24000674 	.word	0x24000674
 80054d0:	24000678 	.word	0x24000678
 80054d4:	2400067c 	.word	0x2400067c
 80054d8:	24000aa4 	.word	0x24000aa4
 80054dc:	24000ab4 	.word	0x24000ab4
 80054e0:	24000abc 	.word	0x24000abc
 80054e4:	24000ac8 	.word	0x24000ac8
 80054e8:	24000ad8 	.word	0x24000ad8
 80054ec:	2400068c 	.word	0x2400068c
 80054f0:	24000098 	.word	0x24000098
 80054f4:	24000680 	.word	0x24000680
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 80054f8:	4b8d      	ldr	r3, [pc, #564]	; (8005730 <get_Straj+0xbbc>)
 80054fa:	ed93 7a00 	vldr	s14, [r3]
 80054fe:	4b8d      	ldr	r3, [pc, #564]	; (8005734 <get_Straj+0xbc0>)
 8005500:	edd3 7a00 	vldr	s15, [r3]
 8005504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005508:	4b8b      	ldr	r3, [pc, #556]	; (8005738 <get_Straj+0xbc4>)
 800550a:	edd3 7a00 	vldr	s15, [r3]
 800550e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005512:	ed97 7a01 	vldr	s14, [r7, #4]
 8005516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	f340 80eb 	ble.w	80056f8 <get_Straj+0xb84>
 8005522:	4b83      	ldr	r3, [pc, #524]	; (8005730 <get_Straj+0xbbc>)
 8005524:	ed93 7a00 	vldr	s14, [r3]
 8005528:	4b83      	ldr	r3, [pc, #524]	; (8005738 <get_Straj+0xbc4>)
 800552a:	edd3 7a00 	vldr	s15, [r3]
 800552e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005532:	ed97 7a01 	vldr	s14, [r7, #4]
 8005536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553e:	f200 80db 	bhi.w	80056f8 <get_Straj+0xb84>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8005542:	4b7e      	ldr	r3, [pc, #504]	; (800573c <get_Straj+0xbc8>)
 8005544:	ed93 7a00 	vldr	s14, [r3]
 8005548:	4b7d      	ldr	r3, [pc, #500]	; (8005740 <get_Straj+0xbcc>)
 800554a:	edd3 6a00 	vldr	s13, [r3]
 800554e:	4b7d      	ldr	r3, [pc, #500]	; (8005744 <get_Straj+0xbd0>)
 8005550:	edd3 7a00 	vldr	s15, [r3]
 8005554:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005558:	4b76      	ldr	r3, [pc, #472]	; (8005734 <get_Straj+0xbc0>)
 800555a:	edd3 7a00 	vldr	s15, [r3]
 800555e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005562:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005566:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800556a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800556e:	4b70      	ldr	r3, [pc, #448]	; (8005730 <get_Straj+0xbbc>)
 8005570:	edd3 7a00 	vldr	s15, [r3]
 8005574:	edd7 6a01 	vldr	s13, [r7, #4]
 8005578:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800557c:	4b6d      	ldr	r3, [pc, #436]	; (8005734 <get_Straj+0xbc0>)
 800557e:	edd3 7a00 	vldr	s15, [r3]
 8005582:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005586:	4b6e      	ldr	r3, [pc, #440]	; (8005740 <get_Straj+0xbcc>)
 8005588:	edd3 7a00 	vldr	s15, [r3]
 800558c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005594:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005598:	4b6b      	ldr	r3, [pc, #428]	; (8005748 <get_Straj+0xbd4>)
 800559a:	ed93 7a00 	vldr	s14, [r3]
 800559e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80055a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055a6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80055aa:	4b61      	ldr	r3, [pc, #388]	; (8005730 <get_Straj+0xbbc>)
 80055ac:	edd3 7a00 	vldr	s15, [r3]
 80055b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80055b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055b8:	4b5e      	ldr	r3, [pc, #376]	; (8005734 <get_Straj+0xbc0>)
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80055c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055ca:	eeb0 0b47 	vmov.f64	d0, d7
 80055ce:	f00c fcab 	bl	8011f28 <pow>
 80055d2:	eeb0 7b40 	vmov.f64	d7, d0
 80055d6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80055da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80055de:	4b56      	ldr	r3, [pc, #344]	; (8005738 <get_Straj+0xbc4>)
 80055e0:	edd3 7a00 	vldr	s15, [r3]
 80055e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80055e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055ec:	4b50      	ldr	r3, [pc, #320]	; (8005730 <get_Straj+0xbbc>)
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	edd7 5a01 	vldr	s11, [r7, #4]
 80055f6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80055fa:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <get_Straj+0xbc0>)
 80055fc:	edd3 7a00 	vldr	s15, [r3]
 8005600:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8005604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005608:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800560c:	ee36 ab47 	vsub.f64	d10, d6, d7
 8005610:	4b49      	ldr	r3, [pc, #292]	; (8005738 <get_Straj+0xbc4>)
 8005612:	edd3 7a00 	vldr	s15, [r3]
 8005616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800561a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800561e:	eeb0 0b47 	vmov.f64	d0, d7
 8005622:	f00c fc81 	bl	8011f28 <pow>
 8005626:	eeb0 7b40 	vmov.f64	d7, d0
 800562a:	ee3a 7b07 	vadd.f64	d7, d10, d7
 800562e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005632:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005636:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800563a:	4b44      	ldr	r3, [pc, #272]	; (800574c <get_Straj+0xbd8>)
 800563c:	edc3 7a00 	vstr	s15, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8005640:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <get_Straj+0xbbc>)
 8005642:	edd3 7a00 	vldr	s15, [r3]
 8005646:	ed97 7a01 	vldr	s14, [r7, #4]
 800564a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800564e:	4b39      	ldr	r3, [pc, #228]	; (8005734 <get_Straj+0xbc0>)
 8005650:	edd3 7a00 	vldr	s15, [r3]
 8005654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005658:	4b37      	ldr	r3, [pc, #220]	; (8005738 <get_Straj+0xbc4>)
 800565a:	edd3 6a00 	vldr	s13, [r3]
 800565e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005662:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800566a:	4b37      	ldr	r3, [pc, #220]	; (8005748 <get_Straj+0xbd4>)
 800566c:	edd3 7a00 	vldr	s15, [r3]
 8005670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005674:	4b32      	ldr	r3, [pc, #200]	; (8005740 <get_Straj+0xbcc>)
 8005676:	edd3 7a00 	vldr	s15, [r3]
 800567a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567e:	4b34      	ldr	r3, [pc, #208]	; (8005750 <get_Straj+0xbdc>)
 8005680:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmax*Tj2;
 8005684:	4b33      	ldr	r3, [pc, #204]	; (8005754 <get_Straj+0xbe0>)
 8005686:	edd3 7a00 	vldr	s15, [r3]
 800568a:	eeb1 7a67 	vneg.f32	s14, s15
 800568e:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <get_Straj+0xbc4>)
 8005690:	edd3 7a00 	vldr	s15, [r3]
 8005694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005698:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <get_Straj+0xbe4>)
 800569a:	edc3 7a00 	vstr	s15, [r3]
        qddd = 0;
 800569e:	4b2f      	ldr	r3, [pc, #188]	; (800575c <get_Straj+0xbe8>)
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
        if (flagInv){
 80056a6:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <get_Straj+0xbec>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80f5 	beq.w	800589a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80056b0:	4b26      	ldr	r3, [pc, #152]	; (800574c <get_Straj+0xbd8>)
 80056b2:	edd3 7a00 	vldr	s15, [r3]
 80056b6:	eef1 7a67 	vneg.f32	s15, s15
 80056ba:	4b24      	ldr	r3, [pc, #144]	; (800574c <get_Straj+0xbd8>)
 80056bc:	edc3 7a00 	vstr	s15, [r3]
 80056c0:	4b23      	ldr	r3, [pc, #140]	; (8005750 <get_Straj+0xbdc>)
 80056c2:	edd3 7a00 	vldr	s15, [r3]
 80056c6:	eef1 7a67 	vneg.f32	s15, s15
 80056ca:	4b21      	ldr	r3, [pc, #132]	; (8005750 <get_Straj+0xbdc>)
 80056cc:	edc3 7a00 	vstr	s15, [r3]
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <get_Straj+0xbe4>)
 80056d2:	edd3 7a00 	vldr	s15, [r3]
 80056d6:	eef1 7a67 	vneg.f32	s15, s15
 80056da:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <get_Straj+0xbe4>)
 80056dc:	edc3 7a00 	vstr	s15, [r3]
 80056e0:	4b1e      	ldr	r3, [pc, #120]	; (800575c <get_Straj+0xbe8>)
 80056e2:	edd3 7a00 	vldr	s15, [r3]
 80056e6:	eef1 7a67 	vneg.f32	s15, s15
 80056ea:	4b1c      	ldr	r3, [pc, #112]	; (800575c <get_Straj+0xbe8>)
 80056ec:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <get_Straj+0xbec>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80056f6:	e0d0      	b.n	800589a <get_Straj+0xd26>
        }

    } else if (t>T-Tj2 && t<=T){
 80056f8:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <get_Straj+0xbbc>)
 80056fa:	ed93 7a00 	vldr	s14, [r3]
 80056fe:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <get_Straj+0xbc4>)
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005708:	ed97 7a01 	vldr	s14, [r7, #4]
 800570c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005714:	dc00      	bgt.n	8005718 <get_Straj+0xba4>
            flagInv = false;
        }
    }


}
 8005716:	e0c0      	b.n	800589a <get_Straj+0xd26>
    } else if (t>T-Tj2 && t<=T){
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <get_Straj+0xbbc>)
 800571a:	edd3 7a00 	vldr	s15, [r3]
 800571e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572a:	d91b      	bls.n	8005764 <get_Straj+0xbf0>
}
 800572c:	e0b5      	b.n	800589a <get_Straj+0xd26>
 800572e:	bf00      	nop
 8005730:	24000ab4 	.word	0x24000ab4
 8005734:	24000abc 	.word	0x24000abc
 8005738:	24000ac8 	.word	0x24000ac8
 800573c:	24000ad8 	.word	0x24000ad8
 8005740:	24000ab0 	.word	0x24000ab0
 8005744:	2400068c 	.word	0x2400068c
 8005748:	24000aac 	.word	0x24000aac
 800574c:	24000670 	.word	0x24000670
 8005750:	24000674 	.word	0x24000674
 8005754:	24000098 	.word	0x24000098
 8005758:	24000678 	.word	0x24000678
 800575c:	2400067c 	.word	0x2400067c
 8005760:	24000aa4 	.word	0x24000aa4
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8005764:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <get_Straj+0xd34>)
 8005766:	ed93 7a00 	vldr	s14, [r3]
 800576a:	4b50      	ldr	r3, [pc, #320]	; (80058ac <get_Straj+0xd38>)
 800576c:	edd3 6a00 	vldr	s13, [r3]
 8005770:	edd7 7a01 	vldr	s15, [r7, #4]
 8005774:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005778:	4b4d      	ldr	r3, [pc, #308]	; (80058b0 <get_Straj+0xd3c>)
 800577a:	edd3 7a00 	vldr	s15, [r3]
 800577e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005786:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800578a:	4b4a      	ldr	r3, [pc, #296]	; (80058b4 <get_Straj+0xd40>)
 800578c:	edd3 7a00 	vldr	s15, [r3]
 8005790:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005794:	4b45      	ldr	r3, [pc, #276]	; (80058ac <get_Straj+0xd38>)
 8005796:	ed93 7a00 	vldr	s14, [r3]
 800579a:	edd7 7a01 	vldr	s15, [r7, #4]
 800579e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057a6:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80057aa:	eeb0 0b47 	vmov.f64	d0, d7
 80057ae:	f00c fbbb 	bl	8011f28 <pow>
 80057b2:	eeb0 6b40 	vmov.f64	d6, d0
 80057b6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80057ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80057be:	ee29 7b07 	vmul.f64	d7, d9, d7
 80057c2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80057c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80057ca:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <get_Straj+0xd44>)
 80057cc:	edc3 7a00 	vstr	s15, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 80057d0:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <get_Straj+0xd3c>)
 80057d2:	edd3 7a00 	vldr	s15, [r3]
 80057d6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80057da:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <get_Straj+0xd40>)
 80057dc:	edd3 7a00 	vldr	s15, [r3]
 80057e0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80057e4:	4b31      	ldr	r3, [pc, #196]	; (80058ac <get_Straj+0xd38>)
 80057e6:	ed93 7a00 	vldr	s14, [r3]
 80057ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80057ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057f6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057fa:	eeb0 0b47 	vmov.f64	d0, d7
 80057fe:	f00c fb93 	bl	8011f28 <pow>
 8005802:	eeb0 7b40 	vmov.f64	d7, d0
 8005806:	ee29 6b07 	vmul.f64	d6, d9, d7
 800580a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800580e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005812:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005816:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800581a:	4b28      	ldr	r3, [pc, #160]	; (80058bc <get_Straj+0xd48>)
 800581c:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmax*(T-t);
 8005820:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <get_Straj+0xd40>)
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	eeb1 7a67 	vneg.f32	s14, s15
 800582a:	4b20      	ldr	r3, [pc, #128]	; (80058ac <get_Straj+0xd38>)
 800582c:	edd3 6a00 	vldr	s13, [r3]
 8005830:	edd7 7a01 	vldr	s15, [r7, #4]
 8005834:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583c:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <get_Straj+0xd4c>)
 800583e:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmax;
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <get_Straj+0xd40>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <get_Straj+0xd50>)
 8005848:	6013      	str	r3, [r2, #0]
        if (flagInv){
 800584a:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <get_Straj+0xd54>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d023      	beq.n	800589a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <get_Straj+0xd44>)
 8005854:	edd3 7a00 	vldr	s15, [r3]
 8005858:	eef1 7a67 	vneg.f32	s15, s15
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <get_Straj+0xd44>)
 800585e:	edc3 7a00 	vstr	s15, [r3]
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <get_Straj+0xd48>)
 8005864:	edd3 7a00 	vldr	s15, [r3]
 8005868:	eef1 7a67 	vneg.f32	s15, s15
 800586c:	4b13      	ldr	r3, [pc, #76]	; (80058bc <get_Straj+0xd48>)
 800586e:	edc3 7a00 	vstr	s15, [r3]
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <get_Straj+0xd4c>)
 8005874:	edd3 7a00 	vldr	s15, [r3]
 8005878:	eef1 7a67 	vneg.f32	s15, s15
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <get_Straj+0xd4c>)
 800587e:	edc3 7a00 	vstr	s15, [r3]
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <get_Straj+0xd50>)
 8005884:	edd3 7a00 	vldr	s15, [r3]
 8005888:	eef1 7a67 	vneg.f32	s15, s15
 800588c:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <get_Straj+0xd50>)
 800588e:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <get_Straj+0xd54>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
}
 8005898:	e7ff      	b.n	800589a <get_Straj+0xd26>
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	ecbd 8b06 	vpop	{d8-d10}
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	24000ad8 	.word	0x24000ad8
 80058ac:	24000ab4 	.word	0x24000ab4
 80058b0:	2400068c 	.word	0x2400068c
 80058b4:	24000098 	.word	0x24000098
 80058b8:	24000670 	.word	0x24000670
 80058bc:	24000674 	.word	0x24000674
 80058c0:	24000678 	.word	0x24000678
 80058c4:	2400067c 	.word	0x2400067c
 80058c8:	24000aa4 	.word	0x24000aa4
 80058cc:	00000000 	.word	0x00000000

080058d0 <update_ScurveTraj>:


void update_ScurveTraj(float _qi ,float _qf, float vi,float vf ,float vmax,float amax,float jmax){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	ed2d 8b06 	vpush	{d8-d10}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	ed87 0a07 	vstr	s0, [r7, #28]
 80058de:	edc7 0a06 	vstr	s1, [r7, #24]
 80058e2:	ed87 1a05 	vstr	s2, [r7, #20]
 80058e6:	edc7 1a04 	vstr	s3, [r7, #16]
 80058ea:	ed87 2a03 	vstr	s4, [r7, #12]
 80058ee:	edc7 2a02 	vstr	s5, [r7, #8]
 80058f2:	ed87 3a01 	vstr	s6, [r7, #4]

jmin = -jmax;
 80058f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80058fa:	eef1 7a67 	vneg.f32	s15, s15
 80058fe:	4bad      	ldr	r3, [pc, #692]	; (8005bb4 <update_ScurveTraj+0x2e4>)
 8005900:	edc3 7a00 	vstr	s15, [r3]
amin = -amax;
 8005904:	edd7 7a02 	vldr	s15, [r7, #8]
 8005908:	eef1 7a67 	vneg.f32	s15, s15
 800590c:	4baa      	ldr	r3, [pc, #680]	; (8005bb8 <update_ScurveTraj+0x2e8>)
 800590e:	edc3 7a00 	vstr	s15, [r3]
vmin = -vmax;
 8005912:	edd7 7a03 	vldr	s15, [r7, #12]
 8005916:	eef1 7a67 	vneg.f32	s15, s15
 800591a:	4ba8      	ldr	r3, [pc, #672]	; (8005bbc <update_ScurveTraj+0x2ec>)
 800591c:	edc3 7a00 	vstr	s15, [r3]
qi=_qi;
 8005920:	4aa7      	ldr	r2, [pc, #668]	; (8005bc0 <update_ScurveTraj+0x2f0>)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	6013      	str	r3, [r2, #0]
qf=_qf;
 8005926:	4aa7      	ldr	r2, [pc, #668]	; (8005bc4 <update_ScurveTraj+0x2f4>)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	6013      	str	r3, [r2, #0]

if (qf < qi){
 800592c:	4ba5      	ldr	r3, [pc, #660]	; (8005bc4 <update_ScurveTraj+0x2f4>)
 800592e:	ed93 7a00 	vldr	s14, [r3]
 8005932:	4ba3      	ldr	r3, [pc, #652]	; (8005bc0 <update_ScurveTraj+0x2f0>)
 8005934:	edd3 7a00 	vldr	s15, [r3]
 8005938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	d548      	bpl.n	80059d4 <update_ScurveTraj+0x104>

    flagInv = true;
 8005942:	4ba1      	ldr	r3, [pc, #644]	; (8005bc8 <update_ScurveTraj+0x2f8>)
 8005944:	2201      	movs	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8005948:	4b9d      	ldr	r3, [pc, #628]	; (8005bc0 <update_ScurveTraj+0x2f0>)
 800594a:	edd3 7a00 	vldr	s15, [r3]
 800594e:	eef1 7a67 	vneg.f32	s15, s15
 8005952:	4b9b      	ldr	r3, [pc, #620]	; (8005bc0 <update_ScurveTraj+0x2f0>)
 8005954:	edc3 7a00 	vstr	s15, [r3]
    qf = -qf;
 8005958:	4b9a      	ldr	r3, [pc, #616]	; (8005bc4 <update_ScurveTraj+0x2f4>)
 800595a:	edd3 7a00 	vldr	s15, [r3]
 800595e:	eef1 7a67 	vneg.f32	s15, s15
 8005962:	4b98      	ldr	r3, [pc, #608]	; (8005bc4 <update_ScurveTraj+0x2f4>)
 8005964:	edc3 7a00 	vstr	s15, [r3]
    vi = -vi;
 8005968:	edd7 7a05 	vldr	s15, [r7, #20]
 800596c:	eef1 7a67 	vneg.f32	s15, s15
 8005970:	edc7 7a05 	vstr	s15, [r7, #20]
    vf = -vf;
 8005974:	edd7 7a04 	vldr	s15, [r7, #16]
 8005978:	eef1 7a67 	vneg.f32	s15, s15
 800597c:	edc7 7a04 	vstr	s15, [r7, #16]

    vmax = -vmin;
 8005980:	4b8e      	ldr	r3, [pc, #568]	; (8005bbc <update_ScurveTraj+0x2ec>)
 8005982:	edd3 7a00 	vldr	s15, [r3]
 8005986:	eef1 7a67 	vneg.f32	s15, s15
 800598a:	edc7 7a03 	vstr	s15, [r7, #12]
    vmin = -vmax;
 800598e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005992:	eef1 7a67 	vneg.f32	s15, s15
 8005996:	4b89      	ldr	r3, [pc, #548]	; (8005bbc <update_ScurveTraj+0x2ec>)
 8005998:	edc3 7a00 	vstr	s15, [r3]
    amax = -amin;
 800599c:	4b86      	ldr	r3, [pc, #536]	; (8005bb8 <update_ScurveTraj+0x2e8>)
 800599e:	edd3 7a00 	vldr	s15, [r3]
 80059a2:	eef1 7a67 	vneg.f32	s15, s15
 80059a6:	edc7 7a02 	vstr	s15, [r7, #8]
    amin = -amax;
 80059aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80059ae:	eef1 7a67 	vneg.f32	s15, s15
 80059b2:	4b81      	ldr	r3, [pc, #516]	; (8005bb8 <update_ScurveTraj+0x2e8>)
 80059b4:	edc3 7a00 	vstr	s15, [r3]
    jmax = -jmin;
 80059b8:	4b7e      	ldr	r3, [pc, #504]	; (8005bb4 <update_ScurveTraj+0x2e4>)
 80059ba:	edd3 7a00 	vldr	s15, [r3]
 80059be:	eef1 7a67 	vneg.f32	s15, s15
 80059c2:	edc7 7a01 	vstr	s15, [r7, #4]
    jmin = -jmax;
 80059c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80059ca:	eef1 7a67 	vneg.f32	s15, s15
 80059ce:	4b79      	ldr	r3, [pc, #484]	; (8005bb4 <update_ScurveTraj+0x2e4>)
 80059d0:	edc3 7a00 	vstr	s15, [r3]

}

volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 80059d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80059d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80059dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e0:	eef0 7ae7 	vabs.f32	s15, s15
 80059e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80059e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80059ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059f0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80059f4:	eeb0 0b45 	vmov.f64	d0, d5
 80059f8:	f00c fd16 	bl	8012428 <sqrt>
 80059fc:	eeb0 6b40 	vmov.f64	d6, d0
 8005a00:	edd7 5a02 	vldr	s11, [r7, #8]
 8005a04:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a08:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	d518      	bpl.n	8005a4c <update_ScurveTraj+0x17c>
 8005a1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a26:	eef0 7ae7 	vabs.f32	s15, s15
 8005a2a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a36:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005a3a:	eeb0 0b45 	vmov.f64	d0, d5
 8005a3e:	f00c fcf3 	bl	8012428 <sqrt>
 8005a42:	eeb0 7b40 	vmov.f64	d7, d0
 8005a46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005a4a:	e005      	b.n	8005a58 <update_ScurveTraj+0x188>
 8005a4c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005a50:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


if (Tjaux<amax/jmax){
 8005a5c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005a60:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a74:	dc00      	bgt.n	8005a78 <update_ScurveTraj+0x1a8>
    //if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
    //else {printf("the trajectory is NOT \n");}
}
else if (Tjaux == amax/jmax){
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    //if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
    //else {printf("the trajectory is NOT feasible\n");}
}
//Phase 1: acceleration
if ((vmax-vi)*jmax < pow(amax,2)){
 8005a78:	ed97 7a03 	vldr	s14, [r7, #12]
 8005a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a98:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a9c:	eeb0 0b47 	vmov.f64	d0, d7
 8005aa0:	f00c fa42 	bl	8011f28 <pow>
 8005aa4:	eeb0 7b40 	vmov.f64	d7, d0
 8005aa8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab0:	d523      	bpl.n	8005afa <update_ScurveTraj+0x22a>
    //printf("amax is NOT reached\n");

    Tj1=sqrt(fabs(vmax-vi)/jmax);
 8005ab2:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005abe:	eef0 7ae7 	vabs.f32	s15, s15
 8005ac2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ace:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005ad2:	eeb0 0b45 	vmov.f64	d0, d5
 8005ad6:	f00c fca7 	bl	8012428 <sqrt>
 8005ada:	eeb0 7b40 	vmov.f64	d7, d0
 8005ade:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ae2:	4b3a      	ldr	r3, [pc, #232]	; (8005bcc <update_ScurveTraj+0x2fc>)
 8005ae4:	edc3 7a00 	vstr	s15, [r3]
    Ta=Tj1*2;
 8005ae8:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <update_ScurveTraj+0x2fc>)
 8005aea:	edd3 7a00 	vldr	s15, [r3]
 8005aee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005af2:	4b37      	ldr	r3, [pc, #220]	; (8005bd0 <update_ScurveTraj+0x300>)
 8005af4:	edc3 7a00 	vstr	s15, [r3]
 8005af8:	e01a      	b.n	8005b30 <update_ScurveTraj+0x260>
}
else{
    //printf("amax is reached\n");
    Tj1=amax/jmax;
 8005afa:	edd7 6a02 	vldr	s13, [r7, #8]
 8005afe:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b06:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <update_ScurveTraj+0x2fc>)
 8005b08:	edc3 7a00 	vstr	s15, [r3]
    Ta=Tj1+(vmax-vi)/amax;
 8005b0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b14:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005b18:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <update_ScurveTraj+0x2fc>)
 8005b22:	edd3 7a00 	vldr	s15, [r3]
 8005b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b2a:	4b29      	ldr	r3, [pc, #164]	; (8005bd0 <update_ScurveTraj+0x300>)
 8005b2c:	edc3 7a00 	vstr	s15, [r3]
}

//Phase 3: Desacceleration


if ((vmax-vf)*jmax < pow(amax,2)){
 8005b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b44:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005b48:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b50:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b54:	eeb0 0b47 	vmov.f64	d0, d7
 8005b58:	f00c f9e6 	bl	8011f28 <pow>
 8005b5c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b60:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b68:	d538      	bpl.n	8005bdc <update_ScurveTraj+0x30c>
    //printf("amin is NOT reached\n");

    Tj2=sqrt(fabs(vmax-vf)/jmax);
 8005b6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b76:	eef0 7ae7 	vabs.f32	s15, s15
 8005b7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b86:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005b8a:	eeb0 0b45 	vmov.f64	d0, d5
 8005b8e:	f00c fc4b 	bl	8012428 <sqrt>
 8005b92:	eeb0 7b40 	vmov.f64	d7, d0
 8005b96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <update_ScurveTraj+0x304>)
 8005b9c:	edc3 7a00 	vstr	s15, [r3]
    Td=Tj2*2;
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <update_ScurveTraj+0x304>)
 8005ba2:	edd3 7a00 	vldr	s15, [r3]
 8005ba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <update_ScurveTraj+0x308>)
 8005bac:	edc3 7a00 	vstr	s15, [r3]
 8005bb0:	e02f      	b.n	8005c12 <update_ScurveTraj+0x342>
 8005bb2:	bf00      	nop
 8005bb4:	24000680 	.word	0x24000680
 8005bb8:	24000690 	.word	0x24000690
 8005bbc:	24000684 	.word	0x24000684
 8005bc0:	24000ad4 	.word	0x24000ad4
 8005bc4:	24000ad8 	.word	0x24000ad8
 8005bc8:	24000aa4 	.word	0x24000aa4
 8005bcc:	24000ac4 	.word	0x24000ac4
 8005bd0:	24000ab8 	.word	0x24000ab8
 8005bd4:	24000ac8 	.word	0x24000ac8
 8005bd8:	24000abc 	.word	0x24000abc
}
else{
    //printf("amin is reached\n");
    Tj2=amax/jmax;
 8005bdc:	edd7 6a02 	vldr	s13, [r7, #8]
 8005be0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be8:	4ba9      	ldr	r3, [pc, #676]	; (8005e90 <update_ScurveTraj+0x5c0>)
 8005bea:	edc3 7a00 	vstr	s15, [r3]
    Td=Tj2+(vmax-vf)/amax;
 8005bee:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bf6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c02:	4ba3      	ldr	r3, [pc, #652]	; (8005e90 <update_ScurveTraj+0x5c0>)
 8005c04:	edd3 7a00 	vldr	s15, [r3]
 8005c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c0c:	4ba1      	ldr	r3, [pc, #644]	; (8005e94 <update_ScurveTraj+0x5c4>)
 8005c0e:	edc3 7a00 	vstr	s15, [r3]
}


Tv = (qf-qi)/vmax - Ta/2*(1+vi/vmax)-Td/2*(1+vf/vmax);
 8005c12:	4ba1      	ldr	r3, [pc, #644]	; (8005e98 <update_ScurveTraj+0x5c8>)
 8005c14:	ed93 7a00 	vldr	s14, [r3]
 8005c18:	4ba0      	ldr	r3, [pc, #640]	; (8005e9c <update_ScurveTraj+0x5cc>)
 8005c1a:	edd3 7a00 	vldr	s15, [r3]
 8005c1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2a:	4b9d      	ldr	r3, [pc, #628]	; (8005ea0 <update_ScurveTraj+0x5d0>)
 8005c2c:	edd3 7a00 	vldr	s15, [r3]
 8005c30:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005c34:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005c38:	edd7 5a05 	vldr	s11, [r7, #20]
 8005c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c40:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005c44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c48:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c54:	4b8f      	ldr	r3, [pc, #572]	; (8005e94 <update_ScurveTraj+0x5c4>)
 8005c56:	edd3 7a00 	vldr	s15, [r3]
 8005c5a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005c5e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005c62:	edd7 5a04 	vldr	s11, [r7, #16]
 8005c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005c6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c72:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c7e:	4b89      	ldr	r3, [pc, #548]	; (8005ea4 <update_ScurveTraj+0x5d4>)
 8005c80:	edc3 7a00 	vstr	s15, [r3]

if (Tv>0){
 8005c84:	4b87      	ldr	r3, [pc, #540]	; (8005ea4 <update_ScurveTraj+0x5d4>)
 8005c86:	edd3 7a00 	vldr	s15, [r3]
 8005c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c92:	f300 8347 	bgt.w	8006324 <update_ScurveTraj+0xa54>
    //printf("the max velocity is reached\n");
}
else{
    //printf("CASE 2\n");
    //printf("In this case vmax is NOT reached, so Tv=0\n");
    Tj1=amax/jmax;
 8005c96:	edd7 6a02 	vldr	s13, [r7, #8]
 8005c9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca2:	4b81      	ldr	r3, [pc, #516]	; (8005ea8 <update_ScurveTraj+0x5d8>)
 8005ca4:	edc3 7a00 	vstr	s15, [r3]
    Tj2=Tj1;
 8005ca8:	4b7f      	ldr	r3, [pc, #508]	; (8005ea8 <update_ScurveTraj+0x5d8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a78      	ldr	r2, [pc, #480]	; (8005e90 <update_ScurveTraj+0x5c0>)
 8005cae:	6013      	str	r3, [r2, #0]
    Tj=Tj1;
 8005cb0:	4b7d      	ldr	r3, [pc, #500]	; (8005ea8 <update_ScurveTraj+0x5d8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a7d      	ldr	r2, [pc, #500]	; (8005eac <update_ScurveTraj+0x5dc>)
 8005cb6:	6013      	str	r3, [r2, #0]
    delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005cb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cc0:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005cc4:	eeb0 0b47 	vmov.f64	d0, d7
 8005cc8:	f00c f92e 	bl	8011f28 <pow>
 8005ccc:	eeb0 9b40 	vmov.f64	d9, d0
 8005cd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005cdc:	eeb0 0b47 	vmov.f64	d0, d7
 8005ce0:	f00c f922 	bl	8011f28 <pow>
 8005ce4:	eeb0 7b40 	vmov.f64	d7, d0
 8005ce8:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cf4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cfc:	f00c f914 	bl	8011f28 <pow>
 8005d00:	eeb0 9b40 	vmov.f64	d9, d0
 8005d04:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d0c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d10:	eeb0 0b47 	vmov.f64	d0, d7
 8005d14:	f00c f908 	bl	8011f28 <pow>
 8005d18:	eeb0 7b40 	vmov.f64	d7, d0
 8005d1c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005d20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d24:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005d28:	4b5b      	ldr	r3, [pc, #364]	; (8005e98 <update_ScurveTraj+0x5c8>)
 8005d2a:	ed93 7a00 	vldr	s14, [r3]
 8005d2e:	4b5b      	ldr	r3, [pc, #364]	; (8005e9c <update_ScurveTraj+0x5cc>)
 8005d30:	edd3 7a00 	vldr	s15, [r3]
 8005d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d38:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005d3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d40:	ed97 5a02 	vldr	s10, [r7, #8]
 8005d44:	edd7 5a01 	vldr	s11, [r7, #4]
 8005d48:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8005d4c:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8005d50:	ed97 5a05 	vldr	s10, [r7, #20]
 8005d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d58:	ee75 7a27 	vadd.f32	s15, s10, s15
 8005d5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005d78:	4b4d      	ldr	r3, [pc, #308]	; (8005eb0 <update_ScurveTraj+0x5e0>)
 8005d7a:	edc3 7a00 	vstr	s15, [r3]
    Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d8a:	eeb0 0b47 	vmov.f64	d0, d7
 8005d8e:	f00c f8cb 	bl	8011f28 <pow>
 8005d92:	eeb0 5b40 	vmov.f64	d5, d0
 8005d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d9e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005da6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005daa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005dae:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005db2:	4b3f      	ldr	r3, [pc, #252]	; (8005eb0 <update_ScurveTraj+0x5e0>)
 8005db4:	edd3 7a00 	vldr	s15, [r3]
 8005db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005dbc:	eeb0 0b47 	vmov.f64	d0, d7
 8005dc0:	f00c fb32 	bl	8012428 <sqrt>
 8005dc4:	eeb0 7b40 	vmov.f64	d7, d0
 8005dc8:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005dcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005dd4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005dd8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005ddc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005de0:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <update_ScurveTraj+0x5d0>)
 8005de2:	edc3 7a00 	vstr	s15, [r3]
    Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005dee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005df2:	eeb0 0b47 	vmov.f64	d0, d7
 8005df6:	f00c f897 	bl	8011f28 <pow>
 8005dfa:	eeb0 5b40 	vmov.f64	d5, d0
 8005dfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e06:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005e0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e16:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005e1a:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <update_ScurveTraj+0x5e0>)
 8005e1c:	edd3 7a00 	vldr	s15, [r3]
 8005e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e24:	eeb0 0b47 	vmov.f64	d0, d7
 8005e28:	f00c fafe 	bl	8012428 <sqrt>
 8005e2c:	eeb0 7b40 	vmov.f64	d7, d0
 8005e30:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005e40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005e44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005e48:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <update_ScurveTraj+0x5c4>)
 8005e4a:	edc3 7a00 	vstr	s15, [r3]
    Tv=0;
 8005e4e:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <update_ScurveTraj+0x5d4>)
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]


    if (Ta<2*Tj || Td<2*Tj){
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <update_ScurveTraj+0x5dc>)
 8005e58:	edd3 7a00 	vldr	s15, [r3]
 8005e5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <update_ScurveTraj+0x5d0>)
 8005e62:	edd3 7a00 	vldr	s15, [r3]
 8005e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6e:	f300 822c 	bgt.w	80062ca <update_ScurveTraj+0x9fa>
 8005e72:	4b0e      	ldr	r3, [pc, #56]	; (8005eac <update_ScurveTraj+0x5dc>)
 8005e74:	edd3 7a00 	vldr	s15, [r3]
 8005e78:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <update_ScurveTraj+0x5c4>)
 8005e7e:	edd3 7a00 	vldr	s15, [r3]
 8005e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8a:	f300 821e 	bgt.w	80062ca <update_ScurveTraj+0x9fa>
        }
    }

}

}
 8005e8e:	e249      	b.n	8006324 <update_ScurveTraj+0xa54>
 8005e90:	24000ac8 	.word	0x24000ac8
 8005e94:	24000abc 	.word	0x24000abc
 8005e98:	24000ad8 	.word	0x24000ad8
 8005e9c:	24000ad4 	.word	0x24000ad4
 8005ea0:	24000ab8 	.word	0x24000ab8
 8005ea4:	24000ac0 	.word	0x24000ac0
 8005ea8:	24000ac4 	.word	0x24000ac4
 8005eac:	24000acc 	.word	0x24000acc
 8005eb0:	24000ad0 	.word	0x24000ad0
            amax=amax*0.99;
 8005eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005eb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ebc:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80061a0 <update_ScurveTraj+0x8d0>
 8005ec0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ec4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ec8:	edc7 7a02 	vstr	s15, [r7, #8]
            Tj=amax/jmax;
 8005ecc:	edd7 6a02 	vldr	s13, [r7, #8]
 8005ed0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed8:	4bb3      	ldr	r3, [pc, #716]	; (80061a8 <update_ScurveTraj+0x8d8>)
 8005eda:	edc3 7a00 	vstr	s15, [r3]
            delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ee2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ee6:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005eea:	eeb0 0b47 	vmov.f64	d0, d7
 8005eee:	f00c f81b 	bl	8011f28 <pow>
 8005ef2:	eeb0 9b40 	vmov.f64	d9, d0
 8005ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005efe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f02:	eeb0 0b47 	vmov.f64	d0, d7
 8005f06:	f00c f80f 	bl	8011f28 <pow>
 8005f0a:	eeb0 7b40 	vmov.f64	d7, d0
 8005f0e:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f1a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f1e:	eeb0 0b47 	vmov.f64	d0, d7
 8005f22:	f00c f801 	bl	8011f28 <pow>
 8005f26:	eeb0 9b40 	vmov.f64	d9, d0
 8005f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f32:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f36:	eeb0 0b47 	vmov.f64	d0, d7
 8005f3a:	f00b fff5 	bl	8011f28 <pow>
 8005f3e:	eeb0 7b40 	vmov.f64	d7, d0
 8005f42:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005f46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f4a:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005f4e:	4b97      	ldr	r3, [pc, #604]	; (80061ac <update_ScurveTraj+0x8dc>)
 8005f50:	ed93 7a00 	vldr	s14, [r3]
 8005f54:	4b96      	ldr	r3, [pc, #600]	; (80061b0 <update_ScurveTraj+0x8e0>)
 8005f56:	edd3 7a00 	vldr	s15, [r3]
 8005f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f5e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005f62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f66:	ed97 5a02 	vldr	s10, [r7, #8]
 8005f6a:	edd7 5a01 	vldr	s11, [r7, #4]
 8005f6e:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8005f72:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8005f76:	ed97 5a05 	vldr	s10, [r7, #20]
 8005f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f7e:	ee75 7a27 	vadd.f32	s15, s10, s15
 8005f82:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f9e:	4b85      	ldr	r3, [pc, #532]	; (80061b4 <update_ScurveTraj+0x8e4>)
 8005fa0:	edc3 7a00 	vstr	s15, [r3]
            Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005fac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8005fb4:	f00b ffb8 	bl	8011f28 <pow>
 8005fb8:	eeb0 5b40 	vmov.f64	d5, d0
 8005fbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005fc4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005fd4:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005fd8:	4b76      	ldr	r3, [pc, #472]	; (80061b4 <update_ScurveTraj+0x8e4>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8005fe6:	f00c fa1f 	bl	8012428 <sqrt>
 8005fea:	eeb0 7b40 	vmov.f64	d7, d0
 8005fee:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005ff2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ff6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ffa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005ffe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006002:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006006:	4b6c      	ldr	r3, [pc, #432]	; (80061b8 <update_ScurveTraj+0x8e8>)
 8006008:	edc3 7a00 	vstr	s15, [r3]
            Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 800600c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006010:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006014:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8006018:	eeb0 0b47 	vmov.f64	d0, d7
 800601c:	f00b ff84 	bl	8011f28 <pow>
 8006020:	eeb0 5b40 	vmov.f64	d5, d0
 8006024:	edd7 7a01 	vldr	s15, [r7, #4]
 8006028:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800602c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8006030:	edd7 7a04 	vldr	s15, [r7, #16]
 8006034:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006038:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800603c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8006040:	4b5c      	ldr	r3, [pc, #368]	; (80061b4 <update_ScurveTraj+0x8e4>)
 8006042:	edd3 7a00 	vldr	s15, [r3]
 8006046:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800604a:	eeb0 0b47 	vmov.f64	d0, d7
 800604e:	f00c f9eb 	bl	8012428 <sqrt>
 8006052:	eeb0 7b40 	vmov.f64	d7, d0
 8006056:	ee38 5b07 	vadd.f64	d5, d8, d7
 800605a:	edd7 7a02 	vldr	s15, [r7, #8]
 800605e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006062:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006066:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800606a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800606e:	4b53      	ldr	r3, [pc, #332]	; (80061bc <update_ScurveTraj+0x8ec>)
 8006070:	edc3 7a00 	vstr	s15, [r3]
            if (Ta<0){
 8006074:	4b50      	ldr	r3, [pc, #320]	; (80061b8 <update_ScurveTraj+0x8e8>)
 8006076:	edd3 7a00 	vldr	s15, [r3]
 800607a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800607e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006082:	f140 8081 	bpl.w	8006188 <update_ScurveTraj+0x8b8>
                Ta=0;
 8006086:	4b4c      	ldr	r3, [pc, #304]	; (80061b8 <update_ScurveTraj+0x8e8>)
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
                Tj1=0;
 800608e:	4b4c      	ldr	r3, [pc, #304]	; (80061c0 <update_ScurveTraj+0x8f0>)
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
                Td=2*((qf-qi)/(vf+vi));
 8006096:	4b45      	ldr	r3, [pc, #276]	; (80061ac <update_ScurveTraj+0x8dc>)
 8006098:	ed93 7a00 	vldr	s14, [r3]
 800609c:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <update_ScurveTraj+0x8e0>)
 800609e:	edd3 7a00 	vldr	s15, [r3]
 80060a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80060a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80060aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80060ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060ba:	4b40      	ldr	r3, [pc, #256]	; (80061bc <update_ScurveTraj+0x8ec>)
 80060bc:	edc3 7a00 	vstr	s15, [r3]
                Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 80060c0:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <update_ScurveTraj+0x8dc>)
 80060c2:	ed93 7a00 	vldr	s14, [r3]
 80060c6:	4b3a      	ldr	r3, [pc, #232]	; (80061b0 <update_ScurveTraj+0x8e0>)
 80060c8:	edd3 7a00 	vldr	s15, [r3]
 80060cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80060d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80060dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80060e0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80060e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80060e8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80060ec:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <update_ScurveTraj+0x8dc>)
 80060ee:	ed93 7a00 	vldr	s14, [r3]
 80060f2:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <update_ScurveTraj+0x8e0>)
 80060f4:	edd3 7a00 	vldr	s15, [r3]
 80060f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006100:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8006104:	eeb0 0b47 	vmov.f64	d0, d7
 8006108:	f00b ff0e 	bl	8011f28 <pow>
 800610c:	eeb0 7b40 	vmov.f64	d7, d0
 8006110:	ee2a ab07 	vmul.f64	d10, d10, d7
 8006114:	ed97 7a04 	vldr	s14, [r7, #16]
 8006118:	edd7 7a05 	vldr	s15, [r7, #20]
 800611c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006120:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006124:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8006128:	eeb0 0b47 	vmov.f64	d0, d7
 800612c:	f00b fefc 	bl	8011f28 <pow>
 8006130:	eeb0 6b40 	vmov.f64	d6, d0
 8006134:	ed97 7a04 	vldr	s14, [r7, #16]
 8006138:	edd7 7a05 	vldr	s15, [r7, #20]
 800613c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006140:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006144:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006148:	ee3a 7b07 	vadd.f64	d7, d10, d7
 800614c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006150:	eeb0 0b47 	vmov.f64	d0, d7
 8006154:	f00c f968 	bl	8012428 <sqrt>
 8006158:	eeb0 7b40 	vmov.f64	d7, d0
 800615c:	ee38 5b47 	vsub.f64	d5, d8, d7
 8006160:	ed97 7a04 	vldr	s14, [r7, #16]
 8006164:	edd7 7a05 	vldr	s15, [r7, #20]
 8006168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800616c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006178:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800617c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <update_ScurveTraj+0x8f4>)
 8006182:	edc3 7a00 	vstr	s15, [r3]
                break;
 8006186:	e0cd      	b.n	8006324 <update_ScurveTraj+0xa54>
            if (Td<0){
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <update_ScurveTraj+0x8ec>)
 800618a:	edd3 7a00 	vldr	s15, [r3]
 800618e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	d417      	bmi.n	80061c8 <update_ScurveTraj+0x8f8>
 8006198:	e097      	b.n	80062ca <update_ScurveTraj+0x9fa>
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w
 80061a0:	7ae147ae 	.word	0x7ae147ae
 80061a4:	3fefae14 	.word	0x3fefae14
 80061a8:	24000acc 	.word	0x24000acc
 80061ac:	24000ad8 	.word	0x24000ad8
 80061b0:	24000ad4 	.word	0x24000ad4
 80061b4:	24000ad0 	.word	0x24000ad0
 80061b8:	24000ab8 	.word	0x24000ab8
 80061bc:	24000abc 	.word	0x24000abc
 80061c0:	24000ac4 	.word	0x24000ac4
 80061c4:	24000ac8 	.word	0x24000ac8
                Td=0;
 80061c8:	4b59      	ldr	r3, [pc, #356]	; (8006330 <update_ScurveTraj+0xa60>)
 80061ca:	f04f 0200 	mov.w	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
                Ta=2*((qf-qi)/(vf+vi));
 80061d0:	4b58      	ldr	r3, [pc, #352]	; (8006334 <update_ScurveTraj+0xa64>)
 80061d2:	ed93 7a00 	vldr	s14, [r3]
 80061d6:	4b58      	ldr	r3, [pc, #352]	; (8006338 <update_ScurveTraj+0xa68>)
 80061d8:	edd3 7a00 	vldr	s15, [r3]
 80061dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80061e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80061e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80061e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80061f4:	4b51      	ldr	r3, [pc, #324]	; (800633c <update_ScurveTraj+0xa6c>)
 80061f6:	edc3 7a00 	vstr	s15, [r3]
                Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 80061fa:	4b4e      	ldr	r3, [pc, #312]	; (8006334 <update_ScurveTraj+0xa64>)
 80061fc:	ed93 7a00 	vldr	s14, [r3]
 8006200:	4b4d      	ldr	r3, [pc, #308]	; (8006338 <update_ScurveTraj+0xa68>)
 8006202:	edd3 7a00 	vldr	s15, [r3]
 8006206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800620a:	edd7 7a01 	vldr	s15, [r7, #4]
 800620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006212:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006216:	edd7 7a01 	vldr	s15, [r7, #4]
 800621a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800621e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006222:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8006226:	4b43      	ldr	r3, [pc, #268]	; (8006334 <update_ScurveTraj+0xa64>)
 8006228:	ed93 7a00 	vldr	s14, [r3]
 800622c:	4b42      	ldr	r3, [pc, #264]	; (8006338 <update_ScurveTraj+0xa68>)
 800622e:	edd3 7a00 	vldr	s15, [r3]
 8006232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006236:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800623a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800623e:	eeb0 0b47 	vmov.f64	d0, d7
 8006242:	f00b fe71 	bl	8011f28 <pow>
 8006246:	eeb0 7b40 	vmov.f64	d7, d0
 800624a:	ee2a ab07 	vmul.f64	d10, d10, d7
 800624e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006252:	edd7 7a05 	vldr	s15, [r7, #20]
 8006256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800625a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800625e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8006262:	eeb0 0b47 	vmov.f64	d0, d7
 8006266:	f00b fe5f 	bl	8011f28 <pow>
 800626a:	eeb0 6b40 	vmov.f64	d6, d0
 800626e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006272:	edd7 7a05 	vldr	s15, [r7, #20]
 8006276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800627a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800627e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006282:	ee3a 7b47 	vsub.f64	d7, d10, d7
 8006286:	ee29 7b07 	vmul.f64	d7, d9, d7
 800628a:	eeb0 0b47 	vmov.f64	d0, d7
 800628e:	f00c f8cb 	bl	8012428 <sqrt>
 8006292:	eeb0 7b40 	vmov.f64	d7, d0
 8006296:	ee38 5b47 	vsub.f64	d5, d8, d7
 800629a:	ed97 7a04 	vldr	s14, [r7, #16]
 800629e:	edd7 7a05 	vldr	s15, [r7, #20]
 80062a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80062b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80062b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80062ba:	4b21      	ldr	r3, [pc, #132]	; (8006340 <update_ScurveTraj+0xa70>)
 80062bc:	edc3 7a00 	vstr	s15, [r3]
                Tj2=0;
 80062c0:	4b20      	ldr	r3, [pc, #128]	; (8006344 <update_ScurveTraj+0xa74>)
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
                break;
 80062c8:	e02c      	b.n	8006324 <update_ScurveTraj+0xa54>
        while (!(Ta>2*Tj && Td>2*Tj)){
 80062ca:	4b1f      	ldr	r3, [pc, #124]	; (8006348 <update_ScurveTraj+0xa78>)
 80062cc:	edd3 7a00 	vldr	s15, [r3]
 80062d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80062d4:	4b19      	ldr	r3, [pc, #100]	; (800633c <update_ScurveTraj+0xa6c>)
 80062d6:	edd3 7a00 	vldr	s15, [r3]
 80062da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e2:	bf4c      	ite	mi
 80062e4:	2301      	movmi	r3, #1
 80062e6:	2300      	movpl	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f083 0301 	eor.w	r3, r3, #1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f47f addf 	bne.w	8005eb4 <update_ScurveTraj+0x5e4>
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <update_ScurveTraj+0xa78>)
 80062f8:	edd3 7a00 	vldr	s15, [r3]
 80062fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <update_ScurveTraj+0xa60>)
 8006302:	edd3 7a00 	vldr	s15, [r3]
 8006306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800630a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630e:	bf4c      	ite	mi
 8006310:	2301      	movmi	r3, #1
 8006312:	2300      	movpl	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f083 0301 	eor.w	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	f47f adc9 	bne.w	8005eb4 <update_ScurveTraj+0x5e4>
}
 8006322:	e7ff      	b.n	8006324 <update_ScurveTraj+0xa54>
 8006324:	bf00      	nop
 8006326:	3728      	adds	r7, #40	; 0x28
 8006328:	46bd      	mov	sp, r7
 800632a:	ecbd 8b06 	vpop	{d8-d10}
 800632e:	bd80      	pop	{r7, pc}
 8006330:	24000abc 	.word	0x24000abc
 8006334:	24000ad8 	.word	0x24000ad8
 8006338:	24000ad4 	.word	0x24000ad4
 800633c:	24000ab8 	.word	0x24000ab8
 8006340:	24000ac4 	.word	0x24000ac4
 8006344:	24000ac8 	.word	0x24000ac8
 8006348:	24000acc 	.word	0x24000acc
 800634c:	00000000 	.word	0x00000000

08006350 <SetPerfilTimers>:


void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	; 0x24
 8006354:	af00      	add	r7, sp, #0
 8006356:	ed87 0b04 	vstr	d0, [r7, #16]
 800635a:	ed87 1b02 	vstr	d1, [r7, #8]
 800635e:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 8006362:	ed97 7b04 	vldr	d7, [r7, #16]
 8006366:	ed9f 6b94 	vldr	d6, [pc, #592]	; 80065b8 <SetPerfilTimers+0x268>
 800636a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800636e:	4b9a      	ldr	r3, [pc, #616]	; (80065d8 <SetPerfilTimers+0x288>)
 8006370:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 8006374:	ed97 7b02 	vldr	d7, [r7, #8]
 8006378:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80065b8 <SetPerfilTimers+0x268>
 800637c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006380:	4b96      	ldr	r3, [pc, #600]	; (80065dc <SetPerfilTimers+0x28c>)
 8006382:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 8006386:	ed97 7b00 	vldr	d7, [r7]
 800638a:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80065b8 <SetPerfilTimers+0x268>
 800638e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006392:	4b93      	ldr	r3, [pc, #588]	; (80065e0 <SetPerfilTimers+0x290>)
 8006394:	ed83 7b00 	vstr	d7, [r3]

		if(rpm1<=0.1){
 8006398:	4b8f      	ldr	r3, [pc, #572]	; (80065d8 <SetPerfilTimers+0x288>)
 800639a:	ed93 7b00 	vldr	d7, [r3]
 800639e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 80065c0 <SetPerfilTimers+0x270>
 80063a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80063a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063aa:	d805      	bhi.n	80063b8 <SetPerfilTimers+0x68>
			rpm1=0.1;
 80063ac:	498a      	ldr	r1, [pc, #552]	; (80065d8 <SetPerfilTimers+0x288>)
 80063ae:	a384      	add	r3, pc, #528	; (adr r3, 80065c0 <SetPerfilTimers+0x270>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 80063b8:	4b88      	ldr	r3, [pc, #544]	; (80065dc <SetPerfilTimers+0x28c>)
 80063ba:	ed93 7b00 	vldr	d7, [r3]
 80063be:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80065c0 <SetPerfilTimers+0x270>
 80063c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80063c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ca:	d805      	bhi.n	80063d8 <SetPerfilTimers+0x88>
			rpm2=0.1;
 80063cc:	4983      	ldr	r1, [pc, #524]	; (80065dc <SetPerfilTimers+0x28c>)
 80063ce:	a37c      	add	r3, pc, #496	; (adr r3, 80065c0 <SetPerfilTimers+0x270>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 80063d8:	4b81      	ldr	r3, [pc, #516]	; (80065e0 <SetPerfilTimers+0x290>)
 80063da:	ed93 7b00 	vldr	d7, [r3]
 80063de:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80065c0 <SetPerfilTimers+0x270>
 80063e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80063e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ea:	d805      	bhi.n	80063f8 <SetPerfilTimers+0xa8>
			rpm3=0.1;
 80063ec:	497c      	ldr	r1, [pc, #496]	; (80065e0 <SetPerfilTimers+0x290>)
 80063ee:	a374      	add	r3, pc, #464	; (adr r3, 80065c0 <SetPerfilTimers+0x270>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		rpm1 = 0.5 ;   //HARDCODE PARA HACER PRUEBAS A BAJA VELOCIDAD
 80063f8:	4977      	ldr	r1, [pc, #476]	; (80065d8 <SetPerfilTimers+0x288>)
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	4b79      	ldr	r3, [pc, #484]	; (80065e4 <SetPerfilTimers+0x294>)
 8006400:	e9c1 2300 	strd	r2, r3, [r1]
		rpm2 = 0.5 ;
 8006404:	4975      	ldr	r1, [pc, #468]	; (80065dc <SetPerfilTimers+0x28c>)
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	4b76      	ldr	r3, [pc, #472]	; (80065e4 <SetPerfilTimers+0x294>)
 800640c:	e9c1 2300 	strd	r2, r3, [r1]
		rpm3 = 0.5 ;
 8006410:	4973      	ldr	r1, [pc, #460]	; (80065e0 <SetPerfilTimers+0x290>)
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	4b73      	ldr	r3, [pc, #460]	; (80065e4 <SetPerfilTimers+0x294>)
 8006418:	e9c1 2300 	strd	r2, r3, [r1]


		periodoM[0] = (((FCL * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * STEPREV)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 800641c:	4b72      	ldr	r3, [pc, #456]	; (80065e8 <SetPerfilTimers+0x298>)
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	ee07 3a90 	vmov	s15, r3
 8006424:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006428:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800642c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006430:	4b69      	ldr	r3, [pc, #420]	; (80065d8 <SetPerfilTimers+0x288>)
 8006432:	ed93 7b00 	vldr	d7, [r3]
 8006436:	ee26 7b07 	vmul.f64	d7, d6, d7
 800643a:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80065c8 <SetPerfilTimers+0x278>
 800643e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006442:	ed9f 5b63 	vldr	d5, [pc, #396]	; 80065d0 <SetPerfilTimers+0x280>
 8006446:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800644a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800644e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006452:	4b66      	ldr	r3, [pc, #408]	; (80065ec <SetPerfilTimers+0x29c>)
 8006454:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((FCL * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * STEPREV)) - 1.00);
 8006458:	4b65      	ldr	r3, [pc, #404]	; (80065f0 <SetPerfilTimers+0x2a0>)
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	ee07 3a90 	vmov	s15, r3
 8006460:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006464:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006468:	ee37 6b06 	vadd.f64	d6, d7, d6
 800646c:	4b5b      	ldr	r3, [pc, #364]	; (80065dc <SetPerfilTimers+0x28c>)
 800646e:	ed93 7b00 	vldr	d7, [r3]
 8006472:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006476:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80065c8 <SetPerfilTimers+0x278>
 800647a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800647e:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80065d0 <SetPerfilTimers+0x280>
 8006482:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006486:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800648a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800648e:	4b57      	ldr	r3, [pc, #348]	; (80065ec <SetPerfilTimers+0x29c>)
 8006490:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((FCL * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * STEPREV)) - 1.00);
 8006494:	4b57      	ldr	r3, [pc, #348]	; (80065f4 <SetPerfilTimers+0x2a4>)
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80064a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064a4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80064a8:	4b4d      	ldr	r3, [pc, #308]	; (80065e0 <SetPerfilTimers+0x290>)
 80064aa:	ed93 7b00 	vldr	d7, [r3]
 80064ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80064b2:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80065c8 <SetPerfilTimers+0x278>
 80064b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064ba:	ed9f 5b45 	vldr	d5, [pc, #276]	; 80065d0 <SetPerfilTimers+0x280>
 80064be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80064c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80064ca:	4b48      	ldr	r3, [pc, #288]	; (80065ec <SetPerfilTimers+0x29c>)
 80064cc:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	e0ad      	b.n	8006632 <SetPerfilTimers+0x2e2>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 80064d6:	4a45      	ldr	r2, [pc, #276]	; (80065ec <SetPerfilTimers+0x29c>)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	ed93 6b00 	vldr	d6, [r3]
 80064e2:	4a42      	ldr	r2, [pc, #264]	; (80065ec <SetPerfilTimers+0x29c>)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4413      	add	r3, r2
 80064ea:	ed93 7b00 	vldr	d7, [r3]
 80064ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80064f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80064f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80064fa:	4a3f      	ldr	r2, [pc, #252]	; (80065f8 <SetPerfilTimers+0x2a8>)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4413      	add	r3, r2
 8006502:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 8006506:	4a3d      	ldr	r2, [pc, #244]	; (80065fc <SetPerfilTimers+0x2ac>)
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	ed93 6b00 	vldr	d6, [r3]
 8006512:	4a39      	ldr	r2, [pc, #228]	; (80065f8 <SetPerfilTimers+0x2a8>)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4413      	add	r3, r2
 800651a:	ed93 7b00 	vldr	d7, [r3]
 800651e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006522:	4a36      	ldr	r2, [pc, #216]	; (80065fc <SetPerfilTimers+0x2ac>)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	4413      	add	r3, r2
 800652a:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 800652e:	4a33      	ldr	r2, [pc, #204]	; (80065fc <SetPerfilTimers+0x2ac>)
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4413      	add	r3, r2
 8006536:	ed93 7b00 	vldr	d7, [r3]
 800653a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800653e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006546:	dd1f      	ble.n	8006588 <SetPerfilTimers+0x238>
				periodoM[i] = periodoM[i] + 1;
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <SetPerfilTimers+0x29c>)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	4413      	add	r3, r2
 8006550:	ed93 7b00 	vldr	d7, [r3]
 8006554:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006558:	ee37 7b06 	vadd.f64	d7, d7, d6
 800655c:	4a23      	ldr	r2, [pc, #140]	; (80065ec <SetPerfilTimers+0x29c>)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4413      	add	r3, r2
 8006564:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 8006568:	4a24      	ldr	r2, [pc, #144]	; (80065fc <SetPerfilTimers+0x2ac>)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	ed93 7b00 	vldr	d7, [r3]
 8006574:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006578:	ee37 7b46 	vsub.f64	d7, d7, d6
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <SetPerfilTimers+0x2ac>)
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 8006588:	4a18      	ldr	r2, [pc, #96]	; (80065ec <SetPerfilTimers+0x29c>)
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	4413      	add	r3, r2
 8006590:	ed93 7b00 	vldr	d7, [r3]
 8006594:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8006598:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800659c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a0:	d52e      	bpl.n	8006600 <SetPerfilTimers+0x2b0>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 80065a2:	4a12      	ldr	r2, [pc, #72]	; (80065ec <SetPerfilTimers+0x29c>)
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	18d1      	adds	r1, r2, r3
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	e9c1 2300 	strd	r2, r3, [r1]
 80065b6:	e039      	b.n	800662c <SetPerfilTimers+0x2dc>
 80065b8:	66ed2a99 	.word	0x66ed2a99
 80065bc:	4023193d 	.word	0x4023193d
 80065c0:	9999999a 	.word	0x9999999a
 80065c4:	3fb99999 	.word	0x3fb99999
 80065c8:	00000000 	.word	0x00000000
 80065cc:	40bf4000 	.word	0x40bf4000
 80065d0:	00000000 	.word	0x00000000
 80065d4:	41ec9c38 	.word	0x41ec9c38
 80065d8:	240007a8 	.word	0x240007a8
 80065dc:	240007b0 	.word	0x240007b0
 80065e0:	240007b8 	.word	0x240007b8
 80065e4:	3fe00000 	.word	0x3fe00000
 80065e8:	40001800 	.word	0x40001800
 80065ec:	24000778 	.word	0x24000778
 80065f0:	40001c00 	.word	0x40001c00
 80065f4:	40002000 	.word	0x40002000
 80065f8:	240007c0 	.word	0x240007c0
 80065fc:	240007d8 	.word	0x240007d8
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 8006600:	4a99      	ldr	r2, [pc, #612]	; (8006868 <SetPerfilTimers+0x518>)
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4413      	add	r3, r2
 8006608:	ed93 7b00 	vldr	d7, [r3]
 800660c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8006850 <SetPerfilTimers+0x500>
 8006610:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006618:	dd08      	ble.n	800662c <SetPerfilTimers+0x2dc>
				periodoM[i] = pow(2, 16);
 800661a:	4a93      	ldr	r2, [pc, #588]	; (8006868 <SetPerfilTimers+0x518>)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	18d1      	adds	r1, r2, r3
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	4b91      	ldr	r3, [pc, #580]	; (800686c <SetPerfilTimers+0x51c>)
 8006628:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	3301      	adds	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b02      	cmp	r3, #2
 8006636:	f77f af4e 	ble.w	80064d6 <SetPerfilTimers+0x186>
			}
		}

			periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * STEPREV)) - 1.0);
 800663a:	4b8d      	ldr	r3, [pc, #564]	; (8006870 <SetPerfilTimers+0x520>)
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006646:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800664a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800664e:	4b89      	ldr	r3, [pc, #548]	; (8006874 <SetPerfilTimers+0x524>)
 8006650:	ed93 7b00 	vldr	d7, [r3]
 8006654:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006658:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8006858 <SetPerfilTimers+0x508>
 800665c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006660:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8006860 <SetPerfilTimers+0x510>
 8006664:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006668:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800666c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006670:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006674:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006678:	4b7b      	ldr	r3, [pc, #492]	; (8006868 <SetPerfilTimers+0x518>)
 800667a:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * STEPREV)) - 1.0);
 800667e:	4b7e      	ldr	r3, [pc, #504]	; (8006878 <SetPerfilTimers+0x528>)
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800668a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800668e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006692:	4b7a      	ldr	r3, [pc, #488]	; (800687c <SetPerfilTimers+0x52c>)
 8006694:	ed93 7b00 	vldr	d7, [r3]
 8006698:	ee26 7b07 	vmul.f64	d7, d6, d7
 800669c:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8006858 <SetPerfilTimers+0x508>
 80066a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80066a4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8006860 <SetPerfilTimers+0x510>
 80066a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80066ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80066bc:	4b6a      	ldr	r3, [pc, #424]	; (8006868 <SetPerfilTimers+0x518>)
 80066be:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * STEPREV)) - 1.0);
 80066c2:	4b6f      	ldr	r3, [pc, #444]	; (8006880 <SetPerfilTimers+0x530>)
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80066ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066d2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80066d6:	4b6b      	ldr	r3, [pc, #428]	; (8006884 <SetPerfilTimers+0x534>)
 80066d8:	ed93 7b00 	vldr	d7, [r3]
 80066dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80066e0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8006858 <SetPerfilTimers+0x508>
 80066e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80066e8:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8006860 <SetPerfilTimers+0x510>
 80066ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80066f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006700:	4b59      	ldr	r3, [pc, #356]	; (8006868 <SetPerfilTimers+0x518>)
 8006702:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 8006706:	4b5a      	ldr	r3, [pc, #360]	; (8006870 <SetPerfilTimers+0x520>)
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006712:	4b55      	ldr	r3, [pc, #340]	; (8006868 <SetPerfilTimers+0x518>)
 8006714:	ed93 7b00 	vldr	d7, [r3]
 8006718:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006720:	dd0c      	ble.n	800673c <SetPerfilTimers+0x3ec>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006722:	4b51      	ldr	r3, [pc, #324]	; (8006868 <SetPerfilTimers+0x518>)
 8006724:	ed93 7b00 	vldr	d7, [r3]
 8006728:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800672c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006730:	4b4f      	ldr	r3, [pc, #316]	; (8006870 <SetPerfilTimers+0x520>)
 8006732:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006736:	ee17 2a90 	vmov	r2, s15
 800673a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 800673c:	4b4e      	ldr	r3, [pc, #312]	; (8006878 <SetPerfilTimers+0x528>)
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	ee07 3a90 	vmov	s15, r3
 8006744:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006748:	4b47      	ldr	r3, [pc, #284]	; (8006868 <SetPerfilTimers+0x518>)
 800674a:	ed93 7b02 	vldr	d7, [r3, #8]
 800674e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006756:	dd0c      	ble.n	8006772 <SetPerfilTimers+0x422>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006758:	4b43      	ldr	r3, [pc, #268]	; (8006868 <SetPerfilTimers+0x518>)
 800675a:	ed93 7b02 	vldr	d7, [r3, #8]
 800675e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006762:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006766:	4b44      	ldr	r3, [pc, #272]	; (8006878 <SetPerfilTimers+0x528>)
 8006768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800676c:	ee17 2a90 	vmov	r2, s15
 8006770:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 8006772:	4b43      	ldr	r3, [pc, #268]	; (8006880 <SetPerfilTimers+0x530>)
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800677e:	4b3a      	ldr	r3, [pc, #232]	; (8006868 <SetPerfilTimers+0x518>)
 8006780:	ed93 7b04 	vldr	d7, [r3, #16]
 8006784:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678c:	dd0c      	ble.n	80067a8 <SetPerfilTimers+0x458>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <SetPerfilTimers+0x518>)
 8006790:	ed93 7b04 	vldr	d7, [r3, #16]
 8006794:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006798:	ee37 7b46 	vsub.f64	d7, d7, d6
 800679c:	4b38      	ldr	r3, [pc, #224]	; (8006880 <SetPerfilTimers+0x530>)
 800679e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067a2:	ee17 2a90 	vmov	r2, s15
 80067a6:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 80067a8:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <SetPerfilTimers+0x518>)
 80067aa:	ed93 7b00 	vldr	d7, [r3]
 80067ae:	4b30      	ldr	r3, [pc, #192]	; (8006870 <SetPerfilTimers+0x520>)
 80067b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067b4:	ee17 2a90 	vmov	r2, s15
 80067b8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80067ba:	4b2d      	ldr	r3, [pc, #180]	; (8006870 <SetPerfilTimers+0x520>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80067c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067ce:	4b28      	ldr	r3, [pc, #160]	; (8006870 <SetPerfilTimers+0x520>)
 80067d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067d4:	ee17 2a90 	vmov	r2, s15
 80067d8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 80067da:	4b23      	ldr	r3, [pc, #140]	; (8006868 <SetPerfilTimers+0x518>)
 80067dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80067e0:	4b25      	ldr	r3, [pc, #148]	; (8006878 <SetPerfilTimers+0x528>)
 80067e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067e6:	ee17 2a90 	vmov	r2, s15
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80067ec:	4b22      	ldr	r3, [pc, #136]	; (8006878 <SetPerfilTimers+0x528>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80067f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006800:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <SetPerfilTimers+0x528>)
 8006802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006806:	ee17 2a90 	vmov	r2, s15
 800680a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 800680c:	4b16      	ldr	r3, [pc, #88]	; (8006868 <SetPerfilTimers+0x518>)
 800680e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006812:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <SetPerfilTimers+0x530>)
 8006814:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006818:	ee17 2a90 	vmov	r2, s15
 800681c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 800681e:	4b18      	ldr	r3, [pc, #96]	; (8006880 <SetPerfilTimers+0x530>)
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800682a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800682e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <SetPerfilTimers+0x530>)
 8006834:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006838:	ee17 2a90 	vmov	r2, s15
 800683c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 800683e:	bf00      	nop
 8006840:	3724      	adds	r7, #36	; 0x24
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	f3af 8000 	nop.w
 8006850:	00000000 	.word	0x00000000
 8006854:	40f00000 	.word	0x40f00000
 8006858:	00000000 	.word	0x00000000
 800685c:	40bf4000 	.word	0x40bf4000
 8006860:	00000000 	.word	0x00000000
 8006864:	41ec9c38 	.word	0x41ec9c38
 8006868:	24000778 	.word	0x24000778
 800686c:	40f00000 	.word	0x40f00000
 8006870:	40001800 	.word	0x40001800
 8006874:	240007a8 	.word	0x240007a8
 8006878:	40001c00 	.word	0x40001c00
 800687c:	240007b0 	.word	0x240007b0
 8006880:	40002000 	.word	0x40002000
 8006884:	240007b8 	.word	0x240007b8

08006888 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800688c:	4b22      	ldr	r3, [pc, #136]	; (8006918 <MX_USART1_UART_Init+0x90>)
 800688e:	4a23      	ldr	r2, [pc, #140]	; (800691c <MX_USART1_UART_Init+0x94>)
 8006890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006892:	4b21      	ldr	r3, [pc, #132]	; (8006918 <MX_USART1_UART_Init+0x90>)
 8006894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800689a:	4b1f      	ldr	r3, [pc, #124]	; (8006918 <MX_USART1_UART_Init+0x90>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80068a0:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80068a6:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068ae:	220c      	movs	r2, #12
 80068b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068b2:	4b19      	ldr	r3, [pc, #100]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80068b8:	4b17      	ldr	r3, [pc, #92]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068be:	4b16      	ldr	r3, [pc, #88]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068c4:	4b14      	ldr	r3, [pc, #80]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80068d0:	4811      	ldr	r0, [pc, #68]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068d2:	f006 f8ff 	bl	800cad4 <HAL_UART_Init>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80068dc:	f7fd f832 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068e0:	2100      	movs	r1, #0
 80068e2:	480d      	ldr	r0, [pc, #52]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068e4:	f008 fb89 	bl	800effa <HAL_UARTEx_SetTxFifoThreshold>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80068ee:	f7fd f829 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068f2:	2100      	movs	r1, #0
 80068f4:	4808      	ldr	r0, [pc, #32]	; (8006918 <MX_USART1_UART_Init+0x90>)
 80068f6:	f008 fbbe 	bl	800f076 <HAL_UARTEx_SetRxFifoThreshold>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006900:	f7fd f820 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006904:	4804      	ldr	r0, [pc, #16]	; (8006918 <MX_USART1_UART_Init+0x90>)
 8006906:	f008 fb3f 	bl	800ef88 <HAL_UARTEx_DisableFifoMode>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006910:	f7fd f818 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006914:	bf00      	nop
 8006916:	bd80      	pop	{r7, pc}
 8006918:	24000adc 	.word	0x24000adc
 800691c:	40011000 	.word	0x40011000

08006920 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006924:	4b22      	ldr	r3, [pc, #136]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 8006926:	4a23      	ldr	r2, [pc, #140]	; (80069b4 <MX_USART2_UART_Init+0x94>)
 8006928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800692a:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800692c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006932:	4b1f      	ldr	r3, [pc, #124]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 8006934:	2200      	movs	r2, #0
 8006936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006938:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800693a:	2200      	movs	r2, #0
 800693c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800693e:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 8006940:	2200      	movs	r2, #0
 8006942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006944:	4b1a      	ldr	r3, [pc, #104]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 8006946:	220c      	movs	r2, #12
 8006948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800694c:	2200      	movs	r2, #0
 800694e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006950:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 8006952:	2200      	movs	r2, #0
 8006954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006956:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 8006958:	2200      	movs	r2, #0
 800695a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800695c:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800695e:	2200      	movs	r2, #0
 8006960:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006962:	4b13      	ldr	r3, [pc, #76]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 8006964:	2200      	movs	r2, #0
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006968:	4811      	ldr	r0, [pc, #68]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800696a:	f006 f8b3 	bl	800cad4 <HAL_UART_Init>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006974:	f7fc ffe6 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006978:	2100      	movs	r1, #0
 800697a:	480d      	ldr	r0, [pc, #52]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800697c:	f008 fb3d 	bl	800effa <HAL_UARTEx_SetTxFifoThreshold>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006986:	f7fc ffdd 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800698a:	2100      	movs	r1, #0
 800698c:	4808      	ldr	r0, [pc, #32]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800698e:	f008 fb72 	bl	800f076 <HAL_UARTEx_SetRxFifoThreshold>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006998:	f7fc ffd4 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800699c:	4804      	ldr	r0, [pc, #16]	; (80069b0 <MX_USART2_UART_Init+0x90>)
 800699e:	f008 faf3 	bl	800ef88 <HAL_UARTEx_DisableFifoMode>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80069a8:	f7fc ffcc 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80069ac:	bf00      	nop
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	24000b6c 	.word	0x24000b6c
 80069b4:	40004400 	.word	0x40004400

080069b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80069bc:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069be:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <MX_USART3_UART_Init+0x94>)
 80069c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80069c2:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80069c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80069ca:	4b1f      	ldr	r3, [pc, #124]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80069d0:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069d8:	2200      	movs	r2, #0
 80069da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069de:	220c      	movs	r2, #12
 80069e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069e2:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80069e8:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80069ee:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80069f4:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006a00:	4811      	ldr	r0, [pc, #68]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 8006a02:	f006 f867 	bl	800cad4 <HAL_UART_Init>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006a0c:	f7fc ff9a 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a10:	2100      	movs	r1, #0
 8006a12:	480d      	ldr	r0, [pc, #52]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 8006a14:	f008 faf1 	bl	800effa <HAL_UARTEx_SetTxFifoThreshold>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006a1e:	f7fc ff91 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a22:	2100      	movs	r1, #0
 8006a24:	4808      	ldr	r0, [pc, #32]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 8006a26:	f008 fb26 	bl	800f076 <HAL_UARTEx_SetRxFifoThreshold>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006a30:	f7fc ff88 	bl	8003944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006a34:	4804      	ldr	r0, [pc, #16]	; (8006a48 <MX_USART3_UART_Init+0x90>)
 8006a36:	f008 faa7 	bl	800ef88 <HAL_UARTEx_DisableFifoMode>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006a40:	f7fc ff80 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006a44:	bf00      	nop
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	24000bfc 	.word	0x24000bfc
 8006a4c:	40004800 	.word	0x40004800

08006a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b0be      	sub	sp, #248	; 0xf8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a6c:	22bc      	movs	r2, #188	; 0xbc
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f008 fbc5 	bl	800f200 <memset>
  if(uartHandle->Instance==USART1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a84      	ldr	r2, [pc, #528]	; (8006c8c <HAL_UART_MspInit+0x23c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d168      	bne.n	8006b52 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006a80:	2301      	movs	r3, #1
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f002 fa8c 	bl	8008fac <HAL_RCCEx_PeriphCLKConfig>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006a9a:	f7fc ff53 	bl	8003944 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a9e:	4b7c      	ldr	r3, [pc, #496]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aa4:	4a7a      	ldr	r2, [pc, #488]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006aa6:	f043 0310 	orr.w	r3, r3, #16
 8006aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006aae:	4b78      	ldr	r3, [pc, #480]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006abc:	4b74      	ldr	r3, [pc, #464]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ac2:	4a73      	ldr	r2, [pc, #460]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006acc:	4b70      	ldr	r3, [pc, #448]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	623b      	str	r3, [r7, #32]
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ada:	4b6d      	ldr	r3, [pc, #436]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ae0:	4a6b      	ldr	r2, [pc, #428]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006aea:	4b69      	ldr	r3, [pc, #420]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b00:	2302      	movs	r3, #2
 8006b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006b12:	2304      	movs	r3, #4
 8006b14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006b18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	485d      	ldr	r0, [pc, #372]	; (8006c94 <HAL_UART_MspInit+0x244>)
 8006b20:	f001 f854 	bl	8007bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006b3e:	2307      	movs	r3, #7
 8006b40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006b44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4853      	ldr	r0, [pc, #332]	; (8006c98 <HAL_UART_MspInit+0x248>)
 8006b4c:	f001 f83e 	bl	8007bcc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006b50:	e097      	b.n	8006c82 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a51      	ldr	r2, [pc, #324]	; (8006c9c <HAL_UART_MspInit+0x24c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d142      	bne.n	8006be2 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006b60:	2300      	movs	r3, #0
 8006b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f002 fa1e 	bl	8008fac <HAL_RCCEx_PeriphCLKConfig>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006b76:	f7fc fee5 	bl	8003944 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b7a:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b80:	4a43      	ldr	r2, [pc, #268]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b8a:	4b41      	ldr	r3, [pc, #260]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b98:	4b3d      	ldr	r3, [pc, #244]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b9e:	4a3c      	ldr	r2, [pc, #240]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ba8:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006bce:	2307      	movs	r3, #7
 8006bd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	482f      	ldr	r0, [pc, #188]	; (8006c98 <HAL_UART_MspInit+0x248>)
 8006bdc:	f000 fff6 	bl	8007bcc <HAL_GPIO_Init>
}
 8006be0:	e04f      	b.n	8006c82 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2e      	ldr	r2, [pc, #184]	; (8006ca0 <HAL_UART_MspInit+0x250>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d14a      	bne.n	8006c82 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006bec:	2302      	movs	r3, #2
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f002 f9d6 	bl	8008fac <HAL_RCCEx_PeriphCLKConfig>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006c06:	f7fc fe9d 	bl	8003944 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c0a:	4b21      	ldr	r3, [pc, #132]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c10:	4a1f      	ldr	r2, [pc, #124]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c28:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c2e:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c38:	4b15      	ldr	r3, [pc, #84]	; (8006c90 <HAL_UART_MspInit+0x240>)
 8006c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006c46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c60:	2307      	movs	r3, #7
 8006c62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	480d      	ldr	r0, [pc, #52]	; (8006ca4 <HAL_UART_MspInit+0x254>)
 8006c6e:	f000 ffad 	bl	8007bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006c72:	2201      	movs	r2, #1
 8006c74:	2101      	movs	r1, #1
 8006c76:	2027      	movs	r0, #39	; 0x27
 8006c78:	f000 fa01 	bl	800707e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006c7c:	2027      	movs	r0, #39	; 0x27
 8006c7e:	f000 fa18 	bl	80070b2 <HAL_NVIC_EnableIRQ>
}
 8006c82:	bf00      	nop
 8006c84:	37f8      	adds	r7, #248	; 0xf8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40011000 	.word	0x40011000
 8006c90:	58024400 	.word	0x58024400
 8006c94:	58020400 	.word	0x58020400
 8006c98:	58020000 	.word	0x58020000
 8006c9c:	40004400 	.word	0x40004400
 8006ca0:	40004800 	.word	0x40004800
 8006ca4:	58020c00 	.word	0x58020c00

08006ca8 <Reset_Handler>:
 8006ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ce0 <LoopFillZerobss+0x14>
 8006cac:	2100      	movs	r1, #0
 8006cae:	e003      	b.n	8006cb8 <LoopCopyDataInit>

08006cb0 <CopyDataInit>:
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <LoopFillZerobss+0x18>)
 8006cb2:	585b      	ldr	r3, [r3, r1]
 8006cb4:	5043      	str	r3, [r0, r1]
 8006cb6:	3104      	adds	r1, #4

08006cb8 <LoopCopyDataInit>:
 8006cb8:	480b      	ldr	r0, [pc, #44]	; (8006ce8 <LoopFillZerobss+0x1c>)
 8006cba:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <LoopFillZerobss+0x20>)
 8006cbc:	1842      	adds	r2, r0, r1
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d3f6      	bcc.n	8006cb0 <CopyDataInit>
 8006cc2:	4a0b      	ldr	r2, [pc, #44]	; (8006cf0 <LoopFillZerobss+0x24>)
 8006cc4:	e002      	b.n	8006ccc <LoopFillZerobss>

08006cc6 <FillZerobss>:
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f842 3b04 	str.w	r3, [r2], #4

08006ccc <LoopFillZerobss>:
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <LoopFillZerobss+0x28>)
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d3f9      	bcc.n	8006cc6 <FillZerobss>
 8006cd2:	f7fd f9ed 	bl	80040b0 <SystemInit>
 8006cd6:	f008 fa61 	bl	800f19c <__libc_init_array>
 8006cda:	f7fc f9ef 	bl	80030bc <main>
 8006cde:	4770      	bx	lr
 8006ce0:	24080000 	.word	0x24080000
 8006ce4:	080144f8 	.word	0x080144f8
 8006ce8:	24000000 	.word	0x24000000
 8006cec:	240002d4 	.word	0x240002d4
 8006cf0:	240002d8 	.word	0x240002d8
 8006cf4:	24000ca0 	.word	0x24000ca0

08006cf8 <ADC3_IRQHandler>:
 8006cf8:	e7fe      	b.n	8006cf8 <ADC3_IRQHandler>
	...

08006cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d02:	2003      	movs	r0, #3
 8006d04:	f000 f9b0 	bl	8007068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d08:	f001 ff7a 	bl	8008c00 <HAL_RCC_GetSysClockFreq>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4b15      	ldr	r3, [pc, #84]	; (8006d64 <HAL_Init+0x68>)
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	4913      	ldr	r1, [pc, #76]	; (8006d68 <HAL_Init+0x6c>)
 8006d1a:	5ccb      	ldrb	r3, [r1, r3]
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d26:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <HAL_Init+0x68>)
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	4a0e      	ldr	r2, [pc, #56]	; (8006d68 <HAL_Init+0x6c>)
 8006d30:	5cd3      	ldrb	r3, [r2, r3]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	4a0b      	ldr	r2, [pc, #44]	; (8006d6c <HAL_Init+0x70>)
 8006d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d40:	4a0b      	ldr	r2, [pc, #44]	; (8006d70 <HAL_Init+0x74>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d46:	2000      	movs	r0, #0
 8006d48:	f000 f814 	bl	8006d74 <HAL_InitTick>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e002      	b.n	8006d5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006d56:	f7fd f831 	bl	8003dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	58024400 	.word	0x58024400
 8006d68:	080127c8 	.word	0x080127c8
 8006d6c:	240000f4 	.word	0x240000f4
 8006d70:	240000f0 	.word	0x240000f0

08006d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006d7c:	4b15      	ldr	r3, [pc, #84]	; (8006dd4 <HAL_InitTick+0x60>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e021      	b.n	8006dcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006d88:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <HAL_InitTick+0x64>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b11      	ldr	r3, [pc, #68]	; (8006dd4 <HAL_InitTick+0x60>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	4619      	mov	r1, r3
 8006d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f9a3 	bl	80070ea <HAL_SYSTICK_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e00e      	b.n	8006dcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d80a      	bhi.n	8006dca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006db4:	2200      	movs	r2, #0
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	f000 f95f 	bl	800707e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006dc0:	4a06      	ldr	r2, [pc, #24]	; (8006ddc <HAL_InitTick+0x68>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e000      	b.n	8006dcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	240000fc 	.word	0x240000fc
 8006dd8:	240000f0 	.word	0x240000f0
 8006ddc:	240000f8 	.word	0x240000f8

08006de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <HAL_IncTick+0x20>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_IncTick+0x24>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4413      	add	r3, r2
 8006df0:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <HAL_IncTick+0x24>)
 8006df2:	6013      	str	r3, [r2, #0]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	240000fc 	.word	0x240000fc
 8006e04:	24000c8c 	.word	0x24000c8c

08006e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8006e0c:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <HAL_GetTick+0x14>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	24000c8c 	.word	0x24000c8c

08006e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e28:	f7ff ffee 	bl	8006e08 <HAL_GetTick>
 8006e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d005      	beq.n	8006e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <HAL_Delay+0x44>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e46:	bf00      	nop
 8006e48:	f7ff ffde 	bl	8006e08 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d8f7      	bhi.n	8006e48 <HAL_Delay+0x28>
  {
  }
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	240000fc 	.word	0x240000fc

08006e68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006e6c:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <HAL_GetREVID+0x14>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	0c1b      	lsrs	r3, r3, #16
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	5c001000 	.word	0x5c001000

08006e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006eae:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	60d3      	str	r3, [r2, #12]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	e000ed00 	.word	0xe000ed00
 8006ec4:	05fa0000 	.word	0x05fa0000

08006ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	0a1b      	lsrs	r3, r3, #8
 8006ed2:	f003 0307 	and.w	r3, r3, #7
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	e000ed00 	.word	0xe000ed00

08006ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	db0b      	blt.n	8006f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	f003 021f 	and.w	r2, r3, #31
 8006efc:	4907      	ldr	r1, [pc, #28]	; (8006f1c <__NVIC_EnableIRQ+0x38>)
 8006efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	2001      	movs	r0, #1
 8006f06:	fa00 f202 	lsl.w	r2, r0, r2
 8006f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	e000e100 	.word	0xe000e100

08006f20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	db12      	blt.n	8006f58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	f003 021f 	and.w	r2, r3, #31
 8006f38:	490a      	ldr	r1, [pc, #40]	; (8006f64 <__NVIC_DisableIRQ+0x44>)
 8006f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	2001      	movs	r0, #1
 8006f42:	fa00 f202 	lsl.w	r2, r0, r2
 8006f46:	3320      	adds	r3, #32
 8006f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f4c:	f3bf 8f4f 	dsb	sy
}
 8006f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f52:	f3bf 8f6f 	isb	sy
}
 8006f56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	e000e100 	.word	0xe000e100

08006f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	db0a      	blt.n	8006f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	490c      	ldr	r1, [pc, #48]	; (8006fb4 <__NVIC_SetPriority+0x4c>)
 8006f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f86:	0112      	lsls	r2, r2, #4
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f90:	e00a      	b.n	8006fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	4908      	ldr	r1, [pc, #32]	; (8006fb8 <__NVIC_SetPriority+0x50>)
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	0112      	lsls	r2, r2, #4
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	761a      	strb	r2, [r3, #24]
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	e000e100 	.word	0xe000e100
 8006fb8:	e000ed00 	.word	0xe000ed00

08006fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b089      	sub	sp, #36	; 0x24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f1c3 0307 	rsb	r3, r3, #7
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	bf28      	it	cs
 8006fda:	2304      	movcs	r3, #4
 8006fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	2b06      	cmp	r3, #6
 8006fe4:	d902      	bls.n	8006fec <NVIC_EncodePriority+0x30>
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	3b03      	subs	r3, #3
 8006fea:	e000      	b.n	8006fee <NVIC_EncodePriority+0x32>
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	43da      	mvns	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	401a      	ands	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007004:	f04f 31ff 	mov.w	r1, #4294967295
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	fa01 f303 	lsl.w	r3, r1, r3
 800700e:	43d9      	mvns	r1, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007014:	4313      	orrs	r3, r2
         );
}
 8007016:	4618      	mov	r0, r3
 8007018:	3724      	adds	r7, #36	; 0x24
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3b01      	subs	r3, #1
 8007030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007034:	d301      	bcc.n	800703a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007036:	2301      	movs	r3, #1
 8007038:	e00f      	b.n	800705a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800703a:	4a0a      	ldr	r2, [pc, #40]	; (8007064 <SysTick_Config+0x40>)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3b01      	subs	r3, #1
 8007040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007042:	210f      	movs	r1, #15
 8007044:	f04f 30ff 	mov.w	r0, #4294967295
 8007048:	f7ff ff8e 	bl	8006f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <SysTick_Config+0x40>)
 800704e:	2200      	movs	r2, #0
 8007050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <SysTick_Config+0x40>)
 8007054:	2207      	movs	r2, #7
 8007056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	e000e010 	.word	0xe000e010

08007068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff ff05 	bl	8006e80 <__NVIC_SetPriorityGrouping>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	4603      	mov	r3, r0
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
 800708a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800708c:	f7ff ff1c 	bl	8006ec8 <__NVIC_GetPriorityGrouping>
 8007090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	6978      	ldr	r0, [r7, #20]
 8007098:	f7ff ff90 	bl	8006fbc <NVIC_EncodePriority>
 800709c:	4602      	mov	r2, r0
 800709e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff ff5f 	bl	8006f68 <__NVIC_SetPriority>
}
 80070aa:	bf00      	nop
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	4603      	mov	r3, r0
 80070ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff ff0f 	bl	8006ee4 <__NVIC_EnableIRQ>
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	4603      	mov	r3, r0
 80070d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80070d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff ff1f 	bl	8006f20 <__NVIC_DisableIRQ>
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff ff96 	bl	8007024 <SysTick_Config>
 80070f8:	4603      	mov	r3, r0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800710c:	f7ff fe7c 	bl	8006e08 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e2dc      	b.n	80076d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d008      	beq.n	800713a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2280      	movs	r2, #128	; 0x80
 800712c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e2cd      	b.n	80076d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a76      	ldr	r2, [pc, #472]	; (8007318 <HAL_DMA_Abort+0x214>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d04a      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a74      	ldr	r2, [pc, #464]	; (800731c <HAL_DMA_Abort+0x218>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d045      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a73      	ldr	r2, [pc, #460]	; (8007320 <HAL_DMA_Abort+0x21c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d040      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a71      	ldr	r2, [pc, #452]	; (8007324 <HAL_DMA_Abort+0x220>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d03b      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a70      	ldr	r2, [pc, #448]	; (8007328 <HAL_DMA_Abort+0x224>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d036      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a6e      	ldr	r2, [pc, #440]	; (800732c <HAL_DMA_Abort+0x228>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d031      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a6d      	ldr	r2, [pc, #436]	; (8007330 <HAL_DMA_Abort+0x22c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d02c      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a6b      	ldr	r2, [pc, #428]	; (8007334 <HAL_DMA_Abort+0x230>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d027      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a6a      	ldr	r2, [pc, #424]	; (8007338 <HAL_DMA_Abort+0x234>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d022      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a68      	ldr	r2, [pc, #416]	; (800733c <HAL_DMA_Abort+0x238>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01d      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a67      	ldr	r2, [pc, #412]	; (8007340 <HAL_DMA_Abort+0x23c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a65      	ldr	r2, [pc, #404]	; (8007344 <HAL_DMA_Abort+0x240>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a64      	ldr	r2, [pc, #400]	; (8007348 <HAL_DMA_Abort+0x244>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a62      	ldr	r2, [pc, #392]	; (800734c <HAL_DMA_Abort+0x248>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a61      	ldr	r2, [pc, #388]	; (8007350 <HAL_DMA_Abort+0x24c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_DMA_Abort+0xd6>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a5f      	ldr	r2, [pc, #380]	; (8007354 <HAL_DMA_Abort+0x250>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d101      	bne.n	80071de <HAL_DMA_Abort+0xda>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <HAL_DMA_Abort+0xdc>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d013      	beq.n	800720c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 021e 	bic.w	r2, r2, #30
 80071f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007202:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	e00a      	b.n	8007222 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 020e 	bic.w	r2, r2, #14
 800721a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a3c      	ldr	r2, [pc, #240]	; (8007318 <HAL_DMA_Abort+0x214>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d072      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a3a      	ldr	r2, [pc, #232]	; (800731c <HAL_DMA_Abort+0x218>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d06d      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a39      	ldr	r2, [pc, #228]	; (8007320 <HAL_DMA_Abort+0x21c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d068      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a37      	ldr	r2, [pc, #220]	; (8007324 <HAL_DMA_Abort+0x220>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d063      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a36      	ldr	r2, [pc, #216]	; (8007328 <HAL_DMA_Abort+0x224>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d05e      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a34      	ldr	r2, [pc, #208]	; (800732c <HAL_DMA_Abort+0x228>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d059      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a33      	ldr	r2, [pc, #204]	; (8007330 <HAL_DMA_Abort+0x22c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d054      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a31      	ldr	r2, [pc, #196]	; (8007334 <HAL_DMA_Abort+0x230>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d04f      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a30      	ldr	r2, [pc, #192]	; (8007338 <HAL_DMA_Abort+0x234>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d04a      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2e      	ldr	r2, [pc, #184]	; (800733c <HAL_DMA_Abort+0x238>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d045      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2d      	ldr	r2, [pc, #180]	; (8007340 <HAL_DMA_Abort+0x23c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d040      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a2b      	ldr	r2, [pc, #172]	; (8007344 <HAL_DMA_Abort+0x240>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d03b      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a2a      	ldr	r2, [pc, #168]	; (8007348 <HAL_DMA_Abort+0x244>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d036      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a28      	ldr	r2, [pc, #160]	; (800734c <HAL_DMA_Abort+0x248>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d031      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a27      	ldr	r2, [pc, #156]	; (8007350 <HAL_DMA_Abort+0x24c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d02c      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a25      	ldr	r2, [pc, #148]	; (8007354 <HAL_DMA_Abort+0x250>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d027      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a24      	ldr	r2, [pc, #144]	; (8007358 <HAL_DMA_Abort+0x254>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d022      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a22      	ldr	r2, [pc, #136]	; (800735c <HAL_DMA_Abort+0x258>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d01d      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a21      	ldr	r2, [pc, #132]	; (8007360 <HAL_DMA_Abort+0x25c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d018      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <HAL_DMA_Abort+0x260>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d013      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <HAL_DMA_Abort+0x264>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00e      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1c      	ldr	r2, [pc, #112]	; (800736c <HAL_DMA_Abort+0x268>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d009      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <HAL_DMA_Abort+0x26c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d004      	beq.n	8007312 <HAL_DMA_Abort+0x20e>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a19      	ldr	r2, [pc, #100]	; (8007374 <HAL_DMA_Abort+0x270>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d132      	bne.n	8007378 <HAL_DMA_Abort+0x274>
 8007312:	2301      	movs	r3, #1
 8007314:	e031      	b.n	800737a <HAL_DMA_Abort+0x276>
 8007316:	bf00      	nop
 8007318:	40020010 	.word	0x40020010
 800731c:	40020028 	.word	0x40020028
 8007320:	40020040 	.word	0x40020040
 8007324:	40020058 	.word	0x40020058
 8007328:	40020070 	.word	0x40020070
 800732c:	40020088 	.word	0x40020088
 8007330:	400200a0 	.word	0x400200a0
 8007334:	400200b8 	.word	0x400200b8
 8007338:	40020410 	.word	0x40020410
 800733c:	40020428 	.word	0x40020428
 8007340:	40020440 	.word	0x40020440
 8007344:	40020458 	.word	0x40020458
 8007348:	40020470 	.word	0x40020470
 800734c:	40020488 	.word	0x40020488
 8007350:	400204a0 	.word	0x400204a0
 8007354:	400204b8 	.word	0x400204b8
 8007358:	58025408 	.word	0x58025408
 800735c:	5802541c 	.word	0x5802541c
 8007360:	58025430 	.word	0x58025430
 8007364:	58025444 	.word	0x58025444
 8007368:	58025458 	.word	0x58025458
 800736c:	5802546c 	.word	0x5802546c
 8007370:	58025480 	.word	0x58025480
 8007374:	58025494 	.word	0x58025494
 8007378:	2300      	movs	r3, #0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800738c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a6d      	ldr	r2, [pc, #436]	; (8007548 <HAL_DMA_Abort+0x444>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d04a      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6b      	ldr	r2, [pc, #428]	; (800754c <HAL_DMA_Abort+0x448>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d045      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a6a      	ldr	r2, [pc, #424]	; (8007550 <HAL_DMA_Abort+0x44c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d040      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a68      	ldr	r2, [pc, #416]	; (8007554 <HAL_DMA_Abort+0x450>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d03b      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a67      	ldr	r2, [pc, #412]	; (8007558 <HAL_DMA_Abort+0x454>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d036      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a65      	ldr	r2, [pc, #404]	; (800755c <HAL_DMA_Abort+0x458>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d031      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a64      	ldr	r2, [pc, #400]	; (8007560 <HAL_DMA_Abort+0x45c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d02c      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a62      	ldr	r2, [pc, #392]	; (8007564 <HAL_DMA_Abort+0x460>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d027      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a61      	ldr	r2, [pc, #388]	; (8007568 <HAL_DMA_Abort+0x464>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d022      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5f      	ldr	r2, [pc, #380]	; (800756c <HAL_DMA_Abort+0x468>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d01d      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a5e      	ldr	r2, [pc, #376]	; (8007570 <HAL_DMA_Abort+0x46c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d018      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a5c      	ldr	r2, [pc, #368]	; (8007574 <HAL_DMA_Abort+0x470>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a5b      	ldr	r2, [pc, #364]	; (8007578 <HAL_DMA_Abort+0x474>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00e      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a59      	ldr	r2, [pc, #356]	; (800757c <HAL_DMA_Abort+0x478>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d009      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a58      	ldr	r2, [pc, #352]	; (8007580 <HAL_DMA_Abort+0x47c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <HAL_DMA_Abort+0x32a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a56      	ldr	r2, [pc, #344]	; (8007584 <HAL_DMA_Abort+0x480>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d108      	bne.n	8007440 <HAL_DMA_Abort+0x33c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e007      	b.n	8007450 <HAL_DMA_Abort+0x34c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007450:	e013      	b.n	800747a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007452:	f7ff fcd9 	bl	8006e08 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b05      	cmp	r3, #5
 800745e:	d90c      	bls.n	800747a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2203      	movs	r2, #3
 800746a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e12d      	b.n	80076d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a2f      	ldr	r2, [pc, #188]	; (8007548 <HAL_DMA_Abort+0x444>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d04a      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a2d      	ldr	r2, [pc, #180]	; (800754c <HAL_DMA_Abort+0x448>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d045      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a2c      	ldr	r2, [pc, #176]	; (8007550 <HAL_DMA_Abort+0x44c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d040      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a2a      	ldr	r2, [pc, #168]	; (8007554 <HAL_DMA_Abort+0x450>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d03b      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a29      	ldr	r2, [pc, #164]	; (8007558 <HAL_DMA_Abort+0x454>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d036      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a27      	ldr	r2, [pc, #156]	; (800755c <HAL_DMA_Abort+0x458>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d031      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a26      	ldr	r2, [pc, #152]	; (8007560 <HAL_DMA_Abort+0x45c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d02c      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a24      	ldr	r2, [pc, #144]	; (8007564 <HAL_DMA_Abort+0x460>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d027      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a23      	ldr	r2, [pc, #140]	; (8007568 <HAL_DMA_Abort+0x464>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d022      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a21      	ldr	r2, [pc, #132]	; (800756c <HAL_DMA_Abort+0x468>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01d      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a20      	ldr	r2, [pc, #128]	; (8007570 <HAL_DMA_Abort+0x46c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d018      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <HAL_DMA_Abort+0x470>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a1d      	ldr	r2, [pc, #116]	; (8007578 <HAL_DMA_Abort+0x474>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00e      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1b      	ldr	r2, [pc, #108]	; (800757c <HAL_DMA_Abort+0x478>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d009      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1a      	ldr	r2, [pc, #104]	; (8007580 <HAL_DMA_Abort+0x47c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_DMA_Abort+0x422>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a18      	ldr	r2, [pc, #96]	; (8007584 <HAL_DMA_Abort+0x480>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d101      	bne.n	800752a <HAL_DMA_Abort+0x426>
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <HAL_DMA_Abort+0x428>
 800752a:	2300      	movs	r3, #0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d02b      	beq.n	8007588 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007534:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	223f      	movs	r2, #63	; 0x3f
 8007540:	409a      	lsls	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	609a      	str	r2, [r3, #8]
 8007546:	e02a      	b.n	800759e <HAL_DMA_Abort+0x49a>
 8007548:	40020010 	.word	0x40020010
 800754c:	40020028 	.word	0x40020028
 8007550:	40020040 	.word	0x40020040
 8007554:	40020058 	.word	0x40020058
 8007558:	40020070 	.word	0x40020070
 800755c:	40020088 	.word	0x40020088
 8007560:	400200a0 	.word	0x400200a0
 8007564:	400200b8 	.word	0x400200b8
 8007568:	40020410 	.word	0x40020410
 800756c:	40020428 	.word	0x40020428
 8007570:	40020440 	.word	0x40020440
 8007574:	40020458 	.word	0x40020458
 8007578:	40020470 	.word	0x40020470
 800757c:	40020488 	.word	0x40020488
 8007580:	400204a0 	.word	0x400204a0
 8007584:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2201      	movs	r2, #1
 8007598:	409a      	lsls	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a4f      	ldr	r2, [pc, #316]	; (80076e0 <HAL_DMA_Abort+0x5dc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d072      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a4d      	ldr	r2, [pc, #308]	; (80076e4 <HAL_DMA_Abort+0x5e0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d06d      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a4c      	ldr	r2, [pc, #304]	; (80076e8 <HAL_DMA_Abort+0x5e4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d068      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a4a      	ldr	r2, [pc, #296]	; (80076ec <HAL_DMA_Abort+0x5e8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d063      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a49      	ldr	r2, [pc, #292]	; (80076f0 <HAL_DMA_Abort+0x5ec>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d05e      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a47      	ldr	r2, [pc, #284]	; (80076f4 <HAL_DMA_Abort+0x5f0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d059      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a46      	ldr	r2, [pc, #280]	; (80076f8 <HAL_DMA_Abort+0x5f4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d054      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a44      	ldr	r2, [pc, #272]	; (80076fc <HAL_DMA_Abort+0x5f8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d04f      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a43      	ldr	r2, [pc, #268]	; (8007700 <HAL_DMA_Abort+0x5fc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d04a      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a41      	ldr	r2, [pc, #260]	; (8007704 <HAL_DMA_Abort+0x600>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d045      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a40      	ldr	r2, [pc, #256]	; (8007708 <HAL_DMA_Abort+0x604>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d040      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a3e      	ldr	r2, [pc, #248]	; (800770c <HAL_DMA_Abort+0x608>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d03b      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a3d      	ldr	r2, [pc, #244]	; (8007710 <HAL_DMA_Abort+0x60c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d036      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a3b      	ldr	r2, [pc, #236]	; (8007714 <HAL_DMA_Abort+0x610>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d031      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3a      	ldr	r2, [pc, #232]	; (8007718 <HAL_DMA_Abort+0x614>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d02c      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a38      	ldr	r2, [pc, #224]	; (800771c <HAL_DMA_Abort+0x618>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d027      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a37      	ldr	r2, [pc, #220]	; (8007720 <HAL_DMA_Abort+0x61c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d022      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a35      	ldr	r2, [pc, #212]	; (8007724 <HAL_DMA_Abort+0x620>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d01d      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a34      	ldr	r2, [pc, #208]	; (8007728 <HAL_DMA_Abort+0x624>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d018      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a32      	ldr	r2, [pc, #200]	; (800772c <HAL_DMA_Abort+0x628>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d013      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a31      	ldr	r2, [pc, #196]	; (8007730 <HAL_DMA_Abort+0x62c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00e      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <HAL_DMA_Abort+0x630>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d009      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a2e      	ldr	r2, [pc, #184]	; (8007738 <HAL_DMA_Abort+0x634>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_DMA_Abort+0x58a>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a2c      	ldr	r2, [pc, #176]	; (800773c <HAL_DMA_Abort+0x638>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d101      	bne.n	8007692 <HAL_DMA_Abort+0x58e>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <HAL_DMA_Abort+0x590>
 8007692:	2300      	movs	r3, #0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d015      	beq.n	80076c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00c      	beq.n	80076c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	40020010 	.word	0x40020010
 80076e4:	40020028 	.word	0x40020028
 80076e8:	40020040 	.word	0x40020040
 80076ec:	40020058 	.word	0x40020058
 80076f0:	40020070 	.word	0x40020070
 80076f4:	40020088 	.word	0x40020088
 80076f8:	400200a0 	.word	0x400200a0
 80076fc:	400200b8 	.word	0x400200b8
 8007700:	40020410 	.word	0x40020410
 8007704:	40020428 	.word	0x40020428
 8007708:	40020440 	.word	0x40020440
 800770c:	40020458 	.word	0x40020458
 8007710:	40020470 	.word	0x40020470
 8007714:	40020488 	.word	0x40020488
 8007718:	400204a0 	.word	0x400204a0
 800771c:	400204b8 	.word	0x400204b8
 8007720:	58025408 	.word	0x58025408
 8007724:	5802541c 	.word	0x5802541c
 8007728:	58025430 	.word	0x58025430
 800772c:	58025444 	.word	0x58025444
 8007730:	58025458 	.word	0x58025458
 8007734:	5802546c 	.word	0x5802546c
 8007738:	58025480 	.word	0x58025480
 800773c:	58025494 	.word	0x58025494

08007740 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e237      	b.n	8007bc2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d004      	beq.n	8007768 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2280      	movs	r2, #128	; 0x80
 8007762:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e22c      	b.n	8007bc2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a5c      	ldr	r2, [pc, #368]	; (80078e0 <HAL_DMA_Abort_IT+0x1a0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d04a      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a5b      	ldr	r2, [pc, #364]	; (80078e4 <HAL_DMA_Abort_IT+0x1a4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d045      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a59      	ldr	r2, [pc, #356]	; (80078e8 <HAL_DMA_Abort_IT+0x1a8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d040      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a58      	ldr	r2, [pc, #352]	; (80078ec <HAL_DMA_Abort_IT+0x1ac>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d03b      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a56      	ldr	r2, [pc, #344]	; (80078f0 <HAL_DMA_Abort_IT+0x1b0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d036      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a55      	ldr	r2, [pc, #340]	; (80078f4 <HAL_DMA_Abort_IT+0x1b4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d031      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a53      	ldr	r2, [pc, #332]	; (80078f8 <HAL_DMA_Abort_IT+0x1b8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d02c      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a52      	ldr	r2, [pc, #328]	; (80078fc <HAL_DMA_Abort_IT+0x1bc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d027      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a50      	ldr	r2, [pc, #320]	; (8007900 <HAL_DMA_Abort_IT+0x1c0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d022      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a4f      	ldr	r2, [pc, #316]	; (8007904 <HAL_DMA_Abort_IT+0x1c4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d01d      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a4d      	ldr	r2, [pc, #308]	; (8007908 <HAL_DMA_Abort_IT+0x1c8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d018      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a4c      	ldr	r2, [pc, #304]	; (800790c <HAL_DMA_Abort_IT+0x1cc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a4a      	ldr	r2, [pc, #296]	; (8007910 <HAL_DMA_Abort_IT+0x1d0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a49      	ldr	r2, [pc, #292]	; (8007914 <HAL_DMA_Abort_IT+0x1d4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a47      	ldr	r2, [pc, #284]	; (8007918 <HAL_DMA_Abort_IT+0x1d8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_DMA_Abort_IT+0xc8>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a46      	ldr	r2, [pc, #280]	; (800791c <HAL_DMA_Abort_IT+0x1dc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d101      	bne.n	800780c <HAL_DMA_Abort_IT+0xcc>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <HAL_DMA_Abort_IT+0xce>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8086 	beq.w	8007920 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2204      	movs	r2, #4
 8007818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a2f      	ldr	r2, [pc, #188]	; (80078e0 <HAL_DMA_Abort_IT+0x1a0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d04a      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a2e      	ldr	r2, [pc, #184]	; (80078e4 <HAL_DMA_Abort_IT+0x1a4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d045      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a2c      	ldr	r2, [pc, #176]	; (80078e8 <HAL_DMA_Abort_IT+0x1a8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d040      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a2b      	ldr	r2, [pc, #172]	; (80078ec <HAL_DMA_Abort_IT+0x1ac>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d03b      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a29      	ldr	r2, [pc, #164]	; (80078f0 <HAL_DMA_Abort_IT+0x1b0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d036      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a28      	ldr	r2, [pc, #160]	; (80078f4 <HAL_DMA_Abort_IT+0x1b4>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d031      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a26      	ldr	r2, [pc, #152]	; (80078f8 <HAL_DMA_Abort_IT+0x1b8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d02c      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a25      	ldr	r2, [pc, #148]	; (80078fc <HAL_DMA_Abort_IT+0x1bc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d027      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a23      	ldr	r2, [pc, #140]	; (8007900 <HAL_DMA_Abort_IT+0x1c0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d022      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a22      	ldr	r2, [pc, #136]	; (8007904 <HAL_DMA_Abort_IT+0x1c4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d01d      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a20      	ldr	r2, [pc, #128]	; (8007908 <HAL_DMA_Abort_IT+0x1c8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d018      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1f      	ldr	r2, [pc, #124]	; (800790c <HAL_DMA_Abort_IT+0x1cc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d013      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <HAL_DMA_Abort_IT+0x1d0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00e      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <HAL_DMA_Abort_IT+0x1d4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d009      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1a      	ldr	r2, [pc, #104]	; (8007918 <HAL_DMA_Abort_IT+0x1d8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <HAL_DMA_Abort_IT+0x17c>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a19      	ldr	r2, [pc, #100]	; (800791c <HAL_DMA_Abort_IT+0x1dc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d108      	bne.n	80078ce <HAL_DMA_Abort_IT+0x18e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0201 	bic.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	e178      	b.n	8007bc0 <HAL_DMA_Abort_IT+0x480>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0201 	bic.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e16f      	b.n	8007bc0 <HAL_DMA_Abort_IT+0x480>
 80078e0:	40020010 	.word	0x40020010
 80078e4:	40020028 	.word	0x40020028
 80078e8:	40020040 	.word	0x40020040
 80078ec:	40020058 	.word	0x40020058
 80078f0:	40020070 	.word	0x40020070
 80078f4:	40020088 	.word	0x40020088
 80078f8:	400200a0 	.word	0x400200a0
 80078fc:	400200b8 	.word	0x400200b8
 8007900:	40020410 	.word	0x40020410
 8007904:	40020428 	.word	0x40020428
 8007908:	40020440 	.word	0x40020440
 800790c:	40020458 	.word	0x40020458
 8007910:	40020470 	.word	0x40020470
 8007914:	40020488 	.word	0x40020488
 8007918:	400204a0 	.word	0x400204a0
 800791c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 020e 	bic.w	r2, r2, #14
 800792e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a6c      	ldr	r2, [pc, #432]	; (8007ae8 <HAL_DMA_Abort_IT+0x3a8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d04a      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a6b      	ldr	r2, [pc, #428]	; (8007aec <HAL_DMA_Abort_IT+0x3ac>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d045      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a69      	ldr	r2, [pc, #420]	; (8007af0 <HAL_DMA_Abort_IT+0x3b0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d040      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a68      	ldr	r2, [pc, #416]	; (8007af4 <HAL_DMA_Abort_IT+0x3b4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d03b      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a66      	ldr	r2, [pc, #408]	; (8007af8 <HAL_DMA_Abort_IT+0x3b8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d036      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a65      	ldr	r2, [pc, #404]	; (8007afc <HAL_DMA_Abort_IT+0x3bc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d031      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a63      	ldr	r2, [pc, #396]	; (8007b00 <HAL_DMA_Abort_IT+0x3c0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d02c      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a62      	ldr	r2, [pc, #392]	; (8007b04 <HAL_DMA_Abort_IT+0x3c4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d027      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a60      	ldr	r2, [pc, #384]	; (8007b08 <HAL_DMA_Abort_IT+0x3c8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d022      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a5f      	ldr	r2, [pc, #380]	; (8007b0c <HAL_DMA_Abort_IT+0x3cc>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d01d      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a5d      	ldr	r2, [pc, #372]	; (8007b10 <HAL_DMA_Abort_IT+0x3d0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d018      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a5c      	ldr	r2, [pc, #368]	; (8007b14 <HAL_DMA_Abort_IT+0x3d4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d013      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5a      	ldr	r2, [pc, #360]	; (8007b18 <HAL_DMA_Abort_IT+0x3d8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00e      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a59      	ldr	r2, [pc, #356]	; (8007b1c <HAL_DMA_Abort_IT+0x3dc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d009      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <HAL_DMA_Abort_IT+0x3e0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d004      	beq.n	80079d0 <HAL_DMA_Abort_IT+0x290>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a56      	ldr	r2, [pc, #344]	; (8007b24 <HAL_DMA_Abort_IT+0x3e4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d108      	bne.n	80079e2 <HAL_DMA_Abort_IT+0x2a2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0201 	bic.w	r2, r2, #1
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	e007      	b.n	80079f2 <HAL_DMA_Abort_IT+0x2b2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0201 	bic.w	r2, r2, #1
 80079f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a3c      	ldr	r2, [pc, #240]	; (8007ae8 <HAL_DMA_Abort_IT+0x3a8>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d072      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a3a      	ldr	r2, [pc, #232]	; (8007aec <HAL_DMA_Abort_IT+0x3ac>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d06d      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a39      	ldr	r2, [pc, #228]	; (8007af0 <HAL_DMA_Abort_IT+0x3b0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d068      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a37      	ldr	r2, [pc, #220]	; (8007af4 <HAL_DMA_Abort_IT+0x3b4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d063      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a36      	ldr	r2, [pc, #216]	; (8007af8 <HAL_DMA_Abort_IT+0x3b8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d05e      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a34      	ldr	r2, [pc, #208]	; (8007afc <HAL_DMA_Abort_IT+0x3bc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d059      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a33      	ldr	r2, [pc, #204]	; (8007b00 <HAL_DMA_Abort_IT+0x3c0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d054      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a31      	ldr	r2, [pc, #196]	; (8007b04 <HAL_DMA_Abort_IT+0x3c4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d04f      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a30      	ldr	r2, [pc, #192]	; (8007b08 <HAL_DMA_Abort_IT+0x3c8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d04a      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a2e      	ldr	r2, [pc, #184]	; (8007b0c <HAL_DMA_Abort_IT+0x3cc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d045      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a2d      	ldr	r2, [pc, #180]	; (8007b10 <HAL_DMA_Abort_IT+0x3d0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d040      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2b      	ldr	r2, [pc, #172]	; (8007b14 <HAL_DMA_Abort_IT+0x3d4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d03b      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <HAL_DMA_Abort_IT+0x3d8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d036      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <HAL_DMA_Abort_IT+0x3dc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d031      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <HAL_DMA_Abort_IT+0x3e0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d02c      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a25      	ldr	r2, [pc, #148]	; (8007b24 <HAL_DMA_Abort_IT+0x3e4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d027      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a24      	ldr	r2, [pc, #144]	; (8007b28 <HAL_DMA_Abort_IT+0x3e8>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d022      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a22      	ldr	r2, [pc, #136]	; (8007b2c <HAL_DMA_Abort_IT+0x3ec>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01d      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	; (8007b30 <HAL_DMA_Abort_IT+0x3f0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d018      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1f      	ldr	r2, [pc, #124]	; (8007b34 <HAL_DMA_Abort_IT+0x3f4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1e      	ldr	r2, [pc, #120]	; (8007b38 <HAL_DMA_Abort_IT+0x3f8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1c      	ldr	r2, [pc, #112]	; (8007b3c <HAL_DMA_Abort_IT+0x3fc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d009      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <HAL_DMA_Abort_IT+0x400>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_DMA_Abort_IT+0x3a2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a19      	ldr	r2, [pc, #100]	; (8007b44 <HAL_DMA_Abort_IT+0x404>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d132      	bne.n	8007b48 <HAL_DMA_Abort_IT+0x408>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e031      	b.n	8007b4a <HAL_DMA_Abort_IT+0x40a>
 8007ae6:	bf00      	nop
 8007ae8:	40020010 	.word	0x40020010
 8007aec:	40020028 	.word	0x40020028
 8007af0:	40020040 	.word	0x40020040
 8007af4:	40020058 	.word	0x40020058
 8007af8:	40020070 	.word	0x40020070
 8007afc:	40020088 	.word	0x40020088
 8007b00:	400200a0 	.word	0x400200a0
 8007b04:	400200b8 	.word	0x400200b8
 8007b08:	40020410 	.word	0x40020410
 8007b0c:	40020428 	.word	0x40020428
 8007b10:	40020440 	.word	0x40020440
 8007b14:	40020458 	.word	0x40020458
 8007b18:	40020470 	.word	0x40020470
 8007b1c:	40020488 	.word	0x40020488
 8007b20:	400204a0 	.word	0x400204a0
 8007b24:	400204b8 	.word	0x400204b8
 8007b28:	58025408 	.word	0x58025408
 8007b2c:	5802541c 	.word	0x5802541c
 8007b30:	58025430 	.word	0x58025430
 8007b34:	58025444 	.word	0x58025444
 8007b38:	58025458 	.word	0x58025458
 8007b3c:	5802546c 	.word	0x5802546c
 8007b40:	58025480 	.word	0x58025480
 8007b44:	58025494 	.word	0x58025494
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d028      	beq.n	8007ba0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	409a      	lsls	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00c      	beq.n	8007ba0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop

08007bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b089      	sub	sp, #36	; 0x24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bda:	4b89      	ldr	r3, [pc, #548]	; (8007e00 <HAL_GPIO_Init+0x234>)
 8007bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bde:	e194      	b.n	8007f0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	2101      	movs	r1, #1
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	4013      	ands	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8186 	beq.w	8007f04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d005      	beq.n	8007c10 <HAL_GPIO_Init+0x44>
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d130      	bne.n	8007c72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c20:	43db      	mvns	r3, r3
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	4013      	ands	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c46:	2201      	movs	r2, #1
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4e:	43db      	mvns	r3, r3
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	4013      	ands	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	091b      	lsrs	r3, r3, #4
 8007c5c:	f003 0201 	and.w	r2, r3, #1
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d017      	beq.n	8007cae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	2203      	movs	r2, #3
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d123      	bne.n	8007d02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	08da      	lsrs	r2, r3, #3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3208      	adds	r2, #8
 8007cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	f003 0307 	and.w	r3, r3, #7
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	220f      	movs	r2, #15
 8007cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd6:	43db      	mvns	r3, r3
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	f003 0307 	and.w	r3, r3, #7
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	08da      	lsrs	r2, r3, #3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3208      	adds	r2, #8
 8007cfc:	69b9      	ldr	r1, [r7, #24]
 8007cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	43db      	mvns	r3, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4013      	ands	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f003 0203 	and.w	r2, r3, #3
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 80e0 	beq.w	8007f04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d44:	4b2f      	ldr	r3, [pc, #188]	; (8007e04 <HAL_GPIO_Init+0x238>)
 8007d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d4a:	4a2e      	ldr	r2, [pc, #184]	; (8007e04 <HAL_GPIO_Init+0x238>)
 8007d4c:	f043 0302 	orr.w	r3, r3, #2
 8007d50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d54:	4b2b      	ldr	r3, [pc, #172]	; (8007e04 <HAL_GPIO_Init+0x238>)
 8007d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d62:	4a29      	ldr	r2, [pc, #164]	; (8007e08 <HAL_GPIO_Init+0x23c>)
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	089b      	lsrs	r3, r3, #2
 8007d68:	3302      	adds	r3, #2
 8007d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	220f      	movs	r2, #15
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4013      	ands	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a20      	ldr	r2, [pc, #128]	; (8007e0c <HAL_GPIO_Init+0x240>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d052      	beq.n	8007e34 <HAL_GPIO_Init+0x268>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1f      	ldr	r2, [pc, #124]	; (8007e10 <HAL_GPIO_Init+0x244>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d031      	beq.n	8007dfa <HAL_GPIO_Init+0x22e>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <HAL_GPIO_Init+0x248>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d02b      	beq.n	8007df6 <HAL_GPIO_Init+0x22a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a1d      	ldr	r2, [pc, #116]	; (8007e18 <HAL_GPIO_Init+0x24c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d025      	beq.n	8007df2 <HAL_GPIO_Init+0x226>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a1c      	ldr	r2, [pc, #112]	; (8007e1c <HAL_GPIO_Init+0x250>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01f      	beq.n	8007dee <HAL_GPIO_Init+0x222>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <HAL_GPIO_Init+0x254>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d019      	beq.n	8007dea <HAL_GPIO_Init+0x21e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a1a      	ldr	r2, [pc, #104]	; (8007e24 <HAL_GPIO_Init+0x258>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_GPIO_Init+0x21a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <HAL_GPIO_Init+0x25c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00d      	beq.n	8007de2 <HAL_GPIO_Init+0x216>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a18      	ldr	r2, [pc, #96]	; (8007e2c <HAL_GPIO_Init+0x260>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d007      	beq.n	8007dde <HAL_GPIO_Init+0x212>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <HAL_GPIO_Init+0x264>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <HAL_GPIO_Init+0x20e>
 8007dd6:	2309      	movs	r3, #9
 8007dd8:	e02d      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007dda:	230a      	movs	r3, #10
 8007ddc:	e02b      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007dde:	2308      	movs	r3, #8
 8007de0:	e029      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007de2:	2307      	movs	r3, #7
 8007de4:	e027      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007de6:	2306      	movs	r3, #6
 8007de8:	e025      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007dea:	2305      	movs	r3, #5
 8007dec:	e023      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007dee:	2304      	movs	r3, #4
 8007df0:	e021      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007df2:	2303      	movs	r3, #3
 8007df4:	e01f      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e01d      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e01b      	b.n	8007e36 <HAL_GPIO_Init+0x26a>
 8007dfe:	bf00      	nop
 8007e00:	58000080 	.word	0x58000080
 8007e04:	58024400 	.word	0x58024400
 8007e08:	58000400 	.word	0x58000400
 8007e0c:	58020000 	.word	0x58020000
 8007e10:	58020400 	.word	0x58020400
 8007e14:	58020800 	.word	0x58020800
 8007e18:	58020c00 	.word	0x58020c00
 8007e1c:	58021000 	.word	0x58021000
 8007e20:	58021400 	.word	0x58021400
 8007e24:	58021800 	.word	0x58021800
 8007e28:	58021c00 	.word	0x58021c00
 8007e2c:	58022000 	.word	0x58022000
 8007e30:	58022400 	.word	0x58022400
 8007e34:	2300      	movs	r3, #0
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	f002 0203 	and.w	r2, r2, #3
 8007e3c:	0092      	lsls	r2, r2, #2
 8007e3e:	4093      	lsls	r3, r2
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e46:	4938      	ldr	r1, [pc, #224]	; (8007f28 <HAL_GPIO_Init+0x35c>)
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	089b      	lsrs	r3, r3, #2
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	43db      	mvns	r3, r3
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	4013      	ands	r3, r2
 8007e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	4013      	ands	r3, r2
 8007e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	43db      	mvns	r3, r3
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	3301      	adds	r3, #1
 8007f08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f47f ae63 	bne.w	8007be0 <HAL_GPIO_Init+0x14>
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	3724      	adds	r7, #36	; 0x24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	58000400 	.word	0x58000400

08007f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	887b      	ldrh	r3, [r7, #2]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
 8007f48:	e001      	b.n	8007f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	807b      	strh	r3, [r7, #2]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f6c:	787b      	ldrb	r3, [r7, #1]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f72:	887a      	ldrh	r2, [r7, #2]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f78:	e003      	b.n	8007f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f7a:	887b      	ldrh	r3, [r7, #2]
 8007f7c:	041a      	lsls	r2, r3, #16
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	619a      	str	r2, [r3, #24]
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	4603      	mov	r3, r0
 8007f96:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fa0:	88fb      	ldrh	r3, [r7, #6]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d008      	beq.n	8007fba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fb fa65 	bl	8003484 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007fcc:	4b19      	ldr	r3, [pc, #100]	; (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d00a      	beq.n	8007fee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007fd8:	4b16      	ldr	r3, [pc, #88]	; (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d001      	beq.n	8007fea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e01f      	b.n	800802a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e01d      	b.n	800802a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f023 0207 	bic.w	r2, r3, #7
 8007ff6:	490f      	ldr	r1, [pc, #60]	; (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ffe:	f7fe ff03 	bl	8006e08 <HAL_GetTick>
 8008002:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008004:	e009      	b.n	800801a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008006:	f7fe feff 	bl	8006e08 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008014:	d901      	bls.n	800801a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e007      	b.n	800802a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800801a:	4b06      	ldr	r3, [pc, #24]	; (8008034 <HAL_PWREx_ConfigSupply+0x70>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008026:	d1ee      	bne.n	8008006 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	58024800 	.word	0x58024800

08008038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08c      	sub	sp, #48	; 0x30
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d102      	bne.n	800804c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	f000 bc1d 	b.w	8008886 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8087 	beq.w	8008168 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800805a:	4b99      	ldr	r3, [pc, #612]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008064:	4b96      	ldr	r3, [pc, #600]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	2b10      	cmp	r3, #16
 800806e:	d007      	beq.n	8008080 <HAL_RCC_OscConfig+0x48>
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	2b18      	cmp	r3, #24
 8008074:	d110      	bne.n	8008098 <HAL_RCC_OscConfig+0x60>
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d10b      	bne.n	8008098 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008080:	4b8f      	ldr	r3, [pc, #572]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d06c      	beq.n	8008166 <HAL_RCC_OscConfig+0x12e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d168      	bne.n	8008166 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e3f6      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a0:	d106      	bne.n	80080b0 <HAL_RCC_OscConfig+0x78>
 80080a2:	4b87      	ldr	r3, [pc, #540]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a86      	ldr	r2, [pc, #536]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	e02e      	b.n	800810e <HAL_RCC_OscConfig+0xd6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10c      	bne.n	80080d2 <HAL_RCC_OscConfig+0x9a>
 80080b8:	4b81      	ldr	r3, [pc, #516]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a80      	ldr	r2, [pc, #512]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	4b7e      	ldr	r3, [pc, #504]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a7d      	ldr	r2, [pc, #500]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	e01d      	b.n	800810e <HAL_RCC_OscConfig+0xd6>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080da:	d10c      	bne.n	80080f6 <HAL_RCC_OscConfig+0xbe>
 80080dc:	4b78      	ldr	r3, [pc, #480]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a77      	ldr	r2, [pc, #476]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	4b75      	ldr	r3, [pc, #468]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a74      	ldr	r2, [pc, #464]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e00b      	b.n	800810e <HAL_RCC_OscConfig+0xd6>
 80080f6:	4b72      	ldr	r3, [pc, #456]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a71      	ldr	r2, [pc, #452]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80080fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	4b6f      	ldr	r3, [pc, #444]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a6e      	ldr	r2, [pc, #440]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800810c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d013      	beq.n	800813e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008116:	f7fe fe77 	bl	8006e08 <HAL_GetTick>
 800811a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800811c:	e008      	b.n	8008130 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800811e:	f7fe fe73 	bl	8006e08 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b64      	cmp	r3, #100	; 0x64
 800812a:	d901      	bls.n	8008130 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e3aa      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008130:	4b63      	ldr	r3, [pc, #396]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0f0      	beq.n	800811e <HAL_RCC_OscConfig+0xe6>
 800813c:	e014      	b.n	8008168 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813e:	f7fe fe63 	bl	8006e08 <HAL_GetTick>
 8008142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008144:	e008      	b.n	8008158 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008146:	f7fe fe5f 	bl	8006e08 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b64      	cmp	r3, #100	; 0x64
 8008152:	d901      	bls.n	8008158 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e396      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008158:	4b59      	ldr	r3, [pc, #356]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1f0      	bne.n	8008146 <HAL_RCC_OscConfig+0x10e>
 8008164:	e000      	b.n	8008168 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008166:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80cb 	beq.w	800830c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008176:	4b52      	ldr	r3, [pc, #328]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800817e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008180:	4b4f      	ldr	r3, [pc, #316]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008184:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d007      	beq.n	800819c <HAL_RCC_OscConfig+0x164>
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	2b18      	cmp	r3, #24
 8008190:	d156      	bne.n	8008240 <HAL_RCC_OscConfig+0x208>
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d151      	bne.n	8008240 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800819c:	4b48      	ldr	r3, [pc, #288]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <HAL_RCC_OscConfig+0x17c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e368      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081b4:	4b42      	ldr	r3, [pc, #264]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f023 0219 	bic.w	r2, r3, #25
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	493f      	ldr	r1, [pc, #252]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081c6:	f7fe fe1f 	bl	8006e08 <HAL_GetTick>
 80081ca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081ce:	f7fe fe1b 	bl	8006e08 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e352      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081e0:	4b37      	ldr	r3, [pc, #220]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0f0      	beq.n	80081ce <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ec:	f7fe fe3c 	bl	8006e68 <HAL_GetREVID>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d817      	bhi.n	800822a <HAL_RCC_OscConfig+0x1f2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d108      	bne.n	8008214 <HAL_RCC_OscConfig+0x1dc>
 8008202:	4b2f      	ldr	r3, [pc, #188]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800820a:	4a2d      	ldr	r2, [pc, #180]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 800820c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008210:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008212:	e07b      	b.n	800830c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008214:	4b2a      	ldr	r3, [pc, #168]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	031b      	lsls	r3, r3, #12
 8008222:	4927      	ldr	r1, [pc, #156]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008224:	4313      	orrs	r3, r2
 8008226:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008228:	e070      	b.n	800830c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800822a:	4b25      	ldr	r3, [pc, #148]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	061b      	lsls	r3, r3, #24
 8008238:	4921      	ldr	r1, [pc, #132]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 800823a:	4313      	orrs	r3, r2
 800823c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800823e:	e065      	b.n	800830c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d048      	beq.n	80082da <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008248:	4b1d      	ldr	r3, [pc, #116]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f023 0219 	bic.w	r2, r3, #25
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	491a      	ldr	r1, [pc, #104]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008256:	4313      	orrs	r3, r2
 8008258:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825a:	f7fe fdd5 	bl	8006e08 <HAL_GetTick>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008262:	f7fe fdd1 	bl	8006e08 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e308      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008274:	4b12      	ldr	r3, [pc, #72]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0f0      	beq.n	8008262 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008280:	f7fe fdf2 	bl	8006e68 <HAL_GetREVID>
 8008284:	4603      	mov	r3, r0
 8008286:	f241 0203 	movw	r2, #4099	; 0x1003
 800828a:	4293      	cmp	r3, r2
 800828c:	d81a      	bhi.n	80082c4 <HAL_RCC_OscConfig+0x28c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b40      	cmp	r3, #64	; 0x40
 8008294:	d108      	bne.n	80082a8 <HAL_RCC_OscConfig+0x270>
 8008296:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800829e:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80082a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a4:	6053      	str	r3, [r2, #4]
 80082a6:	e031      	b.n	800830c <HAL_RCC_OscConfig+0x2d4>
 80082a8:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	031b      	lsls	r3, r3, #12
 80082b6:	4902      	ldr	r1, [pc, #8]	; (80082c0 <HAL_RCC_OscConfig+0x288>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	604b      	str	r3, [r1, #4]
 80082bc:	e026      	b.n	800830c <HAL_RCC_OscConfig+0x2d4>
 80082be:	bf00      	nop
 80082c0:	58024400 	.word	0x58024400
 80082c4:	4b9a      	ldr	r3, [pc, #616]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	061b      	lsls	r3, r3, #24
 80082d2:	4997      	ldr	r1, [pc, #604]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	604b      	str	r3, [r1, #4]
 80082d8:	e018      	b.n	800830c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082da:	4b95      	ldr	r3, [pc, #596]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a94      	ldr	r2, [pc, #592]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80082e0:	f023 0301 	bic.w	r3, r3, #1
 80082e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e6:	f7fe fd8f 	bl	8006e08 <HAL_GetTick>
 80082ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082ec:	e008      	b.n	8008300 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082ee:	f7fe fd8b 	bl	8006e08 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e2c2      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008300:	4b8b      	ldr	r3, [pc, #556]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f0      	bne.n	80082ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0310 	and.w	r3, r3, #16
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 80a9 	beq.w	800846c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800831a:	4b85      	ldr	r3, [pc, #532]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008322:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008324:	4b82      	ldr	r3, [pc, #520]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b08      	cmp	r3, #8
 800832e:	d007      	beq.n	8008340 <HAL_RCC_OscConfig+0x308>
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b18      	cmp	r3, #24
 8008334:	d13a      	bne.n	80083ac <HAL_RCC_OscConfig+0x374>
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	2b01      	cmp	r3, #1
 800833e:	d135      	bne.n	80083ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008340:	4b7b      	ldr	r3, [pc, #492]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_RCC_OscConfig+0x320>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d001      	beq.n	8008358 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e296      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008358:	f7fe fd86 	bl	8006e68 <HAL_GetREVID>
 800835c:	4603      	mov	r3, r0
 800835e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008362:	4293      	cmp	r3, r2
 8008364:	d817      	bhi.n	8008396 <HAL_RCC_OscConfig+0x35e>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	2b20      	cmp	r3, #32
 800836c:	d108      	bne.n	8008380 <HAL_RCC_OscConfig+0x348>
 800836e:	4b70      	ldr	r3, [pc, #448]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008376:	4a6e      	ldr	r2, [pc, #440]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800837c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800837e:	e075      	b.n	800846c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008380:	4b6b      	ldr	r3, [pc, #428]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	069b      	lsls	r3, r3, #26
 800838e:	4968      	ldr	r1, [pc, #416]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008390:	4313      	orrs	r3, r2
 8008392:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008394:	e06a      	b.n	800846c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008396:	4b66      	ldr	r3, [pc, #408]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	061b      	lsls	r3, r3, #24
 80083a4:	4962      	ldr	r1, [pc, #392]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083aa:	e05f      	b.n	800846c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d042      	beq.n	800843a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083b4:	4b5e      	ldr	r3, [pc, #376]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a5d      	ldr	r2, [pc, #372]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80083ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7fe fd22 	bl	8006e08 <HAL_GetTick>
 80083c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083c8:	f7fe fd1e 	bl	8006e08 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e255      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083da:	4b55      	ldr	r3, [pc, #340]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0f0      	beq.n	80083c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083e6:	f7fe fd3f 	bl	8006e68 <HAL_GetREVID>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d817      	bhi.n	8008424 <HAL_RCC_OscConfig+0x3ec>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d108      	bne.n	800840e <HAL_RCC_OscConfig+0x3d6>
 80083fc:	4b4c      	ldr	r3, [pc, #304]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008404:	4a4a      	ldr	r2, [pc, #296]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800840a:	6053      	str	r3, [r2, #4]
 800840c:	e02e      	b.n	800846c <HAL_RCC_OscConfig+0x434>
 800840e:	4b48      	ldr	r3, [pc, #288]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	069b      	lsls	r3, r3, #26
 800841c:	4944      	ldr	r1, [pc, #272]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 800841e:	4313      	orrs	r3, r2
 8008420:	604b      	str	r3, [r1, #4]
 8008422:	e023      	b.n	800846c <HAL_RCC_OscConfig+0x434>
 8008424:	4b42      	ldr	r3, [pc, #264]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	061b      	lsls	r3, r3, #24
 8008432:	493f      	ldr	r1, [pc, #252]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008434:	4313      	orrs	r3, r2
 8008436:	60cb      	str	r3, [r1, #12]
 8008438:	e018      	b.n	800846c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800843a:	4b3d      	ldr	r3, [pc, #244]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a3c      	ldr	r2, [pc, #240]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008446:	f7fe fcdf 	bl	8006e08 <HAL_GetTick>
 800844a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800844c:	e008      	b.n	8008460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800844e:	f7fe fcdb 	bl	8006e08 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e212      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008460:	4b33      	ldr	r3, [pc, #204]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1f0      	bne.n	800844e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d036      	beq.n	80084e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d019      	beq.n	80084b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008480:	4b2b      	ldr	r3, [pc, #172]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008484:	4a2a      	ldr	r2, [pc, #168]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008486:	f043 0301 	orr.w	r3, r3, #1
 800848a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800848c:	f7fe fcbc 	bl	8006e08 <HAL_GetTick>
 8008490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008494:	f7fe fcb8 	bl	8006e08 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e1ef      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084a6:	4b22      	ldr	r3, [pc, #136]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80084a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0f0      	beq.n	8008494 <HAL_RCC_OscConfig+0x45c>
 80084b2:	e018      	b.n	80084e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80084b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b8:	4a1d      	ldr	r2, [pc, #116]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80084ba:	f023 0301 	bic.w	r3, r3, #1
 80084be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c0:	f7fe fca2 	bl	8006e08 <HAL_GetTick>
 80084c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084c8:	f7fe fc9e 	bl	8006e08 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e1d5      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084da:	4b15      	ldr	r3, [pc, #84]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80084dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d039      	beq.n	8008566 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01c      	beq.n	8008534 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a0c      	ldr	r2, [pc, #48]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008504:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008506:	f7fe fc7f 	bl	8006e08 <HAL_GetTick>
 800850a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800850c:	e008      	b.n	8008520 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800850e:	f7fe fc7b 	bl	8006e08 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	2b02      	cmp	r3, #2
 800851a:	d901      	bls.n	8008520 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e1b2      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008520:	4b03      	ldr	r3, [pc, #12]	; (8008530 <HAL_RCC_OscConfig+0x4f8>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0f0      	beq.n	800850e <HAL_RCC_OscConfig+0x4d6>
 800852c:	e01b      	b.n	8008566 <HAL_RCC_OscConfig+0x52e>
 800852e:	bf00      	nop
 8008530:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008534:	4b9b      	ldr	r3, [pc, #620]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a9a      	ldr	r2, [pc, #616]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800853a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800853e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008540:	f7fe fc62 	bl	8006e08 <HAL_GetTick>
 8008544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008546:	e008      	b.n	800855a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008548:	f7fe fc5e 	bl	8006e08 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e195      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800855a:	4b92      	ldr	r3, [pc, #584]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f0      	bne.n	8008548 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 8081 	beq.w	8008676 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008574:	4b8c      	ldr	r3, [pc, #560]	; (80087a8 <HAL_RCC_OscConfig+0x770>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a8b      	ldr	r2, [pc, #556]	; (80087a8 <HAL_RCC_OscConfig+0x770>)
 800857a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800857e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008580:	f7fe fc42 	bl	8006e08 <HAL_GetTick>
 8008584:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008588:	f7fe fc3e 	bl	8006e08 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b64      	cmp	r3, #100	; 0x64
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e175      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800859a:	4b83      	ldr	r3, [pc, #524]	; (80087a8 <HAL_RCC_OscConfig+0x770>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0f0      	beq.n	8008588 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d106      	bne.n	80085bc <HAL_RCC_OscConfig+0x584>
 80085ae:	4b7d      	ldr	r3, [pc, #500]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	4a7c      	ldr	r2, [pc, #496]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	6713      	str	r3, [r2, #112]	; 0x70
 80085ba:	e02d      	b.n	8008618 <HAL_RCC_OscConfig+0x5e0>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10c      	bne.n	80085de <HAL_RCC_OscConfig+0x5a6>
 80085c4:	4b77      	ldr	r3, [pc, #476]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c8:	4a76      	ldr	r2, [pc, #472]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085ca:	f023 0301 	bic.w	r3, r3, #1
 80085ce:	6713      	str	r3, [r2, #112]	; 0x70
 80085d0:	4b74      	ldr	r3, [pc, #464]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d4:	4a73      	ldr	r2, [pc, #460]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085d6:	f023 0304 	bic.w	r3, r3, #4
 80085da:	6713      	str	r3, [r2, #112]	; 0x70
 80085dc:	e01c      	b.n	8008618 <HAL_RCC_OscConfig+0x5e0>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d10c      	bne.n	8008600 <HAL_RCC_OscConfig+0x5c8>
 80085e6:	4b6f      	ldr	r3, [pc, #444]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ea:	4a6e      	ldr	r2, [pc, #440]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085ec:	f043 0304 	orr.w	r3, r3, #4
 80085f0:	6713      	str	r3, [r2, #112]	; 0x70
 80085f2:	4b6c      	ldr	r3, [pc, #432]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	4a6b      	ldr	r2, [pc, #428]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80085f8:	f043 0301 	orr.w	r3, r3, #1
 80085fc:	6713      	str	r3, [r2, #112]	; 0x70
 80085fe:	e00b      	b.n	8008618 <HAL_RCC_OscConfig+0x5e0>
 8008600:	4b68      	ldr	r3, [pc, #416]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008604:	4a67      	ldr	r2, [pc, #412]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008606:	f023 0301 	bic.w	r3, r3, #1
 800860a:	6713      	str	r3, [r2, #112]	; 0x70
 800860c:	4b65      	ldr	r3, [pc, #404]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800860e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008610:	4a64      	ldr	r2, [pc, #400]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008612:	f023 0304 	bic.w	r3, r3, #4
 8008616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d015      	beq.n	800864c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008620:	f7fe fbf2 	bl	8006e08 <HAL_GetTick>
 8008624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008626:	e00a      	b.n	800863e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008628:	f7fe fbee 	bl	8006e08 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	f241 3288 	movw	r2, #5000	; 0x1388
 8008636:	4293      	cmp	r3, r2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e123      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800863e:	4b59      	ldr	r3, [pc, #356]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0ee      	beq.n	8008628 <HAL_RCC_OscConfig+0x5f0>
 800864a:	e014      	b.n	8008676 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864c:	f7fe fbdc 	bl	8006e08 <HAL_GetTick>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008652:	e00a      	b.n	800866a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008654:	f7fe fbd8 	bl	8006e08 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008662:	4293      	cmp	r3, r2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e10d      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800866a:	4b4e      	ldr	r3, [pc, #312]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800866c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1ee      	bne.n	8008654 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 8102 	beq.w	8008884 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008680:	4b48      	ldr	r3, [pc, #288]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008688:	2b18      	cmp	r3, #24
 800868a:	f000 80bd 	beq.w	8008808 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b02      	cmp	r3, #2
 8008694:	f040 809e 	bne.w	80087d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008698:	4b42      	ldr	r3, [pc, #264]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a41      	ldr	r2, [pc, #260]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800869e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a4:	f7fe fbb0 	bl	8006e08 <HAL_GetTick>
 80086a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086aa:	e008      	b.n	80086be <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ac:	f7fe fbac 	bl	8006e08 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d901      	bls.n	80086be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e0e3      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086be:	4b39      	ldr	r3, [pc, #228]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1f0      	bne.n	80086ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ca:	4b36      	ldr	r3, [pc, #216]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80086cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086ce:	4b37      	ldr	r3, [pc, #220]	; (80087ac <HAL_RCC_OscConfig+0x774>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086da:	0112      	lsls	r2, r2, #4
 80086dc:	430a      	orrs	r2, r1
 80086de:	4931      	ldr	r1, [pc, #196]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	628b      	str	r3, [r1, #40]	; 0x28
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	3b01      	subs	r3, #1
 80086ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f2:	3b01      	subs	r3, #1
 80086f4:	025b      	lsls	r3, r3, #9
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	3b01      	subs	r3, #1
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870c:	3b01      	subs	r3, #1
 800870e:	061b      	lsls	r3, r3, #24
 8008710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008714:	4923      	ldr	r1, [pc, #140]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008716:	4313      	orrs	r3, r2
 8008718:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800871a:	4b22      	ldr	r3, [pc, #136]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	4a21      	ldr	r2, [pc, #132]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008720:	f023 0301 	bic.w	r3, r3, #1
 8008724:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008726:	4b1f      	ldr	r3, [pc, #124]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872a:	4b21      	ldr	r3, [pc, #132]	; (80087b0 <HAL_RCC_OscConfig+0x778>)
 800872c:	4013      	ands	r3, r2
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008732:	00d2      	lsls	r2, r2, #3
 8008734:	491b      	ldr	r1, [pc, #108]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008736:	4313      	orrs	r3, r2
 8008738:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800873a:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	f023 020c 	bic.w	r2, r3, #12
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	4917      	ldr	r1, [pc, #92]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008748:	4313      	orrs	r3, r2
 800874a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800874c:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	f023 0202 	bic.w	r2, r3, #2
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008758:	4912      	ldr	r1, [pc, #72]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800875a:	4313      	orrs	r3, r2
 800875c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800875e:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	4a10      	ldr	r2, [pc, #64]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800876a:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	4a0d      	ldr	r2, [pc, #52]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 800877c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	4a07      	ldr	r2, [pc, #28]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008788:	f043 0301 	orr.w	r3, r3, #1
 800878c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800878e:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a04      	ldr	r2, [pc, #16]	; (80087a4 <HAL_RCC_OscConfig+0x76c>)
 8008794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879a:	f7fe fb35 	bl	8006e08 <HAL_GetTick>
 800879e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087a0:	e011      	b.n	80087c6 <HAL_RCC_OscConfig+0x78e>
 80087a2:	bf00      	nop
 80087a4:	58024400 	.word	0x58024400
 80087a8:	58024800 	.word	0x58024800
 80087ac:	fffffc0c 	.word	0xfffffc0c
 80087b0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b4:	f7fe fb28 	bl	8006e08 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e05f      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087c6:	4b32      	ldr	r3, [pc, #200]	; (8008890 <HAL_RCC_OscConfig+0x858>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCC_OscConfig+0x77c>
 80087d2:	e057      	b.n	8008884 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d4:	4b2e      	ldr	r3, [pc, #184]	; (8008890 <HAL_RCC_OscConfig+0x858>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a2d      	ldr	r2, [pc, #180]	; (8008890 <HAL_RCC_OscConfig+0x858>)
 80087da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fe fb12 	bl	8006e08 <HAL_GetTick>
 80087e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e8:	f7fe fb0e 	bl	8006e08 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e045      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087fa:	4b25      	ldr	r3, [pc, #148]	; (8008890 <HAL_RCC_OscConfig+0x858>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f0      	bne.n	80087e8 <HAL_RCC_OscConfig+0x7b0>
 8008806:	e03d      	b.n	8008884 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008808:	4b21      	ldr	r3, [pc, #132]	; (8008890 <HAL_RCC_OscConfig+0x858>)
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800880e:	4b20      	ldr	r3, [pc, #128]	; (8008890 <HAL_RCC_OscConfig+0x858>)
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b01      	cmp	r3, #1
 800881a:	d031      	beq.n	8008880 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f003 0203 	and.w	r2, r3, #3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008826:	429a      	cmp	r2, r3
 8008828:	d12a      	bne.n	8008880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	091b      	lsrs	r3, r3, #4
 800882e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008836:	429a      	cmp	r2, r3
 8008838:	d122      	bne.n	8008880 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d11a      	bne.n	8008880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	0a5b      	lsrs	r3, r3, #9
 800884e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008858:	429a      	cmp	r2, r3
 800885a:	d111      	bne.n	8008880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	0c1b      	lsrs	r3, r3, #16
 8008860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008868:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800886a:	429a      	cmp	r2, r3
 800886c:	d108      	bne.n	8008880 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	0e1b      	lsrs	r3, r3, #24
 8008872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800887c:	429a      	cmp	r2, r3
 800887e:	d001      	beq.n	8008884 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3730      	adds	r7, #48	; 0x30
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400

08008894 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e19c      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088a8:	4b8a      	ldr	r3, [pc, #552]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d910      	bls.n	80088d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088b6:	4b87      	ldr	r3, [pc, #540]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f023 020f 	bic.w	r2, r3, #15
 80088be:	4985      	ldr	r1, [pc, #532]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c6:	4b83      	ldr	r3, [pc, #524]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d001      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e184      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d010      	beq.n	8008906 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	4b7b      	ldr	r3, [pc, #492]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d908      	bls.n	8008906 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088f4:	4b78      	ldr	r3, [pc, #480]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	4975      	ldr	r1, [pc, #468]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008902:	4313      	orrs	r3, r2
 8008904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d010      	beq.n	8008934 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	4b70      	ldr	r3, [pc, #448]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800891e:	429a      	cmp	r2, r3
 8008920:	d908      	bls.n	8008934 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008922:	4b6d      	ldr	r3, [pc, #436]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	496a      	ldr	r1, [pc, #424]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008930:	4313      	orrs	r3, r2
 8008932:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b00      	cmp	r3, #0
 800893e:	d010      	beq.n	8008962 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699a      	ldr	r2, [r3, #24]
 8008944:	4b64      	ldr	r3, [pc, #400]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800894c:	429a      	cmp	r2, r3
 800894e:	d908      	bls.n	8008962 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008950:	4b61      	ldr	r3, [pc, #388]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	495e      	ldr	r1, [pc, #376]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 800895e:	4313      	orrs	r3, r2
 8008960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b00      	cmp	r3, #0
 800896c:	d010      	beq.n	8008990 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69da      	ldr	r2, [r3, #28]
 8008972:	4b59      	ldr	r3, [pc, #356]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800897a:	429a      	cmp	r2, r3
 800897c:	d908      	bls.n	8008990 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800897e:	4b56      	ldr	r3, [pc, #344]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	4953      	ldr	r1, [pc, #332]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 800898c:	4313      	orrs	r3, r2
 800898e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b00      	cmp	r3, #0
 800899a:	d010      	beq.n	80089be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	4b4d      	ldr	r3, [pc, #308]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d908      	bls.n	80089be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089ac:	4b4a      	ldr	r3, [pc, #296]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f023 020f 	bic.w	r2, r3, #15
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4947      	ldr	r1, [pc, #284]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d055      	beq.n	8008a76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089ca:	4b43      	ldr	r3, [pc, #268]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	4940      	ldr	r1, [pc, #256]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d107      	bne.n	80089f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089e4:	4b3c      	ldr	r3, [pc, #240]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d121      	bne.n	8008a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0f6      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d107      	bne.n	8008a0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089fc:	4b36      	ldr	r3, [pc, #216]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d115      	bne.n	8008a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e0ea      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d107      	bne.n	8008a24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a14:	4b30      	ldr	r3, [pc, #192]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d109      	bne.n	8008a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0de      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a24:	4b2c      	ldr	r3, [pc, #176]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0d6      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a34:	4b28      	ldr	r3, [pc, #160]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f023 0207 	bic.w	r2, r3, #7
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4925      	ldr	r1, [pc, #148]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a46:	f7fe f9df 	bl	8006e08 <HAL_GetTick>
 8008a4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a4c:	e00a      	b.n	8008a64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a4e:	f7fe f9db 	bl	8006e08 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e0be      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a64:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	00db      	lsls	r3, r3, #3
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d1eb      	bne.n	8008a4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d010      	beq.n	8008aa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d208      	bcs.n	8008aa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a92:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	f023 020f 	bic.w	r2, r3, #15
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	490e      	ldr	r1, [pc, #56]	; (8008ad8 <HAL_RCC_ClockConfig+0x244>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 030f 	and.w	r3, r3, #15
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d214      	bcs.n	8008adc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f023 020f 	bic.w	r2, r3, #15
 8008aba:	4906      	ldr	r1, [pc, #24]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac2:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <HAL_RCC_ClockConfig+0x240>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d005      	beq.n	8008adc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e086      	b.n	8008be2 <HAL_RCC_ClockConfig+0x34e>
 8008ad4:	52002000 	.word	0x52002000
 8008ad8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d010      	beq.n	8008b0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691a      	ldr	r2, [r3, #16]
 8008aec:	4b3f      	ldr	r3, [pc, #252]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d208      	bcs.n	8008b0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008af8:	4b3c      	ldr	r3, [pc, #240]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	4939      	ldr	r1, [pc, #228]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d010      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	4b34      	ldr	r3, [pc, #208]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d208      	bcs.n	8008b38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b26:	4b31      	ldr	r3, [pc, #196]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	492e      	ldr	r1, [pc, #184]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0310 	and.w	r3, r3, #16
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d010      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	4b28      	ldr	r3, [pc, #160]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d208      	bcs.n	8008b66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b54:	4b25      	ldr	r3, [pc, #148]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	4922      	ldr	r1, [pc, #136]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d010      	beq.n	8008b94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	69da      	ldr	r2, [r3, #28]
 8008b76:	4b1d      	ldr	r3, [pc, #116]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d208      	bcs.n	8008b94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b82:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	4917      	ldr	r1, [pc, #92]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b94:	f000 f834 	bl	8008c00 <HAL_RCC_GetSysClockFreq>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	4b14      	ldr	r3, [pc, #80]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	f003 030f 	and.w	r3, r3, #15
 8008ba4:	4912      	ldr	r1, [pc, #72]	; (8008bf0 <HAL_RCC_ClockConfig+0x35c>)
 8008ba6:	5ccb      	ldrb	r3, [r1, r3]
 8008ba8:	f003 031f 	and.w	r3, r3, #31
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bb2:	4b0e      	ldr	r3, [pc, #56]	; (8008bec <HAL_RCC_ClockConfig+0x358>)
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	4a0d      	ldr	r2, [pc, #52]	; (8008bf0 <HAL_RCC_ClockConfig+0x35c>)
 8008bbc:	5cd3      	ldrb	r3, [r2, r3]
 8008bbe:	f003 031f 	and.w	r3, r3, #31
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc8:	4a0a      	ldr	r2, [pc, #40]	; (8008bf4 <HAL_RCC_ClockConfig+0x360>)
 8008bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bcc:	4a0a      	ldr	r2, [pc, #40]	; (8008bf8 <HAL_RCC_ClockConfig+0x364>)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008bd2:	4b0a      	ldr	r3, [pc, #40]	; (8008bfc <HAL_RCC_ClockConfig+0x368>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe f8cc 	bl	8006d74 <HAL_InitTick>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	080127c8 	.word	0x080127c8
 8008bf4:	240000f4 	.word	0x240000f4
 8008bf8:	240000f0 	.word	0x240000f0
 8008bfc:	240000f8 	.word	0x240000f8

08008c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b089      	sub	sp, #36	; 0x24
 8008c04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c06:	4bb3      	ldr	r3, [pc, #716]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c0e:	2b18      	cmp	r3, #24
 8008c10:	f200 8155 	bhi.w	8008ebe <HAL_RCC_GetSysClockFreq+0x2be>
 8008c14:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008c81 	.word	0x08008c81
 8008c20:	08008ebf 	.word	0x08008ebf
 8008c24:	08008ebf 	.word	0x08008ebf
 8008c28:	08008ebf 	.word	0x08008ebf
 8008c2c:	08008ebf 	.word	0x08008ebf
 8008c30:	08008ebf 	.word	0x08008ebf
 8008c34:	08008ebf 	.word	0x08008ebf
 8008c38:	08008ebf 	.word	0x08008ebf
 8008c3c:	08008ca7 	.word	0x08008ca7
 8008c40:	08008ebf 	.word	0x08008ebf
 8008c44:	08008ebf 	.word	0x08008ebf
 8008c48:	08008ebf 	.word	0x08008ebf
 8008c4c:	08008ebf 	.word	0x08008ebf
 8008c50:	08008ebf 	.word	0x08008ebf
 8008c54:	08008ebf 	.word	0x08008ebf
 8008c58:	08008ebf 	.word	0x08008ebf
 8008c5c:	08008cad 	.word	0x08008cad
 8008c60:	08008ebf 	.word	0x08008ebf
 8008c64:	08008ebf 	.word	0x08008ebf
 8008c68:	08008ebf 	.word	0x08008ebf
 8008c6c:	08008ebf 	.word	0x08008ebf
 8008c70:	08008ebf 	.word	0x08008ebf
 8008c74:	08008ebf 	.word	0x08008ebf
 8008c78:	08008ebf 	.word	0x08008ebf
 8008c7c:	08008cb3 	.word	0x08008cb3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c80:	4b94      	ldr	r3, [pc, #592]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d009      	beq.n	8008ca0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c8c:	4b91      	ldr	r3, [pc, #580]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	08db      	lsrs	r3, r3, #3
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	4a90      	ldr	r2, [pc, #576]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c98:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008c9e:	e111      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ca0:	4b8d      	ldr	r3, [pc, #564]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ca2:	61bb      	str	r3, [r7, #24]
    break;
 8008ca4:	e10e      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008ca6:	4b8d      	ldr	r3, [pc, #564]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ca8:	61bb      	str	r3, [r7, #24]
    break;
 8008caa:	e10b      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008cac:	4b8c      	ldr	r3, [pc, #560]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008cae:	61bb      	str	r3, [r7, #24]
    break;
 8008cb0:	e108      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cb2:	4b88      	ldr	r3, [pc, #544]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008cbc:	4b85      	ldr	r3, [pc, #532]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	091b      	lsrs	r3, r3, #4
 8008cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cc8:	4b82      	ldr	r3, [pc, #520]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008cd2:	4b80      	ldr	r3, [pc, #512]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd6:	08db      	lsrs	r3, r3, #3
 8008cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	fb02 f303 	mul.w	r3, r2, r3
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80e1 	beq.w	8008eb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	f000 8083 	beq.w	8008e04 <HAL_RCC_GetSysClockFreq+0x204>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	f200 80a1 	bhi.w	8008e48 <HAL_RCC_GetSysClockFreq+0x248>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <HAL_RCC_GetSysClockFreq+0x114>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d056      	beq.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d12:	e099      	b.n	8008e48 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d14:	4b6f      	ldr	r3, [pc, #444]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d02d      	beq.n	8008d7c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d20:	4b6c      	ldr	r3, [pc, #432]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	08db      	lsrs	r3, r3, #3
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	4a6b      	ldr	r2, [pc, #428]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d30:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4a:	4b62      	ldr	r3, [pc, #392]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008d7a:	e087      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	ee07 3a90 	vmov	s15, r3
 8008d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ee8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8e:	4b51      	ldr	r3, [pc, #324]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008da2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dbe:	e065      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	ee07 3a90 	vmov	s15, r3
 8008dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008eec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd2:	4b40      	ldr	r3, [pc, #256]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008de6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e02:	e043      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ef0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e16:	4b2f      	ldr	r3, [pc, #188]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e46:	e021      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008eec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5a:	4b1e      	ldr	r3, [pc, #120]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ee4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e8a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008e8c:	4b11      	ldr	r3, [pc, #68]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	0a5b      	lsrs	r3, r3, #9
 8008e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e96:	3301      	adds	r3, #1
 8008e98:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	ee07 3a90 	vmov	s15, r3
 8008ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eb0:	ee17 3a90 	vmov	r3, s15
 8008eb4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008eb6:	e005      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]
    break;
 8008ebc:	e002      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008ebe:	4b07      	ldr	r3, [pc, #28]	; (8008edc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ec0:	61bb      	str	r3, [r7, #24]
    break;
 8008ec2:	bf00      	nop
  }

  return sysclockfreq;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3724      	adds	r7, #36	; 0x24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	58024400 	.word	0x58024400
 8008ed8:	03d09000 	.word	0x03d09000
 8008edc:	003d0900 	.word	0x003d0900
 8008ee0:	017d7840 	.word	0x017d7840
 8008ee4:	46000000 	.word	0x46000000
 8008ee8:	4c742400 	.word	0x4c742400
 8008eec:	4a742400 	.word	0x4a742400
 8008ef0:	4bbebc20 	.word	0x4bbebc20

08008ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008efa:	f7ff fe81 	bl	8008c00 <HAL_RCC_GetSysClockFreq>
 8008efe:	4602      	mov	r2, r0
 8008f00:	4b10      	ldr	r3, [pc, #64]	; (8008f44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	0a1b      	lsrs	r3, r3, #8
 8008f06:	f003 030f 	and.w	r3, r3, #15
 8008f0a:	490f      	ldr	r1, [pc, #60]	; (8008f48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f0c:	5ccb      	ldrb	r3, [r1, r3]
 8008f0e:	f003 031f 	and.w	r3, r3, #31
 8008f12:	fa22 f303 	lsr.w	r3, r2, r3
 8008f16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	4a09      	ldr	r2, [pc, #36]	; (8008f48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f22:	5cd3      	ldrb	r3, [r2, r3]
 8008f24:	f003 031f 	and.w	r3, r3, #31
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2e:	4a07      	ldr	r2, [pc, #28]	; (8008f4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f32:	4a07      	ldr	r2, [pc, #28]	; (8008f50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f38:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	58024400 	.word	0x58024400
 8008f48:	080127c8 	.word	0x080127c8
 8008f4c:	240000f4 	.word	0x240000f4
 8008f50:	240000f0 	.word	0x240000f0

08008f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f58:	f7ff ffcc 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	091b      	lsrs	r3, r3, #4
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	4904      	ldr	r1, [pc, #16]	; (8008f7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f6a:	5ccb      	ldrb	r3, [r1, r3]
 8008f6c:	f003 031f 	and.w	r3, r3, #31
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	58024400 	.word	0x58024400
 8008f7c:	080127c8 	.word	0x080127c8

08008f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f84:	f7ff ffb6 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	f003 0307 	and.w	r3, r3, #7
 8008f94:	4904      	ldr	r1, [pc, #16]	; (8008fa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f96:	5ccb      	ldrb	r3, [r1, r3]
 8008f98:	f003 031f 	and.w	r3, r3, #31
 8008f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	080127c8 	.word	0x080127c8

08008fac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fb8:	2300      	movs	r3, #0
 8008fba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d03f      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fd0:	d02a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fd6:	d824      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fdc:	d018      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fe2:	d81e      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fec:	d007      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008fee:	e018      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff0:	4ba3      	ldr	r3, [pc, #652]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4aa2      	ldr	r2, [pc, #648]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ffc:	e015      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3304      	adds	r3, #4
 8009002:	2102      	movs	r1, #2
 8009004:	4618      	mov	r0, r3
 8009006:	f001 f9d5 	bl	800a3b4 <RCCEx_PLL2_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800900e:	e00c      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3324      	adds	r3, #36	; 0x24
 8009014:	2102      	movs	r1, #2
 8009016:	4618      	mov	r0, r3
 8009018:	f001 fa7e 	bl	800a518 <RCCEx_PLL3_Config>
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009020:	e003      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
      break;
 8009026:	e000      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d109      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009030:	4b93      	ldr	r3, [pc, #588]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800903c:	4990      	ldr	r1, [pc, #576]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800903e:	4313      	orrs	r3, r2
 8009040:	650b      	str	r3, [r1, #80]	; 0x50
 8009042:	e001      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009050:	2b00      	cmp	r3, #0
 8009052:	d03d      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009058:	2b04      	cmp	r3, #4
 800905a:	d826      	bhi.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800905c:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009062:	bf00      	nop
 8009064:	08009079 	.word	0x08009079
 8009068:	08009087 	.word	0x08009087
 800906c:	08009099 	.word	0x08009099
 8009070:	080090b1 	.word	0x080090b1
 8009074:	080090b1 	.word	0x080090b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009078:	4b81      	ldr	r3, [pc, #516]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	4a80      	ldr	r2, [pc, #512]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800907e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009084:	e015      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3304      	adds	r3, #4
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f001 f991 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009096:	e00c      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3324      	adds	r3, #36	; 0x24
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 fa3a 	bl	800a518 <RCCEx_PLL3_Config>
 80090a4:	4603      	mov	r3, r0
 80090a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	75fb      	strb	r3, [r7, #23]
      break;
 80090ae:	e000      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80090b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d109      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090b8:	4b71      	ldr	r3, [pc, #452]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090bc:	f023 0207 	bic.w	r2, r3, #7
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c4:	496e      	ldr	r1, [pc, #440]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	650b      	str	r3, [r1, #80]	; 0x50
 80090ca:	e001      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d042      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e4:	d02b      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80090e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ea:	d825      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80090ec:	2bc0      	cmp	r3, #192	; 0xc0
 80090ee:	d028      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80090f0:	2bc0      	cmp	r3, #192	; 0xc0
 80090f2:	d821      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80090f4:	2b80      	cmp	r3, #128	; 0x80
 80090f6:	d016      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80090f8:	2b80      	cmp	r3, #128	; 0x80
 80090fa:	d81d      	bhi.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009100:	2b40      	cmp	r3, #64	; 0x40
 8009102:	d007      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009104:	e018      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009106:	4b5e      	ldr	r3, [pc, #376]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	4a5d      	ldr	r2, [pc, #372]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800910c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009110:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009112:	e017      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3304      	adds	r3, #4
 8009118:	2100      	movs	r1, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f001 f94a 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009120:	4603      	mov	r3, r0
 8009122:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009124:	e00e      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3324      	adds	r3, #36	; 0x24
 800912a:	2100      	movs	r1, #0
 800912c:	4618      	mov	r0, r3
 800912e:	f001 f9f3 	bl	800a518 <RCCEx_PLL3_Config>
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009136:	e005      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	75fb      	strb	r3, [r7, #23]
      break;
 800913c:	e002      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d109      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800914a:	4b4d      	ldr	r3, [pc, #308]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800914c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009156:	494a      	ldr	r1, [pc, #296]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009158:	4313      	orrs	r3, r2
 800915a:	650b      	str	r3, [r1, #80]	; 0x50
 800915c:	e001      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800916a:	2b00      	cmp	r3, #0
 800916c:	d049      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009178:	d030      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800917a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800917e:	d82a      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009180:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009184:	d02c      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009186:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800918a:	d824      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800918c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009190:	d018      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009196:	d81e      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800919c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091a0:	d007      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80091a2:	e018      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a4:	4b36      	ldr	r3, [pc, #216]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	4a35      	ldr	r2, [pc, #212]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091b0:	e017      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3304      	adds	r3, #4
 80091b6:	2100      	movs	r1, #0
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 f8fb 	bl	800a3b4 <RCCEx_PLL2_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80091c2:	e00e      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3324      	adds	r3, #36	; 0x24
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 f9a4 	bl	800a518 <RCCEx_PLL3_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091d4:	e005      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
      break;
 80091da:	e002      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80091e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80091e8:	4b25      	ldr	r3, [pc, #148]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091f6:	4922      	ldr	r1, [pc, #136]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	658b      	str	r3, [r1, #88]	; 0x58
 80091fc:	e001      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800920a:	2b00      	cmp	r3, #0
 800920c:	d04b      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009218:	d030      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800921a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800921e:	d82a      	bhi.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009224:	d02e      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009226:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800922a:	d824      	bhi.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800922c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009230:	d018      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009236:	d81e      	bhi.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d003      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800923c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009240:	d007      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009242:	e018      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4a0d      	ldr	r2, [pc, #52]	; (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800924a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800924e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009250:	e019      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3304      	adds	r3, #4
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f8ab 	bl	800a3b4 <RCCEx_PLL2_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009262:	e010      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3324      	adds	r3, #36	; 0x24
 8009268:	2100      	movs	r1, #0
 800926a:	4618      	mov	r0, r3
 800926c:	f001 f954 	bl	800a518 <RCCEx_PLL3_Config>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009274:	e007      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	75fb      	strb	r3, [r7, #23]
      break;
 800927a:	e004      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800927c:	bf00      	nop
 800927e:	e002      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009280:	58024400 	.word	0x58024400
      break;
 8009284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800928c:	4b99      	ldr	r3, [pc, #612]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800928e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009290:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800929a:	4996      	ldr	r1, [pc, #600]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800929c:	4313      	orrs	r3, r2
 800929e:	658b      	str	r3, [r1, #88]	; 0x58
 80092a0:	e001      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d032      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b6:	2b30      	cmp	r3, #48	; 0x30
 80092b8:	d01c      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80092ba:	2b30      	cmp	r3, #48	; 0x30
 80092bc:	d817      	bhi.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80092be:	2b20      	cmp	r3, #32
 80092c0:	d00c      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	d813      	bhi.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d016      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80092ca:	2b10      	cmp	r3, #16
 80092cc:	d10f      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ce:	4b89      	ldr	r3, [pc, #548]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d2:	4a88      	ldr	r2, [pc, #544]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80092da:	e00e      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3304      	adds	r3, #4
 80092e0:	2102      	movs	r1, #2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f001 f866 	bl	800a3b4 <RCCEx_PLL2_Config>
 80092e8:	4603      	mov	r3, r0
 80092ea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80092ec:	e005      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
      break;
 80092f2:	e002      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80092f4:	bf00      	nop
 80092f6:	e000      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80092f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d109      	bne.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009300:	4b7c      	ldr	r3, [pc, #496]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800930c:	4979      	ldr	r1, [pc, #484]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800930e:	4313      	orrs	r3, r2
 8009310:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009312:	e001      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d047      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800932c:	d030      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800932e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009332:	d82a      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009338:	d02c      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800933a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800933e:	d824      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009344:	d018      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800934a:	d81e      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009354:	d007      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009356:	e018      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009358:	4b66      	ldr	r3, [pc, #408]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	4a65      	ldr	r2, [pc, #404]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800935e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009364:	e017      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3304      	adds	r3, #4
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f821 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009372:	4603      	mov	r3, r0
 8009374:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009376:	e00e      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f001 f8ca 	bl	800a518 <RCCEx_PLL3_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009388:	e005      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
      break;
 800938e:	e002      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009390:	bf00      	nop
 8009392:	e000      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009396:	7dfb      	ldrb	r3, [r7, #23]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800939c:	4b55      	ldr	r3, [pc, #340]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a8:	4952      	ldr	r1, [pc, #328]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	650b      	str	r3, [r1, #80]	; 0x50
 80093ae:	e001      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d049      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093c8:	d02e      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80093ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093ce:	d828      	bhi.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80093d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093d4:	d02a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80093d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093da:	d822      	bhi.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80093dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093e0:	d026      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80093e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093e6:	d81c      	bhi.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80093e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093ec:	d010      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80093ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093f2:	d816      	bhi.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01d      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80093f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fc:	d111      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3304      	adds	r3, #4
 8009402:	2101      	movs	r1, #1
 8009404:	4618      	mov	r0, r3
 8009406:	f000 ffd5 	bl	800a3b4 <RCCEx_PLL2_Config>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800940e:	e012      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3324      	adds	r3, #36	; 0x24
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f001 f87e 	bl	800a518 <RCCEx_PLL3_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009420:	e009      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	75fb      	strb	r3, [r7, #23]
      break;
 8009426:	e006      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009428:	bf00      	nop
 800942a:	e004      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800942c:	bf00      	nop
 800942e:	e002      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009430:	bf00      	nop
 8009432:	e000      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d109      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800943c:	4b2d      	ldr	r3, [pc, #180]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800943e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009440:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009448:	492a      	ldr	r1, [pc, #168]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800944a:	4313      	orrs	r3, r2
 800944c:	650b      	str	r3, [r1, #80]	; 0x50
 800944e:	e001      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d04d      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800946a:	d02e      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800946c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009470:	d828      	bhi.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009476:	d02a      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947c:	d822      	bhi.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800947e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009482:	d026      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009484:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009488:	d81c      	bhi.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800948a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800948e:	d010      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009494:	d816      	bhi.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01d      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800949a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800949e:	d111      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3304      	adds	r3, #4
 80094a4:	2101      	movs	r1, #1
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 ff84 	bl	800a3b4 <RCCEx_PLL2_Config>
 80094ac:	4603      	mov	r3, r0
 80094ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80094b0:	e012      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3324      	adds	r3, #36	; 0x24
 80094b6:	2101      	movs	r1, #1
 80094b8:	4618      	mov	r0, r3
 80094ba:	f001 f82d 	bl	800a518 <RCCEx_PLL3_Config>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80094c2:	e009      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
      break;
 80094c8:	e006      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80094ca:	bf00      	nop
 80094cc:	e004      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80094ce:	bf00      	nop
 80094d0:	e002      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80094d2:	bf00      	nop
 80094d4:	e000      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80094d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10c      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80094ec:	4901      	ldr	r1, [pc, #4]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	658b      	str	r3, [r1, #88]	; 0x58
 80094f2:	e003      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80094f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d02f      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800950c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009510:	d00e      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009516:	d814      	bhi.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d015      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800951c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009520:	d10f      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009522:	4baf      	ldr	r3, [pc, #700]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	4aae      	ldr	r2, [pc, #696]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800952c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800952e:	e00c      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	2101      	movs	r1, #1
 8009536:	4618      	mov	r0, r3
 8009538:	f000 ff3c 	bl	800a3b4 <RCCEx_PLL2_Config>
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009540:	e003      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	75fb      	strb	r3, [r7, #23]
      break;
 8009546:	e000      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d109      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009550:	4ba3      	ldr	r3, [pc, #652]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009554:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955c:	49a0      	ldr	r1, [pc, #640]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800955e:	4313      	orrs	r3, r2
 8009560:	650b      	str	r3, [r1, #80]	; 0x50
 8009562:	e001      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d032      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009578:	2b03      	cmp	r3, #3
 800957a:	d81b      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800957c:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800957e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009582:	bf00      	nop
 8009584:	080095bb 	.word	0x080095bb
 8009588:	08009595 	.word	0x08009595
 800958c:	080095a3 	.word	0x080095a3
 8009590:	080095bb 	.word	0x080095bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009594:	4b92      	ldr	r3, [pc, #584]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	4a91      	ldr	r2, [pc, #580]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800959a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80095a0:	e00c      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3304      	adds	r3, #4
 80095a6:	2102      	movs	r1, #2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 ff03 	bl	800a3b4 <RCCEx_PLL2_Config>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80095b2:	e003      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]
      break;
 80095b8:	e000      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80095ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095c2:	4b87      	ldr	r3, [pc, #540]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095c6:	f023 0203 	bic.w	r2, r3, #3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ce:	4984      	ldr	r1, [pc, #528]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80095d4:	e001      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 8086 	beq.w	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095e8:	4b7e      	ldr	r3, [pc, #504]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a7d      	ldr	r2, [pc, #500]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80095ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095f4:	f7fd fc08 	bl	8006e08 <HAL_GetTick>
 80095f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095fa:	e009      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095fc:	f7fd fc04 	bl	8006e08 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	2b64      	cmp	r3, #100	; 0x64
 8009608:	d902      	bls.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	75fb      	strb	r3, [r7, #23]
        break;
 800960e:	e005      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009610:	4b74      	ldr	r3, [pc, #464]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0ef      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d166      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009622:	4b6f      	ldr	r3, [pc, #444]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800962c:	4053      	eors	r3, r2
 800962e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009632:	2b00      	cmp	r3, #0
 8009634:	d013      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009636:	4b6a      	ldr	r3, [pc, #424]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800963e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009640:	4b67      	ldr	r3, [pc, #412]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009644:	4a66      	ldr	r2, [pc, #408]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800964a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800964c:	4b64      	ldr	r3, [pc, #400]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800964e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009650:	4a63      	ldr	r2, [pc, #396]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009656:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009658:	4a61      	ldr	r2, [pc, #388]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009668:	d115      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800966a:	f7fd fbcd 	bl	8006e08 <HAL_GetTick>
 800966e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009670:	e00b      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009672:	f7fd fbc9 	bl	8006e08 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009680:	4293      	cmp	r3, r2
 8009682:	d902      	bls.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	75fb      	strb	r3, [r7, #23]
            break;
 8009688:	e005      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800968a:	4b55      	ldr	r3, [pc, #340]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800968c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0ed      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d126      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096aa:	d10d      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80096ac:	4b4c      	ldr	r3, [pc, #304]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096ba:	0919      	lsrs	r1, r3, #4
 80096bc:	4b4a      	ldr	r3, [pc, #296]	; (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80096be:	400b      	ands	r3, r1
 80096c0:	4947      	ldr	r1, [pc, #284]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	610b      	str	r3, [r1, #16]
 80096c6:	e005      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80096c8:	4b45      	ldr	r3, [pc, #276]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	4a44      	ldr	r2, [pc, #272]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096d2:	6113      	str	r3, [r2, #16]
 80096d4:	4b42      	ldr	r3, [pc, #264]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096e2:	493f      	ldr	r1, [pc, #252]	; (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	670b      	str	r3, [r1, #112]	; 0x70
 80096e8:	e004      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	75bb      	strb	r3, [r7, #22]
 80096ee:	e001      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 8085 	beq.w	800980c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009706:	2b28      	cmp	r3, #40	; 0x28
 8009708:	d866      	bhi.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800970a:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	080097ed 	.word	0x080097ed
 8009714:	080097d9 	.word	0x080097d9
 8009718:	080097d9 	.word	0x080097d9
 800971c:	080097d9 	.word	0x080097d9
 8009720:	080097d9 	.word	0x080097d9
 8009724:	080097d9 	.word	0x080097d9
 8009728:	080097d9 	.word	0x080097d9
 800972c:	080097d9 	.word	0x080097d9
 8009730:	080097b5 	.word	0x080097b5
 8009734:	080097d9 	.word	0x080097d9
 8009738:	080097d9 	.word	0x080097d9
 800973c:	080097d9 	.word	0x080097d9
 8009740:	080097d9 	.word	0x080097d9
 8009744:	080097d9 	.word	0x080097d9
 8009748:	080097d9 	.word	0x080097d9
 800974c:	080097d9 	.word	0x080097d9
 8009750:	080097c7 	.word	0x080097c7
 8009754:	080097d9 	.word	0x080097d9
 8009758:	080097d9 	.word	0x080097d9
 800975c:	080097d9 	.word	0x080097d9
 8009760:	080097d9 	.word	0x080097d9
 8009764:	080097d9 	.word	0x080097d9
 8009768:	080097d9 	.word	0x080097d9
 800976c:	080097d9 	.word	0x080097d9
 8009770:	080097ed 	.word	0x080097ed
 8009774:	080097d9 	.word	0x080097d9
 8009778:	080097d9 	.word	0x080097d9
 800977c:	080097d9 	.word	0x080097d9
 8009780:	080097d9 	.word	0x080097d9
 8009784:	080097d9 	.word	0x080097d9
 8009788:	080097d9 	.word	0x080097d9
 800978c:	080097d9 	.word	0x080097d9
 8009790:	080097ed 	.word	0x080097ed
 8009794:	080097d9 	.word	0x080097d9
 8009798:	080097d9 	.word	0x080097d9
 800979c:	080097d9 	.word	0x080097d9
 80097a0:	080097d9 	.word	0x080097d9
 80097a4:	080097d9 	.word	0x080097d9
 80097a8:	080097d9 	.word	0x080097d9
 80097ac:	080097d9 	.word	0x080097d9
 80097b0:	080097ed 	.word	0x080097ed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3304      	adds	r3, #4
 80097b8:	2101      	movs	r1, #1
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fdfa 	bl	800a3b4 <RCCEx_PLL2_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80097c4:	e013      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3324      	adds	r3, #36	; 0x24
 80097ca:	2101      	movs	r1, #1
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fea3 	bl	800a518 <RCCEx_PLL3_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80097d6:	e00a      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
      break;
 80097dc:	e007      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 80097de:	bf00      	nop
 80097e0:	58024400 	.word	0x58024400
 80097e4:	58024800 	.word	0x58024800
 80097e8:	00ffffcf 	.word	0x00ffffcf
      break;
 80097ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d109      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80097f4:	4b96      	ldr	r3, [pc, #600]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80097f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009800:	4993      	ldr	r1, [pc, #588]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009802:	4313      	orrs	r3, r2
 8009804:	654b      	str	r3, [r1, #84]	; 0x54
 8009806:	e001      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d038      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981c:	2b05      	cmp	r3, #5
 800981e:	d821      	bhi.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009820:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009826:	bf00      	nop
 8009828:	0800986b 	.word	0x0800986b
 800982c:	08009841 	.word	0x08009841
 8009830:	08009853 	.word	0x08009853
 8009834:	0800986b 	.word	0x0800986b
 8009838:	0800986b 	.word	0x0800986b
 800983c:	0800986b 	.word	0x0800986b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3304      	adds	r3, #4
 8009844:	2101      	movs	r1, #1
 8009846:	4618      	mov	r0, r3
 8009848:	f000 fdb4 	bl	800a3b4 <RCCEx_PLL2_Config>
 800984c:	4603      	mov	r3, r0
 800984e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009850:	e00c      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3324      	adds	r3, #36	; 0x24
 8009856:	2101      	movs	r1, #1
 8009858:	4618      	mov	r0, r3
 800985a:	f000 fe5d 	bl	800a518 <RCCEx_PLL3_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009862:	e003      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	75fb      	strb	r3, [r7, #23]
      break;
 8009868:	e000      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800986a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d109      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009872:	4b77      	ldr	r3, [pc, #476]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009876:	f023 0207 	bic.w	r2, r3, #7
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800987e:	4974      	ldr	r1, [pc, #464]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009880:	4313      	orrs	r3, r2
 8009882:	654b      	str	r3, [r1, #84]	; 0x54
 8009884:	e001      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	d03a      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800989c:	2b05      	cmp	r3, #5
 800989e:	d821      	bhi.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80098a0:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80098a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a6:	bf00      	nop
 80098a8:	080098eb 	.word	0x080098eb
 80098ac:	080098c1 	.word	0x080098c1
 80098b0:	080098d3 	.word	0x080098d3
 80098b4:	080098eb 	.word	0x080098eb
 80098b8:	080098eb 	.word	0x080098eb
 80098bc:	080098eb 	.word	0x080098eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3304      	adds	r3, #4
 80098c4:	2101      	movs	r1, #1
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fd74 	bl	800a3b4 <RCCEx_PLL2_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80098d0:	e00c      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3324      	adds	r3, #36	; 0x24
 80098d6:	2101      	movs	r1, #1
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fe1d 	bl	800a518 <RCCEx_PLL3_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80098e2:	e003      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]
      break;
 80098e8:	e000      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80098ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10a      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098f2:	4b57      	ldr	r3, [pc, #348]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f6:	f023 0207 	bic.w	r2, r3, #7
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009900:	4953      	ldr	r1, [pc, #332]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009902:	4313      	orrs	r3, r2
 8009904:	658b      	str	r3, [r1, #88]	; 0x58
 8009906:	e001      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	d04b      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800991e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009922:	d02e      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009928:	d828      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800992a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992e:	d02a      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009934:	d822      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800993a:	d026      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800993c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009940:	d81c      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009946:	d010      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800994c:	d816      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01d      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009956:	d111      	bne.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3304      	adds	r3, #4
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fd28 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009964:	4603      	mov	r3, r0
 8009966:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009968:	e012      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	3324      	adds	r3, #36	; 0x24
 800996e:	2102      	movs	r1, #2
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fdd1 	bl	800a518 <RCCEx_PLL3_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800997a:	e009      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	75fb      	strb	r3, [r7, #23]
      break;
 8009980:	e006      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009982:	bf00      	nop
 8009984:	e004      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009986:	bf00      	nop
 8009988:	e002      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800998e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009996:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a4:	492a      	ldr	r1, [pc, #168]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	654b      	str	r3, [r1, #84]	; 0x54
 80099aa:	e001      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d04d      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80099c6:	d02e      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80099c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80099cc:	d828      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80099ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d2:	d02a      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80099d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d8:	d822      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80099da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099de:	d026      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80099e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099e4:	d81c      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80099e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099ea:	d010      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80099ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099f0:	d816      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d01d      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80099f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099fa:	d111      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3304      	adds	r3, #4
 8009a00:	2100      	movs	r1, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fcd6 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a0c:	e012      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3324      	adds	r3, #36	; 0x24
 8009a12:	2102      	movs	r1, #2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fd7f 	bl	800a518 <RCCEx_PLL3_Config>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a1e:	e009      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	75fb      	strb	r3, [r7, #23]
      break;
 8009a24:	e006      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009a26:	bf00      	nop
 8009a28:	e004      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e002      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009a2e:	bf00      	nop
 8009a30:	e000      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10c      	bne.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a48:	4901      	ldr	r1, [pc, #4]	; (8009a50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8009a4e:	e003      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d04b      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a6e:	d02e      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009a70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a74:	d828      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a7a:	d02a      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a80:	d822      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009a82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a86:	d026      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009a88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a8c:	d81c      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a92:	d010      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a98:	d816      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d01d      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aa2:	d111      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 fc82 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ab4:	e012      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3324      	adds	r3, #36	; 0x24
 8009aba:	2102      	movs	r1, #2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fd2b 	bl	800a518 <RCCEx_PLL3_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ac6:	e009      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	75fb      	strb	r3, [r7, #23]
      break;
 8009acc:	e006      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009ace:	bf00      	nop
 8009ad0:	e004      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009ad2:	bf00      	nop
 8009ad4:	e002      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009ad6:	bf00      	nop
 8009ad8:	e000      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ae2:	4b9d      	ldr	r3, [pc, #628]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009af0:	4999      	ldr	r1, [pc, #612]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	658b      	str	r3, [r1, #88]	; 0x58
 8009af6:	e001      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0308 	and.w	r3, r3, #8
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d01a      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b12:	d10a      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3324      	adds	r3, #36	; 0x24
 8009b18:	2102      	movs	r1, #2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 fcfc 	bl	800a518 <RCCEx_PLL3_Config>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b2a:	4b8b      	ldr	r3, [pc, #556]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b38:	4987      	ldr	r1, [pc, #540]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d01a      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b54:	d10a      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3324      	adds	r3, #36	; 0x24
 8009b5a:	2102      	movs	r1, #2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 fcdb 	bl	800a518 <RCCEx_PLL3_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b6c:	4b7a      	ldr	r3, [pc, #488]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b7a:	4977      	ldr	r1, [pc, #476]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d034      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b96:	d01d      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b9c:	d817      	bhi.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ba6:	d009      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009ba8:	e011      	b.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3304      	adds	r3, #4
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fbff 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009bba:	e00c      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3324      	adds	r3, #36	; 0x24
 8009bc0:	2102      	movs	r1, #2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fca8 	bl	800a518 <RCCEx_PLL3_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009bcc:	e003      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd2:	e000      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bdc:	4b5e      	ldr	r3, [pc, #376]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009bea:	495b      	ldr	r1, [pc, #364]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	658b      	str	r3, [r1, #88]	; 0x58
 8009bf0:	e001      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d033      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c0c:	d01c      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c12:	d816      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c18:	d003      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c1e:	d007      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009c20:	e00f      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c22:	4b4d      	ldr	r3, [pc, #308]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	4a4c      	ldr	r2, [pc, #304]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009c2e:	e00c      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3324      	adds	r3, #36	; 0x24
 8009c34:	2101      	movs	r1, #1
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fc6e 	bl	800a518 <RCCEx_PLL3_Config>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009c40:	e003      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	75fb      	strb	r3, [r7, #23]
      break;
 8009c46:	e000      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c50:	4b41      	ldr	r3, [pc, #260]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c5e:	493e      	ldr	r1, [pc, #248]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	654b      	str	r3, [r1, #84]	; 0x54
 8009c64:	e001      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c66:	7dfb      	ldrb	r3, [r7, #23]
 8009c68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d029      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c82:	d007      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009c84:	e00f      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c86:	4b34      	ldr	r3, [pc, #208]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8a:	4a33      	ldr	r2, [pc, #204]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009c92:	e00b      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3304      	adds	r3, #4
 8009c98:	2102      	movs	r1, #2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fb8a 	bl	800a3b4 <RCCEx_PLL2_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ca4:	e002      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8009caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d109      	bne.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009cb2:	4b29      	ldr	r3, [pc, #164]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cbe:	4926      	ldr	r1, [pc, #152]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cc4:	e001      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3324      	adds	r3, #36	; 0x24
 8009cda:	2102      	movs	r1, #2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fc1b 	bl	800a518 <RCCEx_PLL3_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d033      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d00:	d017      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d06:	d811      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0c:	d013      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d12:	d80b      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d010      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1c:	d106      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1e:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	4a0d      	ldr	r2, [pc, #52]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009d2a:	e007      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d30:	e004      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009d32:	bf00      	nop
 8009d34:	e002      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009d36:	bf00      	nop
 8009d38:	e000      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10c      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d4e:	4902      	ldr	r1, [pc, #8]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	654b      	str	r3, [r1, #84]	; 0x54
 8009d54:	e004      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009d56:	bf00      	nop
 8009d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d008      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d6c:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	492e      	ldr	r1, [pc, #184]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009d8a:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d98:	4926      	ldr	r1, [pc, #152]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009daa:	4b22      	ldr	r3, [pc, #136]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009db6:	491f      	ldr	r1, [pc, #124]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00d      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dc8:	4b1a      	ldr	r3, [pc, #104]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	4a19      	ldr	r2, [pc, #100]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dd2:	6113      	str	r3, [r2, #16]
 8009dd4:	4b17      	ldr	r3, [pc, #92]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dd6:	691a      	ldr	r2, [r3, #16]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009dde:	4915      	ldr	r1, [pc, #84]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	da08      	bge.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009dec:	4b11      	ldr	r3, [pc, #68]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df8:	490e      	ldr	r1, [pc, #56]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d009      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e0a:	4b0a      	ldr	r3, [pc, #40]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e18:	4906      	ldr	r1, [pc, #24]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009e1e:	7dbb      	ldrb	r3, [r7, #22]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e000      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400

08009e38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e3c:	f7ff f85a 	bl	8008ef4 <HAL_RCC_GetHCLKFreq>
 8009e40:	4602      	mov	r2, r0
 8009e42:	4b06      	ldr	r3, [pc, #24]	; (8009e5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	091b      	lsrs	r3, r3, #4
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	4904      	ldr	r1, [pc, #16]	; (8009e60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009e4e:	5ccb      	ldrb	r3, [r1, r3]
 8009e50:	f003 031f 	and.w	r3, r3, #31
 8009e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	58024400 	.word	0x58024400
 8009e60:	080127c8 	.word	0x080127c8

08009e64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b089      	sub	sp, #36	; 0x24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e6c:	4ba1      	ldr	r3, [pc, #644]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009e76:	4b9f      	ldr	r3, [pc, #636]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7a:	0b1b      	lsrs	r3, r3, #12
 8009e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e82:	4b9c      	ldr	r3, [pc, #624]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e86:	091b      	lsrs	r3, r3, #4
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009e8e:	4b99      	ldr	r3, [pc, #612]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e92:	08db      	lsrs	r3, r3, #3
 8009e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	fb02 f303 	mul.w	r3, r2, r3
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 8111 	beq.w	800a0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	f000 8083 	beq.w	8009fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	f200 80a1 	bhi.w	800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d056      	beq.n	8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ece:	e099      	b.n	800a004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ed0:	4b88      	ldr	r3, [pc, #544]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d02d      	beq.n	8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009edc:	4b85      	ldr	r3, [pc, #532]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	08db      	lsrs	r3, r3, #3
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	4a84      	ldr	r2, [pc, #528]	; (800a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8009eec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	ee07 3a90 	vmov	s15, r3
 8009ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	ee07 3a90 	vmov	s15, r3
 8009efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f06:	4b7b      	ldr	r3, [pc, #492]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f36:	e087      	b.n	800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a100 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f4a:	4b6a      	ldr	r3, [pc, #424]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f7a:	e065      	b.n	800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f8e:	4b59      	ldr	r3, [pc, #356]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fbe:	e043      	b.n	800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd2:	4b48      	ldr	r3, [pc, #288]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fe6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ffe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a002:	e021      	b.n	800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a016:	4b37      	ldr	r3, [pc, #220]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a026:	ed97 6a03 	vldr	s12, [r7, #12]
 800a02a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a046:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a048:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	0a5b      	lsrs	r3, r3, #9
 800a04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a062:	edd7 6a07 	vldr	s13, [r7, #28]
 800a066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a06a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a06e:	ee17 2a90 	vmov	r2, s15
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a076:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	0c1b      	lsrs	r3, r3, #16
 800a07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a08c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a090:	edd7 6a07 	vldr	s13, [r7, #28]
 800a094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a09c:	ee17 2a90 	vmov	r2, s15
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a0a4:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	0e1b      	lsrs	r3, r3, #24
 800a0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ca:	ee17 2a90 	vmov	r2, s15
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a0d2:	e008      	b.n	800a0e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	609a      	str	r2, [r3, #8]
}
 800a0e6:	bf00      	nop
 800a0e8:	3724      	adds	r7, #36	; 0x24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	03d09000 	.word	0x03d09000
 800a0fc:	46000000 	.word	0x46000000
 800a100:	4c742400 	.word	0x4c742400
 800a104:	4a742400 	.word	0x4a742400
 800a108:	4bbebc20 	.word	0x4bbebc20

0800a10c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b089      	sub	sp, #36	; 0x24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a114:	4ba1      	ldr	r3, [pc, #644]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	f003 0303 	and.w	r3, r3, #3
 800a11c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a11e:	4b9f      	ldr	r3, [pc, #636]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a122:	0d1b      	lsrs	r3, r3, #20
 800a124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a128:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a12a:	4b9c      	ldr	r3, [pc, #624]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	0a1b      	lsrs	r3, r3, #8
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a136:	4b99      	ldr	r3, [pc, #612]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a13a:	08db      	lsrs	r3, r3, #3
 800a13c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	fb02 f303 	mul.w	r3, r2, r3
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 8111 	beq.w	800a37c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	f000 8083 	beq.w	800a268 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	2b02      	cmp	r3, #2
 800a166:	f200 80a1 	bhi.w	800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d056      	beq.n	800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a176:	e099      	b.n	800a2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a178:	4b88      	ldr	r3, [pc, #544]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0320 	and.w	r3, r3, #32
 800a180:	2b00      	cmp	r3, #0
 800a182:	d02d      	beq.n	800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a184:	4b85      	ldr	r3, [pc, #532]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	08db      	lsrs	r3, r3, #3
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	4a84      	ldr	r2, [pc, #528]	; (800a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a190:	fa22 f303 	lsr.w	r3, r2, r3
 800a194:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	ee07 3a90 	vmov	s15, r3
 800a19c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ae:	4b7b      	ldr	r3, [pc, #492]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1de:	e087      	b.n	800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	ee07 3a90 	vmov	s15, r3
 800a1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a1ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1f2:	4b6a      	ldr	r3, [pc, #424]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a202:	ed97 6a03 	vldr	s12, [r7, #12]
 800a206:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a20a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a20e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a21e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a222:	e065      	b.n	800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	ee07 3a90 	vmov	s15, r3
 800a22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a22e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a236:	4b59      	ldr	r3, [pc, #356]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a23e:	ee07 3a90 	vmov	s15, r3
 800a242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a246:	ed97 6a03 	vldr	s12, [r7, #12]
 800a24a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a266:	e043      	b.n	800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a272:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a27a:	4b48      	ldr	r3, [pc, #288]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a282:	ee07 3a90 	vmov	s15, r3
 800a286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a28e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2aa:	e021      	b.n	800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2be:	4b37      	ldr	r3, [pc, #220]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c6:	ee07 3a90 	vmov	s15, r3
 800a2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a2f0:	4b2a      	ldr	r3, [pc, #168]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	0a5b      	lsrs	r3, r3, #9
 800a2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a30a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a30e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a316:	ee17 2a90 	vmov	r2, s15
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a31e:	4b1f      	ldr	r3, [pc, #124]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	0c1b      	lsrs	r3, r3, #16
 800a324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a328:	ee07 3a90 	vmov	s15, r3
 800a32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a334:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a338:	edd7 6a07 	vldr	s13, [r7, #28]
 800a33c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a344:	ee17 2a90 	vmov	r2, s15
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a34c:	4b13      	ldr	r3, [pc, #76]	; (800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	0e1b      	lsrs	r3, r3, #24
 800a352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a362:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a366:	edd7 6a07 	vldr	s13, [r7, #28]
 800a36a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a36e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a372:	ee17 2a90 	vmov	r2, s15
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a37a:	e008      	b.n	800a38e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	609a      	str	r2, [r3, #8]
}
 800a38e:	bf00      	nop
 800a390:	3724      	adds	r7, #36	; 0x24
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	58024400 	.word	0x58024400
 800a3a0:	03d09000 	.word	0x03d09000
 800a3a4:	46000000 	.word	0x46000000
 800a3a8:	4c742400 	.word	0x4c742400
 800a3ac:	4a742400 	.word	0x4a742400
 800a3b0:	4bbebc20 	.word	0x4bbebc20

0800a3b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3c2:	4b53      	ldr	r3, [pc, #332]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d101      	bne.n	800a3d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e099      	b.n	800a506 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3d2:	4b4f      	ldr	r3, [pc, #316]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a4e      	ldr	r2, [pc, #312]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a3d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3de:	f7fc fd13 	bl	8006e08 <HAL_GetTick>
 800a3e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3e4:	e008      	b.n	800a3f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3e6:	f7fc fd0f 	bl	8006e08 <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d901      	bls.n	800a3f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e086      	b.n	800a506 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3f8:	4b45      	ldr	r3, [pc, #276]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1f0      	bne.n	800a3e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a404:	4b42      	ldr	r3, [pc, #264]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a408:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	031b      	lsls	r3, r3, #12
 800a412:	493f      	ldr	r1, [pc, #252]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a414:	4313      	orrs	r3, r2
 800a416:	628b      	str	r3, [r1, #40]	; 0x28
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	3b01      	subs	r3, #1
 800a428:	025b      	lsls	r3, r3, #9
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	3b01      	subs	r3, #1
 800a434:	041b      	lsls	r3, r3, #16
 800a436:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	3b01      	subs	r3, #1
 800a442:	061b      	lsls	r3, r3, #24
 800a444:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a448:	4931      	ldr	r1, [pc, #196]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a44e:	4b30      	ldr	r3, [pc, #192]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	492d      	ldr	r1, [pc, #180]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a460:	4b2b      	ldr	r3, [pc, #172]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	f023 0220 	bic.w	r2, r3, #32
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	4928      	ldr	r1, [pc, #160]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a472:	4b27      	ldr	r3, [pc, #156]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a476:	4a26      	ldr	r2, [pc, #152]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a478:	f023 0310 	bic.w	r3, r3, #16
 800a47c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a47e:	4b24      	ldr	r3, [pc, #144]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a482:	4b24      	ldr	r3, [pc, #144]	; (800a514 <RCCEx_PLL2_Config+0x160>)
 800a484:	4013      	ands	r3, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	69d2      	ldr	r2, [r2, #28]
 800a48a:	00d2      	lsls	r2, r2, #3
 800a48c:	4920      	ldr	r1, [pc, #128]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a492:	4b1f      	ldr	r3, [pc, #124]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a496:	4a1e      	ldr	r2, [pc, #120]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a498:	f043 0310 	orr.w	r3, r3, #16
 800a49c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d106      	bne.n	800a4b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a4a4:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a8:	4a19      	ldr	r2, [pc, #100]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4b0:	e00f      	b.n	800a4d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d106      	bne.n	800a4c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4b8:	4b15      	ldr	r3, [pc, #84]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4bc:	4a14      	ldr	r2, [pc, #80]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4c4:	e005      	b.n	800a4d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4c6:	4b12      	ldr	r3, [pc, #72]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ca:	4a11      	ldr	r2, [pc, #68]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4d2:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a0e      	ldr	r2, [pc, #56]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4de:	f7fc fc93 	bl	8006e08 <HAL_GetTick>
 800a4e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4e4:	e008      	b.n	800a4f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a4e6:	f7fc fc8f 	bl	8006e08 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d901      	bls.n	800a4f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e006      	b.n	800a506 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <RCCEx_PLL2_Config+0x15c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0f0      	beq.n	800a4e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a504:	7bfb      	ldrb	r3, [r7, #15]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	58024400 	.word	0x58024400
 800a514:	ffff0007 	.word	0xffff0007

0800a518 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a526:	4b53      	ldr	r3, [pc, #332]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d101      	bne.n	800a536 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e099      	b.n	800a66a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a536:	4b4f      	ldr	r3, [pc, #316]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a4e      	ldr	r2, [pc, #312]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a53c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a542:	f7fc fc61 	bl	8006e08 <HAL_GetTick>
 800a546:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a548:	e008      	b.n	800a55c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a54a:	f7fc fc5d 	bl	8006e08 <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	2b02      	cmp	r3, #2
 800a556:	d901      	bls.n	800a55c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	e086      	b.n	800a66a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a55c:	4b45      	ldr	r3, [pc, #276]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1f0      	bne.n	800a54a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a568:	4b42      	ldr	r3, [pc, #264]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	051b      	lsls	r3, r3, #20
 800a576:	493f      	ldr	r1, [pc, #252]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	628b      	str	r3, [r1, #40]	; 0x28
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	3b01      	subs	r3, #1
 800a582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	025b      	lsls	r3, r3, #9
 800a58e:	b29b      	uxth	r3, r3
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	3b01      	subs	r3, #1
 800a598:	041b      	lsls	r3, r3, #16
 800a59a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	061b      	lsls	r3, r3, #24
 800a5a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5ac:	4931      	ldr	r1, [pc, #196]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5b2:	4b30      	ldr	r3, [pc, #192]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	492d      	ldr	r1, [pc, #180]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5c4:	4b2b      	ldr	r3, [pc, #172]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	4928      	ldr	r1, [pc, #160]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5d6:	4b27      	ldr	r3, [pc, #156]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5da:	4a26      	ldr	r2, [pc, #152]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5e2:	4b24      	ldr	r3, [pc, #144]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5e6:	4b24      	ldr	r3, [pc, #144]	; (800a678 <RCCEx_PLL3_Config+0x160>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	69d2      	ldr	r2, [r2, #28]
 800a5ee:	00d2      	lsls	r2, r2, #3
 800a5f0:	4920      	ldr	r1, [pc, #128]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5f6:	4b1f      	ldr	r3, [pc, #124]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fa:	4a1e      	ldr	r2, [pc, #120]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a5fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a600:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d106      	bne.n	800a616 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a608:	4b1a      	ldr	r3, [pc, #104]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	4a19      	ldr	r2, [pc, #100]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a60e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a612:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a614:	e00f      	b.n	800a636 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d106      	bne.n	800a62a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a61c:	4b15      	ldr	r3, [pc, #84]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	4a14      	ldr	r2, [pc, #80]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a626:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a628:	e005      	b.n	800a636 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a62a:	4b12      	ldr	r3, [pc, #72]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	4a11      	ldr	r2, [pc, #68]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a634:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a636:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a0e      	ldr	r2, [pc, #56]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a63c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a642:	f7fc fbe1 	bl	8006e08 <HAL_GetTick>
 800a646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a648:	e008      	b.n	800a65c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a64a:	f7fc fbdd 	bl	8006e08 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e006      	b.n	800a66a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a65c:	4b05      	ldr	r3, [pc, #20]	; (800a674 <RCCEx_PLL3_Config+0x15c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0f0      	beq.n	800a64a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	58024400 	.word	0x58024400
 800a678:	ffff0007 	.word	0xffff0007

0800a67c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e049      	b.n	800a722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d106      	bne.n	800a6a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7fa f88e 	bl	80047c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	f001 fb16 	bl	800bcec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d001      	beq.n	800a744 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e04c      	b.n	800a7de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a26      	ldr	r2, [pc, #152]	; (800a7ec <HAL_TIM_Base_Start+0xc0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d022      	beq.n	800a79c <HAL_TIM_Base_Start+0x70>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a75e:	d01d      	beq.n	800a79c <HAL_TIM_Base_Start+0x70>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a22      	ldr	r2, [pc, #136]	; (800a7f0 <HAL_TIM_Base_Start+0xc4>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d018      	beq.n	800a79c <HAL_TIM_Base_Start+0x70>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a21      	ldr	r2, [pc, #132]	; (800a7f4 <HAL_TIM_Base_Start+0xc8>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d013      	beq.n	800a79c <HAL_TIM_Base_Start+0x70>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a1f      	ldr	r2, [pc, #124]	; (800a7f8 <HAL_TIM_Base_Start+0xcc>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d00e      	beq.n	800a79c <HAL_TIM_Base_Start+0x70>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a1e      	ldr	r2, [pc, #120]	; (800a7fc <HAL_TIM_Base_Start+0xd0>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d009      	beq.n	800a79c <HAL_TIM_Base_Start+0x70>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a1c      	ldr	r2, [pc, #112]	; (800a800 <HAL_TIM_Base_Start+0xd4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d004      	beq.n	800a79c <HAL_TIM_Base_Start+0x70>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a1b      	ldr	r2, [pc, #108]	; (800a804 <HAL_TIM_Base_Start+0xd8>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d115      	bne.n	800a7c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	4b19      	ldr	r3, [pc, #100]	; (800a808 <HAL_TIM_Base_Start+0xdc>)
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2b06      	cmp	r3, #6
 800a7ac:	d015      	beq.n	800a7da <HAL_TIM_Base_Start+0xae>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b4:	d011      	beq.n	800a7da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f042 0201 	orr.w	r2, r2, #1
 800a7c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7c6:	e008      	b.n	800a7da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0201 	orr.w	r2, r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	e000      	b.n	800a7dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40010000 	.word	0x40010000
 800a7f0:	40000400 	.word	0x40000400
 800a7f4:	40000800 	.word	0x40000800
 800a7f8:	40000c00 	.word	0x40000c00
 800a7fc:	40010400 	.word	0x40010400
 800a800:	40001800 	.word	0x40001800
 800a804:	40014000 	.word	0x40014000
 800a808:	00010007 	.word	0x00010007

0800a80c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6a1a      	ldr	r2, [r3, #32]
 800a81a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a81e:	4013      	ands	r3, r2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10f      	bne.n	800a844 <HAL_TIM_Base_Stop+0x38>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6a1a      	ldr	r2, [r3, #32]
 800a82a:	f240 4344 	movw	r3, #1092	; 0x444
 800a82e:	4013      	ands	r3, r2
 800a830:	2b00      	cmp	r3, #0
 800a832:	d107      	bne.n	800a844 <HAL_TIM_Base_Stop+0x38>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f022 0201 	bic.w	r2, r2, #1
 800a842:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
	...

0800a85c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d001      	beq.n	800a874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e054      	b.n	800a91e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68da      	ldr	r2, [r3, #12]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a26      	ldr	r2, [pc, #152]	; (800a92c <HAL_TIM_Base_Start_IT+0xd0>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d022      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x80>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89e:	d01d      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x80>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a22      	ldr	r2, [pc, #136]	; (800a930 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d018      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x80>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a21      	ldr	r2, [pc, #132]	; (800a934 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d013      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x80>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a1f      	ldr	r2, [pc, #124]	; (800a938 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d00e      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x80>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a1e      	ldr	r2, [pc, #120]	; (800a93c <HAL_TIM_Base_Start_IT+0xe0>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d009      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x80>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a1c      	ldr	r2, [pc, #112]	; (800a940 <HAL_TIM_Base_Start_IT+0xe4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d004      	beq.n	800a8dc <HAL_TIM_Base_Start_IT+0x80>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a1b      	ldr	r2, [pc, #108]	; (800a944 <HAL_TIM_Base_Start_IT+0xe8>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d115      	bne.n	800a908 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689a      	ldr	r2, [r3, #8]
 800a8e2:	4b19      	ldr	r3, [pc, #100]	; (800a948 <HAL_TIM_Base_Start_IT+0xec>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b06      	cmp	r3, #6
 800a8ec:	d015      	beq.n	800a91a <HAL_TIM_Base_Start_IT+0xbe>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f4:	d011      	beq.n	800a91a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f042 0201 	orr.w	r2, r2, #1
 800a904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a906:	e008      	b.n	800a91a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0201 	orr.w	r2, r2, #1
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	e000      	b.n	800a91c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a91a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	40010000 	.word	0x40010000
 800a930:	40000400 	.word	0x40000400
 800a934:	40000800 	.word	0x40000800
 800a938:	40000c00 	.word	0x40000c00
 800a93c:	40010400 	.word	0x40010400
 800a940:	40001800 	.word	0x40001800
 800a944:	40014000 	.word	0x40014000
 800a948:	00010007 	.word	0x00010007

0800a94c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f022 0201 	bic.w	r2, r2, #1
 800a962:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6a1a      	ldr	r2, [r3, #32]
 800a96a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a96e:	4013      	ands	r3, r2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10f      	bne.n	800a994 <HAL_TIM_Base_Stop_IT+0x48>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a1a      	ldr	r2, [r3, #32]
 800a97a:	f240 4344 	movw	r3, #1092	; 0x444
 800a97e:	4013      	ands	r3, r2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d107      	bne.n	800a994 <HAL_TIM_Base_Stop_IT+0x48>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f022 0201 	bic.w	r2, r2, #1
 800a992:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e049      	b.n	800aa50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f841 	bl	800aa58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	f001 f97f 	bl	800bcec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <HAL_TIM_PWM_Start+0x24>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	bf14      	ite	ne
 800aa88:	2301      	movne	r3, #1
 800aa8a:	2300      	moveq	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	e03c      	b.n	800ab0a <HAL_TIM_PWM_Start+0x9e>
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	d109      	bne.n	800aaaa <HAL_TIM_PWM_Start+0x3e>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	bf14      	ite	ne
 800aaa2:	2301      	movne	r3, #1
 800aaa4:	2300      	moveq	r3, #0
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	e02f      	b.n	800ab0a <HAL_TIM_PWM_Start+0x9e>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b08      	cmp	r3, #8
 800aaae:	d109      	bne.n	800aac4 <HAL_TIM_PWM_Start+0x58>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	bf14      	ite	ne
 800aabc:	2301      	movne	r3, #1
 800aabe:	2300      	moveq	r3, #0
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	e022      	b.n	800ab0a <HAL_TIM_PWM_Start+0x9e>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2b0c      	cmp	r3, #12
 800aac8:	d109      	bne.n	800aade <HAL_TIM_PWM_Start+0x72>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	bf14      	ite	ne
 800aad6:	2301      	movne	r3, #1
 800aad8:	2300      	moveq	r3, #0
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	e015      	b.n	800ab0a <HAL_TIM_PWM_Start+0x9e>
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b10      	cmp	r3, #16
 800aae2:	d109      	bne.n	800aaf8 <HAL_TIM_PWM_Start+0x8c>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	bf14      	ite	ne
 800aaf0:	2301      	movne	r3, #1
 800aaf2:	2300      	moveq	r3, #0
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	e008      	b.n	800ab0a <HAL_TIM_PWM_Start+0x9e>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	bf14      	ite	ne
 800ab04:	2301      	movne	r3, #1
 800ab06:	2300      	moveq	r3, #0
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e0a1      	b.n	800ac56 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d104      	bne.n	800ab22 <HAL_TIM_PWM_Start+0xb6>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab20:	e023      	b.n	800ab6a <HAL_TIM_PWM_Start+0xfe>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d104      	bne.n	800ab32 <HAL_TIM_PWM_Start+0xc6>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab30:	e01b      	b.n	800ab6a <HAL_TIM_PWM_Start+0xfe>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d104      	bne.n	800ab42 <HAL_TIM_PWM_Start+0xd6>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab40:	e013      	b.n	800ab6a <HAL_TIM_PWM_Start+0xfe>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b0c      	cmp	r3, #12
 800ab46:	d104      	bne.n	800ab52 <HAL_TIM_PWM_Start+0xe6>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab50:	e00b      	b.n	800ab6a <HAL_TIM_PWM_Start+0xfe>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b10      	cmp	r3, #16
 800ab56:	d104      	bne.n	800ab62 <HAL_TIM_PWM_Start+0xf6>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab60:	e003      	b.n	800ab6a <HAL_TIM_PWM_Start+0xfe>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2202      	movs	r2, #2
 800ab66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f001 fedc 	bl	800c930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a38      	ldr	r2, [pc, #224]	; (800ac60 <HAL_TIM_PWM_Start+0x1f4>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d013      	beq.n	800abaa <HAL_TIM_PWM_Start+0x13e>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a37      	ldr	r2, [pc, #220]	; (800ac64 <HAL_TIM_PWM_Start+0x1f8>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00e      	beq.n	800abaa <HAL_TIM_PWM_Start+0x13e>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a35      	ldr	r2, [pc, #212]	; (800ac68 <HAL_TIM_PWM_Start+0x1fc>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d009      	beq.n	800abaa <HAL_TIM_PWM_Start+0x13e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a34      	ldr	r2, [pc, #208]	; (800ac6c <HAL_TIM_PWM_Start+0x200>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d004      	beq.n	800abaa <HAL_TIM_PWM_Start+0x13e>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a32      	ldr	r2, [pc, #200]	; (800ac70 <HAL_TIM_PWM_Start+0x204>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d101      	bne.n	800abae <HAL_TIM_PWM_Start+0x142>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <HAL_TIM_PWM_Start+0x144>
 800abae:	2300      	movs	r3, #0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d007      	beq.n	800abc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a25      	ldr	r2, [pc, #148]	; (800ac60 <HAL_TIM_PWM_Start+0x1f4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d022      	beq.n	800ac14 <HAL_TIM_PWM_Start+0x1a8>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd6:	d01d      	beq.n	800ac14 <HAL_TIM_PWM_Start+0x1a8>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a25      	ldr	r2, [pc, #148]	; (800ac74 <HAL_TIM_PWM_Start+0x208>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d018      	beq.n	800ac14 <HAL_TIM_PWM_Start+0x1a8>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a24      	ldr	r2, [pc, #144]	; (800ac78 <HAL_TIM_PWM_Start+0x20c>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d013      	beq.n	800ac14 <HAL_TIM_PWM_Start+0x1a8>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a22      	ldr	r2, [pc, #136]	; (800ac7c <HAL_TIM_PWM_Start+0x210>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d00e      	beq.n	800ac14 <HAL_TIM_PWM_Start+0x1a8>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a1a      	ldr	r2, [pc, #104]	; (800ac64 <HAL_TIM_PWM_Start+0x1f8>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d009      	beq.n	800ac14 <HAL_TIM_PWM_Start+0x1a8>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a1e      	ldr	r2, [pc, #120]	; (800ac80 <HAL_TIM_PWM_Start+0x214>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d004      	beq.n	800ac14 <HAL_TIM_PWM_Start+0x1a8>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a16      	ldr	r2, [pc, #88]	; (800ac68 <HAL_TIM_PWM_Start+0x1fc>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d115      	bne.n	800ac40 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689a      	ldr	r2, [r3, #8]
 800ac1a:	4b1a      	ldr	r3, [pc, #104]	; (800ac84 <HAL_TIM_PWM_Start+0x218>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2b06      	cmp	r3, #6
 800ac24:	d015      	beq.n	800ac52 <HAL_TIM_PWM_Start+0x1e6>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac2c:	d011      	beq.n	800ac52 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f042 0201 	orr.w	r2, r2, #1
 800ac3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac3e:	e008      	b.n	800ac52 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f042 0201 	orr.w	r2, r2, #1
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	e000      	b.n	800ac54 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	40010000 	.word	0x40010000
 800ac64:	40010400 	.word	0x40010400
 800ac68:	40014000 	.word	0x40014000
 800ac6c:	40014400 	.word	0x40014400
 800ac70:	40014800 	.word	0x40014800
 800ac74:	40000400 	.word	0x40000400
 800ac78:	40000800 	.word	0x40000800
 800ac7c:	40000c00 	.word	0x40000c00
 800ac80:	40001800 	.word	0x40001800
 800ac84:	00010007 	.word	0x00010007

0800ac88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2200      	movs	r2, #0
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 fe48 	bl	800c930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a3e      	ldr	r2, [pc, #248]	; (800ada0 <HAL_TIM_PWM_Stop+0x118>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d013      	beq.n	800acd2 <HAL_TIM_PWM_Stop+0x4a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a3d      	ldr	r2, [pc, #244]	; (800ada4 <HAL_TIM_PWM_Stop+0x11c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d00e      	beq.n	800acd2 <HAL_TIM_PWM_Stop+0x4a>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a3b      	ldr	r2, [pc, #236]	; (800ada8 <HAL_TIM_PWM_Stop+0x120>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d009      	beq.n	800acd2 <HAL_TIM_PWM_Stop+0x4a>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a3a      	ldr	r2, [pc, #232]	; (800adac <HAL_TIM_PWM_Stop+0x124>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d004      	beq.n	800acd2 <HAL_TIM_PWM_Stop+0x4a>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a38      	ldr	r2, [pc, #224]	; (800adb0 <HAL_TIM_PWM_Stop+0x128>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d101      	bne.n	800acd6 <HAL_TIM_PWM_Stop+0x4e>
 800acd2:	2301      	movs	r3, #1
 800acd4:	e000      	b.n	800acd8 <HAL_TIM_PWM_Stop+0x50>
 800acd6:	2300      	movs	r3, #0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d017      	beq.n	800ad0c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6a1a      	ldr	r2, [r3, #32]
 800ace2:	f241 1311 	movw	r3, #4369	; 0x1111
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10f      	bne.n	800ad0c <HAL_TIM_PWM_Stop+0x84>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6a1a      	ldr	r2, [r3, #32]
 800acf2:	f240 4344 	movw	r3, #1092	; 0x444
 800acf6:	4013      	ands	r3, r2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d107      	bne.n	800ad0c <HAL_TIM_PWM_Stop+0x84>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6a1a      	ldr	r2, [r3, #32]
 800ad12:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad16:	4013      	ands	r3, r2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10f      	bne.n	800ad3c <HAL_TIM_PWM_Stop+0xb4>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6a1a      	ldr	r2, [r3, #32]
 800ad22:	f240 4344 	movw	r3, #1092	; 0x444
 800ad26:	4013      	ands	r3, r2
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d107      	bne.n	800ad3c <HAL_TIM_PWM_Stop+0xb4>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0201 	bic.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d104      	bne.n	800ad4c <HAL_TIM_PWM_Stop+0xc4>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad4a:	e023      	b.n	800ad94 <HAL_TIM_PWM_Stop+0x10c>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b04      	cmp	r3, #4
 800ad50:	d104      	bne.n	800ad5c <HAL_TIM_PWM_Stop+0xd4>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad5a:	e01b      	b.n	800ad94 <HAL_TIM_PWM_Stop+0x10c>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d104      	bne.n	800ad6c <HAL_TIM_PWM_Stop+0xe4>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad6a:	e013      	b.n	800ad94 <HAL_TIM_PWM_Stop+0x10c>
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2b0c      	cmp	r3, #12
 800ad70:	d104      	bne.n	800ad7c <HAL_TIM_PWM_Stop+0xf4>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad7a:	e00b      	b.n	800ad94 <HAL_TIM_PWM_Stop+0x10c>
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	2b10      	cmp	r3, #16
 800ad80:	d104      	bne.n	800ad8c <HAL_TIM_PWM_Stop+0x104>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad8a:	e003      	b.n	800ad94 <HAL_TIM_PWM_Stop+0x10c>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	40010000 	.word	0x40010000
 800ada4:	40010400 	.word	0x40010400
 800ada8:	40014000 	.word	0x40014000
 800adac:	40014400 	.word	0x40014400
 800adb0:	40014800 	.word	0x40014800

0800adb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e049      	b.n	800ae5a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f841 	bl	800ae62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	3304      	adds	r3, #4
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f000 ff7a 	bl	800bcec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ae6a:	bf00      	nop
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
	...

0800ae78 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <HAL_TIM_IC_Start+0x1a>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	e023      	b.n	800aeda <HAL_TIM_IC_Start+0x62>
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d104      	bne.n	800aea2 <HAL_TIM_IC_Start+0x2a>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	e01b      	b.n	800aeda <HAL_TIM_IC_Start+0x62>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d104      	bne.n	800aeb2 <HAL_TIM_IC_Start+0x3a>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	e013      	b.n	800aeda <HAL_TIM_IC_Start+0x62>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b0c      	cmp	r3, #12
 800aeb6:	d104      	bne.n	800aec2 <HAL_TIM_IC_Start+0x4a>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	e00b      	b.n	800aeda <HAL_TIM_IC_Start+0x62>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b10      	cmp	r3, #16
 800aec6:	d104      	bne.n	800aed2 <HAL_TIM_IC_Start+0x5a>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	e003      	b.n	800aeda <HAL_TIM_IC_Start+0x62>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d104      	bne.n	800aeec <HAL_TIM_IC_Start+0x74>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	e013      	b.n	800af14 <HAL_TIM_IC_Start+0x9c>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d104      	bne.n	800aefc <HAL_TIM_IC_Start+0x84>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	e00b      	b.n	800af14 <HAL_TIM_IC_Start+0x9c>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b08      	cmp	r3, #8
 800af00:	d104      	bne.n	800af0c <HAL_TIM_IC_Start+0x94>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	e003      	b.n	800af14 <HAL_TIM_IC_Start+0x9c>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800af12:	b2db      	uxtb	r3, r3
 800af14:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d102      	bne.n	800af22 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d001      	beq.n	800af26 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e097      	b.n	800b056 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <HAL_TIM_IC_Start+0xbe>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af34:	e023      	b.n	800af7e <HAL_TIM_IC_Start+0x106>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d104      	bne.n	800af46 <HAL_TIM_IC_Start+0xce>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2202      	movs	r2, #2
 800af40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af44:	e01b      	b.n	800af7e <HAL_TIM_IC_Start+0x106>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	2b08      	cmp	r3, #8
 800af4a:	d104      	bne.n	800af56 <HAL_TIM_IC_Start+0xde>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2202      	movs	r2, #2
 800af50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af54:	e013      	b.n	800af7e <HAL_TIM_IC_Start+0x106>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b0c      	cmp	r3, #12
 800af5a:	d104      	bne.n	800af66 <HAL_TIM_IC_Start+0xee>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2202      	movs	r2, #2
 800af60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af64:	e00b      	b.n	800af7e <HAL_TIM_IC_Start+0x106>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2b10      	cmp	r3, #16
 800af6a:	d104      	bne.n	800af76 <HAL_TIM_IC_Start+0xfe>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2202      	movs	r2, #2
 800af70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af74:	e003      	b.n	800af7e <HAL_TIM_IC_Start+0x106>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2202      	movs	r2, #2
 800af7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d104      	bne.n	800af8e <HAL_TIM_IC_Start+0x116>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2202      	movs	r2, #2
 800af88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af8c:	e013      	b.n	800afb6 <HAL_TIM_IC_Start+0x13e>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b04      	cmp	r3, #4
 800af92:	d104      	bne.n	800af9e <HAL_TIM_IC_Start+0x126>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af9c:	e00b      	b.n	800afb6 <HAL_TIM_IC_Start+0x13e>
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d104      	bne.n	800afae <HAL_TIM_IC_Start+0x136>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afac:	e003      	b.n	800afb6 <HAL_TIM_IC_Start+0x13e>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2202      	movs	r2, #2
 800afb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2201      	movs	r2, #1
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f001 fcb6 	bl	800c930 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a25      	ldr	r2, [pc, #148]	; (800b060 <HAL_TIM_IC_Start+0x1e8>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d022      	beq.n	800b014 <HAL_TIM_IC_Start+0x19c>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afd6:	d01d      	beq.n	800b014 <HAL_TIM_IC_Start+0x19c>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a21      	ldr	r2, [pc, #132]	; (800b064 <HAL_TIM_IC_Start+0x1ec>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d018      	beq.n	800b014 <HAL_TIM_IC_Start+0x19c>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a20      	ldr	r2, [pc, #128]	; (800b068 <HAL_TIM_IC_Start+0x1f0>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d013      	beq.n	800b014 <HAL_TIM_IC_Start+0x19c>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a1e      	ldr	r2, [pc, #120]	; (800b06c <HAL_TIM_IC_Start+0x1f4>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d00e      	beq.n	800b014 <HAL_TIM_IC_Start+0x19c>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a1d      	ldr	r2, [pc, #116]	; (800b070 <HAL_TIM_IC_Start+0x1f8>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d009      	beq.n	800b014 <HAL_TIM_IC_Start+0x19c>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a1b      	ldr	r2, [pc, #108]	; (800b074 <HAL_TIM_IC_Start+0x1fc>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d004      	beq.n	800b014 <HAL_TIM_IC_Start+0x19c>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a1a      	ldr	r2, [pc, #104]	; (800b078 <HAL_TIM_IC_Start+0x200>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d115      	bne.n	800b040 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	689a      	ldr	r2, [r3, #8]
 800b01a:	4b18      	ldr	r3, [pc, #96]	; (800b07c <HAL_TIM_IC_Start+0x204>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b06      	cmp	r3, #6
 800b024:	d015      	beq.n	800b052 <HAL_TIM_IC_Start+0x1da>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b02c:	d011      	beq.n	800b052 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f042 0201 	orr.w	r2, r2, #1
 800b03c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b03e:	e008      	b.n	800b052 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f042 0201 	orr.w	r2, r2, #1
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	e000      	b.n	800b054 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	40010000 	.word	0x40010000
 800b064:	40000400 	.word	0x40000400
 800b068:	40000800 	.word	0x40000800
 800b06c:	40000c00 	.word	0x40000c00
 800b070:	40010400 	.word	0x40010400
 800b074:	40001800 	.word	0x40001800
 800b078:	40014000 	.word	0x40014000
 800b07c:	00010007 	.word	0x00010007

0800b080 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d104      	bne.n	800b09e <HAL_TIM_IC_Start_IT+0x1e>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	e023      	b.n	800b0e6 <HAL_TIM_IC_Start_IT+0x66>
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b04      	cmp	r3, #4
 800b0a2:	d104      	bne.n	800b0ae <HAL_TIM_IC_Start_IT+0x2e>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	e01b      	b.n	800b0e6 <HAL_TIM_IC_Start_IT+0x66>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	d104      	bne.n	800b0be <HAL_TIM_IC_Start_IT+0x3e>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	e013      	b.n	800b0e6 <HAL_TIM_IC_Start_IT+0x66>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b0c      	cmp	r3, #12
 800b0c2:	d104      	bne.n	800b0ce <HAL_TIM_IC_Start_IT+0x4e>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	e00b      	b.n	800b0e6 <HAL_TIM_IC_Start_IT+0x66>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	d104      	bne.n	800b0de <HAL_TIM_IC_Start_IT+0x5e>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	e003      	b.n	800b0e6 <HAL_TIM_IC_Start_IT+0x66>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d104      	bne.n	800b0f8 <HAL_TIM_IC_Start_IT+0x78>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	e013      	b.n	800b120 <HAL_TIM_IC_Start_IT+0xa0>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d104      	bne.n	800b108 <HAL_TIM_IC_Start_IT+0x88>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b104:	b2db      	uxtb	r3, r3
 800b106:	e00b      	b.n	800b120 <HAL_TIM_IC_Start_IT+0xa0>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b08      	cmp	r3, #8
 800b10c:	d104      	bne.n	800b118 <HAL_TIM_IC_Start_IT+0x98>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b114:	b2db      	uxtb	r3, r3
 800b116:	e003      	b.n	800b120 <HAL_TIM_IC_Start_IT+0xa0>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d102      	bne.n	800b12e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b128:	7b7b      	ldrb	r3, [r7, #13]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d001      	beq.n	800b132 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e0e2      	b.n	800b2f8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d104      	bne.n	800b142 <HAL_TIM_IC_Start_IT+0xc2>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b140:	e023      	b.n	800b18a <HAL_TIM_IC_Start_IT+0x10a>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b04      	cmp	r3, #4
 800b146:	d104      	bne.n	800b152 <HAL_TIM_IC_Start_IT+0xd2>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b150:	e01b      	b.n	800b18a <HAL_TIM_IC_Start_IT+0x10a>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b08      	cmp	r3, #8
 800b156:	d104      	bne.n	800b162 <HAL_TIM_IC_Start_IT+0xe2>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b160:	e013      	b.n	800b18a <HAL_TIM_IC_Start_IT+0x10a>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b0c      	cmp	r3, #12
 800b166:	d104      	bne.n	800b172 <HAL_TIM_IC_Start_IT+0xf2>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b170:	e00b      	b.n	800b18a <HAL_TIM_IC_Start_IT+0x10a>
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b10      	cmp	r3, #16
 800b176:	d104      	bne.n	800b182 <HAL_TIM_IC_Start_IT+0x102>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2202      	movs	r2, #2
 800b17c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b180:	e003      	b.n	800b18a <HAL_TIM_IC_Start_IT+0x10a>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2202      	movs	r2, #2
 800b186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d104      	bne.n	800b19a <HAL_TIM_IC_Start_IT+0x11a>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b198:	e013      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x142>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d104      	bne.n	800b1aa <HAL_TIM_IC_Start_IT+0x12a>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1a8:	e00b      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x142>
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b08      	cmp	r3, #8
 800b1ae:	d104      	bne.n	800b1ba <HAL_TIM_IC_Start_IT+0x13a>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1b8:	e003      	b.n	800b1c2 <HAL_TIM_IC_Start_IT+0x142>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b0c      	cmp	r3, #12
 800b1c6:	d841      	bhi.n	800b24c <HAL_TIM_IC_Start_IT+0x1cc>
 800b1c8:	a201      	add	r2, pc, #4	; (adr r2, 800b1d0 <HAL_TIM_IC_Start_IT+0x150>)
 800b1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ce:	bf00      	nop
 800b1d0:	0800b205 	.word	0x0800b205
 800b1d4:	0800b24d 	.word	0x0800b24d
 800b1d8:	0800b24d 	.word	0x0800b24d
 800b1dc:	0800b24d 	.word	0x0800b24d
 800b1e0:	0800b217 	.word	0x0800b217
 800b1e4:	0800b24d 	.word	0x0800b24d
 800b1e8:	0800b24d 	.word	0x0800b24d
 800b1ec:	0800b24d 	.word	0x0800b24d
 800b1f0:	0800b229 	.word	0x0800b229
 800b1f4:	0800b24d 	.word	0x0800b24d
 800b1f8:	0800b24d 	.word	0x0800b24d
 800b1fc:	0800b24d 	.word	0x0800b24d
 800b200:	0800b23b 	.word	0x0800b23b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0202 	orr.w	r2, r2, #2
 800b212:	60da      	str	r2, [r3, #12]
      break;
 800b214:	e01d      	b.n	800b252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68da      	ldr	r2, [r3, #12]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0204 	orr.w	r2, r2, #4
 800b224:	60da      	str	r2, [r3, #12]
      break;
 800b226:	e014      	b.n	800b252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0208 	orr.w	r2, r2, #8
 800b236:	60da      	str	r2, [r3, #12]
      break;
 800b238:	e00b      	b.n	800b252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68da      	ldr	r2, [r3, #12]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f042 0210 	orr.w	r2, r2, #16
 800b248:	60da      	str	r2, [r3, #12]
      break;
 800b24a:	e002      	b.n	800b252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]
      break;
 800b250:	bf00      	nop
  }

  if (status == HAL_OK)
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d14e      	bne.n	800b2f6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2201      	movs	r2, #1
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	4618      	mov	r0, r3
 800b262:	f001 fb65 	bl	800c930 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a25      	ldr	r2, [pc, #148]	; (800b300 <HAL_TIM_IC_Start_IT+0x280>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d022      	beq.n	800b2b6 <HAL_TIM_IC_Start_IT+0x236>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b278:	d01d      	beq.n	800b2b6 <HAL_TIM_IC_Start_IT+0x236>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a21      	ldr	r2, [pc, #132]	; (800b304 <HAL_TIM_IC_Start_IT+0x284>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d018      	beq.n	800b2b6 <HAL_TIM_IC_Start_IT+0x236>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a1f      	ldr	r2, [pc, #124]	; (800b308 <HAL_TIM_IC_Start_IT+0x288>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d013      	beq.n	800b2b6 <HAL_TIM_IC_Start_IT+0x236>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a1e      	ldr	r2, [pc, #120]	; (800b30c <HAL_TIM_IC_Start_IT+0x28c>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d00e      	beq.n	800b2b6 <HAL_TIM_IC_Start_IT+0x236>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a1c      	ldr	r2, [pc, #112]	; (800b310 <HAL_TIM_IC_Start_IT+0x290>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d009      	beq.n	800b2b6 <HAL_TIM_IC_Start_IT+0x236>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a1b      	ldr	r2, [pc, #108]	; (800b314 <HAL_TIM_IC_Start_IT+0x294>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d004      	beq.n	800b2b6 <HAL_TIM_IC_Start_IT+0x236>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a19      	ldr	r2, [pc, #100]	; (800b318 <HAL_TIM_IC_Start_IT+0x298>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d115      	bne.n	800b2e2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	4b17      	ldr	r3, [pc, #92]	; (800b31c <HAL_TIM_IC_Start_IT+0x29c>)
 800b2be:	4013      	ands	r3, r2
 800b2c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b06      	cmp	r3, #6
 800b2c6:	d015      	beq.n	800b2f4 <HAL_TIM_IC_Start_IT+0x274>
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ce:	d011      	beq.n	800b2f4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0201 	orr.w	r2, r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e0:	e008      	b.n	800b2f4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f042 0201 	orr.w	r2, r2, #1
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	e000      	b.n	800b2f6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	40010000 	.word	0x40010000
 800b304:	40000400 	.word	0x40000400
 800b308:	40000800 	.word	0x40000800
 800b30c:	40000c00 	.word	0x40000c00
 800b310:	40010400 	.word	0x40010400
 800b314:	40001800 	.word	0x40001800
 800b318:	40014000 	.word	0x40014000
 800b31c:	00010007 	.word	0x00010007

0800b320 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b0c      	cmp	r3, #12
 800b332:	d841      	bhi.n	800b3b8 <HAL_TIM_IC_Stop_IT+0x98>
 800b334:	a201      	add	r2, pc, #4	; (adr r2, 800b33c <HAL_TIM_IC_Stop_IT+0x1c>)
 800b336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33a:	bf00      	nop
 800b33c:	0800b371 	.word	0x0800b371
 800b340:	0800b3b9 	.word	0x0800b3b9
 800b344:	0800b3b9 	.word	0x0800b3b9
 800b348:	0800b3b9 	.word	0x0800b3b9
 800b34c:	0800b383 	.word	0x0800b383
 800b350:	0800b3b9 	.word	0x0800b3b9
 800b354:	0800b3b9 	.word	0x0800b3b9
 800b358:	0800b3b9 	.word	0x0800b3b9
 800b35c:	0800b395 	.word	0x0800b395
 800b360:	0800b3b9 	.word	0x0800b3b9
 800b364:	0800b3b9 	.word	0x0800b3b9
 800b368:	0800b3b9 	.word	0x0800b3b9
 800b36c:	0800b3a7 	.word	0x0800b3a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68da      	ldr	r2, [r3, #12]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f022 0202 	bic.w	r2, r2, #2
 800b37e:	60da      	str	r2, [r3, #12]
      break;
 800b380:	e01d      	b.n	800b3be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68da      	ldr	r2, [r3, #12]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f022 0204 	bic.w	r2, r2, #4
 800b390:	60da      	str	r2, [r3, #12]
      break;
 800b392:	e014      	b.n	800b3be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68da      	ldr	r2, [r3, #12]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f022 0208 	bic.w	r2, r2, #8
 800b3a2:	60da      	str	r2, [r3, #12]
      break;
 800b3a4:	e00b      	b.n	800b3be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f022 0210 	bic.w	r2, r2, #16
 800b3b4:	60da      	str	r2, [r3, #12]
      break;
 800b3b6:	e002      	b.n	800b3be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b3bc:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d166      	bne.n	800b492 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f001 faaf 	bl	800c930 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
 800b3d8:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3dc:	4013      	ands	r3, r2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10f      	bne.n	800b402 <HAL_TIM_IC_Stop_IT+0xe2>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6a1a      	ldr	r2, [r3, #32]
 800b3e8:	f240 4344 	movw	r3, #1092	; 0x444
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d107      	bne.n	800b402 <HAL_TIM_IC_Stop_IT+0xe2>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f022 0201 	bic.w	r2, r2, #1
 800b400:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d104      	bne.n	800b412 <HAL_TIM_IC_Stop_IT+0xf2>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b410:	e023      	b.n	800b45a <HAL_TIM_IC_Stop_IT+0x13a>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b04      	cmp	r3, #4
 800b416:	d104      	bne.n	800b422 <HAL_TIM_IC_Stop_IT+0x102>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b420:	e01b      	b.n	800b45a <HAL_TIM_IC_Stop_IT+0x13a>
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b08      	cmp	r3, #8
 800b426:	d104      	bne.n	800b432 <HAL_TIM_IC_Stop_IT+0x112>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b430:	e013      	b.n	800b45a <HAL_TIM_IC_Stop_IT+0x13a>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b0c      	cmp	r3, #12
 800b436:	d104      	bne.n	800b442 <HAL_TIM_IC_Stop_IT+0x122>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b440:	e00b      	b.n	800b45a <HAL_TIM_IC_Stop_IT+0x13a>
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b10      	cmp	r3, #16
 800b446:	d104      	bne.n	800b452 <HAL_TIM_IC_Stop_IT+0x132>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b450:	e003      	b.n	800b45a <HAL_TIM_IC_Stop_IT+0x13a>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d104      	bne.n	800b46a <HAL_TIM_IC_Stop_IT+0x14a>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b468:	e013      	b.n	800b492 <HAL_TIM_IC_Stop_IT+0x172>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d104      	bne.n	800b47a <HAL_TIM_IC_Stop_IT+0x15a>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b478:	e00b      	b.n	800b492 <HAL_TIM_IC_Stop_IT+0x172>
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2b08      	cmp	r3, #8
 800b47e:	d104      	bne.n	800b48a <HAL_TIM_IC_Stop_IT+0x16a>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b488:	e003      	b.n	800b492 <HAL_TIM_IC_Stop_IT+0x172>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	f003 0302 	and.w	r3, r3, #2
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d122      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d11b      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f06f 0202 	mvn.w	r2, #2
 800b4c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	f003 0303 	and.w	r3, r3, #3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7f8 f866 	bl	80035b0 <HAL_TIM_IC_CaptureCallback>
 800b4e4:	e005      	b.n	800b4f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fbe2 	bl	800bcb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fbe9 	bl	800bcc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	f003 0304 	and.w	r3, r3, #4
 800b502:	2b04      	cmp	r3, #4
 800b504:	d122      	bne.n	800b54c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b04      	cmp	r3, #4
 800b512:	d11b      	bne.n	800b54c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f06f 0204 	mvn.w	r2, #4
 800b51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2202      	movs	r2, #2
 800b522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7f8 f83c 	bl	80035b0 <HAL_TIM_IC_CaptureCallback>
 800b538:	e005      	b.n	800b546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fbb8 	bl	800bcb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fbbf 	bl	800bcc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 0308 	and.w	r3, r3, #8
 800b556:	2b08      	cmp	r3, #8
 800b558:	d122      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f003 0308 	and.w	r3, r3, #8
 800b564:	2b08      	cmp	r3, #8
 800b566:	d11b      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f06f 0208 	mvn.w	r2, #8
 800b570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2204      	movs	r2, #4
 800b576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	f003 0303 	and.w	r3, r3, #3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7f8 f812 	bl	80035b0 <HAL_TIM_IC_CaptureCallback>
 800b58c:	e005      	b.n	800b59a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fb8e 	bl	800bcb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fb95 	bl	800bcc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	f003 0310 	and.w	r3, r3, #16
 800b5aa:	2b10      	cmp	r3, #16
 800b5ac:	d122      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f003 0310 	and.w	r3, r3, #16
 800b5b8:	2b10      	cmp	r3, #16
 800b5ba:	d11b      	bne.n	800b5f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f06f 0210 	mvn.w	r2, #16
 800b5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2208      	movs	r2, #8
 800b5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7f7 ffe8 	bl	80035b0 <HAL_TIM_IC_CaptureCallback>
 800b5e0:	e005      	b.n	800b5ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fb64 	bl	800bcb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fb6b 	bl	800bcc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d10e      	bne.n	800b620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d107      	bne.n	800b620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f06f 0201 	mvn.w	r2, #1
 800b618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7f8 f850 	bl	80036c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b62a:	2b80      	cmp	r3, #128	; 0x80
 800b62c:	d10e      	bne.n	800b64c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b638:	2b80      	cmp	r3, #128	; 0x80
 800b63a:	d107      	bne.n	800b64c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 fa30 	bl	800caac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b65a:	d10e      	bne.n	800b67a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b666:	2b80      	cmp	r3, #128	; 0x80
 800b668:	d107      	bne.n	800b67a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f001 fa23 	bl	800cac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b684:	2b40      	cmp	r3, #64	; 0x40
 800b686:	d10e      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b692:	2b40      	cmp	r3, #64	; 0x40
 800b694:	d107      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fb19 	bl	800bcd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f003 0320 	and.w	r3, r3, #32
 800b6b0:	2b20      	cmp	r3, #32
 800b6b2:	d10e      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	d107      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f06f 0220 	mvn.w	r2, #32
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 f9e3 	bl	800ca98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b086      	sub	sp, #24
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e088      	b.n	800b80a <HAL_TIM_IC_ConfigChannel+0x130>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d11b      	bne.n	800b73e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6818      	ldr	r0, [r3, #0]
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	6819      	ldr	r1, [r3, #0]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	f000 ff43 	bl	800c5a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	699a      	ldr	r2, [r3, #24]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 020c 	bic.w	r2, r2, #12
 800b728:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6999      	ldr	r1, [r3, #24]
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	689a      	ldr	r2, [r3, #8]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	430a      	orrs	r2, r1
 800b73a:	619a      	str	r2, [r3, #24]
 800b73c:	e060      	b.n	800b800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b04      	cmp	r3, #4
 800b742:	d11c      	bne.n	800b77e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	6819      	ldr	r1, [r3, #0]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f000 ffc7 	bl	800c6e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	699a      	ldr	r2, [r3, #24]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b766:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6999      	ldr	r1, [r3, #24]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	021a      	lsls	r2, r3, #8
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	619a      	str	r2, [r3, #24]
 800b77c:	e040      	b.n	800b800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b08      	cmp	r3, #8
 800b782:	d11b      	bne.n	800b7bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	6819      	ldr	r1, [r3, #0]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f001 f814 	bl	800c7c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	69da      	ldr	r2, [r3, #28]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f022 020c 	bic.w	r2, r2, #12
 800b7a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69d9      	ldr	r1, [r3, #28]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	689a      	ldr	r2, [r3, #8]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	61da      	str	r2, [r3, #28]
 800b7ba:	e021      	b.n	800b800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b0c      	cmp	r3, #12
 800b7c0:	d11c      	bne.n	800b7fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6818      	ldr	r0, [r3, #0]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	6819      	ldr	r1, [r3, #0]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	685a      	ldr	r2, [r3, #4]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	f001 f831 	bl	800c838 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	69da      	ldr	r2, [r3, #28]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b7e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	69d9      	ldr	r1, [r3, #28]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	021a      	lsls	r2, r3, #8
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	61da      	str	r2, [r3, #28]
 800b7fa:	e001      	b.n	800b800 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b808:	7dfb      	ldrb	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d101      	bne.n	800b832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b82e:	2302      	movs	r3, #2
 800b830:	e0ff      	b.n	800ba32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b14      	cmp	r3, #20
 800b83e:	f200 80f0 	bhi.w	800ba22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b842:	a201      	add	r2, pc, #4	; (adr r2, 800b848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b848:	0800b89d 	.word	0x0800b89d
 800b84c:	0800ba23 	.word	0x0800ba23
 800b850:	0800ba23 	.word	0x0800ba23
 800b854:	0800ba23 	.word	0x0800ba23
 800b858:	0800b8dd 	.word	0x0800b8dd
 800b85c:	0800ba23 	.word	0x0800ba23
 800b860:	0800ba23 	.word	0x0800ba23
 800b864:	0800ba23 	.word	0x0800ba23
 800b868:	0800b91f 	.word	0x0800b91f
 800b86c:	0800ba23 	.word	0x0800ba23
 800b870:	0800ba23 	.word	0x0800ba23
 800b874:	0800ba23 	.word	0x0800ba23
 800b878:	0800b95f 	.word	0x0800b95f
 800b87c:	0800ba23 	.word	0x0800ba23
 800b880:	0800ba23 	.word	0x0800ba23
 800b884:	0800ba23 	.word	0x0800ba23
 800b888:	0800b9a1 	.word	0x0800b9a1
 800b88c:	0800ba23 	.word	0x0800ba23
 800b890:	0800ba23 	.word	0x0800ba23
 800b894:	0800ba23 	.word	0x0800ba23
 800b898:	0800b9e1 	.word	0x0800b9e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68b9      	ldr	r1, [r7, #8]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fabc 	bl	800be20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	699a      	ldr	r2, [r3, #24]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0208 	orr.w	r2, r2, #8
 800b8b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699a      	ldr	r2, [r3, #24]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f022 0204 	bic.w	r2, r2, #4
 800b8c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6999      	ldr	r1, [r3, #24]
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	691a      	ldr	r2, [r3, #16]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	619a      	str	r2, [r3, #24]
      break;
 800b8da:	e0a5      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fb2c 	bl	800bf40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	699a      	ldr	r2, [r3, #24]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	699a      	ldr	r2, [r3, #24]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6999      	ldr	r1, [r3, #24]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	021a      	lsls	r2, r3, #8
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	619a      	str	r2, [r3, #24]
      break;
 800b91c:	e084      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fb95 	bl	800c054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69da      	ldr	r2, [r3, #28]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f042 0208 	orr.w	r2, r2, #8
 800b938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f022 0204 	bic.w	r2, r2, #4
 800b948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69d9      	ldr	r1, [r3, #28]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	691a      	ldr	r2, [r3, #16]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	61da      	str	r2, [r3, #28]
      break;
 800b95c:	e064      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	4618      	mov	r0, r3
 800b966:	f000 fbfd 	bl	800c164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	69da      	ldr	r2, [r3, #28]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	69da      	ldr	r2, [r3, #28]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	69d9      	ldr	r1, [r3, #28]
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	021a      	lsls	r2, r3, #8
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	61da      	str	r2, [r3, #28]
      break;
 800b99e:	e043      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68b9      	ldr	r1, [r7, #8]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fc46 	bl	800c238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f042 0208 	orr.w	r2, r2, #8
 800b9ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f022 0204 	bic.w	r2, r2, #4
 800b9ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	691a      	ldr	r2, [r3, #16]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9de:	e023      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68b9      	ldr	r1, [r7, #8]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 fc8a 	bl	800c300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	021a      	lsls	r2, r3, #8
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba20:	e002      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	75fb      	strb	r3, [r7, #23]
      break;
 800ba26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3718      	adds	r7, #24
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop

0800ba3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d101      	bne.n	800ba58 <HAL_TIM_ConfigClockSource+0x1c>
 800ba54:	2302      	movs	r3, #2
 800ba56:	e0dc      	b.n	800bc12 <HAL_TIM_ConfigClockSource+0x1d6>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2202      	movs	r2, #2
 800ba64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	4b6a      	ldr	r3, [pc, #424]	; (800bc1c <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a64      	ldr	r2, [pc, #400]	; (800bc20 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	f000 80a9 	beq.w	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba94:	4a62      	ldr	r2, [pc, #392]	; (800bc20 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	f200 80ae 	bhi.w	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba9c:	4a61      	ldr	r2, [pc, #388]	; (800bc24 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	f000 80a1 	beq.w	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800baa4:	4a5f      	ldr	r2, [pc, #380]	; (800bc24 <HAL_TIM_ConfigClockSource+0x1e8>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	f200 80a6 	bhi.w	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baac:	4a5e      	ldr	r2, [pc, #376]	; (800bc28 <HAL_TIM_ConfigClockSource+0x1ec>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	f000 8099 	beq.w	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bab4:	4a5c      	ldr	r2, [pc, #368]	; (800bc28 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	f200 809e 	bhi.w	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800babc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bac0:	f000 8091 	beq.w	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bac4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bac8:	f200 8096 	bhi.w	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bacc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bad0:	f000 8089 	beq.w	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bad8:	f200 808e 	bhi.w	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800badc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bae0:	d03e      	beq.n	800bb60 <HAL_TIM_ConfigClockSource+0x124>
 800bae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bae6:	f200 8087 	bhi.w	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baee:	f000 8086 	beq.w	800bbfe <HAL_TIM_ConfigClockSource+0x1c2>
 800baf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf6:	d87f      	bhi.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baf8:	2b70      	cmp	r3, #112	; 0x70
 800bafa:	d01a      	beq.n	800bb32 <HAL_TIM_ConfigClockSource+0xf6>
 800bafc:	2b70      	cmp	r3, #112	; 0x70
 800bafe:	d87b      	bhi.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb00:	2b60      	cmp	r3, #96	; 0x60
 800bb02:	d050      	beq.n	800bba6 <HAL_TIM_ConfigClockSource+0x16a>
 800bb04:	2b60      	cmp	r3, #96	; 0x60
 800bb06:	d877      	bhi.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb08:	2b50      	cmp	r3, #80	; 0x50
 800bb0a:	d03c      	beq.n	800bb86 <HAL_TIM_ConfigClockSource+0x14a>
 800bb0c:	2b50      	cmp	r3, #80	; 0x50
 800bb0e:	d873      	bhi.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb10:	2b40      	cmp	r3, #64	; 0x40
 800bb12:	d058      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x18a>
 800bb14:	2b40      	cmp	r3, #64	; 0x40
 800bb16:	d86f      	bhi.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb18:	2b30      	cmp	r3, #48	; 0x30
 800bb1a:	d064      	beq.n	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb1c:	2b30      	cmp	r3, #48	; 0x30
 800bb1e:	d86b      	bhi.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	d060      	beq.n	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb24:	2b20      	cmp	r3, #32
 800bb26:	d867      	bhi.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d05c      	beq.n	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb2c:	2b10      	cmp	r3, #16
 800bb2e:	d05a      	beq.n	800bbe6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb30:	e062      	b.n	800bbf8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	6899      	ldr	r1, [r3, #8]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	f000 fed5 	bl	800c8f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	609a      	str	r2, [r3, #8]
      break;
 800bb5e:	e04f      	b.n	800bc00 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	6899      	ldr	r1, [r3, #8]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	f000 febe 	bl	800c8f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689a      	ldr	r2, [r3, #8]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb82:	609a      	str	r2, [r3, #8]
      break;
 800bb84:	e03c      	b.n	800bc00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	6859      	ldr	r1, [r3, #4]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	461a      	mov	r2, r3
 800bb94:	f000 fd78 	bl	800c688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2150      	movs	r1, #80	; 0x50
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fe88 	bl	800c8b4 <TIM_ITRx_SetConfig>
      break;
 800bba4:	e02c      	b.n	800bc00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6859      	ldr	r1, [r3, #4]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f000 fdd4 	bl	800c760 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2160      	movs	r1, #96	; 0x60
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 fe78 	bl	800c8b4 <TIM_ITRx_SetConfig>
      break;
 800bbc4:	e01c      	b.n	800bc00 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	6859      	ldr	r1, [r3, #4]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f000 fd58 	bl	800c688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2140      	movs	r1, #64	; 0x40
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f000 fe68 	bl	800c8b4 <TIM_ITRx_SetConfig>
      break;
 800bbe4:	e00c      	b.n	800bc00 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	f000 fe5f 	bl	800c8b4 <TIM_ITRx_SetConfig>
      break;
 800bbf6:	e003      	b.n	800bc00 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	73fb      	strb	r3, [r7, #15]
      break;
 800bbfc:	e000      	b.n	800bc00 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bbfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	ffceff88 	.word	0xffceff88
 800bc20:	00100040 	.word	0x00100040
 800bc24:	00100030 	.word	0x00100030
 800bc28:	00100020 	.word	0x00100020

0800bc2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d101      	bne.n	800bc44 <HAL_TIM_SlaveConfigSynchro+0x18>
 800bc40:	2302      	movs	r3, #2
 800bc42:	e031      	b.n	800bca8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fbb8 	bl	800c3cc <TIM_SlaveTimer_SetConfig>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d009      	beq.n	800bc76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	e018      	b.n	800bca8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68da      	ldr	r2, [r3, #12]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcb8:	bf00      	nop
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a40      	ldr	r2, [pc, #256]	; (800be00 <TIM_Base_SetConfig+0x114>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d013      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd0a:	d00f      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a3d      	ldr	r2, [pc, #244]	; (800be04 <TIM_Base_SetConfig+0x118>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d00b      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a3c      	ldr	r2, [pc, #240]	; (800be08 <TIM_Base_SetConfig+0x11c>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d007      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a3b      	ldr	r2, [pc, #236]	; (800be0c <TIM_Base_SetConfig+0x120>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d003      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a3a      	ldr	r2, [pc, #232]	; (800be10 <TIM_Base_SetConfig+0x124>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d108      	bne.n	800bd3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a2f      	ldr	r2, [pc, #188]	; (800be00 <TIM_Base_SetConfig+0x114>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d01f      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd4c:	d01b      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a2c      	ldr	r2, [pc, #176]	; (800be04 <TIM_Base_SetConfig+0x118>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d017      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a2b      	ldr	r2, [pc, #172]	; (800be08 <TIM_Base_SetConfig+0x11c>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d013      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a2a      	ldr	r2, [pc, #168]	; (800be0c <TIM_Base_SetConfig+0x120>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00f      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a29      	ldr	r2, [pc, #164]	; (800be10 <TIM_Base_SetConfig+0x124>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d00b      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a28      	ldr	r2, [pc, #160]	; (800be14 <TIM_Base_SetConfig+0x128>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d007      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a27      	ldr	r2, [pc, #156]	; (800be18 <TIM_Base_SetConfig+0x12c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d003      	beq.n	800bd86 <TIM_Base_SetConfig+0x9a>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a26      	ldr	r2, [pc, #152]	; (800be1c <TIM_Base_SetConfig+0x130>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d108      	bne.n	800bd98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a10      	ldr	r2, [pc, #64]	; (800be00 <TIM_Base_SetConfig+0x114>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d00f      	beq.n	800bde4 <TIM_Base_SetConfig+0xf8>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a12      	ldr	r2, [pc, #72]	; (800be10 <TIM_Base_SetConfig+0x124>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d00b      	beq.n	800bde4 <TIM_Base_SetConfig+0xf8>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a11      	ldr	r2, [pc, #68]	; (800be14 <TIM_Base_SetConfig+0x128>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d007      	beq.n	800bde4 <TIM_Base_SetConfig+0xf8>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a10      	ldr	r2, [pc, #64]	; (800be18 <TIM_Base_SetConfig+0x12c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d003      	beq.n	800bde4 <TIM_Base_SetConfig+0xf8>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a0f      	ldr	r2, [pc, #60]	; (800be1c <TIM_Base_SetConfig+0x130>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d103      	bne.n	800bdec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	691a      	ldr	r2, [r3, #16]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	615a      	str	r2, [r3, #20]
}
 800bdf2:	bf00      	nop
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	40010000 	.word	0x40010000
 800be04:	40000400 	.word	0x40000400
 800be08:	40000800 	.word	0x40000800
 800be0c:	40000c00 	.word	0x40000c00
 800be10:	40010400 	.word	0x40010400
 800be14:	40014000 	.word	0x40014000
 800be18:	40014400 	.word	0x40014400
 800be1c:	40014800 	.word	0x40014800

0800be20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	f023 0201 	bic.w	r2, r3, #1
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4b37      	ldr	r3, [pc, #220]	; (800bf28 <TIM_OC1_SetConfig+0x108>)
 800be4c:	4013      	ands	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f023 0303 	bic.w	r3, r3, #3
 800be56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	4313      	orrs	r3, r2
 800be60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f023 0302 	bic.w	r3, r3, #2
 800be68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	4313      	orrs	r3, r2
 800be72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a2d      	ldr	r2, [pc, #180]	; (800bf2c <TIM_OC1_SetConfig+0x10c>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d00f      	beq.n	800be9c <TIM_OC1_SetConfig+0x7c>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a2c      	ldr	r2, [pc, #176]	; (800bf30 <TIM_OC1_SetConfig+0x110>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d00b      	beq.n	800be9c <TIM_OC1_SetConfig+0x7c>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a2b      	ldr	r2, [pc, #172]	; (800bf34 <TIM_OC1_SetConfig+0x114>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d007      	beq.n	800be9c <TIM_OC1_SetConfig+0x7c>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a2a      	ldr	r2, [pc, #168]	; (800bf38 <TIM_OC1_SetConfig+0x118>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d003      	beq.n	800be9c <TIM_OC1_SetConfig+0x7c>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a29      	ldr	r2, [pc, #164]	; (800bf3c <TIM_OC1_SetConfig+0x11c>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d10c      	bne.n	800beb6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f023 0308 	bic.w	r3, r3, #8
 800bea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4313      	orrs	r3, r2
 800beac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f023 0304 	bic.w	r3, r3, #4
 800beb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a1c      	ldr	r2, [pc, #112]	; (800bf2c <TIM_OC1_SetConfig+0x10c>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d00f      	beq.n	800bede <TIM_OC1_SetConfig+0xbe>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a1b      	ldr	r2, [pc, #108]	; (800bf30 <TIM_OC1_SetConfig+0x110>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d00b      	beq.n	800bede <TIM_OC1_SetConfig+0xbe>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a1a      	ldr	r2, [pc, #104]	; (800bf34 <TIM_OC1_SetConfig+0x114>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d007      	beq.n	800bede <TIM_OC1_SetConfig+0xbe>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a19      	ldr	r2, [pc, #100]	; (800bf38 <TIM_OC1_SetConfig+0x118>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d003      	beq.n	800bede <TIM_OC1_SetConfig+0xbe>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a18      	ldr	r2, [pc, #96]	; (800bf3c <TIM_OC1_SetConfig+0x11c>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d111      	bne.n	800bf02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800beec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	693a      	ldr	r2, [r7, #16]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	4313      	orrs	r3, r2
 800bf00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	621a      	str	r2, [r3, #32]
}
 800bf1c:	bf00      	nop
 800bf1e:	371c      	adds	r7, #28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	fffeff8f 	.word	0xfffeff8f
 800bf2c:	40010000 	.word	0x40010000
 800bf30:	40010400 	.word	0x40010400
 800bf34:	40014000 	.word	0x40014000
 800bf38:	40014400 	.word	0x40014400
 800bf3c:	40014800 	.word	0x40014800

0800bf40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a1b      	ldr	r3, [r3, #32]
 800bf4e:	f023 0210 	bic.w	r2, r3, #16
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	4b34      	ldr	r3, [pc, #208]	; (800c03c <TIM_OC2_SetConfig+0xfc>)
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	f023 0320 	bic.w	r3, r3, #32
 800bf8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	011b      	lsls	r3, r3, #4
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a29      	ldr	r2, [pc, #164]	; (800c040 <TIM_OC2_SetConfig+0x100>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d003      	beq.n	800bfa8 <TIM_OC2_SetConfig+0x68>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a28      	ldr	r2, [pc, #160]	; (800c044 <TIM_OC2_SetConfig+0x104>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d10d      	bne.n	800bfc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	011b      	lsls	r3, r3, #4
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a1e      	ldr	r2, [pc, #120]	; (800c040 <TIM_OC2_SetConfig+0x100>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d00f      	beq.n	800bfec <TIM_OC2_SetConfig+0xac>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a1d      	ldr	r2, [pc, #116]	; (800c044 <TIM_OC2_SetConfig+0x104>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d00b      	beq.n	800bfec <TIM_OC2_SetConfig+0xac>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a1c      	ldr	r2, [pc, #112]	; (800c048 <TIM_OC2_SetConfig+0x108>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d007      	beq.n	800bfec <TIM_OC2_SetConfig+0xac>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a1b      	ldr	r2, [pc, #108]	; (800c04c <TIM_OC2_SetConfig+0x10c>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d003      	beq.n	800bfec <TIM_OC2_SetConfig+0xac>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a1a      	ldr	r2, [pc, #104]	; (800c050 <TIM_OC2_SetConfig+0x110>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d113      	bne.n	800c014 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	695b      	ldr	r3, [r3, #20]
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	4313      	orrs	r3, r2
 800c006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	4313      	orrs	r3, r2
 800c012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	621a      	str	r2, [r3, #32]
}
 800c02e:	bf00      	nop
 800c030:	371c      	adds	r7, #28
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	feff8fff 	.word	0xfeff8fff
 800c040:	40010000 	.word	0x40010000
 800c044:	40010400 	.word	0x40010400
 800c048:	40014000 	.word	0x40014000
 800c04c:	40014400 	.word	0x40014400
 800c050:	40014800 	.word	0x40014800

0800c054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c054:	b480      	push	{r7}
 800c056:	b087      	sub	sp, #28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	69db      	ldr	r3, [r3, #28]
 800c07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4b33      	ldr	r3, [pc, #204]	; (800c14c <TIM_OC3_SetConfig+0xf8>)
 800c080:	4013      	ands	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 0303 	bic.w	r3, r3, #3
 800c08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	4313      	orrs	r3, r2
 800c094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c09c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	021b      	lsls	r3, r3, #8
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a28      	ldr	r2, [pc, #160]	; (800c150 <TIM_OC3_SetConfig+0xfc>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d003      	beq.n	800c0ba <TIM_OC3_SetConfig+0x66>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a27      	ldr	r2, [pc, #156]	; (800c154 <TIM_OC3_SetConfig+0x100>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d10d      	bne.n	800c0d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	021b      	lsls	r3, r3, #8
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a1d      	ldr	r2, [pc, #116]	; (800c150 <TIM_OC3_SetConfig+0xfc>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d00f      	beq.n	800c0fe <TIM_OC3_SetConfig+0xaa>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a1c      	ldr	r2, [pc, #112]	; (800c154 <TIM_OC3_SetConfig+0x100>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00b      	beq.n	800c0fe <TIM_OC3_SetConfig+0xaa>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a1b      	ldr	r2, [pc, #108]	; (800c158 <TIM_OC3_SetConfig+0x104>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d007      	beq.n	800c0fe <TIM_OC3_SetConfig+0xaa>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a1a      	ldr	r2, [pc, #104]	; (800c15c <TIM_OC3_SetConfig+0x108>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d003      	beq.n	800c0fe <TIM_OC3_SetConfig+0xaa>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a19      	ldr	r2, [pc, #100]	; (800c160 <TIM_OC3_SetConfig+0x10c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d113      	bne.n	800c126 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	011b      	lsls	r3, r3, #4
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	4313      	orrs	r3, r2
 800c118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	011b      	lsls	r3, r3, #4
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	4313      	orrs	r3, r2
 800c124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	621a      	str	r2, [r3, #32]
}
 800c140:	bf00      	nop
 800c142:	371c      	adds	r7, #28
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	fffeff8f 	.word	0xfffeff8f
 800c150:	40010000 	.word	0x40010000
 800c154:	40010400 	.word	0x40010400
 800c158:	40014000 	.word	0x40014000
 800c15c:	40014400 	.word	0x40014400
 800c160:	40014800 	.word	0x40014800

0800c164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c164:	b480      	push	{r7}
 800c166:	b087      	sub	sp, #28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	69db      	ldr	r3, [r3, #28]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	4b24      	ldr	r3, [pc, #144]	; (800c220 <TIM_OC4_SetConfig+0xbc>)
 800c190:	4013      	ands	r3, r2
 800c192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c19a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	021b      	lsls	r3, r3, #8
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	031b      	lsls	r3, r3, #12
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a19      	ldr	r2, [pc, #100]	; (800c224 <TIM_OC4_SetConfig+0xc0>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00f      	beq.n	800c1e4 <TIM_OC4_SetConfig+0x80>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a18      	ldr	r2, [pc, #96]	; (800c228 <TIM_OC4_SetConfig+0xc4>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00b      	beq.n	800c1e4 <TIM_OC4_SetConfig+0x80>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a17      	ldr	r2, [pc, #92]	; (800c22c <TIM_OC4_SetConfig+0xc8>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d007      	beq.n	800c1e4 <TIM_OC4_SetConfig+0x80>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a16      	ldr	r2, [pc, #88]	; (800c230 <TIM_OC4_SetConfig+0xcc>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <TIM_OC4_SetConfig+0x80>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a15      	ldr	r2, [pc, #84]	; (800c234 <TIM_OC4_SetConfig+0xd0>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d109      	bne.n	800c1f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	695b      	ldr	r3, [r3, #20]
 800c1f0:	019b      	lsls	r3, r3, #6
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	621a      	str	r2, [r3, #32]
}
 800c212:	bf00      	nop
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	feff8fff 	.word	0xfeff8fff
 800c224:	40010000 	.word	0x40010000
 800c228:	40010400 	.word	0x40010400
 800c22c:	40014000 	.word	0x40014000
 800c230:	40014400 	.word	0x40014400
 800c234:	40014800 	.word	0x40014800

0800c238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	4b21      	ldr	r3, [pc, #132]	; (800c2e8 <TIM_OC5_SetConfig+0xb0>)
 800c264:	4013      	ands	r3, r2
 800c266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	4313      	orrs	r3, r2
 800c270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	041b      	lsls	r3, r3, #16
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	4313      	orrs	r3, r2
 800c284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a18      	ldr	r2, [pc, #96]	; (800c2ec <TIM_OC5_SetConfig+0xb4>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d00f      	beq.n	800c2ae <TIM_OC5_SetConfig+0x76>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a17      	ldr	r2, [pc, #92]	; (800c2f0 <TIM_OC5_SetConfig+0xb8>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d00b      	beq.n	800c2ae <TIM_OC5_SetConfig+0x76>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a16      	ldr	r2, [pc, #88]	; (800c2f4 <TIM_OC5_SetConfig+0xbc>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d007      	beq.n	800c2ae <TIM_OC5_SetConfig+0x76>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a15      	ldr	r2, [pc, #84]	; (800c2f8 <TIM_OC5_SetConfig+0xc0>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d003      	beq.n	800c2ae <TIM_OC5_SetConfig+0x76>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a14      	ldr	r2, [pc, #80]	; (800c2fc <TIM_OC5_SetConfig+0xc4>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d109      	bne.n	800c2c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	021b      	lsls	r3, r3, #8
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	697a      	ldr	r2, [r7, #20]
 800c2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	621a      	str	r2, [r3, #32]
}
 800c2dc:	bf00      	nop
 800c2de:	371c      	adds	r7, #28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	fffeff8f 	.word	0xfffeff8f
 800c2ec:	40010000 	.word	0x40010000
 800c2f0:	40010400 	.word	0x40010400
 800c2f4:	40014000 	.word	0x40014000
 800c2f8:	40014400 	.word	0x40014400
 800c2fc:	40014800 	.word	0x40014800

0800c300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c300:	b480      	push	{r7}
 800c302:	b087      	sub	sp, #28
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	4b22      	ldr	r3, [pc, #136]	; (800c3b4 <TIM_OC6_SetConfig+0xb4>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	021b      	lsls	r3, r3, #8
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	4313      	orrs	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	051b      	lsls	r3, r3, #20
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4a19      	ldr	r2, [pc, #100]	; (800c3b8 <TIM_OC6_SetConfig+0xb8>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d00f      	beq.n	800c378 <TIM_OC6_SetConfig+0x78>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4a18      	ldr	r2, [pc, #96]	; (800c3bc <TIM_OC6_SetConfig+0xbc>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d00b      	beq.n	800c378 <TIM_OC6_SetConfig+0x78>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a17      	ldr	r2, [pc, #92]	; (800c3c0 <TIM_OC6_SetConfig+0xc0>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d007      	beq.n	800c378 <TIM_OC6_SetConfig+0x78>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a16      	ldr	r2, [pc, #88]	; (800c3c4 <TIM_OC6_SetConfig+0xc4>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d003      	beq.n	800c378 <TIM_OC6_SetConfig+0x78>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a15      	ldr	r2, [pc, #84]	; (800c3c8 <TIM_OC6_SetConfig+0xc8>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d109      	bne.n	800c38c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c37e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	029b      	lsls	r3, r3, #10
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	4313      	orrs	r3, r2
 800c38a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	697a      	ldr	r2, [r7, #20]
 800c390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	693a      	ldr	r2, [r7, #16]
 800c3a4:	621a      	str	r2, [r3, #32]
}
 800c3a6:	bf00      	nop
 800c3a8:	371c      	adds	r7, #28
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	feff8fff 	.word	0xfeff8fff
 800c3b8:	40010000 	.word	0x40010000
 800c3bc:	40010400 	.word	0x40010400
 800c3c0:	40014000 	.word	0x40014000
 800c3c4:	40014400 	.word	0x40014400
 800c3c8:	40014800 	.word	0x40014800

0800c3cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	4b65      	ldr	r3, [pc, #404]	; (800c57c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800c3e6:	4013      	ands	r3, r2
 800c3e8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	4b62      	ldr	r3, [pc, #392]	; (800c580 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	4313      	orrs	r3, r2
 800c404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	4a5c      	ldr	r2, [pc, #368]	; (800c584 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800c414:	4293      	cmp	r3, r2
 800c416:	f000 80ab 	beq.w	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c41a:	4a5a      	ldr	r2, [pc, #360]	; (800c584 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	f200 80a4 	bhi.w	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c426:	f000 80a3 	beq.w	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c42a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c42e:	f200 809c 	bhi.w	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c432:	4a55      	ldr	r2, [pc, #340]	; (800c588 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800c434:	4293      	cmp	r3, r2
 800c436:	f000 809b 	beq.w	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c43a:	4a53      	ldr	r2, [pc, #332]	; (800c588 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	f200 8094 	bhi.w	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c442:	4a52      	ldr	r2, [pc, #328]	; (800c58c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800c444:	4293      	cmp	r3, r2
 800c446:	f000 8093 	beq.w	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c44a:	4a50      	ldr	r2, [pc, #320]	; (800c58c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	f200 808c 	bhi.w	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c452:	4a4f      	ldr	r2, [pc, #316]	; (800c590 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800c454:	4293      	cmp	r3, r2
 800c456:	f000 808b 	beq.w	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c45a:	4a4d      	ldr	r2, [pc, #308]	; (800c590 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	f200 8084 	bhi.w	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c462:	4a4c      	ldr	r2, [pc, #304]	; (800c594 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c464:	4293      	cmp	r3, r2
 800c466:	f000 8083 	beq.w	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c46a:	4a4a      	ldr	r2, [pc, #296]	; (800c594 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d87c      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c470:	4a49      	ldr	r2, [pc, #292]	; (800c598 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d07c      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c476:	4a48      	ldr	r2, [pc, #288]	; (800c598 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d876      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c47c:	4a47      	ldr	r2, [pc, #284]	; (800c59c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d076      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c482:	4a46      	ldr	r2, [pc, #280]	; (800c59c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d870      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c488:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c48c:	d070      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c48e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c492:	d86a      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c498:	d06a      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c49a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c49e:	d864      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c4a0:	2b70      	cmp	r3, #112	; 0x70
 800c4a2:	d01a      	beq.n	800c4da <TIM_SlaveTimer_SetConfig+0x10e>
 800c4a4:	2b70      	cmp	r3, #112	; 0x70
 800c4a6:	d860      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c4a8:	2b60      	cmp	r3, #96	; 0x60
 800c4aa:	d054      	beq.n	800c556 <TIM_SlaveTimer_SetConfig+0x18a>
 800c4ac:	2b60      	cmp	r3, #96	; 0x60
 800c4ae:	d85c      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c4b0:	2b50      	cmp	r3, #80	; 0x50
 800c4b2:	d046      	beq.n	800c542 <TIM_SlaveTimer_SetConfig+0x176>
 800c4b4:	2b50      	cmp	r3, #80	; 0x50
 800c4b6:	d858      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c4b8:	2b40      	cmp	r3, #64	; 0x40
 800c4ba:	d019      	beq.n	800c4f0 <TIM_SlaveTimer_SetConfig+0x124>
 800c4bc:	2b40      	cmp	r3, #64	; 0x40
 800c4be:	d854      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c4c0:	2b30      	cmp	r3, #48	; 0x30
 800c4c2:	d055      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c4c4:	2b30      	cmp	r3, #48	; 0x30
 800c4c6:	d850      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c4c8:	2b20      	cmp	r3, #32
 800c4ca:	d051      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c4cc:	2b20      	cmp	r3, #32
 800c4ce:	d84c      	bhi.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d04d      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c4d4:	2b10      	cmp	r3, #16
 800c4d6:	d04b      	beq.n	800c570 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c4d8:	e047      	b.n	800c56a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6818      	ldr	r0, [r3, #0]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	68d9      	ldr	r1, [r3, #12]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	689a      	ldr	r2, [r3, #8]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	691b      	ldr	r3, [r3, #16]
 800c4ea:	f000 fa01 	bl	800c8f0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800c4ee:	e040      	b.n	800c572 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b05      	cmp	r3, #5
 800c4f6:	d101      	bne.n	800c4fc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e03b      	b.n	800c574 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6a1a      	ldr	r2, [r3, #32]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f022 0201 	bic.w	r2, r2, #1
 800c512:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c522:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	011b      	lsls	r3, r3, #4
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	621a      	str	r2, [r3, #32]
      break;
 800c540:	e017      	b.n	800c572 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	6899      	ldr	r1, [r3, #8]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	461a      	mov	r2, r3
 800c550:	f000 f89a 	bl	800c688 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800c554:	e00d      	b.n	800c572 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6818      	ldr	r0, [r3, #0]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	6899      	ldr	r1, [r3, #8]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	461a      	mov	r2, r3
 800c564:	f000 f8fc 	bl	800c760 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800c568:	e003      	b.n	800c572 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	75fb      	strb	r3, [r7, #23]
      break;
 800c56e:	e000      	b.n	800c572 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800c570:	bf00      	nop
  }

  return status;
 800c572:	7dfb      	ldrb	r3, [r7, #23]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	ffcfff8f 	.word	0xffcfff8f
 800c580:	fffefff8 	.word	0xfffefff8
 800c584:	00200010 	.word	0x00200010
 800c588:	00100070 	.word	0x00100070
 800c58c:	00100060 	.word	0x00100060
 800c590:	00100050 	.word	0x00100050
 800c594:	00100040 	.word	0x00100040
 800c598:	00100030 	.word	0x00100030
 800c59c:	00100020 	.word	0x00100020

0800c5a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	f023 0201 	bic.w	r2, r3, #1
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	4a28      	ldr	r2, [pc, #160]	; (800c66c <TIM_TI1_SetConfig+0xcc>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d01b      	beq.n	800c606 <TIM_TI1_SetConfig+0x66>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5d4:	d017      	beq.n	800c606 <TIM_TI1_SetConfig+0x66>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	4a25      	ldr	r2, [pc, #148]	; (800c670 <TIM_TI1_SetConfig+0xd0>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d013      	beq.n	800c606 <TIM_TI1_SetConfig+0x66>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	4a24      	ldr	r2, [pc, #144]	; (800c674 <TIM_TI1_SetConfig+0xd4>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d00f      	beq.n	800c606 <TIM_TI1_SetConfig+0x66>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	4a23      	ldr	r2, [pc, #140]	; (800c678 <TIM_TI1_SetConfig+0xd8>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d00b      	beq.n	800c606 <TIM_TI1_SetConfig+0x66>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4a22      	ldr	r2, [pc, #136]	; (800c67c <TIM_TI1_SetConfig+0xdc>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d007      	beq.n	800c606 <TIM_TI1_SetConfig+0x66>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4a21      	ldr	r2, [pc, #132]	; (800c680 <TIM_TI1_SetConfig+0xe0>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d003      	beq.n	800c606 <TIM_TI1_SetConfig+0x66>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	4a20      	ldr	r2, [pc, #128]	; (800c684 <TIM_TI1_SetConfig+0xe4>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d101      	bne.n	800c60a <TIM_TI1_SetConfig+0x6a>
 800c606:	2301      	movs	r3, #1
 800c608:	e000      	b.n	800c60c <TIM_TI1_SetConfig+0x6c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d008      	beq.n	800c622 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f023 0303 	bic.w	r3, r3, #3
 800c616:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	617b      	str	r3, [r7, #20]
 800c620:	e003      	b.n	800c62a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f043 0301 	orr.w	r3, r3, #1
 800c628:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	011b      	lsls	r3, r3, #4
 800c636:	b2db      	uxtb	r3, r3
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	f023 030a 	bic.w	r3, r3, #10
 800c644:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f003 030a 	and.w	r3, r3, #10
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	4313      	orrs	r3, r2
 800c650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	621a      	str	r2, [r3, #32]
}
 800c65e:	bf00      	nop
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	40010000 	.word	0x40010000
 800c670:	40000400 	.word	0x40000400
 800c674:	40000800 	.word	0x40000800
 800c678:	40000c00 	.word	0x40000c00
 800c67c:	40010400 	.word	0x40010400
 800c680:	40001800 	.word	0x40001800
 800c684:	40014000 	.word	0x40014000

0800c688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6a1b      	ldr	r3, [r3, #32]
 800c698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	f023 0201 	bic.w	r2, r3, #1
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f023 030a 	bic.w	r3, r3, #10
 800c6c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	621a      	str	r2, [r3, #32]
}
 800c6da:	bf00      	nop
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b087      	sub	sp, #28
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
 800c6f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6a1b      	ldr	r3, [r3, #32]
 800c6f8:	f023 0210 	bic.w	r2, r3, #16
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c712:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	021b      	lsls	r3, r3, #8
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	031b      	lsls	r3, r3, #12
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	4313      	orrs	r3, r2
 800c730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c738:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	011b      	lsls	r3, r3, #4
 800c73e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	4313      	orrs	r3, r2
 800c746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	621a      	str	r2, [r3, #32]
}
 800c754:	bf00      	nop
 800c756:	371c      	adds	r7, #28
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c760:	b480      	push	{r7}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6a1b      	ldr	r3, [r3, #32]
 800c770:	f023 0210 	bic.w	r2, r3, #16
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c78a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	031b      	lsls	r3, r3, #12
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	4313      	orrs	r3, r2
 800c794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c79c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	011b      	lsls	r3, r3, #4
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	621a      	str	r2, [r3, #32]
}
 800c7b4:	bf00      	nop
 800c7b6:	371c      	adds	r7, #28
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b087      	sub	sp, #28
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f023 0303 	bic.w	r3, r3, #3
 800c7ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	011b      	lsls	r3, r3, #4
 800c802:	b2db      	uxtb	r3, r3
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	4313      	orrs	r3, r2
 800c808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c810:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	021b      	lsls	r3, r3, #8
 800c816:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c81a:	693a      	ldr	r2, [r7, #16]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	621a      	str	r2, [r3, #32]
}
 800c82c:	bf00      	nop
 800c82e:	371c      	adds	r7, #28
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c838:	b480      	push	{r7}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	69db      	ldr	r3, [r3, #28]
 800c856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6a1b      	ldr	r3, [r3, #32]
 800c85c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	021b      	lsls	r3, r3, #8
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c876:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	031b      	lsls	r3, r3, #12
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	4313      	orrs	r3, r2
 800c882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c88a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	031b      	lsls	r3, r3, #12
 800c890:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c894:	693a      	ldr	r2, [r7, #16]
 800c896:	4313      	orrs	r3, r2
 800c898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	693a      	ldr	r2, [r7, #16]
 800c8a4:	621a      	str	r2, [r3, #32]
}
 800c8a6:	bf00      	nop
 800c8a8:	371c      	adds	r7, #28
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
	...

0800c8b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	4b09      	ldr	r3, [pc, #36]	; (800c8ec <TIM_ITRx_SetConfig+0x38>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	f043 0307 	orr.w	r3, r3, #7
 800c8d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	609a      	str	r2, [r3, #8]
}
 800c8de:	bf00      	nop
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	ffcfff8f 	.word	0xffcfff8f

0800c8f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b087      	sub	sp, #28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
 800c8fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c90a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	021a      	lsls	r2, r3, #8
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	431a      	orrs	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	4313      	orrs	r3, r2
 800c918:	697a      	ldr	r2, [r7, #20]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	697a      	ldr	r2, [r7, #20]
 800c922:	609a      	str	r2, [r3, #8]
}
 800c924:	bf00      	nop
 800c926:	371c      	adds	r7, #28
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c930:	b480      	push	{r7}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	f003 031f 	and.w	r3, r3, #31
 800c942:	2201      	movs	r2, #1
 800c944:	fa02 f303 	lsl.w	r3, r2, r3
 800c948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6a1a      	ldr	r2, [r3, #32]
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	43db      	mvns	r3, r3
 800c952:	401a      	ands	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a1a      	ldr	r2, [r3, #32]
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	f003 031f 	and.w	r3, r3, #31
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	fa01 f303 	lsl.w	r3, r1, r3
 800c968:	431a      	orrs	r2, r3
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	621a      	str	r2, [r3, #32]
}
 800c96e:	bf00      	nop
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
	...

0800c97c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d101      	bne.n	800c994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c990:	2302      	movs	r3, #2
 800c992:	e06d      	b.n	800ca70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2202      	movs	r2, #2
 800c9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a30      	ldr	r2, [pc, #192]	; (800ca7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d004      	beq.n	800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a2f      	ldr	r2, [pc, #188]	; (800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d108      	bne.n	800c9da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a20      	ldr	r2, [pc, #128]	; (800ca7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d022      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca06:	d01d      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a1d      	ldr	r2, [pc, #116]	; (800ca84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d018      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a1c      	ldr	r2, [pc, #112]	; (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d013      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a1a      	ldr	r2, [pc, #104]	; (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d00e      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a15      	ldr	r2, [pc, #84]	; (800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d009      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a16      	ldr	r2, [pc, #88]	; (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d004      	beq.n	800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a15      	ldr	r2, [pc, #84]	; (800ca94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d10c      	bne.n	800ca5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	40010000 	.word	0x40010000
 800ca80:	40010400 	.word	0x40010400
 800ca84:	40000400 	.word	0x40000400
 800ca88:	40000800 	.word	0x40000800
 800ca8c:	40000c00 	.word	0x40000c00
 800ca90:	40001800 	.word	0x40001800
 800ca94:	40014000 	.word	0x40014000

0800ca98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d101      	bne.n	800cae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e042      	b.n	800cb6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7f9 ffa9 	bl	8006a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2224      	movs	r2, #36	; 0x24
 800cb02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f022 0201 	bic.w	r2, r2, #1
 800cb14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fccc 	bl	800d4b4 <UART_SetConfig>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d101      	bne.n	800cb26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e022      	b.n	800cb6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d002      	beq.n	800cb34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 fa28 	bl	800df84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f042 0201 	orr.w	r2, r2, #1
 800cb62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f001 faaf 	bl	800e0c8 <UART_CheckIdleState>
 800cb6a:	4603      	mov	r3, r0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	; 0x28
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	4613      	mov	r3, r2
 800cb82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb8a:	2b20      	cmp	r3, #32
 800cb8c:	f040 8083 	bne.w	800cc96 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <HAL_UART_Transmit+0x28>
 800cb96:	88fb      	ldrh	r3, [r7, #6]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e07b      	b.n	800cc98 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d101      	bne.n	800cbae <HAL_UART_Transmit+0x3a>
 800cbaa:	2302      	movs	r3, #2
 800cbac:	e074      	b.n	800cc98 <HAL_UART_Transmit+0x124>
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2221      	movs	r2, #33	; 0x21
 800cbc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbc6:	f7fa f91f 	bl	8006e08 <HAL_GetTick>
 800cbca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	88fa      	ldrh	r2, [r7, #6]
 800cbd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	88fa      	ldrh	r2, [r7, #6]
 800cbd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbe4:	d108      	bne.n	800cbf8 <HAL_UART_Transmit+0x84>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d104      	bne.n	800cbf8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	61bb      	str	r3, [r7, #24]
 800cbf6:	e003      	b.n	800cc00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cc08:	e02c      	b.n	800cc64 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2200      	movs	r2, #0
 800cc12:	2180      	movs	r1, #128	; 0x80
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f001 faa2 	bl	800e15e <UART_WaitOnFlagUntilTimeout>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e039      	b.n	800cc98 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10b      	bne.n	800cc42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	61bb      	str	r3, [r7, #24]
 800cc40:	e007      	b.n	800cc52 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	781a      	ldrb	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1cc      	bne.n	800cc0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	2200      	movs	r2, #0
 800cc78:	2140      	movs	r1, #64	; 0x40
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f001 fa6f 	bl	800e15e <UART_WaitOnFlagUntilTimeout>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cc86:	2303      	movs	r3, #3
 800cc88:	e006      	b.n	800cc98 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2220      	movs	r2, #32
 800cc8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	e000      	b.n	800cc98 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cc96:	2302      	movs	r3, #2
  }
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3720      	adds	r7, #32
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08a      	sub	sp, #40	; 0x28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccb4:	2b20      	cmp	r3, #32
 800ccb6:	d142      	bne.n	800cd3e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <HAL_UART_Receive_IT+0x24>
 800ccbe:	88fb      	ldrh	r3, [r7, #6]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e03b      	b.n	800cd40 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d101      	bne.n	800ccd6 <HAL_UART_Receive_IT+0x36>
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	e034      	b.n	800cd40 <HAL_UART_Receive_IT+0xa0>
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a17      	ldr	r2, [pc, #92]	; (800cd48 <HAL_UART_Receive_IT+0xa8>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d01f      	beq.n	800cd2e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d018      	beq.n	800cd2e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	e853 3f00 	ldrex	r3, [r3]
 800cd08:	613b      	str	r3, [r7, #16]
   return(result);
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd10:	627b      	str	r3, [r7, #36]	; 0x24
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	623b      	str	r3, [r7, #32]
 800cd1c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1e:	69f9      	ldr	r1, [r7, #28]
 800cd20:	6a3a      	ldr	r2, [r7, #32]
 800cd22:	e841 2300 	strex	r3, r2, [r1]
 800cd26:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1e6      	bne.n	800ccfc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cd2e:	88fb      	ldrh	r3, [r7, #6]
 800cd30:	461a      	mov	r2, r3
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f001 fadb 	bl	800e2f0 <UART_Start_Receive_IT>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	e000      	b.n	800cd40 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cd3e:	2302      	movs	r3, #2
  }
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3728      	adds	r7, #40	; 0x28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	58000c00 	.word	0x58000c00

0800cd4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b0ba      	sub	sp, #232	; 0xe8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cd76:	f640 030f 	movw	r3, #2063	; 0x80f
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cd80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d11b      	bne.n	800cdc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd8c:	f003 0320 	and.w	r3, r3, #32
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d015      	beq.n	800cdc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd98:	f003 0320 	and.w	r3, r3, #32
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d105      	bne.n	800cdac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cda0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cda4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d009      	beq.n	800cdc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 835a 	beq.w	800d46a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	4798      	blx	r3
      }
      return;
 800cdbe:	e354      	b.n	800d46a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cdc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 811f 	beq.w	800d008 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cdca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cdce:	4b8b      	ldr	r3, [pc, #556]	; (800cffc <HAL_UART_IRQHandler+0x2b0>)
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cdda:	4b89      	ldr	r3, [pc, #548]	; (800d000 <HAL_UART_IRQHandler+0x2b4>)
 800cddc:	4013      	ands	r3, r2
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 8112 	beq.w	800d008 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cde4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d011      	beq.n	800ce14 <HAL_UART_IRQHandler+0xc8>
 800cdf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00b      	beq.n	800ce14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2201      	movs	r2, #1
 800ce02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce0a:	f043 0201 	orr.w	r2, r3, #1
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d011      	beq.n	800ce44 <HAL_UART_IRQHandler+0xf8>
 800ce20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2202      	movs	r2, #2
 800ce32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce3a:	f043 0204 	orr.w	r2, r3, #4
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce48:	f003 0304 	and.w	r3, r3, #4
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d011      	beq.n	800ce74 <HAL_UART_IRQHandler+0x128>
 800ce50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2204      	movs	r2, #4
 800ce62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce6a:	f043 0202 	orr.w	r2, r3, #2
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce78:	f003 0308 	and.w	r3, r3, #8
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d017      	beq.n	800ceb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d105      	bne.n	800ce98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ce8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce90:	4b5a      	ldr	r3, [pc, #360]	; (800cffc <HAL_UART_IRQHandler+0x2b0>)
 800ce92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00b      	beq.n	800ceb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2208      	movs	r2, #8
 800ce9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cea6:	f043 0208 	orr.w	r2, r3, #8
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ceb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d012      	beq.n	800cee2 <HAL_UART_IRQHandler+0x196>
 800cebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00c      	beq.n	800cee2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ced0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ced8:	f043 0220 	orr.w	r2, r3, #32
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 82c0 	beq.w	800d46e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ceee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef2:	f003 0320 	and.w	r3, r3, #32
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d013      	beq.n	800cf22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cefe:	f003 0320 	and.w	r3, r3, #32
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d105      	bne.n	800cf12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d007      	beq.n	800cf22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf36:	2b40      	cmp	r3, #64	; 0x40
 800cf38:	d005      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d04f      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f001 fafc 	bl	800e544 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf56:	2b40      	cmp	r3, #64	; 0x40
 800cf58:	d141      	bne.n	800cfde <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf68:	e853 3f00 	ldrex	r3, [r3]
 800cf6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cf70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3308      	adds	r3, #8
 800cf82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cf86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cf8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf96:	e841 2300 	strex	r3, r2, [r1]
 800cf9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cf9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1d9      	bne.n	800cf5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d013      	beq.n	800cfd6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfb2:	4a14      	ldr	r2, [pc, #80]	; (800d004 <HAL_UART_IRQHandler+0x2b8>)
 800cfb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fa fbc0 	bl	8007740 <HAL_DMA_Abort_IT>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d017      	beq.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfd4:	e00f      	b.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fa56 	bl	800d488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfdc:	e00b      	b.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa52 	bl	800d488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfe4:	e007      	b.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fa4e 	bl	800d488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cff4:	e23b      	b.n	800d46e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cff6:	bf00      	nop
    return;
 800cff8:	e239      	b.n	800d46e <HAL_UART_IRQHandler+0x722>
 800cffa:	bf00      	nop
 800cffc:	10000001 	.word	0x10000001
 800d000:	04000120 	.word	0x04000120
 800d004:	0800e611 	.word	0x0800e611

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	f040 81ce 	bne.w	800d3ae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d016:	f003 0310 	and.w	r3, r3, #16
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 81c7 	beq.w	800d3ae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d024:	f003 0310 	and.w	r3, r3, #16
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 81c0 	beq.w	800d3ae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2210      	movs	r2, #16
 800d034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d040:	2b40      	cmp	r3, #64	; 0x40
 800d042:	f040 813b 	bne.w	800d2bc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a8b      	ldr	r2, [pc, #556]	; (800d27c <HAL_UART_IRQHandler+0x530>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d059      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a89      	ldr	r2, [pc, #548]	; (800d280 <HAL_UART_IRQHandler+0x534>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d053      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a87      	ldr	r2, [pc, #540]	; (800d284 <HAL_UART_IRQHandler+0x538>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d04d      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a85      	ldr	r2, [pc, #532]	; (800d288 <HAL_UART_IRQHandler+0x53c>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d047      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a83      	ldr	r2, [pc, #524]	; (800d28c <HAL_UART_IRQHandler+0x540>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d041      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a81      	ldr	r2, [pc, #516]	; (800d290 <HAL_UART_IRQHandler+0x544>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d03b      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a7f      	ldr	r2, [pc, #508]	; (800d294 <HAL_UART_IRQHandler+0x548>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d035      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a7d      	ldr	r2, [pc, #500]	; (800d298 <HAL_UART_IRQHandler+0x54c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d02f      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a7b      	ldr	r2, [pc, #492]	; (800d29c <HAL_UART_IRQHandler+0x550>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d029      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a79      	ldr	r2, [pc, #484]	; (800d2a0 <HAL_UART_IRQHandler+0x554>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d023      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a77      	ldr	r2, [pc, #476]	; (800d2a4 <HAL_UART_IRQHandler+0x558>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d01d      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a75      	ldr	r2, [pc, #468]	; (800d2a8 <HAL_UART_IRQHandler+0x55c>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d017      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a73      	ldr	r2, [pc, #460]	; (800d2ac <HAL_UART_IRQHandler+0x560>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d011      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a71      	ldr	r2, [pc, #452]	; (800d2b0 <HAL_UART_IRQHandler+0x564>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d00b      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a6f      	ldr	r2, [pc, #444]	; (800d2b4 <HAL_UART_IRQHandler+0x568>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d005      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a6d      	ldr	r2, [pc, #436]	; (800d2b8 <HAL_UART_IRQHandler+0x56c>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d105      	bne.n	800d112 <HAL_UART_IRQHandler+0x3c6>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	e004      	b.n	800d11c <HAL_UART_IRQHandler+0x3d0>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d120:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d124:	2b00      	cmp	r3, #0
 800d126:	f000 81a4 	beq.w	800d472 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d134:	429a      	cmp	r2, r3
 800d136:	f080 819c 	bcs.w	800d472 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d148:	69db      	ldr	r3, [r3, #28]
 800d14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d14e:	f000 8086 	beq.w	800d25e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d15e:	e853 3f00 	ldrex	r3, [r3]
 800d162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d16a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d16e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d17c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d180:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d184:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d188:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d18c:	e841 2300 	strex	r3, r2, [r1]
 800d190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1da      	bne.n	800d152 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1a6:	e853 3f00 	ldrex	r3, [r3]
 800d1aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1ae:	f023 0301 	bic.w	r3, r3, #1
 800d1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3308      	adds	r3, #8
 800d1bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1cc:	e841 2300 	strex	r3, r2, [r1]
 800d1d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e1      	bne.n	800d19c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3308      	adds	r3, #8
 800d1de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1e2:	e853 3f00 	ldrex	r3, [r3]
 800d1e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d1e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d1fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d1fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d200:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d202:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d204:	e841 2300 	strex	r3, r2, [r1]
 800d208:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d20a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e3      	bne.n	800d1d8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2220      	movs	r2, #32
 800d214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d226:	e853 3f00 	ldrex	r3, [r3]
 800d22a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22e:	f023 0310 	bic.w	r3, r3, #16
 800d232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d240:	65bb      	str	r3, [r7, #88]	; 0x58
 800d242:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d248:	e841 2300 	strex	r3, r2, [r1]
 800d24c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1e4      	bne.n	800d21e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f9 ff53 	bl	8007104 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	b29b      	uxth	r3, r3
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f912 	bl	800d49c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d278:	e0fb      	b.n	800d472 <HAL_UART_IRQHandler+0x726>
 800d27a:	bf00      	nop
 800d27c:	40020010 	.word	0x40020010
 800d280:	40020028 	.word	0x40020028
 800d284:	40020040 	.word	0x40020040
 800d288:	40020058 	.word	0x40020058
 800d28c:	40020070 	.word	0x40020070
 800d290:	40020088 	.word	0x40020088
 800d294:	400200a0 	.word	0x400200a0
 800d298:	400200b8 	.word	0x400200b8
 800d29c:	40020410 	.word	0x40020410
 800d2a0:	40020428 	.word	0x40020428
 800d2a4:	40020440 	.word	0x40020440
 800d2a8:	40020458 	.word	0x40020458
 800d2ac:	40020470 	.word	0x40020470
 800d2b0:	40020488 	.word	0x40020488
 800d2b4:	400204a0 	.word	0x400204a0
 800d2b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 80cc 	beq.w	800d476 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d2de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 80c7 	beq.w	800d476 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	e853 3f00 	ldrex	r3, [r3]
 800d2f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d30a:	647b      	str	r3, [r7, #68]	; 0x44
 800d30c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d312:	e841 2300 	strex	r3, r2, [r1]
 800d316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e4      	bne.n	800d2e8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3308      	adds	r3, #8
 800d324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d328:	e853 3f00 	ldrex	r3, [r3]
 800d32c:	623b      	str	r3, [r7, #32]
   return(result);
 800d32e:	6a3a      	ldr	r2, [r7, #32]
 800d330:	4b54      	ldr	r3, [pc, #336]	; (800d484 <HAL_UART_IRQHandler+0x738>)
 800d332:	4013      	ands	r3, r2
 800d334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3308      	adds	r3, #8
 800d33e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d342:	633a      	str	r2, [r7, #48]	; 0x30
 800d344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d34a:	e841 2300 	strex	r3, r2, [r1]
 800d34e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1e3      	bne.n	800d31e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	e853 3f00 	ldrex	r3, [r3]
 800d376:	60fb      	str	r3, [r7, #12]
   return(result);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f023 0310 	bic.w	r3, r3, #16
 800d37e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d38c:	61fb      	str	r3, [r7, #28]
 800d38e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d390:	69b9      	ldr	r1, [r7, #24]
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	e841 2300 	strex	r3, r2, [r1]
 800d398:	617b      	str	r3, [r7, #20]
   return(result);
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1e4      	bne.n	800d36a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f878 	bl	800d49c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3ac:	e063      	b.n	800d476 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00e      	beq.n	800d3d8 <HAL_UART_IRQHandler+0x68c>
 800d3ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d008      	beq.n	800d3d8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d3ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f001 fdbb 	bl	800ef4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3d6:	e051      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d014      	beq.n	800d40e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d105      	bne.n	800d3fc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d3f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d008      	beq.n	800d40e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d400:	2b00      	cmp	r3, #0
 800d402:	d03a      	beq.n	800d47a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	4798      	blx	r3
    }
    return;
 800d40c:	e035      	b.n	800d47a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d416:	2b00      	cmp	r3, #0
 800d418:	d009      	beq.n	800d42e <HAL_UART_IRQHandler+0x6e2>
 800d41a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f001 f908 	bl	800e63c <UART_EndTransmit_IT>
    return;
 800d42c:	e026      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d436:	2b00      	cmp	r3, #0
 800d438:	d009      	beq.n	800d44e <HAL_UART_IRQHandler+0x702>
 800d43a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d43e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d003      	beq.n	800d44e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f001 fd94 	bl	800ef74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d44c:	e016      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d456:	2b00      	cmp	r3, #0
 800d458:	d010      	beq.n	800d47c <HAL_UART_IRQHandler+0x730>
 800d45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da0c      	bge.n	800d47c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f001 fd7c 	bl	800ef60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d468:	e008      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
      return;
 800d46a:	bf00      	nop
 800d46c:	e006      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
    return;
 800d46e:	bf00      	nop
 800d470:	e004      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
      return;
 800d472:	bf00      	nop
 800d474:	e002      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
      return;
 800d476:	bf00      	nop
 800d478:	e000      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
    return;
 800d47a:	bf00      	nop
  }
}
 800d47c:	37e8      	adds	r7, #232	; 0xe8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	effffffe 	.word	0xeffffffe

0800d488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4a8:	bf00      	nop
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4b8:	b092      	sub	sp, #72	; 0x48
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	689a      	ldr	r2, [r3, #8]
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	431a      	orrs	r2, r3
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	4bbe      	ldr	r3, [pc, #760]	; (800d7dc <UART_SetConfig+0x328>)
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	6812      	ldr	r2, [r2, #0]
 800d4ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4ec:	430b      	orrs	r3, r1
 800d4ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	68da      	ldr	r2, [r3, #12]
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4ab3      	ldr	r2, [pc, #716]	; (800d7e0 <UART_SetConfig+0x32c>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d004      	beq.n	800d520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d51c:	4313      	orrs	r3, r2
 800d51e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689a      	ldr	r2, [r3, #8]
 800d526:	4baf      	ldr	r3, [pc, #700]	; (800d7e4 <UART_SetConfig+0x330>)
 800d528:	4013      	ands	r3, r2
 800d52a:	697a      	ldr	r2, [r7, #20]
 800d52c:	6812      	ldr	r2, [r2, #0]
 800d52e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d530:	430b      	orrs	r3, r1
 800d532:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53a:	f023 010f 	bic.w	r1, r3, #15
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	430a      	orrs	r2, r1
 800d548:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4aa6      	ldr	r2, [pc, #664]	; (800d7e8 <UART_SetConfig+0x334>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d177      	bne.n	800d644 <UART_SetConfig+0x190>
 800d554:	4ba5      	ldr	r3, [pc, #660]	; (800d7ec <UART_SetConfig+0x338>)
 800d556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d55c:	2b28      	cmp	r3, #40	; 0x28
 800d55e:	d86d      	bhi.n	800d63c <UART_SetConfig+0x188>
 800d560:	a201      	add	r2, pc, #4	; (adr r2, 800d568 <UART_SetConfig+0xb4>)
 800d562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d566:	bf00      	nop
 800d568:	0800d60d 	.word	0x0800d60d
 800d56c:	0800d63d 	.word	0x0800d63d
 800d570:	0800d63d 	.word	0x0800d63d
 800d574:	0800d63d 	.word	0x0800d63d
 800d578:	0800d63d 	.word	0x0800d63d
 800d57c:	0800d63d 	.word	0x0800d63d
 800d580:	0800d63d 	.word	0x0800d63d
 800d584:	0800d63d 	.word	0x0800d63d
 800d588:	0800d615 	.word	0x0800d615
 800d58c:	0800d63d 	.word	0x0800d63d
 800d590:	0800d63d 	.word	0x0800d63d
 800d594:	0800d63d 	.word	0x0800d63d
 800d598:	0800d63d 	.word	0x0800d63d
 800d59c:	0800d63d 	.word	0x0800d63d
 800d5a0:	0800d63d 	.word	0x0800d63d
 800d5a4:	0800d63d 	.word	0x0800d63d
 800d5a8:	0800d61d 	.word	0x0800d61d
 800d5ac:	0800d63d 	.word	0x0800d63d
 800d5b0:	0800d63d 	.word	0x0800d63d
 800d5b4:	0800d63d 	.word	0x0800d63d
 800d5b8:	0800d63d 	.word	0x0800d63d
 800d5bc:	0800d63d 	.word	0x0800d63d
 800d5c0:	0800d63d 	.word	0x0800d63d
 800d5c4:	0800d63d 	.word	0x0800d63d
 800d5c8:	0800d625 	.word	0x0800d625
 800d5cc:	0800d63d 	.word	0x0800d63d
 800d5d0:	0800d63d 	.word	0x0800d63d
 800d5d4:	0800d63d 	.word	0x0800d63d
 800d5d8:	0800d63d 	.word	0x0800d63d
 800d5dc:	0800d63d 	.word	0x0800d63d
 800d5e0:	0800d63d 	.word	0x0800d63d
 800d5e4:	0800d63d 	.word	0x0800d63d
 800d5e8:	0800d62d 	.word	0x0800d62d
 800d5ec:	0800d63d 	.word	0x0800d63d
 800d5f0:	0800d63d 	.word	0x0800d63d
 800d5f4:	0800d63d 	.word	0x0800d63d
 800d5f8:	0800d63d 	.word	0x0800d63d
 800d5fc:	0800d63d 	.word	0x0800d63d
 800d600:	0800d63d 	.word	0x0800d63d
 800d604:	0800d63d 	.word	0x0800d63d
 800d608:	0800d635 	.word	0x0800d635
 800d60c:	2301      	movs	r3, #1
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d612:	e222      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d614:	2304      	movs	r3, #4
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61a:	e21e      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d61c:	2308      	movs	r3, #8
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d622:	e21a      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d624:	2310      	movs	r3, #16
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62a:	e216      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d62c:	2320      	movs	r3, #32
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d632:	e212      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d634:	2340      	movs	r3, #64	; 0x40
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63a:	e20e      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d63c:	2380      	movs	r3, #128	; 0x80
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d642:	e20a      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a69      	ldr	r2, [pc, #420]	; (800d7f0 <UART_SetConfig+0x33c>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d130      	bne.n	800d6b0 <UART_SetConfig+0x1fc>
 800d64e:	4b67      	ldr	r3, [pc, #412]	; (800d7ec <UART_SetConfig+0x338>)
 800d650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d652:	f003 0307 	and.w	r3, r3, #7
 800d656:	2b05      	cmp	r3, #5
 800d658:	d826      	bhi.n	800d6a8 <UART_SetConfig+0x1f4>
 800d65a:	a201      	add	r2, pc, #4	; (adr r2, 800d660 <UART_SetConfig+0x1ac>)
 800d65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d660:	0800d679 	.word	0x0800d679
 800d664:	0800d681 	.word	0x0800d681
 800d668:	0800d689 	.word	0x0800d689
 800d66c:	0800d691 	.word	0x0800d691
 800d670:	0800d699 	.word	0x0800d699
 800d674:	0800d6a1 	.word	0x0800d6a1
 800d678:	2300      	movs	r3, #0
 800d67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67e:	e1ec      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d680:	2304      	movs	r3, #4
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d686:	e1e8      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d688:	2308      	movs	r3, #8
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68e:	e1e4      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d690:	2310      	movs	r3, #16
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d696:	e1e0      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d698:	2320      	movs	r3, #32
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69e:	e1dc      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d6a0:	2340      	movs	r3, #64	; 0x40
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a6:	e1d8      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d6a8:	2380      	movs	r3, #128	; 0x80
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ae:	e1d4      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a4f      	ldr	r2, [pc, #316]	; (800d7f4 <UART_SetConfig+0x340>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d130      	bne.n	800d71c <UART_SetConfig+0x268>
 800d6ba:	4b4c      	ldr	r3, [pc, #304]	; (800d7ec <UART_SetConfig+0x338>)
 800d6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6be:	f003 0307 	and.w	r3, r3, #7
 800d6c2:	2b05      	cmp	r3, #5
 800d6c4:	d826      	bhi.n	800d714 <UART_SetConfig+0x260>
 800d6c6:	a201      	add	r2, pc, #4	; (adr r2, 800d6cc <UART_SetConfig+0x218>)
 800d6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6cc:	0800d6e5 	.word	0x0800d6e5
 800d6d0:	0800d6ed 	.word	0x0800d6ed
 800d6d4:	0800d6f5 	.word	0x0800d6f5
 800d6d8:	0800d6fd 	.word	0x0800d6fd
 800d6dc:	0800d705 	.word	0x0800d705
 800d6e0:	0800d70d 	.word	0x0800d70d
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ea:	e1b6      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d6ec:	2304      	movs	r3, #4
 800d6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f2:	e1b2      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d6f4:	2308      	movs	r3, #8
 800d6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6fa:	e1ae      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d702:	e1aa      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d704:	2320      	movs	r3, #32
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70a:	e1a6      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d70c:	2340      	movs	r3, #64	; 0x40
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e1a2      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d714:	2380      	movs	r3, #128	; 0x80
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e19e      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a35      	ldr	r2, [pc, #212]	; (800d7f8 <UART_SetConfig+0x344>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d130      	bne.n	800d788 <UART_SetConfig+0x2d4>
 800d726:	4b31      	ldr	r3, [pc, #196]	; (800d7ec <UART_SetConfig+0x338>)
 800d728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d72a:	f003 0307 	and.w	r3, r3, #7
 800d72e:	2b05      	cmp	r3, #5
 800d730:	d826      	bhi.n	800d780 <UART_SetConfig+0x2cc>
 800d732:	a201      	add	r2, pc, #4	; (adr r2, 800d738 <UART_SetConfig+0x284>)
 800d734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d738:	0800d751 	.word	0x0800d751
 800d73c:	0800d759 	.word	0x0800d759
 800d740:	0800d761 	.word	0x0800d761
 800d744:	0800d769 	.word	0x0800d769
 800d748:	0800d771 	.word	0x0800d771
 800d74c:	0800d779 	.word	0x0800d779
 800d750:	2300      	movs	r3, #0
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d756:	e180      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d758:	2304      	movs	r3, #4
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75e:	e17c      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d760:	2308      	movs	r3, #8
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d766:	e178      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d768:	2310      	movs	r3, #16
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76e:	e174      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d770:	2320      	movs	r3, #32
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e170      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d778:	2340      	movs	r3, #64	; 0x40
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e16c      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d780:	2380      	movs	r3, #128	; 0x80
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e168      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a1b      	ldr	r2, [pc, #108]	; (800d7fc <UART_SetConfig+0x348>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d142      	bne.n	800d818 <UART_SetConfig+0x364>
 800d792:	4b16      	ldr	r3, [pc, #88]	; (800d7ec <UART_SetConfig+0x338>)
 800d794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	2b05      	cmp	r3, #5
 800d79c:	d838      	bhi.n	800d810 <UART_SetConfig+0x35c>
 800d79e:	a201      	add	r2, pc, #4	; (adr r2, 800d7a4 <UART_SetConfig+0x2f0>)
 800d7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a4:	0800d7bd 	.word	0x0800d7bd
 800d7a8:	0800d7c5 	.word	0x0800d7c5
 800d7ac:	0800d7cd 	.word	0x0800d7cd
 800d7b0:	0800d7d5 	.word	0x0800d7d5
 800d7b4:	0800d801 	.word	0x0800d801
 800d7b8:	0800d809 	.word	0x0800d809
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c2:	e14a      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d7c4:	2304      	movs	r3, #4
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ca:	e146      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d7cc:	2308      	movs	r3, #8
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7d2:	e142      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d7d4:	2310      	movs	r3, #16
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e13e      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d7dc:	cfff69f3 	.word	0xcfff69f3
 800d7e0:	58000c00 	.word	0x58000c00
 800d7e4:	11fff4ff 	.word	0x11fff4ff
 800d7e8:	40011000 	.word	0x40011000
 800d7ec:	58024400 	.word	0x58024400
 800d7f0:	40004400 	.word	0x40004400
 800d7f4:	40004800 	.word	0x40004800
 800d7f8:	40004c00 	.word	0x40004c00
 800d7fc:	40005000 	.word	0x40005000
 800d800:	2320      	movs	r3, #32
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e128      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d808:	2340      	movs	r3, #64	; 0x40
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e124      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d810:	2380      	movs	r3, #128	; 0x80
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d816:	e120      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4acb      	ldr	r2, [pc, #812]	; (800db4c <UART_SetConfig+0x698>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d176      	bne.n	800d910 <UART_SetConfig+0x45c>
 800d822:	4bcb      	ldr	r3, [pc, #812]	; (800db50 <UART_SetConfig+0x69c>)
 800d824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d82a:	2b28      	cmp	r3, #40	; 0x28
 800d82c:	d86c      	bhi.n	800d908 <UART_SetConfig+0x454>
 800d82e:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <UART_SetConfig+0x380>)
 800d830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d834:	0800d8d9 	.word	0x0800d8d9
 800d838:	0800d909 	.word	0x0800d909
 800d83c:	0800d909 	.word	0x0800d909
 800d840:	0800d909 	.word	0x0800d909
 800d844:	0800d909 	.word	0x0800d909
 800d848:	0800d909 	.word	0x0800d909
 800d84c:	0800d909 	.word	0x0800d909
 800d850:	0800d909 	.word	0x0800d909
 800d854:	0800d8e1 	.word	0x0800d8e1
 800d858:	0800d909 	.word	0x0800d909
 800d85c:	0800d909 	.word	0x0800d909
 800d860:	0800d909 	.word	0x0800d909
 800d864:	0800d909 	.word	0x0800d909
 800d868:	0800d909 	.word	0x0800d909
 800d86c:	0800d909 	.word	0x0800d909
 800d870:	0800d909 	.word	0x0800d909
 800d874:	0800d8e9 	.word	0x0800d8e9
 800d878:	0800d909 	.word	0x0800d909
 800d87c:	0800d909 	.word	0x0800d909
 800d880:	0800d909 	.word	0x0800d909
 800d884:	0800d909 	.word	0x0800d909
 800d888:	0800d909 	.word	0x0800d909
 800d88c:	0800d909 	.word	0x0800d909
 800d890:	0800d909 	.word	0x0800d909
 800d894:	0800d8f1 	.word	0x0800d8f1
 800d898:	0800d909 	.word	0x0800d909
 800d89c:	0800d909 	.word	0x0800d909
 800d8a0:	0800d909 	.word	0x0800d909
 800d8a4:	0800d909 	.word	0x0800d909
 800d8a8:	0800d909 	.word	0x0800d909
 800d8ac:	0800d909 	.word	0x0800d909
 800d8b0:	0800d909 	.word	0x0800d909
 800d8b4:	0800d8f9 	.word	0x0800d8f9
 800d8b8:	0800d909 	.word	0x0800d909
 800d8bc:	0800d909 	.word	0x0800d909
 800d8c0:	0800d909 	.word	0x0800d909
 800d8c4:	0800d909 	.word	0x0800d909
 800d8c8:	0800d909 	.word	0x0800d909
 800d8cc:	0800d909 	.word	0x0800d909
 800d8d0:	0800d909 	.word	0x0800d909
 800d8d4:	0800d901 	.word	0x0800d901
 800d8d8:	2301      	movs	r3, #1
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8de:	e0bc      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d8e0:	2304      	movs	r3, #4
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e6:	e0b8      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d8e8:	2308      	movs	r3, #8
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ee:	e0b4      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d8f0:	2310      	movs	r3, #16
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f6:	e0b0      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d8f8:	2320      	movs	r3, #32
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fe:	e0ac      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d900:	2340      	movs	r3, #64	; 0x40
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d906:	e0a8      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d908:	2380      	movs	r3, #128	; 0x80
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90e:	e0a4      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a8f      	ldr	r2, [pc, #572]	; (800db54 <UART_SetConfig+0x6a0>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d130      	bne.n	800d97c <UART_SetConfig+0x4c8>
 800d91a:	4b8d      	ldr	r3, [pc, #564]	; (800db50 <UART_SetConfig+0x69c>)
 800d91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d91e:	f003 0307 	and.w	r3, r3, #7
 800d922:	2b05      	cmp	r3, #5
 800d924:	d826      	bhi.n	800d974 <UART_SetConfig+0x4c0>
 800d926:	a201      	add	r2, pc, #4	; (adr r2, 800d92c <UART_SetConfig+0x478>)
 800d928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d92c:	0800d945 	.word	0x0800d945
 800d930:	0800d94d 	.word	0x0800d94d
 800d934:	0800d955 	.word	0x0800d955
 800d938:	0800d95d 	.word	0x0800d95d
 800d93c:	0800d965 	.word	0x0800d965
 800d940:	0800d96d 	.word	0x0800d96d
 800d944:	2300      	movs	r3, #0
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94a:	e086      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d94c:	2304      	movs	r3, #4
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d952:	e082      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d954:	2308      	movs	r3, #8
 800d956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d95a:	e07e      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d95c:	2310      	movs	r3, #16
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d962:	e07a      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d964:	2320      	movs	r3, #32
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96a:	e076      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d96c:	2340      	movs	r3, #64	; 0x40
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d972:	e072      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d974:	2380      	movs	r3, #128	; 0x80
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97a:	e06e      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a75      	ldr	r2, [pc, #468]	; (800db58 <UART_SetConfig+0x6a4>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d130      	bne.n	800d9e8 <UART_SetConfig+0x534>
 800d986:	4b72      	ldr	r3, [pc, #456]	; (800db50 <UART_SetConfig+0x69c>)
 800d988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d98a:	f003 0307 	and.w	r3, r3, #7
 800d98e:	2b05      	cmp	r3, #5
 800d990:	d826      	bhi.n	800d9e0 <UART_SetConfig+0x52c>
 800d992:	a201      	add	r2, pc, #4	; (adr r2, 800d998 <UART_SetConfig+0x4e4>)
 800d994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d998:	0800d9b1 	.word	0x0800d9b1
 800d99c:	0800d9b9 	.word	0x0800d9b9
 800d9a0:	0800d9c1 	.word	0x0800d9c1
 800d9a4:	0800d9c9 	.word	0x0800d9c9
 800d9a8:	0800d9d1 	.word	0x0800d9d1
 800d9ac:	0800d9d9 	.word	0x0800d9d9
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b6:	e050      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d9b8:	2304      	movs	r3, #4
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9be:	e04c      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d9c0:	2308      	movs	r3, #8
 800d9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9c6:	e048      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d9c8:	2310      	movs	r3, #16
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ce:	e044      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d9d0:	2320      	movs	r3, #32
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9d6:	e040      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d9d8:	2340      	movs	r3, #64	; 0x40
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9de:	e03c      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d9e0:	2380      	movs	r3, #128	; 0x80
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e6:	e038      	b.n	800da5a <UART_SetConfig+0x5a6>
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a5b      	ldr	r2, [pc, #364]	; (800db5c <UART_SetConfig+0x6a8>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d130      	bne.n	800da54 <UART_SetConfig+0x5a0>
 800d9f2:	4b57      	ldr	r3, [pc, #348]	; (800db50 <UART_SetConfig+0x69c>)
 800d9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d826      	bhi.n	800da4c <UART_SetConfig+0x598>
 800d9fe:	a201      	add	r2, pc, #4	; (adr r2, 800da04 <UART_SetConfig+0x550>)
 800da00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da04:	0800da1d 	.word	0x0800da1d
 800da08:	0800da25 	.word	0x0800da25
 800da0c:	0800da2d 	.word	0x0800da2d
 800da10:	0800da35 	.word	0x0800da35
 800da14:	0800da3d 	.word	0x0800da3d
 800da18:	0800da45 	.word	0x0800da45
 800da1c:	2302      	movs	r3, #2
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da22:	e01a      	b.n	800da5a <UART_SetConfig+0x5a6>
 800da24:	2304      	movs	r3, #4
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2a:	e016      	b.n	800da5a <UART_SetConfig+0x5a6>
 800da2c:	2308      	movs	r3, #8
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da32:	e012      	b.n	800da5a <UART_SetConfig+0x5a6>
 800da34:	2310      	movs	r3, #16
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3a:	e00e      	b.n	800da5a <UART_SetConfig+0x5a6>
 800da3c:	2320      	movs	r3, #32
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da42:	e00a      	b.n	800da5a <UART_SetConfig+0x5a6>
 800da44:	2340      	movs	r3, #64	; 0x40
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4a:	e006      	b.n	800da5a <UART_SetConfig+0x5a6>
 800da4c:	2380      	movs	r3, #128	; 0x80
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da52:	e002      	b.n	800da5a <UART_SetConfig+0x5a6>
 800da54:	2380      	movs	r3, #128	; 0x80
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a3f      	ldr	r2, [pc, #252]	; (800db5c <UART_SetConfig+0x6a8>)
 800da60:	4293      	cmp	r3, r2
 800da62:	f040 80f8 	bne.w	800dc56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da6a:	2b20      	cmp	r3, #32
 800da6c:	dc46      	bgt.n	800dafc <UART_SetConfig+0x648>
 800da6e:	2b02      	cmp	r3, #2
 800da70:	f2c0 8082 	blt.w	800db78 <UART_SetConfig+0x6c4>
 800da74:	3b02      	subs	r3, #2
 800da76:	2b1e      	cmp	r3, #30
 800da78:	d87e      	bhi.n	800db78 <UART_SetConfig+0x6c4>
 800da7a:	a201      	add	r2, pc, #4	; (adr r2, 800da80 <UART_SetConfig+0x5cc>)
 800da7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da80:	0800db03 	.word	0x0800db03
 800da84:	0800db79 	.word	0x0800db79
 800da88:	0800db0b 	.word	0x0800db0b
 800da8c:	0800db79 	.word	0x0800db79
 800da90:	0800db79 	.word	0x0800db79
 800da94:	0800db79 	.word	0x0800db79
 800da98:	0800db1b 	.word	0x0800db1b
 800da9c:	0800db79 	.word	0x0800db79
 800daa0:	0800db79 	.word	0x0800db79
 800daa4:	0800db79 	.word	0x0800db79
 800daa8:	0800db79 	.word	0x0800db79
 800daac:	0800db79 	.word	0x0800db79
 800dab0:	0800db79 	.word	0x0800db79
 800dab4:	0800db79 	.word	0x0800db79
 800dab8:	0800db2b 	.word	0x0800db2b
 800dabc:	0800db79 	.word	0x0800db79
 800dac0:	0800db79 	.word	0x0800db79
 800dac4:	0800db79 	.word	0x0800db79
 800dac8:	0800db79 	.word	0x0800db79
 800dacc:	0800db79 	.word	0x0800db79
 800dad0:	0800db79 	.word	0x0800db79
 800dad4:	0800db79 	.word	0x0800db79
 800dad8:	0800db79 	.word	0x0800db79
 800dadc:	0800db79 	.word	0x0800db79
 800dae0:	0800db79 	.word	0x0800db79
 800dae4:	0800db79 	.word	0x0800db79
 800dae8:	0800db79 	.word	0x0800db79
 800daec:	0800db79 	.word	0x0800db79
 800daf0:	0800db79 	.word	0x0800db79
 800daf4:	0800db79 	.word	0x0800db79
 800daf8:	0800db6b 	.word	0x0800db6b
 800dafc:	2b40      	cmp	r3, #64	; 0x40
 800dafe:	d037      	beq.n	800db70 <UART_SetConfig+0x6bc>
 800db00:	e03a      	b.n	800db78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db02:	f7fc f999 	bl	8009e38 <HAL_RCCEx_GetD3PCLK1Freq>
 800db06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db08:	e03c      	b.n	800db84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fc f9a8 	bl	8009e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db18:	e034      	b.n	800db84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db1a:	f107 0318 	add.w	r3, r7, #24
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fc faf4 	bl	800a10c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db28:	e02c      	b.n	800db84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db2a:	4b09      	ldr	r3, [pc, #36]	; (800db50 <UART_SetConfig+0x69c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 0320 	and.w	r3, r3, #32
 800db32:	2b00      	cmp	r3, #0
 800db34:	d016      	beq.n	800db64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db36:	4b06      	ldr	r3, [pc, #24]	; (800db50 <UART_SetConfig+0x69c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	08db      	lsrs	r3, r3, #3
 800db3c:	f003 0303 	and.w	r3, r3, #3
 800db40:	4a07      	ldr	r2, [pc, #28]	; (800db60 <UART_SetConfig+0x6ac>)
 800db42:	fa22 f303 	lsr.w	r3, r2, r3
 800db46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db48:	e01c      	b.n	800db84 <UART_SetConfig+0x6d0>
 800db4a:	bf00      	nop
 800db4c:	40011400 	.word	0x40011400
 800db50:	58024400 	.word	0x58024400
 800db54:	40007800 	.word	0x40007800
 800db58:	40007c00 	.word	0x40007c00
 800db5c:	58000c00 	.word	0x58000c00
 800db60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800db64:	4b9d      	ldr	r3, [pc, #628]	; (800dddc <UART_SetConfig+0x928>)
 800db66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db68:	e00c      	b.n	800db84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db6a:	4b9d      	ldr	r3, [pc, #628]	; (800dde0 <UART_SetConfig+0x92c>)
 800db6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db6e:	e009      	b.n	800db84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db76:	e005      	b.n	800db84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800db78:	2300      	movs	r3, #0
 800db7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db86:	2b00      	cmp	r3, #0
 800db88:	f000 81de 	beq.w	800df48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db90:	4a94      	ldr	r2, [pc, #592]	; (800dde4 <UART_SetConfig+0x930>)
 800db92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db96:	461a      	mov	r2, r3
 800db98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800db9e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	685a      	ldr	r2, [r3, #4]
 800dba4:	4613      	mov	r3, r2
 800dba6:	005b      	lsls	r3, r3, #1
 800dba8:	4413      	add	r3, r2
 800dbaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d305      	bcc.n	800dbbc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d903      	bls.n	800dbc4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dbc2:	e1c1      	b.n	800df48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	60bb      	str	r3, [r7, #8]
 800dbca:	60fa      	str	r2, [r7, #12]
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	4a84      	ldr	r2, [pc, #528]	; (800dde4 <UART_SetConfig+0x930>)
 800dbd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	2200      	movs	r2, #0
 800dbda:	603b      	str	r3, [r7, #0]
 800dbdc:	607a      	str	r2, [r7, #4]
 800dbde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dbe6:	f7f2 fd8f 	bl	8000708 <__aeabi_uldivmod>
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	4610      	mov	r0, r2
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	f04f 0200 	mov.w	r2, #0
 800dbf6:	f04f 0300 	mov.w	r3, #0
 800dbfa:	020b      	lsls	r3, r1, #8
 800dbfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc00:	0202      	lsls	r2, r0, #8
 800dc02:	6979      	ldr	r1, [r7, #20]
 800dc04:	6849      	ldr	r1, [r1, #4]
 800dc06:	0849      	lsrs	r1, r1, #1
 800dc08:	2000      	movs	r0, #0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	eb12 0804 	adds.w	r8, r2, r4
 800dc12:	eb43 0905 	adc.w	r9, r3, r5
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	469a      	mov	sl, r3
 800dc1e:	4693      	mov	fp, r2
 800dc20:	4652      	mov	r2, sl
 800dc22:	465b      	mov	r3, fp
 800dc24:	4640      	mov	r0, r8
 800dc26:	4649      	mov	r1, r9
 800dc28:	f7f2 fd6e 	bl	8000708 <__aeabi_uldivmod>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	4613      	mov	r3, r2
 800dc32:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc3a:	d308      	bcc.n	800dc4e <UART_SetConfig+0x79a>
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc42:	d204      	bcs.n	800dc4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc4a:	60da      	str	r2, [r3, #12]
 800dc4c:	e17c      	b.n	800df48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc54:	e178      	b.n	800df48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc5e:	f040 80c5 	bne.w	800ddec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dc62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc66:	2b20      	cmp	r3, #32
 800dc68:	dc48      	bgt.n	800dcfc <UART_SetConfig+0x848>
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	db7b      	blt.n	800dd66 <UART_SetConfig+0x8b2>
 800dc6e:	2b20      	cmp	r3, #32
 800dc70:	d879      	bhi.n	800dd66 <UART_SetConfig+0x8b2>
 800dc72:	a201      	add	r2, pc, #4	; (adr r2, 800dc78 <UART_SetConfig+0x7c4>)
 800dc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc78:	0800dd03 	.word	0x0800dd03
 800dc7c:	0800dd0b 	.word	0x0800dd0b
 800dc80:	0800dd67 	.word	0x0800dd67
 800dc84:	0800dd67 	.word	0x0800dd67
 800dc88:	0800dd13 	.word	0x0800dd13
 800dc8c:	0800dd67 	.word	0x0800dd67
 800dc90:	0800dd67 	.word	0x0800dd67
 800dc94:	0800dd67 	.word	0x0800dd67
 800dc98:	0800dd23 	.word	0x0800dd23
 800dc9c:	0800dd67 	.word	0x0800dd67
 800dca0:	0800dd67 	.word	0x0800dd67
 800dca4:	0800dd67 	.word	0x0800dd67
 800dca8:	0800dd67 	.word	0x0800dd67
 800dcac:	0800dd67 	.word	0x0800dd67
 800dcb0:	0800dd67 	.word	0x0800dd67
 800dcb4:	0800dd67 	.word	0x0800dd67
 800dcb8:	0800dd33 	.word	0x0800dd33
 800dcbc:	0800dd67 	.word	0x0800dd67
 800dcc0:	0800dd67 	.word	0x0800dd67
 800dcc4:	0800dd67 	.word	0x0800dd67
 800dcc8:	0800dd67 	.word	0x0800dd67
 800dccc:	0800dd67 	.word	0x0800dd67
 800dcd0:	0800dd67 	.word	0x0800dd67
 800dcd4:	0800dd67 	.word	0x0800dd67
 800dcd8:	0800dd67 	.word	0x0800dd67
 800dcdc:	0800dd67 	.word	0x0800dd67
 800dce0:	0800dd67 	.word	0x0800dd67
 800dce4:	0800dd67 	.word	0x0800dd67
 800dce8:	0800dd67 	.word	0x0800dd67
 800dcec:	0800dd67 	.word	0x0800dd67
 800dcf0:	0800dd67 	.word	0x0800dd67
 800dcf4:	0800dd67 	.word	0x0800dd67
 800dcf8:	0800dd59 	.word	0x0800dd59
 800dcfc:	2b40      	cmp	r3, #64	; 0x40
 800dcfe:	d02e      	beq.n	800dd5e <UART_SetConfig+0x8aa>
 800dd00:	e031      	b.n	800dd66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd02:	f7fb f927 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 800dd06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd08:	e033      	b.n	800dd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd0a:	f7fb f939 	bl	8008f80 <HAL_RCC_GetPCLK2Freq>
 800dd0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd10:	e02f      	b.n	800dd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fc f8a4 	bl	8009e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd20:	e027      	b.n	800dd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd22:	f107 0318 	add.w	r3, r7, #24
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fc f9f0 	bl	800a10c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd30:	e01f      	b.n	800dd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd32:	4b2d      	ldr	r3, [pc, #180]	; (800dde8 <UART_SetConfig+0x934>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f003 0320 	and.w	r3, r3, #32
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d009      	beq.n	800dd52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd3e:	4b2a      	ldr	r3, [pc, #168]	; (800dde8 <UART_SetConfig+0x934>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	08db      	lsrs	r3, r3, #3
 800dd44:	f003 0303 	and.w	r3, r3, #3
 800dd48:	4a24      	ldr	r2, [pc, #144]	; (800dddc <UART_SetConfig+0x928>)
 800dd4a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd50:	e00f      	b.n	800dd72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd52:	4b22      	ldr	r3, [pc, #136]	; (800dddc <UART_SetConfig+0x928>)
 800dd54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd56:	e00c      	b.n	800dd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd58:	4b21      	ldr	r3, [pc, #132]	; (800dde0 <UART_SetConfig+0x92c>)
 800dd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd5c:	e009      	b.n	800dd72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd64:	e005      	b.n	800dd72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	f000 80e7 	beq.w	800df48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7e:	4a19      	ldr	r2, [pc, #100]	; (800dde4 <UART_SetConfig+0x930>)
 800dd80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd84:	461a      	mov	r2, r3
 800dd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd88:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd8c:	005a      	lsls	r2, r3, #1
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	085b      	lsrs	r3, r3, #1
 800dd94:	441a      	add	r2, r3
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	2b0f      	cmp	r3, #15
 800dda4:	d916      	bls.n	800ddd4 <UART_SetConfig+0x920>
 800dda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddac:	d212      	bcs.n	800ddd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	f023 030f 	bic.w	r3, r3, #15
 800ddb6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddba:	085b      	lsrs	r3, r3, #1
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	f003 0307 	and.w	r3, r3, #7
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ddd0:	60da      	str	r2, [r3, #12]
 800ddd2:	e0b9      	b.n	800df48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ddda:	e0b5      	b.n	800df48 <UART_SetConfig+0xa94>
 800dddc:	03d09000 	.word	0x03d09000
 800dde0:	003d0900 	.word	0x003d0900
 800dde4:	080127d8 	.word	0x080127d8
 800dde8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ddf0:	2b20      	cmp	r3, #32
 800ddf2:	dc49      	bgt.n	800de88 <UART_SetConfig+0x9d4>
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	db7c      	blt.n	800def2 <UART_SetConfig+0xa3e>
 800ddf8:	2b20      	cmp	r3, #32
 800ddfa:	d87a      	bhi.n	800def2 <UART_SetConfig+0xa3e>
 800ddfc:	a201      	add	r2, pc, #4	; (adr r2, 800de04 <UART_SetConfig+0x950>)
 800ddfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de02:	bf00      	nop
 800de04:	0800de8f 	.word	0x0800de8f
 800de08:	0800de97 	.word	0x0800de97
 800de0c:	0800def3 	.word	0x0800def3
 800de10:	0800def3 	.word	0x0800def3
 800de14:	0800de9f 	.word	0x0800de9f
 800de18:	0800def3 	.word	0x0800def3
 800de1c:	0800def3 	.word	0x0800def3
 800de20:	0800def3 	.word	0x0800def3
 800de24:	0800deaf 	.word	0x0800deaf
 800de28:	0800def3 	.word	0x0800def3
 800de2c:	0800def3 	.word	0x0800def3
 800de30:	0800def3 	.word	0x0800def3
 800de34:	0800def3 	.word	0x0800def3
 800de38:	0800def3 	.word	0x0800def3
 800de3c:	0800def3 	.word	0x0800def3
 800de40:	0800def3 	.word	0x0800def3
 800de44:	0800debf 	.word	0x0800debf
 800de48:	0800def3 	.word	0x0800def3
 800de4c:	0800def3 	.word	0x0800def3
 800de50:	0800def3 	.word	0x0800def3
 800de54:	0800def3 	.word	0x0800def3
 800de58:	0800def3 	.word	0x0800def3
 800de5c:	0800def3 	.word	0x0800def3
 800de60:	0800def3 	.word	0x0800def3
 800de64:	0800def3 	.word	0x0800def3
 800de68:	0800def3 	.word	0x0800def3
 800de6c:	0800def3 	.word	0x0800def3
 800de70:	0800def3 	.word	0x0800def3
 800de74:	0800def3 	.word	0x0800def3
 800de78:	0800def3 	.word	0x0800def3
 800de7c:	0800def3 	.word	0x0800def3
 800de80:	0800def3 	.word	0x0800def3
 800de84:	0800dee5 	.word	0x0800dee5
 800de88:	2b40      	cmp	r3, #64	; 0x40
 800de8a:	d02e      	beq.n	800deea <UART_SetConfig+0xa36>
 800de8c:	e031      	b.n	800def2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de8e:	f7fb f861 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 800de92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de94:	e033      	b.n	800defe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de96:	f7fb f873 	bl	8008f80 <HAL_RCC_GetPCLK2Freq>
 800de9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de9c:	e02f      	b.n	800defe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fb ffde 	bl	8009e64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deac:	e027      	b.n	800defe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deae:	f107 0318 	add.w	r3, r7, #24
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fc f92a 	bl	800a10c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800debc:	e01f      	b.n	800defe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800debe:	4b2d      	ldr	r3, [pc, #180]	; (800df74 <UART_SetConfig+0xac0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 0320 	and.w	r3, r3, #32
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d009      	beq.n	800dede <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800deca:	4b2a      	ldr	r3, [pc, #168]	; (800df74 <UART_SetConfig+0xac0>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	08db      	lsrs	r3, r3, #3
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	4a28      	ldr	r2, [pc, #160]	; (800df78 <UART_SetConfig+0xac4>)
 800ded6:	fa22 f303 	lsr.w	r3, r2, r3
 800deda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dedc:	e00f      	b.n	800defe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dede:	4b26      	ldr	r3, [pc, #152]	; (800df78 <UART_SetConfig+0xac4>)
 800dee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dee2:	e00c      	b.n	800defe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dee4:	4b25      	ldr	r3, [pc, #148]	; (800df7c <UART_SetConfig+0xac8>)
 800dee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dee8:	e009      	b.n	800defe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800deea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800deee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def0:	e005      	b.n	800defe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800def2:	2300      	movs	r3, #0
 800def4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800def6:	2301      	movs	r3, #1
 800def8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800defc:	bf00      	nop
    }

    if (pclk != 0U)
 800defe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df00:	2b00      	cmp	r3, #0
 800df02:	d021      	beq.n	800df48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df08:	4a1d      	ldr	r2, [pc, #116]	; (800df80 <UART_SetConfig+0xacc>)
 800df0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df0e:	461a      	mov	r2, r3
 800df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df12:	fbb3 f2f2 	udiv	r2, r3, r2
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	085b      	lsrs	r3, r3, #1
 800df1c:	441a      	add	r2, r3
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	fbb2 f3f3 	udiv	r3, r2, r3
 800df26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	2b0f      	cmp	r3, #15
 800df2c:	d909      	bls.n	800df42 <UART_SetConfig+0xa8e>
 800df2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df34:	d205      	bcs.n	800df42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df38:	b29a      	uxth	r2, r3
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	60da      	str	r2, [r3, #12]
 800df40:	e002      	b.n	800df48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800df42:	2301      	movs	r3, #1
 800df44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	2201      	movs	r2, #1
 800df54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	2200      	movs	r2, #0
 800df5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2200      	movs	r2, #0
 800df62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800df64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3748      	adds	r7, #72	; 0x48
 800df6c:	46bd      	mov	sp, r7
 800df6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df72:	bf00      	nop
 800df74:	58024400 	.word	0x58024400
 800df78:	03d09000 	.word	0x03d09000
 800df7c:	003d0900 	.word	0x003d0900
 800df80:	080127d8 	.word	0x080127d8

0800df84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00a      	beq.n	800dfae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	430a      	orrs	r2, r1
 800dfac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb2:	f003 0302 	and.w	r3, r3, #2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	430a      	orrs	r2, r1
 800dfce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd4:	f003 0304 	and.w	r3, r3, #4
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00a      	beq.n	800dff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	430a      	orrs	r2, r1
 800dff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff6:	f003 0308 	and.w	r3, r3, #8
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00a      	beq.n	800e014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	430a      	orrs	r2, r1
 800e012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e018:	f003 0310 	and.w	r3, r3, #16
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00a      	beq.n	800e036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	430a      	orrs	r2, r1
 800e034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e03a:	f003 0320 	and.w	r3, r3, #32
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d00a      	beq.n	800e058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	430a      	orrs	r2, r1
 800e056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e060:	2b00      	cmp	r3, #0
 800e062:	d01a      	beq.n	800e09a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	430a      	orrs	r2, r1
 800e078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e07e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e082:	d10a      	bne.n	800e09a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	430a      	orrs	r2, r1
 800e098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00a      	beq.n	800e0bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	605a      	str	r2, [r3, #4]
  }
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e0d8:	f7f8 fe96 	bl	8006e08 <HAL_GetTick>
 800e0dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f003 0308 	and.w	r3, r3, #8
 800e0e8:	2b08      	cmp	r3, #8
 800e0ea:	d10e      	bne.n	800e10a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 f82f 	bl	800e15e <UART_WaitOnFlagUntilTimeout>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e106:	2303      	movs	r3, #3
 800e108:	e025      	b.n	800e156 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f003 0304 	and.w	r3, r3, #4
 800e114:	2b04      	cmp	r3, #4
 800e116:	d10e      	bne.n	800e136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f819 	bl	800e15e <UART_WaitOnFlagUntilTimeout>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e132:	2303      	movs	r3, #3
 800e134:	e00f      	b.n	800e156 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2220      	movs	r2, #32
 800e13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2220      	movs	r2, #32
 800e142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b09c      	sub	sp, #112	; 0x70
 800e162:	af00      	add	r7, sp, #0
 800e164:	60f8      	str	r0, [r7, #12]
 800e166:	60b9      	str	r1, [r7, #8]
 800e168:	603b      	str	r3, [r7, #0]
 800e16a:	4613      	mov	r3, r2
 800e16c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e16e:	e0a9      	b.n	800e2c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	f000 80a5 	beq.w	800e2c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e17a:	f7f8 fe45 	bl	8006e08 <HAL_GetTick>
 800e17e:	4602      	mov	r2, r0
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e186:	429a      	cmp	r2, r3
 800e188:	d302      	bcc.n	800e190 <UART_WaitOnFlagUntilTimeout+0x32>
 800e18a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d140      	bne.n	800e212 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e198:	e853 3f00 	ldrex	r3, [r3]
 800e19c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1a4:	667b      	str	r3, [r7, #100]	; 0x64
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1b6:	e841 2300 	strex	r3, r2, [r1]
 800e1ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e1bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1e6      	bne.n	800e190 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1cc:	e853 3f00 	ldrex	r3, [r3]
 800e1d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d4:	f023 0301 	bic.w	r3, r3, #1
 800e1d8:	663b      	str	r3, [r7, #96]	; 0x60
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	3308      	adds	r3, #8
 800e1e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e1e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1ea:	e841 2300 	strex	r3, r2, [r1]
 800e1ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1e5      	bne.n	800e1c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2220      	movs	r2, #32
 800e1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2220      	movs	r2, #32
 800e202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e20e:	2303      	movs	r3, #3
 800e210:	e069      	b.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 0304 	and.w	r3, r3, #4
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d051      	beq.n	800e2c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	69db      	ldr	r3, [r3, #28]
 800e226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e22a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e22e:	d149      	bne.n	800e2c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e238:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	e853 3f00 	ldrex	r3, [r3]
 800e246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e24e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	461a      	mov	r2, r3
 800e256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e258:	637b      	str	r3, [r7, #52]	; 0x34
 800e25a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e25e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e260:	e841 2300 	strex	r3, r2, [r1]
 800e264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1e6      	bne.n	800e23a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3308      	adds	r3, #8
 800e272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	e853 3f00 	ldrex	r3, [r3]
 800e27a:	613b      	str	r3, [r7, #16]
   return(result);
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	f023 0301 	bic.w	r3, r3, #1
 800e282:	66bb      	str	r3, [r7, #104]	; 0x68
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	3308      	adds	r3, #8
 800e28a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e28c:	623a      	str	r2, [r7, #32]
 800e28e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e290:	69f9      	ldr	r1, [r7, #28]
 800e292:	6a3a      	ldr	r2, [r7, #32]
 800e294:	e841 2300 	strex	r3, r2, [r1]
 800e298:	61bb      	str	r3, [r7, #24]
   return(result);
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1e5      	bne.n	800e26c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2220      	movs	r2, #32
 800e2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2220      	movs	r2, #32
 800e2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e010      	b.n	800e2e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	69da      	ldr	r2, [r3, #28]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	bf0c      	ite	eq
 800e2d4:	2301      	moveq	r3, #1
 800e2d6:	2300      	movne	r3, #0
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	461a      	mov	r2, r3
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	f43f af46 	beq.w	800e170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3770      	adds	r7, #112	; 0x70
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
	...

0800e2f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b0a3      	sub	sp, #140	; 0x8c
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	88fa      	ldrh	r2, [r7, #6]
 800e308:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	88fa      	ldrh	r2, [r7, #6]
 800e310:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e322:	d10e      	bne.n	800e342 <UART_Start_Receive_IT+0x52>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d105      	bne.n	800e338 <UART_Start_Receive_IT+0x48>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e336:	e02d      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	22ff      	movs	r2, #255	; 0xff
 800e33c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e340:	e028      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10d      	bne.n	800e366 <UART_Start_Receive_IT+0x76>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <UART_Start_Receive_IT+0x6c>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	22ff      	movs	r2, #255	; 0xff
 800e356:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e35a:	e01b      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	227f      	movs	r2, #127	; 0x7f
 800e360:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e364:	e016      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e36e:	d10d      	bne.n	800e38c <UART_Start_Receive_IT+0x9c>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <UART_Start_Receive_IT+0x92>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	227f      	movs	r2, #127	; 0x7f
 800e37c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e380:	e008      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	223f      	movs	r2, #63	; 0x3f
 800e386:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e38a:	e003      	b.n	800e394 <UART_Start_Receive_IT+0xa4>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2222      	movs	r2, #34	; 0x22
 800e3a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3ae:	e853 3f00 	ldrex	r3, [r3]
 800e3b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e3b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3b6:	f043 0301 	orr.w	r3, r3, #1
 800e3ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e3c8:	673a      	str	r2, [r7, #112]	; 0x70
 800e3ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e3ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e3d0:	e841 2300 	strex	r3, r2, [r1]
 800e3d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e3d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1e3      	bne.n	800e3a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3e4:	d153      	bne.n	800e48e <UART_Start_Receive_IT+0x19e>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e3ec:	88fa      	ldrh	r2, [r7, #6]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d34d      	bcc.n	800e48e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3fa:	d107      	bne.n	800e40c <UART_Start_Receive_IT+0x11c>
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d103      	bne.n	800e40c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	4a4b      	ldr	r2, [pc, #300]	; (800e534 <UART_Start_Receive_IT+0x244>)
 800e408:	671a      	str	r2, [r3, #112]	; 0x70
 800e40a:	e002      	b.n	800e412 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4a4a      	ldr	r2, [pc, #296]	; (800e538 <UART_Start_Receive_IT+0x248>)
 800e410:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d01a      	beq.n	800e458 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e42a:	e853 3f00 	ldrex	r3, [r3]
 800e42e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	461a      	mov	r2, r3
 800e440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e444:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e446:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e44a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e44c:	e841 2300 	strex	r3, r2, [r1]
 800e450:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1e4      	bne.n	800e422 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3308      	adds	r3, #8
 800e45e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e462:	e853 3f00 	ldrex	r3, [r3]
 800e466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e46e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	3308      	adds	r3, #8
 800e476:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e478:	64ba      	str	r2, [r7, #72]	; 0x48
 800e47a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e47e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e480:	e841 2300 	strex	r3, r2, [r1]
 800e484:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1e5      	bne.n	800e458 <UART_Start_Receive_IT+0x168>
 800e48c:	e04a      	b.n	800e524 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e496:	d107      	bne.n	800e4a8 <UART_Start_Receive_IT+0x1b8>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	691b      	ldr	r3, [r3, #16]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d103      	bne.n	800e4a8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	4a26      	ldr	r2, [pc, #152]	; (800e53c <UART_Start_Receive_IT+0x24c>)
 800e4a4:	671a      	str	r2, [r3, #112]	; 0x70
 800e4a6:	e002      	b.n	800e4ae <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4a25      	ldr	r2, [pc, #148]	; (800e540 <UART_Start_Receive_IT+0x250>)
 800e4ac:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d019      	beq.n	800e4f2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c6:	e853 3f00 	ldrex	r3, [r3]
 800e4ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e4d2:	677b      	str	r3, [r7, #116]	; 0x74
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e4de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4e4:	e841 2300 	strex	r3, r2, [r1]
 800e4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e6      	bne.n	800e4be <UART_Start_Receive_IT+0x1ce>
 800e4f0:	e018      	b.n	800e524 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	e853 3f00 	ldrex	r3, [r3]
 800e4fe:	613b      	str	r3, [r7, #16]
   return(result);
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f043 0320 	orr.w	r3, r3, #32
 800e506:	67bb      	str	r3, [r7, #120]	; 0x78
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	461a      	mov	r2, r3
 800e50e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e510:	623b      	str	r3, [r7, #32]
 800e512:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e514:	69f9      	ldr	r1, [r7, #28]
 800e516:	6a3a      	ldr	r2, [r7, #32]
 800e518:	e841 2300 	strex	r3, r2, [r1]
 800e51c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1e6      	bne.n	800e4f2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	378c      	adds	r7, #140	; 0x8c
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	0800ec4d 	.word	0x0800ec4d
 800e538:	0800e955 	.word	0x0800e955
 800e53c:	0800e7f3 	.word	0x0800e7f3
 800e540:	0800e693 	.word	0x0800e693

0800e544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e544:	b480      	push	{r7}
 800e546:	b095      	sub	sp, #84	; 0x54
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e554:	e853 3f00 	ldrex	r3, [r3]
 800e558:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e560:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	461a      	mov	r2, r3
 800e568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e56a:	643b      	str	r3, [r7, #64]	; 0x40
 800e56c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e570:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e572:	e841 2300 	strex	r3, r2, [r1]
 800e576:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1e6      	bne.n	800e54c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	3308      	adds	r3, #8
 800e584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	e853 3f00 	ldrex	r3, [r3]
 800e58c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e58e:	69fa      	ldr	r2, [r7, #28]
 800e590:	4b1e      	ldr	r3, [pc, #120]	; (800e60c <UART_EndRxTransfer+0xc8>)
 800e592:	4013      	ands	r3, r2
 800e594:	64bb      	str	r3, [r7, #72]	; 0x48
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	3308      	adds	r3, #8
 800e59c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e59e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e5a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5a6:	e841 2300 	strex	r3, r2, [r1]
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1e5      	bne.n	800e57e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d118      	bne.n	800e5ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	e853 3f00 	ldrex	r3, [r3]
 800e5c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	f023 0310 	bic.w	r3, r3, #16
 800e5ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5d8:	61bb      	str	r3, [r7, #24]
 800e5da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5dc:	6979      	ldr	r1, [r7, #20]
 800e5de:	69ba      	ldr	r2, [r7, #24]
 800e5e0:	e841 2300 	strex	r3, r2, [r1]
 800e5e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1e6      	bne.n	800e5ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2220      	movs	r2, #32
 800e5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e600:	bf00      	nop
 800e602:	3754      	adds	r7, #84	; 0x54
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	effffffe 	.word	0xeffffffe

0800e610 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f7fe ff2a 	bl	800d488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b088      	sub	sp, #32
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	e853 3f00 	ldrex	r3, [r3]
 800e650:	60bb      	str	r3, [r7, #8]
   return(result);
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e658:	61fb      	str	r3, [r7, #28]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	461a      	mov	r2, r3
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	61bb      	str	r3, [r7, #24]
 800e664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e666:	6979      	ldr	r1, [r7, #20]
 800e668:	69ba      	ldr	r2, [r7, #24]
 800e66a:	e841 2300 	strex	r3, r2, [r1]
 800e66e:	613b      	str	r3, [r7, #16]
   return(result);
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e6      	bne.n	800e644 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2220      	movs	r2, #32
 800e67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7f4 ff87 	bl	8003598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e68a:	bf00      	nop
 800e68c:	3720      	adds	r7, #32
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b096      	sub	sp, #88	; 0x58
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6aa:	2b22      	cmp	r3, #34	; 0x22
 800e6ac:	f040 8095 	bne.w	800e7da <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e6ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e6be:	b2d9      	uxtb	r1, r3
 800e6c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6ca:	400a      	ands	r2, r1
 800e6cc:	b2d2      	uxtb	r2, r2
 800e6ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d178      	bne.n	800e7ea <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e700:	e853 3f00 	ldrex	r3, [r3]
 800e704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e70c:	653b      	str	r3, [r7, #80]	; 0x50
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	461a      	mov	r2, r3
 800e714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e716:	647b      	str	r3, [r7, #68]	; 0x44
 800e718:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e71c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e71e:	e841 2300 	strex	r3, r2, [r1]
 800e722:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1e6      	bne.n	800e6f8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3308      	adds	r3, #8
 800e730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	e853 3f00 	ldrex	r3, [r3]
 800e738:	623b      	str	r3, [r7, #32]
   return(result);
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	f023 0301 	bic.w	r3, r3, #1
 800e740:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3308      	adds	r3, #8
 800e748:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e74a:	633a      	str	r2, [r7, #48]	; 0x30
 800e74c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e752:	e841 2300 	strex	r3, r2, [r1]
 800e756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1e5      	bne.n	800e72a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2220      	movs	r2, #32
 800e762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e770:	2b01      	cmp	r3, #1
 800e772:	d12e      	bne.n	800e7d2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	e853 3f00 	ldrex	r3, [r3]
 800e786:	60fb      	str	r3, [r7, #12]
   return(result);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f023 0310 	bic.w	r3, r3, #16
 800e78e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	461a      	mov	r2, r3
 800e796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e798:	61fb      	str	r3, [r7, #28]
 800e79a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79c:	69b9      	ldr	r1, [r7, #24]
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	e841 2300 	strex	r3, r2, [r1]
 800e7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1e6      	bne.n	800e77a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	69db      	ldr	r3, [r3, #28]
 800e7b2:	f003 0310 	and.w	r3, r3, #16
 800e7b6:	2b10      	cmp	r3, #16
 800e7b8:	d103      	bne.n	800e7c2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2210      	movs	r2, #16
 800e7c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7fe fe66 	bl	800d49c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e7d0:	e00b      	b.n	800e7ea <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7f4 fe6c 	bl	80034b0 <HAL_UART_RxCpltCallback>
}
 800e7d8:	e007      	b.n	800e7ea <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	699a      	ldr	r2, [r3, #24]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f042 0208 	orr.w	r2, r2, #8
 800e7e8:	619a      	str	r2, [r3, #24]
}
 800e7ea:	bf00      	nop
 800e7ec:	3758      	adds	r7, #88	; 0x58
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b096      	sub	sp, #88	; 0x58
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e800:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e80a:	2b22      	cmp	r3, #34	; 0x22
 800e80c:	f040 8095 	bne.w	800e93a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e816:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e81e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e820:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e824:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e828:	4013      	ands	r3, r2
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e82e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e834:	1c9a      	adds	r2, r3, #2
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e840:	b29b      	uxth	r3, r3
 800e842:	3b01      	subs	r3, #1
 800e844:	b29a      	uxth	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e852:	b29b      	uxth	r3, r3
 800e854:	2b00      	cmp	r3, #0
 800e856:	d178      	bne.n	800e94a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e860:	e853 3f00 	ldrex	r3, [r3]
 800e864:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e86c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e876:	643b      	str	r3, [r7, #64]	; 0x40
 800e878:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e87c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e87e:	e841 2300 	strex	r3, r2, [r1]
 800e882:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1e6      	bne.n	800e858 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3308      	adds	r3, #8
 800e890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e892:	6a3b      	ldr	r3, [r7, #32]
 800e894:	e853 3f00 	ldrex	r3, [r3]
 800e898:	61fb      	str	r3, [r7, #28]
   return(result);
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	f023 0301 	bic.w	r3, r3, #1
 800e8a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	3308      	adds	r3, #8
 800e8a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8b2:	e841 2300 	strex	r3, r2, [r1]
 800e8b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d1e5      	bne.n	800e88a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2220      	movs	r2, #32
 800e8c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d12e      	bne.n	800e932 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	e853 3f00 	ldrex	r3, [r3]
 800e8e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	f023 0310 	bic.w	r3, r3, #16
 800e8ee:	647b      	str	r3, [r7, #68]	; 0x44
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f8:	61bb      	str	r3, [r7, #24]
 800e8fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fc:	6979      	ldr	r1, [r7, #20]
 800e8fe:	69ba      	ldr	r2, [r7, #24]
 800e900:	e841 2300 	strex	r3, r2, [r1]
 800e904:	613b      	str	r3, [r7, #16]
   return(result);
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1e6      	bne.n	800e8da <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	69db      	ldr	r3, [r3, #28]
 800e912:	f003 0310 	and.w	r3, r3, #16
 800e916:	2b10      	cmp	r3, #16
 800e918:	d103      	bne.n	800e922 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2210      	movs	r2, #16
 800e920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7fe fdb6 	bl	800d49c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e930:	e00b      	b.n	800e94a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7f4 fdbc 	bl	80034b0 <HAL_UART_RxCpltCallback>
}
 800e938:	e007      	b.n	800e94a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	699a      	ldr	r2, [r3, #24]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f042 0208 	orr.w	r2, r2, #8
 800e948:	619a      	str	r2, [r3, #24]
}
 800e94a:	bf00      	nop
 800e94c:	3758      	adds	r7, #88	; 0x58
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
	...

0800e954 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b0a6      	sub	sp, #152	; 0x98
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e962:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	69db      	ldr	r3, [r3, #28]
 800e96c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e98a:	2b22      	cmp	r3, #34	; 0x22
 800e98c:	f040 814d 	bne.w	800ec2a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e996:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e99a:	e0f4      	b.n	800eb86 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e9a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e9aa:	b2d9      	uxtb	r1, r3
 800e9ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9b6:	400a      	ands	r2, r1
 800e9b8:	b2d2      	uxtb	r2, r2
 800e9ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9c0:	1c5a      	adds	r2, r3, #1
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	69db      	ldr	r3, [r3, #28]
 800e9de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e9e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d053      	beq.n	800ea96 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e9ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9f2:	f003 0301 	and.w	r3, r3, #1
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d011      	beq.n	800ea1e <UART_RxISR_8BIT_FIFOEN+0xca>
 800e9fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00b      	beq.n	800ea1e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea14:	f043 0201 	orr.w	r2, r3, #1
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea22:	f003 0302 	and.w	r3, r3, #2
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d011      	beq.n	800ea4e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ea2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00b      	beq.n	800ea4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2202      	movs	r2, #2
 800ea3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea44:	f043 0204 	orr.w	r2, r3, #4
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea52:	f003 0304 	and.w	r3, r3, #4
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d011      	beq.n	800ea7e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ea5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00b      	beq.n	800ea7e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2204      	movs	r2, #4
 800ea6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea74:	f043 0202 	orr.w	r2, r3, #2
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d006      	beq.n	800ea96 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7fe fcfd 	bl	800d488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d171      	bne.n	800eb86 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaaa:	e853 3f00 	ldrex	r3, [r3]
 800eaae:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800eab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eac4:	66bb      	str	r3, [r7, #104]	; 0x68
 800eac6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eaca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800eacc:	e841 2300 	strex	r3, r2, [r1]
 800ead0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ead2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1e4      	bne.n	800eaa2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3308      	adds	r3, #8
 800eade:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae2:	e853 3f00 	ldrex	r3, [r3]
 800eae6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800eae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaea:	4b56      	ldr	r3, [pc, #344]	; (800ec44 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800eaec:	4013      	ands	r3, r2
 800eaee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eaf8:	657a      	str	r2, [r7, #84]	; 0x54
 800eafa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eafe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb00:	e841 2300 	strex	r3, r2, [r1]
 800eb04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1e5      	bne.n	800ead8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2220      	movs	r2, #32
 800eb10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d12e      	bne.n	800eb80 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb30:	e853 3f00 	ldrex	r3, [r3]
 800eb34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	f023 0310 	bic.w	r3, r3, #16
 800eb3c:	67bb      	str	r3, [r7, #120]	; 0x78
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	461a      	mov	r2, r3
 800eb44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb46:	643b      	str	r3, [r7, #64]	; 0x40
 800eb48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb4e:	e841 2300 	strex	r3, r2, [r1]
 800eb52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1e6      	bne.n	800eb28 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	69db      	ldr	r3, [r3, #28]
 800eb60:	f003 0310 	and.w	r3, r3, #16
 800eb64:	2b10      	cmp	r3, #16
 800eb66:	d103      	bne.n	800eb70 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2210      	movs	r2, #16
 800eb6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb76:	4619      	mov	r1, r3
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7fe fc8f 	bl	800d49c <HAL_UARTEx_RxEventCallback>
 800eb7e:	e002      	b.n	800eb86 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7f4 fc95 	bl	80034b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eb86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d006      	beq.n	800eb9c <UART_RxISR_8BIT_FIFOEN+0x248>
 800eb8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eb92:	f003 0320 	and.w	r3, r3, #32
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f47f af00 	bne.w	800e99c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eba2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eba6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d045      	beq.n	800ec3a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ebb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d23e      	bcs.n	800ec3a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	3308      	adds	r3, #8
 800ebc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	e853 3f00 	ldrex	r3, [r3]
 800ebca:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ebd2:	673b      	str	r3, [r7, #112]	; 0x70
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3308      	adds	r3, #8
 800ebda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ebdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebe4:	e841 2300 	strex	r3, r2, [r1]
 800ebe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1e5      	bne.n	800ebbc <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a15      	ldr	r2, [pc, #84]	; (800ec48 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800ebf4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	e853 3f00 	ldrex	r3, [r3]
 800ec02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	f043 0320 	orr.w	r3, r3, #32
 800ec0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	461a      	mov	r2, r3
 800ec12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec14:	61bb      	str	r3, [r7, #24]
 800ec16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec18:	6979      	ldr	r1, [r7, #20]
 800ec1a:	69ba      	ldr	r2, [r7, #24]
 800ec1c:	e841 2300 	strex	r3, r2, [r1]
 800ec20:	613b      	str	r3, [r7, #16]
   return(result);
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1e6      	bne.n	800ebf6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec28:	e007      	b.n	800ec3a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	699a      	ldr	r2, [r3, #24]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f042 0208 	orr.w	r2, r2, #8
 800ec38:	619a      	str	r2, [r3, #24]
}
 800ec3a:	bf00      	nop
 800ec3c:	3798      	adds	r7, #152	; 0x98
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	effffffe 	.word	0xeffffffe
 800ec48:	0800e693 	.word	0x0800e693

0800ec4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b0a8      	sub	sp, #160	; 0xa0
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec5a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	69db      	ldr	r3, [r3, #28]
 800ec64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	689b      	ldr	r3, [r3, #8]
 800ec78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec82:	2b22      	cmp	r3, #34	; 0x22
 800ec84:	f040 8151 	bne.w	800ef2a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ec8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ec92:	e0f8      	b.n	800ee86 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800eca6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ecaa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ecae:	4013      	ands	r3, r2
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ecb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecbc:	1c9a      	adds	r2, r3, #2
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	3b01      	subs	r3, #1
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	69db      	ldr	r3, [r3, #28]
 800ecda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ecde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ece2:	f003 0307 	and.w	r3, r3, #7
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d053      	beq.n	800ed92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ecea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ecee:	f003 0301 	and.w	r3, r3, #1
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d011      	beq.n	800ed1a <UART_RxISR_16BIT_FIFOEN+0xce>
 800ecf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ecfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d00b      	beq.n	800ed1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2201      	movs	r2, #1
 800ed08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed10:	f043 0201 	orr.w	r2, r3, #1
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed1e:	f003 0302 	and.w	r3, r3, #2
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d011      	beq.n	800ed4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ed26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ed2a:	f003 0301 	and.w	r3, r3, #1
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00b      	beq.n	800ed4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2202      	movs	r2, #2
 800ed38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed40:	f043 0204 	orr.w	r2, r3, #4
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed4e:	f003 0304 	and.w	r3, r3, #4
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d011      	beq.n	800ed7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ed56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ed5a:	f003 0301 	and.w	r3, r3, #1
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d00b      	beq.n	800ed7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2204      	movs	r2, #4
 800ed68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed70:	f043 0202 	orr.w	r2, r3, #2
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d006      	beq.n	800ed92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7fe fb7f 	bl	800d488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d173      	bne.n	800ee86 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eda6:	e853 3f00 	ldrex	r3, [r3]
 800edaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800edac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800edb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800edc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800edc2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800edc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800edc8:	e841 2300 	strex	r3, r2, [r1]
 800edcc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800edce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d1e4      	bne.n	800ed9e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3308      	adds	r3, #8
 800edda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edde:	e853 3f00 	ldrex	r3, [r3]
 800ede2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ede4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ede6:	4b57      	ldr	r3, [pc, #348]	; (800ef44 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800ede8:	4013      	ands	r3, r2
 800edea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3308      	adds	r3, #8
 800edf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800edf8:	65ba      	str	r2, [r7, #88]	; 0x58
 800edfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800edfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee00:	e841 2300 	strex	r3, r2, [r1]
 800ee04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ee06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d1e3      	bne.n	800edd4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2220      	movs	r2, #32
 800ee10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d12e      	bne.n	800ee80 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	e853 3f00 	ldrex	r3, [r3]
 800ee34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee38:	f023 0310 	bic.w	r3, r3, #16
 800ee3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee46:	647b      	str	r3, [r7, #68]	; 0x44
 800ee48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee4e:	e841 2300 	strex	r3, r2, [r1]
 800ee52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1e6      	bne.n	800ee28 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	69db      	ldr	r3, [r3, #28]
 800ee60:	f003 0310 	and.w	r3, r3, #16
 800ee64:	2b10      	cmp	r3, #16
 800ee66:	d103      	bne.n	800ee70 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2210      	movs	r2, #16
 800ee6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee76:	4619      	mov	r1, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7fe fb0f 	bl	800d49c <HAL_UARTEx_RxEventCallback>
 800ee7e:	e002      	b.n	800ee86 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7f4 fb15 	bl	80034b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ee86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d006      	beq.n	800ee9c <UART_RxISR_16BIT_FIFOEN+0x250>
 800ee8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee92:	f003 0320 	and.w	r3, r3, #32
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f47f aefc 	bne.w	800ec94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eea2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eea6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d045      	beq.n	800ef3a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eeb4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d23e      	bcs.n	800ef3a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	3308      	adds	r3, #8
 800eec2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	e853 3f00 	ldrex	r3, [r3]
 800eeca:	623b      	str	r3, [r7, #32]
   return(result);
 800eecc:	6a3b      	ldr	r3, [r7, #32]
 800eece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eed2:	677b      	str	r3, [r7, #116]	; 0x74
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	3308      	adds	r3, #8
 800eeda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eedc:	633a      	str	r2, [r7, #48]	; 0x30
 800eede:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eee4:	e841 2300 	strex	r3, r2, [r1]
 800eee8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1e5      	bne.n	800eebc <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4a15      	ldr	r2, [pc, #84]	; (800ef48 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800eef4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	e853 3f00 	ldrex	r3, [r3]
 800ef02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f043 0320 	orr.w	r3, r3, #32
 800ef0a:	673b      	str	r3, [r7, #112]	; 0x70
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	461a      	mov	r2, r3
 800ef12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef14:	61fb      	str	r3, [r7, #28]
 800ef16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef18:	69b9      	ldr	r1, [r7, #24]
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	e841 2300 	strex	r3, r2, [r1]
 800ef20:	617b      	str	r3, [r7, #20]
   return(result);
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1e6      	bne.n	800eef6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef28:	e007      	b.n	800ef3a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	699a      	ldr	r2, [r3, #24]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f042 0208 	orr.w	r2, r2, #8
 800ef38:	619a      	str	r2, [r3, #24]
}
 800ef3a:	bf00      	nop
 800ef3c:	37a0      	adds	r7, #160	; 0xa0
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	effffffe 	.word	0xeffffffe
 800ef48:	0800e7f3 	.word	0x0800e7f3

0800ef4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef68:	bf00      	nop
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d101      	bne.n	800ef9e <HAL_UARTEx_DisableFifoMode+0x16>
 800ef9a:	2302      	movs	r3, #2
 800ef9c:	e027      	b.n	800efee <HAL_UARTEx_DisableFifoMode+0x66>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2224      	movs	r2, #36	; 0x24
 800efaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f022 0201 	bic.w	r2, r2, #1
 800efc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800efcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2220      	movs	r2, #32
 800efe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b084      	sub	sp, #16
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
 800f002:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d101      	bne.n	800f012 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f00e:	2302      	movs	r3, #2
 800f010:	e02d      	b.n	800f06e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2224      	movs	r2, #36	; 0x24
 800f01e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f022 0201 	bic.w	r2, r2, #1
 800f038:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	683a      	ldr	r2, [r7, #0]
 800f04a:	430a      	orrs	r2, r1
 800f04c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f850 	bl	800f0f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2220      	movs	r2, #32
 800f060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f06c:	2300      	movs	r3, #0
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b084      	sub	sp, #16
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
 800f07e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f086:	2b01      	cmp	r3, #1
 800f088:	d101      	bne.n	800f08e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f08a:	2302      	movs	r3, #2
 800f08c:	e02d      	b.n	800f0ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2201      	movs	r2, #1
 800f092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2224      	movs	r2, #36	; 0x24
 800f09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f022 0201 	bic.w	r2, r2, #1
 800f0b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	689b      	ldr	r3, [r3, #8]
 800f0bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	430a      	orrs	r2, r1
 800f0c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 f812 	bl	800f0f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2220      	movs	r2, #32
 800f0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
	...

0800f0f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f100:	2b00      	cmp	r3, #0
 800f102:	d108      	bne.n	800f116 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2201      	movs	r2, #1
 800f110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f114:	e031      	b.n	800f17a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f116:	2310      	movs	r3, #16
 800f118:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f11a:	2310      	movs	r3, #16
 800f11c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	0e5b      	lsrs	r3, r3, #25
 800f126:	b2db      	uxtb	r3, r3
 800f128:	f003 0307 	and.w	r3, r3, #7
 800f12c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	0f5b      	lsrs	r3, r3, #29
 800f136:	b2db      	uxtb	r3, r3
 800f138:	f003 0307 	and.w	r3, r3, #7
 800f13c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f13e:	7bbb      	ldrb	r3, [r7, #14]
 800f140:	7b3a      	ldrb	r2, [r7, #12]
 800f142:	4911      	ldr	r1, [pc, #68]	; (800f188 <UARTEx_SetNbDataToProcess+0x94>)
 800f144:	5c8a      	ldrb	r2, [r1, r2]
 800f146:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f14a:	7b3a      	ldrb	r2, [r7, #12]
 800f14c:	490f      	ldr	r1, [pc, #60]	; (800f18c <UARTEx_SetNbDataToProcess+0x98>)
 800f14e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f150:	fb93 f3f2 	sdiv	r3, r3, r2
 800f154:	b29a      	uxth	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
 800f15e:	7b7a      	ldrb	r2, [r7, #13]
 800f160:	4909      	ldr	r1, [pc, #36]	; (800f188 <UARTEx_SetNbDataToProcess+0x94>)
 800f162:	5c8a      	ldrb	r2, [r1, r2]
 800f164:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f168:	7b7a      	ldrb	r2, [r7, #13]
 800f16a:	4908      	ldr	r1, [pc, #32]	; (800f18c <UARTEx_SetNbDataToProcess+0x98>)
 800f16c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f16e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f172:	b29a      	uxth	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f17a:	bf00      	nop
 800f17c:	3714      	adds	r7, #20
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	080127f0 	.word	0x080127f0
 800f18c:	080127f8 	.word	0x080127f8

0800f190 <__errno>:
 800f190:	4b01      	ldr	r3, [pc, #4]	; (800f198 <__errno+0x8>)
 800f192:	6818      	ldr	r0, [r3, #0]
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	24000100 	.word	0x24000100

0800f19c <__libc_init_array>:
 800f19c:	b570      	push	{r4, r5, r6, lr}
 800f19e:	4d0d      	ldr	r5, [pc, #52]	; (800f1d4 <__libc_init_array+0x38>)
 800f1a0:	4c0d      	ldr	r4, [pc, #52]	; (800f1d8 <__libc_init_array+0x3c>)
 800f1a2:	1b64      	subs	r4, r4, r5
 800f1a4:	10a4      	asrs	r4, r4, #2
 800f1a6:	2600      	movs	r6, #0
 800f1a8:	42a6      	cmp	r6, r4
 800f1aa:	d109      	bne.n	800f1c0 <__libc_init_array+0x24>
 800f1ac:	4d0b      	ldr	r5, [pc, #44]	; (800f1dc <__libc_init_array+0x40>)
 800f1ae:	4c0c      	ldr	r4, [pc, #48]	; (800f1e0 <__libc_init_array+0x44>)
 800f1b0:	f003 fae8 	bl	8012784 <_init>
 800f1b4:	1b64      	subs	r4, r4, r5
 800f1b6:	10a4      	asrs	r4, r4, #2
 800f1b8:	2600      	movs	r6, #0
 800f1ba:	42a6      	cmp	r6, r4
 800f1bc:	d105      	bne.n	800f1ca <__libc_init_array+0x2e>
 800f1be:	bd70      	pop	{r4, r5, r6, pc}
 800f1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1c4:	4798      	blx	r3
 800f1c6:	3601      	adds	r6, #1
 800f1c8:	e7ee      	b.n	800f1a8 <__libc_init_array+0xc>
 800f1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ce:	4798      	blx	r3
 800f1d0:	3601      	adds	r6, #1
 800f1d2:	e7f2      	b.n	800f1ba <__libc_init_array+0x1e>
 800f1d4:	080144f0 	.word	0x080144f0
 800f1d8:	080144f0 	.word	0x080144f0
 800f1dc:	080144f0 	.word	0x080144f0
 800f1e0:	080144f4 	.word	0x080144f4

0800f1e4 <memcpy>:
 800f1e4:	440a      	add	r2, r1
 800f1e6:	4291      	cmp	r1, r2
 800f1e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1ec:	d100      	bne.n	800f1f0 <memcpy+0xc>
 800f1ee:	4770      	bx	lr
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1fa:	4291      	cmp	r1, r2
 800f1fc:	d1f9      	bne.n	800f1f2 <memcpy+0xe>
 800f1fe:	bd10      	pop	{r4, pc}

0800f200 <memset>:
 800f200:	4402      	add	r2, r0
 800f202:	4603      	mov	r3, r0
 800f204:	4293      	cmp	r3, r2
 800f206:	d100      	bne.n	800f20a <memset+0xa>
 800f208:	4770      	bx	lr
 800f20a:	f803 1b01 	strb.w	r1, [r3], #1
 800f20e:	e7f9      	b.n	800f204 <memset+0x4>

0800f210 <sulp>:
 800f210:	b570      	push	{r4, r5, r6, lr}
 800f212:	4604      	mov	r4, r0
 800f214:	460d      	mov	r5, r1
 800f216:	4616      	mov	r6, r2
 800f218:	ec45 4b10 	vmov	d0, r4, r5
 800f21c:	f001 fcca 	bl	8010bb4 <__ulp>
 800f220:	b17e      	cbz	r6, 800f242 <sulp+0x32>
 800f222:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f226:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	dd09      	ble.n	800f242 <sulp+0x32>
 800f22e:	051b      	lsls	r3, r3, #20
 800f230:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f234:	2000      	movs	r0, #0
 800f236:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f23a:	ec41 0b17 	vmov	d7, r0, r1
 800f23e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f242:	bd70      	pop	{r4, r5, r6, pc}
 800f244:	0000      	movs	r0, r0
	...

0800f248 <_strtod_l>:
 800f248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	ed2d 8b0e 	vpush	{d8-d14}
 800f250:	b097      	sub	sp, #92	; 0x5c
 800f252:	461f      	mov	r7, r3
 800f254:	2300      	movs	r3, #0
 800f256:	9312      	str	r3, [sp, #72]	; 0x48
 800f258:	4ba1      	ldr	r3, [pc, #644]	; (800f4e0 <_strtod_l+0x298>)
 800f25a:	920d      	str	r2, [sp, #52]	; 0x34
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	9307      	str	r3, [sp, #28]
 800f260:	4604      	mov	r4, r0
 800f262:	4618      	mov	r0, r3
 800f264:	468b      	mov	fp, r1
 800f266:	f7f1 f83b 	bl	80002e0 <strlen>
 800f26a:	f04f 0800 	mov.w	r8, #0
 800f26e:	4605      	mov	r5, r0
 800f270:	f04f 0900 	mov.w	r9, #0
 800f274:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f278:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f27a:	7813      	ldrb	r3, [r2, #0]
 800f27c:	2b2b      	cmp	r3, #43	; 0x2b
 800f27e:	d04d      	beq.n	800f31c <_strtod_l+0xd4>
 800f280:	d83a      	bhi.n	800f2f8 <_strtod_l+0xb0>
 800f282:	2b0d      	cmp	r3, #13
 800f284:	d833      	bhi.n	800f2ee <_strtod_l+0xa6>
 800f286:	2b08      	cmp	r3, #8
 800f288:	d833      	bhi.n	800f2f2 <_strtod_l+0xaa>
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d03d      	beq.n	800f30a <_strtod_l+0xc2>
 800f28e:	2300      	movs	r3, #0
 800f290:	9308      	str	r3, [sp, #32]
 800f292:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f294:	7833      	ldrb	r3, [r6, #0]
 800f296:	2b30      	cmp	r3, #48	; 0x30
 800f298:	f040 80b0 	bne.w	800f3fc <_strtod_l+0x1b4>
 800f29c:	7873      	ldrb	r3, [r6, #1]
 800f29e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2a2:	2b58      	cmp	r3, #88	; 0x58
 800f2a4:	d167      	bne.n	800f376 <_strtod_l+0x12e>
 800f2a6:	9b08      	ldr	r3, [sp, #32]
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	ab12      	add	r3, sp, #72	; 0x48
 800f2ac:	9702      	str	r7, [sp, #8]
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	4a8c      	ldr	r2, [pc, #560]	; (800f4e4 <_strtod_l+0x29c>)
 800f2b2:	ab13      	add	r3, sp, #76	; 0x4c
 800f2b4:	a911      	add	r1, sp, #68	; 0x44
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 fdf0 	bl	800fe9c <__gethex>
 800f2bc:	f010 0507 	ands.w	r5, r0, #7
 800f2c0:	4607      	mov	r7, r0
 800f2c2:	d005      	beq.n	800f2d0 <_strtod_l+0x88>
 800f2c4:	2d06      	cmp	r5, #6
 800f2c6:	d12b      	bne.n	800f320 <_strtod_l+0xd8>
 800f2c8:	3601      	adds	r6, #1
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	9611      	str	r6, [sp, #68]	; 0x44
 800f2ce:	9308      	str	r3, [sp, #32]
 800f2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	f040 854e 	bne.w	800fd74 <_strtod_l+0xb2c>
 800f2d8:	9b08      	ldr	r3, [sp, #32]
 800f2da:	b1e3      	cbz	r3, 800f316 <_strtod_l+0xce>
 800f2dc:	ec49 8b17 	vmov	d7, r8, r9
 800f2e0:	eeb1 0b47 	vneg.f64	d0, d7
 800f2e4:	b017      	add	sp, #92	; 0x5c
 800f2e6:	ecbd 8b0e 	vpop	{d8-d14}
 800f2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ee:	2b20      	cmp	r3, #32
 800f2f0:	d1cd      	bne.n	800f28e <_strtod_l+0x46>
 800f2f2:	3201      	adds	r2, #1
 800f2f4:	9211      	str	r2, [sp, #68]	; 0x44
 800f2f6:	e7bf      	b.n	800f278 <_strtod_l+0x30>
 800f2f8:	2b2d      	cmp	r3, #45	; 0x2d
 800f2fa:	d1c8      	bne.n	800f28e <_strtod_l+0x46>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	9308      	str	r3, [sp, #32]
 800f300:	1c53      	adds	r3, r2, #1
 800f302:	9311      	str	r3, [sp, #68]	; 0x44
 800f304:	7853      	ldrb	r3, [r2, #1]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1c3      	bne.n	800f292 <_strtod_l+0x4a>
 800f30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f30c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f310:	2b00      	cmp	r3, #0
 800f312:	f040 852d 	bne.w	800fd70 <_strtod_l+0xb28>
 800f316:	ec49 8b10 	vmov	d0, r8, r9
 800f31a:	e7e3      	b.n	800f2e4 <_strtod_l+0x9c>
 800f31c:	2300      	movs	r3, #0
 800f31e:	e7ee      	b.n	800f2fe <_strtod_l+0xb6>
 800f320:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f322:	b13a      	cbz	r2, 800f334 <_strtod_l+0xec>
 800f324:	2135      	movs	r1, #53	; 0x35
 800f326:	a814      	add	r0, sp, #80	; 0x50
 800f328:	f001 fd4c 	bl	8010dc4 <__copybits>
 800f32c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f32e:	4620      	mov	r0, r4
 800f330:	f001 f90e 	bl	8010550 <_Bfree>
 800f334:	3d01      	subs	r5, #1
 800f336:	2d04      	cmp	r5, #4
 800f338:	d806      	bhi.n	800f348 <_strtod_l+0x100>
 800f33a:	e8df f005 	tbb	[pc, r5]
 800f33e:	030a      	.short	0x030a
 800f340:	1714      	.short	0x1714
 800f342:	0a          	.byte	0x0a
 800f343:	00          	.byte	0x00
 800f344:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f348:	073f      	lsls	r7, r7, #28
 800f34a:	d5c1      	bpl.n	800f2d0 <_strtod_l+0x88>
 800f34c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f350:	e7be      	b.n	800f2d0 <_strtod_l+0x88>
 800f352:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f356:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f358:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f35c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f360:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f364:	e7f0      	b.n	800f348 <_strtod_l+0x100>
 800f366:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f4e8 <_strtod_l+0x2a0>
 800f36a:	e7ed      	b.n	800f348 <_strtod_l+0x100>
 800f36c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f370:	f04f 38ff 	mov.w	r8, #4294967295
 800f374:	e7e8      	b.n	800f348 <_strtod_l+0x100>
 800f376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f378:	1c5a      	adds	r2, r3, #1
 800f37a:	9211      	str	r2, [sp, #68]	; 0x44
 800f37c:	785b      	ldrb	r3, [r3, #1]
 800f37e:	2b30      	cmp	r3, #48	; 0x30
 800f380:	d0f9      	beq.n	800f376 <_strtod_l+0x12e>
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0a4      	beq.n	800f2d0 <_strtod_l+0x88>
 800f386:	2301      	movs	r3, #1
 800f388:	f04f 0a00 	mov.w	sl, #0
 800f38c:	9304      	str	r3, [sp, #16]
 800f38e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f390:	930a      	str	r3, [sp, #40]	; 0x28
 800f392:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f396:	f8cd a018 	str.w	sl, [sp, #24]
 800f39a:	220a      	movs	r2, #10
 800f39c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f39e:	7807      	ldrb	r7, [r0, #0]
 800f3a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f3a4:	b2d9      	uxtb	r1, r3
 800f3a6:	2909      	cmp	r1, #9
 800f3a8:	d92a      	bls.n	800f400 <_strtod_l+0x1b8>
 800f3aa:	9907      	ldr	r1, [sp, #28]
 800f3ac:	462a      	mov	r2, r5
 800f3ae:	f001 fe0f 	bl	8010fd0 <strncmp>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d033      	beq.n	800f41e <_strtod_l+0x1d6>
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	9b06      	ldr	r3, [sp, #24]
 800f3ba:	463a      	mov	r2, r7
 800f3bc:	4601      	mov	r1, r0
 800f3be:	4607      	mov	r7, r0
 800f3c0:	2a65      	cmp	r2, #101	; 0x65
 800f3c2:	d001      	beq.n	800f3c8 <_strtod_l+0x180>
 800f3c4:	2a45      	cmp	r2, #69	; 0x45
 800f3c6:	d117      	bne.n	800f3f8 <_strtod_l+0x1b0>
 800f3c8:	b91b      	cbnz	r3, 800f3d2 <_strtod_l+0x18a>
 800f3ca:	9b04      	ldr	r3, [sp, #16]
 800f3cc:	4303      	orrs	r3, r0
 800f3ce:	d09c      	beq.n	800f30a <_strtod_l+0xc2>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f3d6:	f10b 0201 	add.w	r2, fp, #1
 800f3da:	9211      	str	r2, [sp, #68]	; 0x44
 800f3dc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f3e0:	2a2b      	cmp	r2, #43	; 0x2b
 800f3e2:	d071      	beq.n	800f4c8 <_strtod_l+0x280>
 800f3e4:	2a2d      	cmp	r2, #45	; 0x2d
 800f3e6:	d077      	beq.n	800f4d8 <_strtod_l+0x290>
 800f3e8:	f04f 0e00 	mov.w	lr, #0
 800f3ec:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f3f0:	2d09      	cmp	r5, #9
 800f3f2:	d97f      	bls.n	800f4f4 <_strtod_l+0x2ac>
 800f3f4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f3f8:	2500      	movs	r5, #0
 800f3fa:	e09b      	b.n	800f534 <_strtod_l+0x2ec>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	e7c3      	b.n	800f388 <_strtod_l+0x140>
 800f400:	9906      	ldr	r1, [sp, #24]
 800f402:	2908      	cmp	r1, #8
 800f404:	bfdd      	ittte	le
 800f406:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f408:	fb02 3301 	mlale	r3, r2, r1, r3
 800f40c:	9309      	strle	r3, [sp, #36]	; 0x24
 800f40e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f412:	9b06      	ldr	r3, [sp, #24]
 800f414:	3001      	adds	r0, #1
 800f416:	3301      	adds	r3, #1
 800f418:	9306      	str	r3, [sp, #24]
 800f41a:	9011      	str	r0, [sp, #68]	; 0x44
 800f41c:	e7be      	b.n	800f39c <_strtod_l+0x154>
 800f41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f420:	195a      	adds	r2, r3, r5
 800f422:	9211      	str	r2, [sp, #68]	; 0x44
 800f424:	5d5a      	ldrb	r2, [r3, r5]
 800f426:	9b06      	ldr	r3, [sp, #24]
 800f428:	b3a3      	cbz	r3, 800f494 <_strtod_l+0x24c>
 800f42a:	4607      	mov	r7, r0
 800f42c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f430:	2909      	cmp	r1, #9
 800f432:	d912      	bls.n	800f45a <_strtod_l+0x212>
 800f434:	2101      	movs	r1, #1
 800f436:	e7c3      	b.n	800f3c0 <_strtod_l+0x178>
 800f438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	9211      	str	r2, [sp, #68]	; 0x44
 800f43e:	785a      	ldrb	r2, [r3, #1]
 800f440:	3001      	adds	r0, #1
 800f442:	2a30      	cmp	r2, #48	; 0x30
 800f444:	d0f8      	beq.n	800f438 <_strtod_l+0x1f0>
 800f446:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f44a:	2b08      	cmp	r3, #8
 800f44c:	f200 8497 	bhi.w	800fd7e <_strtod_l+0xb36>
 800f450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f452:	930a      	str	r3, [sp, #40]	; 0x28
 800f454:	4607      	mov	r7, r0
 800f456:	2000      	movs	r0, #0
 800f458:	4603      	mov	r3, r0
 800f45a:	3a30      	subs	r2, #48	; 0x30
 800f45c:	f100 0101 	add.w	r1, r0, #1
 800f460:	d012      	beq.n	800f488 <_strtod_l+0x240>
 800f462:	440f      	add	r7, r1
 800f464:	eb00 0c03 	add.w	ip, r0, r3
 800f468:	4619      	mov	r1, r3
 800f46a:	250a      	movs	r5, #10
 800f46c:	4561      	cmp	r1, ip
 800f46e:	d113      	bne.n	800f498 <_strtod_l+0x250>
 800f470:	1819      	adds	r1, r3, r0
 800f472:	2908      	cmp	r1, #8
 800f474:	f103 0301 	add.w	r3, r3, #1
 800f478:	4403      	add	r3, r0
 800f47a:	dc1c      	bgt.n	800f4b6 <_strtod_l+0x26e>
 800f47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f47e:	210a      	movs	r1, #10
 800f480:	fb01 2200 	mla	r2, r1, r0, r2
 800f484:	9209      	str	r2, [sp, #36]	; 0x24
 800f486:	2100      	movs	r1, #0
 800f488:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f48a:	1c50      	adds	r0, r2, #1
 800f48c:	9011      	str	r0, [sp, #68]	; 0x44
 800f48e:	7852      	ldrb	r2, [r2, #1]
 800f490:	4608      	mov	r0, r1
 800f492:	e7cb      	b.n	800f42c <_strtod_l+0x1e4>
 800f494:	9806      	ldr	r0, [sp, #24]
 800f496:	e7d4      	b.n	800f442 <_strtod_l+0x1fa>
 800f498:	2908      	cmp	r1, #8
 800f49a:	dc04      	bgt.n	800f4a6 <_strtod_l+0x25e>
 800f49c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f49e:	436e      	muls	r6, r5
 800f4a0:	9609      	str	r6, [sp, #36]	; 0x24
 800f4a2:	3101      	adds	r1, #1
 800f4a4:	e7e2      	b.n	800f46c <_strtod_l+0x224>
 800f4a6:	f101 0e01 	add.w	lr, r1, #1
 800f4aa:	f1be 0f10 	cmp.w	lr, #16
 800f4ae:	bfd8      	it	le
 800f4b0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f4b4:	e7f5      	b.n	800f4a2 <_strtod_l+0x25a>
 800f4b6:	2b10      	cmp	r3, #16
 800f4b8:	bfdc      	itt	le
 800f4ba:	210a      	movle	r1, #10
 800f4bc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f4c0:	e7e1      	b.n	800f486 <_strtod_l+0x23e>
 800f4c2:	2700      	movs	r7, #0
 800f4c4:	2101      	movs	r1, #1
 800f4c6:	e780      	b.n	800f3ca <_strtod_l+0x182>
 800f4c8:	f04f 0e00 	mov.w	lr, #0
 800f4cc:	f10b 0202 	add.w	r2, fp, #2
 800f4d0:	9211      	str	r2, [sp, #68]	; 0x44
 800f4d2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f4d6:	e789      	b.n	800f3ec <_strtod_l+0x1a4>
 800f4d8:	f04f 0e01 	mov.w	lr, #1
 800f4dc:	e7f6      	b.n	800f4cc <_strtod_l+0x284>
 800f4de:	bf00      	nop
 800f4e0:	080128d8 	.word	0x080128d8
 800f4e4:	08012810 	.word	0x08012810
 800f4e8:	7ff00000 	.word	0x7ff00000
 800f4ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f4ee:	1c55      	adds	r5, r2, #1
 800f4f0:	9511      	str	r5, [sp, #68]	; 0x44
 800f4f2:	7852      	ldrb	r2, [r2, #1]
 800f4f4:	2a30      	cmp	r2, #48	; 0x30
 800f4f6:	d0f9      	beq.n	800f4ec <_strtod_l+0x2a4>
 800f4f8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f4fc:	2d08      	cmp	r5, #8
 800f4fe:	f63f af7b 	bhi.w	800f3f8 <_strtod_l+0x1b0>
 800f502:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f506:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f508:	9207      	str	r2, [sp, #28]
 800f50a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f50c:	1c55      	adds	r5, r2, #1
 800f50e:	9511      	str	r5, [sp, #68]	; 0x44
 800f510:	7852      	ldrb	r2, [r2, #1]
 800f512:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f516:	2e09      	cmp	r6, #9
 800f518:	d937      	bls.n	800f58a <_strtod_l+0x342>
 800f51a:	9e07      	ldr	r6, [sp, #28]
 800f51c:	1bad      	subs	r5, r5, r6
 800f51e:	2d08      	cmp	r5, #8
 800f520:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f524:	dc02      	bgt.n	800f52c <_strtod_l+0x2e4>
 800f526:	4565      	cmp	r5, ip
 800f528:	bfa8      	it	ge
 800f52a:	4665      	movge	r5, ip
 800f52c:	f1be 0f00 	cmp.w	lr, #0
 800f530:	d000      	beq.n	800f534 <_strtod_l+0x2ec>
 800f532:	426d      	negs	r5, r5
 800f534:	2b00      	cmp	r3, #0
 800f536:	d14d      	bne.n	800f5d4 <_strtod_l+0x38c>
 800f538:	9b04      	ldr	r3, [sp, #16]
 800f53a:	4303      	orrs	r3, r0
 800f53c:	f47f aec8 	bne.w	800f2d0 <_strtod_l+0x88>
 800f540:	2900      	cmp	r1, #0
 800f542:	f47f aee2 	bne.w	800f30a <_strtod_l+0xc2>
 800f546:	2a69      	cmp	r2, #105	; 0x69
 800f548:	d027      	beq.n	800f59a <_strtod_l+0x352>
 800f54a:	dc24      	bgt.n	800f596 <_strtod_l+0x34e>
 800f54c:	2a49      	cmp	r2, #73	; 0x49
 800f54e:	d024      	beq.n	800f59a <_strtod_l+0x352>
 800f550:	2a4e      	cmp	r2, #78	; 0x4e
 800f552:	f47f aeda 	bne.w	800f30a <_strtod_l+0xc2>
 800f556:	4996      	ldr	r1, [pc, #600]	; (800f7b0 <_strtod_l+0x568>)
 800f558:	a811      	add	r0, sp, #68	; 0x44
 800f55a:	f000 fef7 	bl	801034c <__match>
 800f55e:	2800      	cmp	r0, #0
 800f560:	f43f aed3 	beq.w	800f30a <_strtod_l+0xc2>
 800f564:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2b28      	cmp	r3, #40	; 0x28
 800f56a:	d12d      	bne.n	800f5c8 <_strtod_l+0x380>
 800f56c:	4991      	ldr	r1, [pc, #580]	; (800f7b4 <_strtod_l+0x56c>)
 800f56e:	aa14      	add	r2, sp, #80	; 0x50
 800f570:	a811      	add	r0, sp, #68	; 0x44
 800f572:	f000 feff 	bl	8010374 <__hexnan>
 800f576:	2805      	cmp	r0, #5
 800f578:	d126      	bne.n	800f5c8 <_strtod_l+0x380>
 800f57a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f57c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f580:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f584:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f588:	e6a2      	b.n	800f2d0 <_strtod_l+0x88>
 800f58a:	250a      	movs	r5, #10
 800f58c:	fb05 250c 	mla	r5, r5, ip, r2
 800f590:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f594:	e7b9      	b.n	800f50a <_strtod_l+0x2c2>
 800f596:	2a6e      	cmp	r2, #110	; 0x6e
 800f598:	e7db      	b.n	800f552 <_strtod_l+0x30a>
 800f59a:	4987      	ldr	r1, [pc, #540]	; (800f7b8 <_strtod_l+0x570>)
 800f59c:	a811      	add	r0, sp, #68	; 0x44
 800f59e:	f000 fed5 	bl	801034c <__match>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	f43f aeb1 	beq.w	800f30a <_strtod_l+0xc2>
 800f5a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5aa:	4984      	ldr	r1, [pc, #528]	; (800f7bc <_strtod_l+0x574>)
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	a811      	add	r0, sp, #68	; 0x44
 800f5b0:	9311      	str	r3, [sp, #68]	; 0x44
 800f5b2:	f000 fecb 	bl	801034c <__match>
 800f5b6:	b910      	cbnz	r0, 800f5be <_strtod_l+0x376>
 800f5b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	9311      	str	r3, [sp, #68]	; 0x44
 800f5be:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f7d0 <_strtod_l+0x588>
 800f5c2:	f04f 0800 	mov.w	r8, #0
 800f5c6:	e683      	b.n	800f2d0 <_strtod_l+0x88>
 800f5c8:	487d      	ldr	r0, [pc, #500]	; (800f7c0 <_strtod_l+0x578>)
 800f5ca:	f001 fce9 	bl	8010fa0 <nan>
 800f5ce:	ec59 8b10 	vmov	r8, r9, d0
 800f5d2:	e67d      	b.n	800f2d0 <_strtod_l+0x88>
 800f5d4:	1bea      	subs	r2, r5, r7
 800f5d6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f5da:	9207      	str	r2, [sp, #28]
 800f5dc:	9a06      	ldr	r2, [sp, #24]
 800f5de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f5e2:	2a00      	cmp	r2, #0
 800f5e4:	bf08      	it	eq
 800f5e6:	461a      	moveq	r2, r3
 800f5e8:	2b10      	cmp	r3, #16
 800f5ea:	9206      	str	r2, [sp, #24]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	bfa8      	it	ge
 800f5f0:	2210      	movge	r2, #16
 800f5f2:	2b09      	cmp	r3, #9
 800f5f4:	ec59 8b17 	vmov	r8, r9, d7
 800f5f8:	dd0c      	ble.n	800f614 <_strtod_l+0x3cc>
 800f5fa:	4972      	ldr	r1, [pc, #456]	; (800f7c4 <_strtod_l+0x57c>)
 800f5fc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f600:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f604:	ee06 aa90 	vmov	s13, sl
 800f608:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f60c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f610:	ec59 8b16 	vmov	r8, r9, d6
 800f614:	2b0f      	cmp	r3, #15
 800f616:	dc36      	bgt.n	800f686 <_strtod_l+0x43e>
 800f618:	9907      	ldr	r1, [sp, #28]
 800f61a:	2900      	cmp	r1, #0
 800f61c:	f43f ae58 	beq.w	800f2d0 <_strtod_l+0x88>
 800f620:	dd23      	ble.n	800f66a <_strtod_l+0x422>
 800f622:	2916      	cmp	r1, #22
 800f624:	dc0b      	bgt.n	800f63e <_strtod_l+0x3f6>
 800f626:	4b67      	ldr	r3, [pc, #412]	; (800f7c4 <_strtod_l+0x57c>)
 800f628:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f62c:	ed93 7b00 	vldr	d7, [r3]
 800f630:	ec49 8b16 	vmov	d6, r8, r9
 800f634:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f638:	ec59 8b17 	vmov	r8, r9, d7
 800f63c:	e648      	b.n	800f2d0 <_strtod_l+0x88>
 800f63e:	9807      	ldr	r0, [sp, #28]
 800f640:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f644:	4281      	cmp	r1, r0
 800f646:	db1e      	blt.n	800f686 <_strtod_l+0x43e>
 800f648:	4a5e      	ldr	r2, [pc, #376]	; (800f7c4 <_strtod_l+0x57c>)
 800f64a:	f1c3 030f 	rsb	r3, r3, #15
 800f64e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f652:	ed91 7b00 	vldr	d7, [r1]
 800f656:	ec49 8b16 	vmov	d6, r8, r9
 800f65a:	1ac3      	subs	r3, r0, r3
 800f65c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f660:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f664:	ed92 6b00 	vldr	d6, [r2]
 800f668:	e7e4      	b.n	800f634 <_strtod_l+0x3ec>
 800f66a:	9907      	ldr	r1, [sp, #28]
 800f66c:	3116      	adds	r1, #22
 800f66e:	db0a      	blt.n	800f686 <_strtod_l+0x43e>
 800f670:	4b54      	ldr	r3, [pc, #336]	; (800f7c4 <_strtod_l+0x57c>)
 800f672:	1b7d      	subs	r5, r7, r5
 800f674:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f678:	ed95 7b00 	vldr	d7, [r5]
 800f67c:	ec49 8b16 	vmov	d6, r8, r9
 800f680:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f684:	e7d8      	b.n	800f638 <_strtod_l+0x3f0>
 800f686:	9907      	ldr	r1, [sp, #28]
 800f688:	1a9a      	subs	r2, r3, r2
 800f68a:	440a      	add	r2, r1
 800f68c:	2a00      	cmp	r2, #0
 800f68e:	dd6f      	ble.n	800f770 <_strtod_l+0x528>
 800f690:	f012 000f 	ands.w	r0, r2, #15
 800f694:	d00a      	beq.n	800f6ac <_strtod_l+0x464>
 800f696:	494b      	ldr	r1, [pc, #300]	; (800f7c4 <_strtod_l+0x57c>)
 800f698:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f69c:	ed91 7b00 	vldr	d7, [r1]
 800f6a0:	ec49 8b16 	vmov	d6, r8, r9
 800f6a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6a8:	ec59 8b17 	vmov	r8, r9, d7
 800f6ac:	f032 020f 	bics.w	r2, r2, #15
 800f6b0:	d04f      	beq.n	800f752 <_strtod_l+0x50a>
 800f6b2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f6b6:	dd22      	ble.n	800f6fe <_strtod_l+0x4b6>
 800f6b8:	2500      	movs	r5, #0
 800f6ba:	462e      	mov	r6, r5
 800f6bc:	9506      	str	r5, [sp, #24]
 800f6be:	462f      	mov	r7, r5
 800f6c0:	2322      	movs	r3, #34	; 0x22
 800f6c2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f7d0 <_strtod_l+0x588>
 800f6c6:	6023      	str	r3, [r4, #0]
 800f6c8:	f04f 0800 	mov.w	r8, #0
 800f6cc:	9b06      	ldr	r3, [sp, #24]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f43f adfe 	beq.w	800f2d0 <_strtod_l+0x88>
 800f6d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f000 ff3a 	bl	8010550 <_Bfree>
 800f6dc:	4639      	mov	r1, r7
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 ff36 	bl	8010550 <_Bfree>
 800f6e4:	4631      	mov	r1, r6
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f000 ff32 	bl	8010550 <_Bfree>
 800f6ec:	9906      	ldr	r1, [sp, #24]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f000 ff2e 	bl	8010550 <_Bfree>
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 ff2a 	bl	8010550 <_Bfree>
 800f6fc:	e5e8      	b.n	800f2d0 <_strtod_l+0x88>
 800f6fe:	2000      	movs	r0, #0
 800f700:	ec49 8b17 	vmov	d7, r8, r9
 800f704:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f7c8 <_strtod_l+0x580>
 800f708:	1112      	asrs	r2, r2, #4
 800f70a:	4601      	mov	r1, r0
 800f70c:	2a01      	cmp	r2, #1
 800f70e:	dc23      	bgt.n	800f758 <_strtod_l+0x510>
 800f710:	b108      	cbz	r0, 800f716 <_strtod_l+0x4ce>
 800f712:	ec59 8b17 	vmov	r8, r9, d7
 800f716:	4a2c      	ldr	r2, [pc, #176]	; (800f7c8 <_strtod_l+0x580>)
 800f718:	482c      	ldr	r0, [pc, #176]	; (800f7cc <_strtod_l+0x584>)
 800f71a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f71e:	ed92 7b00 	vldr	d7, [r2]
 800f722:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f726:	ec49 8b16 	vmov	d6, r8, r9
 800f72a:	4a29      	ldr	r2, [pc, #164]	; (800f7d0 <_strtod_l+0x588>)
 800f72c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f730:	ee17 1a90 	vmov	r1, s15
 800f734:	400a      	ands	r2, r1
 800f736:	4282      	cmp	r2, r0
 800f738:	ec59 8b17 	vmov	r8, r9, d7
 800f73c:	d8bc      	bhi.n	800f6b8 <_strtod_l+0x470>
 800f73e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f742:	4282      	cmp	r2, r0
 800f744:	bf86      	itte	hi
 800f746:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f7d4 <_strtod_l+0x58c>
 800f74a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f74e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f752:	2200      	movs	r2, #0
 800f754:	9204      	str	r2, [sp, #16]
 800f756:	e078      	b.n	800f84a <_strtod_l+0x602>
 800f758:	07d6      	lsls	r6, r2, #31
 800f75a:	d504      	bpl.n	800f766 <_strtod_l+0x51e>
 800f75c:	ed9c 6b00 	vldr	d6, [ip]
 800f760:	2001      	movs	r0, #1
 800f762:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f766:	3101      	adds	r1, #1
 800f768:	1052      	asrs	r2, r2, #1
 800f76a:	f10c 0c08 	add.w	ip, ip, #8
 800f76e:	e7cd      	b.n	800f70c <_strtod_l+0x4c4>
 800f770:	d0ef      	beq.n	800f752 <_strtod_l+0x50a>
 800f772:	4252      	negs	r2, r2
 800f774:	f012 000f 	ands.w	r0, r2, #15
 800f778:	d00a      	beq.n	800f790 <_strtod_l+0x548>
 800f77a:	4912      	ldr	r1, [pc, #72]	; (800f7c4 <_strtod_l+0x57c>)
 800f77c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f780:	ed91 7b00 	vldr	d7, [r1]
 800f784:	ec49 8b16 	vmov	d6, r8, r9
 800f788:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f78c:	ec59 8b17 	vmov	r8, r9, d7
 800f790:	1112      	asrs	r2, r2, #4
 800f792:	d0de      	beq.n	800f752 <_strtod_l+0x50a>
 800f794:	2a1f      	cmp	r2, #31
 800f796:	dd1f      	ble.n	800f7d8 <_strtod_l+0x590>
 800f798:	2500      	movs	r5, #0
 800f79a:	462e      	mov	r6, r5
 800f79c:	9506      	str	r5, [sp, #24]
 800f79e:	462f      	mov	r7, r5
 800f7a0:	2322      	movs	r3, #34	; 0x22
 800f7a2:	f04f 0800 	mov.w	r8, #0
 800f7a6:	f04f 0900 	mov.w	r9, #0
 800f7aa:	6023      	str	r3, [r4, #0]
 800f7ac:	e78e      	b.n	800f6cc <_strtod_l+0x484>
 800f7ae:	bf00      	nop
 800f7b0:	0801280d 	.word	0x0801280d
 800f7b4:	08012824 	.word	0x08012824
 800f7b8:	08012804 	.word	0x08012804
 800f7bc:	08012807 	.word	0x08012807
 800f7c0:	08012a97 	.word	0x08012a97
 800f7c4:	08012988 	.word	0x08012988
 800f7c8:	08012960 	.word	0x08012960
 800f7cc:	7ca00000 	.word	0x7ca00000
 800f7d0:	7ff00000 	.word	0x7ff00000
 800f7d4:	7fefffff 	.word	0x7fefffff
 800f7d8:	f012 0110 	ands.w	r1, r2, #16
 800f7dc:	bf18      	it	ne
 800f7de:	216a      	movne	r1, #106	; 0x6a
 800f7e0:	9104      	str	r1, [sp, #16]
 800f7e2:	ec49 8b17 	vmov	d7, r8, r9
 800f7e6:	49be      	ldr	r1, [pc, #760]	; (800fae0 <_strtod_l+0x898>)
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	07d6      	lsls	r6, r2, #31
 800f7ec:	d504      	bpl.n	800f7f8 <_strtod_l+0x5b0>
 800f7ee:	ed91 6b00 	vldr	d6, [r1]
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7f8:	1052      	asrs	r2, r2, #1
 800f7fa:	f101 0108 	add.w	r1, r1, #8
 800f7fe:	d1f4      	bne.n	800f7ea <_strtod_l+0x5a2>
 800f800:	b108      	cbz	r0, 800f806 <_strtod_l+0x5be>
 800f802:	ec59 8b17 	vmov	r8, r9, d7
 800f806:	9a04      	ldr	r2, [sp, #16]
 800f808:	b1c2      	cbz	r2, 800f83c <_strtod_l+0x5f4>
 800f80a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f80e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f812:	2a00      	cmp	r2, #0
 800f814:	4648      	mov	r0, r9
 800f816:	dd11      	ble.n	800f83c <_strtod_l+0x5f4>
 800f818:	2a1f      	cmp	r2, #31
 800f81a:	f340 812e 	ble.w	800fa7a <_strtod_l+0x832>
 800f81e:	2a34      	cmp	r2, #52	; 0x34
 800f820:	bfde      	ittt	le
 800f822:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f826:	f04f 32ff 	movle.w	r2, #4294967295
 800f82a:	fa02 f101 	lslle.w	r1, r2, r1
 800f82e:	f04f 0800 	mov.w	r8, #0
 800f832:	bfcc      	ite	gt
 800f834:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f838:	ea01 0900 	andle.w	r9, r1, r0
 800f83c:	ec49 8b17 	vmov	d7, r8, r9
 800f840:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f848:	d0a6      	beq.n	800f798 <_strtod_l+0x550>
 800f84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f84c:	9200      	str	r2, [sp, #0]
 800f84e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f850:	9a06      	ldr	r2, [sp, #24]
 800f852:	4620      	mov	r0, r4
 800f854:	f000 fee4 	bl	8010620 <__s2b>
 800f858:	9006      	str	r0, [sp, #24]
 800f85a:	2800      	cmp	r0, #0
 800f85c:	f43f af2c 	beq.w	800f6b8 <_strtod_l+0x470>
 800f860:	9b07      	ldr	r3, [sp, #28]
 800f862:	1b7d      	subs	r5, r7, r5
 800f864:	2b00      	cmp	r3, #0
 800f866:	bfb4      	ite	lt
 800f868:	462b      	movlt	r3, r5
 800f86a:	2300      	movge	r3, #0
 800f86c:	9309      	str	r3, [sp, #36]	; 0x24
 800f86e:	9b07      	ldr	r3, [sp, #28]
 800f870:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800fac0 <_strtod_l+0x878>
 800f874:	ed9f ab94 	vldr	d10, [pc, #592]	; 800fac8 <_strtod_l+0x880>
 800f878:	ed9f bb95 	vldr	d11, [pc, #596]	; 800fad0 <_strtod_l+0x888>
 800f87c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f880:	2500      	movs	r5, #0
 800f882:	930c      	str	r3, [sp, #48]	; 0x30
 800f884:	462e      	mov	r6, r5
 800f886:	9b06      	ldr	r3, [sp, #24]
 800f888:	4620      	mov	r0, r4
 800f88a:	6859      	ldr	r1, [r3, #4]
 800f88c:	f000 fe20 	bl	80104d0 <_Balloc>
 800f890:	4607      	mov	r7, r0
 800f892:	2800      	cmp	r0, #0
 800f894:	f43f af14 	beq.w	800f6c0 <_strtod_l+0x478>
 800f898:	9b06      	ldr	r3, [sp, #24]
 800f89a:	691a      	ldr	r2, [r3, #16]
 800f89c:	3202      	adds	r2, #2
 800f89e:	f103 010c 	add.w	r1, r3, #12
 800f8a2:	0092      	lsls	r2, r2, #2
 800f8a4:	300c      	adds	r0, #12
 800f8a6:	f7ff fc9d 	bl	800f1e4 <memcpy>
 800f8aa:	ec49 8b10 	vmov	d0, r8, r9
 800f8ae:	aa14      	add	r2, sp, #80	; 0x50
 800f8b0:	a913      	add	r1, sp, #76	; 0x4c
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f001 f9fa 	bl	8010cac <__d2b>
 800f8b8:	ec49 8b18 	vmov	d8, r8, r9
 800f8bc:	9012      	str	r0, [sp, #72]	; 0x48
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	f43f aefe 	beq.w	800f6c0 <_strtod_l+0x478>
 800f8c4:	2101      	movs	r1, #1
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 ff44 	bl	8010754 <__i2b>
 800f8cc:	4606      	mov	r6, r0
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	f43f aef6 	beq.w	800f6c0 <_strtod_l+0x478>
 800f8d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	bfab      	itete	ge
 800f8dc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f8de:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f8e0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f8e4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f8e8:	bfac      	ite	ge
 800f8ea:	eb03 0b02 	addge.w	fp, r3, r2
 800f8ee:	eba2 0a03 	sublt.w	sl, r2, r3
 800f8f2:	9a04      	ldr	r2, [sp, #16]
 800f8f4:	1a9b      	subs	r3, r3, r2
 800f8f6:	440b      	add	r3, r1
 800f8f8:	4a7a      	ldr	r2, [pc, #488]	; (800fae4 <_strtod_l+0x89c>)
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f902:	f280 80cd 	bge.w	800faa0 <_strtod_l+0x858>
 800f906:	1ad2      	subs	r2, r2, r3
 800f908:	2a1f      	cmp	r2, #31
 800f90a:	eba1 0102 	sub.w	r1, r1, r2
 800f90e:	f04f 0001 	mov.w	r0, #1
 800f912:	f300 80b9 	bgt.w	800fa88 <_strtod_l+0x840>
 800f916:	fa00 f302 	lsl.w	r3, r0, r2
 800f91a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f91c:	2300      	movs	r3, #0
 800f91e:	930a      	str	r3, [sp, #40]	; 0x28
 800f920:	eb0b 0301 	add.w	r3, fp, r1
 800f924:	9a04      	ldr	r2, [sp, #16]
 800f926:	459b      	cmp	fp, r3
 800f928:	448a      	add	sl, r1
 800f92a:	4492      	add	sl, r2
 800f92c:	465a      	mov	r2, fp
 800f92e:	bfa8      	it	ge
 800f930:	461a      	movge	r2, r3
 800f932:	4552      	cmp	r2, sl
 800f934:	bfa8      	it	ge
 800f936:	4652      	movge	r2, sl
 800f938:	2a00      	cmp	r2, #0
 800f93a:	bfc2      	ittt	gt
 800f93c:	1a9b      	subgt	r3, r3, r2
 800f93e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f942:	ebab 0b02 	subgt.w	fp, fp, r2
 800f946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f948:	2a00      	cmp	r2, #0
 800f94a:	dd18      	ble.n	800f97e <_strtod_l+0x736>
 800f94c:	4631      	mov	r1, r6
 800f94e:	4620      	mov	r0, r4
 800f950:	930f      	str	r3, [sp, #60]	; 0x3c
 800f952:	f000 ffbf 	bl	80108d4 <__pow5mult>
 800f956:	4606      	mov	r6, r0
 800f958:	2800      	cmp	r0, #0
 800f95a:	f43f aeb1 	beq.w	800f6c0 <_strtod_l+0x478>
 800f95e:	4601      	mov	r1, r0
 800f960:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f962:	4620      	mov	r0, r4
 800f964:	f000 ff0c 	bl	8010780 <__multiply>
 800f968:	900e      	str	r0, [sp, #56]	; 0x38
 800f96a:	2800      	cmp	r0, #0
 800f96c:	f43f aea8 	beq.w	800f6c0 <_strtod_l+0x478>
 800f970:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f972:	4620      	mov	r0, r4
 800f974:	f000 fdec 	bl	8010550 <_Bfree>
 800f978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f97c:	9212      	str	r2, [sp, #72]	; 0x48
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f300 8093 	bgt.w	800faaa <_strtod_l+0x862>
 800f984:	9b07      	ldr	r3, [sp, #28]
 800f986:	2b00      	cmp	r3, #0
 800f988:	dd08      	ble.n	800f99c <_strtod_l+0x754>
 800f98a:	4639      	mov	r1, r7
 800f98c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f98e:	4620      	mov	r0, r4
 800f990:	f000 ffa0 	bl	80108d4 <__pow5mult>
 800f994:	4607      	mov	r7, r0
 800f996:	2800      	cmp	r0, #0
 800f998:	f43f ae92 	beq.w	800f6c0 <_strtod_l+0x478>
 800f99c:	f1ba 0f00 	cmp.w	sl, #0
 800f9a0:	dd08      	ble.n	800f9b4 <_strtod_l+0x76c>
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	4652      	mov	r2, sl
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f000 ffee 	bl	8010988 <__lshift>
 800f9ac:	4607      	mov	r7, r0
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	f43f ae86 	beq.w	800f6c0 <_strtod_l+0x478>
 800f9b4:	f1bb 0f00 	cmp.w	fp, #0
 800f9b8:	dd08      	ble.n	800f9cc <_strtod_l+0x784>
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	465a      	mov	r2, fp
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 ffe2 	bl	8010988 <__lshift>
 800f9c4:	4606      	mov	r6, r0
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f43f ae7a 	beq.w	800f6c0 <_strtod_l+0x478>
 800f9cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f9ce:	463a      	mov	r2, r7
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f001 f865 	bl	8010aa0 <__mdiff>
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	f43f ae71 	beq.w	800f6c0 <_strtod_l+0x478>
 800f9de:	2300      	movs	r3, #0
 800f9e0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f9e4:	60c3      	str	r3, [r0, #12]
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	f001 f83e 	bl	8010a68 <__mcmp>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	da7d      	bge.n	800faec <_strtod_l+0x8a4>
 800f9f0:	ea5a 0308 	orrs.w	r3, sl, r8
 800f9f4:	f040 80a3 	bne.w	800fb3e <_strtod_l+0x8f6>
 800f9f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f040 809e 	bne.w	800fb3e <_strtod_l+0x8f6>
 800fa02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa06:	0d1b      	lsrs	r3, r3, #20
 800fa08:	051b      	lsls	r3, r3, #20
 800fa0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa0e:	f240 8096 	bls.w	800fb3e <_strtod_l+0x8f6>
 800fa12:	696b      	ldr	r3, [r5, #20]
 800fa14:	b91b      	cbnz	r3, 800fa1e <_strtod_l+0x7d6>
 800fa16:	692b      	ldr	r3, [r5, #16]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	f340 8090 	ble.w	800fb3e <_strtod_l+0x8f6>
 800fa1e:	4629      	mov	r1, r5
 800fa20:	2201      	movs	r2, #1
 800fa22:	4620      	mov	r0, r4
 800fa24:	f000 ffb0 	bl	8010988 <__lshift>
 800fa28:	4631      	mov	r1, r6
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	f001 f81c 	bl	8010a68 <__mcmp>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f340 8084 	ble.w	800fb3e <_strtod_l+0x8f6>
 800fa36:	9904      	ldr	r1, [sp, #16]
 800fa38:	4a2b      	ldr	r2, [pc, #172]	; (800fae8 <_strtod_l+0x8a0>)
 800fa3a:	464b      	mov	r3, r9
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	f000 809d 	beq.w	800fb7c <_strtod_l+0x934>
 800fa42:	ea02 0109 	and.w	r1, r2, r9
 800fa46:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fa4a:	f300 8097 	bgt.w	800fb7c <_strtod_l+0x934>
 800fa4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fa52:	f77f aea5 	ble.w	800f7a0 <_strtod_l+0x558>
 800fa56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fad8 <_strtod_l+0x890>
 800fa5a:	ec49 8b16 	vmov	d6, r8, r9
 800fa5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fa62:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fa66:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	bf08      	it	eq
 800fa6e:	2322      	moveq	r3, #34	; 0x22
 800fa70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fa74:	bf08      	it	eq
 800fa76:	6023      	streq	r3, [r4, #0]
 800fa78:	e62c      	b.n	800f6d4 <_strtod_l+0x48c>
 800fa7a:	f04f 31ff 	mov.w	r1, #4294967295
 800fa7e:	fa01 f202 	lsl.w	r2, r1, r2
 800fa82:	ea02 0808 	and.w	r8, r2, r8
 800fa86:	e6d9      	b.n	800f83c <_strtod_l+0x5f4>
 800fa88:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800fa8c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800fa90:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800fa94:	33e2      	adds	r3, #226	; 0xe2
 800fa96:	fa00 f303 	lsl.w	r3, r0, r3
 800fa9a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800fa9e:	e73f      	b.n	800f920 <_strtod_l+0x6d8>
 800faa0:	2200      	movs	r2, #0
 800faa2:	2301      	movs	r3, #1
 800faa4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800faa8:	e73a      	b.n	800f920 <_strtod_l+0x6d8>
 800faaa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800faac:	461a      	mov	r2, r3
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 ff6a 	bl	8010988 <__lshift>
 800fab4:	9012      	str	r0, [sp, #72]	; 0x48
 800fab6:	2800      	cmp	r0, #0
 800fab8:	f47f af64 	bne.w	800f984 <_strtod_l+0x73c>
 800fabc:	e600      	b.n	800f6c0 <_strtod_l+0x478>
 800fabe:	bf00      	nop
 800fac0:	94a03595 	.word	0x94a03595
 800fac4:	3fcfffff 	.word	0x3fcfffff
 800fac8:	94a03595 	.word	0x94a03595
 800facc:	3fdfffff 	.word	0x3fdfffff
 800fad0:	35afe535 	.word	0x35afe535
 800fad4:	3fe00000 	.word	0x3fe00000
 800fad8:	00000000 	.word	0x00000000
 800fadc:	39500000 	.word	0x39500000
 800fae0:	08012838 	.word	0x08012838
 800fae4:	fffffc02 	.word	0xfffffc02
 800fae8:	7ff00000 	.word	0x7ff00000
 800faec:	46cb      	mov	fp, r9
 800faee:	d15f      	bne.n	800fbb0 <_strtod_l+0x968>
 800faf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800faf4:	f1ba 0f00 	cmp.w	sl, #0
 800faf8:	d02a      	beq.n	800fb50 <_strtod_l+0x908>
 800fafa:	4aa7      	ldr	r2, [pc, #668]	; (800fd98 <_strtod_l+0xb50>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d12b      	bne.n	800fb58 <_strtod_l+0x910>
 800fb00:	9b04      	ldr	r3, [sp, #16]
 800fb02:	4642      	mov	r2, r8
 800fb04:	b1fb      	cbz	r3, 800fb46 <_strtod_l+0x8fe>
 800fb06:	4ba5      	ldr	r3, [pc, #660]	; (800fd9c <_strtod_l+0xb54>)
 800fb08:	ea09 0303 	and.w	r3, r9, r3
 800fb0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb10:	f04f 31ff 	mov.w	r1, #4294967295
 800fb14:	d81a      	bhi.n	800fb4c <_strtod_l+0x904>
 800fb16:	0d1b      	lsrs	r3, r3, #20
 800fb18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb1c:	fa01 f303 	lsl.w	r3, r1, r3
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d119      	bne.n	800fb58 <_strtod_l+0x910>
 800fb24:	4b9e      	ldr	r3, [pc, #632]	; (800fda0 <_strtod_l+0xb58>)
 800fb26:	459b      	cmp	fp, r3
 800fb28:	d102      	bne.n	800fb30 <_strtod_l+0x8e8>
 800fb2a:	3201      	adds	r2, #1
 800fb2c:	f43f adc8 	beq.w	800f6c0 <_strtod_l+0x478>
 800fb30:	4b9a      	ldr	r3, [pc, #616]	; (800fd9c <_strtod_l+0xb54>)
 800fb32:	ea0b 0303 	and.w	r3, fp, r3
 800fb36:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fb3a:	f04f 0800 	mov.w	r8, #0
 800fb3e:	9b04      	ldr	r3, [sp, #16]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d188      	bne.n	800fa56 <_strtod_l+0x80e>
 800fb44:	e5c6      	b.n	800f6d4 <_strtod_l+0x48c>
 800fb46:	f04f 33ff 	mov.w	r3, #4294967295
 800fb4a:	e7e9      	b.n	800fb20 <_strtod_l+0x8d8>
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	e7e7      	b.n	800fb20 <_strtod_l+0x8d8>
 800fb50:	ea53 0308 	orrs.w	r3, r3, r8
 800fb54:	f43f af6f 	beq.w	800fa36 <_strtod_l+0x7ee>
 800fb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb5a:	b1cb      	cbz	r3, 800fb90 <_strtod_l+0x948>
 800fb5c:	ea13 0f0b 	tst.w	r3, fp
 800fb60:	d0ed      	beq.n	800fb3e <_strtod_l+0x8f6>
 800fb62:	9a04      	ldr	r2, [sp, #16]
 800fb64:	4640      	mov	r0, r8
 800fb66:	4649      	mov	r1, r9
 800fb68:	f1ba 0f00 	cmp.w	sl, #0
 800fb6c:	d014      	beq.n	800fb98 <_strtod_l+0x950>
 800fb6e:	f7ff fb4f 	bl	800f210 <sulp>
 800fb72:	ee38 7b00 	vadd.f64	d7, d8, d0
 800fb76:	ec59 8b17 	vmov	r8, r9, d7
 800fb7a:	e7e0      	b.n	800fb3e <_strtod_l+0x8f6>
 800fb7c:	4013      	ands	r3, r2
 800fb7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb82:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fb86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fb8a:	f04f 38ff 	mov.w	r8, #4294967295
 800fb8e:	e7d6      	b.n	800fb3e <_strtod_l+0x8f6>
 800fb90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb92:	ea13 0f08 	tst.w	r3, r8
 800fb96:	e7e3      	b.n	800fb60 <_strtod_l+0x918>
 800fb98:	f7ff fb3a 	bl	800f210 <sulp>
 800fb9c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800fba0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba8:	ec59 8b10 	vmov	r8, r9, d0
 800fbac:	d1c7      	bne.n	800fb3e <_strtod_l+0x8f6>
 800fbae:	e5f7      	b.n	800f7a0 <_strtod_l+0x558>
 800fbb0:	4631      	mov	r1, r6
 800fbb2:	4628      	mov	r0, r5
 800fbb4:	f001 f8d6 	bl	8010d64 <__ratio>
 800fbb8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fbbc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc4:	d865      	bhi.n	800fc92 <_strtod_l+0xa4a>
 800fbc6:	f1ba 0f00 	cmp.w	sl, #0
 800fbca:	d042      	beq.n	800fc52 <_strtod_l+0xa0a>
 800fbcc:	4b75      	ldr	r3, [pc, #468]	; (800fda4 <_strtod_l+0xb5c>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800fbd4:	4871      	ldr	r0, [pc, #452]	; (800fd9c <_strtod_l+0xb54>)
 800fbd6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fdb0 <_strtod_l+0xb68>
 800fbda:	ea0b 0100 	and.w	r1, fp, r0
 800fbde:	4561      	cmp	r1, ip
 800fbe0:	f040 808e 	bne.w	800fd00 <_strtod_l+0xab8>
 800fbe4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800fbe8:	ec49 8b10 	vmov	d0, r8, r9
 800fbec:	ec43 2b1c 	vmov	d12, r2, r3
 800fbf0:	910a      	str	r1, [sp, #40]	; 0x28
 800fbf2:	f000 ffdf 	bl	8010bb4 <__ulp>
 800fbf6:	ec49 8b1e 	vmov	d14, r8, r9
 800fbfa:	4868      	ldr	r0, [pc, #416]	; (800fd9c <_strtod_l+0xb54>)
 800fbfc:	eeac eb00 	vfma.f64	d14, d12, d0
 800fc00:	ee1e 3a90 	vmov	r3, s29
 800fc04:	4a68      	ldr	r2, [pc, #416]	; (800fda8 <_strtod_l+0xb60>)
 800fc06:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc08:	4018      	ands	r0, r3
 800fc0a:	4290      	cmp	r0, r2
 800fc0c:	ec59 8b1e 	vmov	r8, r9, d14
 800fc10:	d94e      	bls.n	800fcb0 <_strtod_l+0xa68>
 800fc12:	ee18 3a90 	vmov	r3, s17
 800fc16:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d104      	bne.n	800fc28 <_strtod_l+0x9e0>
 800fc1e:	ee18 3a10 	vmov	r3, s16
 800fc22:	3301      	adds	r3, #1
 800fc24:	f43f ad4c 	beq.w	800f6c0 <_strtod_l+0x478>
 800fc28:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fda0 <_strtod_l+0xb58>
 800fc2c:	f04f 38ff 	mov.w	r8, #4294967295
 800fc30:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fc32:	4620      	mov	r0, r4
 800fc34:	f000 fc8c 	bl	8010550 <_Bfree>
 800fc38:	4639      	mov	r1, r7
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 fc88 	bl	8010550 <_Bfree>
 800fc40:	4631      	mov	r1, r6
 800fc42:	4620      	mov	r0, r4
 800fc44:	f000 fc84 	bl	8010550 <_Bfree>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f000 fc80 	bl	8010550 <_Bfree>
 800fc50:	e619      	b.n	800f886 <_strtod_l+0x63e>
 800fc52:	f1b8 0f00 	cmp.w	r8, #0
 800fc56:	d112      	bne.n	800fc7e <_strtod_l+0xa36>
 800fc58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc5c:	b9b3      	cbnz	r3, 800fc8c <_strtod_l+0xa44>
 800fc5e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fc62:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fc6e:	bf58      	it	pl
 800fc70:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800fc74:	eeb1 7b4d 	vneg.f64	d7, d13
 800fc78:	ec53 2b17 	vmov	r2, r3, d7
 800fc7c:	e7aa      	b.n	800fbd4 <_strtod_l+0x98c>
 800fc7e:	f1b8 0f01 	cmp.w	r8, #1
 800fc82:	d103      	bne.n	800fc8c <_strtod_l+0xa44>
 800fc84:	f1b9 0f00 	cmp.w	r9, #0
 800fc88:	f43f ad8a 	beq.w	800f7a0 <_strtod_l+0x558>
 800fc8c:	4b47      	ldr	r3, [pc, #284]	; (800fdac <_strtod_l+0xb64>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	e79e      	b.n	800fbd0 <_strtod_l+0x988>
 800fc92:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fc96:	ee20 db0d 	vmul.f64	d13, d0, d13
 800fc9a:	f1ba 0f00 	cmp.w	sl, #0
 800fc9e:	d104      	bne.n	800fcaa <_strtod_l+0xa62>
 800fca0:	eeb1 7b4d 	vneg.f64	d7, d13
 800fca4:	ec53 2b17 	vmov	r2, r3, d7
 800fca8:	e794      	b.n	800fbd4 <_strtod_l+0x98c>
 800fcaa:	eeb0 7b4d 	vmov.f64	d7, d13
 800fcae:	e7f9      	b.n	800fca4 <_strtod_l+0xa5c>
 800fcb0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fcb4:	9b04      	ldr	r3, [sp, #16]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1ba      	bne.n	800fc30 <_strtod_l+0x9e8>
 800fcba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fcbe:	0d1b      	lsrs	r3, r3, #20
 800fcc0:	051b      	lsls	r3, r3, #20
 800fcc2:	4299      	cmp	r1, r3
 800fcc4:	d1b4      	bne.n	800fc30 <_strtod_l+0x9e8>
 800fcc6:	ec51 0b1d 	vmov	r0, r1, d13
 800fcca:	f7f0 fd35 	bl	8000738 <__aeabi_d2lz>
 800fcce:	f7f0 fced 	bl	80006ac <__aeabi_l2d>
 800fcd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcd6:	ec41 0b17 	vmov	d7, r0, r1
 800fcda:	ea43 0308 	orr.w	r3, r3, r8
 800fcde:	ea53 030a 	orrs.w	r3, r3, sl
 800fce2:	ee3d db47 	vsub.f64	d13, d13, d7
 800fce6:	d03c      	beq.n	800fd62 <_strtod_l+0xb1a>
 800fce8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf0:	f53f acf0 	bmi.w	800f6d4 <_strtod_l+0x48c>
 800fcf4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfc:	dd98      	ble.n	800fc30 <_strtod_l+0x9e8>
 800fcfe:	e4e9      	b.n	800f6d4 <_strtod_l+0x48c>
 800fd00:	9804      	ldr	r0, [sp, #16]
 800fd02:	b1f0      	cbz	r0, 800fd42 <_strtod_l+0xafa>
 800fd04:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fd08:	d81b      	bhi.n	800fd42 <_strtod_l+0xafa>
 800fd0a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fd90 <_strtod_l+0xb48>
 800fd0e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd16:	d811      	bhi.n	800fd3c <_strtod_l+0xaf4>
 800fd18:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fd1c:	ee1d 3a10 	vmov	r3, s26
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	bf38      	it	cc
 800fd24:	2301      	movcc	r3, #1
 800fd26:	ee0d 3a10 	vmov	s26, r3
 800fd2a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fd2e:	f1ba 0f00 	cmp.w	sl, #0
 800fd32:	d113      	bne.n	800fd5c <_strtod_l+0xb14>
 800fd34:	eeb1 7b4d 	vneg.f64	d7, d13
 800fd38:	ec53 2b17 	vmov	r2, r3, d7
 800fd3c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fd40:	1a43      	subs	r3, r0, r1
 800fd42:	eeb0 0b48 	vmov.f64	d0, d8
 800fd46:	ec43 2b1c 	vmov	d12, r2, r3
 800fd4a:	910a      	str	r1, [sp, #40]	; 0x28
 800fd4c:	f000 ff32 	bl	8010bb4 <__ulp>
 800fd50:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fd52:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fd56:	ec59 8b18 	vmov	r8, r9, d8
 800fd5a:	e7ab      	b.n	800fcb4 <_strtod_l+0xa6c>
 800fd5c:	eeb0 7b4d 	vmov.f64	d7, d13
 800fd60:	e7ea      	b.n	800fd38 <_strtod_l+0xaf0>
 800fd62:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6a:	f57f af61 	bpl.w	800fc30 <_strtod_l+0x9e8>
 800fd6e:	e4b1      	b.n	800f6d4 <_strtod_l+0x48c>
 800fd70:	2300      	movs	r3, #0
 800fd72:	9308      	str	r3, [sp, #32]
 800fd74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd78:	6013      	str	r3, [r2, #0]
 800fd7a:	f7ff baad 	b.w	800f2d8 <_strtod_l+0x90>
 800fd7e:	2a65      	cmp	r2, #101	; 0x65
 800fd80:	f43f ab9f 	beq.w	800f4c2 <_strtod_l+0x27a>
 800fd84:	2a45      	cmp	r2, #69	; 0x45
 800fd86:	f43f ab9c 	beq.w	800f4c2 <_strtod_l+0x27a>
 800fd8a:	2101      	movs	r1, #1
 800fd8c:	f7ff bbd4 	b.w	800f538 <_strtod_l+0x2f0>
 800fd90:	ffc00000 	.word	0xffc00000
 800fd94:	41dfffff 	.word	0x41dfffff
 800fd98:	000fffff 	.word	0x000fffff
 800fd9c:	7ff00000 	.word	0x7ff00000
 800fda0:	7fefffff 	.word	0x7fefffff
 800fda4:	3ff00000 	.word	0x3ff00000
 800fda8:	7c9fffff 	.word	0x7c9fffff
 800fdac:	bff00000 	.word	0xbff00000
 800fdb0:	7fe00000 	.word	0x7fe00000

0800fdb4 <strtod>:
 800fdb4:	460a      	mov	r2, r1
 800fdb6:	4601      	mov	r1, r0
 800fdb8:	4802      	ldr	r0, [pc, #8]	; (800fdc4 <strtod+0x10>)
 800fdba:	4b03      	ldr	r3, [pc, #12]	; (800fdc8 <strtod+0x14>)
 800fdbc:	6800      	ldr	r0, [r0, #0]
 800fdbe:	f7ff ba43 	b.w	800f248 <_strtod_l>
 800fdc2:	bf00      	nop
 800fdc4:	24000100 	.word	0x24000100
 800fdc8:	24000168 	.word	0x24000168

0800fdcc <rshift>:
 800fdcc:	6903      	ldr	r3, [r0, #16]
 800fdce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fdd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fdda:	f100 0414 	add.w	r4, r0, #20
 800fdde:	dd45      	ble.n	800fe6c <rshift+0xa0>
 800fde0:	f011 011f 	ands.w	r1, r1, #31
 800fde4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fde8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fdec:	d10c      	bne.n	800fe08 <rshift+0x3c>
 800fdee:	f100 0710 	add.w	r7, r0, #16
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	42b1      	cmp	r1, r6
 800fdf6:	d334      	bcc.n	800fe62 <rshift+0x96>
 800fdf8:	1a9b      	subs	r3, r3, r2
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	1eea      	subs	r2, r5, #3
 800fdfe:	4296      	cmp	r6, r2
 800fe00:	bf38      	it	cc
 800fe02:	2300      	movcc	r3, #0
 800fe04:	4423      	add	r3, r4
 800fe06:	e015      	b.n	800fe34 <rshift+0x68>
 800fe08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fe0c:	f1c1 0820 	rsb	r8, r1, #32
 800fe10:	40cf      	lsrs	r7, r1
 800fe12:	f105 0e04 	add.w	lr, r5, #4
 800fe16:	46a1      	mov	r9, r4
 800fe18:	4576      	cmp	r6, lr
 800fe1a:	46f4      	mov	ip, lr
 800fe1c:	d815      	bhi.n	800fe4a <rshift+0x7e>
 800fe1e:	1a9a      	subs	r2, r3, r2
 800fe20:	0092      	lsls	r2, r2, #2
 800fe22:	3a04      	subs	r2, #4
 800fe24:	3501      	adds	r5, #1
 800fe26:	42ae      	cmp	r6, r5
 800fe28:	bf38      	it	cc
 800fe2a:	2200      	movcc	r2, #0
 800fe2c:	18a3      	adds	r3, r4, r2
 800fe2e:	50a7      	str	r7, [r4, r2]
 800fe30:	b107      	cbz	r7, 800fe34 <rshift+0x68>
 800fe32:	3304      	adds	r3, #4
 800fe34:	1b1a      	subs	r2, r3, r4
 800fe36:	42a3      	cmp	r3, r4
 800fe38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fe3c:	bf08      	it	eq
 800fe3e:	2300      	moveq	r3, #0
 800fe40:	6102      	str	r2, [r0, #16]
 800fe42:	bf08      	it	eq
 800fe44:	6143      	streq	r3, [r0, #20]
 800fe46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe4a:	f8dc c000 	ldr.w	ip, [ip]
 800fe4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fe52:	ea4c 0707 	orr.w	r7, ip, r7
 800fe56:	f849 7b04 	str.w	r7, [r9], #4
 800fe5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe5e:	40cf      	lsrs	r7, r1
 800fe60:	e7da      	b.n	800fe18 <rshift+0x4c>
 800fe62:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe66:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe6a:	e7c3      	b.n	800fdf4 <rshift+0x28>
 800fe6c:	4623      	mov	r3, r4
 800fe6e:	e7e1      	b.n	800fe34 <rshift+0x68>

0800fe70 <__hexdig_fun>:
 800fe70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe74:	2b09      	cmp	r3, #9
 800fe76:	d802      	bhi.n	800fe7e <__hexdig_fun+0xe>
 800fe78:	3820      	subs	r0, #32
 800fe7a:	b2c0      	uxtb	r0, r0
 800fe7c:	4770      	bx	lr
 800fe7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe82:	2b05      	cmp	r3, #5
 800fe84:	d801      	bhi.n	800fe8a <__hexdig_fun+0x1a>
 800fe86:	3847      	subs	r0, #71	; 0x47
 800fe88:	e7f7      	b.n	800fe7a <__hexdig_fun+0xa>
 800fe8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe8e:	2b05      	cmp	r3, #5
 800fe90:	d801      	bhi.n	800fe96 <__hexdig_fun+0x26>
 800fe92:	3827      	subs	r0, #39	; 0x27
 800fe94:	e7f1      	b.n	800fe7a <__hexdig_fun+0xa>
 800fe96:	2000      	movs	r0, #0
 800fe98:	4770      	bx	lr
	...

0800fe9c <__gethex>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	ed2d 8b02 	vpush	{d8}
 800fea4:	b089      	sub	sp, #36	; 0x24
 800fea6:	ee08 0a10 	vmov	s16, r0
 800feaa:	9304      	str	r3, [sp, #16]
 800feac:	4bb4      	ldr	r3, [pc, #720]	; (8010180 <__gethex+0x2e4>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	9301      	str	r3, [sp, #4]
 800feb2:	4618      	mov	r0, r3
 800feb4:	468b      	mov	fp, r1
 800feb6:	4690      	mov	r8, r2
 800feb8:	f7f0 fa12 	bl	80002e0 <strlen>
 800febc:	9b01      	ldr	r3, [sp, #4]
 800febe:	f8db 2000 	ldr.w	r2, [fp]
 800fec2:	4403      	add	r3, r0
 800fec4:	4682      	mov	sl, r0
 800fec6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800feca:	9305      	str	r3, [sp, #20]
 800fecc:	1c93      	adds	r3, r2, #2
 800fece:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fed2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fed6:	32fe      	adds	r2, #254	; 0xfe
 800fed8:	18d1      	adds	r1, r2, r3
 800feda:	461f      	mov	r7, r3
 800fedc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fee0:	9100      	str	r1, [sp, #0]
 800fee2:	2830      	cmp	r0, #48	; 0x30
 800fee4:	d0f8      	beq.n	800fed8 <__gethex+0x3c>
 800fee6:	f7ff ffc3 	bl	800fe70 <__hexdig_fun>
 800feea:	4604      	mov	r4, r0
 800feec:	2800      	cmp	r0, #0
 800feee:	d13a      	bne.n	800ff66 <__gethex+0xca>
 800fef0:	9901      	ldr	r1, [sp, #4]
 800fef2:	4652      	mov	r2, sl
 800fef4:	4638      	mov	r0, r7
 800fef6:	f001 f86b 	bl	8010fd0 <strncmp>
 800fefa:	4605      	mov	r5, r0
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d168      	bne.n	800ffd2 <__gethex+0x136>
 800ff00:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ff04:	eb07 060a 	add.w	r6, r7, sl
 800ff08:	f7ff ffb2 	bl	800fe70 <__hexdig_fun>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d062      	beq.n	800ffd6 <__gethex+0x13a>
 800ff10:	4633      	mov	r3, r6
 800ff12:	7818      	ldrb	r0, [r3, #0]
 800ff14:	2830      	cmp	r0, #48	; 0x30
 800ff16:	461f      	mov	r7, r3
 800ff18:	f103 0301 	add.w	r3, r3, #1
 800ff1c:	d0f9      	beq.n	800ff12 <__gethex+0x76>
 800ff1e:	f7ff ffa7 	bl	800fe70 <__hexdig_fun>
 800ff22:	2301      	movs	r3, #1
 800ff24:	fab0 f480 	clz	r4, r0
 800ff28:	0964      	lsrs	r4, r4, #5
 800ff2a:	4635      	mov	r5, r6
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	463a      	mov	r2, r7
 800ff30:	4616      	mov	r6, r2
 800ff32:	3201      	adds	r2, #1
 800ff34:	7830      	ldrb	r0, [r6, #0]
 800ff36:	f7ff ff9b 	bl	800fe70 <__hexdig_fun>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d1f8      	bne.n	800ff30 <__gethex+0x94>
 800ff3e:	9901      	ldr	r1, [sp, #4]
 800ff40:	4652      	mov	r2, sl
 800ff42:	4630      	mov	r0, r6
 800ff44:	f001 f844 	bl	8010fd0 <strncmp>
 800ff48:	b980      	cbnz	r0, 800ff6c <__gethex+0xd0>
 800ff4a:	b94d      	cbnz	r5, 800ff60 <__gethex+0xc4>
 800ff4c:	eb06 050a 	add.w	r5, r6, sl
 800ff50:	462a      	mov	r2, r5
 800ff52:	4616      	mov	r6, r2
 800ff54:	3201      	adds	r2, #1
 800ff56:	7830      	ldrb	r0, [r6, #0]
 800ff58:	f7ff ff8a 	bl	800fe70 <__hexdig_fun>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d1f8      	bne.n	800ff52 <__gethex+0xb6>
 800ff60:	1bad      	subs	r5, r5, r6
 800ff62:	00ad      	lsls	r5, r5, #2
 800ff64:	e004      	b.n	800ff70 <__gethex+0xd4>
 800ff66:	2400      	movs	r4, #0
 800ff68:	4625      	mov	r5, r4
 800ff6a:	e7e0      	b.n	800ff2e <__gethex+0x92>
 800ff6c:	2d00      	cmp	r5, #0
 800ff6e:	d1f7      	bne.n	800ff60 <__gethex+0xc4>
 800ff70:	7833      	ldrb	r3, [r6, #0]
 800ff72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ff76:	2b50      	cmp	r3, #80	; 0x50
 800ff78:	d13b      	bne.n	800fff2 <__gethex+0x156>
 800ff7a:	7873      	ldrb	r3, [r6, #1]
 800ff7c:	2b2b      	cmp	r3, #43	; 0x2b
 800ff7e:	d02c      	beq.n	800ffda <__gethex+0x13e>
 800ff80:	2b2d      	cmp	r3, #45	; 0x2d
 800ff82:	d02e      	beq.n	800ffe2 <__gethex+0x146>
 800ff84:	1c71      	adds	r1, r6, #1
 800ff86:	f04f 0900 	mov.w	r9, #0
 800ff8a:	7808      	ldrb	r0, [r1, #0]
 800ff8c:	f7ff ff70 	bl	800fe70 <__hexdig_fun>
 800ff90:	1e43      	subs	r3, r0, #1
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	2b18      	cmp	r3, #24
 800ff96:	d82c      	bhi.n	800fff2 <__gethex+0x156>
 800ff98:	f1a0 0210 	sub.w	r2, r0, #16
 800ff9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ffa0:	f7ff ff66 	bl	800fe70 <__hexdig_fun>
 800ffa4:	1e43      	subs	r3, r0, #1
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	2b18      	cmp	r3, #24
 800ffaa:	d91d      	bls.n	800ffe8 <__gethex+0x14c>
 800ffac:	f1b9 0f00 	cmp.w	r9, #0
 800ffb0:	d000      	beq.n	800ffb4 <__gethex+0x118>
 800ffb2:	4252      	negs	r2, r2
 800ffb4:	4415      	add	r5, r2
 800ffb6:	f8cb 1000 	str.w	r1, [fp]
 800ffba:	b1e4      	cbz	r4, 800fff6 <__gethex+0x15a>
 800ffbc:	9b00      	ldr	r3, [sp, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	bf14      	ite	ne
 800ffc2:	2700      	movne	r7, #0
 800ffc4:	2706      	moveq	r7, #6
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	b009      	add	sp, #36	; 0x24
 800ffca:	ecbd 8b02 	vpop	{d8}
 800ffce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd2:	463e      	mov	r6, r7
 800ffd4:	4625      	mov	r5, r4
 800ffd6:	2401      	movs	r4, #1
 800ffd8:	e7ca      	b.n	800ff70 <__gethex+0xd4>
 800ffda:	f04f 0900 	mov.w	r9, #0
 800ffde:	1cb1      	adds	r1, r6, #2
 800ffe0:	e7d3      	b.n	800ff8a <__gethex+0xee>
 800ffe2:	f04f 0901 	mov.w	r9, #1
 800ffe6:	e7fa      	b.n	800ffde <__gethex+0x142>
 800ffe8:	230a      	movs	r3, #10
 800ffea:	fb03 0202 	mla	r2, r3, r2, r0
 800ffee:	3a10      	subs	r2, #16
 800fff0:	e7d4      	b.n	800ff9c <__gethex+0x100>
 800fff2:	4631      	mov	r1, r6
 800fff4:	e7df      	b.n	800ffb6 <__gethex+0x11a>
 800fff6:	1bf3      	subs	r3, r6, r7
 800fff8:	3b01      	subs	r3, #1
 800fffa:	4621      	mov	r1, r4
 800fffc:	2b07      	cmp	r3, #7
 800fffe:	dc0b      	bgt.n	8010018 <__gethex+0x17c>
 8010000:	ee18 0a10 	vmov	r0, s16
 8010004:	f000 fa64 	bl	80104d0 <_Balloc>
 8010008:	4604      	mov	r4, r0
 801000a:	b940      	cbnz	r0, 801001e <__gethex+0x182>
 801000c:	4b5d      	ldr	r3, [pc, #372]	; (8010184 <__gethex+0x2e8>)
 801000e:	4602      	mov	r2, r0
 8010010:	21de      	movs	r1, #222	; 0xde
 8010012:	485d      	ldr	r0, [pc, #372]	; (8010188 <__gethex+0x2ec>)
 8010014:	f000 fffe 	bl	8011014 <__assert_func>
 8010018:	3101      	adds	r1, #1
 801001a:	105b      	asrs	r3, r3, #1
 801001c:	e7ee      	b.n	800fffc <__gethex+0x160>
 801001e:	f100 0914 	add.w	r9, r0, #20
 8010022:	f04f 0b00 	mov.w	fp, #0
 8010026:	f1ca 0301 	rsb	r3, sl, #1
 801002a:	f8cd 9008 	str.w	r9, [sp, #8]
 801002e:	f8cd b000 	str.w	fp, [sp]
 8010032:	9306      	str	r3, [sp, #24]
 8010034:	42b7      	cmp	r7, r6
 8010036:	d340      	bcc.n	80100ba <__gethex+0x21e>
 8010038:	9802      	ldr	r0, [sp, #8]
 801003a:	9b00      	ldr	r3, [sp, #0]
 801003c:	f840 3b04 	str.w	r3, [r0], #4
 8010040:	eba0 0009 	sub.w	r0, r0, r9
 8010044:	1080      	asrs	r0, r0, #2
 8010046:	0146      	lsls	r6, r0, #5
 8010048:	6120      	str	r0, [r4, #16]
 801004a:	4618      	mov	r0, r3
 801004c:	f000 fb32 	bl	80106b4 <__hi0bits>
 8010050:	1a30      	subs	r0, r6, r0
 8010052:	f8d8 6000 	ldr.w	r6, [r8]
 8010056:	42b0      	cmp	r0, r6
 8010058:	dd63      	ble.n	8010122 <__gethex+0x286>
 801005a:	1b87      	subs	r7, r0, r6
 801005c:	4639      	mov	r1, r7
 801005e:	4620      	mov	r0, r4
 8010060:	f000 fed3 	bl	8010e0a <__any_on>
 8010064:	4682      	mov	sl, r0
 8010066:	b1a8      	cbz	r0, 8010094 <__gethex+0x1f8>
 8010068:	1e7b      	subs	r3, r7, #1
 801006a:	1159      	asrs	r1, r3, #5
 801006c:	f003 021f 	and.w	r2, r3, #31
 8010070:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010074:	f04f 0a01 	mov.w	sl, #1
 8010078:	fa0a f202 	lsl.w	r2, sl, r2
 801007c:	420a      	tst	r2, r1
 801007e:	d009      	beq.n	8010094 <__gethex+0x1f8>
 8010080:	4553      	cmp	r3, sl
 8010082:	dd05      	ble.n	8010090 <__gethex+0x1f4>
 8010084:	1eb9      	subs	r1, r7, #2
 8010086:	4620      	mov	r0, r4
 8010088:	f000 febf 	bl	8010e0a <__any_on>
 801008c:	2800      	cmp	r0, #0
 801008e:	d145      	bne.n	801011c <__gethex+0x280>
 8010090:	f04f 0a02 	mov.w	sl, #2
 8010094:	4639      	mov	r1, r7
 8010096:	4620      	mov	r0, r4
 8010098:	f7ff fe98 	bl	800fdcc <rshift>
 801009c:	443d      	add	r5, r7
 801009e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100a2:	42ab      	cmp	r3, r5
 80100a4:	da4c      	bge.n	8010140 <__gethex+0x2a4>
 80100a6:	ee18 0a10 	vmov	r0, s16
 80100aa:	4621      	mov	r1, r4
 80100ac:	f000 fa50 	bl	8010550 <_Bfree>
 80100b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100b2:	2300      	movs	r3, #0
 80100b4:	6013      	str	r3, [r2, #0]
 80100b6:	27a3      	movs	r7, #163	; 0xa3
 80100b8:	e785      	b.n	800ffc6 <__gethex+0x12a>
 80100ba:	1e73      	subs	r3, r6, #1
 80100bc:	9a05      	ldr	r2, [sp, #20]
 80100be:	9303      	str	r3, [sp, #12]
 80100c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d019      	beq.n	80100fc <__gethex+0x260>
 80100c8:	f1bb 0f20 	cmp.w	fp, #32
 80100cc:	d107      	bne.n	80100de <__gethex+0x242>
 80100ce:	9b02      	ldr	r3, [sp, #8]
 80100d0:	9a00      	ldr	r2, [sp, #0]
 80100d2:	f843 2b04 	str.w	r2, [r3], #4
 80100d6:	9302      	str	r3, [sp, #8]
 80100d8:	2300      	movs	r3, #0
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	469b      	mov	fp, r3
 80100de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80100e2:	f7ff fec5 	bl	800fe70 <__hexdig_fun>
 80100e6:	9b00      	ldr	r3, [sp, #0]
 80100e8:	f000 000f 	and.w	r0, r0, #15
 80100ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80100f0:	4303      	orrs	r3, r0
 80100f2:	9300      	str	r3, [sp, #0]
 80100f4:	f10b 0b04 	add.w	fp, fp, #4
 80100f8:	9b03      	ldr	r3, [sp, #12]
 80100fa:	e00d      	b.n	8010118 <__gethex+0x27c>
 80100fc:	9b03      	ldr	r3, [sp, #12]
 80100fe:	9a06      	ldr	r2, [sp, #24]
 8010100:	4413      	add	r3, r2
 8010102:	42bb      	cmp	r3, r7
 8010104:	d3e0      	bcc.n	80100c8 <__gethex+0x22c>
 8010106:	4618      	mov	r0, r3
 8010108:	9901      	ldr	r1, [sp, #4]
 801010a:	9307      	str	r3, [sp, #28]
 801010c:	4652      	mov	r2, sl
 801010e:	f000 ff5f 	bl	8010fd0 <strncmp>
 8010112:	9b07      	ldr	r3, [sp, #28]
 8010114:	2800      	cmp	r0, #0
 8010116:	d1d7      	bne.n	80100c8 <__gethex+0x22c>
 8010118:	461e      	mov	r6, r3
 801011a:	e78b      	b.n	8010034 <__gethex+0x198>
 801011c:	f04f 0a03 	mov.w	sl, #3
 8010120:	e7b8      	b.n	8010094 <__gethex+0x1f8>
 8010122:	da0a      	bge.n	801013a <__gethex+0x29e>
 8010124:	1a37      	subs	r7, r6, r0
 8010126:	4621      	mov	r1, r4
 8010128:	ee18 0a10 	vmov	r0, s16
 801012c:	463a      	mov	r2, r7
 801012e:	f000 fc2b 	bl	8010988 <__lshift>
 8010132:	1bed      	subs	r5, r5, r7
 8010134:	4604      	mov	r4, r0
 8010136:	f100 0914 	add.w	r9, r0, #20
 801013a:	f04f 0a00 	mov.w	sl, #0
 801013e:	e7ae      	b.n	801009e <__gethex+0x202>
 8010140:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010144:	42a8      	cmp	r0, r5
 8010146:	dd72      	ble.n	801022e <__gethex+0x392>
 8010148:	1b45      	subs	r5, r0, r5
 801014a:	42ae      	cmp	r6, r5
 801014c:	dc36      	bgt.n	80101bc <__gethex+0x320>
 801014e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010152:	2b02      	cmp	r3, #2
 8010154:	d02a      	beq.n	80101ac <__gethex+0x310>
 8010156:	2b03      	cmp	r3, #3
 8010158:	d02c      	beq.n	80101b4 <__gethex+0x318>
 801015a:	2b01      	cmp	r3, #1
 801015c:	d11c      	bne.n	8010198 <__gethex+0x2fc>
 801015e:	42ae      	cmp	r6, r5
 8010160:	d11a      	bne.n	8010198 <__gethex+0x2fc>
 8010162:	2e01      	cmp	r6, #1
 8010164:	d112      	bne.n	801018c <__gethex+0x2f0>
 8010166:	9a04      	ldr	r2, [sp, #16]
 8010168:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801016c:	6013      	str	r3, [r2, #0]
 801016e:	2301      	movs	r3, #1
 8010170:	6123      	str	r3, [r4, #16]
 8010172:	f8c9 3000 	str.w	r3, [r9]
 8010176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010178:	2762      	movs	r7, #98	; 0x62
 801017a:	601c      	str	r4, [r3, #0]
 801017c:	e723      	b.n	800ffc6 <__gethex+0x12a>
 801017e:	bf00      	nop
 8010180:	080128d8 	.word	0x080128d8
 8010184:	08012860 	.word	0x08012860
 8010188:	08012871 	.word	0x08012871
 801018c:	1e71      	subs	r1, r6, #1
 801018e:	4620      	mov	r0, r4
 8010190:	f000 fe3b 	bl	8010e0a <__any_on>
 8010194:	2800      	cmp	r0, #0
 8010196:	d1e6      	bne.n	8010166 <__gethex+0x2ca>
 8010198:	ee18 0a10 	vmov	r0, s16
 801019c:	4621      	mov	r1, r4
 801019e:	f000 f9d7 	bl	8010550 <_Bfree>
 80101a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101a4:	2300      	movs	r3, #0
 80101a6:	6013      	str	r3, [r2, #0]
 80101a8:	2750      	movs	r7, #80	; 0x50
 80101aa:	e70c      	b.n	800ffc6 <__gethex+0x12a>
 80101ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d1f2      	bne.n	8010198 <__gethex+0x2fc>
 80101b2:	e7d8      	b.n	8010166 <__gethex+0x2ca>
 80101b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1d5      	bne.n	8010166 <__gethex+0x2ca>
 80101ba:	e7ed      	b.n	8010198 <__gethex+0x2fc>
 80101bc:	1e6f      	subs	r7, r5, #1
 80101be:	f1ba 0f00 	cmp.w	sl, #0
 80101c2:	d131      	bne.n	8010228 <__gethex+0x38c>
 80101c4:	b127      	cbz	r7, 80101d0 <__gethex+0x334>
 80101c6:	4639      	mov	r1, r7
 80101c8:	4620      	mov	r0, r4
 80101ca:	f000 fe1e 	bl	8010e0a <__any_on>
 80101ce:	4682      	mov	sl, r0
 80101d0:	117b      	asrs	r3, r7, #5
 80101d2:	2101      	movs	r1, #1
 80101d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80101d8:	f007 071f 	and.w	r7, r7, #31
 80101dc:	fa01 f707 	lsl.w	r7, r1, r7
 80101e0:	421f      	tst	r7, r3
 80101e2:	4629      	mov	r1, r5
 80101e4:	4620      	mov	r0, r4
 80101e6:	bf18      	it	ne
 80101e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80101ec:	1b76      	subs	r6, r6, r5
 80101ee:	f7ff fded 	bl	800fdcc <rshift>
 80101f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80101f6:	2702      	movs	r7, #2
 80101f8:	f1ba 0f00 	cmp.w	sl, #0
 80101fc:	d048      	beq.n	8010290 <__gethex+0x3f4>
 80101fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010202:	2b02      	cmp	r3, #2
 8010204:	d015      	beq.n	8010232 <__gethex+0x396>
 8010206:	2b03      	cmp	r3, #3
 8010208:	d017      	beq.n	801023a <__gethex+0x39e>
 801020a:	2b01      	cmp	r3, #1
 801020c:	d109      	bne.n	8010222 <__gethex+0x386>
 801020e:	f01a 0f02 	tst.w	sl, #2
 8010212:	d006      	beq.n	8010222 <__gethex+0x386>
 8010214:	f8d9 0000 	ldr.w	r0, [r9]
 8010218:	ea4a 0a00 	orr.w	sl, sl, r0
 801021c:	f01a 0f01 	tst.w	sl, #1
 8010220:	d10e      	bne.n	8010240 <__gethex+0x3a4>
 8010222:	f047 0710 	orr.w	r7, r7, #16
 8010226:	e033      	b.n	8010290 <__gethex+0x3f4>
 8010228:	f04f 0a01 	mov.w	sl, #1
 801022c:	e7d0      	b.n	80101d0 <__gethex+0x334>
 801022e:	2701      	movs	r7, #1
 8010230:	e7e2      	b.n	80101f8 <__gethex+0x35c>
 8010232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010234:	f1c3 0301 	rsb	r3, r3, #1
 8010238:	9315      	str	r3, [sp, #84]	; 0x54
 801023a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801023c:	2b00      	cmp	r3, #0
 801023e:	d0f0      	beq.n	8010222 <__gethex+0x386>
 8010240:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010244:	f104 0314 	add.w	r3, r4, #20
 8010248:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801024c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010250:	f04f 0c00 	mov.w	ip, #0
 8010254:	4618      	mov	r0, r3
 8010256:	f853 2b04 	ldr.w	r2, [r3], #4
 801025a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801025e:	d01c      	beq.n	801029a <__gethex+0x3fe>
 8010260:	3201      	adds	r2, #1
 8010262:	6002      	str	r2, [r0, #0]
 8010264:	2f02      	cmp	r7, #2
 8010266:	f104 0314 	add.w	r3, r4, #20
 801026a:	d13f      	bne.n	80102ec <__gethex+0x450>
 801026c:	f8d8 2000 	ldr.w	r2, [r8]
 8010270:	3a01      	subs	r2, #1
 8010272:	42b2      	cmp	r2, r6
 8010274:	d10a      	bne.n	801028c <__gethex+0x3f0>
 8010276:	1171      	asrs	r1, r6, #5
 8010278:	2201      	movs	r2, #1
 801027a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801027e:	f006 061f 	and.w	r6, r6, #31
 8010282:	fa02 f606 	lsl.w	r6, r2, r6
 8010286:	421e      	tst	r6, r3
 8010288:	bf18      	it	ne
 801028a:	4617      	movne	r7, r2
 801028c:	f047 0720 	orr.w	r7, r7, #32
 8010290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010292:	601c      	str	r4, [r3, #0]
 8010294:	9b04      	ldr	r3, [sp, #16]
 8010296:	601d      	str	r5, [r3, #0]
 8010298:	e695      	b.n	800ffc6 <__gethex+0x12a>
 801029a:	4299      	cmp	r1, r3
 801029c:	f843 cc04 	str.w	ip, [r3, #-4]
 80102a0:	d8d8      	bhi.n	8010254 <__gethex+0x3b8>
 80102a2:	68a3      	ldr	r3, [r4, #8]
 80102a4:	459b      	cmp	fp, r3
 80102a6:	db19      	blt.n	80102dc <__gethex+0x440>
 80102a8:	6861      	ldr	r1, [r4, #4]
 80102aa:	ee18 0a10 	vmov	r0, s16
 80102ae:	3101      	adds	r1, #1
 80102b0:	f000 f90e 	bl	80104d0 <_Balloc>
 80102b4:	4681      	mov	r9, r0
 80102b6:	b918      	cbnz	r0, 80102c0 <__gethex+0x424>
 80102b8:	4b1a      	ldr	r3, [pc, #104]	; (8010324 <__gethex+0x488>)
 80102ba:	4602      	mov	r2, r0
 80102bc:	2184      	movs	r1, #132	; 0x84
 80102be:	e6a8      	b.n	8010012 <__gethex+0x176>
 80102c0:	6922      	ldr	r2, [r4, #16]
 80102c2:	3202      	adds	r2, #2
 80102c4:	f104 010c 	add.w	r1, r4, #12
 80102c8:	0092      	lsls	r2, r2, #2
 80102ca:	300c      	adds	r0, #12
 80102cc:	f7fe ff8a 	bl	800f1e4 <memcpy>
 80102d0:	4621      	mov	r1, r4
 80102d2:	ee18 0a10 	vmov	r0, s16
 80102d6:	f000 f93b 	bl	8010550 <_Bfree>
 80102da:	464c      	mov	r4, r9
 80102dc:	6923      	ldr	r3, [r4, #16]
 80102de:	1c5a      	adds	r2, r3, #1
 80102e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80102e4:	6122      	str	r2, [r4, #16]
 80102e6:	2201      	movs	r2, #1
 80102e8:	615a      	str	r2, [r3, #20]
 80102ea:	e7bb      	b.n	8010264 <__gethex+0x3c8>
 80102ec:	6922      	ldr	r2, [r4, #16]
 80102ee:	455a      	cmp	r2, fp
 80102f0:	dd0b      	ble.n	801030a <__gethex+0x46e>
 80102f2:	2101      	movs	r1, #1
 80102f4:	4620      	mov	r0, r4
 80102f6:	f7ff fd69 	bl	800fdcc <rshift>
 80102fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80102fe:	3501      	adds	r5, #1
 8010300:	42ab      	cmp	r3, r5
 8010302:	f6ff aed0 	blt.w	80100a6 <__gethex+0x20a>
 8010306:	2701      	movs	r7, #1
 8010308:	e7c0      	b.n	801028c <__gethex+0x3f0>
 801030a:	f016 061f 	ands.w	r6, r6, #31
 801030e:	d0fa      	beq.n	8010306 <__gethex+0x46a>
 8010310:	4453      	add	r3, sl
 8010312:	f1c6 0620 	rsb	r6, r6, #32
 8010316:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801031a:	f000 f9cb 	bl	80106b4 <__hi0bits>
 801031e:	42b0      	cmp	r0, r6
 8010320:	dbe7      	blt.n	80102f2 <__gethex+0x456>
 8010322:	e7f0      	b.n	8010306 <__gethex+0x46a>
 8010324:	08012860 	.word	0x08012860

08010328 <L_shift>:
 8010328:	f1c2 0208 	rsb	r2, r2, #8
 801032c:	0092      	lsls	r2, r2, #2
 801032e:	b570      	push	{r4, r5, r6, lr}
 8010330:	f1c2 0620 	rsb	r6, r2, #32
 8010334:	6843      	ldr	r3, [r0, #4]
 8010336:	6804      	ldr	r4, [r0, #0]
 8010338:	fa03 f506 	lsl.w	r5, r3, r6
 801033c:	432c      	orrs	r4, r5
 801033e:	40d3      	lsrs	r3, r2
 8010340:	6004      	str	r4, [r0, #0]
 8010342:	f840 3f04 	str.w	r3, [r0, #4]!
 8010346:	4288      	cmp	r0, r1
 8010348:	d3f4      	bcc.n	8010334 <L_shift+0xc>
 801034a:	bd70      	pop	{r4, r5, r6, pc}

0801034c <__match>:
 801034c:	b530      	push	{r4, r5, lr}
 801034e:	6803      	ldr	r3, [r0, #0]
 8010350:	3301      	adds	r3, #1
 8010352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010356:	b914      	cbnz	r4, 801035e <__match+0x12>
 8010358:	6003      	str	r3, [r0, #0]
 801035a:	2001      	movs	r0, #1
 801035c:	bd30      	pop	{r4, r5, pc}
 801035e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010362:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010366:	2d19      	cmp	r5, #25
 8010368:	bf98      	it	ls
 801036a:	3220      	addls	r2, #32
 801036c:	42a2      	cmp	r2, r4
 801036e:	d0f0      	beq.n	8010352 <__match+0x6>
 8010370:	2000      	movs	r0, #0
 8010372:	e7f3      	b.n	801035c <__match+0x10>

08010374 <__hexnan>:
 8010374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010378:	680b      	ldr	r3, [r1, #0]
 801037a:	115e      	asrs	r6, r3, #5
 801037c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010380:	f013 031f 	ands.w	r3, r3, #31
 8010384:	b087      	sub	sp, #28
 8010386:	bf18      	it	ne
 8010388:	3604      	addne	r6, #4
 801038a:	2500      	movs	r5, #0
 801038c:	1f37      	subs	r7, r6, #4
 801038e:	4690      	mov	r8, r2
 8010390:	6802      	ldr	r2, [r0, #0]
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	4682      	mov	sl, r0
 8010396:	f846 5c04 	str.w	r5, [r6, #-4]
 801039a:	46b9      	mov	r9, r7
 801039c:	463c      	mov	r4, r7
 801039e:	9502      	str	r5, [sp, #8]
 80103a0:	46ab      	mov	fp, r5
 80103a2:	7851      	ldrb	r1, [r2, #1]
 80103a4:	1c53      	adds	r3, r2, #1
 80103a6:	9303      	str	r3, [sp, #12]
 80103a8:	b341      	cbz	r1, 80103fc <__hexnan+0x88>
 80103aa:	4608      	mov	r0, r1
 80103ac:	9205      	str	r2, [sp, #20]
 80103ae:	9104      	str	r1, [sp, #16]
 80103b0:	f7ff fd5e 	bl	800fe70 <__hexdig_fun>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d14f      	bne.n	8010458 <__hexnan+0xe4>
 80103b8:	9904      	ldr	r1, [sp, #16]
 80103ba:	9a05      	ldr	r2, [sp, #20]
 80103bc:	2920      	cmp	r1, #32
 80103be:	d818      	bhi.n	80103f2 <__hexnan+0x7e>
 80103c0:	9b02      	ldr	r3, [sp, #8]
 80103c2:	459b      	cmp	fp, r3
 80103c4:	dd13      	ble.n	80103ee <__hexnan+0x7a>
 80103c6:	454c      	cmp	r4, r9
 80103c8:	d206      	bcs.n	80103d8 <__hexnan+0x64>
 80103ca:	2d07      	cmp	r5, #7
 80103cc:	dc04      	bgt.n	80103d8 <__hexnan+0x64>
 80103ce:	462a      	mov	r2, r5
 80103d0:	4649      	mov	r1, r9
 80103d2:	4620      	mov	r0, r4
 80103d4:	f7ff ffa8 	bl	8010328 <L_shift>
 80103d8:	4544      	cmp	r4, r8
 80103da:	d950      	bls.n	801047e <__hexnan+0x10a>
 80103dc:	2300      	movs	r3, #0
 80103de:	f1a4 0904 	sub.w	r9, r4, #4
 80103e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80103e6:	f8cd b008 	str.w	fp, [sp, #8]
 80103ea:	464c      	mov	r4, r9
 80103ec:	461d      	mov	r5, r3
 80103ee:	9a03      	ldr	r2, [sp, #12]
 80103f0:	e7d7      	b.n	80103a2 <__hexnan+0x2e>
 80103f2:	2929      	cmp	r1, #41	; 0x29
 80103f4:	d156      	bne.n	80104a4 <__hexnan+0x130>
 80103f6:	3202      	adds	r2, #2
 80103f8:	f8ca 2000 	str.w	r2, [sl]
 80103fc:	f1bb 0f00 	cmp.w	fp, #0
 8010400:	d050      	beq.n	80104a4 <__hexnan+0x130>
 8010402:	454c      	cmp	r4, r9
 8010404:	d206      	bcs.n	8010414 <__hexnan+0xa0>
 8010406:	2d07      	cmp	r5, #7
 8010408:	dc04      	bgt.n	8010414 <__hexnan+0xa0>
 801040a:	462a      	mov	r2, r5
 801040c:	4649      	mov	r1, r9
 801040e:	4620      	mov	r0, r4
 8010410:	f7ff ff8a 	bl	8010328 <L_shift>
 8010414:	4544      	cmp	r4, r8
 8010416:	d934      	bls.n	8010482 <__hexnan+0x10e>
 8010418:	f1a8 0204 	sub.w	r2, r8, #4
 801041c:	4623      	mov	r3, r4
 801041e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010422:	f842 1f04 	str.w	r1, [r2, #4]!
 8010426:	429f      	cmp	r7, r3
 8010428:	d2f9      	bcs.n	801041e <__hexnan+0xaa>
 801042a:	1b3b      	subs	r3, r7, r4
 801042c:	f023 0303 	bic.w	r3, r3, #3
 8010430:	3304      	adds	r3, #4
 8010432:	3401      	adds	r4, #1
 8010434:	3e03      	subs	r6, #3
 8010436:	42b4      	cmp	r4, r6
 8010438:	bf88      	it	hi
 801043a:	2304      	movhi	r3, #4
 801043c:	4443      	add	r3, r8
 801043e:	2200      	movs	r2, #0
 8010440:	f843 2b04 	str.w	r2, [r3], #4
 8010444:	429f      	cmp	r7, r3
 8010446:	d2fb      	bcs.n	8010440 <__hexnan+0xcc>
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	b91b      	cbnz	r3, 8010454 <__hexnan+0xe0>
 801044c:	4547      	cmp	r7, r8
 801044e:	d127      	bne.n	80104a0 <__hexnan+0x12c>
 8010450:	2301      	movs	r3, #1
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	2005      	movs	r0, #5
 8010456:	e026      	b.n	80104a6 <__hexnan+0x132>
 8010458:	3501      	adds	r5, #1
 801045a:	2d08      	cmp	r5, #8
 801045c:	f10b 0b01 	add.w	fp, fp, #1
 8010460:	dd06      	ble.n	8010470 <__hexnan+0xfc>
 8010462:	4544      	cmp	r4, r8
 8010464:	d9c3      	bls.n	80103ee <__hexnan+0x7a>
 8010466:	2300      	movs	r3, #0
 8010468:	f844 3c04 	str.w	r3, [r4, #-4]
 801046c:	2501      	movs	r5, #1
 801046e:	3c04      	subs	r4, #4
 8010470:	6822      	ldr	r2, [r4, #0]
 8010472:	f000 000f 	and.w	r0, r0, #15
 8010476:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801047a:	6022      	str	r2, [r4, #0]
 801047c:	e7b7      	b.n	80103ee <__hexnan+0x7a>
 801047e:	2508      	movs	r5, #8
 8010480:	e7b5      	b.n	80103ee <__hexnan+0x7a>
 8010482:	9b01      	ldr	r3, [sp, #4]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d0df      	beq.n	8010448 <__hexnan+0xd4>
 8010488:	f04f 32ff 	mov.w	r2, #4294967295
 801048c:	f1c3 0320 	rsb	r3, r3, #32
 8010490:	fa22 f303 	lsr.w	r3, r2, r3
 8010494:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010498:	401a      	ands	r2, r3
 801049a:	f846 2c04 	str.w	r2, [r6, #-4]
 801049e:	e7d3      	b.n	8010448 <__hexnan+0xd4>
 80104a0:	3f04      	subs	r7, #4
 80104a2:	e7d1      	b.n	8010448 <__hexnan+0xd4>
 80104a4:	2004      	movs	r0, #4
 80104a6:	b007      	add	sp, #28
 80104a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104ac <__ascii_mbtowc>:
 80104ac:	b082      	sub	sp, #8
 80104ae:	b901      	cbnz	r1, 80104b2 <__ascii_mbtowc+0x6>
 80104b0:	a901      	add	r1, sp, #4
 80104b2:	b142      	cbz	r2, 80104c6 <__ascii_mbtowc+0x1a>
 80104b4:	b14b      	cbz	r3, 80104ca <__ascii_mbtowc+0x1e>
 80104b6:	7813      	ldrb	r3, [r2, #0]
 80104b8:	600b      	str	r3, [r1, #0]
 80104ba:	7812      	ldrb	r2, [r2, #0]
 80104bc:	1e10      	subs	r0, r2, #0
 80104be:	bf18      	it	ne
 80104c0:	2001      	movne	r0, #1
 80104c2:	b002      	add	sp, #8
 80104c4:	4770      	bx	lr
 80104c6:	4610      	mov	r0, r2
 80104c8:	e7fb      	b.n	80104c2 <__ascii_mbtowc+0x16>
 80104ca:	f06f 0001 	mvn.w	r0, #1
 80104ce:	e7f8      	b.n	80104c2 <__ascii_mbtowc+0x16>

080104d0 <_Balloc>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104d4:	4604      	mov	r4, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	b976      	cbnz	r6, 80104f8 <_Balloc+0x28>
 80104da:	2010      	movs	r0, #16
 80104dc:	f000 fdca 	bl	8011074 <malloc>
 80104e0:	4602      	mov	r2, r0
 80104e2:	6260      	str	r0, [r4, #36]	; 0x24
 80104e4:	b920      	cbnz	r0, 80104f0 <_Balloc+0x20>
 80104e6:	4b18      	ldr	r3, [pc, #96]	; (8010548 <_Balloc+0x78>)
 80104e8:	4818      	ldr	r0, [pc, #96]	; (801054c <_Balloc+0x7c>)
 80104ea:	2166      	movs	r1, #102	; 0x66
 80104ec:	f000 fd92 	bl	8011014 <__assert_func>
 80104f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104f4:	6006      	str	r6, [r0, #0]
 80104f6:	60c6      	str	r6, [r0, #12]
 80104f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104fa:	68f3      	ldr	r3, [r6, #12]
 80104fc:	b183      	cbz	r3, 8010520 <_Balloc+0x50>
 80104fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010506:	b9b8      	cbnz	r0, 8010538 <_Balloc+0x68>
 8010508:	2101      	movs	r1, #1
 801050a:	fa01 f605 	lsl.w	r6, r1, r5
 801050e:	1d72      	adds	r2, r6, #5
 8010510:	0092      	lsls	r2, r2, #2
 8010512:	4620      	mov	r0, r4
 8010514:	f000 fc9a 	bl	8010e4c <_calloc_r>
 8010518:	b160      	cbz	r0, 8010534 <_Balloc+0x64>
 801051a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801051e:	e00e      	b.n	801053e <_Balloc+0x6e>
 8010520:	2221      	movs	r2, #33	; 0x21
 8010522:	2104      	movs	r1, #4
 8010524:	4620      	mov	r0, r4
 8010526:	f000 fc91 	bl	8010e4c <_calloc_r>
 801052a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801052c:	60f0      	str	r0, [r6, #12]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1e4      	bne.n	80104fe <_Balloc+0x2e>
 8010534:	2000      	movs	r0, #0
 8010536:	bd70      	pop	{r4, r5, r6, pc}
 8010538:	6802      	ldr	r2, [r0, #0]
 801053a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801053e:	2300      	movs	r3, #0
 8010540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010544:	e7f7      	b.n	8010536 <_Balloc+0x66>
 8010546:	bf00      	nop
 8010548:	080128ec 	.word	0x080128ec
 801054c:	08012903 	.word	0x08012903

08010550 <_Bfree>:
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010554:	4605      	mov	r5, r0
 8010556:	460c      	mov	r4, r1
 8010558:	b976      	cbnz	r6, 8010578 <_Bfree+0x28>
 801055a:	2010      	movs	r0, #16
 801055c:	f000 fd8a 	bl	8011074 <malloc>
 8010560:	4602      	mov	r2, r0
 8010562:	6268      	str	r0, [r5, #36]	; 0x24
 8010564:	b920      	cbnz	r0, 8010570 <_Bfree+0x20>
 8010566:	4b09      	ldr	r3, [pc, #36]	; (801058c <_Bfree+0x3c>)
 8010568:	4809      	ldr	r0, [pc, #36]	; (8010590 <_Bfree+0x40>)
 801056a:	218a      	movs	r1, #138	; 0x8a
 801056c:	f000 fd52 	bl	8011014 <__assert_func>
 8010570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010574:	6006      	str	r6, [r0, #0]
 8010576:	60c6      	str	r6, [r0, #12]
 8010578:	b13c      	cbz	r4, 801058a <_Bfree+0x3a>
 801057a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801057c:	6862      	ldr	r2, [r4, #4]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010584:	6021      	str	r1, [r4, #0]
 8010586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801058a:	bd70      	pop	{r4, r5, r6, pc}
 801058c:	080128ec 	.word	0x080128ec
 8010590:	08012903 	.word	0x08012903

08010594 <__multadd>:
 8010594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010598:	690d      	ldr	r5, [r1, #16]
 801059a:	4607      	mov	r7, r0
 801059c:	460c      	mov	r4, r1
 801059e:	461e      	mov	r6, r3
 80105a0:	f101 0c14 	add.w	ip, r1, #20
 80105a4:	2000      	movs	r0, #0
 80105a6:	f8dc 3000 	ldr.w	r3, [ip]
 80105aa:	b299      	uxth	r1, r3
 80105ac:	fb02 6101 	mla	r1, r2, r1, r6
 80105b0:	0c1e      	lsrs	r6, r3, #16
 80105b2:	0c0b      	lsrs	r3, r1, #16
 80105b4:	fb02 3306 	mla	r3, r2, r6, r3
 80105b8:	b289      	uxth	r1, r1
 80105ba:	3001      	adds	r0, #1
 80105bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80105c0:	4285      	cmp	r5, r0
 80105c2:	f84c 1b04 	str.w	r1, [ip], #4
 80105c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80105ca:	dcec      	bgt.n	80105a6 <__multadd+0x12>
 80105cc:	b30e      	cbz	r6, 8010612 <__multadd+0x7e>
 80105ce:	68a3      	ldr	r3, [r4, #8]
 80105d0:	42ab      	cmp	r3, r5
 80105d2:	dc19      	bgt.n	8010608 <__multadd+0x74>
 80105d4:	6861      	ldr	r1, [r4, #4]
 80105d6:	4638      	mov	r0, r7
 80105d8:	3101      	adds	r1, #1
 80105da:	f7ff ff79 	bl	80104d0 <_Balloc>
 80105de:	4680      	mov	r8, r0
 80105e0:	b928      	cbnz	r0, 80105ee <__multadd+0x5a>
 80105e2:	4602      	mov	r2, r0
 80105e4:	4b0c      	ldr	r3, [pc, #48]	; (8010618 <__multadd+0x84>)
 80105e6:	480d      	ldr	r0, [pc, #52]	; (801061c <__multadd+0x88>)
 80105e8:	21b5      	movs	r1, #181	; 0xb5
 80105ea:	f000 fd13 	bl	8011014 <__assert_func>
 80105ee:	6922      	ldr	r2, [r4, #16]
 80105f0:	3202      	adds	r2, #2
 80105f2:	f104 010c 	add.w	r1, r4, #12
 80105f6:	0092      	lsls	r2, r2, #2
 80105f8:	300c      	adds	r0, #12
 80105fa:	f7fe fdf3 	bl	800f1e4 <memcpy>
 80105fe:	4621      	mov	r1, r4
 8010600:	4638      	mov	r0, r7
 8010602:	f7ff ffa5 	bl	8010550 <_Bfree>
 8010606:	4644      	mov	r4, r8
 8010608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801060c:	3501      	adds	r5, #1
 801060e:	615e      	str	r6, [r3, #20]
 8010610:	6125      	str	r5, [r4, #16]
 8010612:	4620      	mov	r0, r4
 8010614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010618:	08012860 	.word	0x08012860
 801061c:	08012903 	.word	0x08012903

08010620 <__s2b>:
 8010620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010624:	460c      	mov	r4, r1
 8010626:	4615      	mov	r5, r2
 8010628:	461f      	mov	r7, r3
 801062a:	2209      	movs	r2, #9
 801062c:	3308      	adds	r3, #8
 801062e:	4606      	mov	r6, r0
 8010630:	fb93 f3f2 	sdiv	r3, r3, r2
 8010634:	2100      	movs	r1, #0
 8010636:	2201      	movs	r2, #1
 8010638:	429a      	cmp	r2, r3
 801063a:	db09      	blt.n	8010650 <__s2b+0x30>
 801063c:	4630      	mov	r0, r6
 801063e:	f7ff ff47 	bl	80104d0 <_Balloc>
 8010642:	b940      	cbnz	r0, 8010656 <__s2b+0x36>
 8010644:	4602      	mov	r2, r0
 8010646:	4b19      	ldr	r3, [pc, #100]	; (80106ac <__s2b+0x8c>)
 8010648:	4819      	ldr	r0, [pc, #100]	; (80106b0 <__s2b+0x90>)
 801064a:	21ce      	movs	r1, #206	; 0xce
 801064c:	f000 fce2 	bl	8011014 <__assert_func>
 8010650:	0052      	lsls	r2, r2, #1
 8010652:	3101      	adds	r1, #1
 8010654:	e7f0      	b.n	8010638 <__s2b+0x18>
 8010656:	9b08      	ldr	r3, [sp, #32]
 8010658:	6143      	str	r3, [r0, #20]
 801065a:	2d09      	cmp	r5, #9
 801065c:	f04f 0301 	mov.w	r3, #1
 8010660:	6103      	str	r3, [r0, #16]
 8010662:	dd16      	ble.n	8010692 <__s2b+0x72>
 8010664:	f104 0909 	add.w	r9, r4, #9
 8010668:	46c8      	mov	r8, r9
 801066a:	442c      	add	r4, r5
 801066c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010670:	4601      	mov	r1, r0
 8010672:	3b30      	subs	r3, #48	; 0x30
 8010674:	220a      	movs	r2, #10
 8010676:	4630      	mov	r0, r6
 8010678:	f7ff ff8c 	bl	8010594 <__multadd>
 801067c:	45a0      	cmp	r8, r4
 801067e:	d1f5      	bne.n	801066c <__s2b+0x4c>
 8010680:	f1a5 0408 	sub.w	r4, r5, #8
 8010684:	444c      	add	r4, r9
 8010686:	1b2d      	subs	r5, r5, r4
 8010688:	1963      	adds	r3, r4, r5
 801068a:	42bb      	cmp	r3, r7
 801068c:	db04      	blt.n	8010698 <__s2b+0x78>
 801068e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010692:	340a      	adds	r4, #10
 8010694:	2509      	movs	r5, #9
 8010696:	e7f6      	b.n	8010686 <__s2b+0x66>
 8010698:	f814 3b01 	ldrb.w	r3, [r4], #1
 801069c:	4601      	mov	r1, r0
 801069e:	3b30      	subs	r3, #48	; 0x30
 80106a0:	220a      	movs	r2, #10
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7ff ff76 	bl	8010594 <__multadd>
 80106a8:	e7ee      	b.n	8010688 <__s2b+0x68>
 80106aa:	bf00      	nop
 80106ac:	08012860 	.word	0x08012860
 80106b0:	08012903 	.word	0x08012903

080106b4 <__hi0bits>:
 80106b4:	0c03      	lsrs	r3, r0, #16
 80106b6:	041b      	lsls	r3, r3, #16
 80106b8:	b9d3      	cbnz	r3, 80106f0 <__hi0bits+0x3c>
 80106ba:	0400      	lsls	r0, r0, #16
 80106bc:	2310      	movs	r3, #16
 80106be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80106c2:	bf04      	itt	eq
 80106c4:	0200      	lsleq	r0, r0, #8
 80106c6:	3308      	addeq	r3, #8
 80106c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106cc:	bf04      	itt	eq
 80106ce:	0100      	lsleq	r0, r0, #4
 80106d0:	3304      	addeq	r3, #4
 80106d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106d6:	bf04      	itt	eq
 80106d8:	0080      	lsleq	r0, r0, #2
 80106da:	3302      	addeq	r3, #2
 80106dc:	2800      	cmp	r0, #0
 80106de:	db05      	blt.n	80106ec <__hi0bits+0x38>
 80106e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106e4:	f103 0301 	add.w	r3, r3, #1
 80106e8:	bf08      	it	eq
 80106ea:	2320      	moveq	r3, #32
 80106ec:	4618      	mov	r0, r3
 80106ee:	4770      	bx	lr
 80106f0:	2300      	movs	r3, #0
 80106f2:	e7e4      	b.n	80106be <__hi0bits+0xa>

080106f4 <__lo0bits>:
 80106f4:	6803      	ldr	r3, [r0, #0]
 80106f6:	f013 0207 	ands.w	r2, r3, #7
 80106fa:	4601      	mov	r1, r0
 80106fc:	d00b      	beq.n	8010716 <__lo0bits+0x22>
 80106fe:	07da      	lsls	r2, r3, #31
 8010700:	d423      	bmi.n	801074a <__lo0bits+0x56>
 8010702:	0798      	lsls	r0, r3, #30
 8010704:	bf49      	itett	mi
 8010706:	085b      	lsrmi	r3, r3, #1
 8010708:	089b      	lsrpl	r3, r3, #2
 801070a:	2001      	movmi	r0, #1
 801070c:	600b      	strmi	r3, [r1, #0]
 801070e:	bf5c      	itt	pl
 8010710:	600b      	strpl	r3, [r1, #0]
 8010712:	2002      	movpl	r0, #2
 8010714:	4770      	bx	lr
 8010716:	b298      	uxth	r0, r3
 8010718:	b9a8      	cbnz	r0, 8010746 <__lo0bits+0x52>
 801071a:	0c1b      	lsrs	r3, r3, #16
 801071c:	2010      	movs	r0, #16
 801071e:	b2da      	uxtb	r2, r3
 8010720:	b90a      	cbnz	r2, 8010726 <__lo0bits+0x32>
 8010722:	3008      	adds	r0, #8
 8010724:	0a1b      	lsrs	r3, r3, #8
 8010726:	071a      	lsls	r2, r3, #28
 8010728:	bf04      	itt	eq
 801072a:	091b      	lsreq	r3, r3, #4
 801072c:	3004      	addeq	r0, #4
 801072e:	079a      	lsls	r2, r3, #30
 8010730:	bf04      	itt	eq
 8010732:	089b      	lsreq	r3, r3, #2
 8010734:	3002      	addeq	r0, #2
 8010736:	07da      	lsls	r2, r3, #31
 8010738:	d403      	bmi.n	8010742 <__lo0bits+0x4e>
 801073a:	085b      	lsrs	r3, r3, #1
 801073c:	f100 0001 	add.w	r0, r0, #1
 8010740:	d005      	beq.n	801074e <__lo0bits+0x5a>
 8010742:	600b      	str	r3, [r1, #0]
 8010744:	4770      	bx	lr
 8010746:	4610      	mov	r0, r2
 8010748:	e7e9      	b.n	801071e <__lo0bits+0x2a>
 801074a:	2000      	movs	r0, #0
 801074c:	4770      	bx	lr
 801074e:	2020      	movs	r0, #32
 8010750:	4770      	bx	lr
	...

08010754 <__i2b>:
 8010754:	b510      	push	{r4, lr}
 8010756:	460c      	mov	r4, r1
 8010758:	2101      	movs	r1, #1
 801075a:	f7ff feb9 	bl	80104d0 <_Balloc>
 801075e:	4602      	mov	r2, r0
 8010760:	b928      	cbnz	r0, 801076e <__i2b+0x1a>
 8010762:	4b05      	ldr	r3, [pc, #20]	; (8010778 <__i2b+0x24>)
 8010764:	4805      	ldr	r0, [pc, #20]	; (801077c <__i2b+0x28>)
 8010766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801076a:	f000 fc53 	bl	8011014 <__assert_func>
 801076e:	2301      	movs	r3, #1
 8010770:	6144      	str	r4, [r0, #20]
 8010772:	6103      	str	r3, [r0, #16]
 8010774:	bd10      	pop	{r4, pc}
 8010776:	bf00      	nop
 8010778:	08012860 	.word	0x08012860
 801077c:	08012903 	.word	0x08012903

08010780 <__multiply>:
 8010780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	4691      	mov	r9, r2
 8010786:	690a      	ldr	r2, [r1, #16]
 8010788:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801078c:	429a      	cmp	r2, r3
 801078e:	bfb8      	it	lt
 8010790:	460b      	movlt	r3, r1
 8010792:	460c      	mov	r4, r1
 8010794:	bfbc      	itt	lt
 8010796:	464c      	movlt	r4, r9
 8010798:	4699      	movlt	r9, r3
 801079a:	6927      	ldr	r7, [r4, #16]
 801079c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80107a0:	68a3      	ldr	r3, [r4, #8]
 80107a2:	6861      	ldr	r1, [r4, #4]
 80107a4:	eb07 060a 	add.w	r6, r7, sl
 80107a8:	42b3      	cmp	r3, r6
 80107aa:	b085      	sub	sp, #20
 80107ac:	bfb8      	it	lt
 80107ae:	3101      	addlt	r1, #1
 80107b0:	f7ff fe8e 	bl	80104d0 <_Balloc>
 80107b4:	b930      	cbnz	r0, 80107c4 <__multiply+0x44>
 80107b6:	4602      	mov	r2, r0
 80107b8:	4b44      	ldr	r3, [pc, #272]	; (80108cc <__multiply+0x14c>)
 80107ba:	4845      	ldr	r0, [pc, #276]	; (80108d0 <__multiply+0x150>)
 80107bc:	f240 115d 	movw	r1, #349	; 0x15d
 80107c0:	f000 fc28 	bl	8011014 <__assert_func>
 80107c4:	f100 0514 	add.w	r5, r0, #20
 80107c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107cc:	462b      	mov	r3, r5
 80107ce:	2200      	movs	r2, #0
 80107d0:	4543      	cmp	r3, r8
 80107d2:	d321      	bcc.n	8010818 <__multiply+0x98>
 80107d4:	f104 0314 	add.w	r3, r4, #20
 80107d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107dc:	f109 0314 	add.w	r3, r9, #20
 80107e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107e4:	9202      	str	r2, [sp, #8]
 80107e6:	1b3a      	subs	r2, r7, r4
 80107e8:	3a15      	subs	r2, #21
 80107ea:	f022 0203 	bic.w	r2, r2, #3
 80107ee:	3204      	adds	r2, #4
 80107f0:	f104 0115 	add.w	r1, r4, #21
 80107f4:	428f      	cmp	r7, r1
 80107f6:	bf38      	it	cc
 80107f8:	2204      	movcc	r2, #4
 80107fa:	9201      	str	r2, [sp, #4]
 80107fc:	9a02      	ldr	r2, [sp, #8]
 80107fe:	9303      	str	r3, [sp, #12]
 8010800:	429a      	cmp	r2, r3
 8010802:	d80c      	bhi.n	801081e <__multiply+0x9e>
 8010804:	2e00      	cmp	r6, #0
 8010806:	dd03      	ble.n	8010810 <__multiply+0x90>
 8010808:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801080c:	2b00      	cmp	r3, #0
 801080e:	d05a      	beq.n	80108c6 <__multiply+0x146>
 8010810:	6106      	str	r6, [r0, #16]
 8010812:	b005      	add	sp, #20
 8010814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010818:	f843 2b04 	str.w	r2, [r3], #4
 801081c:	e7d8      	b.n	80107d0 <__multiply+0x50>
 801081e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010822:	f1ba 0f00 	cmp.w	sl, #0
 8010826:	d024      	beq.n	8010872 <__multiply+0xf2>
 8010828:	f104 0e14 	add.w	lr, r4, #20
 801082c:	46a9      	mov	r9, r5
 801082e:	f04f 0c00 	mov.w	ip, #0
 8010832:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010836:	f8d9 1000 	ldr.w	r1, [r9]
 801083a:	fa1f fb82 	uxth.w	fp, r2
 801083e:	b289      	uxth	r1, r1
 8010840:	fb0a 110b 	mla	r1, sl, fp, r1
 8010844:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010848:	f8d9 2000 	ldr.w	r2, [r9]
 801084c:	4461      	add	r1, ip
 801084e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010852:	fb0a c20b 	mla	r2, sl, fp, ip
 8010856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801085a:	b289      	uxth	r1, r1
 801085c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010860:	4577      	cmp	r7, lr
 8010862:	f849 1b04 	str.w	r1, [r9], #4
 8010866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801086a:	d8e2      	bhi.n	8010832 <__multiply+0xb2>
 801086c:	9a01      	ldr	r2, [sp, #4]
 801086e:	f845 c002 	str.w	ip, [r5, r2]
 8010872:	9a03      	ldr	r2, [sp, #12]
 8010874:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010878:	3304      	adds	r3, #4
 801087a:	f1b9 0f00 	cmp.w	r9, #0
 801087e:	d020      	beq.n	80108c2 <__multiply+0x142>
 8010880:	6829      	ldr	r1, [r5, #0]
 8010882:	f104 0c14 	add.w	ip, r4, #20
 8010886:	46ae      	mov	lr, r5
 8010888:	f04f 0a00 	mov.w	sl, #0
 801088c:	f8bc b000 	ldrh.w	fp, [ip]
 8010890:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010894:	fb09 220b 	mla	r2, r9, fp, r2
 8010898:	4492      	add	sl, r2
 801089a:	b289      	uxth	r1, r1
 801089c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80108a0:	f84e 1b04 	str.w	r1, [lr], #4
 80108a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80108a8:	f8be 1000 	ldrh.w	r1, [lr]
 80108ac:	0c12      	lsrs	r2, r2, #16
 80108ae:	fb09 1102 	mla	r1, r9, r2, r1
 80108b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80108b6:	4567      	cmp	r7, ip
 80108b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80108bc:	d8e6      	bhi.n	801088c <__multiply+0x10c>
 80108be:	9a01      	ldr	r2, [sp, #4]
 80108c0:	50a9      	str	r1, [r5, r2]
 80108c2:	3504      	adds	r5, #4
 80108c4:	e79a      	b.n	80107fc <__multiply+0x7c>
 80108c6:	3e01      	subs	r6, #1
 80108c8:	e79c      	b.n	8010804 <__multiply+0x84>
 80108ca:	bf00      	nop
 80108cc:	08012860 	.word	0x08012860
 80108d0:	08012903 	.word	0x08012903

080108d4 <__pow5mult>:
 80108d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108d8:	4615      	mov	r5, r2
 80108da:	f012 0203 	ands.w	r2, r2, #3
 80108de:	4606      	mov	r6, r0
 80108e0:	460f      	mov	r7, r1
 80108e2:	d007      	beq.n	80108f4 <__pow5mult+0x20>
 80108e4:	4c25      	ldr	r4, [pc, #148]	; (801097c <__pow5mult+0xa8>)
 80108e6:	3a01      	subs	r2, #1
 80108e8:	2300      	movs	r3, #0
 80108ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108ee:	f7ff fe51 	bl	8010594 <__multadd>
 80108f2:	4607      	mov	r7, r0
 80108f4:	10ad      	asrs	r5, r5, #2
 80108f6:	d03d      	beq.n	8010974 <__pow5mult+0xa0>
 80108f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108fa:	b97c      	cbnz	r4, 801091c <__pow5mult+0x48>
 80108fc:	2010      	movs	r0, #16
 80108fe:	f000 fbb9 	bl	8011074 <malloc>
 8010902:	4602      	mov	r2, r0
 8010904:	6270      	str	r0, [r6, #36]	; 0x24
 8010906:	b928      	cbnz	r0, 8010914 <__pow5mult+0x40>
 8010908:	4b1d      	ldr	r3, [pc, #116]	; (8010980 <__pow5mult+0xac>)
 801090a:	481e      	ldr	r0, [pc, #120]	; (8010984 <__pow5mult+0xb0>)
 801090c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010910:	f000 fb80 	bl	8011014 <__assert_func>
 8010914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010918:	6004      	str	r4, [r0, #0]
 801091a:	60c4      	str	r4, [r0, #12]
 801091c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010924:	b94c      	cbnz	r4, 801093a <__pow5mult+0x66>
 8010926:	f240 2171 	movw	r1, #625	; 0x271
 801092a:	4630      	mov	r0, r6
 801092c:	f7ff ff12 	bl	8010754 <__i2b>
 8010930:	2300      	movs	r3, #0
 8010932:	f8c8 0008 	str.w	r0, [r8, #8]
 8010936:	4604      	mov	r4, r0
 8010938:	6003      	str	r3, [r0, #0]
 801093a:	f04f 0900 	mov.w	r9, #0
 801093e:	07eb      	lsls	r3, r5, #31
 8010940:	d50a      	bpl.n	8010958 <__pow5mult+0x84>
 8010942:	4639      	mov	r1, r7
 8010944:	4622      	mov	r2, r4
 8010946:	4630      	mov	r0, r6
 8010948:	f7ff ff1a 	bl	8010780 <__multiply>
 801094c:	4639      	mov	r1, r7
 801094e:	4680      	mov	r8, r0
 8010950:	4630      	mov	r0, r6
 8010952:	f7ff fdfd 	bl	8010550 <_Bfree>
 8010956:	4647      	mov	r7, r8
 8010958:	106d      	asrs	r5, r5, #1
 801095a:	d00b      	beq.n	8010974 <__pow5mult+0xa0>
 801095c:	6820      	ldr	r0, [r4, #0]
 801095e:	b938      	cbnz	r0, 8010970 <__pow5mult+0x9c>
 8010960:	4622      	mov	r2, r4
 8010962:	4621      	mov	r1, r4
 8010964:	4630      	mov	r0, r6
 8010966:	f7ff ff0b 	bl	8010780 <__multiply>
 801096a:	6020      	str	r0, [r4, #0]
 801096c:	f8c0 9000 	str.w	r9, [r0]
 8010970:	4604      	mov	r4, r0
 8010972:	e7e4      	b.n	801093e <__pow5mult+0x6a>
 8010974:	4638      	mov	r0, r7
 8010976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801097a:	bf00      	nop
 801097c:	08012a50 	.word	0x08012a50
 8010980:	080128ec 	.word	0x080128ec
 8010984:	08012903 	.word	0x08012903

08010988 <__lshift>:
 8010988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801098c:	460c      	mov	r4, r1
 801098e:	6849      	ldr	r1, [r1, #4]
 8010990:	6923      	ldr	r3, [r4, #16]
 8010992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010996:	68a3      	ldr	r3, [r4, #8]
 8010998:	4607      	mov	r7, r0
 801099a:	4691      	mov	r9, r2
 801099c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80109a0:	f108 0601 	add.w	r6, r8, #1
 80109a4:	42b3      	cmp	r3, r6
 80109a6:	db0b      	blt.n	80109c0 <__lshift+0x38>
 80109a8:	4638      	mov	r0, r7
 80109aa:	f7ff fd91 	bl	80104d0 <_Balloc>
 80109ae:	4605      	mov	r5, r0
 80109b0:	b948      	cbnz	r0, 80109c6 <__lshift+0x3e>
 80109b2:	4602      	mov	r2, r0
 80109b4:	4b2a      	ldr	r3, [pc, #168]	; (8010a60 <__lshift+0xd8>)
 80109b6:	482b      	ldr	r0, [pc, #172]	; (8010a64 <__lshift+0xdc>)
 80109b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80109bc:	f000 fb2a 	bl	8011014 <__assert_func>
 80109c0:	3101      	adds	r1, #1
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	e7ee      	b.n	80109a4 <__lshift+0x1c>
 80109c6:	2300      	movs	r3, #0
 80109c8:	f100 0114 	add.w	r1, r0, #20
 80109cc:	f100 0210 	add.w	r2, r0, #16
 80109d0:	4618      	mov	r0, r3
 80109d2:	4553      	cmp	r3, sl
 80109d4:	db37      	blt.n	8010a46 <__lshift+0xbe>
 80109d6:	6920      	ldr	r0, [r4, #16]
 80109d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109dc:	f104 0314 	add.w	r3, r4, #20
 80109e0:	f019 091f 	ands.w	r9, r9, #31
 80109e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80109ec:	d02f      	beq.n	8010a4e <__lshift+0xc6>
 80109ee:	f1c9 0e20 	rsb	lr, r9, #32
 80109f2:	468a      	mov	sl, r1
 80109f4:	f04f 0c00 	mov.w	ip, #0
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	fa02 f209 	lsl.w	r2, r2, r9
 80109fe:	ea42 020c 	orr.w	r2, r2, ip
 8010a02:	f84a 2b04 	str.w	r2, [sl], #4
 8010a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a0a:	4298      	cmp	r0, r3
 8010a0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010a10:	d8f2      	bhi.n	80109f8 <__lshift+0x70>
 8010a12:	1b03      	subs	r3, r0, r4
 8010a14:	3b15      	subs	r3, #21
 8010a16:	f023 0303 	bic.w	r3, r3, #3
 8010a1a:	3304      	adds	r3, #4
 8010a1c:	f104 0215 	add.w	r2, r4, #21
 8010a20:	4290      	cmp	r0, r2
 8010a22:	bf38      	it	cc
 8010a24:	2304      	movcc	r3, #4
 8010a26:	f841 c003 	str.w	ip, [r1, r3]
 8010a2a:	f1bc 0f00 	cmp.w	ip, #0
 8010a2e:	d001      	beq.n	8010a34 <__lshift+0xac>
 8010a30:	f108 0602 	add.w	r6, r8, #2
 8010a34:	3e01      	subs	r6, #1
 8010a36:	4638      	mov	r0, r7
 8010a38:	612e      	str	r6, [r5, #16]
 8010a3a:	4621      	mov	r1, r4
 8010a3c:	f7ff fd88 	bl	8010550 <_Bfree>
 8010a40:	4628      	mov	r0, r5
 8010a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	e7c1      	b.n	80109d2 <__lshift+0x4a>
 8010a4e:	3904      	subs	r1, #4
 8010a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a54:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a58:	4298      	cmp	r0, r3
 8010a5a:	d8f9      	bhi.n	8010a50 <__lshift+0xc8>
 8010a5c:	e7ea      	b.n	8010a34 <__lshift+0xac>
 8010a5e:	bf00      	nop
 8010a60:	08012860 	.word	0x08012860
 8010a64:	08012903 	.word	0x08012903

08010a68 <__mcmp>:
 8010a68:	b530      	push	{r4, r5, lr}
 8010a6a:	6902      	ldr	r2, [r0, #16]
 8010a6c:	690c      	ldr	r4, [r1, #16]
 8010a6e:	1b12      	subs	r2, r2, r4
 8010a70:	d10e      	bne.n	8010a90 <__mcmp+0x28>
 8010a72:	f100 0314 	add.w	r3, r0, #20
 8010a76:	3114      	adds	r1, #20
 8010a78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a88:	42a5      	cmp	r5, r4
 8010a8a:	d003      	beq.n	8010a94 <__mcmp+0x2c>
 8010a8c:	d305      	bcc.n	8010a9a <__mcmp+0x32>
 8010a8e:	2201      	movs	r2, #1
 8010a90:	4610      	mov	r0, r2
 8010a92:	bd30      	pop	{r4, r5, pc}
 8010a94:	4283      	cmp	r3, r0
 8010a96:	d3f3      	bcc.n	8010a80 <__mcmp+0x18>
 8010a98:	e7fa      	b.n	8010a90 <__mcmp+0x28>
 8010a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a9e:	e7f7      	b.n	8010a90 <__mcmp+0x28>

08010aa0 <__mdiff>:
 8010aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	4611      	mov	r1, r2
 8010aaa:	4620      	mov	r0, r4
 8010aac:	4690      	mov	r8, r2
 8010aae:	f7ff ffdb 	bl	8010a68 <__mcmp>
 8010ab2:	1e05      	subs	r5, r0, #0
 8010ab4:	d110      	bne.n	8010ad8 <__mdiff+0x38>
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4630      	mov	r0, r6
 8010aba:	f7ff fd09 	bl	80104d0 <_Balloc>
 8010abe:	b930      	cbnz	r0, 8010ace <__mdiff+0x2e>
 8010ac0:	4b3a      	ldr	r3, [pc, #232]	; (8010bac <__mdiff+0x10c>)
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	f240 2132 	movw	r1, #562	; 0x232
 8010ac8:	4839      	ldr	r0, [pc, #228]	; (8010bb0 <__mdiff+0x110>)
 8010aca:	f000 faa3 	bl	8011014 <__assert_func>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad8:	bfa4      	itt	ge
 8010ada:	4643      	movge	r3, r8
 8010adc:	46a0      	movge	r8, r4
 8010ade:	4630      	mov	r0, r6
 8010ae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ae4:	bfa6      	itte	ge
 8010ae6:	461c      	movge	r4, r3
 8010ae8:	2500      	movge	r5, #0
 8010aea:	2501      	movlt	r5, #1
 8010aec:	f7ff fcf0 	bl	80104d0 <_Balloc>
 8010af0:	b920      	cbnz	r0, 8010afc <__mdiff+0x5c>
 8010af2:	4b2e      	ldr	r3, [pc, #184]	; (8010bac <__mdiff+0x10c>)
 8010af4:	4602      	mov	r2, r0
 8010af6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010afa:	e7e5      	b.n	8010ac8 <__mdiff+0x28>
 8010afc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010b00:	6926      	ldr	r6, [r4, #16]
 8010b02:	60c5      	str	r5, [r0, #12]
 8010b04:	f104 0914 	add.w	r9, r4, #20
 8010b08:	f108 0514 	add.w	r5, r8, #20
 8010b0c:	f100 0e14 	add.w	lr, r0, #20
 8010b10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010b14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010b18:	f108 0210 	add.w	r2, r8, #16
 8010b1c:	46f2      	mov	sl, lr
 8010b1e:	2100      	movs	r1, #0
 8010b20:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b28:	fa1f f883 	uxth.w	r8, r3
 8010b2c:	fa11 f18b 	uxtah	r1, r1, fp
 8010b30:	0c1b      	lsrs	r3, r3, #16
 8010b32:	eba1 0808 	sub.w	r8, r1, r8
 8010b36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b3e:	fa1f f888 	uxth.w	r8, r8
 8010b42:	1419      	asrs	r1, r3, #16
 8010b44:	454e      	cmp	r6, r9
 8010b46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b4a:	f84a 3b04 	str.w	r3, [sl], #4
 8010b4e:	d8e7      	bhi.n	8010b20 <__mdiff+0x80>
 8010b50:	1b33      	subs	r3, r6, r4
 8010b52:	3b15      	subs	r3, #21
 8010b54:	f023 0303 	bic.w	r3, r3, #3
 8010b58:	3304      	adds	r3, #4
 8010b5a:	3415      	adds	r4, #21
 8010b5c:	42a6      	cmp	r6, r4
 8010b5e:	bf38      	it	cc
 8010b60:	2304      	movcc	r3, #4
 8010b62:	441d      	add	r5, r3
 8010b64:	4473      	add	r3, lr
 8010b66:	469e      	mov	lr, r3
 8010b68:	462e      	mov	r6, r5
 8010b6a:	4566      	cmp	r6, ip
 8010b6c:	d30e      	bcc.n	8010b8c <__mdiff+0xec>
 8010b6e:	f10c 0203 	add.w	r2, ip, #3
 8010b72:	1b52      	subs	r2, r2, r5
 8010b74:	f022 0203 	bic.w	r2, r2, #3
 8010b78:	3d03      	subs	r5, #3
 8010b7a:	45ac      	cmp	ip, r5
 8010b7c:	bf38      	it	cc
 8010b7e:	2200      	movcc	r2, #0
 8010b80:	441a      	add	r2, r3
 8010b82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010b86:	b17b      	cbz	r3, 8010ba8 <__mdiff+0x108>
 8010b88:	6107      	str	r7, [r0, #16]
 8010b8a:	e7a3      	b.n	8010ad4 <__mdiff+0x34>
 8010b8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b90:	fa11 f288 	uxtah	r2, r1, r8
 8010b94:	1414      	asrs	r4, r2, #16
 8010b96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b9a:	b292      	uxth	r2, r2
 8010b9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010ba0:	f84e 2b04 	str.w	r2, [lr], #4
 8010ba4:	1421      	asrs	r1, r4, #16
 8010ba6:	e7e0      	b.n	8010b6a <__mdiff+0xca>
 8010ba8:	3f01      	subs	r7, #1
 8010baa:	e7ea      	b.n	8010b82 <__mdiff+0xe2>
 8010bac:	08012860 	.word	0x08012860
 8010bb0:	08012903 	.word	0x08012903

08010bb4 <__ulp>:
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	ed8d 0b00 	vstr	d0, [sp]
 8010bba:	9b01      	ldr	r3, [sp, #4]
 8010bbc:	4912      	ldr	r1, [pc, #72]	; (8010c08 <__ulp+0x54>)
 8010bbe:	4019      	ands	r1, r3
 8010bc0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010bc4:	2900      	cmp	r1, #0
 8010bc6:	dd05      	ble.n	8010bd4 <__ulp+0x20>
 8010bc8:	2200      	movs	r2, #0
 8010bca:	460b      	mov	r3, r1
 8010bcc:	ec43 2b10 	vmov	d0, r2, r3
 8010bd0:	b002      	add	sp, #8
 8010bd2:	4770      	bx	lr
 8010bd4:	4249      	negs	r1, r1
 8010bd6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010bda:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010bde:	f04f 0200 	mov.w	r2, #0
 8010be2:	f04f 0300 	mov.w	r3, #0
 8010be6:	da04      	bge.n	8010bf2 <__ulp+0x3e>
 8010be8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010bec:	fa41 f300 	asr.w	r3, r1, r0
 8010bf0:	e7ec      	b.n	8010bcc <__ulp+0x18>
 8010bf2:	f1a0 0114 	sub.w	r1, r0, #20
 8010bf6:	291e      	cmp	r1, #30
 8010bf8:	bfda      	itte	le
 8010bfa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010bfe:	fa20 f101 	lsrle.w	r1, r0, r1
 8010c02:	2101      	movgt	r1, #1
 8010c04:	460a      	mov	r2, r1
 8010c06:	e7e1      	b.n	8010bcc <__ulp+0x18>
 8010c08:	7ff00000 	.word	0x7ff00000

08010c0c <__b2d>:
 8010c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0e:	6905      	ldr	r5, [r0, #16]
 8010c10:	f100 0714 	add.w	r7, r0, #20
 8010c14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010c18:	1f2e      	subs	r6, r5, #4
 8010c1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f7ff fd48 	bl	80106b4 <__hi0bits>
 8010c24:	f1c0 0320 	rsb	r3, r0, #32
 8010c28:	280a      	cmp	r0, #10
 8010c2a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010ca8 <__b2d+0x9c>
 8010c2e:	600b      	str	r3, [r1, #0]
 8010c30:	dc14      	bgt.n	8010c5c <__b2d+0x50>
 8010c32:	f1c0 0e0b 	rsb	lr, r0, #11
 8010c36:	fa24 f10e 	lsr.w	r1, r4, lr
 8010c3a:	42b7      	cmp	r7, r6
 8010c3c:	ea41 030c 	orr.w	r3, r1, ip
 8010c40:	bf34      	ite	cc
 8010c42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c46:	2100      	movcs	r1, #0
 8010c48:	3015      	adds	r0, #21
 8010c4a:	fa04 f000 	lsl.w	r0, r4, r0
 8010c4e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010c52:	ea40 0201 	orr.w	r2, r0, r1
 8010c56:	ec43 2b10 	vmov	d0, r2, r3
 8010c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c5c:	42b7      	cmp	r7, r6
 8010c5e:	bf3a      	itte	cc
 8010c60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c64:	f1a5 0608 	subcc.w	r6, r5, #8
 8010c68:	2100      	movcs	r1, #0
 8010c6a:	380b      	subs	r0, #11
 8010c6c:	d017      	beq.n	8010c9e <__b2d+0x92>
 8010c6e:	f1c0 0c20 	rsb	ip, r0, #32
 8010c72:	fa04 f500 	lsl.w	r5, r4, r0
 8010c76:	42be      	cmp	r6, r7
 8010c78:	fa21 f40c 	lsr.w	r4, r1, ip
 8010c7c:	ea45 0504 	orr.w	r5, r5, r4
 8010c80:	bf8c      	ite	hi
 8010c82:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010c86:	2400      	movls	r4, #0
 8010c88:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010c8c:	fa01 f000 	lsl.w	r0, r1, r0
 8010c90:	fa24 f40c 	lsr.w	r4, r4, ip
 8010c94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010c98:	ea40 0204 	orr.w	r2, r0, r4
 8010c9c:	e7db      	b.n	8010c56 <__b2d+0x4a>
 8010c9e:	ea44 030c 	orr.w	r3, r4, ip
 8010ca2:	460a      	mov	r2, r1
 8010ca4:	e7d7      	b.n	8010c56 <__b2d+0x4a>
 8010ca6:	bf00      	nop
 8010ca8:	3ff00000 	.word	0x3ff00000

08010cac <__d2b>:
 8010cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010cb0:	4689      	mov	r9, r1
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	ec57 6b10 	vmov	r6, r7, d0
 8010cb8:	4690      	mov	r8, r2
 8010cba:	f7ff fc09 	bl	80104d0 <_Balloc>
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	b930      	cbnz	r0, 8010cd0 <__d2b+0x24>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	4b25      	ldr	r3, [pc, #148]	; (8010d5c <__d2b+0xb0>)
 8010cc6:	4826      	ldr	r0, [pc, #152]	; (8010d60 <__d2b+0xb4>)
 8010cc8:	f240 310a 	movw	r1, #778	; 0x30a
 8010ccc:	f000 f9a2 	bl	8011014 <__assert_func>
 8010cd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010cd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010cd8:	bb35      	cbnz	r5, 8010d28 <__d2b+0x7c>
 8010cda:	2e00      	cmp	r6, #0
 8010cdc:	9301      	str	r3, [sp, #4]
 8010cde:	d028      	beq.n	8010d32 <__d2b+0x86>
 8010ce0:	4668      	mov	r0, sp
 8010ce2:	9600      	str	r6, [sp, #0]
 8010ce4:	f7ff fd06 	bl	80106f4 <__lo0bits>
 8010ce8:	9900      	ldr	r1, [sp, #0]
 8010cea:	b300      	cbz	r0, 8010d2e <__d2b+0x82>
 8010cec:	9a01      	ldr	r2, [sp, #4]
 8010cee:	f1c0 0320 	rsb	r3, r0, #32
 8010cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf6:	430b      	orrs	r3, r1
 8010cf8:	40c2      	lsrs	r2, r0
 8010cfa:	6163      	str	r3, [r4, #20]
 8010cfc:	9201      	str	r2, [sp, #4]
 8010cfe:	9b01      	ldr	r3, [sp, #4]
 8010d00:	61a3      	str	r3, [r4, #24]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	bf14      	ite	ne
 8010d06:	2202      	movne	r2, #2
 8010d08:	2201      	moveq	r2, #1
 8010d0a:	6122      	str	r2, [r4, #16]
 8010d0c:	b1d5      	cbz	r5, 8010d44 <__d2b+0x98>
 8010d0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d12:	4405      	add	r5, r0
 8010d14:	f8c9 5000 	str.w	r5, [r9]
 8010d18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d1c:	f8c8 0000 	str.w	r0, [r8]
 8010d20:	4620      	mov	r0, r4
 8010d22:	b003      	add	sp, #12
 8010d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d2c:	e7d5      	b.n	8010cda <__d2b+0x2e>
 8010d2e:	6161      	str	r1, [r4, #20]
 8010d30:	e7e5      	b.n	8010cfe <__d2b+0x52>
 8010d32:	a801      	add	r0, sp, #4
 8010d34:	f7ff fcde 	bl	80106f4 <__lo0bits>
 8010d38:	9b01      	ldr	r3, [sp, #4]
 8010d3a:	6163      	str	r3, [r4, #20]
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	6122      	str	r2, [r4, #16]
 8010d40:	3020      	adds	r0, #32
 8010d42:	e7e3      	b.n	8010d0c <__d2b+0x60>
 8010d44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d4c:	f8c9 0000 	str.w	r0, [r9]
 8010d50:	6918      	ldr	r0, [r3, #16]
 8010d52:	f7ff fcaf 	bl	80106b4 <__hi0bits>
 8010d56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d5a:	e7df      	b.n	8010d1c <__d2b+0x70>
 8010d5c:	08012860 	.word	0x08012860
 8010d60:	08012903 	.word	0x08012903

08010d64 <__ratio>:
 8010d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d68:	4688      	mov	r8, r1
 8010d6a:	4669      	mov	r1, sp
 8010d6c:	4681      	mov	r9, r0
 8010d6e:	f7ff ff4d 	bl	8010c0c <__b2d>
 8010d72:	a901      	add	r1, sp, #4
 8010d74:	4640      	mov	r0, r8
 8010d76:	ec55 4b10 	vmov	r4, r5, d0
 8010d7a:	ee10 aa10 	vmov	sl, s0
 8010d7e:	f7ff ff45 	bl	8010c0c <__b2d>
 8010d82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010d8a:	1a59      	subs	r1, r3, r1
 8010d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010d96:	ec57 6b10 	vmov	r6, r7, d0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	bfd6      	itet	le
 8010d9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010da2:	462a      	movgt	r2, r5
 8010da4:	463a      	movle	r2, r7
 8010da6:	46ab      	mov	fp, r5
 8010da8:	bfd6      	itet	le
 8010daa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010dae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010db2:	ee00 3a90 	vmovle	s1, r3
 8010db6:	ec4b ab17 	vmov	d7, sl, fp
 8010dba:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010dbe:	b003      	add	sp, #12
 8010dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010dc4 <__copybits>:
 8010dc4:	3901      	subs	r1, #1
 8010dc6:	b570      	push	{r4, r5, r6, lr}
 8010dc8:	1149      	asrs	r1, r1, #5
 8010dca:	6914      	ldr	r4, [r2, #16]
 8010dcc:	3101      	adds	r1, #1
 8010dce:	f102 0314 	add.w	r3, r2, #20
 8010dd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010dd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010dda:	1f05      	subs	r5, r0, #4
 8010ddc:	42a3      	cmp	r3, r4
 8010dde:	d30c      	bcc.n	8010dfa <__copybits+0x36>
 8010de0:	1aa3      	subs	r3, r4, r2
 8010de2:	3b11      	subs	r3, #17
 8010de4:	f023 0303 	bic.w	r3, r3, #3
 8010de8:	3211      	adds	r2, #17
 8010dea:	42a2      	cmp	r2, r4
 8010dec:	bf88      	it	hi
 8010dee:	2300      	movhi	r3, #0
 8010df0:	4418      	add	r0, r3
 8010df2:	2300      	movs	r3, #0
 8010df4:	4288      	cmp	r0, r1
 8010df6:	d305      	bcc.n	8010e04 <__copybits+0x40>
 8010df8:	bd70      	pop	{r4, r5, r6, pc}
 8010dfa:	f853 6b04 	ldr.w	r6, [r3], #4
 8010dfe:	f845 6f04 	str.w	r6, [r5, #4]!
 8010e02:	e7eb      	b.n	8010ddc <__copybits+0x18>
 8010e04:	f840 3b04 	str.w	r3, [r0], #4
 8010e08:	e7f4      	b.n	8010df4 <__copybits+0x30>

08010e0a <__any_on>:
 8010e0a:	f100 0214 	add.w	r2, r0, #20
 8010e0e:	6900      	ldr	r0, [r0, #16]
 8010e10:	114b      	asrs	r3, r1, #5
 8010e12:	4298      	cmp	r0, r3
 8010e14:	b510      	push	{r4, lr}
 8010e16:	db11      	blt.n	8010e3c <__any_on+0x32>
 8010e18:	dd0a      	ble.n	8010e30 <__any_on+0x26>
 8010e1a:	f011 011f 	ands.w	r1, r1, #31
 8010e1e:	d007      	beq.n	8010e30 <__any_on+0x26>
 8010e20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e24:	fa24 f001 	lsr.w	r0, r4, r1
 8010e28:	fa00 f101 	lsl.w	r1, r0, r1
 8010e2c:	428c      	cmp	r4, r1
 8010e2e:	d10b      	bne.n	8010e48 <__any_on+0x3e>
 8010e30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d803      	bhi.n	8010e40 <__any_on+0x36>
 8010e38:	2000      	movs	r0, #0
 8010e3a:	bd10      	pop	{r4, pc}
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	e7f7      	b.n	8010e30 <__any_on+0x26>
 8010e40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e44:	2900      	cmp	r1, #0
 8010e46:	d0f5      	beq.n	8010e34 <__any_on+0x2a>
 8010e48:	2001      	movs	r0, #1
 8010e4a:	e7f6      	b.n	8010e3a <__any_on+0x30>

08010e4c <_calloc_r>:
 8010e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e4e:	fba1 2402 	umull	r2, r4, r1, r2
 8010e52:	b94c      	cbnz	r4, 8010e68 <_calloc_r+0x1c>
 8010e54:	4611      	mov	r1, r2
 8010e56:	9201      	str	r2, [sp, #4]
 8010e58:	f000 f82e 	bl	8010eb8 <_malloc_r>
 8010e5c:	9a01      	ldr	r2, [sp, #4]
 8010e5e:	4605      	mov	r5, r0
 8010e60:	b930      	cbnz	r0, 8010e70 <_calloc_r+0x24>
 8010e62:	4628      	mov	r0, r5
 8010e64:	b003      	add	sp, #12
 8010e66:	bd30      	pop	{r4, r5, pc}
 8010e68:	220c      	movs	r2, #12
 8010e6a:	6002      	str	r2, [r0, #0]
 8010e6c:	2500      	movs	r5, #0
 8010e6e:	e7f8      	b.n	8010e62 <_calloc_r+0x16>
 8010e70:	4621      	mov	r1, r4
 8010e72:	f7fe f9c5 	bl	800f200 <memset>
 8010e76:	e7f4      	b.n	8010e62 <_calloc_r+0x16>

08010e78 <sbrk_aligned>:
 8010e78:	b570      	push	{r4, r5, r6, lr}
 8010e7a:	4e0e      	ldr	r6, [pc, #56]	; (8010eb4 <sbrk_aligned+0x3c>)
 8010e7c:	460c      	mov	r4, r1
 8010e7e:	6831      	ldr	r1, [r6, #0]
 8010e80:	4605      	mov	r5, r0
 8010e82:	b911      	cbnz	r1, 8010e8a <sbrk_aligned+0x12>
 8010e84:	f000 f894 	bl	8010fb0 <_sbrk_r>
 8010e88:	6030      	str	r0, [r6, #0]
 8010e8a:	4621      	mov	r1, r4
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f000 f88f 	bl	8010fb0 <_sbrk_r>
 8010e92:	1c43      	adds	r3, r0, #1
 8010e94:	d00a      	beq.n	8010eac <sbrk_aligned+0x34>
 8010e96:	1cc4      	adds	r4, r0, #3
 8010e98:	f024 0403 	bic.w	r4, r4, #3
 8010e9c:	42a0      	cmp	r0, r4
 8010e9e:	d007      	beq.n	8010eb0 <sbrk_aligned+0x38>
 8010ea0:	1a21      	subs	r1, r4, r0
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f000 f884 	bl	8010fb0 <_sbrk_r>
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	d101      	bne.n	8010eb0 <sbrk_aligned+0x38>
 8010eac:	f04f 34ff 	mov.w	r4, #4294967295
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
 8010eb4:	24000c94 	.word	0x24000c94

08010eb8 <_malloc_r>:
 8010eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebc:	1ccd      	adds	r5, r1, #3
 8010ebe:	f025 0503 	bic.w	r5, r5, #3
 8010ec2:	3508      	adds	r5, #8
 8010ec4:	2d0c      	cmp	r5, #12
 8010ec6:	bf38      	it	cc
 8010ec8:	250c      	movcc	r5, #12
 8010eca:	2d00      	cmp	r5, #0
 8010ecc:	4607      	mov	r7, r0
 8010ece:	db01      	blt.n	8010ed4 <_malloc_r+0x1c>
 8010ed0:	42a9      	cmp	r1, r5
 8010ed2:	d905      	bls.n	8010ee0 <_malloc_r+0x28>
 8010ed4:	230c      	movs	r3, #12
 8010ed6:	603b      	str	r3, [r7, #0]
 8010ed8:	2600      	movs	r6, #0
 8010eda:	4630      	mov	r0, r6
 8010edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee0:	4e2e      	ldr	r6, [pc, #184]	; (8010f9c <_malloc_r+0xe4>)
 8010ee2:	f000 f8cf 	bl	8011084 <__malloc_lock>
 8010ee6:	6833      	ldr	r3, [r6, #0]
 8010ee8:	461c      	mov	r4, r3
 8010eea:	bb34      	cbnz	r4, 8010f3a <_malloc_r+0x82>
 8010eec:	4629      	mov	r1, r5
 8010eee:	4638      	mov	r0, r7
 8010ef0:	f7ff ffc2 	bl	8010e78 <sbrk_aligned>
 8010ef4:	1c43      	adds	r3, r0, #1
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	d14d      	bne.n	8010f96 <_malloc_r+0xde>
 8010efa:	6834      	ldr	r4, [r6, #0]
 8010efc:	4626      	mov	r6, r4
 8010efe:	2e00      	cmp	r6, #0
 8010f00:	d140      	bne.n	8010f84 <_malloc_r+0xcc>
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	4631      	mov	r1, r6
 8010f06:	4638      	mov	r0, r7
 8010f08:	eb04 0803 	add.w	r8, r4, r3
 8010f0c:	f000 f850 	bl	8010fb0 <_sbrk_r>
 8010f10:	4580      	cmp	r8, r0
 8010f12:	d13a      	bne.n	8010f8a <_malloc_r+0xd2>
 8010f14:	6821      	ldr	r1, [r4, #0]
 8010f16:	3503      	adds	r5, #3
 8010f18:	1a6d      	subs	r5, r5, r1
 8010f1a:	f025 0503 	bic.w	r5, r5, #3
 8010f1e:	3508      	adds	r5, #8
 8010f20:	2d0c      	cmp	r5, #12
 8010f22:	bf38      	it	cc
 8010f24:	250c      	movcc	r5, #12
 8010f26:	4629      	mov	r1, r5
 8010f28:	4638      	mov	r0, r7
 8010f2a:	f7ff ffa5 	bl	8010e78 <sbrk_aligned>
 8010f2e:	3001      	adds	r0, #1
 8010f30:	d02b      	beq.n	8010f8a <_malloc_r+0xd2>
 8010f32:	6823      	ldr	r3, [r4, #0]
 8010f34:	442b      	add	r3, r5
 8010f36:	6023      	str	r3, [r4, #0]
 8010f38:	e00e      	b.n	8010f58 <_malloc_r+0xa0>
 8010f3a:	6822      	ldr	r2, [r4, #0]
 8010f3c:	1b52      	subs	r2, r2, r5
 8010f3e:	d41e      	bmi.n	8010f7e <_malloc_r+0xc6>
 8010f40:	2a0b      	cmp	r2, #11
 8010f42:	d916      	bls.n	8010f72 <_malloc_r+0xba>
 8010f44:	1961      	adds	r1, r4, r5
 8010f46:	42a3      	cmp	r3, r4
 8010f48:	6025      	str	r5, [r4, #0]
 8010f4a:	bf18      	it	ne
 8010f4c:	6059      	strne	r1, [r3, #4]
 8010f4e:	6863      	ldr	r3, [r4, #4]
 8010f50:	bf08      	it	eq
 8010f52:	6031      	streq	r1, [r6, #0]
 8010f54:	5162      	str	r2, [r4, r5]
 8010f56:	604b      	str	r3, [r1, #4]
 8010f58:	4638      	mov	r0, r7
 8010f5a:	f104 060b 	add.w	r6, r4, #11
 8010f5e:	f000 f897 	bl	8011090 <__malloc_unlock>
 8010f62:	f026 0607 	bic.w	r6, r6, #7
 8010f66:	1d23      	adds	r3, r4, #4
 8010f68:	1af2      	subs	r2, r6, r3
 8010f6a:	d0b6      	beq.n	8010eda <_malloc_r+0x22>
 8010f6c:	1b9b      	subs	r3, r3, r6
 8010f6e:	50a3      	str	r3, [r4, r2]
 8010f70:	e7b3      	b.n	8010eda <_malloc_r+0x22>
 8010f72:	6862      	ldr	r2, [r4, #4]
 8010f74:	42a3      	cmp	r3, r4
 8010f76:	bf0c      	ite	eq
 8010f78:	6032      	streq	r2, [r6, #0]
 8010f7a:	605a      	strne	r2, [r3, #4]
 8010f7c:	e7ec      	b.n	8010f58 <_malloc_r+0xa0>
 8010f7e:	4623      	mov	r3, r4
 8010f80:	6864      	ldr	r4, [r4, #4]
 8010f82:	e7b2      	b.n	8010eea <_malloc_r+0x32>
 8010f84:	4634      	mov	r4, r6
 8010f86:	6876      	ldr	r6, [r6, #4]
 8010f88:	e7b9      	b.n	8010efe <_malloc_r+0x46>
 8010f8a:	230c      	movs	r3, #12
 8010f8c:	603b      	str	r3, [r7, #0]
 8010f8e:	4638      	mov	r0, r7
 8010f90:	f000 f87e 	bl	8011090 <__malloc_unlock>
 8010f94:	e7a1      	b.n	8010eda <_malloc_r+0x22>
 8010f96:	6025      	str	r5, [r4, #0]
 8010f98:	e7de      	b.n	8010f58 <_malloc_r+0xa0>
 8010f9a:	bf00      	nop
 8010f9c:	24000c90 	.word	0x24000c90

08010fa0 <nan>:
 8010fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010fa8 <nan+0x8>
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	00000000 	.word	0x00000000
 8010fac:	7ff80000 	.word	0x7ff80000

08010fb0 <_sbrk_r>:
 8010fb0:	b538      	push	{r3, r4, r5, lr}
 8010fb2:	4d06      	ldr	r5, [pc, #24]	; (8010fcc <_sbrk_r+0x1c>)
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	4608      	mov	r0, r1
 8010fba:	602b      	str	r3, [r5, #0]
 8010fbc:	f7f3 f84c 	bl	8004058 <_sbrk>
 8010fc0:	1c43      	adds	r3, r0, #1
 8010fc2:	d102      	bne.n	8010fca <_sbrk_r+0x1a>
 8010fc4:	682b      	ldr	r3, [r5, #0]
 8010fc6:	b103      	cbz	r3, 8010fca <_sbrk_r+0x1a>
 8010fc8:	6023      	str	r3, [r4, #0]
 8010fca:	bd38      	pop	{r3, r4, r5, pc}
 8010fcc:	24000c98 	.word	0x24000c98

08010fd0 <strncmp>:
 8010fd0:	b510      	push	{r4, lr}
 8010fd2:	b17a      	cbz	r2, 8010ff4 <strncmp+0x24>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	3901      	subs	r1, #1
 8010fd8:	1884      	adds	r4, r0, r2
 8010fda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010fde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010fe2:	4290      	cmp	r0, r2
 8010fe4:	d101      	bne.n	8010fea <strncmp+0x1a>
 8010fe6:	42a3      	cmp	r3, r4
 8010fe8:	d101      	bne.n	8010fee <strncmp+0x1e>
 8010fea:	1a80      	subs	r0, r0, r2
 8010fec:	bd10      	pop	{r4, pc}
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d1f3      	bne.n	8010fda <strncmp+0xa>
 8010ff2:	e7fa      	b.n	8010fea <strncmp+0x1a>
 8010ff4:	4610      	mov	r0, r2
 8010ff6:	e7f9      	b.n	8010fec <strncmp+0x1c>

08010ff8 <__ascii_wctomb>:
 8010ff8:	b149      	cbz	r1, 801100e <__ascii_wctomb+0x16>
 8010ffa:	2aff      	cmp	r2, #255	; 0xff
 8010ffc:	bf85      	ittet	hi
 8010ffe:	238a      	movhi	r3, #138	; 0x8a
 8011000:	6003      	strhi	r3, [r0, #0]
 8011002:	700a      	strbls	r2, [r1, #0]
 8011004:	f04f 30ff 	movhi.w	r0, #4294967295
 8011008:	bf98      	it	ls
 801100a:	2001      	movls	r0, #1
 801100c:	4770      	bx	lr
 801100e:	4608      	mov	r0, r1
 8011010:	4770      	bx	lr
	...

08011014 <__assert_func>:
 8011014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011016:	4614      	mov	r4, r2
 8011018:	461a      	mov	r2, r3
 801101a:	4b09      	ldr	r3, [pc, #36]	; (8011040 <__assert_func+0x2c>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4605      	mov	r5, r0
 8011020:	68d8      	ldr	r0, [r3, #12]
 8011022:	b14c      	cbz	r4, 8011038 <__assert_func+0x24>
 8011024:	4b07      	ldr	r3, [pc, #28]	; (8011044 <__assert_func+0x30>)
 8011026:	9100      	str	r1, [sp, #0]
 8011028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801102c:	4906      	ldr	r1, [pc, #24]	; (8011048 <__assert_func+0x34>)
 801102e:	462b      	mov	r3, r5
 8011030:	f000 f80e 	bl	8011050 <fiprintf>
 8011034:	f000 fc2c 	bl	8011890 <abort>
 8011038:	4b04      	ldr	r3, [pc, #16]	; (801104c <__assert_func+0x38>)
 801103a:	461c      	mov	r4, r3
 801103c:	e7f3      	b.n	8011026 <__assert_func+0x12>
 801103e:	bf00      	nop
 8011040:	24000100 	.word	0x24000100
 8011044:	08012a5c 	.word	0x08012a5c
 8011048:	08012a69 	.word	0x08012a69
 801104c:	08012a97 	.word	0x08012a97

08011050 <fiprintf>:
 8011050:	b40e      	push	{r1, r2, r3}
 8011052:	b503      	push	{r0, r1, lr}
 8011054:	4601      	mov	r1, r0
 8011056:	ab03      	add	r3, sp, #12
 8011058:	4805      	ldr	r0, [pc, #20]	; (8011070 <fiprintf+0x20>)
 801105a:	f853 2b04 	ldr.w	r2, [r3], #4
 801105e:	6800      	ldr	r0, [r0, #0]
 8011060:	9301      	str	r3, [sp, #4]
 8011062:	f000 f891 	bl	8011188 <_vfiprintf_r>
 8011066:	b002      	add	sp, #8
 8011068:	f85d eb04 	ldr.w	lr, [sp], #4
 801106c:	b003      	add	sp, #12
 801106e:	4770      	bx	lr
 8011070:	24000100 	.word	0x24000100

08011074 <malloc>:
 8011074:	4b02      	ldr	r3, [pc, #8]	; (8011080 <malloc+0xc>)
 8011076:	4601      	mov	r1, r0
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	f7ff bf1d 	b.w	8010eb8 <_malloc_r>
 801107e:	bf00      	nop
 8011080:	24000100 	.word	0x24000100

08011084 <__malloc_lock>:
 8011084:	4801      	ldr	r0, [pc, #4]	; (801108c <__malloc_lock+0x8>)
 8011086:	f000 bdc3 	b.w	8011c10 <__retarget_lock_acquire_recursive>
 801108a:	bf00      	nop
 801108c:	24000c9c 	.word	0x24000c9c

08011090 <__malloc_unlock>:
 8011090:	4801      	ldr	r0, [pc, #4]	; (8011098 <__malloc_unlock+0x8>)
 8011092:	f000 bdbe 	b.w	8011c12 <__retarget_lock_release_recursive>
 8011096:	bf00      	nop
 8011098:	24000c9c 	.word	0x24000c9c

0801109c <_free_r>:
 801109c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801109e:	2900      	cmp	r1, #0
 80110a0:	d044      	beq.n	801112c <_free_r+0x90>
 80110a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110a6:	9001      	str	r0, [sp, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f1a1 0404 	sub.w	r4, r1, #4
 80110ae:	bfb8      	it	lt
 80110b0:	18e4      	addlt	r4, r4, r3
 80110b2:	f7ff ffe7 	bl	8011084 <__malloc_lock>
 80110b6:	4a1e      	ldr	r2, [pc, #120]	; (8011130 <_free_r+0x94>)
 80110b8:	9801      	ldr	r0, [sp, #4]
 80110ba:	6813      	ldr	r3, [r2, #0]
 80110bc:	b933      	cbnz	r3, 80110cc <_free_r+0x30>
 80110be:	6063      	str	r3, [r4, #4]
 80110c0:	6014      	str	r4, [r2, #0]
 80110c2:	b003      	add	sp, #12
 80110c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80110c8:	f7ff bfe2 	b.w	8011090 <__malloc_unlock>
 80110cc:	42a3      	cmp	r3, r4
 80110ce:	d908      	bls.n	80110e2 <_free_r+0x46>
 80110d0:	6825      	ldr	r5, [r4, #0]
 80110d2:	1961      	adds	r1, r4, r5
 80110d4:	428b      	cmp	r3, r1
 80110d6:	bf01      	itttt	eq
 80110d8:	6819      	ldreq	r1, [r3, #0]
 80110da:	685b      	ldreq	r3, [r3, #4]
 80110dc:	1949      	addeq	r1, r1, r5
 80110de:	6021      	streq	r1, [r4, #0]
 80110e0:	e7ed      	b.n	80110be <_free_r+0x22>
 80110e2:	461a      	mov	r2, r3
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	b10b      	cbz	r3, 80110ec <_free_r+0x50>
 80110e8:	42a3      	cmp	r3, r4
 80110ea:	d9fa      	bls.n	80110e2 <_free_r+0x46>
 80110ec:	6811      	ldr	r1, [r2, #0]
 80110ee:	1855      	adds	r5, r2, r1
 80110f0:	42a5      	cmp	r5, r4
 80110f2:	d10b      	bne.n	801110c <_free_r+0x70>
 80110f4:	6824      	ldr	r4, [r4, #0]
 80110f6:	4421      	add	r1, r4
 80110f8:	1854      	adds	r4, r2, r1
 80110fa:	42a3      	cmp	r3, r4
 80110fc:	6011      	str	r1, [r2, #0]
 80110fe:	d1e0      	bne.n	80110c2 <_free_r+0x26>
 8011100:	681c      	ldr	r4, [r3, #0]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	6053      	str	r3, [r2, #4]
 8011106:	4421      	add	r1, r4
 8011108:	6011      	str	r1, [r2, #0]
 801110a:	e7da      	b.n	80110c2 <_free_r+0x26>
 801110c:	d902      	bls.n	8011114 <_free_r+0x78>
 801110e:	230c      	movs	r3, #12
 8011110:	6003      	str	r3, [r0, #0]
 8011112:	e7d6      	b.n	80110c2 <_free_r+0x26>
 8011114:	6825      	ldr	r5, [r4, #0]
 8011116:	1961      	adds	r1, r4, r5
 8011118:	428b      	cmp	r3, r1
 801111a:	bf04      	itt	eq
 801111c:	6819      	ldreq	r1, [r3, #0]
 801111e:	685b      	ldreq	r3, [r3, #4]
 8011120:	6063      	str	r3, [r4, #4]
 8011122:	bf04      	itt	eq
 8011124:	1949      	addeq	r1, r1, r5
 8011126:	6021      	streq	r1, [r4, #0]
 8011128:	6054      	str	r4, [r2, #4]
 801112a:	e7ca      	b.n	80110c2 <_free_r+0x26>
 801112c:	b003      	add	sp, #12
 801112e:	bd30      	pop	{r4, r5, pc}
 8011130:	24000c90 	.word	0x24000c90

08011134 <__sfputc_r>:
 8011134:	6893      	ldr	r3, [r2, #8]
 8011136:	3b01      	subs	r3, #1
 8011138:	2b00      	cmp	r3, #0
 801113a:	b410      	push	{r4}
 801113c:	6093      	str	r3, [r2, #8]
 801113e:	da08      	bge.n	8011152 <__sfputc_r+0x1e>
 8011140:	6994      	ldr	r4, [r2, #24]
 8011142:	42a3      	cmp	r3, r4
 8011144:	db01      	blt.n	801114a <__sfputc_r+0x16>
 8011146:	290a      	cmp	r1, #10
 8011148:	d103      	bne.n	8011152 <__sfputc_r+0x1e>
 801114a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801114e:	f000 badf 	b.w	8011710 <__swbuf_r>
 8011152:	6813      	ldr	r3, [r2, #0]
 8011154:	1c58      	adds	r0, r3, #1
 8011156:	6010      	str	r0, [r2, #0]
 8011158:	7019      	strb	r1, [r3, #0]
 801115a:	4608      	mov	r0, r1
 801115c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011160:	4770      	bx	lr

08011162 <__sfputs_r>:
 8011162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011164:	4606      	mov	r6, r0
 8011166:	460f      	mov	r7, r1
 8011168:	4614      	mov	r4, r2
 801116a:	18d5      	adds	r5, r2, r3
 801116c:	42ac      	cmp	r4, r5
 801116e:	d101      	bne.n	8011174 <__sfputs_r+0x12>
 8011170:	2000      	movs	r0, #0
 8011172:	e007      	b.n	8011184 <__sfputs_r+0x22>
 8011174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011178:	463a      	mov	r2, r7
 801117a:	4630      	mov	r0, r6
 801117c:	f7ff ffda 	bl	8011134 <__sfputc_r>
 8011180:	1c43      	adds	r3, r0, #1
 8011182:	d1f3      	bne.n	801116c <__sfputs_r+0xa>
 8011184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011188 <_vfiprintf_r>:
 8011188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118c:	460d      	mov	r5, r1
 801118e:	b09d      	sub	sp, #116	; 0x74
 8011190:	4614      	mov	r4, r2
 8011192:	4698      	mov	r8, r3
 8011194:	4606      	mov	r6, r0
 8011196:	b118      	cbz	r0, 80111a0 <_vfiprintf_r+0x18>
 8011198:	6983      	ldr	r3, [r0, #24]
 801119a:	b90b      	cbnz	r3, 80111a0 <_vfiprintf_r+0x18>
 801119c:	f000 fc9a 	bl	8011ad4 <__sinit>
 80111a0:	4b89      	ldr	r3, [pc, #548]	; (80113c8 <_vfiprintf_r+0x240>)
 80111a2:	429d      	cmp	r5, r3
 80111a4:	d11b      	bne.n	80111de <_vfiprintf_r+0x56>
 80111a6:	6875      	ldr	r5, [r6, #4]
 80111a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111aa:	07d9      	lsls	r1, r3, #31
 80111ac:	d405      	bmi.n	80111ba <_vfiprintf_r+0x32>
 80111ae:	89ab      	ldrh	r3, [r5, #12]
 80111b0:	059a      	lsls	r2, r3, #22
 80111b2:	d402      	bmi.n	80111ba <_vfiprintf_r+0x32>
 80111b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111b6:	f000 fd2b 	bl	8011c10 <__retarget_lock_acquire_recursive>
 80111ba:	89ab      	ldrh	r3, [r5, #12]
 80111bc:	071b      	lsls	r3, r3, #28
 80111be:	d501      	bpl.n	80111c4 <_vfiprintf_r+0x3c>
 80111c0:	692b      	ldr	r3, [r5, #16]
 80111c2:	b9eb      	cbnz	r3, 8011200 <_vfiprintf_r+0x78>
 80111c4:	4629      	mov	r1, r5
 80111c6:	4630      	mov	r0, r6
 80111c8:	f000 faf4 	bl	80117b4 <__swsetup_r>
 80111cc:	b1c0      	cbz	r0, 8011200 <_vfiprintf_r+0x78>
 80111ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111d0:	07dc      	lsls	r4, r3, #31
 80111d2:	d50e      	bpl.n	80111f2 <_vfiprintf_r+0x6a>
 80111d4:	f04f 30ff 	mov.w	r0, #4294967295
 80111d8:	b01d      	add	sp, #116	; 0x74
 80111da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111de:	4b7b      	ldr	r3, [pc, #492]	; (80113cc <_vfiprintf_r+0x244>)
 80111e0:	429d      	cmp	r5, r3
 80111e2:	d101      	bne.n	80111e8 <_vfiprintf_r+0x60>
 80111e4:	68b5      	ldr	r5, [r6, #8]
 80111e6:	e7df      	b.n	80111a8 <_vfiprintf_r+0x20>
 80111e8:	4b79      	ldr	r3, [pc, #484]	; (80113d0 <_vfiprintf_r+0x248>)
 80111ea:	429d      	cmp	r5, r3
 80111ec:	bf08      	it	eq
 80111ee:	68f5      	ldreq	r5, [r6, #12]
 80111f0:	e7da      	b.n	80111a8 <_vfiprintf_r+0x20>
 80111f2:	89ab      	ldrh	r3, [r5, #12]
 80111f4:	0598      	lsls	r0, r3, #22
 80111f6:	d4ed      	bmi.n	80111d4 <_vfiprintf_r+0x4c>
 80111f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111fa:	f000 fd0a 	bl	8011c12 <__retarget_lock_release_recursive>
 80111fe:	e7e9      	b.n	80111d4 <_vfiprintf_r+0x4c>
 8011200:	2300      	movs	r3, #0
 8011202:	9309      	str	r3, [sp, #36]	; 0x24
 8011204:	2320      	movs	r3, #32
 8011206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801120a:	f8cd 800c 	str.w	r8, [sp, #12]
 801120e:	2330      	movs	r3, #48	; 0x30
 8011210:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80113d4 <_vfiprintf_r+0x24c>
 8011214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011218:	f04f 0901 	mov.w	r9, #1
 801121c:	4623      	mov	r3, r4
 801121e:	469a      	mov	sl, r3
 8011220:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011224:	b10a      	cbz	r2, 801122a <_vfiprintf_r+0xa2>
 8011226:	2a25      	cmp	r2, #37	; 0x25
 8011228:	d1f9      	bne.n	801121e <_vfiprintf_r+0x96>
 801122a:	ebba 0b04 	subs.w	fp, sl, r4
 801122e:	d00b      	beq.n	8011248 <_vfiprintf_r+0xc0>
 8011230:	465b      	mov	r3, fp
 8011232:	4622      	mov	r2, r4
 8011234:	4629      	mov	r1, r5
 8011236:	4630      	mov	r0, r6
 8011238:	f7ff ff93 	bl	8011162 <__sfputs_r>
 801123c:	3001      	adds	r0, #1
 801123e:	f000 80aa 	beq.w	8011396 <_vfiprintf_r+0x20e>
 8011242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011244:	445a      	add	r2, fp
 8011246:	9209      	str	r2, [sp, #36]	; 0x24
 8011248:	f89a 3000 	ldrb.w	r3, [sl]
 801124c:	2b00      	cmp	r3, #0
 801124e:	f000 80a2 	beq.w	8011396 <_vfiprintf_r+0x20e>
 8011252:	2300      	movs	r3, #0
 8011254:	f04f 32ff 	mov.w	r2, #4294967295
 8011258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801125c:	f10a 0a01 	add.w	sl, sl, #1
 8011260:	9304      	str	r3, [sp, #16]
 8011262:	9307      	str	r3, [sp, #28]
 8011264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011268:	931a      	str	r3, [sp, #104]	; 0x68
 801126a:	4654      	mov	r4, sl
 801126c:	2205      	movs	r2, #5
 801126e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011272:	4858      	ldr	r0, [pc, #352]	; (80113d4 <_vfiprintf_r+0x24c>)
 8011274:	f7ef f83c 	bl	80002f0 <memchr>
 8011278:	9a04      	ldr	r2, [sp, #16]
 801127a:	b9d8      	cbnz	r0, 80112b4 <_vfiprintf_r+0x12c>
 801127c:	06d1      	lsls	r1, r2, #27
 801127e:	bf44      	itt	mi
 8011280:	2320      	movmi	r3, #32
 8011282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011286:	0713      	lsls	r3, r2, #28
 8011288:	bf44      	itt	mi
 801128a:	232b      	movmi	r3, #43	; 0x2b
 801128c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011290:	f89a 3000 	ldrb.w	r3, [sl]
 8011294:	2b2a      	cmp	r3, #42	; 0x2a
 8011296:	d015      	beq.n	80112c4 <_vfiprintf_r+0x13c>
 8011298:	9a07      	ldr	r2, [sp, #28]
 801129a:	4654      	mov	r4, sl
 801129c:	2000      	movs	r0, #0
 801129e:	f04f 0c0a 	mov.w	ip, #10
 80112a2:	4621      	mov	r1, r4
 80112a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112a8:	3b30      	subs	r3, #48	; 0x30
 80112aa:	2b09      	cmp	r3, #9
 80112ac:	d94e      	bls.n	801134c <_vfiprintf_r+0x1c4>
 80112ae:	b1b0      	cbz	r0, 80112de <_vfiprintf_r+0x156>
 80112b0:	9207      	str	r2, [sp, #28]
 80112b2:	e014      	b.n	80112de <_vfiprintf_r+0x156>
 80112b4:	eba0 0308 	sub.w	r3, r0, r8
 80112b8:	fa09 f303 	lsl.w	r3, r9, r3
 80112bc:	4313      	orrs	r3, r2
 80112be:	9304      	str	r3, [sp, #16]
 80112c0:	46a2      	mov	sl, r4
 80112c2:	e7d2      	b.n	801126a <_vfiprintf_r+0xe2>
 80112c4:	9b03      	ldr	r3, [sp, #12]
 80112c6:	1d19      	adds	r1, r3, #4
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	9103      	str	r1, [sp, #12]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	bfbb      	ittet	lt
 80112d0:	425b      	neglt	r3, r3
 80112d2:	f042 0202 	orrlt.w	r2, r2, #2
 80112d6:	9307      	strge	r3, [sp, #28]
 80112d8:	9307      	strlt	r3, [sp, #28]
 80112da:	bfb8      	it	lt
 80112dc:	9204      	strlt	r2, [sp, #16]
 80112de:	7823      	ldrb	r3, [r4, #0]
 80112e0:	2b2e      	cmp	r3, #46	; 0x2e
 80112e2:	d10c      	bne.n	80112fe <_vfiprintf_r+0x176>
 80112e4:	7863      	ldrb	r3, [r4, #1]
 80112e6:	2b2a      	cmp	r3, #42	; 0x2a
 80112e8:	d135      	bne.n	8011356 <_vfiprintf_r+0x1ce>
 80112ea:	9b03      	ldr	r3, [sp, #12]
 80112ec:	1d1a      	adds	r2, r3, #4
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	9203      	str	r2, [sp, #12]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	bfb8      	it	lt
 80112f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80112fa:	3402      	adds	r4, #2
 80112fc:	9305      	str	r3, [sp, #20]
 80112fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113e4 <_vfiprintf_r+0x25c>
 8011302:	7821      	ldrb	r1, [r4, #0]
 8011304:	2203      	movs	r2, #3
 8011306:	4650      	mov	r0, sl
 8011308:	f7ee fff2 	bl	80002f0 <memchr>
 801130c:	b140      	cbz	r0, 8011320 <_vfiprintf_r+0x198>
 801130e:	2340      	movs	r3, #64	; 0x40
 8011310:	eba0 000a 	sub.w	r0, r0, sl
 8011314:	fa03 f000 	lsl.w	r0, r3, r0
 8011318:	9b04      	ldr	r3, [sp, #16]
 801131a:	4303      	orrs	r3, r0
 801131c:	3401      	adds	r4, #1
 801131e:	9304      	str	r3, [sp, #16]
 8011320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011324:	482c      	ldr	r0, [pc, #176]	; (80113d8 <_vfiprintf_r+0x250>)
 8011326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801132a:	2206      	movs	r2, #6
 801132c:	f7ee ffe0 	bl	80002f0 <memchr>
 8011330:	2800      	cmp	r0, #0
 8011332:	d03f      	beq.n	80113b4 <_vfiprintf_r+0x22c>
 8011334:	4b29      	ldr	r3, [pc, #164]	; (80113dc <_vfiprintf_r+0x254>)
 8011336:	bb1b      	cbnz	r3, 8011380 <_vfiprintf_r+0x1f8>
 8011338:	9b03      	ldr	r3, [sp, #12]
 801133a:	3307      	adds	r3, #7
 801133c:	f023 0307 	bic.w	r3, r3, #7
 8011340:	3308      	adds	r3, #8
 8011342:	9303      	str	r3, [sp, #12]
 8011344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011346:	443b      	add	r3, r7
 8011348:	9309      	str	r3, [sp, #36]	; 0x24
 801134a:	e767      	b.n	801121c <_vfiprintf_r+0x94>
 801134c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011350:	460c      	mov	r4, r1
 8011352:	2001      	movs	r0, #1
 8011354:	e7a5      	b.n	80112a2 <_vfiprintf_r+0x11a>
 8011356:	2300      	movs	r3, #0
 8011358:	3401      	adds	r4, #1
 801135a:	9305      	str	r3, [sp, #20]
 801135c:	4619      	mov	r1, r3
 801135e:	f04f 0c0a 	mov.w	ip, #10
 8011362:	4620      	mov	r0, r4
 8011364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011368:	3a30      	subs	r2, #48	; 0x30
 801136a:	2a09      	cmp	r2, #9
 801136c:	d903      	bls.n	8011376 <_vfiprintf_r+0x1ee>
 801136e:	2b00      	cmp	r3, #0
 8011370:	d0c5      	beq.n	80112fe <_vfiprintf_r+0x176>
 8011372:	9105      	str	r1, [sp, #20]
 8011374:	e7c3      	b.n	80112fe <_vfiprintf_r+0x176>
 8011376:	fb0c 2101 	mla	r1, ip, r1, r2
 801137a:	4604      	mov	r4, r0
 801137c:	2301      	movs	r3, #1
 801137e:	e7f0      	b.n	8011362 <_vfiprintf_r+0x1da>
 8011380:	ab03      	add	r3, sp, #12
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	462a      	mov	r2, r5
 8011386:	4b16      	ldr	r3, [pc, #88]	; (80113e0 <_vfiprintf_r+0x258>)
 8011388:	a904      	add	r1, sp, #16
 801138a:	4630      	mov	r0, r6
 801138c:	f3af 8000 	nop.w
 8011390:	4607      	mov	r7, r0
 8011392:	1c78      	adds	r0, r7, #1
 8011394:	d1d6      	bne.n	8011344 <_vfiprintf_r+0x1bc>
 8011396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011398:	07d9      	lsls	r1, r3, #31
 801139a:	d405      	bmi.n	80113a8 <_vfiprintf_r+0x220>
 801139c:	89ab      	ldrh	r3, [r5, #12]
 801139e:	059a      	lsls	r2, r3, #22
 80113a0:	d402      	bmi.n	80113a8 <_vfiprintf_r+0x220>
 80113a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113a4:	f000 fc35 	bl	8011c12 <__retarget_lock_release_recursive>
 80113a8:	89ab      	ldrh	r3, [r5, #12]
 80113aa:	065b      	lsls	r3, r3, #25
 80113ac:	f53f af12 	bmi.w	80111d4 <_vfiprintf_r+0x4c>
 80113b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113b2:	e711      	b.n	80111d8 <_vfiprintf_r+0x50>
 80113b4:	ab03      	add	r3, sp, #12
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	462a      	mov	r2, r5
 80113ba:	4b09      	ldr	r3, [pc, #36]	; (80113e0 <_vfiprintf_r+0x258>)
 80113bc:	a904      	add	r1, sp, #16
 80113be:	4630      	mov	r0, r6
 80113c0:	f000 f880 	bl	80114c4 <_printf_i>
 80113c4:	e7e4      	b.n	8011390 <_vfiprintf_r+0x208>
 80113c6:	bf00      	nop
 80113c8:	08012bec 	.word	0x08012bec
 80113cc:	08012c0c 	.word	0x08012c0c
 80113d0:	08012bcc 	.word	0x08012bcc
 80113d4:	08012b99 	.word	0x08012b99
 80113d8:	08012ba3 	.word	0x08012ba3
 80113dc:	00000000 	.word	0x00000000
 80113e0:	08011163 	.word	0x08011163
 80113e4:	08012b9f 	.word	0x08012b9f

080113e8 <_printf_common>:
 80113e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113ec:	4616      	mov	r6, r2
 80113ee:	4699      	mov	r9, r3
 80113f0:	688a      	ldr	r2, [r1, #8]
 80113f2:	690b      	ldr	r3, [r1, #16]
 80113f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113f8:	4293      	cmp	r3, r2
 80113fa:	bfb8      	it	lt
 80113fc:	4613      	movlt	r3, r2
 80113fe:	6033      	str	r3, [r6, #0]
 8011400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011404:	4607      	mov	r7, r0
 8011406:	460c      	mov	r4, r1
 8011408:	b10a      	cbz	r2, 801140e <_printf_common+0x26>
 801140a:	3301      	adds	r3, #1
 801140c:	6033      	str	r3, [r6, #0]
 801140e:	6823      	ldr	r3, [r4, #0]
 8011410:	0699      	lsls	r1, r3, #26
 8011412:	bf42      	ittt	mi
 8011414:	6833      	ldrmi	r3, [r6, #0]
 8011416:	3302      	addmi	r3, #2
 8011418:	6033      	strmi	r3, [r6, #0]
 801141a:	6825      	ldr	r5, [r4, #0]
 801141c:	f015 0506 	ands.w	r5, r5, #6
 8011420:	d106      	bne.n	8011430 <_printf_common+0x48>
 8011422:	f104 0a19 	add.w	sl, r4, #25
 8011426:	68e3      	ldr	r3, [r4, #12]
 8011428:	6832      	ldr	r2, [r6, #0]
 801142a:	1a9b      	subs	r3, r3, r2
 801142c:	42ab      	cmp	r3, r5
 801142e:	dc26      	bgt.n	801147e <_printf_common+0x96>
 8011430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011434:	1e13      	subs	r3, r2, #0
 8011436:	6822      	ldr	r2, [r4, #0]
 8011438:	bf18      	it	ne
 801143a:	2301      	movne	r3, #1
 801143c:	0692      	lsls	r2, r2, #26
 801143e:	d42b      	bmi.n	8011498 <_printf_common+0xb0>
 8011440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011444:	4649      	mov	r1, r9
 8011446:	4638      	mov	r0, r7
 8011448:	47c0      	blx	r8
 801144a:	3001      	adds	r0, #1
 801144c:	d01e      	beq.n	801148c <_printf_common+0xa4>
 801144e:	6823      	ldr	r3, [r4, #0]
 8011450:	68e5      	ldr	r5, [r4, #12]
 8011452:	6832      	ldr	r2, [r6, #0]
 8011454:	f003 0306 	and.w	r3, r3, #6
 8011458:	2b04      	cmp	r3, #4
 801145a:	bf08      	it	eq
 801145c:	1aad      	subeq	r5, r5, r2
 801145e:	68a3      	ldr	r3, [r4, #8]
 8011460:	6922      	ldr	r2, [r4, #16]
 8011462:	bf0c      	ite	eq
 8011464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011468:	2500      	movne	r5, #0
 801146a:	4293      	cmp	r3, r2
 801146c:	bfc4      	itt	gt
 801146e:	1a9b      	subgt	r3, r3, r2
 8011470:	18ed      	addgt	r5, r5, r3
 8011472:	2600      	movs	r6, #0
 8011474:	341a      	adds	r4, #26
 8011476:	42b5      	cmp	r5, r6
 8011478:	d11a      	bne.n	80114b0 <_printf_common+0xc8>
 801147a:	2000      	movs	r0, #0
 801147c:	e008      	b.n	8011490 <_printf_common+0xa8>
 801147e:	2301      	movs	r3, #1
 8011480:	4652      	mov	r2, sl
 8011482:	4649      	mov	r1, r9
 8011484:	4638      	mov	r0, r7
 8011486:	47c0      	blx	r8
 8011488:	3001      	adds	r0, #1
 801148a:	d103      	bne.n	8011494 <_printf_common+0xac>
 801148c:	f04f 30ff 	mov.w	r0, #4294967295
 8011490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011494:	3501      	adds	r5, #1
 8011496:	e7c6      	b.n	8011426 <_printf_common+0x3e>
 8011498:	18e1      	adds	r1, r4, r3
 801149a:	1c5a      	adds	r2, r3, #1
 801149c:	2030      	movs	r0, #48	; 0x30
 801149e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80114a2:	4422      	add	r2, r4
 80114a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80114a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80114ac:	3302      	adds	r3, #2
 80114ae:	e7c7      	b.n	8011440 <_printf_common+0x58>
 80114b0:	2301      	movs	r3, #1
 80114b2:	4622      	mov	r2, r4
 80114b4:	4649      	mov	r1, r9
 80114b6:	4638      	mov	r0, r7
 80114b8:	47c0      	blx	r8
 80114ba:	3001      	adds	r0, #1
 80114bc:	d0e6      	beq.n	801148c <_printf_common+0xa4>
 80114be:	3601      	adds	r6, #1
 80114c0:	e7d9      	b.n	8011476 <_printf_common+0x8e>
	...

080114c4 <_printf_i>:
 80114c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114c8:	7e0f      	ldrb	r7, [r1, #24]
 80114ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80114cc:	2f78      	cmp	r7, #120	; 0x78
 80114ce:	4691      	mov	r9, r2
 80114d0:	4680      	mov	r8, r0
 80114d2:	460c      	mov	r4, r1
 80114d4:	469a      	mov	sl, r3
 80114d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80114da:	d807      	bhi.n	80114ec <_printf_i+0x28>
 80114dc:	2f62      	cmp	r7, #98	; 0x62
 80114de:	d80a      	bhi.n	80114f6 <_printf_i+0x32>
 80114e0:	2f00      	cmp	r7, #0
 80114e2:	f000 80d8 	beq.w	8011696 <_printf_i+0x1d2>
 80114e6:	2f58      	cmp	r7, #88	; 0x58
 80114e8:	f000 80a3 	beq.w	8011632 <_printf_i+0x16e>
 80114ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80114f4:	e03a      	b.n	801156c <_printf_i+0xa8>
 80114f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114fa:	2b15      	cmp	r3, #21
 80114fc:	d8f6      	bhi.n	80114ec <_printf_i+0x28>
 80114fe:	a101      	add	r1, pc, #4	; (adr r1, 8011504 <_printf_i+0x40>)
 8011500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011504:	0801155d 	.word	0x0801155d
 8011508:	08011571 	.word	0x08011571
 801150c:	080114ed 	.word	0x080114ed
 8011510:	080114ed 	.word	0x080114ed
 8011514:	080114ed 	.word	0x080114ed
 8011518:	080114ed 	.word	0x080114ed
 801151c:	08011571 	.word	0x08011571
 8011520:	080114ed 	.word	0x080114ed
 8011524:	080114ed 	.word	0x080114ed
 8011528:	080114ed 	.word	0x080114ed
 801152c:	080114ed 	.word	0x080114ed
 8011530:	0801167d 	.word	0x0801167d
 8011534:	080115a1 	.word	0x080115a1
 8011538:	0801165f 	.word	0x0801165f
 801153c:	080114ed 	.word	0x080114ed
 8011540:	080114ed 	.word	0x080114ed
 8011544:	0801169f 	.word	0x0801169f
 8011548:	080114ed 	.word	0x080114ed
 801154c:	080115a1 	.word	0x080115a1
 8011550:	080114ed 	.word	0x080114ed
 8011554:	080114ed 	.word	0x080114ed
 8011558:	08011667 	.word	0x08011667
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	1d1a      	adds	r2, r3, #4
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	602a      	str	r2, [r5, #0]
 8011564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801156c:	2301      	movs	r3, #1
 801156e:	e0a3      	b.n	80116b8 <_printf_i+0x1f4>
 8011570:	6820      	ldr	r0, [r4, #0]
 8011572:	6829      	ldr	r1, [r5, #0]
 8011574:	0606      	lsls	r6, r0, #24
 8011576:	f101 0304 	add.w	r3, r1, #4
 801157a:	d50a      	bpl.n	8011592 <_printf_i+0xce>
 801157c:	680e      	ldr	r6, [r1, #0]
 801157e:	602b      	str	r3, [r5, #0]
 8011580:	2e00      	cmp	r6, #0
 8011582:	da03      	bge.n	801158c <_printf_i+0xc8>
 8011584:	232d      	movs	r3, #45	; 0x2d
 8011586:	4276      	negs	r6, r6
 8011588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801158c:	485e      	ldr	r0, [pc, #376]	; (8011708 <_printf_i+0x244>)
 801158e:	230a      	movs	r3, #10
 8011590:	e019      	b.n	80115c6 <_printf_i+0x102>
 8011592:	680e      	ldr	r6, [r1, #0]
 8011594:	602b      	str	r3, [r5, #0]
 8011596:	f010 0f40 	tst.w	r0, #64	; 0x40
 801159a:	bf18      	it	ne
 801159c:	b236      	sxthne	r6, r6
 801159e:	e7ef      	b.n	8011580 <_printf_i+0xbc>
 80115a0:	682b      	ldr	r3, [r5, #0]
 80115a2:	6820      	ldr	r0, [r4, #0]
 80115a4:	1d19      	adds	r1, r3, #4
 80115a6:	6029      	str	r1, [r5, #0]
 80115a8:	0601      	lsls	r1, r0, #24
 80115aa:	d501      	bpl.n	80115b0 <_printf_i+0xec>
 80115ac:	681e      	ldr	r6, [r3, #0]
 80115ae:	e002      	b.n	80115b6 <_printf_i+0xf2>
 80115b0:	0646      	lsls	r6, r0, #25
 80115b2:	d5fb      	bpl.n	80115ac <_printf_i+0xe8>
 80115b4:	881e      	ldrh	r6, [r3, #0]
 80115b6:	4854      	ldr	r0, [pc, #336]	; (8011708 <_printf_i+0x244>)
 80115b8:	2f6f      	cmp	r7, #111	; 0x6f
 80115ba:	bf0c      	ite	eq
 80115bc:	2308      	moveq	r3, #8
 80115be:	230a      	movne	r3, #10
 80115c0:	2100      	movs	r1, #0
 80115c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80115c6:	6865      	ldr	r5, [r4, #4]
 80115c8:	60a5      	str	r5, [r4, #8]
 80115ca:	2d00      	cmp	r5, #0
 80115cc:	bfa2      	ittt	ge
 80115ce:	6821      	ldrge	r1, [r4, #0]
 80115d0:	f021 0104 	bicge.w	r1, r1, #4
 80115d4:	6021      	strge	r1, [r4, #0]
 80115d6:	b90e      	cbnz	r6, 80115dc <_printf_i+0x118>
 80115d8:	2d00      	cmp	r5, #0
 80115da:	d04d      	beq.n	8011678 <_printf_i+0x1b4>
 80115dc:	4615      	mov	r5, r2
 80115de:	fbb6 f1f3 	udiv	r1, r6, r3
 80115e2:	fb03 6711 	mls	r7, r3, r1, r6
 80115e6:	5dc7      	ldrb	r7, [r0, r7]
 80115e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80115ec:	4637      	mov	r7, r6
 80115ee:	42bb      	cmp	r3, r7
 80115f0:	460e      	mov	r6, r1
 80115f2:	d9f4      	bls.n	80115de <_printf_i+0x11a>
 80115f4:	2b08      	cmp	r3, #8
 80115f6:	d10b      	bne.n	8011610 <_printf_i+0x14c>
 80115f8:	6823      	ldr	r3, [r4, #0]
 80115fa:	07de      	lsls	r6, r3, #31
 80115fc:	d508      	bpl.n	8011610 <_printf_i+0x14c>
 80115fe:	6923      	ldr	r3, [r4, #16]
 8011600:	6861      	ldr	r1, [r4, #4]
 8011602:	4299      	cmp	r1, r3
 8011604:	bfde      	ittt	le
 8011606:	2330      	movle	r3, #48	; 0x30
 8011608:	f805 3c01 	strble.w	r3, [r5, #-1]
 801160c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011610:	1b52      	subs	r2, r2, r5
 8011612:	6122      	str	r2, [r4, #16]
 8011614:	f8cd a000 	str.w	sl, [sp]
 8011618:	464b      	mov	r3, r9
 801161a:	aa03      	add	r2, sp, #12
 801161c:	4621      	mov	r1, r4
 801161e:	4640      	mov	r0, r8
 8011620:	f7ff fee2 	bl	80113e8 <_printf_common>
 8011624:	3001      	adds	r0, #1
 8011626:	d14c      	bne.n	80116c2 <_printf_i+0x1fe>
 8011628:	f04f 30ff 	mov.w	r0, #4294967295
 801162c:	b004      	add	sp, #16
 801162e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011632:	4835      	ldr	r0, [pc, #212]	; (8011708 <_printf_i+0x244>)
 8011634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011638:	6829      	ldr	r1, [r5, #0]
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011640:	6029      	str	r1, [r5, #0]
 8011642:	061d      	lsls	r5, r3, #24
 8011644:	d514      	bpl.n	8011670 <_printf_i+0x1ac>
 8011646:	07df      	lsls	r7, r3, #31
 8011648:	bf44      	itt	mi
 801164a:	f043 0320 	orrmi.w	r3, r3, #32
 801164e:	6023      	strmi	r3, [r4, #0]
 8011650:	b91e      	cbnz	r6, 801165a <_printf_i+0x196>
 8011652:	6823      	ldr	r3, [r4, #0]
 8011654:	f023 0320 	bic.w	r3, r3, #32
 8011658:	6023      	str	r3, [r4, #0]
 801165a:	2310      	movs	r3, #16
 801165c:	e7b0      	b.n	80115c0 <_printf_i+0xfc>
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	f043 0320 	orr.w	r3, r3, #32
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	2378      	movs	r3, #120	; 0x78
 8011668:	4828      	ldr	r0, [pc, #160]	; (801170c <_printf_i+0x248>)
 801166a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801166e:	e7e3      	b.n	8011638 <_printf_i+0x174>
 8011670:	0659      	lsls	r1, r3, #25
 8011672:	bf48      	it	mi
 8011674:	b2b6      	uxthmi	r6, r6
 8011676:	e7e6      	b.n	8011646 <_printf_i+0x182>
 8011678:	4615      	mov	r5, r2
 801167a:	e7bb      	b.n	80115f4 <_printf_i+0x130>
 801167c:	682b      	ldr	r3, [r5, #0]
 801167e:	6826      	ldr	r6, [r4, #0]
 8011680:	6961      	ldr	r1, [r4, #20]
 8011682:	1d18      	adds	r0, r3, #4
 8011684:	6028      	str	r0, [r5, #0]
 8011686:	0635      	lsls	r5, r6, #24
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	d501      	bpl.n	8011690 <_printf_i+0x1cc>
 801168c:	6019      	str	r1, [r3, #0]
 801168e:	e002      	b.n	8011696 <_printf_i+0x1d2>
 8011690:	0670      	lsls	r0, r6, #25
 8011692:	d5fb      	bpl.n	801168c <_printf_i+0x1c8>
 8011694:	8019      	strh	r1, [r3, #0]
 8011696:	2300      	movs	r3, #0
 8011698:	6123      	str	r3, [r4, #16]
 801169a:	4615      	mov	r5, r2
 801169c:	e7ba      	b.n	8011614 <_printf_i+0x150>
 801169e:	682b      	ldr	r3, [r5, #0]
 80116a0:	1d1a      	adds	r2, r3, #4
 80116a2:	602a      	str	r2, [r5, #0]
 80116a4:	681d      	ldr	r5, [r3, #0]
 80116a6:	6862      	ldr	r2, [r4, #4]
 80116a8:	2100      	movs	r1, #0
 80116aa:	4628      	mov	r0, r5
 80116ac:	f7ee fe20 	bl	80002f0 <memchr>
 80116b0:	b108      	cbz	r0, 80116b6 <_printf_i+0x1f2>
 80116b2:	1b40      	subs	r0, r0, r5
 80116b4:	6060      	str	r0, [r4, #4]
 80116b6:	6863      	ldr	r3, [r4, #4]
 80116b8:	6123      	str	r3, [r4, #16]
 80116ba:	2300      	movs	r3, #0
 80116bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116c0:	e7a8      	b.n	8011614 <_printf_i+0x150>
 80116c2:	6923      	ldr	r3, [r4, #16]
 80116c4:	462a      	mov	r2, r5
 80116c6:	4649      	mov	r1, r9
 80116c8:	4640      	mov	r0, r8
 80116ca:	47d0      	blx	sl
 80116cc:	3001      	adds	r0, #1
 80116ce:	d0ab      	beq.n	8011628 <_printf_i+0x164>
 80116d0:	6823      	ldr	r3, [r4, #0]
 80116d2:	079b      	lsls	r3, r3, #30
 80116d4:	d413      	bmi.n	80116fe <_printf_i+0x23a>
 80116d6:	68e0      	ldr	r0, [r4, #12]
 80116d8:	9b03      	ldr	r3, [sp, #12]
 80116da:	4298      	cmp	r0, r3
 80116dc:	bfb8      	it	lt
 80116de:	4618      	movlt	r0, r3
 80116e0:	e7a4      	b.n	801162c <_printf_i+0x168>
 80116e2:	2301      	movs	r3, #1
 80116e4:	4632      	mov	r2, r6
 80116e6:	4649      	mov	r1, r9
 80116e8:	4640      	mov	r0, r8
 80116ea:	47d0      	blx	sl
 80116ec:	3001      	adds	r0, #1
 80116ee:	d09b      	beq.n	8011628 <_printf_i+0x164>
 80116f0:	3501      	adds	r5, #1
 80116f2:	68e3      	ldr	r3, [r4, #12]
 80116f4:	9903      	ldr	r1, [sp, #12]
 80116f6:	1a5b      	subs	r3, r3, r1
 80116f8:	42ab      	cmp	r3, r5
 80116fa:	dcf2      	bgt.n	80116e2 <_printf_i+0x21e>
 80116fc:	e7eb      	b.n	80116d6 <_printf_i+0x212>
 80116fe:	2500      	movs	r5, #0
 8011700:	f104 0619 	add.w	r6, r4, #25
 8011704:	e7f5      	b.n	80116f2 <_printf_i+0x22e>
 8011706:	bf00      	nop
 8011708:	08012baa 	.word	0x08012baa
 801170c:	08012bbb 	.word	0x08012bbb

08011710 <__swbuf_r>:
 8011710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011712:	460e      	mov	r6, r1
 8011714:	4614      	mov	r4, r2
 8011716:	4605      	mov	r5, r0
 8011718:	b118      	cbz	r0, 8011722 <__swbuf_r+0x12>
 801171a:	6983      	ldr	r3, [r0, #24]
 801171c:	b90b      	cbnz	r3, 8011722 <__swbuf_r+0x12>
 801171e:	f000 f9d9 	bl	8011ad4 <__sinit>
 8011722:	4b21      	ldr	r3, [pc, #132]	; (80117a8 <__swbuf_r+0x98>)
 8011724:	429c      	cmp	r4, r3
 8011726:	d12b      	bne.n	8011780 <__swbuf_r+0x70>
 8011728:	686c      	ldr	r4, [r5, #4]
 801172a:	69a3      	ldr	r3, [r4, #24]
 801172c:	60a3      	str	r3, [r4, #8]
 801172e:	89a3      	ldrh	r3, [r4, #12]
 8011730:	071a      	lsls	r2, r3, #28
 8011732:	d52f      	bpl.n	8011794 <__swbuf_r+0x84>
 8011734:	6923      	ldr	r3, [r4, #16]
 8011736:	b36b      	cbz	r3, 8011794 <__swbuf_r+0x84>
 8011738:	6923      	ldr	r3, [r4, #16]
 801173a:	6820      	ldr	r0, [r4, #0]
 801173c:	1ac0      	subs	r0, r0, r3
 801173e:	6963      	ldr	r3, [r4, #20]
 8011740:	b2f6      	uxtb	r6, r6
 8011742:	4283      	cmp	r3, r0
 8011744:	4637      	mov	r7, r6
 8011746:	dc04      	bgt.n	8011752 <__swbuf_r+0x42>
 8011748:	4621      	mov	r1, r4
 801174a:	4628      	mov	r0, r5
 801174c:	f000 f92e 	bl	80119ac <_fflush_r>
 8011750:	bb30      	cbnz	r0, 80117a0 <__swbuf_r+0x90>
 8011752:	68a3      	ldr	r3, [r4, #8]
 8011754:	3b01      	subs	r3, #1
 8011756:	60a3      	str	r3, [r4, #8]
 8011758:	6823      	ldr	r3, [r4, #0]
 801175a:	1c5a      	adds	r2, r3, #1
 801175c:	6022      	str	r2, [r4, #0]
 801175e:	701e      	strb	r6, [r3, #0]
 8011760:	6963      	ldr	r3, [r4, #20]
 8011762:	3001      	adds	r0, #1
 8011764:	4283      	cmp	r3, r0
 8011766:	d004      	beq.n	8011772 <__swbuf_r+0x62>
 8011768:	89a3      	ldrh	r3, [r4, #12]
 801176a:	07db      	lsls	r3, r3, #31
 801176c:	d506      	bpl.n	801177c <__swbuf_r+0x6c>
 801176e:	2e0a      	cmp	r6, #10
 8011770:	d104      	bne.n	801177c <__swbuf_r+0x6c>
 8011772:	4621      	mov	r1, r4
 8011774:	4628      	mov	r0, r5
 8011776:	f000 f919 	bl	80119ac <_fflush_r>
 801177a:	b988      	cbnz	r0, 80117a0 <__swbuf_r+0x90>
 801177c:	4638      	mov	r0, r7
 801177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011780:	4b0a      	ldr	r3, [pc, #40]	; (80117ac <__swbuf_r+0x9c>)
 8011782:	429c      	cmp	r4, r3
 8011784:	d101      	bne.n	801178a <__swbuf_r+0x7a>
 8011786:	68ac      	ldr	r4, [r5, #8]
 8011788:	e7cf      	b.n	801172a <__swbuf_r+0x1a>
 801178a:	4b09      	ldr	r3, [pc, #36]	; (80117b0 <__swbuf_r+0xa0>)
 801178c:	429c      	cmp	r4, r3
 801178e:	bf08      	it	eq
 8011790:	68ec      	ldreq	r4, [r5, #12]
 8011792:	e7ca      	b.n	801172a <__swbuf_r+0x1a>
 8011794:	4621      	mov	r1, r4
 8011796:	4628      	mov	r0, r5
 8011798:	f000 f80c 	bl	80117b4 <__swsetup_r>
 801179c:	2800      	cmp	r0, #0
 801179e:	d0cb      	beq.n	8011738 <__swbuf_r+0x28>
 80117a0:	f04f 37ff 	mov.w	r7, #4294967295
 80117a4:	e7ea      	b.n	801177c <__swbuf_r+0x6c>
 80117a6:	bf00      	nop
 80117a8:	08012bec 	.word	0x08012bec
 80117ac:	08012c0c 	.word	0x08012c0c
 80117b0:	08012bcc 	.word	0x08012bcc

080117b4 <__swsetup_r>:
 80117b4:	4b32      	ldr	r3, [pc, #200]	; (8011880 <__swsetup_r+0xcc>)
 80117b6:	b570      	push	{r4, r5, r6, lr}
 80117b8:	681d      	ldr	r5, [r3, #0]
 80117ba:	4606      	mov	r6, r0
 80117bc:	460c      	mov	r4, r1
 80117be:	b125      	cbz	r5, 80117ca <__swsetup_r+0x16>
 80117c0:	69ab      	ldr	r3, [r5, #24]
 80117c2:	b913      	cbnz	r3, 80117ca <__swsetup_r+0x16>
 80117c4:	4628      	mov	r0, r5
 80117c6:	f000 f985 	bl	8011ad4 <__sinit>
 80117ca:	4b2e      	ldr	r3, [pc, #184]	; (8011884 <__swsetup_r+0xd0>)
 80117cc:	429c      	cmp	r4, r3
 80117ce:	d10f      	bne.n	80117f0 <__swsetup_r+0x3c>
 80117d0:	686c      	ldr	r4, [r5, #4]
 80117d2:	89a3      	ldrh	r3, [r4, #12]
 80117d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117d8:	0719      	lsls	r1, r3, #28
 80117da:	d42c      	bmi.n	8011836 <__swsetup_r+0x82>
 80117dc:	06dd      	lsls	r5, r3, #27
 80117de:	d411      	bmi.n	8011804 <__swsetup_r+0x50>
 80117e0:	2309      	movs	r3, #9
 80117e2:	6033      	str	r3, [r6, #0]
 80117e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80117e8:	81a3      	strh	r3, [r4, #12]
 80117ea:	f04f 30ff 	mov.w	r0, #4294967295
 80117ee:	e03e      	b.n	801186e <__swsetup_r+0xba>
 80117f0:	4b25      	ldr	r3, [pc, #148]	; (8011888 <__swsetup_r+0xd4>)
 80117f2:	429c      	cmp	r4, r3
 80117f4:	d101      	bne.n	80117fa <__swsetup_r+0x46>
 80117f6:	68ac      	ldr	r4, [r5, #8]
 80117f8:	e7eb      	b.n	80117d2 <__swsetup_r+0x1e>
 80117fa:	4b24      	ldr	r3, [pc, #144]	; (801188c <__swsetup_r+0xd8>)
 80117fc:	429c      	cmp	r4, r3
 80117fe:	bf08      	it	eq
 8011800:	68ec      	ldreq	r4, [r5, #12]
 8011802:	e7e6      	b.n	80117d2 <__swsetup_r+0x1e>
 8011804:	0758      	lsls	r0, r3, #29
 8011806:	d512      	bpl.n	801182e <__swsetup_r+0x7a>
 8011808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801180a:	b141      	cbz	r1, 801181e <__swsetup_r+0x6a>
 801180c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011810:	4299      	cmp	r1, r3
 8011812:	d002      	beq.n	801181a <__swsetup_r+0x66>
 8011814:	4630      	mov	r0, r6
 8011816:	f7ff fc41 	bl	801109c <_free_r>
 801181a:	2300      	movs	r3, #0
 801181c:	6363      	str	r3, [r4, #52]	; 0x34
 801181e:	89a3      	ldrh	r3, [r4, #12]
 8011820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011824:	81a3      	strh	r3, [r4, #12]
 8011826:	2300      	movs	r3, #0
 8011828:	6063      	str	r3, [r4, #4]
 801182a:	6923      	ldr	r3, [r4, #16]
 801182c:	6023      	str	r3, [r4, #0]
 801182e:	89a3      	ldrh	r3, [r4, #12]
 8011830:	f043 0308 	orr.w	r3, r3, #8
 8011834:	81a3      	strh	r3, [r4, #12]
 8011836:	6923      	ldr	r3, [r4, #16]
 8011838:	b94b      	cbnz	r3, 801184e <__swsetup_r+0x9a>
 801183a:	89a3      	ldrh	r3, [r4, #12]
 801183c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011844:	d003      	beq.n	801184e <__swsetup_r+0x9a>
 8011846:	4621      	mov	r1, r4
 8011848:	4630      	mov	r0, r6
 801184a:	f000 fa09 	bl	8011c60 <__smakebuf_r>
 801184e:	89a0      	ldrh	r0, [r4, #12]
 8011850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011854:	f010 0301 	ands.w	r3, r0, #1
 8011858:	d00a      	beq.n	8011870 <__swsetup_r+0xbc>
 801185a:	2300      	movs	r3, #0
 801185c:	60a3      	str	r3, [r4, #8]
 801185e:	6963      	ldr	r3, [r4, #20]
 8011860:	425b      	negs	r3, r3
 8011862:	61a3      	str	r3, [r4, #24]
 8011864:	6923      	ldr	r3, [r4, #16]
 8011866:	b943      	cbnz	r3, 801187a <__swsetup_r+0xc6>
 8011868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801186c:	d1ba      	bne.n	80117e4 <__swsetup_r+0x30>
 801186e:	bd70      	pop	{r4, r5, r6, pc}
 8011870:	0781      	lsls	r1, r0, #30
 8011872:	bf58      	it	pl
 8011874:	6963      	ldrpl	r3, [r4, #20]
 8011876:	60a3      	str	r3, [r4, #8]
 8011878:	e7f4      	b.n	8011864 <__swsetup_r+0xb0>
 801187a:	2000      	movs	r0, #0
 801187c:	e7f7      	b.n	801186e <__swsetup_r+0xba>
 801187e:	bf00      	nop
 8011880:	24000100 	.word	0x24000100
 8011884:	08012bec 	.word	0x08012bec
 8011888:	08012c0c 	.word	0x08012c0c
 801188c:	08012bcc 	.word	0x08012bcc

08011890 <abort>:
 8011890:	b508      	push	{r3, lr}
 8011892:	2006      	movs	r0, #6
 8011894:	f000 fa4c 	bl	8011d30 <raise>
 8011898:	2001      	movs	r0, #1
 801189a:	f7f2 fb65 	bl	8003f68 <_exit>
	...

080118a0 <__sflush_r>:
 80118a0:	898a      	ldrh	r2, [r1, #12]
 80118a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a6:	4605      	mov	r5, r0
 80118a8:	0710      	lsls	r0, r2, #28
 80118aa:	460c      	mov	r4, r1
 80118ac:	d458      	bmi.n	8011960 <__sflush_r+0xc0>
 80118ae:	684b      	ldr	r3, [r1, #4]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	dc05      	bgt.n	80118c0 <__sflush_r+0x20>
 80118b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	dc02      	bgt.n	80118c0 <__sflush_r+0x20>
 80118ba:	2000      	movs	r0, #0
 80118bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118c2:	2e00      	cmp	r6, #0
 80118c4:	d0f9      	beq.n	80118ba <__sflush_r+0x1a>
 80118c6:	2300      	movs	r3, #0
 80118c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80118cc:	682f      	ldr	r7, [r5, #0]
 80118ce:	602b      	str	r3, [r5, #0]
 80118d0:	d032      	beq.n	8011938 <__sflush_r+0x98>
 80118d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80118d4:	89a3      	ldrh	r3, [r4, #12]
 80118d6:	075a      	lsls	r2, r3, #29
 80118d8:	d505      	bpl.n	80118e6 <__sflush_r+0x46>
 80118da:	6863      	ldr	r3, [r4, #4]
 80118dc:	1ac0      	subs	r0, r0, r3
 80118de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118e0:	b10b      	cbz	r3, 80118e6 <__sflush_r+0x46>
 80118e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80118e4:	1ac0      	subs	r0, r0, r3
 80118e6:	2300      	movs	r3, #0
 80118e8:	4602      	mov	r2, r0
 80118ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118ec:	6a21      	ldr	r1, [r4, #32]
 80118ee:	4628      	mov	r0, r5
 80118f0:	47b0      	blx	r6
 80118f2:	1c43      	adds	r3, r0, #1
 80118f4:	89a3      	ldrh	r3, [r4, #12]
 80118f6:	d106      	bne.n	8011906 <__sflush_r+0x66>
 80118f8:	6829      	ldr	r1, [r5, #0]
 80118fa:	291d      	cmp	r1, #29
 80118fc:	d82c      	bhi.n	8011958 <__sflush_r+0xb8>
 80118fe:	4a2a      	ldr	r2, [pc, #168]	; (80119a8 <__sflush_r+0x108>)
 8011900:	40ca      	lsrs	r2, r1
 8011902:	07d6      	lsls	r6, r2, #31
 8011904:	d528      	bpl.n	8011958 <__sflush_r+0xb8>
 8011906:	2200      	movs	r2, #0
 8011908:	6062      	str	r2, [r4, #4]
 801190a:	04d9      	lsls	r1, r3, #19
 801190c:	6922      	ldr	r2, [r4, #16]
 801190e:	6022      	str	r2, [r4, #0]
 8011910:	d504      	bpl.n	801191c <__sflush_r+0x7c>
 8011912:	1c42      	adds	r2, r0, #1
 8011914:	d101      	bne.n	801191a <__sflush_r+0x7a>
 8011916:	682b      	ldr	r3, [r5, #0]
 8011918:	b903      	cbnz	r3, 801191c <__sflush_r+0x7c>
 801191a:	6560      	str	r0, [r4, #84]	; 0x54
 801191c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801191e:	602f      	str	r7, [r5, #0]
 8011920:	2900      	cmp	r1, #0
 8011922:	d0ca      	beq.n	80118ba <__sflush_r+0x1a>
 8011924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011928:	4299      	cmp	r1, r3
 801192a:	d002      	beq.n	8011932 <__sflush_r+0x92>
 801192c:	4628      	mov	r0, r5
 801192e:	f7ff fbb5 	bl	801109c <_free_r>
 8011932:	2000      	movs	r0, #0
 8011934:	6360      	str	r0, [r4, #52]	; 0x34
 8011936:	e7c1      	b.n	80118bc <__sflush_r+0x1c>
 8011938:	6a21      	ldr	r1, [r4, #32]
 801193a:	2301      	movs	r3, #1
 801193c:	4628      	mov	r0, r5
 801193e:	47b0      	blx	r6
 8011940:	1c41      	adds	r1, r0, #1
 8011942:	d1c7      	bne.n	80118d4 <__sflush_r+0x34>
 8011944:	682b      	ldr	r3, [r5, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d0c4      	beq.n	80118d4 <__sflush_r+0x34>
 801194a:	2b1d      	cmp	r3, #29
 801194c:	d001      	beq.n	8011952 <__sflush_r+0xb2>
 801194e:	2b16      	cmp	r3, #22
 8011950:	d101      	bne.n	8011956 <__sflush_r+0xb6>
 8011952:	602f      	str	r7, [r5, #0]
 8011954:	e7b1      	b.n	80118ba <__sflush_r+0x1a>
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	e7ad      	b.n	80118bc <__sflush_r+0x1c>
 8011960:	690f      	ldr	r7, [r1, #16]
 8011962:	2f00      	cmp	r7, #0
 8011964:	d0a9      	beq.n	80118ba <__sflush_r+0x1a>
 8011966:	0793      	lsls	r3, r2, #30
 8011968:	680e      	ldr	r6, [r1, #0]
 801196a:	bf08      	it	eq
 801196c:	694b      	ldreq	r3, [r1, #20]
 801196e:	600f      	str	r7, [r1, #0]
 8011970:	bf18      	it	ne
 8011972:	2300      	movne	r3, #0
 8011974:	eba6 0807 	sub.w	r8, r6, r7
 8011978:	608b      	str	r3, [r1, #8]
 801197a:	f1b8 0f00 	cmp.w	r8, #0
 801197e:	dd9c      	ble.n	80118ba <__sflush_r+0x1a>
 8011980:	6a21      	ldr	r1, [r4, #32]
 8011982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011984:	4643      	mov	r3, r8
 8011986:	463a      	mov	r2, r7
 8011988:	4628      	mov	r0, r5
 801198a:	47b0      	blx	r6
 801198c:	2800      	cmp	r0, #0
 801198e:	dc06      	bgt.n	801199e <__sflush_r+0xfe>
 8011990:	89a3      	ldrh	r3, [r4, #12]
 8011992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011996:	81a3      	strh	r3, [r4, #12]
 8011998:	f04f 30ff 	mov.w	r0, #4294967295
 801199c:	e78e      	b.n	80118bc <__sflush_r+0x1c>
 801199e:	4407      	add	r7, r0
 80119a0:	eba8 0800 	sub.w	r8, r8, r0
 80119a4:	e7e9      	b.n	801197a <__sflush_r+0xda>
 80119a6:	bf00      	nop
 80119a8:	20400001 	.word	0x20400001

080119ac <_fflush_r>:
 80119ac:	b538      	push	{r3, r4, r5, lr}
 80119ae:	690b      	ldr	r3, [r1, #16]
 80119b0:	4605      	mov	r5, r0
 80119b2:	460c      	mov	r4, r1
 80119b4:	b913      	cbnz	r3, 80119bc <_fflush_r+0x10>
 80119b6:	2500      	movs	r5, #0
 80119b8:	4628      	mov	r0, r5
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	b118      	cbz	r0, 80119c6 <_fflush_r+0x1a>
 80119be:	6983      	ldr	r3, [r0, #24]
 80119c0:	b90b      	cbnz	r3, 80119c6 <_fflush_r+0x1a>
 80119c2:	f000 f887 	bl	8011ad4 <__sinit>
 80119c6:	4b14      	ldr	r3, [pc, #80]	; (8011a18 <_fflush_r+0x6c>)
 80119c8:	429c      	cmp	r4, r3
 80119ca:	d11b      	bne.n	8011a04 <_fflush_r+0x58>
 80119cc:	686c      	ldr	r4, [r5, #4]
 80119ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d0ef      	beq.n	80119b6 <_fflush_r+0xa>
 80119d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80119d8:	07d0      	lsls	r0, r2, #31
 80119da:	d404      	bmi.n	80119e6 <_fflush_r+0x3a>
 80119dc:	0599      	lsls	r1, r3, #22
 80119de:	d402      	bmi.n	80119e6 <_fflush_r+0x3a>
 80119e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119e2:	f000 f915 	bl	8011c10 <__retarget_lock_acquire_recursive>
 80119e6:	4628      	mov	r0, r5
 80119e8:	4621      	mov	r1, r4
 80119ea:	f7ff ff59 	bl	80118a0 <__sflush_r>
 80119ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119f0:	07da      	lsls	r2, r3, #31
 80119f2:	4605      	mov	r5, r0
 80119f4:	d4e0      	bmi.n	80119b8 <_fflush_r+0xc>
 80119f6:	89a3      	ldrh	r3, [r4, #12]
 80119f8:	059b      	lsls	r3, r3, #22
 80119fa:	d4dd      	bmi.n	80119b8 <_fflush_r+0xc>
 80119fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119fe:	f000 f908 	bl	8011c12 <__retarget_lock_release_recursive>
 8011a02:	e7d9      	b.n	80119b8 <_fflush_r+0xc>
 8011a04:	4b05      	ldr	r3, [pc, #20]	; (8011a1c <_fflush_r+0x70>)
 8011a06:	429c      	cmp	r4, r3
 8011a08:	d101      	bne.n	8011a0e <_fflush_r+0x62>
 8011a0a:	68ac      	ldr	r4, [r5, #8]
 8011a0c:	e7df      	b.n	80119ce <_fflush_r+0x22>
 8011a0e:	4b04      	ldr	r3, [pc, #16]	; (8011a20 <_fflush_r+0x74>)
 8011a10:	429c      	cmp	r4, r3
 8011a12:	bf08      	it	eq
 8011a14:	68ec      	ldreq	r4, [r5, #12]
 8011a16:	e7da      	b.n	80119ce <_fflush_r+0x22>
 8011a18:	08012bec 	.word	0x08012bec
 8011a1c:	08012c0c 	.word	0x08012c0c
 8011a20:	08012bcc 	.word	0x08012bcc

08011a24 <std>:
 8011a24:	2300      	movs	r3, #0
 8011a26:	b510      	push	{r4, lr}
 8011a28:	4604      	mov	r4, r0
 8011a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8011a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a32:	6083      	str	r3, [r0, #8]
 8011a34:	8181      	strh	r1, [r0, #12]
 8011a36:	6643      	str	r3, [r0, #100]	; 0x64
 8011a38:	81c2      	strh	r2, [r0, #14]
 8011a3a:	6183      	str	r3, [r0, #24]
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	2208      	movs	r2, #8
 8011a40:	305c      	adds	r0, #92	; 0x5c
 8011a42:	f7fd fbdd 	bl	800f200 <memset>
 8011a46:	4b05      	ldr	r3, [pc, #20]	; (8011a5c <std+0x38>)
 8011a48:	6263      	str	r3, [r4, #36]	; 0x24
 8011a4a:	4b05      	ldr	r3, [pc, #20]	; (8011a60 <std+0x3c>)
 8011a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a4e:	4b05      	ldr	r3, [pc, #20]	; (8011a64 <std+0x40>)
 8011a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a52:	4b05      	ldr	r3, [pc, #20]	; (8011a68 <std+0x44>)
 8011a54:	6224      	str	r4, [r4, #32]
 8011a56:	6323      	str	r3, [r4, #48]	; 0x30
 8011a58:	bd10      	pop	{r4, pc}
 8011a5a:	bf00      	nop
 8011a5c:	08011d69 	.word	0x08011d69
 8011a60:	08011d8b 	.word	0x08011d8b
 8011a64:	08011dc3 	.word	0x08011dc3
 8011a68:	08011de7 	.word	0x08011de7

08011a6c <_cleanup_r>:
 8011a6c:	4901      	ldr	r1, [pc, #4]	; (8011a74 <_cleanup_r+0x8>)
 8011a6e:	f000 b8af 	b.w	8011bd0 <_fwalk_reent>
 8011a72:	bf00      	nop
 8011a74:	080119ad 	.word	0x080119ad

08011a78 <__sfmoreglue>:
 8011a78:	b570      	push	{r4, r5, r6, lr}
 8011a7a:	2268      	movs	r2, #104	; 0x68
 8011a7c:	1e4d      	subs	r5, r1, #1
 8011a7e:	4355      	muls	r5, r2
 8011a80:	460e      	mov	r6, r1
 8011a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a86:	f7ff fa17 	bl	8010eb8 <_malloc_r>
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	b140      	cbz	r0, 8011aa0 <__sfmoreglue+0x28>
 8011a8e:	2100      	movs	r1, #0
 8011a90:	e9c0 1600 	strd	r1, r6, [r0]
 8011a94:	300c      	adds	r0, #12
 8011a96:	60a0      	str	r0, [r4, #8]
 8011a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a9c:	f7fd fbb0 	bl	800f200 <memset>
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	bd70      	pop	{r4, r5, r6, pc}

08011aa4 <__sfp_lock_acquire>:
 8011aa4:	4801      	ldr	r0, [pc, #4]	; (8011aac <__sfp_lock_acquire+0x8>)
 8011aa6:	f000 b8b3 	b.w	8011c10 <__retarget_lock_acquire_recursive>
 8011aaa:	bf00      	nop
 8011aac:	24000c9d 	.word	0x24000c9d

08011ab0 <__sfp_lock_release>:
 8011ab0:	4801      	ldr	r0, [pc, #4]	; (8011ab8 <__sfp_lock_release+0x8>)
 8011ab2:	f000 b8ae 	b.w	8011c12 <__retarget_lock_release_recursive>
 8011ab6:	bf00      	nop
 8011ab8:	24000c9d 	.word	0x24000c9d

08011abc <__sinit_lock_acquire>:
 8011abc:	4801      	ldr	r0, [pc, #4]	; (8011ac4 <__sinit_lock_acquire+0x8>)
 8011abe:	f000 b8a7 	b.w	8011c10 <__retarget_lock_acquire_recursive>
 8011ac2:	bf00      	nop
 8011ac4:	24000c9e 	.word	0x24000c9e

08011ac8 <__sinit_lock_release>:
 8011ac8:	4801      	ldr	r0, [pc, #4]	; (8011ad0 <__sinit_lock_release+0x8>)
 8011aca:	f000 b8a2 	b.w	8011c12 <__retarget_lock_release_recursive>
 8011ace:	bf00      	nop
 8011ad0:	24000c9e 	.word	0x24000c9e

08011ad4 <__sinit>:
 8011ad4:	b510      	push	{r4, lr}
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	f7ff fff0 	bl	8011abc <__sinit_lock_acquire>
 8011adc:	69a3      	ldr	r3, [r4, #24]
 8011ade:	b11b      	cbz	r3, 8011ae8 <__sinit+0x14>
 8011ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ae4:	f7ff bff0 	b.w	8011ac8 <__sinit_lock_release>
 8011ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011aec:	6523      	str	r3, [r4, #80]	; 0x50
 8011aee:	4b13      	ldr	r3, [pc, #76]	; (8011b3c <__sinit+0x68>)
 8011af0:	4a13      	ldr	r2, [pc, #76]	; (8011b40 <__sinit+0x6c>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8011af6:	42a3      	cmp	r3, r4
 8011af8:	bf04      	itt	eq
 8011afa:	2301      	moveq	r3, #1
 8011afc:	61a3      	streq	r3, [r4, #24]
 8011afe:	4620      	mov	r0, r4
 8011b00:	f000 f820 	bl	8011b44 <__sfp>
 8011b04:	6060      	str	r0, [r4, #4]
 8011b06:	4620      	mov	r0, r4
 8011b08:	f000 f81c 	bl	8011b44 <__sfp>
 8011b0c:	60a0      	str	r0, [r4, #8]
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f000 f818 	bl	8011b44 <__sfp>
 8011b14:	2200      	movs	r2, #0
 8011b16:	60e0      	str	r0, [r4, #12]
 8011b18:	2104      	movs	r1, #4
 8011b1a:	6860      	ldr	r0, [r4, #4]
 8011b1c:	f7ff ff82 	bl	8011a24 <std>
 8011b20:	68a0      	ldr	r0, [r4, #8]
 8011b22:	2201      	movs	r2, #1
 8011b24:	2109      	movs	r1, #9
 8011b26:	f7ff ff7d 	bl	8011a24 <std>
 8011b2a:	68e0      	ldr	r0, [r4, #12]
 8011b2c:	2202      	movs	r2, #2
 8011b2e:	2112      	movs	r1, #18
 8011b30:	f7ff ff78 	bl	8011a24 <std>
 8011b34:	2301      	movs	r3, #1
 8011b36:	61a3      	str	r3, [r4, #24]
 8011b38:	e7d2      	b.n	8011ae0 <__sinit+0xc>
 8011b3a:	bf00      	nop
 8011b3c:	08012800 	.word	0x08012800
 8011b40:	08011a6d 	.word	0x08011a6d

08011b44 <__sfp>:
 8011b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b46:	4607      	mov	r7, r0
 8011b48:	f7ff ffac 	bl	8011aa4 <__sfp_lock_acquire>
 8011b4c:	4b1e      	ldr	r3, [pc, #120]	; (8011bc8 <__sfp+0x84>)
 8011b4e:	681e      	ldr	r6, [r3, #0]
 8011b50:	69b3      	ldr	r3, [r6, #24]
 8011b52:	b913      	cbnz	r3, 8011b5a <__sfp+0x16>
 8011b54:	4630      	mov	r0, r6
 8011b56:	f7ff ffbd 	bl	8011ad4 <__sinit>
 8011b5a:	3648      	adds	r6, #72	; 0x48
 8011b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b60:	3b01      	subs	r3, #1
 8011b62:	d503      	bpl.n	8011b6c <__sfp+0x28>
 8011b64:	6833      	ldr	r3, [r6, #0]
 8011b66:	b30b      	cbz	r3, 8011bac <__sfp+0x68>
 8011b68:	6836      	ldr	r6, [r6, #0]
 8011b6a:	e7f7      	b.n	8011b5c <__sfp+0x18>
 8011b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b70:	b9d5      	cbnz	r5, 8011ba8 <__sfp+0x64>
 8011b72:	4b16      	ldr	r3, [pc, #88]	; (8011bcc <__sfp+0x88>)
 8011b74:	60e3      	str	r3, [r4, #12]
 8011b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8011b7c:	f000 f847 	bl	8011c0e <__retarget_lock_init_recursive>
 8011b80:	f7ff ff96 	bl	8011ab0 <__sfp_lock_release>
 8011b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011b8c:	6025      	str	r5, [r4, #0]
 8011b8e:	61a5      	str	r5, [r4, #24]
 8011b90:	2208      	movs	r2, #8
 8011b92:	4629      	mov	r1, r5
 8011b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b98:	f7fd fb32 	bl	800f200 <memset>
 8011b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ba8:	3468      	adds	r4, #104	; 0x68
 8011baa:	e7d9      	b.n	8011b60 <__sfp+0x1c>
 8011bac:	2104      	movs	r1, #4
 8011bae:	4638      	mov	r0, r7
 8011bb0:	f7ff ff62 	bl	8011a78 <__sfmoreglue>
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	6030      	str	r0, [r6, #0]
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d1d5      	bne.n	8011b68 <__sfp+0x24>
 8011bbc:	f7ff ff78 	bl	8011ab0 <__sfp_lock_release>
 8011bc0:	230c      	movs	r3, #12
 8011bc2:	603b      	str	r3, [r7, #0]
 8011bc4:	e7ee      	b.n	8011ba4 <__sfp+0x60>
 8011bc6:	bf00      	nop
 8011bc8:	08012800 	.word	0x08012800
 8011bcc:	ffff0001 	.word	0xffff0001

08011bd0 <_fwalk_reent>:
 8011bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bd4:	4606      	mov	r6, r0
 8011bd6:	4688      	mov	r8, r1
 8011bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011bdc:	2700      	movs	r7, #0
 8011bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011be2:	f1b9 0901 	subs.w	r9, r9, #1
 8011be6:	d505      	bpl.n	8011bf4 <_fwalk_reent+0x24>
 8011be8:	6824      	ldr	r4, [r4, #0]
 8011bea:	2c00      	cmp	r4, #0
 8011bec:	d1f7      	bne.n	8011bde <_fwalk_reent+0xe>
 8011bee:	4638      	mov	r0, r7
 8011bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bf4:	89ab      	ldrh	r3, [r5, #12]
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d907      	bls.n	8011c0a <_fwalk_reent+0x3a>
 8011bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	d003      	beq.n	8011c0a <_fwalk_reent+0x3a>
 8011c02:	4629      	mov	r1, r5
 8011c04:	4630      	mov	r0, r6
 8011c06:	47c0      	blx	r8
 8011c08:	4307      	orrs	r7, r0
 8011c0a:	3568      	adds	r5, #104	; 0x68
 8011c0c:	e7e9      	b.n	8011be2 <_fwalk_reent+0x12>

08011c0e <__retarget_lock_init_recursive>:
 8011c0e:	4770      	bx	lr

08011c10 <__retarget_lock_acquire_recursive>:
 8011c10:	4770      	bx	lr

08011c12 <__retarget_lock_release_recursive>:
 8011c12:	4770      	bx	lr

08011c14 <__swhatbuf_r>:
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	460e      	mov	r6, r1
 8011c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c1c:	2900      	cmp	r1, #0
 8011c1e:	b096      	sub	sp, #88	; 0x58
 8011c20:	4614      	mov	r4, r2
 8011c22:	461d      	mov	r5, r3
 8011c24:	da08      	bge.n	8011c38 <__swhatbuf_r+0x24>
 8011c26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	602a      	str	r2, [r5, #0]
 8011c2e:	061a      	lsls	r2, r3, #24
 8011c30:	d410      	bmi.n	8011c54 <__swhatbuf_r+0x40>
 8011c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c36:	e00e      	b.n	8011c56 <__swhatbuf_r+0x42>
 8011c38:	466a      	mov	r2, sp
 8011c3a:	f000 f8fb 	bl	8011e34 <_fstat_r>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	dbf1      	blt.n	8011c26 <__swhatbuf_r+0x12>
 8011c42:	9a01      	ldr	r2, [sp, #4]
 8011c44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c4c:	425a      	negs	r2, r3
 8011c4e:	415a      	adcs	r2, r3
 8011c50:	602a      	str	r2, [r5, #0]
 8011c52:	e7ee      	b.n	8011c32 <__swhatbuf_r+0x1e>
 8011c54:	2340      	movs	r3, #64	; 0x40
 8011c56:	2000      	movs	r0, #0
 8011c58:	6023      	str	r3, [r4, #0]
 8011c5a:	b016      	add	sp, #88	; 0x58
 8011c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c60 <__smakebuf_r>:
 8011c60:	898b      	ldrh	r3, [r1, #12]
 8011c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c64:	079d      	lsls	r5, r3, #30
 8011c66:	4606      	mov	r6, r0
 8011c68:	460c      	mov	r4, r1
 8011c6a:	d507      	bpl.n	8011c7c <__smakebuf_r+0x1c>
 8011c6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	6123      	str	r3, [r4, #16]
 8011c74:	2301      	movs	r3, #1
 8011c76:	6163      	str	r3, [r4, #20]
 8011c78:	b002      	add	sp, #8
 8011c7a:	bd70      	pop	{r4, r5, r6, pc}
 8011c7c:	ab01      	add	r3, sp, #4
 8011c7e:	466a      	mov	r2, sp
 8011c80:	f7ff ffc8 	bl	8011c14 <__swhatbuf_r>
 8011c84:	9900      	ldr	r1, [sp, #0]
 8011c86:	4605      	mov	r5, r0
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f7ff f915 	bl	8010eb8 <_malloc_r>
 8011c8e:	b948      	cbnz	r0, 8011ca4 <__smakebuf_r+0x44>
 8011c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c94:	059a      	lsls	r2, r3, #22
 8011c96:	d4ef      	bmi.n	8011c78 <__smakebuf_r+0x18>
 8011c98:	f023 0303 	bic.w	r3, r3, #3
 8011c9c:	f043 0302 	orr.w	r3, r3, #2
 8011ca0:	81a3      	strh	r3, [r4, #12]
 8011ca2:	e7e3      	b.n	8011c6c <__smakebuf_r+0xc>
 8011ca4:	4b0d      	ldr	r3, [pc, #52]	; (8011cdc <__smakebuf_r+0x7c>)
 8011ca6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ca8:	89a3      	ldrh	r3, [r4, #12]
 8011caa:	6020      	str	r0, [r4, #0]
 8011cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cb0:	81a3      	strh	r3, [r4, #12]
 8011cb2:	9b00      	ldr	r3, [sp, #0]
 8011cb4:	6163      	str	r3, [r4, #20]
 8011cb6:	9b01      	ldr	r3, [sp, #4]
 8011cb8:	6120      	str	r0, [r4, #16]
 8011cba:	b15b      	cbz	r3, 8011cd4 <__smakebuf_r+0x74>
 8011cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f000 f8c9 	bl	8011e58 <_isatty_r>
 8011cc6:	b128      	cbz	r0, 8011cd4 <__smakebuf_r+0x74>
 8011cc8:	89a3      	ldrh	r3, [r4, #12]
 8011cca:	f023 0303 	bic.w	r3, r3, #3
 8011cce:	f043 0301 	orr.w	r3, r3, #1
 8011cd2:	81a3      	strh	r3, [r4, #12]
 8011cd4:	89a0      	ldrh	r0, [r4, #12]
 8011cd6:	4305      	orrs	r5, r0
 8011cd8:	81a5      	strh	r5, [r4, #12]
 8011cda:	e7cd      	b.n	8011c78 <__smakebuf_r+0x18>
 8011cdc:	08011a6d 	.word	0x08011a6d

08011ce0 <_raise_r>:
 8011ce0:	291f      	cmp	r1, #31
 8011ce2:	b538      	push	{r3, r4, r5, lr}
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	d904      	bls.n	8011cf4 <_raise_r+0x14>
 8011cea:	2316      	movs	r3, #22
 8011cec:	6003      	str	r3, [r0, #0]
 8011cee:	f04f 30ff 	mov.w	r0, #4294967295
 8011cf2:	bd38      	pop	{r3, r4, r5, pc}
 8011cf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011cf6:	b112      	cbz	r2, 8011cfe <_raise_r+0x1e>
 8011cf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cfc:	b94b      	cbnz	r3, 8011d12 <_raise_r+0x32>
 8011cfe:	4620      	mov	r0, r4
 8011d00:	f000 f830 	bl	8011d64 <_getpid_r>
 8011d04:	462a      	mov	r2, r5
 8011d06:	4601      	mov	r1, r0
 8011d08:	4620      	mov	r0, r4
 8011d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d0e:	f000 b817 	b.w	8011d40 <_kill_r>
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d00a      	beq.n	8011d2c <_raise_r+0x4c>
 8011d16:	1c59      	adds	r1, r3, #1
 8011d18:	d103      	bne.n	8011d22 <_raise_r+0x42>
 8011d1a:	2316      	movs	r3, #22
 8011d1c:	6003      	str	r3, [r0, #0]
 8011d1e:	2001      	movs	r0, #1
 8011d20:	e7e7      	b.n	8011cf2 <_raise_r+0x12>
 8011d22:	2400      	movs	r4, #0
 8011d24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d28:	4628      	mov	r0, r5
 8011d2a:	4798      	blx	r3
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	e7e0      	b.n	8011cf2 <_raise_r+0x12>

08011d30 <raise>:
 8011d30:	4b02      	ldr	r3, [pc, #8]	; (8011d3c <raise+0xc>)
 8011d32:	4601      	mov	r1, r0
 8011d34:	6818      	ldr	r0, [r3, #0]
 8011d36:	f7ff bfd3 	b.w	8011ce0 <_raise_r>
 8011d3a:	bf00      	nop
 8011d3c:	24000100 	.word	0x24000100

08011d40 <_kill_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4d07      	ldr	r5, [pc, #28]	; (8011d60 <_kill_r+0x20>)
 8011d44:	2300      	movs	r3, #0
 8011d46:	4604      	mov	r4, r0
 8011d48:	4608      	mov	r0, r1
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	602b      	str	r3, [r5, #0]
 8011d4e:	f7f2 f8fb 	bl	8003f48 <_kill>
 8011d52:	1c43      	adds	r3, r0, #1
 8011d54:	d102      	bne.n	8011d5c <_kill_r+0x1c>
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	b103      	cbz	r3, 8011d5c <_kill_r+0x1c>
 8011d5a:	6023      	str	r3, [r4, #0]
 8011d5c:	bd38      	pop	{r3, r4, r5, pc}
 8011d5e:	bf00      	nop
 8011d60:	24000c98 	.word	0x24000c98

08011d64 <_getpid_r>:
 8011d64:	f7f2 b8e8 	b.w	8003f38 <_getpid>

08011d68 <__sread>:
 8011d68:	b510      	push	{r4, lr}
 8011d6a:	460c      	mov	r4, r1
 8011d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d70:	f000 f894 	bl	8011e9c <_read_r>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	bfab      	itete	ge
 8011d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8011d7c:	181b      	addge	r3, r3, r0
 8011d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d82:	bfac      	ite	ge
 8011d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d86:	81a3      	strhlt	r3, [r4, #12]
 8011d88:	bd10      	pop	{r4, pc}

08011d8a <__swrite>:
 8011d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d8e:	461f      	mov	r7, r3
 8011d90:	898b      	ldrh	r3, [r1, #12]
 8011d92:	05db      	lsls	r3, r3, #23
 8011d94:	4605      	mov	r5, r0
 8011d96:	460c      	mov	r4, r1
 8011d98:	4616      	mov	r6, r2
 8011d9a:	d505      	bpl.n	8011da8 <__swrite+0x1e>
 8011d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011da0:	2302      	movs	r3, #2
 8011da2:	2200      	movs	r2, #0
 8011da4:	f000 f868 	bl	8011e78 <_lseek_r>
 8011da8:	89a3      	ldrh	r3, [r4, #12]
 8011daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011db2:	81a3      	strh	r3, [r4, #12]
 8011db4:	4632      	mov	r2, r6
 8011db6:	463b      	mov	r3, r7
 8011db8:	4628      	mov	r0, r5
 8011dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dbe:	f000 b817 	b.w	8011df0 <_write_r>

08011dc2 <__sseek>:
 8011dc2:	b510      	push	{r4, lr}
 8011dc4:	460c      	mov	r4, r1
 8011dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dca:	f000 f855 	bl	8011e78 <_lseek_r>
 8011dce:	1c43      	adds	r3, r0, #1
 8011dd0:	89a3      	ldrh	r3, [r4, #12]
 8011dd2:	bf15      	itete	ne
 8011dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011dde:	81a3      	strheq	r3, [r4, #12]
 8011de0:	bf18      	it	ne
 8011de2:	81a3      	strhne	r3, [r4, #12]
 8011de4:	bd10      	pop	{r4, pc}

08011de6 <__sclose>:
 8011de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dea:	f000 b813 	b.w	8011e14 <_close_r>
	...

08011df0 <_write_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4d07      	ldr	r5, [pc, #28]	; (8011e10 <_write_r+0x20>)
 8011df4:	4604      	mov	r4, r0
 8011df6:	4608      	mov	r0, r1
 8011df8:	4611      	mov	r1, r2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	602a      	str	r2, [r5, #0]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	f7f2 f8d9 	bl	8003fb6 <_write>
 8011e04:	1c43      	adds	r3, r0, #1
 8011e06:	d102      	bne.n	8011e0e <_write_r+0x1e>
 8011e08:	682b      	ldr	r3, [r5, #0]
 8011e0a:	b103      	cbz	r3, 8011e0e <_write_r+0x1e>
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	bd38      	pop	{r3, r4, r5, pc}
 8011e10:	24000c98 	.word	0x24000c98

08011e14 <_close_r>:
 8011e14:	b538      	push	{r3, r4, r5, lr}
 8011e16:	4d06      	ldr	r5, [pc, #24]	; (8011e30 <_close_r+0x1c>)
 8011e18:	2300      	movs	r3, #0
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	4608      	mov	r0, r1
 8011e1e:	602b      	str	r3, [r5, #0]
 8011e20:	f7f2 f8e5 	bl	8003fee <_close>
 8011e24:	1c43      	adds	r3, r0, #1
 8011e26:	d102      	bne.n	8011e2e <_close_r+0x1a>
 8011e28:	682b      	ldr	r3, [r5, #0]
 8011e2a:	b103      	cbz	r3, 8011e2e <_close_r+0x1a>
 8011e2c:	6023      	str	r3, [r4, #0]
 8011e2e:	bd38      	pop	{r3, r4, r5, pc}
 8011e30:	24000c98 	.word	0x24000c98

08011e34 <_fstat_r>:
 8011e34:	b538      	push	{r3, r4, r5, lr}
 8011e36:	4d07      	ldr	r5, [pc, #28]	; (8011e54 <_fstat_r+0x20>)
 8011e38:	2300      	movs	r3, #0
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	4608      	mov	r0, r1
 8011e3e:	4611      	mov	r1, r2
 8011e40:	602b      	str	r3, [r5, #0]
 8011e42:	f7f2 f8e0 	bl	8004006 <_fstat>
 8011e46:	1c43      	adds	r3, r0, #1
 8011e48:	d102      	bne.n	8011e50 <_fstat_r+0x1c>
 8011e4a:	682b      	ldr	r3, [r5, #0]
 8011e4c:	b103      	cbz	r3, 8011e50 <_fstat_r+0x1c>
 8011e4e:	6023      	str	r3, [r4, #0]
 8011e50:	bd38      	pop	{r3, r4, r5, pc}
 8011e52:	bf00      	nop
 8011e54:	24000c98 	.word	0x24000c98

08011e58 <_isatty_r>:
 8011e58:	b538      	push	{r3, r4, r5, lr}
 8011e5a:	4d06      	ldr	r5, [pc, #24]	; (8011e74 <_isatty_r+0x1c>)
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	4604      	mov	r4, r0
 8011e60:	4608      	mov	r0, r1
 8011e62:	602b      	str	r3, [r5, #0]
 8011e64:	f7f2 f8df 	bl	8004026 <_isatty>
 8011e68:	1c43      	adds	r3, r0, #1
 8011e6a:	d102      	bne.n	8011e72 <_isatty_r+0x1a>
 8011e6c:	682b      	ldr	r3, [r5, #0]
 8011e6e:	b103      	cbz	r3, 8011e72 <_isatty_r+0x1a>
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	bd38      	pop	{r3, r4, r5, pc}
 8011e74:	24000c98 	.word	0x24000c98

08011e78 <_lseek_r>:
 8011e78:	b538      	push	{r3, r4, r5, lr}
 8011e7a:	4d07      	ldr	r5, [pc, #28]	; (8011e98 <_lseek_r+0x20>)
 8011e7c:	4604      	mov	r4, r0
 8011e7e:	4608      	mov	r0, r1
 8011e80:	4611      	mov	r1, r2
 8011e82:	2200      	movs	r2, #0
 8011e84:	602a      	str	r2, [r5, #0]
 8011e86:	461a      	mov	r2, r3
 8011e88:	f7f2 f8d8 	bl	800403c <_lseek>
 8011e8c:	1c43      	adds	r3, r0, #1
 8011e8e:	d102      	bne.n	8011e96 <_lseek_r+0x1e>
 8011e90:	682b      	ldr	r3, [r5, #0]
 8011e92:	b103      	cbz	r3, 8011e96 <_lseek_r+0x1e>
 8011e94:	6023      	str	r3, [r4, #0]
 8011e96:	bd38      	pop	{r3, r4, r5, pc}
 8011e98:	24000c98 	.word	0x24000c98

08011e9c <_read_r>:
 8011e9c:	b538      	push	{r3, r4, r5, lr}
 8011e9e:	4d07      	ldr	r5, [pc, #28]	; (8011ebc <_read_r+0x20>)
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	4608      	mov	r0, r1
 8011ea4:	4611      	mov	r1, r2
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	602a      	str	r2, [r5, #0]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	f7f2 f866 	bl	8003f7c <_read>
 8011eb0:	1c43      	adds	r3, r0, #1
 8011eb2:	d102      	bne.n	8011eba <_read_r+0x1e>
 8011eb4:	682b      	ldr	r3, [r5, #0]
 8011eb6:	b103      	cbz	r3, 8011eba <_read_r+0x1e>
 8011eb8:	6023      	str	r3, [r4, #0]
 8011eba:	bd38      	pop	{r3, r4, r5, pc}
 8011ebc:	24000c98 	.word	0x24000c98

08011ec0 <checkint>:
 8011ec0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011ec4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	b570      	push	{r4, r5, r6, lr}
 8011ecc:	dd2a      	ble.n	8011f24 <checkint+0x64>
 8011ece:	f240 4333 	movw	r3, #1075	; 0x433
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	dc24      	bgt.n	8011f20 <checkint+0x60>
 8011ed6:	1a9b      	subs	r3, r3, r2
 8011ed8:	f1a3 0620 	sub.w	r6, r3, #32
 8011edc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee0:	fa02 f403 	lsl.w	r4, r2, r3
 8011ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8011ee8:	f1c3 0520 	rsb	r5, r3, #32
 8011eec:	fa22 f505 	lsr.w	r5, r2, r5
 8011ef0:	4334      	orrs	r4, r6
 8011ef2:	432c      	orrs	r4, r5
 8011ef4:	409a      	lsls	r2, r3
 8011ef6:	ea20 0202 	bic.w	r2, r0, r2
 8011efa:	ea21 0404 	bic.w	r4, r1, r4
 8011efe:	4322      	orrs	r2, r4
 8011f00:	f1a3 0420 	sub.w	r4, r3, #32
 8011f04:	f1c3 0220 	rsb	r2, r3, #32
 8011f08:	d10c      	bne.n	8011f24 <checkint+0x64>
 8011f0a:	40d8      	lsrs	r0, r3
 8011f0c:	fa01 f302 	lsl.w	r3, r1, r2
 8011f10:	4318      	orrs	r0, r3
 8011f12:	40e1      	lsrs	r1, r4
 8011f14:	4308      	orrs	r0, r1
 8011f16:	f000 0001 	and.w	r0, r0, #1
 8011f1a:	f1d0 0002 	rsbs	r0, r0, #2
 8011f1e:	bd70      	pop	{r4, r5, r6, pc}
 8011f20:	2002      	movs	r0, #2
 8011f22:	e7fc      	b.n	8011f1e <checkint+0x5e>
 8011f24:	2000      	movs	r0, #0
 8011f26:	e7fa      	b.n	8011f1e <checkint+0x5e>

08011f28 <pow>:
 8011f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f2c:	ee10 4a90 	vmov	r4, s1
 8011f30:	ed2d 8b0a 	vpush	{d8-d12}
 8011f34:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011f38:	ee11 7a90 	vmov	r7, s3
 8011f3c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011f40:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011f44:	429a      	cmp	r2, r3
 8011f46:	ee10 6a10 	vmov	r6, s0
 8011f4a:	ee11 0a10 	vmov	r0, s2
 8011f4e:	b086      	sub	sp, #24
 8011f50:	46d4      	mov	ip, sl
 8011f52:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011f56:	d806      	bhi.n	8011f66 <pow+0x3e>
 8011f58:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011f5c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011f60:	2b7f      	cmp	r3, #127	; 0x7f
 8011f62:	f240 8156 	bls.w	8012212 <pow+0x2ea>
 8011f66:	1802      	adds	r2, r0, r0
 8011f68:	eb47 0107 	adc.w	r1, r7, r7
 8011f6c:	f06f 0e01 	mvn.w	lr, #1
 8011f70:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011f74:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011f78:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011f7c:	45ce      	cmp	lr, r9
 8011f7e:	eb73 0808 	sbcs.w	r8, r3, r8
 8011f82:	d23f      	bcs.n	8012004 <pow+0xdc>
 8011f84:	ea52 0301 	orrs.w	r3, r2, r1
 8011f88:	f04f 0300 	mov.w	r3, #0
 8011f8c:	d10c      	bne.n	8011fa8 <pow+0x80>
 8011f8e:	19b6      	adds	r6, r6, r6
 8011f90:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011f94:	4164      	adcs	r4, r4
 8011f96:	42b3      	cmp	r3, r6
 8011f98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011f9c:	41a3      	sbcs	r3, r4
 8011f9e:	f0c0 808c 	bcc.w	80120ba <pow+0x192>
 8011fa2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011fa6:	e028      	b.n	8011ffa <pow+0xd2>
 8011fa8:	4da3      	ldr	r5, [pc, #652]	; (8012238 <pow+0x310>)
 8011faa:	42ac      	cmp	r4, r5
 8011fac:	bf08      	it	eq
 8011fae:	429e      	cmpeq	r6, r3
 8011fb0:	d107      	bne.n	8011fc2 <pow+0x9a>
 8011fb2:	1800      	adds	r0, r0, r0
 8011fb4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011fb8:	417f      	adcs	r7, r7
 8011fba:	4283      	cmp	r3, r0
 8011fbc:	4b9f      	ldr	r3, [pc, #636]	; (801223c <pow+0x314>)
 8011fbe:	41bb      	sbcs	r3, r7
 8011fc0:	e7ed      	b.n	8011f9e <pow+0x76>
 8011fc2:	19b6      	adds	r6, r6, r6
 8011fc4:	489e      	ldr	r0, [pc, #632]	; (8012240 <pow+0x318>)
 8011fc6:	4164      	adcs	r4, r4
 8011fc8:	42b3      	cmp	r3, r6
 8011fca:	eb70 0504 	sbcs.w	r5, r0, r4
 8011fce:	d374      	bcc.n	80120ba <pow+0x192>
 8011fd0:	4281      	cmp	r1, r0
 8011fd2:	bf08      	it	eq
 8011fd4:	429a      	cmpeq	r2, r3
 8011fd6:	d170      	bne.n	80120ba <pow+0x192>
 8011fd8:	4a9a      	ldr	r2, [pc, #616]	; (8012244 <pow+0x31c>)
 8011fda:	4294      	cmp	r4, r2
 8011fdc:	bf08      	it	eq
 8011fde:	429e      	cmpeq	r6, r3
 8011fe0:	d0df      	beq.n	8011fa2 <pow+0x7a>
 8011fe2:	4294      	cmp	r4, r2
 8011fe4:	ea6f 0707 	mvn.w	r7, r7
 8011fe8:	bf34      	ite	cc
 8011fea:	2400      	movcc	r4, #0
 8011fec:	2401      	movcs	r4, #1
 8011fee:	0fff      	lsrs	r7, r7, #31
 8011ff0:	42bc      	cmp	r4, r7
 8011ff2:	f040 81d9 	bne.w	80123a8 <pow+0x480>
 8011ff6:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011ffa:	b006      	add	sp, #24
 8011ffc:	ecbd 8b0a 	vpop	{d8-d12}
 8012000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012004:	eb16 0806 	adds.w	r8, r6, r6
 8012008:	eb44 0904 	adc.w	r9, r4, r4
 801200c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8012010:	f169 0200 	sbc.w	r2, r9, #0
 8012014:	458e      	cmp	lr, r1
 8012016:	4193      	sbcs	r3, r2
 8012018:	d223      	bcs.n	8012062 <pow+0x13a>
 801201a:	ee20 0b00 	vmul.f64	d0, d0, d0
 801201e:	2c00      	cmp	r4, #0
 8012020:	da12      	bge.n	8012048 <pow+0x120>
 8012022:	4639      	mov	r1, r7
 8012024:	f7ff ff4c 	bl	8011ec0 <checkint>
 8012028:	2801      	cmp	r0, #1
 801202a:	d10d      	bne.n	8012048 <pow+0x120>
 801202c:	eeb1 0b40 	vneg.f64	d0, d0
 8012030:	ea58 0309 	orrs.w	r3, r8, r9
 8012034:	d10a      	bne.n	801204c <pow+0x124>
 8012036:	2f00      	cmp	r7, #0
 8012038:	dadf      	bge.n	8011ffa <pow+0xd2>
 801203a:	b006      	add	sp, #24
 801203c:	ecbd 8b0a 	vpop	{d8-d12}
 8012040:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012044:	f000 bb50 	b.w	80126e8 <__math_divzero>
 8012048:	2000      	movs	r0, #0
 801204a:	e7f1      	b.n	8012030 <pow+0x108>
 801204c:	2f00      	cmp	r7, #0
 801204e:	dad4      	bge.n	8011ffa <pow+0xd2>
 8012050:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012054:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012058:	ed8d 7b00 	vstr	d7, [sp]
 801205c:	ed9d 0b00 	vldr	d0, [sp]
 8012060:	e7cb      	b.n	8011ffa <pow+0xd2>
 8012062:	2c00      	cmp	r4, #0
 8012064:	da2c      	bge.n	80120c0 <pow+0x198>
 8012066:	4639      	mov	r1, r7
 8012068:	f7ff ff2a 	bl	8011ec0 <checkint>
 801206c:	b930      	cbnz	r0, 801207c <pow+0x154>
 801206e:	b006      	add	sp, #24
 8012070:	ecbd 8b0a 	vpop	{d8-d12}
 8012074:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012078:	f000 bb4e 	b.w	8012718 <__math_invalid>
 801207c:	2801      	cmp	r0, #1
 801207e:	bf14      	ite	ne
 8012080:	2000      	movne	r0, #0
 8012082:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8012086:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801208a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801208e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8012092:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8012096:	2b7f      	cmp	r3, #127	; 0x7f
 8012098:	d92d      	bls.n	80120f6 <pow+0x1ce>
 801209a:	4b67      	ldr	r3, [pc, #412]	; (8012238 <pow+0x310>)
 801209c:	2000      	movs	r0, #0
 801209e:	429c      	cmp	r4, r3
 80120a0:	bf08      	it	eq
 80120a2:	4286      	cmpeq	r6, r0
 80120a4:	f43f af7d 	beq.w	8011fa2 <pow+0x7a>
 80120a8:	f240 31bd 	movw	r1, #957	; 0x3bd
 80120ac:	428a      	cmp	r2, r1
 80120ae:	d80c      	bhi.n	80120ca <pow+0x1a2>
 80120b0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80120b4:	42b0      	cmp	r0, r6
 80120b6:	41a3      	sbcs	r3, r4
 80120b8:	d204      	bcs.n	80120c4 <pow+0x19c>
 80120ba:	ee31 0b00 	vadd.f64	d0, d1, d0
 80120be:	e79c      	b.n	8011ffa <pow+0xd2>
 80120c0:	2000      	movs	r0, #0
 80120c2:	e7e4      	b.n	801208e <pow+0x166>
 80120c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80120c8:	e797      	b.n	8011ffa <pow+0xd2>
 80120ca:	2e01      	cmp	r6, #1
 80120cc:	eb74 0303 	sbcs.w	r3, r4, r3
 80120d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80120d4:	bf34      	ite	cc
 80120d6:	2301      	movcc	r3, #1
 80120d8:	2300      	movcs	r3, #0
 80120da:	4295      	cmp	r5, r2
 80120dc:	bf8c      	ite	hi
 80120de:	2500      	movhi	r5, #0
 80120e0:	2501      	movls	r5, #1
 80120e2:	42ab      	cmp	r3, r5
 80120e4:	f000 809d 	beq.w	8012222 <pow+0x2fa>
 80120e8:	b006      	add	sp, #24
 80120ea:	ecbd 8b0a 	vpop	{d8-d12}
 80120ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120f2:	f000 baf1 	b.w	80126d8 <__math_oflow>
 80120f6:	f1bc 0f00 	cmp.w	ip, #0
 80120fa:	d10b      	bne.n	8012114 <pow+0x1ec>
 80120fc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8012230 <pow+0x308>
 8012100:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012104:	ec53 2b17 	vmov	r2, r3, d7
 8012108:	ee17 6a10 	vmov	r6, s14
 801210c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012110:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8012114:	4b4c      	ldr	r3, [pc, #304]	; (8012248 <pow+0x320>)
 8012116:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801211a:	4423      	add	r3, r4
 801211c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8012120:	1519      	asrs	r1, r3, #20
 8012122:	0d1b      	lsrs	r3, r3, #20
 8012124:	051b      	lsls	r3, r3, #20
 8012126:	eba4 0903 	sub.w	r9, r4, r3
 801212a:	4b48      	ldr	r3, [pc, #288]	; (801224c <pow+0x324>)
 801212c:	ee04 1a10 	vmov	s8, r1
 8012130:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8012134:	f1b6 0800 	subs.w	r8, r6, #0
 8012138:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801213c:	ec49 8b15 	vmov	d5, r8, r9
 8012140:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8012144:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012148:	ed93 7b00 	vldr	d7, [r3]
 801214c:	ed93 5b02 	vldr	d5, [r3, #8]
 8012150:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8012154:	eea4 2b07 	vfma.f64	d2, d4, d7
 8012158:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801215c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8012160:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8012164:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012168:	ed93 5b04 	vldr	d5, [r3, #16]
 801216c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8012170:	ee37 7b02 	vadd.f64	d7, d7, d2
 8012174:	ee26 5b05 	vmul.f64	d5, d6, d5
 8012178:	ed93 4b08 	vldr	d4, [r3, #32]
 801217c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8012180:	eeb0 9b40 	vmov.f64	d9, d0
 8012184:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8012188:	ed93 5b06 	vldr	d5, [r3, #24]
 801218c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8012190:	ee26 bb00 	vmul.f64	d11, d6, d0
 8012194:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8012198:	eea6 5b04 	vfma.f64	d5, d6, d4
 801219c:	ee3a ab48 	vsub.f64	d10, d10, d8
 80121a0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80121a4:	ee37 9b09 	vadd.f64	d9, d7, d9
 80121a8:	ee3a ab00 	vadd.f64	d10, d10, d0
 80121ac:	eea6 4b03 	vfma.f64	d4, d6, d3
 80121b0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80121b4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80121b8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80121bc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80121c0:	eea0 4b03 	vfma.f64	d4, d0, d3
 80121c4:	eea0 5b04 	vfma.f64	d5, d0, d4
 80121c8:	eeab ab05 	vfma.f64	d10, d11, d5
 80121cc:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80121d0:	ee21 7b06 	vmul.f64	d7, d1, d6
 80121d4:	ee17 3a90 	vmov	r3, s15
 80121d8:	eeb0 5b47 	vmov.f64	d5, d7
 80121dc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80121e0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80121e4:	18b2      	adds	r2, r6, r2
 80121e6:	2a3e      	cmp	r2, #62	; 0x3e
 80121e8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80121ec:	ee38 8b46 	vsub.f64	d8, d8, d6
 80121f0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80121f4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80121f8:	d92b      	bls.n	8012252 <pow+0x32a>
 80121fa:	2a00      	cmp	r2, #0
 80121fc:	da0b      	bge.n	8012216 <pow+0x2ee>
 80121fe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012202:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012206:	2800      	cmp	r0, #0
 8012208:	f43f aef7 	beq.w	8011ffa <pow+0xd2>
 801220c:	eeb1 0b40 	vneg.f64	d0, d0
 8012210:	e6f3      	b.n	8011ffa <pow+0xd2>
 8012212:	2000      	movs	r0, #0
 8012214:	e77e      	b.n	8012114 <pow+0x1ec>
 8012216:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801221a:	d919      	bls.n	8012250 <pow+0x328>
 801221c:	2b00      	cmp	r3, #0
 801221e:	f6bf af63 	bge.w	80120e8 <pow+0x1c0>
 8012222:	b006      	add	sp, #24
 8012224:	ecbd 8b0a 	vpop	{d8-d12}
 8012228:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801222c:	f000 ba4c 	b.w	80126c8 <__math_uflow>
 8012230:	00000000 	.word	0x00000000
 8012234:	43300000 	.word	0x43300000
 8012238:	3ff00000 	.word	0x3ff00000
 801223c:	fff00000 	.word	0xfff00000
 8012240:	ffe00000 	.word	0xffe00000
 8012244:	7fe00000 	.word	0x7fe00000
 8012248:	c0196aab 	.word	0xc0196aab
 801224c:	08012c30 	.word	0x08012c30
 8012250:	2600      	movs	r6, #0
 8012252:	495d      	ldr	r1, [pc, #372]	; (80123c8 <pow+0x4a0>)
 8012254:	ed91 4b02 	vldr	d4, [r1, #8]
 8012258:	ed91 3b00 	vldr	d3, [r1]
 801225c:	eeb0 6b44 	vmov.f64	d6, d4
 8012260:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012264:	ee16 5a10 	vmov	r5, s12
 8012268:	ee36 6b44 	vsub.f64	d6, d6, d4
 801226c:	ed91 4b04 	vldr	d4, [r1, #16]
 8012270:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8012274:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012278:	eeb0 0b47 	vmov.f64	d0, d7
 801227c:	ed91 7b06 	vldr	d7, [r1, #24]
 8012280:	18dc      	adds	r4, r3, r3
 8012282:	f104 030f 	add.w	r3, r4, #15
 8012286:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801228a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801228e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8012292:	ee35 0b00 	vadd.f64	d0, d5, d0
 8012296:	ee20 6b00 	vmul.f64	d6, d0, d0
 801229a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801229e:	ed91 5b08 	vldr	d5, [r1, #32]
 80122a2:	ee30 7b07 	vadd.f64	d7, d0, d7
 80122a6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80122aa:	eea0 5b04 	vfma.f64	d5, d0, d4
 80122ae:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80122b2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80122b6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80122ba:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80122be:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80122c2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80122c6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80122ca:	1940      	adds	r0, r0, r5
 80122cc:	2700      	movs	r7, #0
 80122ce:	eb17 020c 	adds.w	r2, r7, ip
 80122d2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80122d6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80122da:	2e00      	cmp	r6, #0
 80122dc:	d15f      	bne.n	801239e <pow+0x476>
 80122de:	42bd      	cmp	r5, r7
 80122e0:	db13      	blt.n	801230a <pow+0x3e2>
 80122e2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80122e6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80122ea:	4610      	mov	r0, r2
 80122ec:	ec41 0b10 	vmov	d0, r0, r1
 80122f0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80122f4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80123b0 <pow+0x488>
 80122f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80122fc:	b006      	add	sp, #24
 80122fe:	ecbd 8b0a 	vpop	{d8-d12}
 8012302:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012306:	f000 ba1f 	b.w	8012748 <__math_check_oflow>
 801230a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801230e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8012312:	4610      	mov	r0, r2
 8012314:	ec41 0b15 	vmov	d5, r0, r1
 8012318:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801231c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012320:	ee35 7b06 	vadd.f64	d7, d5, d6
 8012324:	eeb0 3bc7 	vabs.f64	d3, d7
 8012328:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012330:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80123b8 <pow+0x490>
 8012334:	d52a      	bpl.n	801238c <pow+0x464>
 8012336:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801233a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012342:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8012346:	ee35 6b06 	vadd.f64	d6, d5, d6
 801234a:	bf48      	it	mi
 801234c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8012350:	ee37 3b04 	vadd.f64	d3, d7, d4
 8012354:	ee34 5b43 	vsub.f64	d5, d4, d3
 8012358:	ee35 7b07 	vadd.f64	d7, d5, d7
 801235c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012360:	ee37 7b03 	vadd.f64	d7, d7, d3
 8012364:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012368:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012370:	d104      	bne.n	801237c <pow+0x454>
 8012372:	4632      	mov	r2, r6
 8012374:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012378:	ec43 2b17 	vmov	d7, r2, r3
 801237c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012380:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012384:	ee26 6b00 	vmul.f64	d6, d6, d0
 8012388:	ed8d 6b04 	vstr	d6, [sp, #16]
 801238c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8012390:	b006      	add	sp, #24
 8012392:	ecbd 8b0a 	vpop	{d8-d12}
 8012396:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801239a:	f000 b9cc 	b.w	8012736 <__math_check_uflow>
 801239e:	ec43 2b10 	vmov	d0, r2, r3
 80123a2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80123a6:	e628      	b.n	8011ffa <pow+0xd2>
 80123a8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80123c0 <pow+0x498>
 80123ac:	e625      	b.n	8011ffa <pow+0xd2>
 80123ae:	bf00      	nop
 80123b0:	00000000 	.word	0x00000000
 80123b4:	7f000000 	.word	0x7f000000
 80123b8:	00000000 	.word	0x00000000
 80123bc:	00100000 	.word	0x00100000
	...
 80123c8:	08013c78 	.word	0x08013c78

080123cc <asin>:
 80123cc:	b508      	push	{r3, lr}
 80123ce:	ed2d 8b04 	vpush	{d8-d9}
 80123d2:	eeb0 8b40 	vmov.f64	d8, d0
 80123d6:	f000 f847 	bl	8012468 <__ieee754_asin>
 80123da:	eeb4 8b48 	vcmp.f64	d8, d8
 80123de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e2:	eeb0 9b40 	vmov.f64	d9, d0
 80123e6:	d615      	bvs.n	8012414 <asin+0x48>
 80123e8:	eeb0 0b48 	vmov.f64	d0, d8
 80123ec:	f000 f9c0 	bl	8012770 <fabs>
 80123f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80123f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80123f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fc:	dd0a      	ble.n	8012414 <asin+0x48>
 80123fe:	f7fc fec7 	bl	800f190 <__errno>
 8012402:	ecbd 8b04 	vpop	{d8-d9}
 8012406:	2321      	movs	r3, #33	; 0x21
 8012408:	6003      	str	r3, [r0, #0]
 801240a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801240e:	4804      	ldr	r0, [pc, #16]	; (8012420 <asin+0x54>)
 8012410:	f7fe bdc6 	b.w	8010fa0 <nan>
 8012414:	eeb0 0b49 	vmov.f64	d0, d9
 8012418:	ecbd 8b04 	vpop	{d8-d9}
 801241c:	bd08      	pop	{r3, pc}
 801241e:	bf00      	nop
 8012420:	08012a97 	.word	0x08012a97
 8012424:	00000000 	.word	0x00000000

08012428 <sqrt>:
 8012428:	b508      	push	{r3, lr}
 801242a:	ed2d 8b04 	vpush	{d8-d9}
 801242e:	eeb0 8b40 	vmov.f64	d8, d0
 8012432:	f000 f927 	bl	8012684 <__ieee754_sqrt>
 8012436:	eeb4 8b48 	vcmp.f64	d8, d8
 801243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243e:	d60c      	bvs.n	801245a <sqrt+0x32>
 8012440:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8012460 <sqrt+0x38>
 8012444:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244c:	d505      	bpl.n	801245a <sqrt+0x32>
 801244e:	f7fc fe9f 	bl	800f190 <__errno>
 8012452:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012456:	2321      	movs	r3, #33	; 0x21
 8012458:	6003      	str	r3, [r0, #0]
 801245a:	ecbd 8b04 	vpop	{d8-d9}
 801245e:	bd08      	pop	{r3, pc}
	...

08012468 <__ieee754_asin>:
 8012468:	b538      	push	{r3, r4, r5, lr}
 801246a:	ee10 5a90 	vmov	r5, s1
 801246e:	4b82      	ldr	r3, [pc, #520]	; (8012678 <__ieee754_asin+0x210>)
 8012470:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012474:	429c      	cmp	r4, r3
 8012476:	ed2d 8b06 	vpush	{d8-d10}
 801247a:	dd19      	ble.n	80124b0 <__ieee754_asin+0x48>
 801247c:	ee10 3a10 	vmov	r3, s0
 8012480:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012484:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012488:	4323      	orrs	r3, r4
 801248a:	d10c      	bne.n	80124a6 <__ieee754_asin+0x3e>
 801248c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8012600 <__ieee754_asin+0x198>
 8012490:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012608 <__ieee754_asin+0x1a0>
 8012494:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012498:	eea0 7b06 	vfma.f64	d7, d0, d6
 801249c:	eeb0 0b47 	vmov.f64	d0, d7
 80124a0:	ecbd 8b06 	vpop	{d8-d10}
 80124a4:	bd38      	pop	{r3, r4, r5, pc}
 80124a6:	ee30 7b40 	vsub.f64	d7, d0, d0
 80124aa:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80124ae:	e7f7      	b.n	80124a0 <__ieee754_asin+0x38>
 80124b0:	4b72      	ldr	r3, [pc, #456]	; (801267c <__ieee754_asin+0x214>)
 80124b2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80124b6:	429c      	cmp	r4, r3
 80124b8:	dc0b      	bgt.n	80124d2 <__ieee754_asin+0x6a>
 80124ba:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80124be:	da52      	bge.n	8012566 <__ieee754_asin+0xfe>
 80124c0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012610 <__ieee754_asin+0x1a8>
 80124c4:	ee30 7b07 	vadd.f64	d7, d0, d7
 80124c8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80124cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d0:	dce6      	bgt.n	80124a0 <__ieee754_asin+0x38>
 80124d2:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80124d6:	f000 f94b 	bl	8012770 <fabs>
 80124da:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012618 <__ieee754_asin+0x1b0>
 80124de:	ee39 0b40 	vsub.f64	d0, d9, d0
 80124e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80124e6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012620 <__ieee754_asin+0x1b8>
 80124ea:	eeb0 0b48 	vmov.f64	d0, d8
 80124ee:	eea8 6b07 	vfma.f64	d6, d8, d7
 80124f2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012628 <__ieee754_asin+0x1c0>
 80124f6:	eea6 7b08 	vfma.f64	d7, d6, d8
 80124fa:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012630 <__ieee754_asin+0x1c8>
 80124fe:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012638 <__ieee754_asin+0x1d0>
 8012502:	eea7 6b08 	vfma.f64	d6, d7, d8
 8012506:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012640 <__ieee754_asin+0x1d8>
 801250a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801250e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012648 <__ieee754_asin+0x1e0>
 8012512:	eea7 ab08 	vfma.f64	d10, d7, d8
 8012516:	ee2a ab08 	vmul.f64	d10, d10, d8
 801251a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012650 <__ieee754_asin+0x1e8>
 801251e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8012522:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012658 <__ieee754_asin+0x1f0>
 8012526:	eea7 6b08 	vfma.f64	d6, d7, d8
 801252a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012660 <__ieee754_asin+0x1f8>
 801252e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8012532:	eea7 9b08 	vfma.f64	d9, d7, d8
 8012536:	f000 f8a5 	bl	8012684 <__ieee754_sqrt>
 801253a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 801253e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8012542:	4b4f      	ldr	r3, [pc, #316]	; (8012680 <__ieee754_asin+0x218>)
 8012544:	429c      	cmp	r4, r3
 8012546:	dd3d      	ble.n	80125c4 <__ieee754_asin+0x15c>
 8012548:	eea0 0b05 	vfma.f64	d0, d0, d5
 801254c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012668 <__ieee754_asin+0x200>
 8012550:	eea0 7b04 	vfma.f64	d7, d0, d4
 8012554:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012608 <__ieee754_asin+0x1a0>
 8012558:	ee30 0b47 	vsub.f64	d0, d0, d7
 801255c:	2d00      	cmp	r5, #0
 801255e:	bfd8      	it	le
 8012560:	eeb1 0b40 	vnegle.f64	d0, d0
 8012564:	e79c      	b.n	80124a0 <__ieee754_asin+0x38>
 8012566:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012618 <__ieee754_asin+0x1b0>
 801256a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801256e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012620 <__ieee754_asin+0x1b8>
 8012572:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012576:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012628 <__ieee754_asin+0x1c0>
 801257a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801257e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012630 <__ieee754_asin+0x1c8>
 8012582:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012586:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012640 <__ieee754_asin+0x1d8>
 801258a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801258e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012638 <__ieee754_asin+0x1d0>
 8012592:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012648 <__ieee754_asin+0x1e0>
 8012596:	eea5 6b07 	vfma.f64	d6, d5, d7
 801259a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801259e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012650 <__ieee754_asin+0x1e8>
 80125a2:	eea7 5b04 	vfma.f64	d5, d7, d4
 80125a6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012658 <__ieee754_asin+0x1f0>
 80125aa:	eea5 4b07 	vfma.f64	d4, d5, d7
 80125ae:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012660 <__ieee754_asin+0x1f8>
 80125b2:	eea4 5b07 	vfma.f64	d5, d4, d7
 80125b6:	eea5 9b07 	vfma.f64	d9, d5, d7
 80125ba:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80125be:	eea0 0b07 	vfma.f64	d0, d0, d7
 80125c2:	e76d      	b.n	80124a0 <__ieee754_asin+0x38>
 80125c4:	ec53 2b10 	vmov	r2, r3, d0
 80125c8:	2200      	movs	r2, #0
 80125ca:	ec43 2b16 	vmov	d6, r2, r3
 80125ce:	ee30 7b06 	vadd.f64	d7, d0, d6
 80125d2:	eea6 8b46 	vfms.f64	d8, d6, d6
 80125d6:	ee88 3b07 	vdiv.f64	d3, d8, d7
 80125da:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8012600 <__ieee754_asin+0x198>
 80125de:	ee30 0b00 	vadd.f64	d0, d0, d0
 80125e2:	eea3 7b44 	vfms.f64	d7, d3, d4
 80125e6:	ee90 7b05 	vfnms.f64	d7, d0, d5
 80125ea:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012670 <__ieee754_asin+0x208>
 80125ee:	eeb0 0b45 	vmov.f64	d0, d5
 80125f2:	eea6 0b44 	vfms.f64	d0, d6, d4
 80125f6:	ee37 0b40 	vsub.f64	d0, d7, d0
 80125fa:	ee35 0b40 	vsub.f64	d0, d5, d0
 80125fe:	e7ad      	b.n	801255c <__ieee754_asin+0xf4>
 8012600:	33145c07 	.word	0x33145c07
 8012604:	3c91a626 	.word	0x3c91a626
 8012608:	54442d18 	.word	0x54442d18
 801260c:	3ff921fb 	.word	0x3ff921fb
 8012610:	8800759c 	.word	0x8800759c
 8012614:	7e37e43c 	.word	0x7e37e43c
 8012618:	0dfdf709 	.word	0x0dfdf709
 801261c:	3f023de1 	.word	0x3f023de1
 8012620:	7501b288 	.word	0x7501b288
 8012624:	3f49efe0 	.word	0x3f49efe0
 8012628:	b5688f3b 	.word	0xb5688f3b
 801262c:	bfa48228 	.word	0xbfa48228
 8012630:	0e884455 	.word	0x0e884455
 8012634:	3fc9c155 	.word	0x3fc9c155
 8012638:	55555555 	.word	0x55555555
 801263c:	3fc55555 	.word	0x3fc55555
 8012640:	03eb6f7d 	.word	0x03eb6f7d
 8012644:	bfd4d612 	.word	0xbfd4d612
 8012648:	b12e9282 	.word	0xb12e9282
 801264c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012650:	1b8d0159 	.word	0x1b8d0159
 8012654:	bfe6066c 	.word	0xbfe6066c
 8012658:	9c598ac8 	.word	0x9c598ac8
 801265c:	40002ae5 	.word	0x40002ae5
 8012660:	1c8a2d4b 	.word	0x1c8a2d4b
 8012664:	c0033a27 	.word	0xc0033a27
 8012668:	33145c07 	.word	0x33145c07
 801266c:	bc91a626 	.word	0xbc91a626
 8012670:	54442d18 	.word	0x54442d18
 8012674:	3fe921fb 	.word	0x3fe921fb
 8012678:	3fefffff 	.word	0x3fefffff
 801267c:	3fdfffff 	.word	0x3fdfffff
 8012680:	3fef3332 	.word	0x3fef3332

08012684 <__ieee754_sqrt>:
 8012684:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012688:	4770      	bx	lr

0801268a <with_errno>:
 801268a:	b513      	push	{r0, r1, r4, lr}
 801268c:	4604      	mov	r4, r0
 801268e:	ed8d 0b00 	vstr	d0, [sp]
 8012692:	f7fc fd7d 	bl	800f190 <__errno>
 8012696:	ed9d 0b00 	vldr	d0, [sp]
 801269a:	6004      	str	r4, [r0, #0]
 801269c:	b002      	add	sp, #8
 801269e:	bd10      	pop	{r4, pc}

080126a0 <xflow>:
 80126a0:	b082      	sub	sp, #8
 80126a2:	b158      	cbz	r0, 80126bc <xflow+0x1c>
 80126a4:	eeb1 7b40 	vneg.f64	d7, d0
 80126a8:	ed8d 7b00 	vstr	d7, [sp]
 80126ac:	ed9d 7b00 	vldr	d7, [sp]
 80126b0:	2022      	movs	r0, #34	; 0x22
 80126b2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80126b6:	b002      	add	sp, #8
 80126b8:	f7ff bfe7 	b.w	801268a <with_errno>
 80126bc:	eeb0 7b40 	vmov.f64	d7, d0
 80126c0:	e7f2      	b.n	80126a8 <xflow+0x8>
 80126c2:	0000      	movs	r0, r0
 80126c4:	0000      	movs	r0, r0
	...

080126c8 <__math_uflow>:
 80126c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80126d0 <__math_uflow+0x8>
 80126cc:	f7ff bfe8 	b.w	80126a0 <xflow>
 80126d0:	00000000 	.word	0x00000000
 80126d4:	10000000 	.word	0x10000000

080126d8 <__math_oflow>:
 80126d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80126e0 <__math_oflow+0x8>
 80126dc:	f7ff bfe0 	b.w	80126a0 <xflow>
 80126e0:	00000000 	.word	0x00000000
 80126e4:	70000000 	.word	0x70000000

080126e8 <__math_divzero>:
 80126e8:	b082      	sub	sp, #8
 80126ea:	2800      	cmp	r0, #0
 80126ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80126f0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80126f4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80126f8:	ed8d 7b00 	vstr	d7, [sp]
 80126fc:	ed9d 0b00 	vldr	d0, [sp]
 8012700:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012710 <__math_divzero+0x28>
 8012704:	2022      	movs	r0, #34	; 0x22
 8012706:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801270a:	b002      	add	sp, #8
 801270c:	f7ff bfbd 	b.w	801268a <with_errno>
	...

08012718 <__math_invalid>:
 8012718:	eeb0 7b40 	vmov.f64	d7, d0
 801271c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012724:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012728:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801272c:	d602      	bvs.n	8012734 <__math_invalid+0x1c>
 801272e:	2021      	movs	r0, #33	; 0x21
 8012730:	f7ff bfab 	b.w	801268a <with_errno>
 8012734:	4770      	bx	lr

08012736 <__math_check_uflow>:
 8012736:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273e:	d102      	bne.n	8012746 <__math_check_uflow+0x10>
 8012740:	2022      	movs	r0, #34	; 0x22
 8012742:	f7ff bfa2 	b.w	801268a <with_errno>
 8012746:	4770      	bx	lr

08012748 <__math_check_oflow>:
 8012748:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012768 <__math_check_oflow+0x20>
 801274c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012750:	eeb4 7b46 	vcmp.f64	d7, d6
 8012754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012758:	dd02      	ble.n	8012760 <__math_check_oflow+0x18>
 801275a:	2022      	movs	r0, #34	; 0x22
 801275c:	f7ff bf95 	b.w	801268a <with_errno>
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
 8012764:	f3af 8000 	nop.w
 8012768:	ffffffff 	.word	0xffffffff
 801276c:	7fefffff 	.word	0x7fefffff

08012770 <fabs>:
 8012770:	ec51 0b10 	vmov	r0, r1, d0
 8012774:	ee10 2a10 	vmov	r2, s0
 8012778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801277c:	ec43 2b10 	vmov	d0, r2, r3
 8012780:	4770      	bx	lr
	...

08012784 <_init>:
 8012784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012786:	bf00      	nop
 8012788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801278a:	bc08      	pop	{r3}
 801278c:	469e      	mov	lr, r3
 801278e:	4770      	bx	lr

08012790 <_fini>:
 8012790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012792:	bf00      	nop
 8012794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012796:	bc08      	pop	{r3}
 8012798:	469e      	mov	lr, r3
 801279a:	4770      	bx	lr
