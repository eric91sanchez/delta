
Delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011294  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08011530  08011530  00021530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011918  08011918  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011918  08011918  00021918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011920  08011920  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011920  08011920  00021920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011924  08011924  00021924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  24000000  08011928  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  240002e8  08011c0c  000302e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000d9c  08011c0c  00030d9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bfa  00000000  00000000  00030312  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039d4  00000000  00000000  00054f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  000588e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  00059ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000045ad  00000000  00000000  0005ab58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013075  00000000  00000000  0005f105  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00160979  00000000  00000000  0007217a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d2af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  001d2b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240002e8 	.word	0x240002e8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011514 	.word	0x08011514

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240002ec 	.word	0x240002ec
 80002d4:	08011514 	.word	0x08011514

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	; 0x30
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fe:	4b73      	ldr	r3, [pc, #460]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000604:	4a71      	ldr	r2, [pc, #452]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800060e:	4b6f      	ldr	r3, [pc, #444]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061c:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000622:	4a6a      	ldr	r2, [pc, #424]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800062c:	4b67      	ldr	r3, [pc, #412]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b64      	ldr	r3, [pc, #400]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000640:	4a62      	ldr	r2, [pc, #392]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800064a:	4b60      	ldr	r3, [pc, #384]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000650:	f003 0320 	and.w	r3, r3, #32
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000658:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800065a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065e:	4a5b      	ldr	r2, [pc, #364]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000668:	4b58      	ldr	r3, [pc, #352]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b55      	ldr	r3, [pc, #340]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067c:	4a53      	ldr	r2, [pc, #332]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000686:	4b51      	ldr	r3, [pc, #324]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <MX_GPIO_Init+0x1e4>)
 8000696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069a:	4a4c      	ldr	r2, [pc, #304]	; (80007cc <MX_GPIO_Init+0x1e4>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a4:	4b49      	ldr	r3, [pc, #292]	; (80007cc <MX_GPIO_Init+0x1e4>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	4b46      	ldr	r3, [pc, #280]	; (80007cc <MX_GPIO_Init+0x1e4>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b8:	4a44      	ldr	r2, [pc, #272]	; (80007cc <MX_GPIO_Init+0x1e4>)
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c2:	4b42      	ldr	r3, [pc, #264]	; (80007cc <MX_GPIO_Init+0x1e4>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006d6:	483e      	ldr	r0, [pc, #248]	; (80007d0 <MX_GPIO_Init+0x1e8>)
 80006d8:	f007 f89e 	bl	8007818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2170      	movs	r1, #112	; 0x70
 80006e0:	483c      	ldr	r0, [pc, #240]	; (80007d4 <MX_GPIO_Init+0x1ec>)
 80006e2:	f007 f899 	bl	8007818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin 
 80006e6:	233f      	movs	r3, #63	; 0x3f
 80006e8:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ea:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <MX_GPIO_Init+0x1f0>)
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4838      	ldr	r0, [pc, #224]	; (80007dc <MX_GPIO_Init+0x1f4>)
 80006fa:	f006 fec5 	bl	8007488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000704:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <MX_GPIO_Init+0x1f8>)
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000708:	2302      	movs	r3, #2
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	482f      	ldr	r0, [pc, #188]	; (80007d0 <MX_GPIO_Init+0x1e8>)
 8000714:	f006 feb8 	bl	8007488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000718:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000722:	2301      	movs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4827      	ldr	r0, [pc, #156]	; (80007d0 <MX_GPIO_Init+0x1e8>)
 8000732:	f006 fea9 	bl	8007488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8000736:	2370      	movs	r3, #112	; 0x70
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073e:	2301      	movs	r3, #1
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4821      	ldr	r0, [pc, #132]	; (80007d4 <MX_GPIO_Init+0x1ec>)
 800074e:	f006 fe9b 	bl	8007488 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	2006      	movs	r0, #6
 8000758:	f006 fc0f 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800075c:	2006      	movs	r0, #6
 800075e:	f006 fc26 	bl	8006fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2101      	movs	r1, #1
 8000766:	2007      	movs	r0, #7
 8000768:	f006 fc07 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800076c:	2007      	movs	r0, #7
 800076e:	f006 fc1e 	bl	8006fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2101      	movs	r1, #1
 8000776:	2008      	movs	r0, #8
 8000778:	f006 fbff 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800077c:	2008      	movs	r0, #8
 800077e:	f006 fc16 	bl	8006fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	2009      	movs	r0, #9
 8000788:	f006 fbf7 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800078c:	2009      	movs	r0, #9
 800078e:	f006 fc0e 	bl	8006fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	200a      	movs	r0, #10
 8000798:	f006 fbef 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800079c:	200a      	movs	r0, #10
 800079e:	f006 fc06 	bl	8006fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2101      	movs	r1, #1
 80007a6:	2017      	movs	r0, #23
 80007a8:	f006 fbe7 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ac:	2017      	movs	r0, #23
 80007ae:	f006 fbfe 	bl	8006fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	2028      	movs	r0, #40	; 0x28
 80007b8:	f006 fbdf 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007bc:	2028      	movs	r0, #40	; 0x28
 80007be:	f006 fbf6 	bl	8006fae <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020800 	.word	0x58020800
 80007d4:	58020c00 	.word	0x58020c00
 80007d8:	11210000 	.word	0x11210000
 80007dc:	58021000 	.word	0x58021000
 80007e0:	11110000 	.word	0x11110000
 80007e4:	00000000 	.word	0x00000000

080007e8 <homingAprox>:
#include "homing.h"
uint8_t homeOk;			//Flag de aproximacion de homing
double rpm;


void homingAprox(void) {
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
	homeOk = 0;
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <homingAprox+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 80007f4:	2100      	movs	r1, #0
 80007f6:	4821      	ldr	r0, [pc, #132]	; (800087c <homingAprox+0x94>)
 80007f8:	f009 fd34 	bl	800a264 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 80007fc:	2100      	movs	r1, #0
 80007fe:	4820      	ldr	r0, [pc, #128]	; (8000880 <homingAprox+0x98>)
 8000800:	f009 fd30 	bl	800a264 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8000804:	2100      	movs	r1, #0
 8000806:	481f      	ldr	r0, [pc, #124]	; (8000884 <homingAprox+0x9c>)
 8000808:	f009 fd2c 	bl	800a264 <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 800080c:	2006      	movs	r0, #6
 800080e:	f006 fbdc 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000812:	2007      	movs	r0, #7
 8000814:	f006 fbd9 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000818:	2008      	movs	r0, #8
 800081a:	f006 fbd6 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 800081e:	2009      	movs	r0, #9
 8000820:	f006 fbd3 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000824:	200a      	movs	r0, #10
 8000826:	f006 fbd0 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 800082a:	2017      	movs	r0, #23
 800082c:	f006 fbcd 	bl	8006fca <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <homingAprox+0xa0>)
 8000838:	f006 ffee 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <homingAprox+0xa0>)
 8000844:	f006 ffe8 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <homingAprox+0xa0>)
 8000850:	f006 ffe2 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000854:	2014      	movs	r0, #20
 8000856:	f006 fa65 	bl	8006d24 <HAL_Delay>
	rpm = 0.1;
 800085a:	4a0c      	ldr	r2, [pc, #48]	; (800088c <homingAprox+0xa4>)
 800085c:	a404      	add	r4, pc, #16	; (adr r4, 8000870 <homingAprox+0x88>)
 800085e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000862:	e9c2 3400 	strd	r3, r4, [r2]
	uint32_t hom = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]


	while (homeOk == 0) {
 800086a:	e18c      	b.n	8000b86 <homingAprox+0x39e>
 800086c:	f3af 8000 	nop.w
 8000870:	9999999a 	.word	0x9999999a
 8000874:	3fb99999 	.word	0x3fb99999
 8000878:	24000370 	.word	0x24000370
 800087c:	24000698 	.word	0x24000698
 8000880:	24000618 	.word	0x24000618
 8000884:	24000558 	.word	0x24000558
 8000888:	58020800 	.word	0x58020800
 800088c:	24000378 	.word	0x24000378
		if(rpm<=4){
 8000890:	4bcb      	ldr	r3, [pc, #812]	; (8000bc0 <homingAprox+0x3d8>)
 8000892:	ed93 7b00 	vldr	d7, [r3]
 8000896:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800089a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a2:	d809      	bhi.n	80008b8 <homingAprox+0xd0>
			rpm = rpm + 0.001;
 80008a4:	4bc6      	ldr	r3, [pc, #792]	; (8000bc0 <homingAprox+0x3d8>)
 80008a6:	ed93 7b00 	vldr	d7, [r3]
 80008aa:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8000ba8 <homingAprox+0x3c0>
 80008ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008b2:	4bc3      	ldr	r3, [pc, #780]	; (8000bc0 <homingAprox+0x3d8>)
 80008b4:	ed83 7b00 	vstr	d7, [r3]
		//TIM12->CNT=0;




		periodoM[0]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 80008b8:	4bc2      	ldr	r3, [pc, #776]	; (8000bc4 <homingAprox+0x3dc>)
 80008ba:	ed93 7b00 	vldr	d7, [r3]
 80008be:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000bb0 <homingAprox+0x3c8>
 80008c2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80008c6:	4bc0      	ldr	r3, [pc, #768]	; (8000bc8 <homingAprox+0x3e0>)
 80008c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ca:	ee07 3a90 	vmov	s15, r3
 80008ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80008d6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80008da:	4bb9      	ldr	r3, [pc, #740]	; (8000bc0 <homingAprox+0x3d8>)
 80008dc:	ed93 7b00 	vldr	d7, [r3]
 80008e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008e4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8000bb8 <homingAprox+0x3d0>
 80008e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80008f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80008f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000900:	4bb2      	ldr	r3, [pc, #712]	; (8000bcc <homingAprox+0x3e4>)
 8000902:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8000906:	4baf      	ldr	r3, [pc, #700]	; (8000bc4 <homingAprox+0x3dc>)
 8000908:	ed93 7b00 	vldr	d7, [r3]
 800090c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8000bb0 <homingAprox+0x3c8>
 8000910:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000914:	4bae      	ldr	r3, [pc, #696]	; (8000bd0 <homingAprox+0x3e8>)
 8000916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000920:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000924:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000928:	4ba5      	ldr	r3, [pc, #660]	; (8000bc0 <homingAprox+0x3d8>)
 800092a:	ed93 7b00 	vldr	d7, [r3]
 800092e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000932:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8000bb8 <homingAprox+0x3d0>
 8000936:	ee27 6b06 	vmul.f64	d6, d7, d6
 800093a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800093e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000942:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000946:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800094a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800094e:	4b9f      	ldr	r3, [pc, #636]	; (8000bcc <homingAprox+0x3e4>)
 8000950:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((Fcl * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8000954:	4b9b      	ldr	r3, [pc, #620]	; (8000bc4 <homingAprox+0x3dc>)
 8000956:	ed93 7b00 	vldr	d7, [r3]
 800095a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8000bb0 <homingAprox+0x3c8>
 800095e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000962:	4b9c      	ldr	r3, [pc, #624]	; (8000bd4 <homingAprox+0x3ec>)
 8000964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800096e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000972:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000976:	4b92      	ldr	r3, [pc, #584]	; (8000bc0 <homingAprox+0x3d8>)
 8000978:	ed93 7b00 	vldr	d7, [r3]
 800097c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000980:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8000bb8 <homingAprox+0x3d0>
 8000984:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000988:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800098c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000990:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000994:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000998:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800099c:	4b8b      	ldr	r3, [pc, #556]	; (8000bcc <homingAprox+0x3e4>)
 800099e:	ed83 7b04 	vstr	d7, [r3, #16]


		if (TIM12->CNT > periodoM[0]) {
 80009a2:	4b89      	ldr	r3, [pc, #548]	; (8000bc8 <homingAprox+0x3e0>)
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80009ae:	4b87      	ldr	r3, [pc, #540]	; (8000bcc <homingAprox+0x3e4>)
 80009b0:	ed93 7b00 	vldr	d7, [r3]
 80009b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80009b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009bc:	dd0c      	ble.n	80009d8 <homingAprox+0x1f0>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80009be:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <homingAprox+0x3e4>)
 80009c0:	ed93 7b00 	vldr	d7, [r3]
 80009c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80009c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80009cc:	4b7e      	ldr	r3, [pc, #504]	; (8000bc8 <homingAprox+0x3e0>)
 80009ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009d2:	ee17 2a90 	vmov	r2, s15
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 80009d8:	4b7d      	ldr	r3, [pc, #500]	; (8000bd0 <homingAprox+0x3e8>)
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80009e4:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <homingAprox+0x3e4>)
 80009e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80009ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80009ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f2:	dd0c      	ble.n	8000a0e <homingAprox+0x226>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80009f4:	4b75      	ldr	r3, [pc, #468]	; (8000bcc <homingAprox+0x3e4>)
 80009f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80009fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80009fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a02:	4b73      	ldr	r3, [pc, #460]	; (8000bd0 <homingAprox+0x3e8>)
 8000a04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a08:	ee17 2a90 	vmov	r2, s15
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8000a0e:	4b71      	ldr	r3, [pc, #452]	; (8000bd4 <homingAprox+0x3ec>)
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a1a:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <homingAprox+0x3e4>)
 8000a1c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a28:	dd0c      	ble.n	8000a44 <homingAprox+0x25c>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8000a2a:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <homingAprox+0x3e4>)
 8000a2c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a30:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <homingAprox+0x3ec>)
 8000a3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a3e:	ee17 2a90 	vmov	r2, s15
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR =periodoM[0];
 8000a44:	4b61      	ldr	r3, [pc, #388]	; (8000bcc <homingAprox+0x3e4>)
 8000a46:	ed93 7b00 	vldr	d7, [r3]
 8000a4a:	4b5f      	ldr	r3, [pc, #380]	; (8000bc8 <homingAprox+0x3e0>)
 8000a4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a50:	ee17 2a90 	vmov	r2, s15
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000a56:	4b5c      	ldr	r3, [pc, #368]	; (8000bc8 <homingAprox+0x3e0>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a6a:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <homingAprox+0x3e0>)
 8000a6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a70:	ee17 2a90 	vmov	r2, s15
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8000a76:	4b55      	ldr	r3, [pc, #340]	; (8000bcc <homingAprox+0x3e4>)
 8000a78:	ed93 7b02 	vldr	d7, [r3, #8]
 8000a7c:	4b54      	ldr	r3, [pc, #336]	; (8000bd0 <homingAprox+0x3e8>)
 8000a7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a82:	ee17 2a90 	vmov	r2, s15
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000a88:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <homingAprox+0x3e8>)
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	ee07 3a90 	vmov	s15, r3
 8000a90:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <homingAprox+0x3e8>)
 8000a9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa2:	ee17 2a90 	vmov	r2, s15
 8000aa6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8000aa8:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <homingAprox+0x3e4>)
 8000aaa:	ed93 7b04 	vldr	d7, [r3, #16]
 8000aae:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <homingAprox+0x3ec>)
 8000ab0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ab4:	ee17 2a90 	vmov	r2, s15
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000aba:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <homingAprox+0x3ec>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ac6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000aca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <homingAprox+0x3ec>)
 8000ad0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad4:	ee17 2a90 	vmov	r2, s15
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34


		if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8000ada:	2101      	movs	r1, #1
 8000adc:	483e      	ldr	r0, [pc, #248]	; (8000bd8 <homingAprox+0x3f0>)
 8000ade:	f006 fe83 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00d      	beq.n	8000b04 <homingAprox+0x31c>
 8000ae8:	2104      	movs	r1, #4
 8000aea:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <homingAprox+0x3f0>)
 8000aec:	f006 fe7c 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <homingAprox+0x31c>
 8000af6:	2110      	movs	r1, #16
 8000af8:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <homingAprox+0x3f0>)
 8000afa:	f006 fe75 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d126      	bne.n	8000b52 <homingAprox+0x36a>
			HAL_Delay(30);
 8000b04:	201e      	movs	r0, #30
 8000b06:	f006 f90d 	bl	8006d24 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4832      	ldr	r0, [pc, #200]	; (8000bd8 <homingAprox+0x3f0>)
 8000b0e:	f006 fe6b 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <homingAprox+0x34c>
 8000b18:	2104      	movs	r1, #4
 8000b1a:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <homingAprox+0x3f0>)
 8000b1c:	f006 fe64 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <homingAprox+0x34c>
 8000b26:	2110      	movs	r1, #16
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <homingAprox+0x3f0>)
 8000b2a:	f006 fe5d 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10e      	bne.n	8000b52 <homingAprox+0x36a>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8000b34:	2100      	movs	r1, #0
 8000b36:	4829      	ldr	r0, [pc, #164]	; (8000bdc <homingAprox+0x3f4>)
 8000b38:	f009 fa82 	bl	800a040 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4828      	ldr	r0, [pc, #160]	; (8000be0 <homingAprox+0x3f8>)
 8000b40:	f009 fa7e 	bl	800a040 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8000b44:	2100      	movs	r1, #0
 8000b46:	4827      	ldr	r0, [pc, #156]	; (8000be4 <homingAprox+0x3fc>)
 8000b48:	f009 fa7a 	bl	800a040 <HAL_TIM_PWM_Stop>
				homeOk = 1;
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <homingAprox+0x400>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
			}
		}
		if(hom==0){
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d113      	bne.n	8000b80 <homingAprox+0x398>
			hom=1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3, "hola k ace\n\r", 12, 100);
 8000b5c:	2364      	movs	r3, #100	; 0x64
 8000b5e:	220c      	movs	r2, #12
 8000b60:	4922      	ldr	r1, [pc, #136]	; (8000bec <homingAprox+0x404>)
 8000b62:	4823      	ldr	r0, [pc, #140]	; (8000bf0 <homingAprox+0x408>)
 8000b64:	f00a fdfc 	bl	800b760 <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	481c      	ldr	r0, [pc, #112]	; (8000bdc <homingAprox+0x3f4>)
 8000b6c:	f009 fa10 	bl	8009f90 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000b70:	2100      	movs	r1, #0
 8000b72:	481b      	ldr	r0, [pc, #108]	; (8000be0 <homingAprox+0x3f8>)
 8000b74:	f009 fa0c 	bl	8009f90 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	481a      	ldr	r0, [pc, #104]	; (8000be4 <homingAprox+0x3fc>)
 8000b7c:	f009 fa08 	bl	8009f90 <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f006 f8cf 	bl	8006d24 <HAL_Delay>
	while (homeOk == 0) {
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <homingAprox+0x400>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f43f ae80 	beq.w	8000890 <homingAprox+0xa8>
	}
	HAL_UART_Transmit(&huart3, "Fin_Aprox\n\r", 11, 100);
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	220b      	movs	r2, #11
 8000b94:	4917      	ldr	r1, [pc, #92]	; (8000bf4 <homingAprox+0x40c>)
 8000b96:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <homingAprox+0x408>)
 8000b98:	f00a fde2 	bl	800b760 <HAL_UART_Transmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000bac:	3f50624d 	.word	0x3f50624d
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	404e0000 	.word	0x404e0000
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	40c2c000 	.word	0x40c2c000
 8000bc0:	24000378 	.word	0x24000378
 8000bc4:	24000000 	.word	0x24000000
 8000bc8:	40001800 	.word	0x40001800
 8000bcc:	240004c0 	.word	0x240004c0
 8000bd0:	40001c00 	.word	0x40001c00
 8000bd4:	40002000 	.word	0x40002000
 8000bd8:	58021000 	.word	0x58021000
 8000bdc:	24000718 	.word	0x24000718
 8000be0:	24000658 	.word	0x24000658
 8000be4:	240006d8 	.word	0x240006d8
 8000be8:	24000370 	.word	0x24000370
 8000bec:	08011530 	.word	0x08011530
 8000bf0:	24000bf0 	.word	0x24000bf0
 8000bf4:	08011540 	.word	0x08011540

08000bf8 <homingArm1>:

void homingArm1(void) {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	double flagEndStop=0;
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	f04f 0400 	mov.w	r4, #0
 8000c06:	e9c7 3400 	strd	r3, r4, [r7]
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4860      	ldr	r0, [pc, #384]	; (8000d90 <homingArm1+0x198>)
 8000c0e:	f009 fa17 	bl	800a040 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8000c12:	4a60      	ldr	r2, [pc, #384]	; (8000d94 <homingArm1+0x19c>)
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	4c5f      	ldr	r4, [pc, #380]	; (8000d98 <homingArm1+0x1a0>)
 8000c1a:	e9c2 3400 	strd	r3, r4, [r2]
	TIM12->ARR = ((Fcl * 60) / (rpm * ((TIM12->PSC) + 1) * 9600)) - 1;
 8000c1e:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <homingArm1+0x1a4>)
 8000c20:	ed93 7b00 	vldr	d7, [r3]
 8000c24:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000d80 <homingArm1+0x188>
 8000c28:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000c2c:	4b5c      	ldr	r3, [pc, #368]	; (8000da0 <homingArm1+0x1a8>)
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	3301      	adds	r3, #1
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000c3a:	4b56      	ldr	r3, [pc, #344]	; (8000d94 <homingArm1+0x19c>)
 8000c3c:	ed93 7b00 	vldr	d7, [r3]
 8000c40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c44:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000d88 <homingArm1+0x190>
 8000c48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c50:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c58:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <homingArm1+0x1a8>)
 8000c5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c5e:	ee17 2a90 	vmov	r2, s15
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 8000c64:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <homingArm1+0x1a8>)
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <homingArm1+0x1a8>)
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8000c6e:	2101      	movs	r1, #1
 8000c70:	484c      	ldr	r0, [pc, #304]	; (8000da4 <homingArm1+0x1ac>)
 8000c72:	f006 fdb9 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d114      	bne.n	8000ca6 <homingArm1+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8000c7c:	e00c      	b.n	8000c98 <homingArm1+0xa0>
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	4848      	ldr	r0, [pc, #288]	; (8000da8 <homingArm1+0x1b0>)
 8000c86:	f006 fdc7 	bl	8007818 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4840      	ldr	r0, [pc, #256]	; (8000d90 <homingArm1+0x198>)
 8000c8e:	f009 f97f 	bl	8009f90 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8000c92:	201e      	movs	r0, #30
 8000c94:	f006 f846 	bl	8006d24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4842      	ldr	r0, [pc, #264]	; (8000da4 <homingArm1+0x1ac>)
 8000c9c:	f006 fda4 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0eb      	beq.n	8000c7e <homingArm1+0x86>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cac:	483e      	ldr	r0, [pc, #248]	; (8000da8 <homingArm1+0x1b0>)
 8000cae:	f006 fdb3 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4836      	ldr	r0, [pc, #216]	; (8000d90 <homingArm1+0x198>)
 8000cb6:	f009 f96b 	bl	8009f90 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8000cba:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <homingArm1+0x1b4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8000cc0:	e056      	b.n	8000d70 <homingArm1+0x178>
		if (flagEndStop==0 && !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8000cc2:	ed97 7b00 	vldr	d7, [r7]
 8000cc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cce:	d121      	bne.n	8000d14 <homingArm1+0x11c>
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4834      	ldr	r0, [pc, #208]	; (8000da4 <homingArm1+0x1ac>)
 8000cd4:	f006 fd88 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d11a      	bne.n	8000d14 <homingArm1+0x11c>
			HAL_Delay(30);		//Para filtrar transitorio
 8000cde:	201e      	movs	r0, #30
 8000ce0:	f006 f820 	bl	8006d24 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin))) {
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	482f      	ldr	r0, [pc, #188]	; (8000da4 <homingArm1+0x1ac>)
 8000ce8:	f006 fd7e 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d110      	bne.n	8000d14 <homingArm1+0x11c>
				HAL_UART_Transmit(&huart3, "EndStop1_Pulsado\n\r", 18, 100);
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	2212      	movs	r2, #18
 8000cf6:	492e      	ldr	r1, [pc, #184]	; (8000db0 <homingArm1+0x1b8>)
 8000cf8:	482e      	ldr	r0, [pc, #184]	; (8000db4 <homingArm1+0x1bc>)
 8000cfa:	f00a fd31 	bl	800b760 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d04:	4828      	ldr	r0, [pc, #160]	; (8000da8 <homingArm1+0x1b0>)
 8000d06:	f006 fd87 	bl	8007818 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	4c2a      	ldr	r4, [pc, #168]	; (8000db8 <homingArm1+0x1c0>)
 8000d10:	e9c7 3400 	strd	r3, r4, [r7]
			}
		}
		if (flagEndStop==1 && HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 8000d14:	ed97 7b00 	vldr	d7, [r7]
 8000d18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d1c:	eeb4 7b46 	vcmp.f64	d7, d6
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	d124      	bne.n	8000d70 <homingArm1+0x178>
 8000d26:	2101      	movs	r1, #1
 8000d28:	481e      	ldr	r0, [pc, #120]	; (8000da4 <homingArm1+0x1ac>)
 8000d2a:	f006 fd5d 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01d      	beq.n	8000d70 <homingArm1+0x178>
			HAL_Delay(30);		//Para filtrar transitorio
 8000d34:	201e      	movs	r0, #30
 8000d36:	f005 fff5 	bl	8006d24 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4819      	ldr	r0, [pc, #100]	; (8000da4 <homingArm1+0x1ac>)
 8000d3e:	f006 fd53 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d013      	beq.n	8000d70 <homingArm1+0x178>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <homingArm1+0x198>)
 8000d4c:	f009 f978 	bl	800a040 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm1\n\r", 9, 100);
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	2209      	movs	r2, #9
 8000d54:	4919      	ldr	r1, [pc, #100]	; (8000dbc <homingArm1+0x1c4>)
 8000d56:	4817      	ldr	r0, [pc, #92]	; (8000db4 <homingArm1+0x1bc>)
 8000d58:	f00a fd02 	bl	800b760 <HAL_UART_Transmit>
				titha1 = 0;
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <homingArm1+0x1c8>)
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	f04f 0400 	mov.w	r4, #0
 8000d66:	e9c2 3400 	strd	r3, r4, [r2]
				homeOk = 1;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <homingArm1+0x1b4>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <homingArm1+0x1b4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0a4      	beq.n	8000cc2 <homingArm1+0xca>
			}
		}
	}
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	00000000 	.word	0x00000000
 8000d84:	404e0000 	.word	0x404e0000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40c2c000 	.word	0x40c2c000
 8000d90:	24000718 	.word	0x24000718
 8000d94:	24000378 	.word	0x24000378
 8000d98:	3fe00000 	.word	0x3fe00000
 8000d9c:	24000000 	.word	0x24000000
 8000da0:	40001800 	.word	0x40001800
 8000da4:	58021000 	.word	0x58021000
 8000da8:	58020800 	.word	0x58020800
 8000dac:	24000370 	.word	0x24000370
 8000db0:	0801154c 	.word	0x0801154c
 8000db4:	24000bf0 	.word	0x24000bf0
 8000db8:	3ff00000 	.word	0x3ff00000
 8000dbc:	08011560 	.word	0x08011560
 8000dc0:	24000450 	.word	0x24000450
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <homingArm2>:

void homingArm2(void) {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	f04f 0400 	mov.w	r4, #0
 8000dd6:	e9c7 3400 	strd	r3, r4, [r7]
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4874      	ldr	r0, [pc, #464]	; (8000fb0 <homingArm2+0x1e8>)
 8000dde:	f009 f92f 	bl	800a040 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8000de2:	4a74      	ldr	r2, [pc, #464]	; (8000fb4 <homingArm2+0x1ec>)
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	4c73      	ldr	r4, [pc, #460]	; (8000fb8 <homingArm2+0x1f0>)
 8000dea:	e9c2 3400 	strd	r3, r4, [r2]
	TIM13->ARR = ((Fcl * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 8000dee:	4b73      	ldr	r3, [pc, #460]	; (8000fbc <homingArm2+0x1f4>)
 8000df0:	ed93 7b00 	vldr	d7, [r3]
 8000df4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8000fa0 <homingArm2+0x1d8>
 8000df8:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000dfc:	4b70      	ldr	r3, [pc, #448]	; (8000fc0 <homingArm2+0x1f8>)
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	3301      	adds	r3, #1
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e0a:	4b6a      	ldr	r3, [pc, #424]	; (8000fb4 <homingArm2+0x1ec>)
 8000e0c:	ed93 7b00 	vldr	d7, [r3]
 8000e10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e14:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8000fa8 <homingArm2+0x1e0>
 8000e18:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e1c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e20:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e28:	4b65      	ldr	r3, [pc, #404]	; (8000fc0 <homingArm2+0x1f8>)
 8000e2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e2e:	ee17 2a90 	vmov	r2, s15
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8000e34:	4b62      	ldr	r3, [pc, #392]	; (8000fc0 <homingArm2+0x1f8>)
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	4a61      	ldr	r2, [pc, #388]	; (8000fc0 <homingArm2+0x1f8>)
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 8000e3e:	2104      	movs	r1, #4
 8000e40:	4860      	ldr	r0, [pc, #384]	; (8000fc4 <homingArm2+0x1fc>)
 8000e42:	f006 fcd1 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d114      	bne.n	8000e76 <homingArm2+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8000e4c:	e00c      	b.n	8000e68 <homingArm2+0xa0>
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e54:	485c      	ldr	r0, [pc, #368]	; (8000fc8 <homingArm2+0x200>)
 8000e56:	f006 fcdf 	bl	8007818 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4854      	ldr	r0, [pc, #336]	; (8000fb0 <homingArm2+0x1e8>)
 8000e5e:	f009 f897 	bl	8009f90 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8000e62:	201e      	movs	r0, #30
 8000e64:	f005 ff5e 	bl	8006d24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4856      	ldr	r0, [pc, #344]	; (8000fc4 <homingArm2+0x1fc>)
 8000e6c:	f006 fcbc 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0eb      	beq.n	8000e4e <homingArm2+0x86>
		}

	}
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8000e76:	2100      	movs	r1, #0
 8000e78:	484d      	ldr	r0, [pc, #308]	; (8000fb0 <homingArm2+0x1e8>)
 8000e7a:	f009 f8e1 	bl	800a040 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8000e7e:	4a4d      	ldr	r2, [pc, #308]	; (8000fb4 <homingArm2+0x1ec>)
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	4c4c      	ldr	r4, [pc, #304]	; (8000fb8 <homingArm2+0x1f0>)
 8000e86:	e9c2 3400 	strd	r3, r4, [r2]
	TIM13->ARR = ((Fcl * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <homingArm2+0x1f4>)
 8000e8c:	ed93 7b00 	vldr	d7, [r3]
 8000e90:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000fa0 <homingArm2+0x1d8>
 8000e94:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000e98:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <homingArm2+0x1f8>)
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <homingArm2+0x1ec>)
 8000ea8:	ed93 7b00 	vldr	d7, [r3]
 8000eac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000eb0:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000fa8 <homingArm2+0x1e0>
 8000eb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000eb8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ebc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ec0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <homingArm2+0x1f8>)
 8000ec6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eca:	ee17 2a90 	vmov	r2, s15
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8000ed0:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <homingArm2+0x1f8>)
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <homingArm2+0x1f8>)
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee0:	4839      	ldr	r0, [pc, #228]	; (8000fc8 <homingArm2+0x200>)
 8000ee2:	f006 fc99 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4831      	ldr	r0, [pc, #196]	; (8000fb0 <homingArm2+0x1e8>)
 8000eea:	f009 f851 	bl	8009f90 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <homingArm2+0x204>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8000ef4:	e049      	b.n	8000f8a <homingArm2+0x1c2>
		if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4832      	ldr	r0, [pc, #200]	; (8000fc4 <homingArm2+0x1fc>)
 8000efa:	f006 fc75 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d114      	bne.n	8000f2e <homingArm2+0x166>
			HAL_Delay(30);		//Para filtrar transitorio
 8000f04:	201e      	movs	r0, #30
 8000f06:	f005 ff0d 	bl	8006d24 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin))) {
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <homingArm2+0x1fc>)
 8000f0e:	f006 fc6b 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10a      	bne.n	8000f2e <homingArm2+0x166>
				HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	482a      	ldr	r0, [pc, #168]	; (8000fc8 <homingArm2+0x200>)
 8000f20:	f006 fc7a 	bl	8007818 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	4c29      	ldr	r4, [pc, #164]	; (8000fd0 <homingArm2+0x208>)
 8000f2a:	e9c7 3400 	strd	r3, r4, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 8000f2e:	ed97 7b00 	vldr	d7, [r7]
 8000f32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f36:	eeb4 7b46 	vcmp.f64	d7, d6
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	d124      	bne.n	8000f8a <homingArm2+0x1c2>
 8000f40:	2104      	movs	r1, #4
 8000f42:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <homingArm2+0x1fc>)
 8000f44:	f006 fc50 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01d      	beq.n	8000f8a <homingArm2+0x1c2>
			HAL_Delay(30);		//Para filtrar transitorio
 8000f4e:	201e      	movs	r0, #30
 8000f50:	f005 fee8 	bl	8006d24 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 8000f54:	2104      	movs	r1, #4
 8000f56:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <homingArm2+0x1fc>)
 8000f58:	f006 fc46 	bl	80077e8 <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d013      	beq.n	8000f8a <homingArm2+0x1c2>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8000f62:	2100      	movs	r1, #0
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <homingArm2+0x1e8>)
 8000f66:	f009 f86b 	bl	800a040 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm2\n\r", 9, 100);
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	2209      	movs	r2, #9
 8000f6e:	4919      	ldr	r1, [pc, #100]	; (8000fd4 <homingArm2+0x20c>)
 8000f70:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <homingArm2+0x210>)
 8000f72:	f00a fbf5 	bl	800b760 <HAL_UART_Transmit>
				titha2 = 0;
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <homingArm2+0x214>)
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	f04f 0400 	mov.w	r4, #0
 8000f80:	e9c2 3400 	strd	r3, r4, [r2]
				homeOk = 1;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <homingArm2+0x204>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <homingArm2+0x204>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0b1      	beq.n	8000ef6 <homingArm2+0x12e>
			}
		}
	}
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	404e0000 	.word	0x404e0000
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	40c2c000 	.word	0x40c2c000
 8000fb0:	24000658 	.word	0x24000658
 8000fb4:	24000378 	.word	0x24000378
 8000fb8:	3fe00000 	.word	0x3fe00000
 8000fbc:	24000000 	.word	0x24000000
 8000fc0:	40001c00 	.word	0x40001c00
 8000fc4:	58021000 	.word	0x58021000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	24000370 	.word	0x24000370
 8000fd0:	3ff00000 	.word	0x3ff00000
 8000fd4:	0801156c 	.word	0x0801156c
 8000fd8:	24000bf0 	.word	0x24000bf0
 8000fdc:	240004b8 	.word	0x240004b8

08000fe0 <homingArm3>:

void homingArm3(void) {
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	f04f 0400 	mov.w	r4, #0
 8000fee:	e9c7 3400 	strd	r3, r4, [r7]
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4860      	ldr	r0, [pc, #384]	; (8001178 <homingArm3+0x198>)
 8000ff6:	f009 f823 	bl	800a040 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8000ffa:	4a60      	ldr	r2, [pc, #384]	; (800117c <homingArm3+0x19c>)
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	4c5f      	ldr	r4, [pc, #380]	; (8001180 <homingArm3+0x1a0>)
 8001002:	e9c2 3400 	strd	r3, r4, [r2]
	TIM14->ARR = ((Fcl * 60) / (rpm * ((TIM14->PSC) + 1) * 9600)) - 1;
 8001006:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <homingArm3+0x1a4>)
 8001008:	ed93 7b00 	vldr	d7, [r3]
 800100c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001168 <homingArm3+0x188>
 8001010:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001014:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <homingArm3+0x1a8>)
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	3301      	adds	r3, #1
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <homingArm3+0x19c>)
 8001024:	ed93 7b00 	vldr	d7, [r3]
 8001028:	ee26 7b07 	vmul.f64	d7, d6, d7
 800102c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001170 <homingArm3+0x190>
 8001030:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001034:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001038:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800103c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <homingArm3+0x1a8>)
 8001042:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001046:	ee17 2a90 	vmov	r2, s15
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 800104c:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <homingArm3+0x1a8>)
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <homingArm3+0x1a8>)
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001056:	2110      	movs	r1, #16
 8001058:	484c      	ldr	r0, [pc, #304]	; (800118c <homingArm3+0x1ac>)
 800105a:	f006 fbc5 	bl	80077e8 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d114      	bne.n	800108e <homingArm3+0xae>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 8001064:	e00c      	b.n	8001080 <homingArm3+0xa0>
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	4848      	ldr	r0, [pc, #288]	; (8001190 <homingArm3+0x1b0>)
 800106e:	f006 fbd3 	bl	8007818 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001072:	2100      	movs	r1, #0
 8001074:	4840      	ldr	r0, [pc, #256]	; (8001178 <homingArm3+0x198>)
 8001076:	f008 ff8b 	bl	8009f90 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 800107a:	201e      	movs	r0, #30
 800107c:	f005 fe52 	bl	8006d24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 8001080:	2110      	movs	r1, #16
 8001082:	4842      	ldr	r0, [pc, #264]	; (800118c <homingArm3+0x1ac>)
 8001084:	f006 fbb0 	bl	80077e8 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0eb      	beq.n	8001066 <homingArm3+0x86>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001094:	483e      	ldr	r0, [pc, #248]	; (8001190 <homingArm3+0x1b0>)
 8001096:	f006 fbbf 	bl	8007818 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800109a:	2100      	movs	r1, #0
 800109c:	4836      	ldr	r0, [pc, #216]	; (8001178 <homingArm3+0x198>)
 800109e:	f008 ff77 	bl	8009f90 <HAL_TIM_PWM_Start>
	homeOk = 0;
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <homingArm3+0x1b4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80010a8:	e049      	b.n	800113e <homingArm3+0x15e>
		if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80010aa:	2110      	movs	r1, #16
 80010ac:	4837      	ldr	r0, [pc, #220]	; (800118c <homingArm3+0x1ac>)
 80010ae:	f006 fb9b 	bl	80077e8 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d114      	bne.n	80010e2 <homingArm3+0x102>
			HAL_Delay(30);		//Para filtrar transitorio
 80010b8:	201e      	movs	r0, #30
 80010ba:	f005 fe33 	bl	8006d24 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80010be:	2110      	movs	r1, #16
 80010c0:	4832      	ldr	r0, [pc, #200]	; (800118c <homingArm3+0x1ac>)
 80010c2:	f006 fb91 	bl	80077e8 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10a      	bne.n	80010e2 <homingArm3+0x102>
				HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d2:	482f      	ldr	r0, [pc, #188]	; (8001190 <homingArm3+0x1b0>)
 80010d4:	f006 fba0 	bl	8007818 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	4c2e      	ldr	r4, [pc, #184]	; (8001198 <homingArm3+0x1b8>)
 80010de:	e9c7 3400 	strd	r3, r4, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 80010e2:	ed97 7b00 	vldr	d7, [r7]
 80010e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80010ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d124      	bne.n	800113e <homingArm3+0x15e>
 80010f4:	2110      	movs	r1, #16
 80010f6:	4825      	ldr	r0, [pc, #148]	; (800118c <homingArm3+0x1ac>)
 80010f8:	f006 fb76 	bl	80077e8 <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01d      	beq.n	800113e <homingArm3+0x15e>
			HAL_Delay(30);		//Para filtrar transitorio
 8001102:	201e      	movs	r0, #30
 8001104:	f005 fe0e 	bl	8006d24 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 8001108:	2110      	movs	r1, #16
 800110a:	4820      	ldr	r0, [pc, #128]	; (800118c <homingArm3+0x1ac>)
 800110c:	f006 fb6c 	bl	80077e8 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d013      	beq.n	800113e <homingArm3+0x15e>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8001116:	2100      	movs	r1, #0
 8001118:	4817      	ldr	r0, [pc, #92]	; (8001178 <homingArm3+0x198>)
 800111a:	f008 ff91 	bl	800a040 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3, "FinArm3\n\r", 9, 100);
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	2209      	movs	r2, #9
 8001122:	491e      	ldr	r1, [pc, #120]	; (800119c <homingArm3+0x1bc>)
 8001124:	481e      	ldr	r0, [pc, #120]	; (80011a0 <homingArm3+0x1c0>)
 8001126:	f00a fb1b 	bl	800b760 <HAL_UART_Transmit>
				titha3 = 0;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <homingArm3+0x1c4>)
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	f04f 0400 	mov.w	r4, #0
 8001134:	e9c2 3400 	strd	r3, r4, [r2]
				homeOk = 1;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <homingArm3+0x1b4>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <homingArm3+0x1b4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0b1      	beq.n	80010aa <homingArm3+0xca>
			}
		}
	}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8001146:	2100      	movs	r1, #0
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <homingArm3+0x1c8>)
 800114a:	f009 f81d 	bl	800a188 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 800114e:	2100      	movs	r1, #0
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <homingArm3+0x1cc>)
 8001152:	f009 f819 	bl	800a188 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8001156:	2100      	movs	r1, #0
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <homingArm3+0x1d0>)
 800115a:	f009 f815 	bl	800a188 <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior*/
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	00000000 	.word	0x00000000
 800116c:	404e0000 	.word	0x404e0000
 8001170:	00000000 	.word	0x00000000
 8001174:	40c2c000 	.word	0x40c2c000
 8001178:	240006d8 	.word	0x240006d8
 800117c:	24000378 	.word	0x24000378
 8001180:	3fe00000 	.word	0x3fe00000
 8001184:	24000000 	.word	0x24000000
 8001188:	40002000 	.word	0x40002000
 800118c:	58021000 	.word	0x58021000
 8001190:	58020800 	.word	0x58020800
 8001194:	24000370 	.word	0x24000370
 8001198:	3ff00000 	.word	0x3ff00000
 800119c:	08011578 	.word	0x08011578
 80011a0:	24000bf0 	.word	0x24000bf0
 80011a4:	240003c0 	.word	0x240003c0
 80011a8:	24000698 	.word	0x24000698
 80011ac:	24000618 	.word	0x24000618
 80011b0:	24000558 	.word	0x24000558

080011b4 <interpretaComando>:


float auxM;
uint8_t auxString[10];

void interpretaComando(void){
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80011ba:	4bc0      	ldr	r3, [pc, #768]	; (80014bc <interpretaComando+0x308>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3b48      	subs	r3, #72	; 0x48
 80011c0:	2b2a      	cmp	r3, #42	; 0x2a
 80011c2:	f200 822e 	bhi.w	8001622 <interpretaComando+0x46e>
 80011c6:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <interpretaComando+0x18>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	080015b7 	.word	0x080015b7
 80011d0:	08001623 	.word	0x08001623
 80011d4:	08001623 	.word	0x08001623
 80011d8:	08001623 	.word	0x08001623
 80011dc:	08001623 	.word	0x08001623
 80011e0:	08001279 	.word	0x08001279
 80011e4:	08001623 	.word	0x08001623
 80011e8:	08001623 	.word	0x08001623
 80011ec:	080013a1 	.word	0x080013a1
 80011f0:	08001623 	.word	0x08001623
 80011f4:	08001615 	.word	0x08001615
 80011f8:	08001623 	.word	0x08001623
 80011fc:	08001623 	.word	0x08001623
 8001200:	08001623 	.word	0x08001623
 8001204:	08001623 	.word	0x08001623
 8001208:	08001623 	.word	0x08001623
 800120c:	08001623 	.word	0x08001623
 8001210:	08001623 	.word	0x08001623
 8001214:	08001623 	.word	0x08001623
 8001218:	08001623 	.word	0x08001623
 800121c:	08001623 	.word	0x08001623
 8001220:	08001623 	.word	0x08001623
 8001224:	08001623 	.word	0x08001623
 8001228:	08001623 	.word	0x08001623
 800122c:	08001623 	.word	0x08001623
 8001230:	08001623 	.word	0x08001623
 8001234:	08001623 	.word	0x08001623
 8001238:	08001623 	.word	0x08001623
 800123c:	08001623 	.word	0x08001623
 8001240:	08001623 	.word	0x08001623
 8001244:	08001623 	.word	0x08001623
 8001248:	08001623 	.word	0x08001623
 800124c:	080015b7 	.word	0x080015b7
 8001250:	08001623 	.word	0x08001623
 8001254:	08001623 	.word	0x08001623
 8001258:	08001623 	.word	0x08001623
 800125c:	08001623 	.word	0x08001623
 8001260:	08001279 	.word	0x08001279
 8001264:	08001623 	.word	0x08001623
 8001268:	08001623 	.word	0x08001623
 800126c:	080013a1 	.word	0x080013a1
 8001270:	08001623 	.word	0x08001623
 8001274:	08001615 	.word	0x08001615
	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 8001278:	4b90      	ldr	r3, [pc, #576]	; (80014bc <interpretaComando+0x308>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	2b32      	cmp	r3, #50	; 0x32
 800127e:	d037      	beq.n	80012f0 <interpretaComando+0x13c>
 8001280:	2b33      	cmp	r3, #51	; 0x33
 8001282:	d05d      	beq.n	8001340 <interpretaComando+0x18c>
 8001284:	2b31      	cmp	r3, #49	; 0x31
 8001286:	f040 8083 	bne.w	8001390 <interpretaComando+0x1dc>
		case '1':
			HAL_UART_Transmit(&huart3, "Motor1\n\r", 8, 100);
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	2208      	movs	r2, #8
 800128e:	498c      	ldr	r1, [pc, #560]	; (80014c0 <interpretaComando+0x30c>)
 8001290:	488c      	ldr	r0, [pc, #560]	; (80014c4 <interpretaComando+0x310>)
 8001292:	f00a fa65 	bl	800b760 <HAL_UART_Transmit>
			auxM =  strtod(&rx_buffer[2], NULL);
 8001296:	2100      	movs	r1, #0
 8001298:	488b      	ldr	r0, [pc, #556]	; (80014c8 <interpretaComando+0x314>)
 800129a:	f00e f9a5 	bl	800f5e8 <strtod>
 800129e:	eeb0 7b40 	vmov.f64	d7, d0
 80012a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a6:	4b89      	ldr	r3, [pc, #548]	; (80014cc <interpretaComando+0x318>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
			if(auxM>=0 && auxM<=90){
 80012ac:	4b87      	ldr	r3, [pc, #540]	; (80014cc <interpretaComando+0x318>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	db12      	blt.n	80012e2 <interpretaComando+0x12e>
 80012bc:	4b83      	ldr	r3, [pc, #524]	; (80014cc <interpretaComando+0x318>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80014d0 <interpretaComando+0x31c>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d808      	bhi.n	80012e2 <interpretaComando+0x12e>
				titha1 = auxM;
 80012d0:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <interpretaComando+0x318>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012da:	4b7e      	ldr	r3, [pc, #504]	; (80014d4 <interpretaComando+0x320>)
 80012dc:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 80012e0:	e05d      	b.n	800139e <interpretaComando+0x1ea>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	220a      	movs	r2, #10
 80012e6:	497c      	ldr	r1, [pc, #496]	; (80014d8 <interpretaComando+0x324>)
 80012e8:	4876      	ldr	r0, [pc, #472]	; (80014c4 <interpretaComando+0x310>)
 80012ea:	f00a fa39 	bl	800b760 <HAL_UART_Transmit>
			break;
 80012ee:	e056      	b.n	800139e <interpretaComando+0x1ea>
		case '2':
			HAL_UART_Transmit(&huart3, "Motor2\n\r", 8, 100);
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	2208      	movs	r2, #8
 80012f4:	4979      	ldr	r1, [pc, #484]	; (80014dc <interpretaComando+0x328>)
 80012f6:	4873      	ldr	r0, [pc, #460]	; (80014c4 <interpretaComando+0x310>)
 80012f8:	f00a fa32 	bl	800b760 <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){
 80012fc:	4b73      	ldr	r3, [pc, #460]	; (80014cc <interpretaComando+0x318>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	db12      	blt.n	8001332 <interpretaComando+0x17e>
 800130c:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <interpretaComando+0x318>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80014d0 <interpretaComando+0x31c>
 8001316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	d808      	bhi.n	8001332 <interpretaComando+0x17e>
				titha2 = auxM;
 8001320:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <interpretaComando+0x318>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800132a:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <interpretaComando+0x32c>)
 800132c:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 8001330:	e035      	b.n	800139e <interpretaComando+0x1ea>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 8001332:	2364      	movs	r3, #100	; 0x64
 8001334:	220a      	movs	r2, #10
 8001336:	4968      	ldr	r1, [pc, #416]	; (80014d8 <interpretaComando+0x324>)
 8001338:	4862      	ldr	r0, [pc, #392]	; (80014c4 <interpretaComando+0x310>)
 800133a:	f00a fa11 	bl	800b760 <HAL_UART_Transmit>
			break;
 800133e:	e02e      	b.n	800139e <interpretaComando+0x1ea>
		case '3':
			HAL_UART_Transmit(&huart3, "Motor3\n\r", 8, 100);
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	2208      	movs	r2, #8
 8001344:	4967      	ldr	r1, [pc, #412]	; (80014e4 <interpretaComando+0x330>)
 8001346:	485f      	ldr	r0, [pc, #380]	; (80014c4 <interpretaComando+0x310>)
 8001348:	f00a fa0a 	bl	800b760 <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){
 800134c:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <interpretaComando+0x318>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	db12      	blt.n	8001382 <interpretaComando+0x1ce>
 800135c:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <interpretaComando+0x318>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80014d0 <interpretaComando+0x31c>
 8001366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	d808      	bhi.n	8001382 <interpretaComando+0x1ce>
				titha3 = auxM;
 8001370:	4b56      	ldr	r3, [pc, #344]	; (80014cc <interpretaComando+0x318>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800137a:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <interpretaComando+0x334>)
 800137c:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
			}
			break;
 8001380:	e00d      	b.n	800139e <interpretaComando+0x1ea>
				HAL_UART_Transmit(&huart3, "ErrorPos\n\r", 10, 100);
 8001382:	2364      	movs	r3, #100	; 0x64
 8001384:	220a      	movs	r2, #10
 8001386:	4954      	ldr	r1, [pc, #336]	; (80014d8 <interpretaComando+0x324>)
 8001388:	484e      	ldr	r0, [pc, #312]	; (80014c4 <interpretaComando+0x310>)
 800138a:	f00a f9e9 	bl	800b760 <HAL_UART_Transmit>
			break;
 800138e:	e006      	b.n	800139e <interpretaComando+0x1ea>
		default:
			HAL_UART_Transmit(&huart3, "ErrorMotor\n\r", 12, 100);
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	220c      	movs	r2, #12
 8001394:	4955      	ldr	r1, [pc, #340]	; (80014ec <interpretaComando+0x338>)
 8001396:	484b      	ldr	r0, [pc, #300]	; (80014c4 <interpretaComando+0x310>)
 8001398:	f00a f9e2 	bl	800b760 <HAL_UART_Transmit>
			break;
 800139c:	bf00      	nop
		}
		break;
 800139e:	e147      	b.n	8001630 <interpretaComando+0x47c>
	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3, "Punto\n\r", 7, 100);
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	2207      	movs	r2, #7
 80013a4:	4952      	ldr	r1, [pc, #328]	; (80014f0 <interpretaComando+0x33c>)
 80013a6:	4847      	ldr	r0, [pc, #284]	; (80014c4 <interpretaComando+0x310>)
 80013a8:	f00a f9da 	bl	800b760 <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <interpretaComando+0x340>)
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	f04f 0400 	mov.w	r4, #0
 80013b6:	e9c2 3400 	strd	r3, r4, [r2]
		uint8_t i = 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 80013c2:	e0da      	b.n	800157a <interpretaComando+0x3c6>
			if(rx_buffer[i] == 'x'){
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <interpretaComando+0x308>)
 80013c8:	5cd3      	ldrb	r3, [r2, r3]
 80013ca:	2b78      	cmp	r3, #120	; 0x78
 80013cc:	d135      	bne.n	800143a <interpretaComando+0x286>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013ce:	e00c      	b.n	80013ea <interpretaComando+0x236>
					auxString[j] = rx_buffer[i+1];
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	4939      	ldr	r1, [pc, #228]	; (80014bc <interpretaComando+0x308>)
 80013d8:	5c89      	ldrb	r1, [r1, r2]
 80013da:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <interpretaComando+0x344>)
 80013dc:	54d1      	strb	r1, [r2, r3]
					j++;
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	3301      	adds	r3, #1
 80013e2:	73bb      	strb	r3, [r7, #14]
					i++;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a33      	ldr	r2, [pc, #204]	; (80014bc <interpretaComando+0x308>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d1ec      	bne.n	80013d0 <interpretaComando+0x21c>
				}
				Pxfin = strtod(&auxString[0], NULL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	483f      	ldr	r0, [pc, #252]	; (80014f8 <interpretaComando+0x344>)
 80013fa:	f00e f8f5 	bl	800f5e8 <strtod>
 80013fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001402:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <interpretaComando+0x348>)
 8001408:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	e007      	b.n	8001422 <interpretaComando+0x26e>
					auxString[k] = 0;
 8001412:	4a39      	ldr	r2, [pc, #228]	; (80014f8 <interpretaComando+0x344>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4413      	add	r3, r2
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3301      	adds	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b0a      	cmp	r3, #10
 8001426:	ddf4      	ble.n	8001412 <interpretaComando+0x25e>
				}
				j=0;
 8001428:	2300      	movs	r3, #0
 800142a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoX_ok\n\r", 11, 100);
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	220b      	movs	r2, #11
 8001430:	4933      	ldr	r1, [pc, #204]	; (8001500 <interpretaComando+0x34c>)
 8001432:	4824      	ldr	r0, [pc, #144]	; (80014c4 <interpretaComando+0x310>)
 8001434:	f00a f994 	bl	800b760 <HAL_UART_Transmit>
 8001438:	e09c      	b.n	8001574 <interpretaComando+0x3c0>
			}
			else if(rx_buffer[i] == 'y'){
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <interpretaComando+0x308>)
 800143e:	5cd3      	ldrb	r3, [r2, r3]
 8001440:	2b79      	cmp	r3, #121	; 0x79
 8001442:	d135      	bne.n	80014b0 <interpretaComando+0x2fc>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001444:	e00c      	b.n	8001460 <interpretaComando+0x2ac>
					auxString[j] = rx_buffer[i+1];
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	7bbb      	ldrb	r3, [r7, #14]
 800144c:	491b      	ldr	r1, [pc, #108]	; (80014bc <interpretaComando+0x308>)
 800144e:	5c89      	ldrb	r1, [r1, r2]
 8001450:	4a29      	ldr	r2, [pc, #164]	; (80014f8 <interpretaComando+0x344>)
 8001452:	54d1      	strb	r1, [r2, r3]
					j++;
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	3301      	adds	r3, #1
 8001458:	73bb      	strb	r3, [r7, #14]
					i++;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3301      	adds	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	3301      	adds	r3, #1
 8001464:	4a15      	ldr	r2, [pc, #84]	; (80014bc <interpretaComando+0x308>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	2b20      	cmp	r3, #32
 800146a:	d1ec      	bne.n	8001446 <interpretaComando+0x292>
				}
				Pyfin = strtod(&auxString[0], NULL);
 800146c:	2100      	movs	r1, #0
 800146e:	4822      	ldr	r0, [pc, #136]	; (80014f8 <interpretaComando+0x344>)
 8001470:	f00e f8ba 	bl	800f5e8 <strtod>
 8001474:	eeb0 7b40 	vmov.f64	d7, d0
 8001478:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <interpretaComando+0x350>)
 800147e:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	e007      	b.n	8001498 <interpretaComando+0x2e4>
					auxString[k] = 0;
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <interpretaComando+0x344>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3301      	adds	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b0a      	cmp	r3, #10
 800149c:	ddf4      	ble.n	8001488 <interpretaComando+0x2d4>
				}
				j=0;
 800149e:	2300      	movs	r3, #0
 80014a0:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoY_ok\n\r", 11, 100);
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	220b      	movs	r2, #11
 80014a6:	4918      	ldr	r1, [pc, #96]	; (8001508 <interpretaComando+0x354>)
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <interpretaComando+0x310>)
 80014aa:	f00a f959 	bl	800b760 <HAL_UART_Transmit>
 80014ae:	e061      	b.n	8001574 <interpretaComando+0x3c0>
			}
			else if(rx_buffer[i] == 'z'){
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	4a02      	ldr	r2, [pc, #8]	; (80014bc <interpretaComando+0x308>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	2b7a      	cmp	r3, #122	; 0x7a
 80014b8:	d15c      	bne.n	8001574 <interpretaComando+0x3c0>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014ba:	e034      	b.n	8001526 <interpretaComando+0x372>
 80014bc:	240003f8 	.word	0x240003f8
 80014c0:	08011584 	.word	0x08011584
 80014c4:	24000bf0 	.word	0x24000bf0
 80014c8:	240003fa 	.word	0x240003fa
 80014cc:	2400038c 	.word	0x2400038c
 80014d0:	42b40000 	.word	0x42b40000
 80014d4:	24000450 	.word	0x24000450
 80014d8:	08011590 	.word	0x08011590
 80014dc:	0801159c 	.word	0x0801159c
 80014e0:	240004b8 	.word	0x240004b8
 80014e4:	080115a8 	.word	0x080115a8
 80014e8:	240003c0 	.word	0x240003c0
 80014ec:	080115b4 	.word	0x080115b4
 80014f0:	080115c4 	.word	0x080115c4
 80014f4:	24000328 	.word	0x24000328
 80014f8:	24000380 	.word	0x24000380
 80014fc:	240003cc 	.word	0x240003cc
 8001500:	080115cc 	.word	0x080115cc
 8001504:	24000420 	.word	0x24000420
 8001508:	080115d8 	.word	0x080115d8
					auxString[j] = rx_buffer[i+1];
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	4949      	ldr	r1, [pc, #292]	; (8001638 <interpretaComando+0x484>)
 8001514:	5c89      	ldrb	r1, [r1, r2]
 8001516:	4a49      	ldr	r2, [pc, #292]	; (800163c <interpretaComando+0x488>)
 8001518:	54d1      	strb	r1, [r2, r3]
					j++;
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	3301      	adds	r3, #1
 800151e:	73bb      	strb	r3, [r7, #14]
					i++;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	3301      	adds	r3, #1
 800152a:	4a43      	ldr	r2, [pc, #268]	; (8001638 <interpretaComando+0x484>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	2b20      	cmp	r3, #32
 8001530:	d1ec      	bne.n	800150c <interpretaComando+0x358>
				}
				Pzfin = strtod(&auxString[0], NULL);
 8001532:	2100      	movs	r1, #0
 8001534:	4841      	ldr	r0, [pc, #260]	; (800163c <interpretaComando+0x488>)
 8001536:	f00e f857 	bl	800f5e8 <strtod>
 800153a:	eeb0 7b40 	vmov.f64	d7, d0
 800153e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <interpretaComando+0x48c>)
 8001544:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	e007      	b.n	800155e <interpretaComando+0x3aa>
					auxString[k] = 0;
 800154e:	4a3b      	ldr	r2, [pc, #236]	; (800163c <interpretaComando+0x488>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b0a      	cmp	r3, #10
 8001562:	ddf4      	ble.n	800154e <interpretaComando+0x39a>
				}
				j=0;
 8001564:	2300      	movs	r3, #0
 8001566:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, "PuntoZ_ok\n\r", 11, 100);
 8001568:	2364      	movs	r3, #100	; 0x64
 800156a:	220b      	movs	r2, #11
 800156c:	4935      	ldr	r1, [pc, #212]	; (8001644 <interpretaComando+0x490>)
 800156e:	4836      	ldr	r0, [pc, #216]	; (8001648 <interpretaComando+0x494>)
 8001570:	f00a f8f6 	bl	800b760 <HAL_UART_Transmit>
			}
			i++;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	3301      	adds	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <interpretaComando+0x484>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f47f af1f 	bne.w	80013c4 <interpretaComando+0x210>
		}
		cinematicaInversa(Pxfin, Pyfin, Pzfin);
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <interpretaComando+0x498>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <interpretaComando+0x49c>)
 8001592:	edd3 6a00 	vldr	s13, [r3]
 8001596:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <interpretaComando+0x48c>)
 800159c:	edd3 5a00 	vldr	s11, [r3]
 80015a0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80015a4:	eeb0 2b45 	vmov.f64	d2, d5
 80015a8:	eeb0 1b46 	vmov.f64	d1, d6
 80015ac:	eeb0 0b47 	vmov.f64	d0, d7
 80015b0:	f002 fe96 	bl	80042e0 <cinematicaInversa>
		break;
 80015b4:	e03c      	b.n	8001630 <interpretaComando+0x47c>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3, "Homing\n\r", 8, 100);
 80015b6:	2364      	movs	r3, #100	; 0x64
 80015b8:	2208      	movs	r2, #8
 80015ba:	4926      	ldr	r1, [pc, #152]	; (8001654 <interpretaComando+0x4a0>)
 80015bc:	4822      	ldr	r0, [pc, #136]	; (8001648 <interpretaComando+0x494>)
 80015be:	f00a f8cf 	bl	800b760 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET); //activo Enable
 80015c2:	2200      	movs	r2, #0
 80015c4:	2110      	movs	r1, #16
 80015c6:	4824      	ldr	r0, [pc, #144]	; (8001658 <interpretaComando+0x4a4>)
 80015c8:	f006 f926 	bl	8007818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2120      	movs	r1, #32
 80015d0:	4821      	ldr	r0, [pc, #132]	; (8001658 <interpretaComando+0x4a4>)
 80015d2:	f006 f921 	bl	8007818 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	481f      	ldr	r0, [pc, #124]	; (8001658 <interpretaComando+0x4a4>)
 80015dc:	f006 f91c 	bl	8007818 <HAL_GPIO_WritePin>
		homingAprox();
 80015e0:	f7ff f902 	bl	80007e8 <homingAprox>
		homingArm1();
 80015e4:	f7ff fb08 	bl	8000bf8 <homingArm1>
		homingArm2();
 80015e8:	f7ff fbee 	bl	8000dc8 <homingArm2>
		homingArm3();
 80015ec:	f7ff fcf8 	bl	8000fe0 <homingArm3>
		Pxini=0;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <interpretaComando+0x4a8>)
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
		Pyini=0;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <interpretaComando+0x4ac>)
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
		Pzini = -0.334658034417224;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <interpretaComando+0x4b0>)
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <interpretaComando+0x4b4>)
 8001604:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, "Fin_Homing\n\r", 12, 100);
 8001606:	2364      	movs	r3, #100	; 0x64
 8001608:	220c      	movs	r2, #12
 800160a:	4918      	ldr	r1, [pc, #96]	; (800166c <interpretaComando+0x4b8>)
 800160c:	480e      	ldr	r0, [pc, #56]	; (8001648 <interpretaComando+0x494>)
 800160e:	f00a f8a7 	bl	800b760 <HAL_UART_Transmit>

		break;
 8001612:	e00d      	b.n	8001630 <interpretaComando+0x47c>
	case 'R':			//Set RPM
	case 'r':
		HAL_UART_Transmit(&huart3, "RPM\n\r", 5, 100);
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	2205      	movs	r2, #5
 8001618:	4915      	ldr	r1, [pc, #84]	; (8001670 <interpretaComando+0x4bc>)
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <interpretaComando+0x494>)
 800161c:	f00a f8a0 	bl	800b760 <HAL_UART_Transmit>
		break;
 8001620:	e006      	b.n	8001630 <interpretaComando+0x47c>
	default:
		HAL_UART_Transmit(&huart3, "Nada\n\r", 6, 100);
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	2206      	movs	r2, #6
 8001626:	4913      	ldr	r1, [pc, #76]	; (8001674 <interpretaComando+0x4c0>)
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <interpretaComando+0x494>)
 800162a:	f00a f899 	bl	800b760 <HAL_UART_Transmit>
		break;
 800162e:	bf00      	nop
	}
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	240003f8 	.word	0x240003f8
 800163c:	24000380 	.word	0x24000380
 8001640:	24000418 	.word	0x24000418
 8001644:	080115e4 	.word	0x080115e4
 8001648:	24000bf0 	.word	0x24000bf0
 800164c:	240003cc 	.word	0x240003cc
 8001650:	24000420 	.word	0x24000420
 8001654:	080115f0 	.word	0x080115f0
 8001658:	58020c00 	.word	0x58020c00
 800165c:	24000494 	.word	0x24000494
 8001660:	24000478 	.word	0x24000478
 8001664:	24000448 	.word	0x24000448
 8001668:	beab584c 	.word	0xbeab584c
 800166c:	080115fc 	.word	0x080115fc
 8001670:	0801160c 	.word	0x0801160c
 8001674:	08011614 	.word	0x08011614

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b598      	push	{r3, r4, r7, lr}
 800167a:	ed2d 8b02 	vpush	{d8}
 800167e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001680:	f005 fac2 	bl	8006c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001684:	f000 f978 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001688:	f7fe ffae 	bl	80005e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800168c:	f001 f81a 	bl	80026c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001690:	f001 f888 	bl	80027a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001694:	f001 f8f8 	bl	8002888 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001698:	f005 f95c 	bl	8006954 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800169c:	f001 f9b6 	bl	8002a0c <MX_TIM12_Init>
  MX_TIM13_Init();
 80016a0:	f001 fa18 	bl	8002ad4 <MX_TIM13_Init>
  MX_TIM14_Init();
 80016a4:	f001 fa66 	bl	8002b74 <MX_TIM14_Init>
  MX_TIM5_Init();
 80016a8:	f001 f960 	bl	800296c <MX_TIM5_Init>
  MX_TIM15_Init();
 80016ac:	f001 fab2 	bl	8002c14 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80016b0:	f005 f8b8 	bl	8006824 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016b4:	f005 f902 	bl	80068bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100);
 80016b8:	2364      	movs	r3, #100	; 0x64
 80016ba:	2207      	movs	r2, #7
 80016bc:	498c      	ldr	r1, [pc, #560]	; (80018f0 <main+0x278>)
 80016be:	488d      	ldr	r0, [pc, #564]	; (80018f4 <main+0x27c>)
 80016c0:	f00a f84e 	bl	800b760 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80016c4:	2201      	movs	r2, #1
 80016c6:	498c      	ldr	r1, [pc, #560]	; (80018f8 <main+0x280>)
 80016c8:	488a      	ldr	r0, [pc, #552]	; (80018f4 <main+0x27c>)
 80016ca:	f00a f8df 	bl	800b88c <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 80016ce:	488b      	ldr	r0, [pc, #556]	; (80018fc <main+0x284>)
 80016d0:	f008 fb7e 	bl	8009dd0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 80016d4:	488a      	ldr	r0, [pc, #552]	; (8001900 <main+0x288>)
 80016d6:	f008 fb7b 	bl	8009dd0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 80016da:	488a      	ldr	r0, [pc, #552]	; (8001904 <main+0x28c>)
 80016dc:	f008 fb78 	bl	8009dd0 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 80016e0:	2100      	movs	r1, #0
 80016e2:	4889      	ldr	r0, [pc, #548]	; (8001908 <main+0x290>)
 80016e4:	f008 fd50 	bl	800a188 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80016e8:	2100      	movs	r1, #0
 80016ea:	4888      	ldr	r0, [pc, #544]	; (800190c <main+0x294>)
 80016ec:	f008 fd4c 	bl	800a188 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80016f0:	2100      	movs	r1, #0
 80016f2:	4887      	ldr	r0, [pc, #540]	; (8001910 <main+0x298>)
 80016f4:	f008 fd48 	bl	800a188 <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, "Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 80016f8:	2364      	movs	r3, #100	; 0x64
 80016fa:	2218      	movs	r2, #24
 80016fc:	4985      	ldr	r1, [pc, #532]	; (8001914 <main+0x29c>)
 80016fe:	487d      	ldr	r0, [pc, #500]	; (80018f4 <main+0x27c>)
 8001700:	f00a f82e 	bl	800b760 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8001704:	4b84      	ldr	r3, [pc, #528]	; (8001918 <main+0x2a0>)
 8001706:	ed93 7b00 	vldr	d7, [r3]
 800170a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800170e:	eeb4 7b46 	vcmp.f64	d7, d6
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	d1f5      	bne.n	8001704 <main+0x8c>
			FlagButton = 0;
 8001718:	4a7f      	ldr	r2, [pc, #508]	; (8001918 <main+0x2a0>)
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f04f 0400 	mov.w	r4, #0
 8001722:	e9c2 3400 	strd	r3, r4, [r2]
			distancia = sqrt(pow(Pxfin - Pxini, 2) + pow(Pyfin - Pyini, 2) + pow(Pzfin - Pzini, 2));
 8001726:	4b7d      	ldr	r3, [pc, #500]	; (800191c <main+0x2a4>)
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <main+0x2a8>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001736:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800173a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800173e:	eeb0 0b47 	vmov.f64	d0, d7
 8001742:	f00e ff91 	bl	8010668 <pow>
 8001746:	eeb0 8b40 	vmov.f64	d8, d0
 800174a:	4b76      	ldr	r3, [pc, #472]	; (8001924 <main+0x2ac>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b75      	ldr	r3, [pc, #468]	; (8001928 <main+0x2b0>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800175e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001762:	eeb0 0b47 	vmov.f64	d0, d7
 8001766:	f00e ff7f 	bl	8010668 <pow>
 800176a:	eeb0 7b40 	vmov.f64	d7, d0
 800176e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001772:	4b6e      	ldr	r3, [pc, #440]	; (800192c <main+0x2b4>)
 8001774:	ed93 7a00 	vldr	s14, [r3]
 8001778:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <main+0x2b8>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001786:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800178a:	eeb0 0b47 	vmov.f64	d0, d7
 800178e:	f00e ff6b 	bl	8010668 <pow>
 8001792:	eeb0 7b40 	vmov.f64	d7, d0
 8001796:	ee38 7b07 	vadd.f64	d7, d8, d7
 800179a:	eeb0 0b47 	vmov.f64	d0, d7
 800179e:	f00f f893 	bl	80108c8 <sqrt>
 80017a2:	eeb0 7b40 	vmov.f64	d7, d0
 80017a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017aa:	4b62      	ldr	r3, [pc, #392]	; (8001934 <main+0x2bc>)
 80017ac:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pxfin - Pxini) / distancia;	//Vector director en X
 80017b0:	4b5a      	ldr	r3, [pc, #360]	; (800191c <main+0x2a4>)
 80017b2:	ed93 7a00 	vldr	s14, [r3]
 80017b6:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <main+0x2a8>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017c0:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <main+0x2bc>)
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <main+0x2c0>)
 80017cc:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pyfin - Pyini) / distancia;	//Vector director en Y
 80017d0:	4b54      	ldr	r3, [pc, #336]	; (8001924 <main+0x2ac>)
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <main+0x2b0>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017e0:	4b54      	ldr	r3, [pc, #336]	; (8001934 <main+0x2bc>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <main+0x2c0>)
 80017ec:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pzfin - Pzini) / distancia;	//Vector director en Z
 80017f0:	4b4e      	ldr	r3, [pc, #312]	; (800192c <main+0x2b4>)
 80017f2:	ed93 7a00 	vldr	s14, [r3]
 80017f6:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <main+0x2b8>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001800:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <main+0x2bc>)
 8001802:	ed93 7a00 	vldr	s14, [r3]
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <main+0x2c0>)
 800180c:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <main+0x2c4>)
 8001812:	ed93 7b00 	vldr	d7, [r3]
 8001816:	eeb0 0b47 	vmov.f64	d0, d7
 800181a:	f000 fbc9 	bl	8001fb0 <configStepMotor1>
			configStepMotor2(titha2);
 800181e:	4b48      	ldr	r3, [pc, #288]	; (8001940 <main+0x2c8>)
 8001820:	ed93 7b00 	vldr	d7, [r3]
 8001824:	eeb0 0b47 	vmov.f64	d0, d7
 8001828:	f000 fc82 	bl	8002130 <configStepMotor2>
			configStepMotor3(titha3);
 800182c:	4b45      	ldr	r3, [pc, #276]	; (8001944 <main+0x2cc>)
 800182e:	ed93 7b00 	vldr	d7, [r3]
 8001832:	eeb0 0b47 	vmov.f64	d0, d7
 8001836:	f000 fd3b 	bl	80022b0 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <main+0x2bc>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001844:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001848:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800184c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 80018e0 <main+0x268>
 8001850:	ed9f 3b25 	vldr	d3, [pc, #148]	; 80018e8 <main+0x270>
 8001854:	ed9f 2b24 	vldr	d2, [pc, #144]	; 80018e8 <main+0x270>
 8001858:	eeb0 1b47 	vmov.f64	d1, d7
 800185c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80018e8 <main+0x270>
 8001860:	f001 fc02 	bl	8003068 <inicializarTrayectoria>
			FlagTiempo = 0;
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <main+0x2d0>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 800186a:	4a38      	ldr	r2, [pc, #224]	; (800194c <main+0x2d4>)
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	e9c2 3400 	strd	r3, r4, [r2]
			FlagTrayectoM2 = 0;
 8001878:	4a35      	ldr	r2, [pc, #212]	; (8001950 <main+0x2d8>)
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	f04f 0400 	mov.w	r4, #0
 8001882:	e9c2 3400 	strd	r3, r4, [r2]
			FlagTrayectoM3 = 0;
 8001886:	4a33      	ldr	r2, [pc, #204]	; (8001954 <main+0x2dc>)
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	e9c2 3400 	strd	r3, r4, [r2]
			Start=1;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <main+0x2e0>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 800189a:	4a30      	ldr	r2, [pc, #192]	; (800195c <main+0x2e4>)
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	f04f 0400 	mov.w	r4, #0
 80018a4:	e9c2 3400 	strd	r3, r4, [r2]
			rpm2 = 0;
 80018a8:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <main+0x2e8>)
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	e9c2 3400 	strd	r3, r4, [r2]
			rpm3 = 0;
 80018b6:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <main+0x2ec>)
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f04f 0400 	mov.w	r4, #0
 80018c0:	e9c2 3400 	strd	r3, r4, [r2]
			mandalemecha = 1;
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <main+0x2f0>)
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	4c28      	ldr	r4, [pc, #160]	; (800196c <main+0x2f4>)
 80018cc:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_TIM_Base_Start(&htim5);
 80018d0:	4827      	ldr	r0, [pc, #156]	; (8001970 <main+0x2f8>)
 80018d2:	f008 fa7d 	bl	8009dd0 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 80018d6:	4827      	ldr	r0, [pc, #156]	; (8001974 <main+0x2fc>)
 80018d8:	f008 fad0 	bl	8009e7c <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 80018dc:	e712      	b.n	8001704 <main+0x8c>
 80018de:	bf00      	nop
 80018e0:	9999999a 	.word	0x9999999a
 80018e4:	3fd99999 	.word	0x3fd99999
	...
 80018f0:	24000008 	.word	0x24000008
 80018f4:	24000bf0 	.word	0x24000bf0
 80018f8:	24000458 	.word	0x24000458
 80018fc:	24000718 	.word	0x24000718
 8001900:	24000658 	.word	0x24000658
 8001904:	240006d8 	.word	0x240006d8
 8001908:	24000698 	.word	0x24000698
 800190c:	24000618 	.word	0x24000618
 8001910:	24000558 	.word	0x24000558
 8001914:	0801161c 	.word	0x0801161c
 8001918:	24000320 	.word	0x24000320
 800191c:	240003cc 	.word	0x240003cc
 8001920:	24000494 	.word	0x24000494
 8001924:	24000420 	.word	0x24000420
 8001928:	24000478 	.word	0x24000478
 800192c:	24000418 	.word	0x24000418
 8001930:	24000448 	.word	0x24000448
 8001934:	240004f0 	.word	0x240004f0
 8001938:	24000488 	.word	0x24000488
 800193c:	24000450 	.word	0x24000450
 8001940:	240004b8 	.word	0x240004b8
 8001944:	240003c0 	.word	0x240003c0
 8001948:	240003b4 	.word	0x240003b4
 800194c:	240004b0 	.word	0x240004b0
 8001950:	240003a0 	.word	0x240003a0
 8001954:	24000010 	.word	0x24000010
 8001958:	24000330 	.word	0x24000330
 800195c:	24000428 	.word	0x24000428
 8001960:	24000390 	.word	0x24000390
 8001964:	240004d8 	.word	0x240004d8
 8001968:	24000338 	.word	0x24000338
 800196c:	3ff00000 	.word	0x3ff00000
 8001970:	240005d8 	.word	0x240005d8
 8001974:	24000598 	.word	0x24000598

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b0cc      	sub	sp, #304	; 0x130
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001982:	224c      	movs	r2, #76	; 0x4c
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f00d f841 	bl	800ea0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001990:	2220      	movs	r2, #32
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f00d f83a 	bl	800ea0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4618      	mov	r0, r3
 80019a0:	23bc      	movs	r3, #188	; 0xbc
 80019a2:	461a      	mov	r2, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f00d f832 	bl	800ea0e <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019aa:	2002      	movs	r0, #2
 80019ac:	f005 ff68 	bl	8007880 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <SystemClock_Config+0x164>)
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	4a48      	ldr	r2, [pc, #288]	; (8001adc <SystemClock_Config+0x164>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <SystemClock_Config+0x164>)
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	f003 0201 	and.w	r2, r3, #1
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <SystemClock_Config+0x168>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d6:	4a42      	ldr	r2, [pc, #264]	; (8001ae0 <SystemClock_Config+0x168>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <SystemClock_Config+0x168>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019ee:	bf00      	nop
 80019f0:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <SystemClock_Config+0x168>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fc:	d1f8      	bne.n	80019f0 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a0a:	2340      	movs	r3, #64	; 0x40
 8001a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a10:	2302      	movs	r3, #2
 8001a12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a22:	2310      	movs	r3, #16
 8001a24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a3a:	230c      	movs	r3, #12
 8001a3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f005 ff4f 	bl	80078f4 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001a5c:	f000 faa0 	bl	8001fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	233f      	movs	r3, #63	; 0x3f
 8001a62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a72:	2308      	movs	r3, #8
 8001a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f006 fb04 	bl	80080a4 <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8001aa2:	f000 fa7d 	bl	8001fa0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	2203      	movs	r2, #3
 8001aac:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	2200      	movs	r2, #0
 8001abc:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 fe4c 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8001ace:	f000 fa67 	bl	8001fa0 <Error_Handler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	58000400 	.word	0x58000400
 8001ae0:	58024800 	.word	0x58024800

08001ae4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ae4:	b490      	push	{r4, r7}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af4:	d000      	beq.n	8001af8 <HAL_GPIO_EXTI_Callback+0x14>
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/
	default:

		break;
 8001af6:	e006      	b.n	8001b06 <HAL_GPIO_EXTI_Callback+0x22>
		FlagButton = 1;
 8001af8:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	4c05      	ldr	r4, [pc, #20]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b00:	e9c2 3400 	strd	r3, r4, [r2]
		break;
 8001b04:	bf00      	nop
	}

}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc90      	pop	{r4, r7}
 8001b0e:	4770      	bx	lr
 8001b10:	24000320 	.word	0x24000320
 8001b14:	3ff00000 	.word	0x3ff00000

08001b18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_UART_RxCpltCallback+0xac>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d13b      	bne.n	8001ba2 <HAL_UART_RxCpltCallback+0x8a>
		char dato;
		dato = rx_data;
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_UART_RxCpltCallback+0xb0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b0d      	cmp	r3, #13
 8001b34:	d016      	beq.n	8001b64 <HAL_UART_RxCpltCallback+0x4c>
 8001b36:	2b3a      	cmp	r3, #58	; 0x3a
 8001b38:	d002      	beq.n	8001b40 <HAL_UART_RxCpltCallback+0x28>
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d007      	beq.n	8001b4e <HAL_UART_RxCpltCallback+0x36>
 8001b3e:	e021      	b.n	8001b84 <HAL_UART_RxCpltCallback+0x6c>
		case ':':
			rx_index = 0;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_UART_RxCpltCallback+0xb8>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
			break;
 8001b4c:	e030      	b.n	8001bb0 <HAL_UART_RxCpltCallback+0x98>
		case 8:
			if (rx_index > 0) {
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d027      	beq.n	8001ba6 <HAL_UART_RxCpltCallback+0x8e>
				rx_index--;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b60:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b62:	e020      	b.n	8001ba6 <HAL_UART_RxCpltCallback+0x8e>
		case '\r':
			if (cm0 == 1) {
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_UART_RxCpltCallback+0xb8>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d11e      	bne.n	8001baa <HAL_UART_RxCpltCallback+0x92>
				rx_buffer[rx_index] = 0;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_UART_RxCpltCallback+0xbc>)
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8001b78:	f7ff fb1c 	bl	80011b4 <interpretaComando>
				cm0 = 0;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_UART_RxCpltCallback+0xb8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b82:	e012      	b.n	8001baa <HAL_UART_RxCpltCallback+0x92>
		default:
			if (rx_index < 30) {
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b1d      	cmp	r3, #29
 8001b8a:	d810      	bhi.n	8001bae <HAL_UART_RxCpltCallback+0x96>
				rx_buffer[rx_index++] = dato;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	b2d1      	uxtb	r1, r2
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <HAL_UART_RxCpltCallback+0xb4>)
 8001b96:	7011      	strb	r1, [r2, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_UART_RxCpltCallback+0xbc>)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	5453      	strb	r3, [r2, r1]
			}
			break;
 8001ba0:	e005      	b.n	8001bae <HAL_UART_RxCpltCallback+0x96>
		}
	}
 8001ba2:	bf00      	nop
 8001ba4:	e004      	b.n	8001bb0 <HAL_UART_RxCpltCallback+0x98>
			break;
 8001ba6:	bf00      	nop
 8001ba8:	e002      	b.n	8001bb0 <HAL_UART_RxCpltCallback+0x98>
			break;
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <HAL_UART_RxCpltCallback+0x98>
			break;
 8001bae:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4905      	ldr	r1, [pc, #20]	; (8001bc8 <HAL_UART_RxCpltCallback+0xb0>)
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <HAL_UART_RxCpltCallback+0xc0>)
 8001bb6:	f009 fe69 	bl	800b88c <HAL_UART_Receive_IT>
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40004800 	.word	0x40004800
 8001bc8:	24000458 	.word	0x24000458
 8001bcc:	24000304 	.word	0x24000304
 8001bd0:	24000398 	.word	0x24000398
 8001bd4:	240003f8 	.word	0x240003f8
 8001bd8:	24000bf0 	.word	0x24000bf0

08001bdc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	__NOP();
 8001be4:	bf00      	nop
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c04:	d116      	bne.n	8001c34 <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10a      	bne.n	8001c28 <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 8001c12:	2100      	movs	r1, #0
 8001c14:	4827      	ldr	r0, [pc, #156]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001c16:	f008 fa13 	bl	800a040 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 8001c1a:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	4c26      	ldr	r4, [pc, #152]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001c22:	e9c2 3400 	strd	r3, r4, [r2]
		} else {
			pMotor3++;
		}

	}
}
 8001c26:	e03c      	b.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	e036      	b.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d116      	bne.n	8001c6c <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d10a      	bne.n	8001c60 <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	481f      	ldr	r0, [pc, #124]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001c4e:	f008 f9f7 	bl	800a040 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	4c18      	ldr	r4, [pc, #96]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001c5a:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001c5e:	e020      	b.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001c68:	6013      	str	r3, [r2, #0]
}
 8001c6a:	e01a      	b.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d115      	bne.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d10a      	bne.n	8001c98 <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 8001c82:	2100      	movs	r1, #0
 8001c84:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001c86:	f008 f9db 	bl	800a040 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	4c0a      	ldr	r4, [pc, #40]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001c92:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001c96:	e004      	b.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	240003f4 	.word	0x240003f4
 8001cb0:	240003c8 	.word	0x240003c8
 8001cb4:	24000718 	.word	0x24000718
 8001cb8:	240004b0 	.word	0x240004b0
 8001cbc:	3ff00000 	.word	0x3ff00000
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	24000518 	.word	0x24000518
 8001cc8:	24000424 	.word	0x24000424
 8001ccc:	24000658 	.word	0x24000658
 8001cd0:	240003a0 	.word	0x240003a0
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	240003b0 	.word	0x240003b0
 8001cdc:	240004e0 	.word	0x240004e0
 8001ce0:	240006d8 	.word	0x240006d8
 8001ce4:	24000010 	.word	0x24000010

08001ce8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a91      	ldr	r2, [pc, #580]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	f040 8110 	bne.w	8001f1a <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 8001cfa:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001cfc:	ed93 7b00 	vldr	d7, [r3]
 8001d00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d04:	eeb4 7b46 	vcmp.f64	d7, d6
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d12d      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0x82>
 8001d0e:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d10:	ed93 7b00 	vldr	d7, [r3]
 8001d14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d18:	eeb4 7b46 	vcmp.f64	d7, d6
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	d123      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0x82>
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d24:	ed93 7b00 	vldr	d7, [r3]
 8001d28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d2c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	d119      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0x82>
			HAL_TIM_Base_Stop_IT(&htim15);
 8001d36:	4880      	ldr	r0, [pc, #512]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001d38:	f008 f8ca 	bl	8009ed0 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8001d3c:	4882      	ldr	r0, [pc, #520]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d3e:	f008 f871 	bl	8009e24 <HAL_TIM_Base_Stop>
			Pxini = Pxfin;
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a82      	ldr	r2, [pc, #520]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d48:	6013      	str	r3, [r2, #0]
			Pyini = Pyfin;
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a82      	ldr	r2, [pc, #520]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d50:	6013      	str	r3, [r2, #0]
			Pzini = Pzfin;
 8001d52:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a82      	ldr	r2, [pc, #520]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d58:	6013      	str	r3, [r2, #0]
			mandalemecha = 0;
 8001d5a:	4a82      	ldr	r2, [pc, #520]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	f04f 0400 	mov.w	r4, #0
 8001d64:	e9c2 3400 	strd	r3, r4, [r2]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 8001d68:	e0d7      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 8001d6a:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x96>
				FlagTiempo = 1;
 8001d72:	4b7d      	ldr	r3, [pc, #500]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 8001d78:	4b7c      	ldr	r3, [pc, #496]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 8001d7e:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d8a:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	3301      	adds	r3, #1
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8001d98:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8001f28 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001d9c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001da0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001da4:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001da6:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 8001daa:	4b71      	ldr	r3, [pc, #452]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001dac:	ed93 7b00 	vldr	d7, [r3]
 8001db0:	eeb0 0b47 	vmov.f64	d0, d7
 8001db4:	f001 fefe 	bl	8003bb4 <obtenerVelCurva>
			Recta3D[0] = Pxini + X * vDirector[0];
 8001db8:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001dce:	ed93 7b00 	vldr	d7, [r3]
 8001dd2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dd6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dda:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ddc:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pyini + X * vDirector[1];
 8001de0:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dea:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001dec:	edd3 7a01 	vldr	s15, [r3, #4]
 8001df0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001df4:	4b60      	ldr	r3, [pc, #384]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001df6:	ed93 7b00 	vldr	d7, [r3]
 8001dfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dfe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e02:	4b5e      	ldr	r3, [pc, #376]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001e04:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pzini + X * vDirector[2];
 8001e08:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e18:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001e1e:	ed93 7b00 	vldr	d7, [r3]
 8001e22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e2a:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001e2c:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e3a:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e3c:	ed93 7b00 	vldr	d7, [r3]
 8001e40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e44:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001f30 <HAL_TIM_PeriodElapsedCallback+0x248>
 8001e48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e4e:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e54:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e58:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e5e:	ed93 7b00 	vldr	d7, [r3]
 8001e62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e66:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001f30 <HAL_TIM_PeriodElapsedCallback+0x248>
 8001e6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e6e:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e70:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e76:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e80:	ed93 7b00 	vldr	d7, [r3]
 8001e84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e88:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001f30 <HAL_TIM_PeriodElapsedCallback+0x248>
 8001e8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e92:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2];
 8001e96:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e98:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001e9c:	4a3a      	ldr	r2, [pc, #232]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e9e:	e9c2 3400 	strd	r3, r4, [r2]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ea4:	ed93 7b00 	vldr	d7, [r3]
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001eaa:	ed93 6b02 	vldr	d6, [r3, #8]
 8001eae:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001eb0:	ed93 2b04 	vldr	d2, [r3, #16]
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001eb6:	ed93 3b00 	vldr	d3, [r3]
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ebc:	ed93 4b02 	vldr	d4, [r3, #8]
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ec2:	ed93 5b04 	vldr	d5, [r3, #16]
 8001ec6:	eeb0 1b46 	vmov.f64	d1, d6
 8001eca:	eeb0 0b47 	vmov.f64	d0, d7
 8001ece:	f003 febf 	bl	8005c50 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ed4:	ed93 7b00 	vldr	d7, [r3]
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001eda:	ed93 6b02 	vldr	d6, [r3, #8]
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ee0:	ed93 5b04 	vldr	d5, [r3, #16]
 8001ee4:	eeb0 2b45 	vmov.f64	d2, d5
 8001ee8:	eeb0 1b46 	vmov.f64	d1, d6
 8001eec:	eeb0 0b47 	vmov.f64	d0, d7
 8001ef0:	f004 f9da 	bl	80062a8 <SetPerfilTimers>
			if(Start==1){
 8001ef4:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10e      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 8001f02:	2100      	movs	r1, #0
 8001f04:	4823      	ldr	r0, [pc, #140]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f06:	f008 f843 	bl	8009f90 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4822      	ldr	r0, [pc, #136]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f0e:	f008 f83f 	bl	8009f90 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 8001f12:	2100      	movs	r1, #0
 8001f14:	4821      	ldr	r0, [pc, #132]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f16:	f008 f83b 	bl	8009f90 <HAL_TIM_PWM_Start>
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	418e8480 	.word	0x418e8480
	...
 8001f38:	24000598 	.word	0x24000598
 8001f3c:	240004b0 	.word	0x240004b0
 8001f40:	240003a0 	.word	0x240003a0
 8001f44:	24000010 	.word	0x24000010
 8001f48:	240005d8 	.word	0x240005d8
 8001f4c:	240003cc 	.word	0x240003cc
 8001f50:	24000494 	.word	0x24000494
 8001f54:	24000420 	.word	0x24000420
 8001f58:	24000478 	.word	0x24000478
 8001f5c:	24000418 	.word	0x24000418
 8001f60:	24000448 	.word	0x24000448
 8001f64:	24000338 	.word	0x24000338
 8001f68:	240003b4 	.word	0x240003b4
 8001f6c:	40000c00 	.word	0x40000c00
 8001f70:	24000480 	.word	0x24000480
 8001f74:	24000488 	.word	0x24000488
 8001f78:	24000308 	.word	0x24000308
 8001f7c:	24000430 	.word	0x24000430
 8001f80:	24000310 	.word	0x24000310
 8001f84:	24000460 	.word	0x24000460
 8001f88:	24000340 	.word	0x24000340
 8001f8c:	24000498 	.word	0x24000498
 8001f90:	24000330 	.word	0x24000330
 8001f94:	24000718 	.word	0x24000718
 8001f98:	24000658 	.word	0x24000658
 8001f9c:	240006d8 	.word	0x240006d8

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
double ErrorPeriodo;
double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <configStepMotor1+0x150>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <configStepMotor1+0x154>)
 8001fc2:	ed93 7b00 	vldr	d7, [r3]
 8001fc6:	ed97 6b00 	vldr	d6, [r7]
 8001fca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	db22      	blt.n	800201a <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	484c      	ldr	r0, [pc, #304]	; (8002108 <configStepMotor1+0x158>)
 8001fd8:	f005 fc06 	bl	80077e8 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 8001fe2:	4a4a      	ldr	r2, [pc, #296]	; (800210c <configStepMotor1+0x15c>)
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	4c49      	ldr	r4, [pc, #292]	; (8002110 <configStepMotor1+0x160>)
 8001fea:	e9c2 3400 	strd	r3, r4, [r2]
 8001fee:	e036      	b.n	800205e <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 8001ff0:	4b44      	ldr	r3, [pc, #272]	; (8002104 <configStepMotor1+0x154>)
 8001ff2:	ed93 7b00 	vldr	d7, [r3]
 8001ff6:	ed97 6b00 	vldr	d6, [r7]
 8001ffa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ffe:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8002002:	4a40      	ldr	r2, [pc, #256]	; (8002104 <configStepMotor1+0x154>)
 8002004:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002008:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	4840      	ldr	r0, [pc, #256]	; (8002114 <configStepMotor1+0x164>)
 8002014:	f005 fc00 	bl	8007818 <HAL_GPIO_WritePin>
 8002018:	e021      	b.n	800205e <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800201a:	2101      	movs	r1, #1
 800201c:	483a      	ldr	r0, [pc, #232]	; (8002108 <configStepMotor1+0x158>)
 800201e:	f005 fbe3 	bl	80077e8 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 8002028:	4a38      	ldr	r2, [pc, #224]	; (800210c <configStepMotor1+0x15c>)
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	4c38      	ldr	r4, [pc, #224]	; (8002110 <configStepMotor1+0x160>)
 8002030:	e9c2 3400 	strd	r3, r4, [r2]
 8002034:	e013      	b.n	800205e <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 8002036:	4b33      	ldr	r3, [pc, #204]	; (8002104 <configStepMotor1+0x154>)
 8002038:	ed93 6b00 	vldr	d6, [r3]
 800203c:	ed97 7b00 	vldr	d7, [r7]
 8002040:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002044:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8002048:	4a2e      	ldr	r2, [pc, #184]	; (8002104 <configStepMotor1+0x154>)
 800204a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800204e:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002058:	482e      	ldr	r0, [pc, #184]	; (8002114 <configStepMotor1+0x164>)
 800205a:	f005 fbdd 	bl	8007818 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <configStepMotor1+0x168>)
 8002060:	ed93 6b00 	vldr	d6, [r3]
 8002064:	ed97 7b02 	vldr	d7, [r7, #8]
 8002068:	ee26 6b07 	vmul.f64	d6, d6, d7
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <configStepMotor1+0x16c>)
 800206e:	ed93 7b00 	vldr	d7, [r3]
 8002072:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002076:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80020f8 <configStepMotor1+0x148>
 800207a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <configStepMotor1+0x170>)
 8002080:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <configStepMotor1+0x170>)
 8002086:	ed93 7b00 	vldr	d7, [r3]
 800208a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800208e:	ee17 2a90 	vmov	r2, s15
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <configStepMotor1+0x174>)
 8002094:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <configStepMotor1+0x170>)
 8002098:	ed93 6b00 	vldr	d6, [r3]
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <configStepMotor1+0x174>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <configStepMotor1+0x178>)
 80020ae:	ed93 7b00 	vldr	d7, [r3]
 80020b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <configStepMotor1+0x178>)
 80020b8:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <configStepMotor1+0x178>)
 80020be:	ed93 7b00 	vldr	d7, [r3]
 80020c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80020c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	da00      	bge.n	80020d2 <configStepMotor1+0x122>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 80020d0:	e00e      	b.n	80020f0 <configStepMotor1+0x140>
		remanente1 = remanente1 - 1;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <configStepMotor1+0x178>)
 80020d4:	ed93 7b00 	vldr	d7, [r3]
 80020d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80020dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <configStepMotor1+0x178>)
 80020e2:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <configStepMotor1+0x174>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <configStepMotor1+0x174>)
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40768000 	.word	0x40768000
 8002100:	240003f4 	.word	0x240003f4
 8002104:	24000348 	.word	0x24000348
 8002108:	58021000 	.word	0x58021000
 800210c:	24000328 	.word	0x24000328
 8002110:	3ff00000 	.word	0x3ff00000
 8002114:	58020800 	.word	0x58020800
 8002118:	24000018 	.word	0x24000018
 800211c:	24000020 	.word	0x24000020
 8002120:	24000530 	.word	0x24000530
 8002124:	240003c8 	.word	0x240003c8
 8002128:	24000528 	.word	0x24000528
 800212c:	00000000 	.word	0x00000000

08002130 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <configStepMotor2+0x150>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <configStepMotor2+0x154>)
 8002142:	ed93 7b00 	vldr	d7, [r3]
 8002146:	ed97 6b00 	vldr	d6, [r7]
 800214a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	db22      	blt.n	800219a <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 8002154:	2108      	movs	r1, #8
 8002156:	484c      	ldr	r0, [pc, #304]	; (8002288 <configStepMotor2+0x158>)
 8002158:	f005 fb46 	bl	80077e8 <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 8002162:	4a4a      	ldr	r2, [pc, #296]	; (800228c <configStepMotor2+0x15c>)
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	4c49      	ldr	r4, [pc, #292]	; (8002290 <configStepMotor2+0x160>)
 800216a:	e9c2 3400 	strd	r3, r4, [r2]
 800216e:	e036      	b.n	80021de <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 8002170:	4b44      	ldr	r3, [pc, #272]	; (8002284 <configStepMotor2+0x154>)
 8002172:	ed93 7b00 	vldr	d7, [r3]
 8002176:	ed97 6b00 	vldr	d6, [r7]
 800217a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800217e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8002182:	4a40      	ldr	r2, [pc, #256]	; (8002284 <configStepMotor2+0x154>)
 8002184:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002188:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 800218c:	2201      	movs	r2, #1
 800218e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002192:	4840      	ldr	r0, [pc, #256]	; (8002294 <configStepMotor2+0x164>)
 8002194:	f005 fb40 	bl	8007818 <HAL_GPIO_WritePin>
 8002198:	e021      	b.n	80021de <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 800219a:	2104      	movs	r1, #4
 800219c:	483a      	ldr	r0, [pc, #232]	; (8002288 <configStepMotor2+0x158>)
 800219e:	f005 fb23 	bl	80077e8 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 80021a8:	4a38      	ldr	r2, [pc, #224]	; (800228c <configStepMotor2+0x15c>)
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	4c38      	ldr	r4, [pc, #224]	; (8002290 <configStepMotor2+0x160>)
 80021b0:	e9c2 3400 	strd	r3, r4, [r2]
 80021b4:	e013      	b.n	80021de <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <configStepMotor2+0x154>)
 80021b8:	ed93 6b00 	vldr	d6, [r3]
 80021bc:	ed97 7b00 	vldr	d7, [r7]
 80021c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021c4:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 80021c8:	4a2e      	ldr	r2, [pc, #184]	; (8002284 <configStepMotor2+0x154>)
 80021ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80021ce:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 80021d2:	2200      	movs	r2, #0
 80021d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d8:	482e      	ldr	r0, [pc, #184]	; (8002294 <configStepMotor2+0x164>)
 80021da:	f005 fb1d 	bl	8007818 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 80021de:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <configStepMotor2+0x168>)
 80021e0:	ed93 6b00 	vldr	d6, [r3]
 80021e4:	ed97 7b02 	vldr	d7, [r7, #8]
 80021e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <configStepMotor2+0x16c>)
 80021ee:	ed93 7b00 	vldr	d7, [r3]
 80021f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80021f6:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8002278 <configStepMotor2+0x148>
 80021fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <configStepMotor2+0x170>)
 8002200:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <configStepMotor2+0x170>)
 8002206:	ed93 7b00 	vldr	d7, [r3]
 800220a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800220e:	ee17 2a90 	vmov	r2, s15
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <configStepMotor2+0x174>)
 8002214:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <configStepMotor2+0x170>)
 8002218:	ed93 6b00 	vldr	d6, [r3]
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <configStepMotor2+0x174>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002228:	ee36 6b47 	vsub.f64	d6, d6, d7
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <configStepMotor2+0x178>)
 800222e:	ed93 7b00 	vldr	d7, [r3]
 8002232:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <configStepMotor2+0x178>)
 8002238:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <configStepMotor2+0x178>)
 800223e:	ed93 7b00 	vldr	d7, [r3]
 8002242:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002246:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	da00      	bge.n	8002252 <configStepMotor2+0x122>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 8002250:	e00e      	b.n	8002270 <configStepMotor2+0x140>
		remanente2 = remanente2 - 1;
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <configStepMotor2+0x178>)
 8002254:	ed93 7b00 	vldr	d7, [r3]
 8002258:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800225c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <configStepMotor2+0x178>)
 8002262:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <configStepMotor2+0x174>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <configStepMotor2+0x174>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	00000000 	.word	0x00000000
 800227c:	40768000 	.word	0x40768000
 8002280:	24000518 	.word	0x24000518
 8002284:	24000350 	.word	0x24000350
 8002288:	58021000 	.word	0x58021000
 800228c:	24000328 	.word	0x24000328
 8002290:	3ff00000 	.word	0x3ff00000
 8002294:	58020800 	.word	0x58020800
 8002298:	24000018 	.word	0x24000018
 800229c:	24000020 	.word	0x24000020
 80022a0:	24000548 	.word	0x24000548
 80022a4:	24000424 	.word	0x24000424
 80022a8:	24000550 	.word	0x24000550
 80022ac:	00000000 	.word	0x00000000

080022b0 <configStepMotor3>:

void configStepMotor3(double angulo) {
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 80022ba:	4b51      	ldr	r3, [pc, #324]	; (8002400 <configStepMotor3+0x150>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <configStepMotor3+0x154>)
 80022c2:	ed93 7b00 	vldr	d7, [r3]
 80022c6:	ed97 6b00 	vldr	d6, [r7]
 80022ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d2:	db22      	blt.n	800231a <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 80022d4:	2120      	movs	r1, #32
 80022d6:	484c      	ldr	r0, [pc, #304]	; (8002408 <configStepMotor3+0x158>)
 80022d8:	f005 fa86 	bl	80077e8 <HAL_GPIO_ReadPin>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <configStepMotor3+0x15c>)
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	4c49      	ldr	r4, [pc, #292]	; (8002410 <configStepMotor3+0x160>)
 80022ea:	e9c2 3400 	strd	r3, r4, [r2]
 80022ee:	e036      	b.n	800235e <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 80022f0:	4b44      	ldr	r3, [pc, #272]	; (8002404 <configStepMotor3+0x154>)
 80022f2:	ed93 7b00 	vldr	d7, [r3]
 80022f6:	ed97 6b00 	vldr	d6, [r7]
 80022fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022fe:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8002302:	4a40      	ldr	r2, [pc, #256]	; (8002404 <configStepMotor3+0x154>)
 8002304:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002308:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002312:	4840      	ldr	r0, [pc, #256]	; (8002414 <configStepMotor3+0x164>)
 8002314:	f005 fa80 	bl	8007818 <HAL_GPIO_WritePin>
 8002318:	e021      	b.n	800235e <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 800231a:	2120      	movs	r1, #32
 800231c:	483a      	ldr	r0, [pc, #232]	; (8002408 <configStepMotor3+0x158>)
 800231e:	f005 fa63 	bl	80077e8 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 8002328:	4a38      	ldr	r2, [pc, #224]	; (800240c <configStepMotor3+0x15c>)
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	4c38      	ldr	r4, [pc, #224]	; (8002410 <configStepMotor3+0x160>)
 8002330:	e9c2 3400 	strd	r3, r4, [r2]
 8002334:	e013      	b.n	800235e <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <configStepMotor3+0x154>)
 8002338:	ed93 6b00 	vldr	d6, [r3]
 800233c:	ed97 7b00 	vldr	d7, [r7]
 8002340:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002344:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8002348:	4a2e      	ldr	r2, [pc, #184]	; (8002404 <configStepMotor3+0x154>)
 800234a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800234e:	e9c2 3400 	strd	r3, r4, [r2]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002358:	482e      	ldr	r0, [pc, #184]	; (8002414 <configStepMotor3+0x164>)
 800235a:	f005 fa5d 	bl	8007818 <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <configStepMotor3+0x168>)
 8002360:	ed93 6b00 	vldr	d6, [r3]
 8002364:	ed97 7b02 	vldr	d7, [r7, #8]
 8002368:	ee26 6b07 	vmul.f64	d6, d6, d7
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <configStepMotor3+0x16c>)
 800236e:	ed93 7b00 	vldr	d7, [r3]
 8002372:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002376:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80023f8 <configStepMotor3+0x148>
 800237a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <configStepMotor3+0x170>)
 8002380:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <configStepMotor3+0x170>)
 8002386:	ed93 7b00 	vldr	d7, [r3]
 800238a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800238e:	ee17 2a90 	vmov	r2, s15
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <configStepMotor3+0x174>)
 8002394:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <configStepMotor3+0x170>)
 8002398:	ed93 6b00 	vldr	d6, [r3]
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <configStepMotor3+0x174>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <configStepMotor3+0x178>)
 80023ae:	ed93 7b00 	vldr	d7, [r3]
 80023b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <configStepMotor3+0x178>)
 80023b8:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <configStepMotor3+0x178>)
 80023be:	ed93 7b00 	vldr	d7, [r3]
 80023c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80023c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	da00      	bge.n	80023d2 <configStepMotor3+0x122>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 80023d0:	e00e      	b.n	80023f0 <configStepMotor3+0x140>
		remanente3 = remanente3 - 1;
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <configStepMotor3+0x178>)
 80023d4:	ed93 7b00 	vldr	d7, [r3]
 80023d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80023dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <configStepMotor3+0x178>)
 80023e2:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <configStepMotor3+0x174>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <configStepMotor3+0x174>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40768000 	.word	0x40768000
 8002400:	240003b0 	.word	0x240003b0
 8002404:	24000358 	.word	0x24000358
 8002408:	58021000 	.word	0x58021000
 800240c:	24000328 	.word	0x24000328
 8002410:	3ff00000 	.word	0x3ff00000
 8002414:	58020800 	.word	0x58020800
 8002418:	24000018 	.word	0x24000018
 800241c:	24000020 	.word	0x24000020
 8002420:	24000540 	.word	0x24000540
 8002424:	240004e0 	.word	0x240004e0
 8002428:	24000538 	.word	0x24000538

0800242c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_MspInit+0x44>)
 8002434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_MspInit+0x44>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_MspInit+0x44>)
 8002444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002450:	2005      	movs	r0, #5
 8002452:	f004 fd87 	bl	8006f64 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2101      	movs	r1, #1
 800245a:	2051      	movs	r0, #81	; 0x51
 800245c:	f004 fd8d 	bl	8006f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002460:	2051      	movs	r0, #81	; 0x51
 8002462:	f004 fda4 	bl	8006fae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	58024400 	.word	0x58024400

08002474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <MemManage_Handler+0x4>

0800248e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <BusFault_Handler+0x4>

08002494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <UsageFault_Handler+0x4>

0800249a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c8:	f004 fc0c 	bl	8006ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f005 f9b8 	bl	800784a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}

080024de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024e2:	2002      	movs	r0, #2
 80024e4:	f005 f9b1 	bl	800784a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80024f0:	2004      	movs	r0, #4
 80024f2:	f005 f9aa 	bl	800784a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}

080024fa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80024fe:	2008      	movs	r0, #8
 8002500:	f005 f9a3 	bl	800784a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800250c:	2010      	movs	r0, #16
 800250e:	f005 f99c 	bl	800784a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}

08002516 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800251a:	2020      	movs	r0, #32
 800251c:	f005 f995 	bl	800784a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <TIM2_IRQHandler+0x10>)
 800252a:	f007 ff0b 	bl	800a344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	24000698 	.word	0x24000698

08002538 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM3_IRQHandler+0x10>)
 800253e:	f007 ff01 	bl	800a344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24000618 	.word	0x24000618

0800254c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM4_IRQHandler+0x10>)
 8002552:	f007 fef7 	bl	800a344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	24000558 	.word	0x24000558

08002560 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <USART3_IRQHandler+0x10>)
 8002566:	f009 fa69 	bl	800ba3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000bf0 	.word	0x24000bf0

08002574 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002578:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800257c:	f005 f965 	bl	800784a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <TIM15_IRQHandler+0x10>)
 800259a:	f007 fed3 	bl	800a344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	24000598 	.word	0x24000598

080025a8 <_sbrk>:
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x50>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x16>
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <_sbrk+0x50>)
 80025ba:	4a10      	ldr	r2, [pc, #64]	; (80025fc <_sbrk+0x54>)
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <_sbrk+0x50>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <_sbrk+0x50>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	466a      	mov	r2, sp
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d907      	bls.n	80025e2 <_sbrk+0x3a>
 80025d2:	f00c f9e7 	bl	800e9a4 <__errno>
 80025d6:	4602      	mov	r2, r0
 80025d8:	230c      	movs	r3, #12
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	e006      	b.n	80025f0 <_sbrk+0x48>
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <_sbrk+0x50>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a03      	ldr	r2, [pc, #12]	; (80025f8 <_sbrk+0x50>)
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	24000360 	.word	0x24000360
 80025fc:	24000da0 	.word	0x24000da0

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <SystemInit+0xac>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <SystemInit+0xac>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <SystemInit+0xb0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <SystemInit+0xb0>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <SystemInit+0xb0>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <SystemInit+0xb0>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4921      	ldr	r1, [pc, #132]	; (80026b0 <SystemInit+0xb0>)
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <SystemInit+0xb4>)
 800262e:	4013      	ands	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <SystemInit+0xb0>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <SystemInit+0xb0>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <SystemInit+0xb0>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <SystemInit+0xb0>)
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <SystemInit+0xb0>)
 800264c:	2200      	movs	r2, #0
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <SystemInit+0xb0>)
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <SystemInit+0xb0>)
 8002658:	2200      	movs	r2, #0
 800265a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <SystemInit+0xb0>)
 800265e:	2200      	movs	r2, #0
 8002660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <SystemInit+0xb0>)
 8002664:	2200      	movs	r2, #0
 8002666:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <SystemInit+0xb0>)
 800266a:	2200      	movs	r2, #0
 800266c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <SystemInit+0xb0>)
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <SystemInit+0xb0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <SystemInit+0xb0>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <SystemInit+0xb0>)
 8002682:	2200      	movs	r2, #0
 8002684:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <SystemInit+0xb8>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <SystemInit+0xbc>)
 800268c:	4013      	ands	r3, r2
 800268e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002692:	d202      	bcs.n	800269a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <SystemInit+0xc0>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SystemInit+0xac>)
 800269c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	58024400 	.word	0x58024400
 80026b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80026b8:	5c001000 	.word	0x5c001000
 80026bc:	ffff0000 	.word	0xffff0000
 80026c0:	51008108 	.word	0x51008108

080026c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ca:	f107 0320 	add.w	r3, r7, #32
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <MX_TIM2_Init+0xdc>)
 80026f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <MX_TIM2_Init+0xdc>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <MX_TIM2_Init+0xdc>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <MX_TIM2_Init+0xdc>)
 8002706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800270a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270c:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <MX_TIM2_Init+0xdc>)
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <MX_TIM2_Init+0xdc>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002718:	4821      	ldr	r0, [pc, #132]	; (80027a0 <MX_TIM2_Init+0xdc>)
 800271a:	f007 fb2d 	bl	8009d78 <HAL_TIM_Base_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002724:	f7ff fc3c 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	4619      	mov	r1, r3
 8002734:	481a      	ldr	r0, [pc, #104]	; (80027a0 <MX_TIM2_Init+0xdc>)
 8002736:	f008 f8d9 	bl	800a8ec <HAL_TIM_ConfigClockSource>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002740:	f7ff fc2e 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002744:	4816      	ldr	r0, [pc, #88]	; (80027a0 <MX_TIM2_Init+0xdc>)
 8002746:	f007 fce9 	bl	800a11c <HAL_TIM_IC_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002750:	f7ff fc26 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	480f      	ldr	r0, [pc, #60]	; (80027a0 <MX_TIM2_Init+0xdc>)
 8002764:	f008 ff06 	bl	800b574 <HAL_TIMEx_MasterConfigSynchronization>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800276e:	f7ff fc17 	bl	8001fa0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002776:	2301      	movs	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_TIM2_Init+0xdc>)
 800278a:	f007 fefa 	bl	800a582 <HAL_TIM_IC_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8002794:	f7ff fc04 	bl	8001fa0 <Error_Handler>
  }

}
 8002798:	bf00      	nop
 800279a:	3730      	adds	r7, #48	; 0x30
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	24000698 	.word	0x24000698

080027a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027aa:	f107 0320 	add.w	r3, r7, #32
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <MX_TIM3_Init+0xdc>)
 80027d2:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <MX_TIM3_Init+0xe0>)
 80027d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027d6:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <MX_TIM3_Init+0xdc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <MX_TIM3_Init+0xdc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <MX_TIM3_Init+0xdc>)
 80027e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ea:	4b25      	ldr	r3, [pc, #148]	; (8002880 <MX_TIM3_Init+0xdc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <MX_TIM3_Init+0xdc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027f6:	4822      	ldr	r0, [pc, #136]	; (8002880 <MX_TIM3_Init+0xdc>)
 80027f8:	f007 fabe 	bl	8009d78 <HAL_TIM_Base_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002802:	f7ff fbcd 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800280c:	f107 0320 	add.w	r3, r7, #32
 8002810:	4619      	mov	r1, r3
 8002812:	481b      	ldr	r0, [pc, #108]	; (8002880 <MX_TIM3_Init+0xdc>)
 8002814:	f008 f86a 	bl	800a8ec <HAL_TIM_ConfigClockSource>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800281e:	f7ff fbbf 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002822:	4817      	ldr	r0, [pc, #92]	; (8002880 <MX_TIM3_Init+0xdc>)
 8002824:	f007 fc7a 	bl	800a11c <HAL_TIM_IC_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800282e:	f7ff fbb7 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	480f      	ldr	r0, [pc, #60]	; (8002880 <MX_TIM3_Init+0xdc>)
 8002842:	f008 fe97 	bl	800b574 <HAL_TIMEx_MasterConfigSynchronization>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800284c:	f7ff fba8 	bl	8001fa0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002850:	2300      	movs	r3, #0
 8002852:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002854:	2301      	movs	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2200      	movs	r2, #0
 8002864:	4619      	mov	r1, r3
 8002866:	4806      	ldr	r0, [pc, #24]	; (8002880 <MX_TIM3_Init+0xdc>)
 8002868:	f007 fe8b 	bl	800a582 <HAL_TIM_IC_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002872:	f7ff fb95 	bl	8001fa0 <Error_Handler>
  }

}
 8002876:	bf00      	nop
 8002878:	3730      	adds	r7, #48	; 0x30
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	24000618 	.word	0x24000618
 8002884:	40000400 	.word	0x40000400

08002888 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028b6:	4a2c      	ldr	r2, [pc, #176]	; (8002968 <MX_TIM4_Init+0xe0>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ce:	4b25      	ldr	r3, [pc, #148]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028da:	4822      	ldr	r0, [pc, #136]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028dc:	f007 fa4c 	bl	8009d78 <HAL_TIM_Base_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80028e6:	f7ff fb5b 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028f0:	f107 0320 	add.w	r3, r7, #32
 80028f4:	4619      	mov	r1, r3
 80028f6:	481b      	ldr	r0, [pc, #108]	; (8002964 <MX_TIM4_Init+0xdc>)
 80028f8:	f007 fff8 	bl	800a8ec <HAL_TIM_ConfigClockSource>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002902:	f7ff fb4d 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002906:	4817      	ldr	r0, [pc, #92]	; (8002964 <MX_TIM4_Init+0xdc>)
 8002908:	f007 fc08 	bl	800a11c <HAL_TIM_IC_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002912:	f7ff fb45 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	480f      	ldr	r0, [pc, #60]	; (8002964 <MX_TIM4_Init+0xdc>)
 8002926:	f008 fe25 	bl	800b574 <HAL_TIMEx_MasterConfigSynchronization>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002930:	f7ff fb36 	bl	8001fa0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002934:	2300      	movs	r3, #0
 8002936:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002938:	2301      	movs	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2200      	movs	r2, #0
 8002948:	4619      	mov	r1, r3
 800294a:	4806      	ldr	r0, [pc, #24]	; (8002964 <MX_TIM4_Init+0xdc>)
 800294c:	f007 fe19 	bl	800a582 <HAL_TIM_IC_ConfigChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002956:	f7ff fb23 	bl	8001fa0 <Error_Handler>
  }

}
 800295a:	bf00      	nop
 800295c:	3730      	adds	r7, #48	; 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	24000558 	.word	0x24000558
 8002968:	40000800 	.word	0x40000800

0800296c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <MX_TIM5_Init+0x98>)
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <MX_TIM5_Init+0x9c>)
 800298e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_TIM5_Init+0x98>)
 8002992:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002996:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_TIM5_Init+0x98>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <MX_TIM5_Init+0x98>)
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_TIM5_Init+0x98>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_TIM5_Init+0x98>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80029b2:	4814      	ldr	r0, [pc, #80]	; (8002a04 <MX_TIM5_Init+0x98>)
 80029b4:	f007 f9e0 	bl	8009d78 <HAL_TIM_Base_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80029be:	f7ff faef 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	4619      	mov	r1, r3
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_TIM5_Init+0x98>)
 80029d0:	f007 ff8c 	bl	800a8ec <HAL_TIM_ConfigClockSource>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80029da:	f7ff fae1 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4806      	ldr	r0, [pc, #24]	; (8002a04 <MX_TIM5_Init+0x98>)
 80029ec:	f008 fdc2 	bl	800b574 <HAL_TIMEx_MasterConfigSynchronization>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80029f6:	f7ff fad3 	bl	8001fa0 <Error_Handler>
  }

}
 80029fa:	bf00      	nop
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	240005d8 	.word	0x240005d8
 8002a08:	40000c00 	.word	0x40000c00

08002a0c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a12:	f107 0320 	add.w	r3, r7, #32
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	615a      	str	r2, [r3, #20]
 8002a30:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a34:	4a26      	ldr	r2, [pc, #152]	; (8002ad0 <MX_TIM12_Init+0xc4>)
 8002a36:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a3a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002a3e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a48:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002a4c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002a5a:	481c      	ldr	r0, [pc, #112]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a5c:	f007 f98c 	bl	8009d78 <HAL_TIM_Base_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8002a66:	f7ff fa9b 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002a70:	f107 0320 	add.w	r3, r7, #32
 8002a74:	4619      	mov	r1, r3
 8002a76:	4815      	ldr	r0, [pc, #84]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a78:	f007 ff38 	bl	800a8ec <HAL_TIM_ConfigClockSource>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8002a82:	f7ff fa8d 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002a86:	4811      	ldr	r0, [pc, #68]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002a88:	f007 fa4d 	bl	8009f26 <HAL_TIM_PWM_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002a92:	f7ff fa85 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a96:	2360      	movs	r3, #96	; 0x60
 8002a98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8002a9a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4807      	ldr	r0, [pc, #28]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002ab0:	f007 fe04 	bl	800a6bc <HAL_TIM_PWM_ConfigChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8002aba:	f7ff fa71 	bl	8001fa0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002abe:	4803      	ldr	r0, [pc, #12]	; (8002acc <MX_TIM12_Init+0xc0>)
 8002ac0:	f000 fa44 	bl	8002f4c <HAL_TIM_MspPostInit>

}
 8002ac4:	bf00      	nop
 8002ac6:	3730      	adds	r7, #48	; 0x30
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	24000718 	.word	0x24000718
 8002ad0:	40001800 	.word	0x40001800

08002ad4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
 8002ae8:	615a      	str	r2, [r3, #20]
 8002aea:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8002aec:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002aee:	4a20      	ldr	r2, [pc, #128]	; (8002b70 <MX_TIM13_Init+0x9c>)
 8002af0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002af4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002af8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002b02:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002b06:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b08:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002b14:	4815      	ldr	r0, [pc, #84]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002b16:	f007 f92f 	bl	8009d78 <HAL_TIM_Base_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002b20:	f7ff fa3e 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002b24:	4811      	ldr	r0, [pc, #68]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002b26:	f007 f9fe 	bl	8009f26 <HAL_TIM_PWM_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002b30:	f7ff fa36 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b34:	2360      	movs	r3, #96	; 0x60
 8002b36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8002b38:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4807      	ldr	r0, [pc, #28]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002b4e:	f007 fdb5 	bl	800a6bc <HAL_TIM_PWM_ConfigChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8002b58:	f7ff fa22 	bl	8001fa0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 8002b5c:	4803      	ldr	r0, [pc, #12]	; (8002b6c <MX_TIM13_Init+0x98>)
 8002b5e:	f000 f9f5 	bl	8002f4c <HAL_TIM_MspPostInit>

}
 8002b62:	bf00      	nop
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	24000658 	.word	0x24000658
 8002b70:	40001c00 	.word	0x40001c00

08002b74 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	615a      	str	r2, [r3, #20]
 8002b8a:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002b8e:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <MX_TIM14_Init+0x9c>)
 8002b90:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002b94:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b98:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002ba2:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002ba6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002bb4:	4815      	ldr	r0, [pc, #84]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002bb6:	f007 f8df 	bl	8009d78 <HAL_TIM_Base_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8002bc0:	f7ff f9ee 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002bc4:	4811      	ldr	r0, [pc, #68]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002bc6:	f007 f9ae 	bl	8009f26 <HAL_TIM_PWM_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8002bd0:	f7ff f9e6 	bl	8001fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd4:	2360      	movs	r3, #96	; 0x60
 8002bd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8002bd8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002bdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	2200      	movs	r2, #0
 8002bea:	4619      	mov	r1, r3
 8002bec:	4807      	ldr	r0, [pc, #28]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002bee:	f007 fd65 	bl	800a6bc <HAL_TIM_PWM_ConfigChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8002bf8:	f7ff f9d2 	bl	8001fa0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <MX_TIM14_Init+0x98>)
 8002bfe:	f000 f9a5 	bl	8002f4c <HAL_TIM_MspPostInit>

}
 8002c02:	bf00      	nop
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	240006d8 	.word	0x240006d8
 8002c10:	40002000 	.word	0x40002000

08002c14 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <MX_TIM15_Init+0xa0>)
 8002c36:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c46:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002c4a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002c5e:	4814      	ldr	r0, [pc, #80]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c60:	f007 f88a 	bl	8009d78 <HAL_TIM_Base_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002c6a:	f7ff f999 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	4619      	mov	r1, r3
 8002c7a:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c7c:	f007 fe36 	bl	800a8ec <HAL_TIM_ConfigClockSource>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002c86:	f7ff f98b 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4806      	ldr	r0, [pc, #24]	; (8002cb0 <MX_TIM15_Init+0x9c>)
 8002c98:	f008 fc6c 	bl	800b574 <HAL_TIMEx_MasterConfigSynchronization>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002ca2:	f7ff f97d 	bl	8001fa0 <Error_Handler>
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	24000598 	.word	0x24000598
 8002cb4:	40014000 	.word	0x40014000

08002cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b092      	sub	sp, #72	; 0x48
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d136      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cda:	4b92      	ldr	r3, [pc, #584]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ce0:	4a90      	ldr	r2, [pc, #576]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cea:	4b8e      	ldr	r3, [pc, #568]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	4b8a      	ldr	r3, [pc, #552]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfe:	4a89      	ldr	r2, [pc, #548]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d08:	4b86      	ldr	r3, [pc, #536]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 8002d16:	2320      	movs	r3, #32
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d26:	2301      	movs	r3, #1
 8002d28:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d2e:	4619      	mov	r1, r3
 8002d30:	487d      	ldr	r0, [pc, #500]	; (8002f28 <HAL_TIM_Base_MspInit+0x270>)
 8002d32:	f004 fba9 	bl	8007488 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2101      	movs	r1, #1
 8002d3a:	201c      	movs	r0, #28
 8002d3c:	f004 f91d 	bl	8006f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d40:	201c      	movs	r0, #28
 8002d42:	f004 f934 	bl	8006fae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002d46:	e0e8      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a77      	ldr	r2, [pc, #476]	; (8002f2c <HAL_TIM_Base_MspInit+0x274>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d136      	bne.n	8002dc0 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d52:	4b74      	ldr	r3, [pc, #464]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d58:	4a72      	ldr	r2, [pc, #456]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d62:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d70:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d76:	4a6b      	ldr	r2, [pc, #428]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d80:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 8002d8e:	2340      	movs	r3, #64	; 0x40
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d96:	2302      	movs	r3, #2
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002da6:	4619      	mov	r1, r3
 8002da8:	485f      	ldr	r0, [pc, #380]	; (8002f28 <HAL_TIM_Base_MspInit+0x270>)
 8002daa:	f004 fb6d 	bl	8007488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2101      	movs	r1, #1
 8002db2:	201d      	movs	r0, #29
 8002db4:	f004 f8e1 	bl	8006f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002db8:	201d      	movs	r0, #29
 8002dba:	f004 f8f8 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 8002dbe:	e0ac      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5a      	ldr	r2, [pc, #360]	; (8002f30 <HAL_TIM_Base_MspInit+0x278>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d137      	bne.n	8002e3a <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dca:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd0:	4a54      	ldr	r2, [pc, #336]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dda:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de8:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dee:	4a4d      	ldr	r2, [pc, #308]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 8002e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e10:	2302      	movs	r3, #2
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 8002e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e20:	4619      	mov	r1, r3
 8002e22:	4844      	ldr	r0, [pc, #272]	; (8002f34 <HAL_TIM_Base_MspInit+0x27c>)
 8002e24:	f004 fb30 	bl	8007488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	201e      	movs	r0, #30
 8002e2e:	f004 f8a4 	bl	8006f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e32:	201e      	movs	r0, #30
 8002e34:	f004 f8bb 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 8002e38:	e06f      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a3e      	ldr	r2, [pc, #248]	; (8002f38 <HAL_TIM_Base_MspInit+0x280>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10f      	bne.n	8002e64 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4a:	4a36      	ldr	r2, [pc, #216]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002e4c:	f043 0308 	orr.w	r3, r3, #8
 8002e50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e54:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	69bb      	ldr	r3, [r7, #24]
}
 8002e62:	e05a      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a34      	ldr	r2, [pc, #208]	; (8002f3c <HAL_TIM_Base_MspInit+0x284>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10f      	bne.n	8002e8e <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e74:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e7e:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697b      	ldr	r3, [r7, #20]
}
 8002e8c:	e045      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2b      	ldr	r2, [pc, #172]	; (8002f40 <HAL_TIM_Base_MspInit+0x288>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10f      	bne.n	8002eb8 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e98:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e9e:	4a21      	ldr	r2, [pc, #132]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
}
 8002eb6:	e030      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <HAL_TIM_Base_MspInit+0x28c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec8:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	e01b      	b.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_TIM_Base_MspInit+0x290>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d116      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_TIM_Base_MspInit+0x26c>)
 8002efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2074      	movs	r0, #116	; 0x74
 8002f10:	f004 f833 	bl	8006f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002f14:	2074      	movs	r0, #116	; 0x74
 8002f16:	f004 f84a 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 8002f1a:	bf00      	nop
 8002f1c:	3748      	adds	r7, #72	; 0x48
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	58024400 	.word	0x58024400
 8002f28:	58020000 	.word	0x58020000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	58020c00 	.word	0x58020c00
 8002f38:	40000c00 	.word	0x40000c00
 8002f3c:	40001800 	.word	0x40001800
 8002f40:	40001c00 	.word	0x40001c00
 8002f44:	40002000 	.word	0x40002000
 8002f48:	40014000 	.word	0x40014000

08002f4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a39      	ldr	r2, [pc, #228]	; (8003050 <HAL_TIM_MspPostInit+0x104>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d120      	bne.n	8002fb0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	4b39      	ldr	r3, [pc, #228]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8002f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f74:	4a37      	ldr	r2, [pc, #220]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f7e:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8002f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration    
    PB14     ------> TIM12_CH1 
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8002f8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f96:	2302      	movs	r3, #2
 8002f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	482b      	ldr	r0, [pc, #172]	; (8003058 <HAL_TIM_MspPostInit+0x10c>)
 8002faa:	f004 fa6d 	bl	8007488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002fae:	e04a      	b.n	8003046 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a29      	ldr	r2, [pc, #164]	; (800305c <HAL_TIM_MspPostInit+0x110>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d120      	bne.n	8002ffc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fba:	4b26      	ldr	r3, [pc, #152]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8002fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8002fc2:	f043 0320 	orr.w	r3, r3, #32
 8002fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8002fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8002fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002fea:	2309      	movs	r3, #9
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	481a      	ldr	r0, [pc, #104]	; (8003060 <HAL_TIM_MspPostInit+0x114>)
 8002ff6:	f004 fa47 	bl	8007488 <HAL_GPIO_Init>
}
 8002ffa:	e024      	b.n	8003046 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_TIM_MspPostInit+0x118>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d11f      	bne.n	8003046 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8003008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 800300e:	f043 0320 	orr.w	r3, r3, #32
 8003012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_TIM_MspPostInit+0x108>)
 8003018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8003024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800302e:	2302      	movs	r3, #2
 8003030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003036:	2309      	movs	r3, #9
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	4619      	mov	r1, r3
 8003040:	4807      	ldr	r0, [pc, #28]	; (8003060 <HAL_TIM_MspPostInit+0x114>)
 8003042:	f004 fa21 	bl	8007488 <HAL_GPIO_Init>
}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40001800 	.word	0x40001800
 8003054:	58024400 	.word	0x58024400
 8003058:	58020400 	.word	0x58020400
 800305c:	40001c00 	.word	0x40001c00
 8003060:	58021400 	.word	0x58021400
 8003064:	40002000 	.word	0x40002000

08003068 <inicializarTrayectoria>:
double Vm, VfHip1, VfHip3;
double tfHip1, tiHip2, tfHip2, tiHip3, tfHip3, tiHip4, TiempoTotX, tfHip4;
double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;


void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {	//(Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	ed2d 8b04 	vpush	{d8-d9}
 800306e:	b091      	sub	sp, #68	; 0x44
 8003070:	af00      	add	r7, sp, #0
 8003072:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8003076:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 800307a:	ed87 2b08 	vstr	d2, [r7, #32]
 800307e:	ed87 3b06 	vstr	d3, [r7, #24]
 8003082:	ed87 4b04 	vstr	d4, [r7, #16]
 8003086:	ed87 5b02 	vstr	d5, [r7, #8]
 800308a:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 800308e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8003092:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003096:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309e:	d519      	bpl.n	80030d4 <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 80030a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80030a4:	eeb1 7b47 	vneg.f64	d7, d7
 80030a8:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <inicializarTrayectoria+0x23c>)
 80030aa:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 80030ae:	4a7e      	ldr	r2, [pc, #504]	; (80032a8 <inicializarTrayectoria+0x240>)
 80030b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030b4:	e9c2 3400 	strd	r3, r4, [r2]
		Vm = -Vmax;
 80030b8:	ed97 7b04 	vldr	d7, [r7, #16]
 80030bc:	eeb1 7b47 	vneg.f64	d7, d7
 80030c0:	4b7a      	ldr	r3, [pc, #488]	; (80032ac <inicializarTrayectoria+0x244>)
 80030c2:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 80030c6:	ed97 7b00 	vldr	d7, [r7]
 80030ca:	eeb1 7b47 	vneg.f64	d7, d7
 80030ce:	ed87 7b00 	vstr	d7, [r7]
 80030d2:	e019      	b.n	8003108 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 80030d4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80030d8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80030dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80030e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e4:	dd10      	ble.n	8003108 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 80030e6:	4a6f      	ldr	r2, [pc, #444]	; (80032a4 <inicializarTrayectoria+0x23c>)
 80030e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030ec:	e9c2 3400 	strd	r3, r4, [r2]
		Af = -Amax;
 80030f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80030f4:	eeb1 7b47 	vneg.f64	d7, d7
 80030f8:	4b6b      	ldr	r3, [pc, #428]	; (80032a8 <inicializarTrayectoria+0x240>)
 80030fa:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 80030fe:	4a6b      	ldr	r2, [pc, #428]	; (80032ac <inicializarTrayectoria+0x244>)
 8003100:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003104:	e9c2 3400 	strd	r3, r4, [r2]
	}

	if (V0Hip > Vmax) {
 8003108:	ed97 6b08 	vldr	d6, [r7, #32]
 800310c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003110:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	dd0b      	ble.n	8003132 <inicializarTrayectoria+0xca>
		Ai = -Amax;
 800311a:	ed97 7b02 	vldr	d7, [r7, #8]
 800311e:	eeb1 7b47 	vneg.f64	d7, d7
 8003122:	4b60      	ldr	r3, [pc, #384]	; (80032a4 <inicializarTrayectoria+0x23c>)
 8003124:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8003128:	4a5f      	ldr	r2, [pc, #380]	; (80032a8 <inicializarTrayectoria+0x240>)
 800312a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800312e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if (Vf > Vmax) {
 8003132:	ed97 6b06 	vldr	d6, [r7, #24]
 8003136:	ed97 7b04 	vldr	d7, [r7, #16]
 800313a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003142:	dd0b      	ble.n	800315c <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8003144:	4a57      	ldr	r2, [pc, #348]	; (80032a4 <inicializarTrayectoria+0x23c>)
 8003146:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800314a:	e9c2 3400 	strd	r3, r4, [r2]
		Af = -Amax;
 800314e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003152:	eeb1 7b47 	vneg.f64	d7, d7
 8003156:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <inicializarTrayectoria+0x240>)
 8003158:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 800315c:	2300      	movs	r3, #0
 800315e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003162:	f000 bd07 	b.w	8003b74 <inicializarTrayectoria+0xb0c>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8003166:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <inicializarTrayectoria+0x23c>)
 8003168:	ed93 6b00 	vldr	d6, [r3]
 800316c:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <inicializarTrayectoria+0x23c>)
 800316e:	ed93 7b00 	vldr	d7, [r3]
 8003172:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003176:	ed97 7b00 	vldr	d7, [r7]
 800317a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800317e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003182:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003186:	4b4a      	ldr	r3, [pc, #296]	; (80032b0 <inicializarTrayectoria+0x248>)
 8003188:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 800318c:	4b48      	ldr	r3, [pc, #288]	; (80032b0 <inicializarTrayectoria+0x248>)
 800318e:	ed93 7b00 	vldr	d7, [r3]
 8003192:	eeb0 6bc7 	vabs.f64	d6, d7
 8003196:	4b45      	ldr	r3, [pc, #276]	; (80032ac <inicializarTrayectoria+0x244>)
 8003198:	ed93 5b00 	vldr	d5, [r3]
 800319c:	ed97 7b08 	vldr	d7, [r7, #32]
 80031a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80031a4:	eeb0 7bc7 	vabs.f64	d7, d7
 80031a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	dd35      	ble.n	800321e <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <inicializarTrayectoria+0x244>)
 80031b4:	ed93 6b00 	vldr	d6, [r3]
 80031b8:	ed97 7b08 	vldr	d7, [r7, #32]
 80031bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80031c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	d029      	beq.n	800321e <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 80031ca:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <inicializarTrayectoria+0x23c>)
 80031cc:	ed93 6b00 	vldr	d6, [r3]
 80031d0:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <inicializarTrayectoria+0x23c>)
 80031d2:	ed93 7b00 	vldr	d7, [r3]
 80031d6:	eeb0 7bc7 	vabs.f64	d7, d7
 80031da:	ee86 8b07 	vdiv.f64	d8, d6, d7
 80031de:	4b33      	ldr	r3, [pc, #204]	; (80032ac <inicializarTrayectoria+0x244>)
 80031e0:	ed93 6b00 	vldr	d6, [r3]
 80031e4:	ed97 7b08 	vldr	d7, [r7, #32]
 80031e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80031ec:	eeb0 6bc7 	vabs.f64	d6, d7
 80031f0:	ed97 7b00 	vldr	d7, [r7]
 80031f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80031f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80031fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003200:	f00d fb62 	bl	80108c8 <sqrt>
 8003204:	eeb0 7b40 	vmov.f64	d7, d0
 8003208:	ee28 7b07 	vmul.f64	d7, d8, d7
 800320c:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <inicializarTrayectoria+0x24c>)
 800320e:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <inicializarTrayectoria+0x24c>)
 8003214:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003218:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <inicializarTrayectoria+0x23c>)
 800321a:	e9c2 3400 	strd	r3, r4, [r2]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <inicializarTrayectoria+0x244>)
 8003220:	ed93 6b00 	vldr	d6, [r3]
 8003224:	ed97 7b08 	vldr	d7, [r7, #32]
 8003228:	ee36 7b47 	vsub.f64	d7, d6, d7
 800322c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	d150      	bne.n	80032d8 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8003236:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <inicializarTrayectoria+0x250>)
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f04f 0400 	mov.w	r4, #0
 8003240:	e9c2 3400 	strd	r3, r4, [r2]
			a2Hip1 = 0;
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <inicializarTrayectoria+0x254>)
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	f04f 0400 	mov.w	r4, #0
 800324e:	e9c2 3400 	strd	r3, r4, [r2]
			a1Hip1 = 0;
 8003252:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <inicializarTrayectoria+0x258>)
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	f04f 0400 	mov.w	r4, #0
 800325c:	e9c2 3400 	strd	r3, r4, [r2]
			a0Hip1 = 0;
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <inicializarTrayectoria+0x25c>)
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f04f 0400 	mov.w	r4, #0
 800326a:	e9c2 3400 	strd	r3, r4, [r2]
			tfHip1 = 0;
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <inicializarTrayectoria+0x260>)
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f04f 0400 	mov.w	r4, #0
 8003278:	e9c2 3400 	strd	r3, r4, [r2]
			tiHip2 = 0;
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <inicializarTrayectoria+0x264>)
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	f04f 0400 	mov.w	r4, #0
 8003286:	e9c2 3400 	strd	r3, r4, [r2]
			tfHip2 = 0;
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <inicializarTrayectoria+0x268>)
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	e9c2 3400 	strd	r3, r4, [r2]
			XfHip2 = XiHip1;
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <inicializarTrayectoria+0x26c>)
 800329a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800329e:	e9c2 3400 	strd	r3, r4, [r2]
 80032a2:	e195      	b.n	80035d0 <inicializarTrayectoria+0x568>
 80032a4:	240008b8 	.word	0x240008b8
 80032a8:	240008a0 	.word	0x240008a0
 80032ac:	24000b20 	.word	0x24000b20
 80032b0:	240009c8 	.word	0x240009c8
 80032b4:	240009f8 	.word	0x240009f8
 80032b8:	240009d8 	.word	0x240009d8
 80032bc:	24000b30 	.word	0x24000b30
 80032c0:	24000ac0 	.word	0x24000ac0
 80032c4:	24000ab8 	.word	0x24000ab8
 80032c8:	240007b0 	.word	0x240007b0
 80032cc:	24000790 	.word	0x24000790
 80032d0:	240009e0 	.word	0x240009e0
 80032d4:	240009d0 	.word	0x240009d0
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 80032d8:	ed97 6b00 	vldr	d6, [r7]
 80032dc:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80032e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80032e4:	4bd1      	ldr	r3, [pc, #836]	; (800362c <inicializarTrayectoria+0x5c4>)
 80032e6:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 80032ea:	4ad1      	ldr	r2, [pc, #836]	; (8003630 <inicializarTrayectoria+0x5c8>)
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	f04f 0400 	mov.w	r4, #0
 80032f4:	e9c2 3400 	strd	r3, r4, [r2]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 80032f8:	4bce      	ldr	r3, [pc, #824]	; (8003634 <inicializarTrayectoria+0x5cc>)
 80032fa:	ed93 5b00 	vldr	d5, [r3]
 80032fe:	4bcb      	ldr	r3, [pc, #812]	; (800362c <inicializarTrayectoria+0x5c4>)
 8003300:	ed93 7b00 	vldr	d7, [r3]
 8003304:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8003308:	ee27 6b06 	vmul.f64	d6, d7, d6
 800330c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003310:	4bc9      	ldr	r3, [pc, #804]	; (8003638 <inicializarTrayectoria+0x5d0>)
 8003312:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8003316:	4ac9      	ldr	r2, [pc, #804]	; (800363c <inicializarTrayectoria+0x5d4>)
 8003318:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800331c:	e9c2 3400 	strd	r3, r4, [r2]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8003320:	4bc3      	ldr	r3, [pc, #780]	; (8003630 <inicializarTrayectoria+0x5c8>)
 8003322:	ed93 7b00 	vldr	d7, [r3]
 8003326:	ee37 6b07 	vadd.f64	d6, d7, d7
 800332a:	4bc3      	ldr	r3, [pc, #780]	; (8003638 <inicializarTrayectoria+0x5d0>)
 800332c:	ed93 7b00 	vldr	d7, [r3]
 8003330:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003334:	4bc1      	ldr	r3, [pc, #772]	; (800363c <inicializarTrayectoria+0x5d4>)
 8003336:	ed93 7b00 	vldr	d7, [r3]
 800333a:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 800333e:	4bbb      	ldr	r3, [pc, #748]	; (800362c <inicializarTrayectoria+0x5c4>)
 8003340:	ed93 7b00 	vldr	d7, [r3]
 8003344:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003348:	ee27 9b06 	vmul.f64	d9, d7, d6
 800334c:	4bba      	ldr	r3, [pc, #744]	; (8003638 <inicializarTrayectoria+0x5d0>)
 800334e:	ed93 7b00 	vldr	d7, [r3]
 8003352:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003356:	eeb0 0b47 	vmov.f64	d0, d7
 800335a:	f00d f985 	bl	8010668 <pow>
 800335e:	eeb0 7b40 	vmov.f64	d7, d0
 8003362:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003366:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 800336a:	4bb5      	ldr	r3, [pc, #724]	; (8003640 <inicializarTrayectoria+0x5d8>)
 800336c:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8003370:	4ab4      	ldr	r2, [pc, #720]	; (8003644 <inicializarTrayectoria+0x5dc>)
 8003372:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003376:	e9c2 3400 	strd	r3, r4, [r2]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 800337a:	4bb0      	ldr	r3, [pc, #704]	; (800363c <inicializarTrayectoria+0x5d4>)
 800337c:	ed93 6b00 	vldr	d6, [r3]
 8003380:	4bad      	ldr	r3, [pc, #692]	; (8003638 <inicializarTrayectoria+0x5d0>)
 8003382:	ed93 7b00 	vldr	d7, [r3]
 8003386:	ee26 6b07 	vmul.f64	d6, d6, d7
 800338a:	4bae      	ldr	r3, [pc, #696]	; (8003644 <inicializarTrayectoria+0x5dc>)
 800338c:	ed93 7b00 	vldr	d7, [r3]
 8003390:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003394:	4ba8      	ldr	r3, [pc, #672]	; (8003638 <inicializarTrayectoria+0x5d0>)
 8003396:	ed93 7b00 	vldr	d7, [r3]
 800339a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800339e:	eeb0 0b47 	vmov.f64	d0, d7
 80033a2:	f00d f961 	bl	8010668 <pow>
 80033a6:	eeb0 6b40 	vmov.f64	d6, d0
 80033aa:	4ba1      	ldr	r3, [pc, #644]	; (8003630 <inicializarTrayectoria+0x5c8>)
 80033ac:	ed93 7b00 	vldr	d7, [r3]
 80033b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033b4:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 80033b8:	4b9f      	ldr	r3, [pc, #636]	; (8003638 <inicializarTrayectoria+0x5d0>)
 80033ba:	ed93 7b00 	vldr	d7, [r3]
 80033be:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80033c2:	eeb0 0b47 	vmov.f64	d0, d7
 80033c6:	f00d f94f 	bl	8010668 <pow>
 80033ca:	eeb0 6b40 	vmov.f64	d6, d0
 80033ce:	4b97      	ldr	r3, [pc, #604]	; (800362c <inicializarTrayectoria+0x5c4>)
 80033d0:	ed93 7b00 	vldr	d7, [r3]
 80033d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033d8:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 80033dc:	4b9a      	ldr	r3, [pc, #616]	; (8003648 <inicializarTrayectoria+0x5e0>)
 80033de:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 80033e2:	ed97 7b00 	vldr	d7, [r7]
 80033e6:	eeb1 6b47 	vneg.f64	d6, d7
 80033ea:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80033ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80033f2:	4b96      	ldr	r3, [pc, #600]	; (800364c <inicializarTrayectoria+0x5e4>)
 80033f4:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 80033f8:	4b8e      	ldr	r3, [pc, #568]	; (8003634 <inicializarTrayectoria+0x5cc>)
 80033fa:	ed93 6b00 	vldr	d6, [r3]
 80033fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003402:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003406:	4b92      	ldr	r3, [pc, #584]	; (8003650 <inicializarTrayectoria+0x5e8>)
 8003408:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 800340c:	4b91      	ldr	r3, [pc, #580]	; (8003654 <inicializarTrayectoria+0x5ec>)
 800340e:	ed93 6b00 	vldr	d6, [r3]
 8003412:	4b8f      	ldr	r3, [pc, #572]	; (8003650 <inicializarTrayectoria+0x5e8>)
 8003414:	ed93 7b00 	vldr	d7, [r3]
 8003418:	ee37 5b07 	vadd.f64	d5, d7, d7
 800341c:	4b85      	ldr	r3, [pc, #532]	; (8003634 <inicializarTrayectoria+0x5cc>)
 800341e:	ed93 3b00 	vldr	d3, [r3]
 8003422:	ed97 4b00 	vldr	d4, [r7]
 8003426:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800342a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800342e:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 8003432:	4b86      	ldr	r3, [pc, #536]	; (800364c <inicializarTrayectoria+0x5e4>)
 8003434:	ed93 7b00 	vldr	d7, [r3]
 8003438:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800343c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003440:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <inicializarTrayectoria+0x5cc>)
 8003442:	ed93 3b00 	vldr	d3, [r3]
 8003446:	ed97 4b00 	vldr	d4, [r7]
 800344a:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800344e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003452:	4b78      	ldr	r3, [pc, #480]	; (8003634 <inicializarTrayectoria+0x5cc>)
 8003454:	ed93 3b00 	vldr	d3, [r3]
 8003458:	ed97 4b00 	vldr	d4, [r7]
 800345c:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003460:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003464:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <inicializarTrayectoria+0x5f0>)
 800346a:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 800346e:	4b7a      	ldr	r3, [pc, #488]	; (8003658 <inicializarTrayectoria+0x5f0>)
 8003470:	ed93 6b00 	vldr	d6, [r3]
 8003474:	4b72      	ldr	r3, [pc, #456]	; (8003640 <inicializarTrayectoria+0x5d8>)
 8003476:	ed93 7b00 	vldr	d7, [r3]
 800347a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <inicializarTrayectoria+0x5cc>)
 8003480:	ed93 7b00 	vldr	d7, [r3]
 8003484:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003488:	4b6b      	ldr	r3, [pc, #428]	; (8003638 <inicializarTrayectoria+0x5d0>)
 800348a:	ed93 7b00 	vldr	d7, [r3]
 800348e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003492:	4b72      	ldr	r3, [pc, #456]	; (800365c <inicializarTrayectoria+0x5f4>)
 8003494:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8003498:	4b66      	ldr	r3, [pc, #408]	; (8003634 <inicializarTrayectoria+0x5cc>)
 800349a:	ed93 7b00 	vldr	d7, [r3]
 800349e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80034a2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80034a6:	4b6c      	ldr	r3, [pc, #432]	; (8003658 <inicializarTrayectoria+0x5f0>)
 80034a8:	ed93 6b00 	vldr	d6, [r3]
 80034ac:	4b64      	ldr	r3, [pc, #400]	; (8003640 <inicializarTrayectoria+0x5d8>)
 80034ae:	ed93 7b00 	vldr	d7, [r3]
 80034b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80034b6:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <inicializarTrayectoria+0x5cc>)
 80034b8:	ed93 7b00 	vldr	d7, [r3]
 80034bc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80034c0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80034c4:	eeb0 0b45 	vmov.f64	d0, d5
 80034c8:	f00d f8ce 	bl	8010668 <pow>
 80034cc:	eeb0 7b40 	vmov.f64	d7, d0
 80034d0:	ee28 6b07 	vmul.f64	d6, d8, d7
 80034d4:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <inicializarTrayectoria+0x5e0>)
 80034d6:	ed93 7b00 	vldr	d7, [r3]
 80034da:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 80034de:	4b5e      	ldr	r3, [pc, #376]	; (8003658 <inicializarTrayectoria+0x5f0>)
 80034e0:	ed93 5b00 	vldr	d5, [r3]
 80034e4:	4b56      	ldr	r3, [pc, #344]	; (8003640 <inicializarTrayectoria+0x5d8>)
 80034e6:	ed93 7b00 	vldr	d7, [r3]
 80034ea:	ee35 4b47 	vsub.f64	d4, d5, d7
 80034ee:	4b51      	ldr	r3, [pc, #324]	; (8003634 <inicializarTrayectoria+0x5cc>)
 80034f0:	ed93 7b00 	vldr	d7, [r3]
 80034f4:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80034f8:	4b51      	ldr	r3, [pc, #324]	; (8003640 <inicializarTrayectoria+0x5d8>)
 80034fa:	ed93 7b00 	vldr	d7, [r3]
 80034fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003502:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8003506:	4b56      	ldr	r3, [pc, #344]	; (8003660 <inicializarTrayectoria+0x5f8>)
 8003508:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 800350c:	4b49      	ldr	r3, [pc, #292]	; (8003634 <inicializarTrayectoria+0x5cc>)
 800350e:	ed93 5b00 	vldr	d5, [r3]
 8003512:	ed97 7b00 	vldr	d7, [r7]
 8003516:	eeb1 6b47 	vneg.f64	d6, d7
 800351a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800351e:	eeb0 6bc7 	vabs.f64	d6, d7
 8003522:	4b4e      	ldr	r3, [pc, #312]	; (800365c <inicializarTrayectoria+0x5f4>)
 8003524:	ed93 7b00 	vldr	d7, [r3]
 8003528:	ee36 7b07 	vadd.f64	d7, d6, d7
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <inicializarTrayectoria+0x5fc>)
 800352e:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 8003532:	4b49      	ldr	r3, [pc, #292]	; (8003658 <inicializarTrayectoria+0x5f0>)
 8003534:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003538:	4a4b      	ldr	r2, [pc, #300]	; (8003668 <inicializarTrayectoria+0x600>)
 800353a:	e9c2 3400 	strd	r3, r4, [r2]
			a0Hip2 = XiHip2;
 800353e:	4b48      	ldr	r3, [pc, #288]	; (8003660 <inicializarTrayectoria+0x5f8>)
 8003540:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003544:	4a49      	ldr	r2, [pc, #292]	; (800366c <inicializarTrayectoria+0x604>)
 8003546:	e9c2 3400 	strd	r3, r4, [r2]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 800354a:	4b46      	ldr	r3, [pc, #280]	; (8003664 <inicializarTrayectoria+0x5fc>)
 800354c:	ed93 6b00 	vldr	d6, [r3]
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <inicializarTrayectoria+0x5f4>)
 8003552:	ed93 7b00 	vldr	d7, [r3]
 8003556:	ee36 6b47 	vsub.f64	d6, d6, d7
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <inicializarTrayectoria+0x600>)
 800355c:	ed93 7b00 	vldr	d7, [r3]
 8003560:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <inicializarTrayectoria+0x604>)
 8003566:	ed93 7b00 	vldr	d7, [r3]
 800356a:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <inicializarTrayectoria+0x5fc>)
 8003570:	ed93 6b00 	vldr	d6, [r3]
 8003574:	4b39      	ldr	r3, [pc, #228]	; (800365c <inicializarTrayectoria+0x5f4>)
 8003576:	ed93 7b00 	vldr	d7, [r3]
 800357a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800357e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003582:	eeb0 0b47 	vmov.f64	d0, d7
 8003586:	f00d f86f 	bl	8010668 <pow>
 800358a:	eeb0 6b40 	vmov.f64	d6, d0
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <inicializarTrayectoria+0x5e8>)
 8003590:	ed93 7b00 	vldr	d7, [r3]
 8003594:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003598:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 800359c:	4b31      	ldr	r3, [pc, #196]	; (8003664 <inicializarTrayectoria+0x5fc>)
 800359e:	ed93 6b00 	vldr	d6, [r3]
 80035a2:	4b2e      	ldr	r3, [pc, #184]	; (800365c <inicializarTrayectoria+0x5f4>)
 80035a4:	ed93 7b00 	vldr	d7, [r3]
 80035a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80035ac:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80035b0:	eeb0 0b47 	vmov.f64	d0, d7
 80035b4:	f00d f858 	bl	8010668 <pow>
 80035b8:	eeb0 6b40 	vmov.f64	d6, d0
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <inicializarTrayectoria+0x5e4>)
 80035be:	ed93 7b00 	vldr	d7, [r3]
 80035c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80035c6:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 80035ca:	4b29      	ldr	r3, [pc, #164]	; (8003670 <inicializarTrayectoria+0x608>)
 80035cc:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 80035d0:	4b28      	ldr	r3, [pc, #160]	; (8003674 <inicializarTrayectoria+0x60c>)
 80035d2:	ed93 7b00 	vldr	d7, [r3]
 80035d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80035da:	eeb0 0b47 	vmov.f64	d0, d7
 80035de:	f00d f843 	bl	8010668 <pow>
 80035e2:	eeb0 5b40 	vmov.f64	d5, d0
 80035e6:	ed97 7b00 	vldr	d7, [r7]
 80035ea:	ee37 6b07 	vadd.f64	d6, d7, d7
 80035ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80035f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <inicializarTrayectoria+0x610>)
 80035f8:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 80035fc:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <inicializarTrayectoria+0x610>)
 80035fe:	ed93 7b00 	vldr	d7, [r3]
 8003602:	eeb0 6bc7 	vabs.f64	d6, d7
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <inicializarTrayectoria+0x5ec>)
 8003608:	ed93 5b00 	vldr	d5, [r3]
 800360c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003610:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003614:	eeb0 7bc7 	vabs.f64	d7, d7
 8003618:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003620:	dd5f      	ble.n	80036e2 <inicializarTrayectoria+0x67a>
			if (fabs(Vm - Vf) != 0) {
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <inicializarTrayectoria+0x5ec>)
 8003624:	ed93 6b00 	vldr	d6, [r3]
 8003628:	e028      	b.n	800367c <inicializarTrayectoria+0x614>
 800362a:	bf00      	nop
 800362c:	240009d8 	.word	0x240009d8
 8003630:	24000b30 	.word	0x24000b30
 8003634:	240008b8 	.word	0x240008b8
 8003638:	240007b0 	.word	0x240007b0
 800363c:	24000ac0 	.word	0x24000ac0
 8003640:	240009a0 	.word	0x240009a0
 8003644:	24000ab8 	.word	0x24000ab8
 8003648:	240008e0 	.word	0x240008e0
 800364c:	240007a8 	.word	0x240007a8
 8003650:	24000838 	.word	0x24000838
 8003654:	24000b20 	.word	0x24000b20
 8003658:	240008e8 	.word	0x240008e8
 800365c:	24000790 	.word	0x24000790
 8003660:	24000bb0 	.word	0x24000bb0
 8003664:	240009e0 	.word	0x240009e0
 8003668:	240008f8 	.word	0x240008f8
 800366c:	24000a18 	.word	0x24000a18
 8003670:	240009d0 	.word	0x240009d0
 8003674:	240008a0 	.word	0x240008a0
 8003678:	240009c8 	.word	0x240009c8
 800367c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003684:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368c:	d029      	beq.n	80036e2 <inicializarTrayectoria+0x67a>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 800368e:	4b2f      	ldr	r3, [pc, #188]	; (800374c <inicializarTrayectoria+0x6e4>)
 8003690:	ed93 6b00 	vldr	d6, [r3]
 8003694:	4b2d      	ldr	r3, [pc, #180]	; (800374c <inicializarTrayectoria+0x6e4>)
 8003696:	ed93 7b00 	vldr	d7, [r3]
 800369a:	eeb0 7bc7 	vabs.f64	d7, d7
 800369e:	ee86 8b07 	vdiv.f64	d8, d6, d7
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <inicializarTrayectoria+0x6e8>)
 80036a4:	ed93 6b00 	vldr	d6, [r3]
 80036a8:	ed97 7b06 	vldr	d7, [r7, #24]
 80036ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036b0:	eeb0 6bc7 	vabs.f64	d6, d7
 80036b4:	ed97 7b00 	vldr	d7, [r7]
 80036b8:	eeb0 7bc7 	vabs.f64	d7, d7
 80036bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80036c0:	eeb0 0b47 	vmov.f64	d0, d7
 80036c4:	f00d f900 	bl	80108c8 <sqrt>
 80036c8:	eeb0 7b40 	vmov.f64	d7, d0
 80036cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <inicializarTrayectoria+0x6ec>)
 80036d2:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <inicializarTrayectoria+0x6ec>)
 80036d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	; (800374c <inicializarTrayectoria+0x6e4>)
 80036de:	e9c2 3400 	strd	r3, r4, [r2]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <inicializarTrayectoria+0x6e8>)
 80036e4:	ed93 6b00 	vldr	d6, [r3]
 80036e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80036ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d13a      	bne.n	8003770 <inicializarTrayectoria+0x708>
			VfHip3 = Vf;
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <inicializarTrayectoria+0x6f0>)
 80036fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003700:	e9c2 3400 	strd	r3, r4, [r2]
			XiHip3 = XfHip4;
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <inicializarTrayectoria+0x6f4>)
 8003706:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800370a:	e9c2 3400 	strd	r3, r4, [r2]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <inicializarTrayectoria+0x6f4>)
 8003710:	ed93 6b00 	vldr	d6, [r3]
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <inicializarTrayectoria+0x6f8>)
 8003716:	ed93 7b00 	vldr	d7, [r3]
 800371a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <inicializarTrayectoria+0x6e8>)
 8003720:	ed93 6b00 	vldr	d6, [r3]
 8003724:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003728:	eeb0 6bc7 	vabs.f64	d6, d7
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <inicializarTrayectoria+0x6fc>)
 800372e:	ed93 7b00 	vldr	d7, [r3]
 8003732:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003736:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <inicializarTrayectoria+0x700>)
 8003738:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <inicializarTrayectoria+0x700>)
 800373e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <inicializarTrayectoria+0x704>)
 8003744:	e9c2 3400 	strd	r3, r4, [r2]
 8003748:	e18c      	b.n	8003a64 <inicializarTrayectoria+0x9fc>
 800374a:	bf00      	nop
 800374c:	240008a0 	.word	0x240008a0
 8003750:	24000b20 	.word	0x24000b20
 8003754:	24000a60 	.word	0x24000a60
 8003758:	24000b50 	.word	0x24000b50
 800375c:	24000840 	.word	0x24000840
 8003760:	240009d0 	.word	0x240009d0
 8003764:	240009e0 	.word	0x240009e0
 8003768:	24000ab0 	.word	0x24000ab0
 800376c:	24000bb8 	.word	0x24000bb8
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 8003770:	4bc7      	ldr	r3, [pc, #796]	; (8003a90 <inicializarTrayectoria+0xa28>)
 8003772:	ed93 7b00 	vldr	d7, [r3]
 8003776:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800377a:	eeb0 0b47 	vmov.f64	d0, d7
 800377e:	f00c ff73 	bl	8010668 <pow>
 8003782:	eeb0 5b40 	vmov.f64	d5, d0
 8003786:	ed97 7b00 	vldr	d7, [r7]
 800378a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800378e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003792:	ed97 7b06 	vldr	d7, [r7, #24]
 8003796:	ee36 7b07 	vadd.f64	d7, d6, d7
 800379a:	4bbe      	ldr	r3, [pc, #760]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 800379c:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 80037a0:	4bbb      	ldr	r3, [pc, #748]	; (8003a90 <inicializarTrayectoria+0xa28>)
 80037a2:	ed93 7b00 	vldr	d7, [r3]
 80037a6:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80037aa:	eeb0 0b47 	vmov.f64	d0, d7
 80037ae:	f00c ff5b 	bl	8010668 <pow>
 80037b2:	eeb0 8b40 	vmov.f64	d8, d0
 80037b6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80037ba:	ed97 0b00 	vldr	d0, [r7]
 80037be:	f00c ff53 	bl	8010668 <pow>
 80037c2:	eeb0 6b40 	vmov.f64	d6, d0
 80037c6:	eeb1 7b08 	vmov.f64	d7, #24	; 0x40c00000  6.0
 80037ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80037ce:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80037d2:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 80037d6:	4baf      	ldr	r3, [pc, #700]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 80037d8:	ed93 4b00 	vldr	d4, [r3]
 80037dc:	4bad      	ldr	r3, [pc, #692]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 80037de:	ed93 7b00 	vldr	d7, [r3]
 80037e2:	eeb0 5bc7 	vabs.f64	d5, d7
 80037e6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80037ea:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 80037ee:	4ba8      	ldr	r3, [pc, #672]	; (8003a90 <inicializarTrayectoria+0xa28>)
 80037f0:	ed93 4b00 	vldr	d4, [r3]
 80037f4:	ed97 5b00 	vldr	d5, [r7]
 80037f8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80037fc:	eeb0 5bc7 	vabs.f64	d5, d7
 8003800:	ed97 7b06 	vldr	d7, [r7, #24]
 8003804:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003808:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 800380c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8003810:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 8003814:	4ba0      	ldr	r3, [pc, #640]	; (8003a98 <inicializarTrayectoria+0xa30>)
 8003816:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 800381a:	4ba0      	ldr	r3, [pc, #640]	; (8003a9c <inicializarTrayectoria+0xa34>)
 800381c:	ed93 8b00 	vldr	d8, [r3]
 8003820:	4b9b      	ldr	r3, [pc, #620]	; (8003a90 <inicializarTrayectoria+0xa28>)
 8003822:	ed93 7b00 	vldr	d7, [r3]
 8003826:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800382a:	eeb0 0b47 	vmov.f64	d0, d7
 800382e:	f00c ff1b 	bl	8010668 <pow>
 8003832:	eeb0 5b40 	vmov.f64	d5, d0
 8003836:	ed97 7b00 	vldr	d7, [r7]
 800383a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800383e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003842:	ee38 7b47 	vsub.f64	d7, d8, d7
 8003846:	4b96      	ldr	r3, [pc, #600]	; (8003aa0 <inicializarTrayectoria+0xa38>)
 8003848:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 800384c:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <inicializarTrayectoria+0xa30>)
 800384e:	ed93 8b00 	vldr	d8, [r3]
 8003852:	4b90      	ldr	r3, [pc, #576]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 8003854:	ed93 5b00 	vldr	d5, [r3]
 8003858:	4b8e      	ldr	r3, [pc, #568]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 800385a:	ed93 7b00 	vldr	d7, [r3]
 800385e:	eeb0 7bc7 	vabs.f64	d7, d7
 8003862:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003866:	4b8a      	ldr	r3, [pc, #552]	; (8003a90 <inicializarTrayectoria+0xa28>)
 8003868:	ed93 7b00 	vldr	d7, [r3]
 800386c:	eeb0 5bc7 	vabs.f64	d5, d7
 8003870:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8003874:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003878:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 800387c:	4b85      	ldr	r3, [pc, #532]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 800387e:	ed93 6b00 	vldr	d6, [r3]
 8003882:	4b87      	ldr	r3, [pc, #540]	; (8003aa0 <inicializarTrayectoria+0xa38>)
 8003884:	ed93 7b00 	vldr	d7, [r3]
 8003888:	ee36 6b47 	vsub.f64	d6, d6, d7
 800388c:	4b80      	ldr	r3, [pc, #512]	; (8003a90 <inicializarTrayectoria+0xa28>)
 800388e:	ed93 7b00 	vldr	d7, [r3]
 8003892:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003896:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800389a:	eeb0 0b45 	vmov.f64	d0, d5
 800389e:	f00c fee3 	bl	8010668 <pow>
 80038a2:	eeb0 7b40 	vmov.f64	d7, d0
 80038a6:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 80038aa:	4b7a      	ldr	r3, [pc, #488]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 80038ac:	ed93 5b00 	vldr	d5, [r3]
 80038b0:	4b7b      	ldr	r3, [pc, #492]	; (8003aa0 <inicializarTrayectoria+0xa38>)
 80038b2:	ed93 7b00 	vldr	d7, [r3]
 80038b6:	ee35 4b47 	vsub.f64	d4, d5, d7
 80038ba:	4b75      	ldr	r3, [pc, #468]	; (8003a90 <inicializarTrayectoria+0xa28>)
 80038bc:	ed93 7b00 	vldr	d7, [r3]
 80038c0:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80038c4:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 80038c6:	ed93 7b00 	vldr	d7, [r3]
 80038ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80038ce:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 80038d2:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 80038d6:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <inicializarTrayectoria+0xa3c>)
 80038d8:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 80038dc:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <inicializarTrayectoria+0xa28>)
 80038de:	ed93 5b00 	vldr	d5, [r3]
 80038e2:	ed97 7b00 	vldr	d7, [r7]
 80038e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80038ea:	4b6c      	ldr	r3, [pc, #432]	; (8003a9c <inicializarTrayectoria+0xa34>)
 80038ec:	ed93 7b00 	vldr	d7, [r3]
 80038f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80038f4:	4b6b      	ldr	r3, [pc, #428]	; (8003aa4 <inicializarTrayectoria+0xa3c>)
 80038f6:	ed93 7b00 	vldr	d7, [r3]
 80038fa:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 80038fe:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <inicializarTrayectoria+0xa28>)
 8003900:	ed93 7b00 	vldr	d7, [r3]
 8003904:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003908:	eeb0 0b47 	vmov.f64	d0, d7
 800390c:	f00c feac 	bl	8010668 <pow>
 8003910:	eeb0 9b40 	vmov.f64	d9, d0
 8003914:	ed97 7b00 	vldr	d7, [r7]
 8003918:	eeb1 7b47 	vneg.f64	d7, d7
 800391c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003920:	eeb0 0b47 	vmov.f64	d0, d7
 8003924:	f00c fea0 	bl	8010668 <pow>
 8003928:	eeb0 6b40 	vmov.f64	d6, d0
 800392c:	eeb1 7b08 	vmov.f64	d7, #24	; 0x40c00000  6.0
 8003930:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003934:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8003938:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 800393c:	4b5a      	ldr	r3, [pc, #360]	; (8003aa8 <inicializarTrayectoria+0xa40>)
 800393e:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 8003942:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <inicializarTrayectoria+0xa40>)
 8003944:	ed93 6b00 	vldr	d6, [r3]
 8003948:	4b58      	ldr	r3, [pc, #352]	; (8003aac <inicializarTrayectoria+0xa44>)
 800394a:	ed93 7b00 	vldr	d7, [r3]
 800394e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003952:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <inicializarTrayectoria+0xa34>)
 8003954:	ed93 6b00 	vldr	d6, [r3]
 8003958:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800395c:	eeb0 6bc7 	vabs.f64	d6, d7
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <inicializarTrayectoria+0xa48>)
 8003962:	ed93 7b00 	vldr	d7, [r3]
 8003966:	ee36 7b07 	vadd.f64	d7, d6, d7
 800396a:	4b52      	ldr	r3, [pc, #328]	; (8003ab4 <inicializarTrayectoria+0xa4c>)
 800396c:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 8003970:	ed97 7b00 	vldr	d7, [r7]
 8003974:	eeb1 6b47 	vneg.f64	d6, d7
 8003978:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800397c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003980:	4b4d      	ldr	r3, [pc, #308]	; (8003ab8 <inicializarTrayectoria+0xa50>)
 8003982:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 8003986:	4a4d      	ldr	r2, [pc, #308]	; (8003abc <inicializarTrayectoria+0xa54>)
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	e9c2 3400 	strd	r3, r4, [r2]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 8003994:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <inicializarTrayectoria+0xa28>)
 8003996:	ed93 5b00 	vldr	d5, [r3]
 800399a:	ed97 7b00 	vldr	d7, [r7]
 800399e:	eeb1 7b47 	vneg.f64	d7, d7
 80039a2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80039a6:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <inicializarTrayectoria+0xa4c>)
 80039a8:	ed93 7b00 	vldr	d7, [r3]
 80039ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039b0:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <inicializarTrayectoria+0xa58>)
 80039b2:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <inicializarTrayectoria+0xa34>)
 80039b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039bc:	4a41      	ldr	r2, [pc, #260]	; (8003ac4 <inicializarTrayectoria+0xa5c>)
 80039be:	e9c2 3400 	strd	r3, r4, [r2]
			a0Hip3 = XiHip3;
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <inicializarTrayectoria+0xa40>)
 80039c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039c8:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <inicializarTrayectoria+0xa60>)
 80039ca:	e9c2 3400 	strd	r3, r4, [r2]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 80039ce:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 80039d0:	ed93 6b00 	vldr	d6, [r3]
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <inicializarTrayectoria+0xa38>)
 80039d6:	ed93 7b00 	vldr	d7, [r3]
 80039da:	ee36 5b47 	vsub.f64	d5, d6, d7
 80039de:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <inicializarTrayectoria+0xa28>)
 80039e0:	ed93 7b00 	vldr	d7, [r3]
 80039e4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80039e8:	4b35      	ldr	r3, [pc, #212]	; (8003ac0 <inicializarTrayectoria+0xa58>)
 80039ea:	ed93 7b00 	vldr	d7, [r3]
 80039ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <inicializarTrayectoria+0xa64>)
 80039f4:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 80039f8:	ed97 6b00 	vldr	d6, [r7]
 80039fc:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003a00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <inicializarTrayectoria+0xa68>)
 8003a06:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <inicializarTrayectoria+0xa28>)
 8003a0c:	ed93 6b00 	vldr	d6, [r3]
 8003a10:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003a14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a18:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <inicializarTrayectoria+0xa6c>)
 8003a1a:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <inicializarTrayectoria+0xa28>)
 8003a20:	ed93 5b00 	vldr	d5, [r3]
 8003a24:	ed97 6b00 	vldr	d6, [r7]
 8003a28:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003a2c:	eeb0 6bc7 	vabs.f64	d6, d7
 8003a30:	4b26      	ldr	r3, [pc, #152]	; (8003acc <inicializarTrayectoria+0xa64>)
 8003a32:	ed93 7b00 	vldr	d7, [r3]
 8003a36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a3a:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <inicializarTrayectoria+0xa70>)
 8003a3c:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <inicializarTrayectoria+0xa2c>)
 8003a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <inicializarTrayectoria+0xa74>)
 8003a48:	e9c2 3400 	strd	r3, r4, [r2]
			a0Hip4 = XiHip4;
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <inicializarTrayectoria+0xa30>)
 8003a4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a52:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <inicializarTrayectoria+0xa78>)
 8003a54:	e9c2 3400 	strd	r3, r4, [r2]
			TiempoTotX = tfHip4;
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <inicializarTrayectoria+0xa70>)
 8003a5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a5e:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <inicializarTrayectoria+0xa7c>)
 8003a60:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 8003a64:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8003a68:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003a6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d553      	bpl.n	8003b1e <inicializarTrayectoria+0xab6>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <inicializarTrayectoria+0xa40>)
 8003a78:	ed93 6b00 	vldr	d6, [r3]
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <inicializarTrayectoria+0xa44>)
 8003a7e:	ed93 7b00 	vldr	d7, [r3]
 8003a82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8a:	d42d      	bmi.n	8003ae8 <inicializarTrayectoria+0xa80>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8003a8c:	e077      	b.n	8003b7e <inicializarTrayectoria+0xb16>
 8003a8e:	bf00      	nop
 8003a90:	240008a0 	.word	0x240008a0
 8003a94:	24000a38 	.word	0x24000a38
 8003a98:	24000b58 	.word	0x24000b58
 8003a9c:	24000b20 	.word	0x24000b20
 8003aa0:	24000b50 	.word	0x24000b50
 8003aa4:	24000b00 	.word	0x24000b00
 8003aa8:	24000840 	.word	0x24000840
 8003aac:	240009d0 	.word	0x240009d0
 8003ab0:	240009e0 	.word	0x240009e0
 8003ab4:	24000ab0 	.word	0x24000ab0
 8003ab8:	24000bc8 	.word	0x24000bc8
 8003abc:	24000b28 	.word	0x24000b28
 8003ac0:	24000760 	.word	0x24000760
 8003ac4:	24000b10 	.word	0x24000b10
 8003ac8:	24000820 	.word	0x24000820
 8003acc:	24000b40 	.word	0x24000b40
 8003ad0:	240008c0 	.word	0x240008c0
 8003ad4:	24000a58 	.word	0x24000a58
 8003ad8:	24000998 	.word	0x24000998
 8003adc:	240007c0 	.word	0x240007c0
 8003ae0:	24000ac8 	.word	0x24000ac8
 8003ae4:	24000bb8 	.word	0x24000bb8
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003aea:	ed93 6b00 	vldr	d6, [r3]
 8003aee:	ed97 7b04 	vldr	d7, [r7, #16]
 8003af2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8003b98 <inicializarTrayectoria+0xb30>
 8003af6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003afc:	ed93 3b00 	vldr	d3, [r3]
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003b02:	ed93 7b00 	vldr	d7, [r3]
 8003b06:	eeb0 4bc7 	vabs.f64	d4, d7
 8003b0a:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003b0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003b18:	ed83 7b00 	vstr	d7, [r3]
 8003b1c:	e025      	b.n	8003b6a <inicializarTrayectoria+0xb02>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8003b1e:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <inicializarTrayectoria+0xb3c>)
 8003b20:	ed93 6b00 	vldr	d6, [r3]
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <inicializarTrayectoria+0xb40>)
 8003b26:	ed93 7b00 	vldr	d7, [r3]
 8003b2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b32:	dc00      	bgt.n	8003b36 <inicializarTrayectoria+0xace>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8003b34:	e023      	b.n	8003b7e <inicializarTrayectoria+0xb16>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003b38:	ed93 6b00 	vldr	d6, [r3]
 8003b3c:	ed97 7b04 	vldr	d7, [r7, #16]
 8003b40:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8003b98 <inicializarTrayectoria+0xb30>
 8003b44:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b48:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003b4a:	ed93 3b00 	vldr	d3, [r3]
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003b50:	ed93 7b00 	vldr	d7, [r3]
 8003b54:	eeb0 4bc7 	vabs.f64	d4, d7
 8003b58:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003b5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <inicializarTrayectoria+0xb38>)
 8003b66:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8003b6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b78:	2b63      	cmp	r3, #99	; 0x63
 8003b7a:	f67f aaf4 	bls.w	8003166 <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <inicializarTrayectoria+0xb44>)
 8003b80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b84:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <inicializarTrayectoria+0xb48>)
 8003b86:	e9c2 3400 	strd	r3, r4, [r2]
}
 8003b8a:	bf00      	nop
 8003b8c:	3744      	adds	r7, #68	; 0x44
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	ecbd 8b04 	vpop	{d8-d9}
 8003b94:	bd90      	pop	{r4, r7, pc}
 8003b96:	bf00      	nop
 8003b98:	47ae147b 	.word	0x47ae147b
 8003b9c:	3f847ae1 	.word	0x3f847ae1
 8003ba0:	24000b20 	.word	0x24000b20
 8003ba4:	24000840 	.word	0x24000840
 8003ba8:	240009d0 	.word	0x240009d0
 8003bac:	24000998 	.word	0x24000998
 8003bb0:	240004f8 	.word	0x240004f8

08003bb4 <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	ed2d 8b04 	vpush	{d8-d9}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 8003bc2:	4bc3      	ldr	r3, [pc, #780]	; (8003ed0 <obtenerVelCurva+0x31c>)
 8003bc4:	ed93 7b00 	vldr	d7, [r3]
 8003bc8:	ed97 6b00 	vldr	d6, [r7]
 8003bcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	d866      	bhi.n	8003ca4 <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 8003bd6:	4bbf      	ldr	r3, [pc, #764]	; (8003ed4 <obtenerVelCurva+0x320>)
 8003bd8:	ed93 6b00 	vldr	d6, [r3]
 8003bdc:	ed97 7b00 	vldr	d7, [r7]
 8003be0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003be4:	4bbc      	ldr	r3, [pc, #752]	; (8003ed8 <obtenerVelCurva+0x324>)
 8003be6:	ed93 7b00 	vldr	d7, [r3]
 8003bea:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003bee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003bf2:	ed97 0b00 	vldr	d0, [r7]
 8003bf6:	f00c fd37 	bl	8010668 <pow>
 8003bfa:	eeb0 6b40 	vmov.f64	d6, d0
 8003bfe:	4bb7      	ldr	r3, [pc, #732]	; (8003edc <obtenerVelCurva+0x328>)
 8003c00:	ed93 7b00 	vldr	d7, [r3]
 8003c04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c08:	ee38 8b07 	vadd.f64	d8, d8, d7
 8003c0c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003c10:	ed97 0b00 	vldr	d0, [r7]
 8003c14:	f00c fd28 	bl	8010668 <pow>
 8003c18:	eeb0 6b40 	vmov.f64	d6, d0
 8003c1c:	4bb0      	ldr	r3, [pc, #704]	; (8003ee0 <obtenerVelCurva+0x32c>)
 8003c1e:	ed93 7b00 	vldr	d7, [r3]
 8003c22:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c26:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003c2a:	4bae      	ldr	r3, [pc, #696]	; (8003ee4 <obtenerVelCurva+0x330>)
 8003c2c:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 8003c30:	4baa      	ldr	r3, [pc, #680]	; (8003edc <obtenerVelCurva+0x328>)
 8003c32:	ed93 7b00 	vldr	d7, [r3]
 8003c36:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003c3a:	ed97 7b00 	vldr	d7, [r7]
 8003c3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c42:	4ba4      	ldr	r3, [pc, #656]	; (8003ed4 <obtenerVelCurva+0x320>)
 8003c44:	ed93 7b00 	vldr	d7, [r3]
 8003c48:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003c4c:	4ba4      	ldr	r3, [pc, #656]	; (8003ee0 <obtenerVelCurva+0x32c>)
 8003c4e:	ed93 7b00 	vldr	d7, [r3]
 8003c52:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003c56:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003c5a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003c5e:	ed97 0b00 	vldr	d0, [r7]
 8003c62:	f00c fd01 	bl	8010668 <pow>
 8003c66:	eeb0 7b40 	vmov.f64	d7, d0
 8003c6a:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003c6e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003c72:	4b9d      	ldr	r3, [pc, #628]	; (8003ee8 <obtenerVelCurva+0x334>)
 8003c74:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 8003c78:	4b98      	ldr	r3, [pc, #608]	; (8003edc <obtenerVelCurva+0x328>)
 8003c7a:	ed93 7b00 	vldr	d7, [r3]
 8003c7e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003c82:	4b97      	ldr	r3, [pc, #604]	; (8003ee0 <obtenerVelCurva+0x32c>)
 8003c84:	ed93 7b00 	vldr	d7, [r3]
 8003c88:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003c8c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c90:	ed97 7b00 	vldr	d7, [r7]
 8003c94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c9c:	4b93      	ldr	r3, [pc, #588]	; (8003eec <obtenerVelCurva+0x338>)
 8003c9e:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 8003ca2:	e30e      	b.n	80042c2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 8003ca4:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <obtenerVelCurva+0x33c>)
 8003ca6:	ed93 7b00 	vldr	d7, [r3]
 8003caa:	ed97 6b00 	vldr	d6, [r7]
 8003cae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb6:	d848      	bhi.n	8003d4a <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 8003cb8:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <obtenerVelCurva+0x340>)
 8003cba:	ed93 7b00 	vldr	d7, [r3]
 8003cbe:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8003cc2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8003cc6:	4b82      	ldr	r3, [pc, #520]	; (8003ed0 <obtenerVelCurva+0x31c>)
 8003cc8:	ed93 7b00 	vldr	d7, [r3]
 8003ccc:	ed97 6b00 	vldr	d6, [r7]
 8003cd0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003cd4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8003cdc:	f00c fcc4 	bl	8010668 <pow>
 8003ce0:	eeb0 7b40 	vmov.f64	d7, d0
 8003ce4:	ee28 6b07 	vmul.f64	d6, d8, d7
 8003ce8:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <obtenerVelCurva+0x31c>)
 8003cea:	ed93 7b00 	vldr	d7, [r3]
 8003cee:	ed97 5b00 	vldr	d5, [r7]
 8003cf2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8003cf6:	4b80      	ldr	r3, [pc, #512]	; (8003ef8 <obtenerVelCurva+0x344>)
 8003cf8:	ed93 7b00 	vldr	d7, [r3]
 8003cfc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003d04:	4b7d      	ldr	r3, [pc, #500]	; (8003efc <obtenerVelCurva+0x348>)
 8003d06:	ed93 7b00 	vldr	d7, [r3]
 8003d0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d0e:	4b75      	ldr	r3, [pc, #468]	; (8003ee4 <obtenerVelCurva+0x330>)
 8003d10:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 8003d14:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <obtenerVelCurva+0x31c>)
 8003d16:	ed93 7b00 	vldr	d7, [r3]
 8003d1a:	ed97 6b00 	vldr	d6, [r7]
 8003d1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003d22:	4b74      	ldr	r3, [pc, #464]	; (8003ef4 <obtenerVelCurva+0x340>)
 8003d24:	ed93 7b00 	vldr	d7, [r3]
 8003d28:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003d2c:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <obtenerVelCurva+0x344>)
 8003d2e:	ed93 7b00 	vldr	d7, [r3]
 8003d32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d36:	4b6c      	ldr	r3, [pc, #432]	; (8003ee8 <obtenerVelCurva+0x334>)
 8003d38:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 8003d3c:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <obtenerVelCurva+0x340>)
 8003d3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d42:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <obtenerVelCurva+0x338>)
 8003d44:	e9c2 3400 	strd	r3, r4, [r2]
}
 8003d48:	e2bb      	b.n	80042c2 <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <obtenerVelCurva+0x34c>)
 8003d4c:	ed93 7b00 	vldr	d7, [r3]
 8003d50:	ed97 6b00 	vldr	d6, [r7]
 8003d54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	f200 808b 	bhi.w	8003e76 <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8003d60:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <obtenerVelCurva+0x33c>)
 8003d62:	ed93 7b00 	vldr	d7, [r3]
 8003d66:	ed97 6b00 	vldr	d6, [r7]
 8003d6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003d6e:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <obtenerVelCurva+0x350>)
 8003d70:	ed93 7b00 	vldr	d7, [r3]
 8003d74:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003d78:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <obtenerVelCurva+0x354>)
 8003d7a:	ed93 7b00 	vldr	d7, [r3]
 8003d7e:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003d82:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <obtenerVelCurva+0x33c>)
 8003d84:	ed93 7b00 	vldr	d7, [r3]
 8003d88:	ed97 6b00 	vldr	d6, [r7]
 8003d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003d94:	eeb0 0b47 	vmov.f64	d0, d7
 8003d98:	f00c fc66 	bl	8010668 <pow>
 8003d9c:	eeb0 6b40 	vmov.f64	d6, d0
 8003da0:	4b5a      	ldr	r3, [pc, #360]	; (8003f0c <obtenerVelCurva+0x358>)
 8003da2:	ed93 7b00 	vldr	d7, [r3]
 8003da6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003daa:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 8003dae:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <obtenerVelCurva+0x33c>)
 8003db0:	ed93 7b00 	vldr	d7, [r3]
 8003db4:	ed97 6b00 	vldr	d6, [r7]
 8003db8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003dbc:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003dc0:	eeb0 0b47 	vmov.f64	d0, d7
 8003dc4:	f00c fc50 	bl	8010668 <pow>
 8003dc8:	eeb0 6b40 	vmov.f64	d6, d0
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <obtenerVelCurva+0x35c>)
 8003dce:	ed93 7b00 	vldr	d7, [r3]
 8003dd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003dd6:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8003dda:	4b42      	ldr	r3, [pc, #264]	; (8003ee4 <obtenerVelCurva+0x330>)
 8003ddc:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8003de0:	4b4a      	ldr	r3, [pc, #296]	; (8003f0c <obtenerVelCurva+0x358>)
 8003de2:	ed93 7b00 	vldr	d7, [r3]
 8003de6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003dea:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <obtenerVelCurva+0x33c>)
 8003dec:	ed93 7b00 	vldr	d7, [r3]
 8003df0:	ed97 5b00 	vldr	d5, [r7]
 8003df4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003df8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003dfc:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <obtenerVelCurva+0x350>)
 8003dfe:	ed93 7b00 	vldr	d7, [r3]
 8003e02:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 8003e06:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <obtenerVelCurva+0x35c>)
 8003e08:	ed93 7b00 	vldr	d7, [r3]
 8003e0c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003e10:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <obtenerVelCurva+0x33c>)
 8003e16:	ed93 7b00 	vldr	d7, [r3]
 8003e1a:	ed97 6b00 	vldr	d6, [r7]
 8003e1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003e22:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003e26:	eeb0 0b47 	vmov.f64	d0, d7
 8003e2a:	f00c fc1d 	bl	8010668 <pow>
 8003e2e:	eeb0 7b40 	vmov.f64	d7, d0
 8003e32:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003e36:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <obtenerVelCurva+0x334>)
 8003e3c:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <obtenerVelCurva+0x358>)
 8003e42:	ed93 7b00 	vldr	d7, [r3]
 8003e46:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003e4a:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <obtenerVelCurva+0x35c>)
 8003e4c:	ed93 7b00 	vldr	d7, [r3]
 8003e50:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003e54:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <obtenerVelCurva+0x33c>)
 8003e5a:	ed93 7b00 	vldr	d7, [r3]
 8003e5e:	ed97 4b00 	vldr	d4, [r7]
 8003e62:	ee34 7b47 	vsub.f64	d7, d4, d7
 8003e66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <obtenerVelCurva+0x338>)
 8003e70:	ed83 7b00 	vstr	d7, [r3]
}
 8003e74:	e225      	b.n	80042c2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <obtenerVelCurva+0x360>)
 8003e78:	ed93 7b00 	vldr	d7, [r3]
 8003e7c:	ed97 6b00 	vldr	d6, [r7]
 8003e80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e88:	d84a      	bhi.n	8003f20 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <obtenerVelCurva+0x34c>)
 8003e8c:	ed93 7b00 	vldr	d7, [r3]
 8003e90:	ed97 6b00 	vldr	d6, [r7]
 8003e94:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003e98:	4b1f      	ldr	r3, [pc, #124]	; (8003f18 <obtenerVelCurva+0x364>)
 8003e9a:	ed93 7b00 	vldr	d7, [r3]
 8003e9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <obtenerVelCurva+0x368>)
 8003ea4:	ed93 7b00 	vldr	d7, [r3]
 8003ea8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <obtenerVelCurva+0x330>)
 8003eae:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <obtenerVelCurva+0x364>)
 8003eb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <obtenerVelCurva+0x334>)
 8003eba:	e9c2 3400 	strd	r3, r4, [r2]
		DDX = 0;
 8003ebe:	4a0b      	ldr	r2, [pc, #44]	; (8003eec <obtenerVelCurva+0x338>)
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	f04f 0400 	mov.w	r4, #0
 8003ec8:	e9c2 3400 	strd	r3, r4, [r2]
}
 8003ecc:	e1f9      	b.n	80042c2 <obtenerVelCurva+0x70e>
 8003ece:	bf00      	nop
 8003ed0:	240007b0 	.word	0x240007b0
 8003ed4:	24000ac0 	.word	0x24000ac0
 8003ed8:	24000ab8 	.word	0x24000ab8
 8003edc:	24000b30 	.word	0x24000b30
 8003ee0:	240009d8 	.word	0x240009d8
 8003ee4:	24000308 	.word	0x24000308
 8003ee8:	24000310 	.word	0x24000310
 8003eec:	24000318 	.word	0x24000318
 8003ef0:	24000790 	.word	0x24000790
 8003ef4:	240008b8 	.word	0x240008b8
 8003ef8:	240009a0 	.word	0x240009a0
 8003efc:	240008e0 	.word	0x240008e0
 8003f00:	240009e0 	.word	0x240009e0
 8003f04:	240008f8 	.word	0x240008f8
 8003f08:	24000a18 	.word	0x24000a18
 8003f0c:	24000838 	.word	0x24000838
 8003f10:	240007a8 	.word	0x240007a8
 8003f14:	24000ab0 	.word	0x24000ab0
 8003f18:	24000b20 	.word	0x24000b20
 8003f1c:	240009d0 	.word	0x240009d0
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 8003f20:	4bcb      	ldr	r3, [pc, #812]	; (8004250 <obtenerVelCurva+0x69c>)
 8003f22:	ed93 7b00 	vldr	d7, [r3]
 8003f26:	ed97 6b00 	vldr	d6, [r7]
 8003f2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f32:	f200 808b 	bhi.w	800404c <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8003f36:	4bc7      	ldr	r3, [pc, #796]	; (8004254 <obtenerVelCurva+0x6a0>)
 8003f38:	ed93 7b00 	vldr	d7, [r3]
 8003f3c:	ed97 6b00 	vldr	d6, [r7]
 8003f40:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003f44:	4bc4      	ldr	r3, [pc, #784]	; (8004258 <obtenerVelCurva+0x6a4>)
 8003f46:	ed93 7b00 	vldr	d7, [r3]
 8003f4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003f4e:	4bc3      	ldr	r3, [pc, #780]	; (800425c <obtenerVelCurva+0x6a8>)
 8003f50:	ed93 7b00 	vldr	d7, [r3]
 8003f54:	ee36 8b07 	vadd.f64	d8, d6, d7
 8003f58:	4bbe      	ldr	r3, [pc, #760]	; (8004254 <obtenerVelCurva+0x6a0>)
 8003f5a:	ed93 7b00 	vldr	d7, [r3]
 8003f5e:	ed97 6b00 	vldr	d6, [r7]
 8003f62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003f66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003f6a:	eeb0 0b47 	vmov.f64	d0, d7
 8003f6e:	f00c fb7b 	bl	8010668 <pow>
 8003f72:	eeb0 6b40 	vmov.f64	d6, d0
 8003f76:	4bba      	ldr	r3, [pc, #744]	; (8004260 <obtenerVelCurva+0x6ac>)
 8003f78:	ed93 7b00 	vldr	d7, [r3]
 8003f7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003f80:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 8003f84:	4bb3      	ldr	r3, [pc, #716]	; (8004254 <obtenerVelCurva+0x6a0>)
 8003f86:	ed93 7b00 	vldr	d7, [r3]
 8003f8a:	ed97 6b00 	vldr	d6, [r7]
 8003f8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003f92:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8003f96:	eeb0 0b47 	vmov.f64	d0, d7
 8003f9a:	f00c fb65 	bl	8010668 <pow>
 8003f9e:	eeb0 6b40 	vmov.f64	d6, d0
 8003fa2:	4bb0      	ldr	r3, [pc, #704]	; (8004264 <obtenerVelCurva+0x6b0>)
 8003fa4:	ed93 7b00 	vldr	d7, [r3]
 8003fa8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003fac:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8003fb0:	4bad      	ldr	r3, [pc, #692]	; (8004268 <obtenerVelCurva+0x6b4>)
 8003fb2:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8003fb6:	4baa      	ldr	r3, [pc, #680]	; (8004260 <obtenerVelCurva+0x6ac>)
 8003fb8:	ed93 7b00 	vldr	d7, [r3]
 8003fbc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003fc0:	4ba4      	ldr	r3, [pc, #656]	; (8004254 <obtenerVelCurva+0x6a0>)
 8003fc2:	ed93 7b00 	vldr	d7, [r3]
 8003fc6:	ed97 5b00 	vldr	d5, [r7]
 8003fca:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003fce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003fd2:	4ba1      	ldr	r3, [pc, #644]	; (8004258 <obtenerVelCurva+0x6a4>)
 8003fd4:	ed93 7b00 	vldr	d7, [r3]
 8003fd8:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 8003fdc:	4ba1      	ldr	r3, [pc, #644]	; (8004264 <obtenerVelCurva+0x6b0>)
 8003fde:	ed93 7b00 	vldr	d7, [r3]
 8003fe2:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003fe6:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003fea:	4b9a      	ldr	r3, [pc, #616]	; (8004254 <obtenerVelCurva+0x6a0>)
 8003fec:	ed93 7b00 	vldr	d7, [r3]
 8003ff0:	ed97 6b00 	vldr	d6, [r7]
 8003ff4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ff8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003ffc:	eeb0 0b47 	vmov.f64	d0, d7
 8004000:	f00c fb32 	bl	8010668 <pow>
 8004004:	eeb0 7b40 	vmov.f64	d7, d0
 8004008:	ee29 7b07 	vmul.f64	d7, d9, d7
 800400c:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8004010:	4b96      	ldr	r3, [pc, #600]	; (800426c <obtenerVelCurva+0x6b8>)
 8004012:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 8004016:	4b92      	ldr	r3, [pc, #584]	; (8004260 <obtenerVelCurva+0x6ac>)
 8004018:	ed93 7b00 	vldr	d7, [r3]
 800401c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004020:	4b90      	ldr	r3, [pc, #576]	; (8004264 <obtenerVelCurva+0x6b0>)
 8004022:	ed93 7b00 	vldr	d7, [r3]
 8004026:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800402a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800402e:	4b89      	ldr	r3, [pc, #548]	; (8004254 <obtenerVelCurva+0x6a0>)
 8004030:	ed93 7b00 	vldr	d7, [r3]
 8004034:	ed97 4b00 	vldr	d4, [r7]
 8004038:	ee34 7b47 	vsub.f64	d7, d4, d7
 800403c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004040:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004044:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <obtenerVelCurva+0x6bc>)
 8004046:	ed83 7b00 	vstr	d7, [r3]
}
 800404a:	e13a      	b.n	80042c2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 800404c:	4b89      	ldr	r3, [pc, #548]	; (8004274 <obtenerVelCurva+0x6c0>)
 800404e:	ed93 7b00 	vldr	d7, [r3]
 8004052:	ed97 6b00 	vldr	d6, [r7]
 8004056:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	d848      	bhi.n	80040f2 <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 8004060:	4b85      	ldr	r3, [pc, #532]	; (8004278 <obtenerVelCurva+0x6c4>)
 8004062:	ed93 7b00 	vldr	d7, [r3]
 8004066:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800406a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800406e:	4b78      	ldr	r3, [pc, #480]	; (8004250 <obtenerVelCurva+0x69c>)
 8004070:	ed93 7b00 	vldr	d7, [r3]
 8004074:	ed97 6b00 	vldr	d6, [r7]
 8004078:	ee36 7b47 	vsub.f64	d7, d6, d7
 800407c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004080:	eeb0 0b47 	vmov.f64	d0, d7
 8004084:	f00c faf0 	bl	8010668 <pow>
 8004088:	eeb0 7b40 	vmov.f64	d7, d0
 800408c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <obtenerVelCurva+0x69c>)
 8004092:	ed93 7b00 	vldr	d7, [r3]
 8004096:	ed97 5b00 	vldr	d5, [r7]
 800409a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800409e:	4b77      	ldr	r3, [pc, #476]	; (800427c <obtenerVelCurva+0x6c8>)
 80040a0:	ed93 7b00 	vldr	d7, [r3]
 80040a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80040a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80040ac:	4b74      	ldr	r3, [pc, #464]	; (8004280 <obtenerVelCurva+0x6cc>)
 80040ae:	ed93 7b00 	vldr	d7, [r3]
 80040b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80040b6:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <obtenerVelCurva+0x6b4>)
 80040b8:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 80040bc:	4b64      	ldr	r3, [pc, #400]	; (8004250 <obtenerVelCurva+0x69c>)
 80040be:	ed93 7b00 	vldr	d7, [r3]
 80040c2:	ed97 6b00 	vldr	d6, [r7]
 80040c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80040ca:	4b6b      	ldr	r3, [pc, #428]	; (8004278 <obtenerVelCurva+0x6c4>)
 80040cc:	ed93 7b00 	vldr	d7, [r3]
 80040d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80040d4:	4b69      	ldr	r3, [pc, #420]	; (800427c <obtenerVelCurva+0x6c8>)
 80040d6:	ed93 7b00 	vldr	d7, [r3]
 80040da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80040de:	4b63      	ldr	r3, [pc, #396]	; (800426c <obtenerVelCurva+0x6b8>)
 80040e0:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 80040e4:	4b64      	ldr	r3, [pc, #400]	; (8004278 <obtenerVelCurva+0x6c4>)
 80040e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040ea:	4a61      	ldr	r2, [pc, #388]	; (8004270 <obtenerVelCurva+0x6bc>)
 80040ec:	e9c2 3400 	strd	r3, r4, [r2]
}
 80040f0:	e0e7      	b.n	80042c2 <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 80040f2:	4b64      	ldr	r3, [pc, #400]	; (8004284 <obtenerVelCurva+0x6d0>)
 80040f4:	ed93 7b00 	vldr	d7, [r3]
 80040f8:	ed97 6b00 	vldr	d6, [r7]
 80040fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	f200 808b 	bhi.w	800421e <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8004108:	4b5a      	ldr	r3, [pc, #360]	; (8004274 <obtenerVelCurva+0x6c0>)
 800410a:	ed93 7b00 	vldr	d7, [r3]
 800410e:	ed97 6b00 	vldr	d6, [r7]
 8004112:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004116:	4b5c      	ldr	r3, [pc, #368]	; (8004288 <obtenerVelCurva+0x6d4>)
 8004118:	ed93 7b00 	vldr	d7, [r3]
 800411c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004120:	4b5a      	ldr	r3, [pc, #360]	; (800428c <obtenerVelCurva+0x6d8>)
 8004122:	ed93 7b00 	vldr	d7, [r3]
 8004126:	ee36 8b07 	vadd.f64	d8, d6, d7
 800412a:	4b52      	ldr	r3, [pc, #328]	; (8004274 <obtenerVelCurva+0x6c0>)
 800412c:	ed93 7b00 	vldr	d7, [r3]
 8004130:	ed97 6b00 	vldr	d6, [r7]
 8004134:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004138:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800413c:	eeb0 0b47 	vmov.f64	d0, d7
 8004140:	f00c fa92 	bl	8010668 <pow>
 8004144:	eeb0 6b40 	vmov.f64	d6, d0
 8004148:	4b51      	ldr	r3, [pc, #324]	; (8004290 <obtenerVelCurva+0x6dc>)
 800414a:	ed93 7b00 	vldr	d7, [r3]
 800414e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004152:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <obtenerVelCurva+0x6c0>)
 8004158:	ed93 7b00 	vldr	d7, [r3]
 800415c:	ed97 6b00 	vldr	d6, [r7]
 8004160:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004164:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004168:	eeb0 0b47 	vmov.f64	d0, d7
 800416c:	f00c fa7c 	bl	8010668 <pow>
 8004170:	eeb0 6b40 	vmov.f64	d6, d0
 8004174:	4b47      	ldr	r3, [pc, #284]	; (8004294 <obtenerVelCurva+0x6e0>)
 8004176:	ed93 7b00 	vldr	d7, [r3]
 800417a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800417e:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8004182:	4b39      	ldr	r3, [pc, #228]	; (8004268 <obtenerVelCurva+0x6b4>)
 8004184:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8004188:	4b41      	ldr	r3, [pc, #260]	; (8004290 <obtenerVelCurva+0x6dc>)
 800418a:	ed93 7b00 	vldr	d7, [r3]
 800418e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <obtenerVelCurva+0x6c0>)
 8004194:	ed93 7b00 	vldr	d7, [r3]
 8004198:	ed97 5b00 	vldr	d5, [r7]
 800419c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80041a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80041a4:	4b38      	ldr	r3, [pc, #224]	; (8004288 <obtenerVelCurva+0x6d4>)
 80041a6:	ed93 7b00 	vldr	d7, [r3]
 80041aa:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 80041ae:	4b39      	ldr	r3, [pc, #228]	; (8004294 <obtenerVelCurva+0x6e0>)
 80041b0:	ed93 7b00 	vldr	d7, [r3]
 80041b4:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80041b8:	ee27 9b06 	vmul.f64	d9, d7, d6
 80041bc:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <obtenerVelCurva+0x6c0>)
 80041be:	ed93 7b00 	vldr	d7, [r3]
 80041c2:	ed97 6b00 	vldr	d6, [r7]
 80041c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80041ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80041ce:	eeb0 0b47 	vmov.f64	d0, d7
 80041d2:	f00c fa49 	bl	8010668 <pow>
 80041d6:	eeb0 7b40 	vmov.f64	d7, d0
 80041da:	ee29 7b07 	vmul.f64	d7, d9, d7
 80041de:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 80041e2:	4b22      	ldr	r3, [pc, #136]	; (800426c <obtenerVelCurva+0x6b8>)
 80041e4:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 80041e8:	4b29      	ldr	r3, [pc, #164]	; (8004290 <obtenerVelCurva+0x6dc>)
 80041ea:	ed93 7b00 	vldr	d7, [r3]
 80041ee:	ee37 6b07 	vadd.f64	d6, d7, d7
 80041f2:	4b28      	ldr	r3, [pc, #160]	; (8004294 <obtenerVelCurva+0x6e0>)
 80041f4:	ed93 7b00 	vldr	d7, [r3]
 80041f8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80041fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004200:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <obtenerVelCurva+0x6c0>)
 8004202:	ed93 7b00 	vldr	d7, [r3]
 8004206:	ed97 4b00 	vldr	d4, [r7]
 800420a:	ee34 7b47 	vsub.f64	d7, d4, d7
 800420e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004212:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004216:	4b16      	ldr	r3, [pc, #88]	; (8004270 <obtenerVelCurva+0x6bc>)
 8004218:	ed83 7b00 	vstr	d7, [r3]
}
 800421c:	e051      	b.n	80042c2 <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <obtenerVelCurva+0x6d0>)
 8004220:	ed93 7b00 	vldr	d7, [r3]
 8004224:	ed97 6b00 	vldr	d6, [r7]
 8004228:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	dd32      	ble.n	8004298 <obtenerVelCurva+0x6e4>
		DX = 0;
 8004232:	4a0e      	ldr	r2, [pc, #56]	; (800426c <obtenerVelCurva+0x6b8>)
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	e9c2 3400 	strd	r3, r4, [r2]
		DDX = 0;
 8004240:	4a0b      	ldr	r2, [pc, #44]	; (8004270 <obtenerVelCurva+0x6bc>)
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	f04f 0400 	mov.w	r4, #0
 800424a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800424e:	e038      	b.n	80042c2 <obtenerVelCurva+0x70e>
 8004250:	24000760 	.word	0x24000760
 8004254:	24000ab0 	.word	0x24000ab0
 8004258:	24000b10 	.word	0x24000b10
 800425c:	24000820 	.word	0x24000820
 8004260:	24000b28 	.word	0x24000b28
 8004264:	24000bc8 	.word	0x24000bc8
 8004268:	24000308 	.word	0x24000308
 800426c:	24000310 	.word	0x24000310
 8004270:	24000318 	.word	0x24000318
 8004274:	24000b40 	.word	0x24000b40
 8004278:	240008a0 	.word	0x240008a0
 800427c:	24000b50 	.word	0x24000b50
 8004280:	24000b00 	.word	0x24000b00
 8004284:	24000bb8 	.word	0x24000bb8
 8004288:	240007c0 	.word	0x240007c0
 800428c:	24000ac8 	.word	0x24000ac8
 8004290:	24000a58 	.word	0x24000a58
 8004294:	240008c0 	.word	0x240008c0
		X = 0;
 8004298:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <obtenerVelCurva+0x71c>)
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	f04f 0400 	mov.w	r4, #0
 80042a2:	e9c2 3400 	strd	r3, r4, [r2]
		DX = 0;
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <obtenerVelCurva+0x720>)
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	f04f 0400 	mov.w	r4, #0
 80042b0:	e9c2 3400 	strd	r3, r4, [r2]
		DDX = 0;
 80042b4:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <obtenerVelCurva+0x724>)
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	f04f 0400 	mov.w	r4, #0
 80042be:	e9c2 3400 	strd	r3, r4, [r2]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	ecbd 8b04 	vpop	{d8-d9}
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	24000308 	.word	0x24000308
 80042d4:	24000310 	.word	0x24000310
 80042d8:	24000318 	.word	0x24000318
 80042dc:	00000000 	.word	0x00000000

080042e0 <cinematicaInversa>:

void cinematicaInversa(double Pxaux, double Pyaux, double Pzaux) {
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	ed2d 8b06 	vpush	{d8-d10}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	ed87 0b04 	vstr	d0, [r7, #16]
 80042ee:	ed87 1b02 	vstr	d1, [r7, #8]
 80042f2:	ed87 2b00 	vstr	d2, [r7]

	A1 = 1.0 + pow(((-2.0  * (R + (Pyaux - r))) / (2 * Pzaux)), 2);
 80042f6:	4be6      	ldr	r3, [pc, #920]	; (8004690 <cinematicaInversa+0x3b0>)
 80042f8:	ed93 7b00 	vldr	d7, [r3]
 80042fc:	ed97 6b02 	vldr	d6, [r7, #8]
 8004300:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004304:	4be3      	ldr	r3, [pc, #908]	; (8004694 <cinematicaInversa+0x3b4>)
 8004306:	ed93 7b00 	vldr	d7, [r3]
 800430a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800430e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8004312:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004316:	ed97 7b00 	vldr	d7, [r7]
 800431a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800431e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004322:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004326:	eeb0 0b45 	vmov.f64	d0, d5
 800432a:	f00c f99d 	bl	8010668 <pow>
 800432e:	eeb0 6b40 	vmov.f64	d6, d0
 8004332:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8004336:	ee36 7b07 	vadd.f64	d7, d6, d7
 800433a:	4bd7      	ldr	r3, [pc, #860]	; (8004698 <cinematicaInversa+0x3b8>)
 800433c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * c30 + 2.0 * R * s30 - 2.0 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30)) / (2.0 * Pzaux)), 2.0);
 8004340:	4bd4      	ldr	r3, [pc, #848]	; (8004694 <cinematicaInversa+0x3b4>)
 8004342:	ed93 7b00 	vldr	d7, [r3]
 8004346:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8004680 <cinematicaInversa+0x3a0>
 800434a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800434e:	4bd3      	ldr	r3, [pc, #844]	; (800469c <cinematicaInversa+0x3bc>)
 8004350:	ed93 7b00 	vldr	d7, [r3]
 8004354:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004358:	4bce      	ldr	r3, [pc, #824]	; (8004694 <cinematicaInversa+0x3b4>)
 800435a:	ed93 7b00 	vldr	d7, [r3]
 800435e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004362:	4bcf      	ldr	r3, [pc, #828]	; (80046a0 <cinematicaInversa+0x3c0>)
 8004364:	ed93 7b00 	vldr	d7, [r3]
 8004368:	ee25 7b07 	vmul.f64	d7, d5, d7
 800436c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004370:	4bc7      	ldr	r3, [pc, #796]	; (8004690 <cinematicaInversa+0x3b0>)
 8004372:	ed93 5b00 	vldr	d5, [r3]
 8004376:	4bc9      	ldr	r3, [pc, #804]	; (800469c <cinematicaInversa+0x3bc>)
 8004378:	ed93 7b00 	vldr	d7, [r3]
 800437c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004380:	ed97 7b04 	vldr	d7, [r7, #16]
 8004384:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004388:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 8004680 <cinematicaInversa+0x3a0>
 800438c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004390:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004394:	4bbe      	ldr	r3, [pc, #760]	; (8004690 <cinematicaInversa+0x3b0>)
 8004396:	ed93 5b00 	vldr	d5, [r3]
 800439a:	4bc1      	ldr	r3, [pc, #772]	; (80046a0 <cinematicaInversa+0x3c0>)
 800439c:	ed93 7b00 	vldr	d7, [r3]
 80043a0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80043a4:	ed97 7b02 	vldr	d7, [r7, #8]
 80043a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80043ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043b0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80043b4:	ed97 7b00 	vldr	d7, [r7]
 80043b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043bc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80043c0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80043c4:	eeb0 0b45 	vmov.f64	d0, d5
 80043c8:	f00c f94e 	bl	8010668 <pow>
 80043cc:	eeb0 6b40 	vmov.f64	d6, d0
 80043d0:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 80043d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043d8:	4bb2      	ldr	r3, [pc, #712]	; (80046a4 <cinematicaInversa+0x3c4>)
 80043da:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)), 2.0);
 80043de:	4bac      	ldr	r3, [pc, #688]	; (8004690 <cinematicaInversa+0x3b0>)
 80043e0:	ed93 6b00 	vldr	d6, [r3]
 80043e4:	4bb0      	ldr	r3, [pc, #704]	; (80046a8 <cinematicaInversa+0x3c8>)
 80043e6:	ed93 7b00 	vldr	d7, [r3]
 80043ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 80043ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80043f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043f6:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8004680 <cinematicaInversa+0x3a0>
 80043fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80043fe:	4ba4      	ldr	r3, [pc, #656]	; (8004690 <cinematicaInversa+0x3b0>)
 8004400:	ed93 5b00 	vldr	d5, [r3]
 8004404:	4ba9      	ldr	r3, [pc, #676]	; (80046ac <cinematicaInversa+0x3cc>)
 8004406:	ed93 7b00 	vldr	d7, [r3]
 800440a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800440e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004412:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004416:	ee37 7b07 	vadd.f64	d7, d7, d7
 800441a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800441e:	4b9d      	ldr	r3, [pc, #628]	; (8004694 <cinematicaInversa+0x3b4>)
 8004420:	ed93 7b00 	vldr	d7, [r3]
 8004424:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8004680 <cinematicaInversa+0x3a0>
 8004428:	ee27 5b05 	vmul.f64	d5, d7, d5
 800442c:	4b9e      	ldr	r3, [pc, #632]	; (80046a8 <cinematicaInversa+0x3c8>)
 800442e:	ed93 7b00 	vldr	d7, [r3]
 8004432:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004436:	ee36 6b47 	vsub.f64	d6, d6, d7
 800443a:	4b96      	ldr	r3, [pc, #600]	; (8004694 <cinematicaInversa+0x3b4>)
 800443c:	ed93 7b00 	vldr	d7, [r3]
 8004440:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004444:	4b99      	ldr	r3, [pc, #612]	; (80046ac <cinematicaInversa+0x3cc>)
 8004446:	ed93 7b00 	vldr	d7, [r3]
 800444a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800444e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004452:	ed97 7b00 	vldr	d7, [r7]
 8004456:	ee37 7b07 	vadd.f64	d7, d7, d7
 800445a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800445e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004462:	eeb0 0b45 	vmov.f64	d0, d5
 8004466:	f00c f8ff 	bl	8010668 <pow>
 800446a:	eeb0 6b40 	vmov.f64	d6, d0
 800446e:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 8004472:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004476:	4b8e      	ldr	r3, [pc, #568]	; (80046b0 <cinematicaInversa+0x3d0>)
 8004478:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (Pyaux - r))) / (2.0 * Pzaux)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((Pyaux - r), 2.0) + pow(Pzaux, 2.0) - pow(L2, 2.0) + pow(Pxaux, 2)) / (2 * Pzaux)));
 800447c:	4b85      	ldr	r3, [pc, #532]	; (8004694 <cinematicaInversa+0x3b4>)
 800447e:	ed93 7b00 	vldr	d7, [r3]
 8004482:	ee37 8b07 	vadd.f64	d8, d7, d7
 8004486:	4b82      	ldr	r3, [pc, #520]	; (8004690 <cinematicaInversa+0x3b0>)
 8004488:	ed93 7b00 	vldr	d7, [r3]
 800448c:	ed97 6b02 	vldr	d6, [r7, #8]
 8004490:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004494:	4b7f      	ldr	r3, [pc, #508]	; (8004694 <cinematicaInversa+0x3b4>)
 8004496:	ed93 7b00 	vldr	d7, [r3]
 800449a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800449e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80044a2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80044a6:	ed97 7b00 	vldr	d7, [r7]
 80044aa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80044ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80044b2:	ee37 9b07 	vadd.f64	d9, d7, d7
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <cinematicaInversa+0x3d4>)
 80044b8:	ed93 7b00 	vldr	d7, [r3]
 80044bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80044c0:	eeb0 0b47 	vmov.f64	d0, d7
 80044c4:	f00c f8d0 	bl	8010668 <pow>
 80044c8:	eeb0 ab40 	vmov.f64	d10, d0
 80044cc:	4b71      	ldr	r3, [pc, #452]	; (8004694 <cinematicaInversa+0x3b4>)
 80044ce:	ed93 7b00 	vldr	d7, [r3]
 80044d2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80044d6:	eeb0 0b47 	vmov.f64	d0, d7
 80044da:	f00c f8c5 	bl	8010668 <pow>
 80044de:	eeb0 7b40 	vmov.f64	d7, d0
 80044e2:	ee3a ab47 	vsub.f64	d10, d10, d7
 80044e6:	4b6a      	ldr	r3, [pc, #424]	; (8004690 <cinematicaInversa+0x3b0>)
 80044e8:	ed93 7b00 	vldr	d7, [r3]
 80044ec:	ed97 6b02 	vldr	d6, [r7, #8]
 80044f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80044f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80044f8:	eeb0 0b47 	vmov.f64	d0, d7
 80044fc:	f00c f8b4 	bl	8010668 <pow>
 8004500:	eeb0 7b40 	vmov.f64	d7, d0
 8004504:	ee3a ab07 	vadd.f64	d10, d10, d7
 8004508:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800450c:	ed97 0b00 	vldr	d0, [r7]
 8004510:	f00c f8aa 	bl	8010668 <pow>
 8004514:	eeb0 7b40 	vmov.f64	d7, d0
 8004518:	ee3a ab07 	vadd.f64	d10, d10, d7
 800451c:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <cinematicaInversa+0x3d8>)
 800451e:	ed93 7b00 	vldr	d7, [r3]
 8004522:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004526:	eeb0 0b47 	vmov.f64	d0, d7
 800452a:	f00c f89d 	bl	8010668 <pow>
 800452e:	eeb0 7b40 	vmov.f64	d7, d0
 8004532:	ee3a ab47 	vsub.f64	d10, d10, d7
 8004536:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800453a:	ed97 0b04 	vldr	d0, [r7, #16]
 800453e:	f00c f893 	bl	8010668 <pow>
 8004542:	eeb0 7b40 	vmov.f64	d7, d0
 8004546:	ee3a 5b07 	vadd.f64	d5, d10, d7
 800454a:	ed97 7b00 	vldr	d7, [r7]
 800454e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004552:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004556:	ee29 7b07 	vmul.f64	d7, d9, d7
 800455a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800455e:	4b57      	ldr	r3, [pc, #348]	; (80046bc <cinematicaInversa+0x3dc>)
 8004560:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * c30 - 2.0 * R * s30 + 2.0 * (((2.0 * sqrt(3) * R * c30 + 2.0 * R * s30)	+ (-2 * sqrt(3) * (Pxaux + r * c30)	- 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) * ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 8004564:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <cinematicaInversa+0x3b4>)
 8004566:	ed93 7b00 	vldr	d7, [r3]
 800456a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8004688 <cinematicaInversa+0x3a8>
 800456e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004572:	4b4a      	ldr	r3, [pc, #296]	; (800469c <cinematicaInversa+0x3bc>)
 8004574:	ed93 7b00 	vldr	d7, [r3]
 8004578:	ee26 6b07 	vmul.f64	d6, d6, d7
 800457c:	4b45      	ldr	r3, [pc, #276]	; (8004694 <cinematicaInversa+0x3b4>)
 800457e:	ed93 7b00 	vldr	d7, [r3]
 8004582:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004586:	4b46      	ldr	r3, [pc, #280]	; (80046a0 <cinematicaInversa+0x3c0>)
 8004588:	ed93 7b00 	vldr	d7, [r3]
 800458c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004590:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004594:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <cinematicaInversa+0x3b4>)
 8004596:	ed93 7b00 	vldr	d7, [r3]
 800459a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8004680 <cinematicaInversa+0x3a0>
 800459e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80045a2:	4b3e      	ldr	r3, [pc, #248]	; (800469c <cinematicaInversa+0x3bc>)
 80045a4:	ed93 7b00 	vldr	d7, [r3]
 80045a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <cinematicaInversa+0x3b4>)
 80045ae:	ed93 7b00 	vldr	d7, [r3]
 80045b2:	ee37 5b07 	vadd.f64	d5, d7, d7
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <cinematicaInversa+0x3c0>)
 80045b8:	ed93 7b00 	vldr	d7, [r3]
 80045bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80045c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80045c4:	4b32      	ldr	r3, [pc, #200]	; (8004690 <cinematicaInversa+0x3b0>)
 80045c6:	ed93 5b00 	vldr	d5, [r3]
 80045ca:	4b34      	ldr	r3, [pc, #208]	; (800469c <cinematicaInversa+0x3bc>)
 80045cc:	ed93 7b00 	vldr	d7, [r3]
 80045d0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80045d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80045d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80045dc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8004688 <cinematicaInversa+0x3a8>
 80045e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80045e4:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <cinematicaInversa+0x3b0>)
 80045e6:	ed93 4b00 	vldr	d4, [r3]
 80045ea:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <cinematicaInversa+0x3c0>)
 80045ec:	ed93 7b00 	vldr	d7, [r3]
 80045f0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80045f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80045f8:	ee34 7b07 	vadd.f64	d7, d4, d7
 80045fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004600:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004604:	ee36 5b07 	vadd.f64	d5, d6, d7
 8004608:	ed97 7b00 	vldr	d7, [r7]
 800460c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004610:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004614:	ee37 9b07 	vadd.f64	d9, d7, d7
 8004618:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <cinematicaInversa+0x3d4>)
 800461a:	ed93 7b00 	vldr	d7, [r3]
 800461e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004622:	eeb0 0b47 	vmov.f64	d0, d7
 8004626:	f00c f81f 	bl	8010668 <pow>
 800462a:	eeb0 ab40 	vmov.f64	d10, d0
 800462e:	4b19      	ldr	r3, [pc, #100]	; (8004694 <cinematicaInversa+0x3b4>)
 8004630:	ed93 7b00 	vldr	d7, [r3]
 8004634:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004638:	eeb0 0b47 	vmov.f64	d0, d7
 800463c:	f00c f814 	bl	8010668 <pow>
 8004640:	eeb0 7b40 	vmov.f64	d7, d0
 8004644:	ee3a ab47 	vsub.f64	d10, d10, d7
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <cinematicaInversa+0x3b0>)
 800464a:	ed93 6b00 	vldr	d6, [r3]
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <cinematicaInversa+0x3bc>)
 8004650:	ed93 7b00 	vldr	d7, [r3]
 8004654:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004658:	ed97 7b04 	vldr	d7, [r7, #16]
 800465c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004660:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004664:	eeb0 0b47 	vmov.f64	d0, d7
 8004668:	f00b fffe 	bl	8010668 <pow>
 800466c:	eeb0 7b40 	vmov.f64	d7, d0
 8004670:	ee3a ab07 	vadd.f64	d10, d10, d7
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <cinematicaInversa+0x3b0>)
 8004676:	ed93 6b00 	vldr	d6, [r3]
 800467a:	e021      	b.n	80046c0 <cinematicaInversa+0x3e0>
 800467c:	f3af 8000 	nop.w
 8004680:	e8584caa 	.word	0xe8584caa
 8004684:	400bb67a 	.word	0x400bb67a
 8004688:	e8584caa 	.word	0xe8584caa
 800468c:	c00bb67a 	.word	0xc00bb67a
 8004690:	24000048 	.word	0x24000048
 8004694:	24000040 	.word	0x24000040
 8004698:	24000bc0 	.word	0x24000bc0
 800469c:	240000e0 	.word	0x240000e0
 80046a0:	240000e8 	.word	0x240000e8
 80046a4:	24000a50 	.word	0x24000a50
 80046a8:	240000f0 	.word	0x240000f0
 80046ac:	240000f8 	.word	0x240000f8
 80046b0:	24000828 	.word	0x24000828
 80046b4:	24000030 	.word	0x24000030
 80046b8:	24000038 	.word	0x24000038
 80046bc:	24000b60 	.word	0x24000b60
 80046c0:	4beb      	ldr	r3, [pc, #940]	; (8004a70 <cinematicaInversa+0x790>)
 80046c2:	ed93 7b00 	vldr	d7, [r3]
 80046c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80046ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80046ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046d2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80046d6:	eeb0 0b47 	vmov.f64	d0, d7
 80046da:	f00b ffc5 	bl	8010668 <pow>
 80046de:	eeb0 7b40 	vmov.f64	d7, d0
 80046e2:	ee3a ab07 	vadd.f64	d10, d10, d7
 80046e6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80046ea:	ed97 0b00 	vldr	d0, [r7]
 80046ee:	f00b ffbb 	bl	8010668 <pow>
 80046f2:	eeb0 7b40 	vmov.f64	d7, d0
 80046f6:	ee3a ab07 	vadd.f64	d10, d10, d7
 80046fa:	4bde      	ldr	r3, [pc, #888]	; (8004a74 <cinematicaInversa+0x794>)
 80046fc:	ed93 7b00 	vldr	d7, [r3]
 8004700:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004704:	eeb0 0b47 	vmov.f64	d0, d7
 8004708:	f00b ffae 	bl	8010668 <pow>
 800470c:	eeb0 7b40 	vmov.f64	d7, d0
 8004710:	ee3a 5b47 	vsub.f64	d5, d10, d7
 8004714:	ed97 7b00 	vldr	d7, [r7]
 8004718:	ee37 6b07 	vadd.f64	d6, d7, d7
 800471c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004720:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004724:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004728:	4bd3      	ldr	r3, [pc, #844]	; (8004a78 <cinematicaInversa+0x798>)
 800472a:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * c150 - 2.0 * R * s150 + 2.0 * ((2.0 * sqrt(3) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2 * Pzaux)) * ((pow((Pxaux + r * c150), 2) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 800472e:	4bd3      	ldr	r3, [pc, #844]	; (8004a7c <cinematicaInversa+0x79c>)
 8004730:	ed93 7b00 	vldr	d7, [r3]
 8004734:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8004a68 <cinematicaInversa+0x788>
 8004738:	ee27 6b06 	vmul.f64	d6, d7, d6
 800473c:	4bd0      	ldr	r3, [pc, #832]	; (8004a80 <cinematicaInversa+0x7a0>)
 800473e:	ed93 7b00 	vldr	d7, [r3]
 8004742:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004746:	4bcd      	ldr	r3, [pc, #820]	; (8004a7c <cinematicaInversa+0x79c>)
 8004748:	ed93 7b00 	vldr	d7, [r3]
 800474c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004750:	4bcc      	ldr	r3, [pc, #816]	; (8004a84 <cinematicaInversa+0x7a4>)
 8004752:	ed93 7b00 	vldr	d7, [r3]
 8004756:	ee25 7b07 	vmul.f64	d7, d5, d7
 800475a:	ee36 8b47 	vsub.f64	d8, d6, d7
 800475e:	4bca      	ldr	r3, [pc, #808]	; (8004a88 <cinematicaInversa+0x7a8>)
 8004760:	ed93 6b00 	vldr	d6, [r3]
 8004764:	4bc6      	ldr	r3, [pc, #792]	; (8004a80 <cinematicaInversa+0x7a0>)
 8004766:	ed93 7b00 	vldr	d7, [r3]
 800476a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800476e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004772:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004776:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8004a68 <cinematicaInversa+0x788>
 800477a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800477e:	4bc2      	ldr	r3, [pc, #776]	; (8004a88 <cinematicaInversa+0x7a8>)
 8004780:	ed93 5b00 	vldr	d5, [r3]
 8004784:	4bbf      	ldr	r3, [pc, #764]	; (8004a84 <cinematicaInversa+0x7a4>)
 8004786:	ed93 7b00 	vldr	d7, [r3]
 800478a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800478e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004792:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004796:	ee37 7b07 	vadd.f64	d7, d7, d7
 800479a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800479e:	4bb7      	ldr	r3, [pc, #732]	; (8004a7c <cinematicaInversa+0x79c>)
 80047a0:	ed93 7b00 	vldr	d7, [r3]
 80047a4:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 8004a68 <cinematicaInversa+0x788>
 80047a8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80047ac:	4bb4      	ldr	r3, [pc, #720]	; (8004a80 <cinematicaInversa+0x7a0>)
 80047ae:	ed93 7b00 	vldr	d7, [r3]
 80047b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80047b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047ba:	4bb0      	ldr	r3, [pc, #704]	; (8004a7c <cinematicaInversa+0x79c>)
 80047bc:	ed93 7b00 	vldr	d7, [r3]
 80047c0:	ee37 5b07 	vadd.f64	d5, d7, d7
 80047c4:	4baf      	ldr	r3, [pc, #700]	; (8004a84 <cinematicaInversa+0x7a4>)
 80047c6:	ed93 7b00 	vldr	d7, [r3]
 80047ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80047ce:	ee36 5b07 	vadd.f64	d5, d6, d7
 80047d2:	ed97 7b00 	vldr	d7, [r7]
 80047d6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80047da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80047de:	ee37 9b07 	vadd.f64	d9, d7, d7
 80047e2:	4ba9      	ldr	r3, [pc, #676]	; (8004a88 <cinematicaInversa+0x7a8>)
 80047e4:	ed93 6b00 	vldr	d6, [r3]
 80047e8:	4ba5      	ldr	r3, [pc, #660]	; (8004a80 <cinematicaInversa+0x7a0>)
 80047ea:	ed93 7b00 	vldr	d7, [r3]
 80047ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80047f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80047fe:	eeb0 0b47 	vmov.f64	d0, d7
 8004802:	f00b ff31 	bl	8010668 <pow>
 8004806:	eeb0 ab40 	vmov.f64	d10, d0
 800480a:	4b9f      	ldr	r3, [pc, #636]	; (8004a88 <cinematicaInversa+0x7a8>)
 800480c:	ed93 6b00 	vldr	d6, [r3]
 8004810:	4b9c      	ldr	r3, [pc, #624]	; (8004a84 <cinematicaInversa+0x7a4>)
 8004812:	ed93 7b00 	vldr	d7, [r3]
 8004816:	ee26 6b07 	vmul.f64	d6, d6, d7
 800481a:	ed97 7b02 	vldr	d7, [r7, #8]
 800481e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004822:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004826:	eeb0 0b47 	vmov.f64	d0, d7
 800482a:	f00b ff1d 	bl	8010668 <pow>
 800482e:	eeb0 7b40 	vmov.f64	d7, d0
 8004832:	ee3a ab07 	vadd.f64	d10, d10, d7
 8004836:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800483a:	ed97 0b00 	vldr	d0, [r7]
 800483e:	f00b ff13 	bl	8010668 <pow>
 8004842:	eeb0 7b40 	vmov.f64	d7, d0
 8004846:	ee3a ab07 	vadd.f64	d10, d10, d7
 800484a:	4b8a      	ldr	r3, [pc, #552]	; (8004a74 <cinematicaInversa+0x794>)
 800484c:	ed93 7b00 	vldr	d7, [r3]
 8004850:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004854:	eeb0 0b47 	vmov.f64	d0, d7
 8004858:	f00b ff06 	bl	8010668 <pow>
 800485c:	eeb0 7b40 	vmov.f64	d7, d0
 8004860:	ee3a ab47 	vsub.f64	d10, d10, d7
 8004864:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <cinematicaInversa+0x79c>)
 8004866:	ed93 7b00 	vldr	d7, [r3]
 800486a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800486e:	eeb0 0b47 	vmov.f64	d0, d7
 8004872:	f00b fef9 	bl	8010668 <pow>
 8004876:	eeb0 7b40 	vmov.f64	d7, d0
 800487a:	ee3a ab47 	vsub.f64	d10, d10, d7
 800487e:	4b83      	ldr	r3, [pc, #524]	; (8004a8c <cinematicaInversa+0x7ac>)
 8004880:	ed93 7b00 	vldr	d7, [r3]
 8004884:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004888:	eeb0 0b47 	vmov.f64	d0, d7
 800488c:	f00b feec 	bl	8010668 <pow>
 8004890:	eeb0 7b40 	vmov.f64	d7, d0
 8004894:	ee3a 5b07 	vadd.f64	d5, d10, d7
 8004898:	ed97 7b00 	vldr	d7, [r7]
 800489c:	ee37 6b07 	vadd.f64	d6, d7, d7
 80048a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80048a4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80048a8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80048ac:	4b78      	ldr	r3, [pc, #480]	; (8004a90 <cinematicaInversa+0x7b0>)
 80048ae:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)), 2) - pow(L1, 2) + pow(R, 2));
 80048b2:	4b75      	ldr	r3, [pc, #468]	; (8004a88 <cinematicaInversa+0x7a8>)
 80048b4:	ed93 7b00 	vldr	d7, [r3]
 80048b8:	ed97 6b02 	vldr	d6, [r7, #8]
 80048bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80048c0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80048c4:	eeb0 0b47 	vmov.f64	d0, d7
 80048c8:	f00b fece 	bl	8010668 <pow>
 80048cc:	eeb0 8b40 	vmov.f64	d8, d0
 80048d0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80048d4:	ed97 0b00 	vldr	d0, [r7]
 80048d8:	f00b fec6 	bl	8010668 <pow>
 80048dc:	eeb0 7b40 	vmov.f64	d7, d0
 80048e0:	ee38 8b07 	vadd.f64	d8, d8, d7
 80048e4:	4b63      	ldr	r3, [pc, #396]	; (8004a74 <cinematicaInversa+0x794>)
 80048e6:	ed93 7b00 	vldr	d7, [r3]
 80048ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80048ee:	eeb0 0b47 	vmov.f64	d0, d7
 80048f2:	f00b feb9 	bl	8010668 <pow>
 80048f6:	eeb0 7b40 	vmov.f64	d7, d0
 80048fa:	ee38 8b47 	vsub.f64	d8, d8, d7
 80048fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004902:	ed97 0b04 	vldr	d0, [r7, #16]
 8004906:	f00b feaf 	bl	8010668 <pow>
 800490a:	eeb0 7b40 	vmov.f64	d7, d0
 800490e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8004912:	4b5a      	ldr	r3, [pc, #360]	; (8004a7c <cinematicaInversa+0x79c>)
 8004914:	ed93 7b00 	vldr	d7, [r3]
 8004918:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800491c:	eeb0 0b47 	vmov.f64	d0, d7
 8004920:	f00b fea2 	bl	8010668 <pow>
 8004924:	eeb0 7b40 	vmov.f64	d7, d0
 8004928:	ee38 8b47 	vsub.f64	d8, d8, d7
 800492c:	4b57      	ldr	r3, [pc, #348]	; (8004a8c <cinematicaInversa+0x7ac>)
 800492e:	ed93 7b00 	vldr	d7, [r3]
 8004932:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004936:	eeb0 0b47 	vmov.f64	d0, d7
 800493a:	f00b fe95 	bl	8010668 <pow>
 800493e:	eeb0 7b40 	vmov.f64	d7, d0
 8004942:	ee38 6b07 	vadd.f64	d6, d8, d7
 8004946:	ed97 7b00 	vldr	d7, [r7]
 800494a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800494e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004952:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004956:	eeb0 0b45 	vmov.f64	d0, d5
 800495a:	f00b fe85 	bl	8010668 <pow>
 800495e:	eeb0 8b40 	vmov.f64	d8, d0
 8004962:	4b4a      	ldr	r3, [pc, #296]	; (8004a8c <cinematicaInversa+0x7ac>)
 8004964:	ed93 7b00 	vldr	d7, [r3]
 8004968:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800496c:	eeb0 0b47 	vmov.f64	d0, d7
 8004970:	f00b fe7a 	bl	8010668 <pow>
 8004974:	eeb0 7b40 	vmov.f64	d7, d0
 8004978:	ee38 8b47 	vsub.f64	d8, d8, d7
 800497c:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <cinematicaInversa+0x79c>)
 800497e:	ed93 7b00 	vldr	d7, [r3]
 8004982:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004986:	eeb0 0b47 	vmov.f64	d0, d7
 800498a:	f00b fe6d 	bl	8010668 <pow>
 800498e:	eeb0 7b40 	vmov.f64	d7, d0
 8004992:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004996:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <cinematicaInversa+0x7b4>)
 8004998:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2.0 * Pzaux)), 2.0);
 800499c:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <cinematicaInversa+0x79c>)
 800499e:	ed93 7b00 	vldr	d7, [r3]
 80049a2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049a6:	eeb0 0b47 	vmov.f64	d0, d7
 80049aa:	f00b fe5d 	bl	8010668 <pow>
 80049ae:	eeb0 8b40 	vmov.f64	d8, d0
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <cinematicaInversa+0x7ac>)
 80049b4:	ed93 7b00 	vldr	d7, [r3]
 80049b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049bc:	eeb0 0b47 	vmov.f64	d0, d7
 80049c0:	f00b fe52 	bl	8010668 <pow>
 80049c4:	eeb0 7b40 	vmov.f64	d7, d0
 80049c8:	ee38 8b47 	vsub.f64	d8, d8, d7
 80049cc:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <cinematicaInversa+0x7ac>)
 80049ce:	ed93 7b00 	vldr	d7, [r3]
 80049d2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049d6:	eeb0 0b47 	vmov.f64	d0, d7
 80049da:	f00b fe45 	bl	8010668 <pow>
 80049de:	eeb0 9b40 	vmov.f64	d9, d0
 80049e2:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <cinematicaInversa+0x79c>)
 80049e4:	ed93 7b00 	vldr	d7, [r3]
 80049e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049ec:	eeb0 0b47 	vmov.f64	d0, d7
 80049f0:	f00b fe3a 	bl	8010668 <pow>
 80049f4:	eeb0 7b40 	vmov.f64	d7, d0
 80049f8:	ee39 9b47 	vsub.f64	d9, d9, d7
 80049fc:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <cinematicaInversa+0x7a8>)
 80049fe:	ed93 6b00 	vldr	d6, [r3]
 8004a02:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <cinematicaInversa+0x7b8>)
 8004a04:	ed93 7b00 	vldr	d7, [r3]
 8004a08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004a0c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a14:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a18:	eeb0 0b47 	vmov.f64	d0, d7
 8004a1c:	f00b fe24 	bl	8010668 <pow>
 8004a20:	eeb0 7b40 	vmov.f64	d7, d0
 8004a24:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <cinematicaInversa+0x7a8>)
 8004a2a:	ed93 6b00 	vldr	d6, [r3]
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <cinematicaInversa+0x790>)
 8004a30:	ed93 7b00 	vldr	d7, [r3]
 8004a34:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004a38:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a40:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a44:	eeb0 0b47 	vmov.f64	d0, d7
 8004a48:	f00b fe0e 	bl	8010668 <pow>
 8004a4c:	eeb0 7b40 	vmov.f64	d7, d0
 8004a50:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004a54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a58:	ed97 0b00 	vldr	d0, [r7]
 8004a5c:	f00b fe04 	bl	8010668 <pow>
 8004a60:	e01c      	b.n	8004a9c <cinematicaInversa+0x7bc>
 8004a62:	bf00      	nop
 8004a64:	f3af 8000 	nop.w
 8004a68:	e8584caa 	.word	0xe8584caa
 8004a6c:	400bb67a 	.word	0x400bb67a
 8004a70:	240000e8 	.word	0x240000e8
 8004a74:	24000038 	.word	0x24000038
 8004a78:	24000a40 	.word	0x24000a40
 8004a7c:	24000040 	.word	0x24000040
 8004a80:	240000f0 	.word	0x240000f0
 8004a84:	240000f8 	.word	0x240000f8
 8004a88:	24000048 	.word	0x24000048
 8004a8c:	24000030 	.word	0x24000030
 8004a90:	24000bd0 	.word	0x24000bd0
 8004a94:	24000798 	.word	0x24000798
 8004a98:	240000e0 	.word	0x240000e0
 8004a9c:	eeb0 7b40 	vmov.f64	d7, d0
 8004aa0:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004aa4:	4be3      	ldr	r3, [pc, #908]	; (8004e34 <cinematicaInversa+0xb54>)
 8004aa6:	ed93 7b00 	vldr	d7, [r3]
 8004aaa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004aae:	eeb0 0b47 	vmov.f64	d0, d7
 8004ab2:	f00b fdd9 	bl	8010668 <pow>
 8004ab6:	eeb0 7b40 	vmov.f64	d7, d0
 8004aba:	ee39 6b47 	vsub.f64	d6, d9, d7
 8004abe:	ed97 7b00 	vldr	d7, [r7]
 8004ac2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ac6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004aca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ace:	eeb0 0b45 	vmov.f64	d0, d5
 8004ad2:	f00b fdc9 	bl	8010668 <pow>
 8004ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8004ada:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004ade:	4bd6      	ldr	r3, [pc, #856]	; (8004e38 <cinematicaInversa+0xb58>)
 8004ae0:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((Pxaux + r * c150), 2) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * Pzaux)), 2.0);
 8004ae4:	4bd5      	ldr	r3, [pc, #852]	; (8004e3c <cinematicaInversa+0xb5c>)
 8004ae6:	ed93 7b00 	vldr	d7, [r3]
 8004aea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004aee:	eeb0 0b47 	vmov.f64	d0, d7
 8004af2:	f00b fdb9 	bl	8010668 <pow>
 8004af6:	eeb0 8b40 	vmov.f64	d8, d0
 8004afa:	4bd1      	ldr	r3, [pc, #836]	; (8004e40 <cinematicaInversa+0xb60>)
 8004afc:	ed93 7b00 	vldr	d7, [r3]
 8004b00:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b04:	eeb0 0b47 	vmov.f64	d0, d7
 8004b08:	f00b fdae 	bl	8010668 <pow>
 8004b0c:	eeb0 7b40 	vmov.f64	d7, d0
 8004b10:	ee38 8b47 	vsub.f64	d8, d8, d7
 8004b14:	4bcb      	ldr	r3, [pc, #812]	; (8004e44 <cinematicaInversa+0xb64>)
 8004b16:	ed93 6b00 	vldr	d6, [r3]
 8004b1a:	4bcb      	ldr	r3, [pc, #812]	; (8004e48 <cinematicaInversa+0xb68>)
 8004b1c:	ed93 7b00 	vldr	d7, [r3]
 8004b20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b24:	ed97 7b04 	vldr	d7, [r7, #16]
 8004b28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b2c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b30:	eeb0 0b47 	vmov.f64	d0, d7
 8004b34:	f00b fd98 	bl	8010668 <pow>
 8004b38:	eeb0 9b40 	vmov.f64	d9, d0
 8004b3c:	4bc1      	ldr	r3, [pc, #772]	; (8004e44 <cinematicaInversa+0xb64>)
 8004b3e:	ed93 6b00 	vldr	d6, [r3]
 8004b42:	4bc2      	ldr	r3, [pc, #776]	; (8004e4c <cinematicaInversa+0xb6c>)
 8004b44:	ed93 7b00 	vldr	d7, [r3]
 8004b48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004b50:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b58:	eeb0 0b47 	vmov.f64	d0, d7
 8004b5c:	f00b fd84 	bl	8010668 <pow>
 8004b60:	eeb0 7b40 	vmov.f64	d7, d0
 8004b64:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004b68:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b6c:	ed97 0b00 	vldr	d0, [r7]
 8004b70:	f00b fd7a 	bl	8010668 <pow>
 8004b74:	eeb0 7b40 	vmov.f64	d7, d0
 8004b78:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004b7c:	4bad      	ldr	r3, [pc, #692]	; (8004e34 <cinematicaInversa+0xb54>)
 8004b7e:	ed93 7b00 	vldr	d7, [r3]
 8004b82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b86:	eeb0 0b47 	vmov.f64	d0, d7
 8004b8a:	f00b fd6d 	bl	8010668 <pow>
 8004b8e:	eeb0 7b40 	vmov.f64	d7, d0
 8004b92:	ee39 9b47 	vsub.f64	d9, d9, d7
 8004b96:	4ba9      	ldr	r3, [pc, #676]	; (8004e3c <cinematicaInversa+0xb5c>)
 8004b98:	ed93 7b00 	vldr	d7, [r3]
 8004b9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ba0:	eeb0 0b47 	vmov.f64	d0, d7
 8004ba4:	f00b fd60 	bl	8010668 <pow>
 8004ba8:	eeb0 7b40 	vmov.f64	d7, d0
 8004bac:	ee39 9b47 	vsub.f64	d9, d9, d7
 8004bb0:	4ba3      	ldr	r3, [pc, #652]	; (8004e40 <cinematicaInversa+0xb60>)
 8004bb2:	ed93 7b00 	vldr	d7, [r3]
 8004bb6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004bba:	eeb0 0b47 	vmov.f64	d0, d7
 8004bbe:	f00b fd53 	bl	8010668 <pow>
 8004bc2:	eeb0 7b40 	vmov.f64	d7, d0
 8004bc6:	ee39 6b07 	vadd.f64	d6, d9, d7
 8004bca:	ed97 7b00 	vldr	d7, [r7]
 8004bce:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004bd2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004bd6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004bda:	eeb0 0b45 	vmov.f64	d0, d5
 8004bde:	f00b fd43 	bl	8010668 <pow>
 8004be2:	eeb0 7b40 	vmov.f64	d7, d0
 8004be6:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004bea:	4b99      	ldr	r3, [pc, #612]	; (8004e50 <cinematicaInversa+0xb70>)
 8004bec:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8004bf0:	4b98      	ldr	r3, [pc, #608]	; (8004e54 <cinematicaInversa+0xb74>)
 8004bf2:	ed93 7b00 	vldr	d7, [r3]
 8004bf6:	eeb1 8b47 	vneg.f64	d8, d7
 8004bfa:	4b96      	ldr	r3, [pc, #600]	; (8004e54 <cinematicaInversa+0xb74>)
 8004bfc:	ed93 7b00 	vldr	d7, [r3]
 8004c00:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c04:	eeb0 0b47 	vmov.f64	d0, d7
 8004c08:	f00b fd2e 	bl	8010668 <pow>
 8004c0c:	eeb0 5b40 	vmov.f64	d5, d0
 8004c10:	4b91      	ldr	r3, [pc, #580]	; (8004e58 <cinematicaInversa+0xb78>)
 8004c12:	ed93 7b00 	vldr	d7, [r3]
 8004c16:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004c1a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004c1e:	4b8f      	ldr	r3, [pc, #572]	; (8004e5c <cinematicaInversa+0xb7c>)
 8004c20:	ed93 7b00 	vldr	d7, [r3]
 8004c24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004c2c:	eeb0 0b47 	vmov.f64	d0, d7
 8004c30:	f00b fe4a 	bl	80108c8 <sqrt>
 8004c34:	eeb0 7b40 	vmov.f64	d7, d0
 8004c38:	ee38 5b47 	vsub.f64	d5, d8, d7
 8004c3c:	4b86      	ldr	r3, [pc, #536]	; (8004e58 <cinematicaInversa+0xb78>)
 8004c3e:	ed93 7b00 	vldr	d7, [r3]
 8004c42:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004c46:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004c4a:	4b85      	ldr	r3, [pc, #532]	; (8004e60 <cinematicaInversa+0xb80>)
 8004c4c:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8004c50:	4b80      	ldr	r3, [pc, #512]	; (8004e54 <cinematicaInversa+0xb74>)
 8004c52:	ed93 7b00 	vldr	d7, [r3]
 8004c56:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c5a:	eeb0 0b47 	vmov.f64	d0, d7
 8004c5e:	f00b fd03 	bl	8010668 <pow>
 8004c62:	eeb0 5b40 	vmov.f64	d5, d0
 8004c66:	4b7c      	ldr	r3, [pc, #496]	; (8004e58 <cinematicaInversa+0xb78>)
 8004c68:	ed93 7b00 	vldr	d7, [r3]
 8004c6c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004c70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004c74:	4b79      	ldr	r3, [pc, #484]	; (8004e5c <cinematicaInversa+0xb7c>)
 8004c76:	ed93 7b00 	vldr	d7, [r3]
 8004c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c7e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004c82:	eeb0 0b47 	vmov.f64	d0, d7
 8004c86:	f00b fe1f 	bl	80108c8 <sqrt>
 8004c8a:	eeb0 6b40 	vmov.f64	d6, d0
 8004c8e:	4b71      	ldr	r3, [pc, #452]	; (8004e54 <cinematicaInversa+0xb74>)
 8004c90:	ed93 7b00 	vldr	d7, [r3]
 8004c94:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004c98:	4b6f      	ldr	r3, [pc, #444]	; (8004e58 <cinematicaInversa+0xb78>)
 8004c9a:	ed93 7b00 	vldr	d7, [r3]
 8004c9e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004ca2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ca6:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <cinematicaInversa+0xb84>)
 8004ca8:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8004cac:	4b6e      	ldr	r3, [pc, #440]	; (8004e68 <cinematicaInversa+0xb88>)
 8004cae:	ed93 7b00 	vldr	d7, [r3]
 8004cb2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004cb6:	eeb0 0b47 	vmov.f64	d0, d7
 8004cba:	f00b fcd5 	bl	8010668 <pow>
 8004cbe:	eeb0 5b40 	vmov.f64	d5, d0
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	; (8004e6c <cinematicaInversa+0xb8c>)
 8004cc4:	ed93 7b00 	vldr	d7, [r3]
 8004cc8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004ccc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004cd0:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <cinematicaInversa+0xb58>)
 8004cd2:	ed93 7b00 	vldr	d7, [r3]
 8004cd6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004cda:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004cde:	eeb0 0b47 	vmov.f64	d0, d7
 8004ce2:	f00b fdf1 	bl	80108c8 <sqrt>
 8004ce6:	eeb0 6b40 	vmov.f64	d6, d0
 8004cea:	4b5f      	ldr	r3, [pc, #380]	; (8004e68 <cinematicaInversa+0xb88>)
 8004cec:	ed93 7b00 	vldr	d7, [r3]
 8004cf0:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004cf4:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <cinematicaInversa+0xb8c>)
 8004cf6:	ed93 7b00 	vldr	d7, [r3]
 8004cfa:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004cfe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d02:	4b5b      	ldr	r3, [pc, #364]	; (8004e70 <cinematicaInversa+0xb90>)
 8004d04:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8004d08:	4b57      	ldr	r3, [pc, #348]	; (8004e68 <cinematicaInversa+0xb88>)
 8004d0a:	ed93 7b00 	vldr	d7, [r3]
 8004d0e:	eeb1 8b47 	vneg.f64	d8, d7
 8004d12:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <cinematicaInversa+0xb88>)
 8004d14:	ed93 7b00 	vldr	d7, [r3]
 8004d18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8004d20:	f00b fca2 	bl	8010668 <pow>
 8004d24:	eeb0 5b40 	vmov.f64	d5, d0
 8004d28:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <cinematicaInversa+0xb8c>)
 8004d2a:	ed93 7b00 	vldr	d7, [r3]
 8004d2e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004d32:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <cinematicaInversa+0xb58>)
 8004d38:	ed93 7b00 	vldr	d7, [r3]
 8004d3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d40:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d44:	eeb0 0b47 	vmov.f64	d0, d7
 8004d48:	f00b fdbe 	bl	80108c8 <sqrt>
 8004d4c:	eeb0 7b40 	vmov.f64	d7, d0
 8004d50:	ee38 5b47 	vsub.f64	d5, d8, d7
 8004d54:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <cinematicaInversa+0xb8c>)
 8004d56:	ed93 7b00 	vldr	d7, [r3]
 8004d5a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004d5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d62:	4b44      	ldr	r3, [pc, #272]	; (8004e74 <cinematicaInversa+0xb94>)
 8004d64:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <cinematicaInversa+0xb98>)
 8004d6a:	ed93 7b00 	vldr	d7, [r3]
 8004d6e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d72:	eeb0 0b47 	vmov.f64	d0, d7
 8004d76:	f00b fc77 	bl	8010668 <pow>
 8004d7a:	eeb0 5b40 	vmov.f64	d5, d0
 8004d7e:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <cinematicaInversa+0xb9c>)
 8004d80:	ed93 7b00 	vldr	d7, [r3]
 8004d84:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004d88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004d8c:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <cinematicaInversa+0xb70>)
 8004d8e:	ed93 7b00 	vldr	d7, [r3]
 8004d92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d96:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d9a:	eeb0 0b47 	vmov.f64	d0, d7
 8004d9e:	f00b fd93 	bl	80108c8 <sqrt>
 8004da2:	eeb0 6b40 	vmov.f64	d6, d0
 8004da6:	4b34      	ldr	r3, [pc, #208]	; (8004e78 <cinematicaInversa+0xb98>)
 8004da8:	ed93 7b00 	vldr	d7, [r3]
 8004dac:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004db0:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <cinematicaInversa+0xb9c>)
 8004db2:	ed93 7b00 	vldr	d7, [r3]
 8004db6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004dba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004dbe:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <cinematicaInversa+0xba0>)
 8004dc0:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8004dc4:	4b2c      	ldr	r3, [pc, #176]	; (8004e78 <cinematicaInversa+0xb98>)
 8004dc6:	ed93 7b00 	vldr	d7, [r3]
 8004dca:	eeb1 8b47 	vneg.f64	d8, d7
 8004dce:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <cinematicaInversa+0xb98>)
 8004dd0:	ed93 7b00 	vldr	d7, [r3]
 8004dd4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8004ddc:	f00b fc44 	bl	8010668 <pow>
 8004de0:	eeb0 5b40 	vmov.f64	d5, d0
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <cinematicaInversa+0xb9c>)
 8004de6:	ed93 7b00 	vldr	d7, [r3]
 8004dea:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004dee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004df2:	4b17      	ldr	r3, [pc, #92]	; (8004e50 <cinematicaInversa+0xb70>)
 8004df4:	ed93 7b00 	vldr	d7, [r3]
 8004df8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004dfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004e00:	eeb0 0b47 	vmov.f64	d0, d7
 8004e04:	f00b fd60 	bl	80108c8 <sqrt>
 8004e08:	eeb0 7b40 	vmov.f64	d7, d0
 8004e0c:	ee38 5b47 	vsub.f64	d5, d8, d7
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <cinematicaInversa+0xb9c>)
 8004e12:	ed93 7b00 	vldr	d7, [r3]
 8004e16:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004e1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004e1e:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <cinematicaInversa+0xba4>)
 8004e20:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <cinematicaInversa+0xba8>)
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	f04f 0400 	mov.w	r4, #0
 8004e2e:	e9c2 3400 	strd	r3, r4, [r2]
 8004e32:	e02b      	b.n	8004e8c <cinematicaInversa+0xbac>
 8004e34:	24000038 	.word	0x24000038
 8004e38:	240009c0 	.word	0x240009c0
 8004e3c:	24000040 	.word	0x24000040
 8004e40:	24000030 	.word	0x24000030
 8004e44:	24000048 	.word	0x24000048
 8004e48:	240000f0 	.word	0x240000f0
 8004e4c:	240000f8 	.word	0x240000f8
 8004e50:	240007d0 	.word	0x240007d0
 8004e54:	24000b60 	.word	0x24000b60
 8004e58:	24000bc0 	.word	0x24000bc0
 8004e5c:	24000798 	.word	0x24000798
 8004e60:	240007c8 	.word	0x240007c8
 8004e64:	24000890 	.word	0x24000890
 8004e68:	24000a40 	.word	0x24000a40
 8004e6c:	24000a50 	.word	0x24000a50
 8004e70:	240009e8 	.word	0x240009e8
 8004e74:	24000768 	.word	0x24000768
 8004e78:	24000bd0 	.word	0x24000bd0
 8004e7c:	24000828 	.word	0x24000828
 8004e80:	24000830 	.word	0x24000830
 8004e84:	240009f0 	.word	0x240009f0
 8004e88:	24000770 	.word	0x24000770
	XJ1_2 = 0;
 8004e8c:	4ae6      	ldr	r2, [pc, #920]	; (8005228 <cinematicaInversa+0xf48>)
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	f04f 0400 	mov.w	r4, #0
 8004e96:	e9c2 3400 	strd	r3, r4, [r2]
	XJ2_1 = sqrt(3) * YJ2_1;
 8004e9a:	4be4      	ldr	r3, [pc, #912]	; (800522c <cinematicaInversa+0xf4c>)
 8004e9c:	ed93 7b00 	vldr	d7, [r3]
 8004ea0:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8005208 <cinematicaInversa+0xf28>
 8004ea4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ea8:	4be1      	ldr	r3, [pc, #900]	; (8005230 <cinematicaInversa+0xf50>)
 8004eaa:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8004eae:	4be1      	ldr	r3, [pc, #900]	; (8005234 <cinematicaInversa+0xf54>)
 8004eb0:	ed93 7b00 	vldr	d7, [r3]
 8004eb4:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8005208 <cinematicaInversa+0xf28>
 8004eb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ebc:	4bde      	ldr	r3, [pc, #888]	; (8005238 <cinematicaInversa+0xf58>)
 8004ebe:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8004ec2:	4bde      	ldr	r3, [pc, #888]	; (800523c <cinematicaInversa+0xf5c>)
 8004ec4:	ed93 7b00 	vldr	d7, [r3]
 8004ec8:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 8005210 <cinematicaInversa+0xf30>
 8004ecc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ed0:	4bdb      	ldr	r3, [pc, #876]	; (8005240 <cinematicaInversa+0xf60>)
 8004ed2:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8004ed6:	4bdb      	ldr	r3, [pc, #876]	; (8005244 <cinematicaInversa+0xf64>)
 8004ed8:	ed93 7b00 	vldr	d7, [r3]
 8004edc:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8005210 <cinematicaInversa+0xf30>
 8004ee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ee4:	4bd8      	ldr	r3, [pc, #864]	; (8005248 <cinematicaInversa+0xf68>)
 8004ee6:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (Pyaux - r))) / (2 * Pzaux))) + ((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)));
 8004eea:	4bd8      	ldr	r3, [pc, #864]	; (800524c <cinematicaInversa+0xf6c>)
 8004eec:	ed93 7b00 	vldr	d7, [r3]
 8004ef0:	ed97 6b02 	vldr	d6, [r7, #8]
 8004ef4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004ef8:	4bd5      	ldr	r3, [pc, #852]	; (8005250 <cinematicaInversa+0xf70>)
 8004efa:	ed93 7b00 	vldr	d7, [r3]
 8004efe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f02:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8004f06:	ee27 5b06 	vmul.f64	d5, d7, d6
 8004f0a:	ed97 7b00 	vldr	d7, [r7]
 8004f0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f12:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004f16:	4bcf      	ldr	r3, [pc, #828]	; (8005254 <cinematicaInversa+0xf74>)
 8004f18:	ed93 7b00 	vldr	d7, [r3]
 8004f1c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8004f20:	4bca      	ldr	r3, [pc, #808]	; (800524c <cinematicaInversa+0xf6c>)
 8004f22:	ed93 7b00 	vldr	d7, [r3]
 8004f26:	ed97 6b02 	vldr	d6, [r7, #8]
 8004f2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f2e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f32:	eeb0 0b47 	vmov.f64	d0, d7
 8004f36:	f00b fb97 	bl	8010668 <pow>
 8004f3a:	eeb0 9b40 	vmov.f64	d9, d0
 8004f3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f42:	ed97 0b00 	vldr	d0, [r7]
 8004f46:	f00b fb8f 	bl	8010668 <pow>
 8004f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8004f4e:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004f52:	4bc1      	ldr	r3, [pc, #772]	; (8005258 <cinematicaInversa+0xf78>)
 8004f54:	ed93 7b00 	vldr	d7, [r3]
 8004f58:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f5c:	eeb0 0b47 	vmov.f64	d0, d7
 8004f60:	f00b fb82 	bl	8010668 <pow>
 8004f64:	eeb0 7b40 	vmov.f64	d7, d0
 8004f68:	ee39 9b47 	vsub.f64	d9, d9, d7
 8004f6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f70:	ed97 0b04 	vldr	d0, [r7, #16]
 8004f74:	f00b fb78 	bl	8010668 <pow>
 8004f78:	eeb0 7b40 	vmov.f64	d7, d0
 8004f7c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8004f80:	4bb3      	ldr	r3, [pc, #716]	; (8005250 <cinematicaInversa+0xf70>)
 8004f82:	ed93 7b00 	vldr	d7, [r3]
 8004f86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8004f8e:	f00b fb6b 	bl	8010668 <pow>
 8004f92:	eeb0 7b40 	vmov.f64	d7, d0
 8004f96:	ee39 9b47 	vsub.f64	d9, d9, d7
 8004f9a:	4bb0      	ldr	r3, [pc, #704]	; (800525c <cinematicaInversa+0xf7c>)
 8004f9c:	ed93 7b00 	vldr	d7, [r3]
 8004fa0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fa4:	eeb0 0b47 	vmov.f64	d0, d7
 8004fa8:	f00b fb5e 	bl	8010668 <pow>
 8004fac:	eeb0 7b40 	vmov.f64	d7, d0
 8004fb0:	ee39 5b07 	vadd.f64	d5, d9, d7
 8004fb4:	ed97 7b00 	vldr	d7, [r7]
 8004fb8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004fbc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004fc0:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004fc4:	4ba6      	ldr	r3, [pc, #664]	; (8005260 <cinematicaInversa+0xf80>)
 8004fc6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (Pyaux - r))) / (2 * Pzaux))) + ((pow((Pyaux - r), 2) + pow(Pzaux, 2) - pow(L2, 2) + pow(Pxaux, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux)));
 8004fca:	4ba0      	ldr	r3, [pc, #640]	; (800524c <cinematicaInversa+0xf6c>)
 8004fcc:	ed93 7b00 	vldr	d7, [r3]
 8004fd0:	ed97 6b02 	vldr	d6, [r7, #8]
 8004fd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fd8:	4b9d      	ldr	r3, [pc, #628]	; (8005250 <cinematicaInversa+0xf70>)
 8004fda:	ed93 7b00 	vldr	d7, [r3]
 8004fde:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fe2:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8004fe6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8004fea:	ed97 7b00 	vldr	d7, [r7]
 8004fee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ff2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004ff6:	4b9b      	ldr	r3, [pc, #620]	; (8005264 <cinematicaInversa+0xf84>)
 8004ff8:	ed93 7b00 	vldr	d7, [r3]
 8004ffc:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005000:	4b92      	ldr	r3, [pc, #584]	; (800524c <cinematicaInversa+0xf6c>)
 8005002:	ed93 7b00 	vldr	d7, [r3]
 8005006:	ed97 6b02 	vldr	d6, [r7, #8]
 800500a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800500e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005012:	eeb0 0b47 	vmov.f64	d0, d7
 8005016:	f00b fb27 	bl	8010668 <pow>
 800501a:	eeb0 9b40 	vmov.f64	d9, d0
 800501e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005022:	ed97 0b00 	vldr	d0, [r7]
 8005026:	f00b fb1f 	bl	8010668 <pow>
 800502a:	eeb0 7b40 	vmov.f64	d7, d0
 800502e:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005032:	4b89      	ldr	r3, [pc, #548]	; (8005258 <cinematicaInversa+0xf78>)
 8005034:	ed93 7b00 	vldr	d7, [r3]
 8005038:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800503c:	eeb0 0b47 	vmov.f64	d0, d7
 8005040:	f00b fb12 	bl	8010668 <pow>
 8005044:	eeb0 7b40 	vmov.f64	d7, d0
 8005048:	ee39 9b47 	vsub.f64	d9, d9, d7
 800504c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005050:	ed97 0b04 	vldr	d0, [r7, #16]
 8005054:	f00b fb08 	bl	8010668 <pow>
 8005058:	eeb0 7b40 	vmov.f64	d7, d0
 800505c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005060:	4b7b      	ldr	r3, [pc, #492]	; (8005250 <cinematicaInversa+0xf70>)
 8005062:	ed93 7b00 	vldr	d7, [r3]
 8005066:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800506a:	eeb0 0b47 	vmov.f64	d0, d7
 800506e:	f00b fafb 	bl	8010668 <pow>
 8005072:	eeb0 7b40 	vmov.f64	d7, d0
 8005076:	ee39 9b47 	vsub.f64	d9, d9, d7
 800507a:	4b78      	ldr	r3, [pc, #480]	; (800525c <cinematicaInversa+0xf7c>)
 800507c:	ed93 7b00 	vldr	d7, [r3]
 8005080:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005084:	eeb0 0b47 	vmov.f64	d0, d7
 8005088:	f00b faee 	bl	8010668 <pow>
 800508c:	eeb0 7b40 	vmov.f64	d7, d0
 8005090:	ee39 5b07 	vadd.f64	d5, d9, d7
 8005094:	ed97 7b00 	vldr	d7, [r7]
 8005098:	ee37 6b07 	vadd.f64	d6, d7, d7
 800509c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050a0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80050a4:	4b70      	ldr	r3, [pc, #448]	; (8005268 <cinematicaInversa+0xf88>)
 80050a6:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * c30 + 2.0 * R * s30) + (-2 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) + ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 80050aa:	4b69      	ldr	r3, [pc, #420]	; (8005250 <cinematicaInversa+0xf70>)
 80050ac:	ed93 7b00 	vldr	d7, [r3]
 80050b0:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8005218 <cinematicaInversa+0xf38>
 80050b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80050b8:	4b6c      	ldr	r3, [pc, #432]	; (800526c <cinematicaInversa+0xf8c>)
 80050ba:	ed93 7b00 	vldr	d7, [r3]
 80050be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80050c2:	4b63      	ldr	r3, [pc, #396]	; (8005250 <cinematicaInversa+0xf70>)
 80050c4:	ed93 7b00 	vldr	d7, [r3]
 80050c8:	ee37 5b07 	vadd.f64	d5, d7, d7
 80050cc:	4b68      	ldr	r3, [pc, #416]	; (8005270 <cinematicaInversa+0xf90>)
 80050ce:	ed93 7b00 	vldr	d7, [r3]
 80050d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80050d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80050da:	4b5c      	ldr	r3, [pc, #368]	; (800524c <cinematicaInversa+0xf6c>)
 80050dc:	ed93 5b00 	vldr	d5, [r3]
 80050e0:	4b62      	ldr	r3, [pc, #392]	; (800526c <cinematicaInversa+0xf8c>)
 80050e2:	ed93 7b00 	vldr	d7, [r3]
 80050e6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80050ea:	ed97 7b04 	vldr	d7, [r7, #16]
 80050ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 80050f2:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8005220 <cinematicaInversa+0xf40>
 80050f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80050fa:	4b54      	ldr	r3, [pc, #336]	; (800524c <cinematicaInversa+0xf6c>)
 80050fc:	ed93 4b00 	vldr	d4, [r3]
 8005100:	4b5b      	ldr	r3, [pc, #364]	; (8005270 <cinematicaInversa+0xf90>)
 8005102:	ed93 7b00 	vldr	d7, [r3]
 8005106:	ee24 4b07 	vmul.f64	d4, d4, d7
 800510a:	ed97 7b02 	vldr	d7, [r7, #8]
 800510e:	ee34 7b07 	vadd.f64	d7, d4, d7
 8005112:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005116:	ee35 7b47 	vsub.f64	d7, d5, d7
 800511a:	ee36 5b07 	vadd.f64	d5, d6, d7
 800511e:	ed97 7b00 	vldr	d7, [r7]
 8005122:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005126:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800512a:	4b40      	ldr	r3, [pc, #256]	; (800522c <cinematicaInversa+0xf4c>)
 800512c:	ed93 7b00 	vldr	d7, [r3]
 8005130:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005134:	4b49      	ldr	r3, [pc, #292]	; (800525c <cinematicaInversa+0xf7c>)
 8005136:	ed93 7b00 	vldr	d7, [r3]
 800513a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800513e:	eeb0 0b47 	vmov.f64	d0, d7
 8005142:	f00b fa91 	bl	8010668 <pow>
 8005146:	eeb0 9b40 	vmov.f64	d9, d0
 800514a:	4b41      	ldr	r3, [pc, #260]	; (8005250 <cinematicaInversa+0xf70>)
 800514c:	ed93 7b00 	vldr	d7, [r3]
 8005150:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005154:	eeb0 0b47 	vmov.f64	d0, d7
 8005158:	f00b fa86 	bl	8010668 <pow>
 800515c:	eeb0 7b40 	vmov.f64	d7, d0
 8005160:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005164:	4b39      	ldr	r3, [pc, #228]	; (800524c <cinematicaInversa+0xf6c>)
 8005166:	ed93 6b00 	vldr	d6, [r3]
 800516a:	4b40      	ldr	r3, [pc, #256]	; (800526c <cinematicaInversa+0xf8c>)
 800516c:	ed93 7b00 	vldr	d7, [r3]
 8005170:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005174:	ed97 7b04 	vldr	d7, [r7, #16]
 8005178:	ee36 7b07 	vadd.f64	d7, d6, d7
 800517c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005180:	eeb0 0b47 	vmov.f64	d0, d7
 8005184:	f00b fa70 	bl	8010668 <pow>
 8005188:	eeb0 7b40 	vmov.f64	d7, d0
 800518c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005190:	4b2e      	ldr	r3, [pc, #184]	; (800524c <cinematicaInversa+0xf6c>)
 8005192:	ed93 6b00 	vldr	d6, [r3]
 8005196:	4b36      	ldr	r3, [pc, #216]	; (8005270 <cinematicaInversa+0xf90>)
 8005198:	ed93 7b00 	vldr	d7, [r3]
 800519c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80051a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051a8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051ac:	eeb0 0b47 	vmov.f64	d0, d7
 80051b0:	f00b fa5a 	bl	8010668 <pow>
 80051b4:	eeb0 7b40 	vmov.f64	d7, d0
 80051b8:	ee39 9b07 	vadd.f64	d9, d9, d7
 80051bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051c0:	ed97 0b00 	vldr	d0, [r7]
 80051c4:	f00b fa50 	bl	8010668 <pow>
 80051c8:	eeb0 7b40 	vmov.f64	d7, d0
 80051cc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80051d0:	4b21      	ldr	r3, [pc, #132]	; (8005258 <cinematicaInversa+0xf78>)
 80051d2:	ed93 7b00 	vldr	d7, [r3]
 80051d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051da:	eeb0 0b47 	vmov.f64	d0, d7
 80051de:	f00b fa43 	bl	8010668 <pow>
 80051e2:	eeb0 7b40 	vmov.f64	d7, d0
 80051e6:	ee39 5b47 	vsub.f64	d5, d9, d7
 80051ea:	ed97 7b00 	vldr	d7, [r7]
 80051ee:	ee37 6b07 	vadd.f64	d6, d7, d7
 80051f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051f6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80051fa:	4b1e      	ldr	r3, [pc, #120]	; (8005274 <cinematicaInversa+0xf94>)
 80051fc:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * c30 + 2.0 * R * s30) + (-2 * sqrt(3) * (Pxaux + r * c30) - 2.0 * (Pyaux + r * s30))) / (2 * Pzaux)) + ((-pow(R, 2) + pow(L1, 2) + pow((Pxaux + r * c30), 2) + pow((Pyaux + r * s30), 2) + pow(Pzaux, 2) - pow(L2, 2)) / (2 * Pzaux));
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <cinematicaInversa+0xf70>)
 8005202:	ed93 7b00 	vldr	d7, [r3]
 8005206:	e037      	b.n	8005278 <cinematicaInversa+0xf98>
 8005208:	e8584caa 	.word	0xe8584caa
 800520c:	3ffbb67a 	.word	0x3ffbb67a
 8005210:	e8584caa 	.word	0xe8584caa
 8005214:	bffbb67a 	.word	0xbffbb67a
 8005218:	e8584caa 	.word	0xe8584caa
 800521c:	400bb67a 	.word	0x400bb67a
 8005220:	e8584caa 	.word	0xe8584caa
 8005224:	c00bb67a 	.word	0xc00bb67a
 8005228:	24000a08 	.word	0x24000a08
 800522c:	240009e8 	.word	0x240009e8
 8005230:	240007b8 	.word	0x240007b8
 8005234:	24000768 	.word	0x24000768
 8005238:	24000898 	.word	0x24000898
 800523c:	24000830 	.word	0x24000830
 8005240:	240008b0 	.word	0x240008b0
 8005244:	240009f0 	.word	0x240009f0
 8005248:	24000b18 	.word	0x24000b18
 800524c:	24000048 	.word	0x24000048
 8005250:	24000040 	.word	0x24000040
 8005254:	240007c8 	.word	0x240007c8
 8005258:	24000038 	.word	0x24000038
 800525c:	24000030 	.word	0x24000030
 8005260:	24000900 	.word	0x24000900
 8005264:	24000890 	.word	0x24000890
 8005268:	24000b38 	.word	0x24000b38
 800526c:	240000e0 	.word	0x240000e0
 8005270:	240000e8 	.word	0x240000e8
 8005274:	24000a00 	.word	0x24000a00
 8005278:	ed9f 6be5 	vldr	d6, [pc, #916]	; 8005610 <cinematicaInversa+0x1330>
 800527c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005280:	4be7      	ldr	r3, [pc, #924]	; (8005620 <cinematicaInversa+0x1340>)
 8005282:	ed93 7b00 	vldr	d7, [r3]
 8005286:	ee26 6b07 	vmul.f64	d6, d6, d7
 800528a:	4be6      	ldr	r3, [pc, #920]	; (8005624 <cinematicaInversa+0x1344>)
 800528c:	ed93 7b00 	vldr	d7, [r3]
 8005290:	ee37 5b07 	vadd.f64	d5, d7, d7
 8005294:	4be4      	ldr	r3, [pc, #912]	; (8005628 <cinematicaInversa+0x1348>)
 8005296:	ed93 7b00 	vldr	d7, [r3]
 800529a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800529e:	ee36 6b07 	vadd.f64	d6, d6, d7
 80052a2:	4be2      	ldr	r3, [pc, #904]	; (800562c <cinematicaInversa+0x134c>)
 80052a4:	ed93 5b00 	vldr	d5, [r3]
 80052a8:	4bdd      	ldr	r3, [pc, #884]	; (8005620 <cinematicaInversa+0x1340>)
 80052aa:	ed93 7b00 	vldr	d7, [r3]
 80052ae:	ee25 5b07 	vmul.f64	d5, d5, d7
 80052b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80052b6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80052ba:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8005618 <cinematicaInversa+0x1338>
 80052be:	ee27 5b05 	vmul.f64	d5, d7, d5
 80052c2:	4bda      	ldr	r3, [pc, #872]	; (800562c <cinematicaInversa+0x134c>)
 80052c4:	ed93 4b00 	vldr	d4, [r3]
 80052c8:	4bd7      	ldr	r3, [pc, #860]	; (8005628 <cinematicaInversa+0x1348>)
 80052ca:	ed93 7b00 	vldr	d7, [r3]
 80052ce:	ee24 4b07 	vmul.f64	d4, d4, d7
 80052d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80052d6:	ee34 7b07 	vadd.f64	d7, d4, d7
 80052da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80052e2:	ee36 5b07 	vadd.f64	d5, d6, d7
 80052e6:	ed97 7b00 	vldr	d7, [r7]
 80052ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052ee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80052f2:	4bcf      	ldr	r3, [pc, #828]	; (8005630 <cinematicaInversa+0x1350>)
 80052f4:	ed93 7b00 	vldr	d7, [r3]
 80052f8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80052fc:	4bcd      	ldr	r3, [pc, #820]	; (8005634 <cinematicaInversa+0x1354>)
 80052fe:	ed93 7b00 	vldr	d7, [r3]
 8005302:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005306:	eeb0 0b47 	vmov.f64	d0, d7
 800530a:	f00b f9ad 	bl	8010668 <pow>
 800530e:	eeb0 9b40 	vmov.f64	d9, d0
 8005312:	4bc4      	ldr	r3, [pc, #784]	; (8005624 <cinematicaInversa+0x1344>)
 8005314:	ed93 7b00 	vldr	d7, [r3]
 8005318:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800531c:	eeb0 0b47 	vmov.f64	d0, d7
 8005320:	f00b f9a2 	bl	8010668 <pow>
 8005324:	eeb0 7b40 	vmov.f64	d7, d0
 8005328:	ee39 9b47 	vsub.f64	d9, d9, d7
 800532c:	4bbf      	ldr	r3, [pc, #764]	; (800562c <cinematicaInversa+0x134c>)
 800532e:	ed93 6b00 	vldr	d6, [r3]
 8005332:	4bbb      	ldr	r3, [pc, #748]	; (8005620 <cinematicaInversa+0x1340>)
 8005334:	ed93 7b00 	vldr	d7, [r3]
 8005338:	ee26 6b07 	vmul.f64	d6, d6, d7
 800533c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005340:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005344:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005348:	eeb0 0b47 	vmov.f64	d0, d7
 800534c:	f00b f98c 	bl	8010668 <pow>
 8005350:	eeb0 7b40 	vmov.f64	d7, d0
 8005354:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005358:	4bb4      	ldr	r3, [pc, #720]	; (800562c <cinematicaInversa+0x134c>)
 800535a:	ed93 6b00 	vldr	d6, [r3]
 800535e:	4bb2      	ldr	r3, [pc, #712]	; (8005628 <cinematicaInversa+0x1348>)
 8005360:	ed93 7b00 	vldr	d7, [r3]
 8005364:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005368:	ed97 7b02 	vldr	d7, [r7, #8]
 800536c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005370:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005374:	eeb0 0b47 	vmov.f64	d0, d7
 8005378:	f00b f976 	bl	8010668 <pow>
 800537c:	eeb0 7b40 	vmov.f64	d7, d0
 8005380:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005384:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005388:	ed97 0b00 	vldr	d0, [r7]
 800538c:	f00b f96c 	bl	8010668 <pow>
 8005390:	eeb0 7b40 	vmov.f64	d7, d0
 8005394:	ee39 9b07 	vadd.f64	d9, d9, d7
 8005398:	4ba7      	ldr	r3, [pc, #668]	; (8005638 <cinematicaInversa+0x1358>)
 800539a:	ed93 7b00 	vldr	d7, [r3]
 800539e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053a2:	eeb0 0b47 	vmov.f64	d0, d7
 80053a6:	f00b f95f 	bl	8010668 <pow>
 80053aa:	eeb0 7b40 	vmov.f64	d7, d0
 80053ae:	ee39 5b47 	vsub.f64	d5, d9, d7
 80053b2:	ed97 7b00 	vldr	d7, [r7]
 80053b6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80053ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80053be:	ee38 7b07 	vadd.f64	d7, d8, d7
 80053c2:	4b9e      	ldr	r3, [pc, #632]	; (800563c <cinematicaInversa+0x135c>)
 80053c4:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)) + ((pow((Pxaux + r * c150), 2.0) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 80053c8:	4b98      	ldr	r3, [pc, #608]	; (800562c <cinematicaInversa+0x134c>)
 80053ca:	ed93 6b00 	vldr	d6, [r3]
 80053ce:	4b9c      	ldr	r3, [pc, #624]	; (8005640 <cinematicaInversa+0x1360>)
 80053d0:	ed93 7b00 	vldr	d7, [r3]
 80053d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80053d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80053dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053e0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8005610 <cinematicaInversa+0x1330>
 80053e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80053e8:	4b90      	ldr	r3, [pc, #576]	; (800562c <cinematicaInversa+0x134c>)
 80053ea:	ed93 5b00 	vldr	d5, [r3]
 80053ee:	4b95      	ldr	r3, [pc, #596]	; (8005644 <cinematicaInversa+0x1364>)
 80053f0:	ed93 7b00 	vldr	d7, [r3]
 80053f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80053f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80053fc:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005400:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005404:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005408:	4b86      	ldr	r3, [pc, #536]	; (8005624 <cinematicaInversa+0x1344>)
 800540a:	ed93 7b00 	vldr	d7, [r3]
 800540e:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8005610 <cinematicaInversa+0x1330>
 8005412:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005416:	4b8a      	ldr	r3, [pc, #552]	; (8005640 <cinematicaInversa+0x1360>)
 8005418:	ed93 7b00 	vldr	d7, [r3]
 800541c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005420:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005424:	4b7f      	ldr	r3, [pc, #508]	; (8005624 <cinematicaInversa+0x1344>)
 8005426:	ed93 7b00 	vldr	d7, [r3]
 800542a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800542e:	4b85      	ldr	r3, [pc, #532]	; (8005644 <cinematicaInversa+0x1364>)
 8005430:	ed93 7b00 	vldr	d7, [r3]
 8005434:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005438:	ee36 5b07 	vadd.f64	d5, d6, d7
 800543c:	ed97 7b00 	vldr	d7, [r7]
 8005440:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005444:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005448:	4b7f      	ldr	r3, [pc, #508]	; (8005648 <cinematicaInversa+0x1368>)
 800544a:	ed93 7b00 	vldr	d7, [r3]
 800544e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005452:	4b76      	ldr	r3, [pc, #472]	; (800562c <cinematicaInversa+0x134c>)
 8005454:	ed93 6b00 	vldr	d6, [r3]
 8005458:	4b79      	ldr	r3, [pc, #484]	; (8005640 <cinematicaInversa+0x1360>)
 800545a:	ed93 7b00 	vldr	d7, [r3]
 800545e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005462:	ed97 7b04 	vldr	d7, [r7, #16]
 8005466:	ee36 7b07 	vadd.f64	d7, d6, d7
 800546a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800546e:	eeb0 0b47 	vmov.f64	d0, d7
 8005472:	f00b f8f9 	bl	8010668 <pow>
 8005476:	eeb0 9b40 	vmov.f64	d9, d0
 800547a:	4b6c      	ldr	r3, [pc, #432]	; (800562c <cinematicaInversa+0x134c>)
 800547c:	ed93 6b00 	vldr	d6, [r3]
 8005480:	4b70      	ldr	r3, [pc, #448]	; (8005644 <cinematicaInversa+0x1364>)
 8005482:	ed93 7b00 	vldr	d7, [r3]
 8005486:	ee26 6b07 	vmul.f64	d6, d6, d7
 800548a:	ed97 7b02 	vldr	d7, [r7, #8]
 800548e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005492:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005496:	eeb0 0b47 	vmov.f64	d0, d7
 800549a:	f00b f8e5 	bl	8010668 <pow>
 800549e:	eeb0 7b40 	vmov.f64	d7, d0
 80054a2:	ee39 9b07 	vadd.f64	d9, d9, d7
 80054a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054aa:	ed97 0b00 	vldr	d0, [r7]
 80054ae:	f00b f8db 	bl	8010668 <pow>
 80054b2:	eeb0 7b40 	vmov.f64	d7, d0
 80054b6:	ee39 9b07 	vadd.f64	d9, d9, d7
 80054ba:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <cinematicaInversa+0x1358>)
 80054bc:	ed93 7b00 	vldr	d7, [r3]
 80054c0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054c4:	eeb0 0b47 	vmov.f64	d0, d7
 80054c8:	f00b f8ce 	bl	8010668 <pow>
 80054cc:	eeb0 7b40 	vmov.f64	d7, d0
 80054d0:	ee39 9b47 	vsub.f64	d9, d9, d7
 80054d4:	4b53      	ldr	r3, [pc, #332]	; (8005624 <cinematicaInversa+0x1344>)
 80054d6:	ed93 7b00 	vldr	d7, [r3]
 80054da:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054de:	eeb0 0b47 	vmov.f64	d0, d7
 80054e2:	f00b f8c1 	bl	8010668 <pow>
 80054e6:	eeb0 7b40 	vmov.f64	d7, d0
 80054ea:	ee39 9b47 	vsub.f64	d9, d9, d7
 80054ee:	4b51      	ldr	r3, [pc, #324]	; (8005634 <cinematicaInversa+0x1354>)
 80054f0:	ed93 7b00 	vldr	d7, [r3]
 80054f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054f8:	eeb0 0b47 	vmov.f64	d0, d7
 80054fc:	f00b f8b4 	bl	8010668 <pow>
 8005500:	eeb0 7b40 	vmov.f64	d7, d0
 8005504:	ee39 5b07 	vadd.f64	d5, d9, d7
 8005508:	ed97 7b00 	vldr	d7, [r7]
 800550c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005510:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005514:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005518:	4b4c      	ldr	r3, [pc, #304]	; (800564c <cinematicaInversa+0x136c>)
 800551a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (Pxaux + r * c150) - 2.0 * (Pyaux + r * s150) - 2.0 * sqrt(3) * R * c150 + 2.0 * R * s150) / (2.0 * Pzaux)) + ((pow((Pxaux + r * c150), 2.0) + pow((Pyaux + r * s150), 2) + pow(Pzaux, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * Pzaux));
 800551e:	4b43      	ldr	r3, [pc, #268]	; (800562c <cinematicaInversa+0x134c>)
 8005520:	ed93 6b00 	vldr	d6, [r3]
 8005524:	4b46      	ldr	r3, [pc, #280]	; (8005640 <cinematicaInversa+0x1360>)
 8005526:	ed93 7b00 	vldr	d7, [r3]
 800552a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800552e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005532:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005536:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8005610 <cinematicaInversa+0x1330>
 800553a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800553e:	4b3b      	ldr	r3, [pc, #236]	; (800562c <cinematicaInversa+0x134c>)
 8005540:	ed93 5b00 	vldr	d5, [r3]
 8005544:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <cinematicaInversa+0x1364>)
 8005546:	ed93 7b00 	vldr	d7, [r3]
 800554a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800554e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005552:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005556:	ee37 7b07 	vadd.f64	d7, d7, d7
 800555a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800555e:	4b31      	ldr	r3, [pc, #196]	; (8005624 <cinematicaInversa+0x1344>)
 8005560:	ed93 7b00 	vldr	d7, [r3]
 8005564:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005610 <cinematicaInversa+0x1330>
 8005568:	ee27 5b05 	vmul.f64	d5, d7, d5
 800556c:	4b34      	ldr	r3, [pc, #208]	; (8005640 <cinematicaInversa+0x1360>)
 800556e:	ed93 7b00 	vldr	d7, [r3]
 8005572:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005576:	ee36 6b47 	vsub.f64	d6, d6, d7
 800557a:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <cinematicaInversa+0x1344>)
 800557c:	ed93 7b00 	vldr	d7, [r3]
 8005580:	ee37 5b07 	vadd.f64	d5, d7, d7
 8005584:	4b2f      	ldr	r3, [pc, #188]	; (8005644 <cinematicaInversa+0x1364>)
 8005586:	ed93 7b00 	vldr	d7, [r3]
 800558a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800558e:	ee36 5b07 	vadd.f64	d5, d6, d7
 8005592:	ed97 7b00 	vldr	d7, [r7]
 8005596:	ee37 7b07 	vadd.f64	d7, d7, d7
 800559a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800559e:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <cinematicaInversa+0x1370>)
 80055a0:	ed93 7b00 	vldr	d7, [r3]
 80055a4:	ee26 8b07 	vmul.f64	d8, d6, d7
 80055a8:	4b20      	ldr	r3, [pc, #128]	; (800562c <cinematicaInversa+0x134c>)
 80055aa:	ed93 6b00 	vldr	d6, [r3]
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <cinematicaInversa+0x1360>)
 80055b0:	ed93 7b00 	vldr	d7, [r3]
 80055b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80055b8:	ed97 7b04 	vldr	d7, [r7, #16]
 80055bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055c0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055c4:	eeb0 0b47 	vmov.f64	d0, d7
 80055c8:	f00b f84e 	bl	8010668 <pow>
 80055cc:	eeb0 9b40 	vmov.f64	d9, d0
 80055d0:	4b16      	ldr	r3, [pc, #88]	; (800562c <cinematicaInversa+0x134c>)
 80055d2:	ed93 6b00 	vldr	d6, [r3]
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <cinematicaInversa+0x1364>)
 80055d8:	ed93 7b00 	vldr	d7, [r3]
 80055dc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80055e0:	ed97 7b02 	vldr	d7, [r7, #8]
 80055e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055ec:	eeb0 0b47 	vmov.f64	d0, d7
 80055f0:	f00b f83a 	bl	8010668 <pow>
 80055f4:	eeb0 7b40 	vmov.f64	d7, d0
 80055f8:	ee39 9b07 	vadd.f64	d9, d9, d7
 80055fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005600:	ed97 0b00 	vldr	d0, [r7]
 8005604:	f00b f830 	bl	8010668 <pow>
 8005608:	e024      	b.n	8005654 <cinematicaInversa+0x1374>
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w
 8005610:	e8584caa 	.word	0xe8584caa
 8005614:	400bb67a 	.word	0x400bb67a
 8005618:	e8584caa 	.word	0xe8584caa
 800561c:	c00bb67a 	.word	0xc00bb67a
 8005620:	240000e0 	.word	0x240000e0
 8005624:	24000040 	.word	0x24000040
 8005628:	240000e8 	.word	0x240000e8
 800562c:	24000048 	.word	0x24000048
 8005630:	24000768 	.word	0x24000768
 8005634:	24000030 	.word	0x24000030
 8005638:	24000038 	.word	0x24000038
 800563c:	24000b08 	.word	0x24000b08
 8005640:	240000f0 	.word	0x240000f0
 8005644:	240000f8 	.word	0x240000f8
 8005648:	24000830 	.word	0x24000830
 800564c:	240008f0 	.word	0x240008f0
 8005650:	240009f0 	.word	0x240009f0
 8005654:	eeb0 7b40 	vmov.f64	d7, d0
 8005658:	ee39 9b07 	vadd.f64	d9, d9, d7
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <cinematicaInversa+0x14c0>)
 800565e:	ed93 7b00 	vldr	d7, [r3]
 8005662:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005666:	eeb0 0b47 	vmov.f64	d0, d7
 800566a:	f00a fffd 	bl	8010668 <pow>
 800566e:	eeb0 7b40 	vmov.f64	d7, d0
 8005672:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005676:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <cinematicaInversa+0x14c4>)
 8005678:	ed93 7b00 	vldr	d7, [r3]
 800567c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005680:	eeb0 0b47 	vmov.f64	d0, d7
 8005684:	f00a fff0 	bl	8010668 <pow>
 8005688:	eeb0 7b40 	vmov.f64	d7, d0
 800568c:	ee39 9b47 	vsub.f64	d9, d9, d7
 8005690:	4b45      	ldr	r3, [pc, #276]	; (80057a8 <cinematicaInversa+0x14c8>)
 8005692:	ed93 7b00 	vldr	d7, [r3]
 8005696:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800569a:	eeb0 0b47 	vmov.f64	d0, d7
 800569e:	f00a ffe3 	bl	8010668 <pow>
 80056a2:	eeb0 7b40 	vmov.f64	d7, d0
 80056a6:	ee39 5b07 	vadd.f64	d5, d9, d7
 80056aa:	ed97 7b00 	vldr	d7, [r7]
 80056ae:	ee37 6b07 	vadd.f64	d6, d7, d7
 80056b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80056b6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80056ba:	4b3c      	ldr	r3, [pc, #240]	; (80057ac <cinematicaInversa+0x14cc>)
 80056bc:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 80056c0:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <cinematicaInversa+0x14d0>)
 80056c2:	ed93 6b00 	vldr	d6, [r3]
 80056c6:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <cinematicaInversa+0x14c8>)
 80056c8:	ed93 7b00 	vldr	d7, [r3]
 80056cc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80056d0:	eeb0 0b45 	vmov.f64	d0, d5
 80056d4:	f00a ff78 	bl	80105c8 <asin>
 80056d8:	eeb0 7b40 	vmov.f64	d7, d0
 80056dc:	eeb1 7b47 	vneg.f64	d7, d7
 80056e0:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <cinematicaInversa+0x14d4>)
 80056e2:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * (180.0 / pi);
 80056e6:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <cinematicaInversa+0x14d8>)
 80056e8:	ed93 7b00 	vldr	d7, [r3]
 80056ec:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005798 <cinematicaInversa+0x14b8>
 80056f0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80056f4:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <cinematicaInversa+0x14d4>)
 80056f6:	ed93 7b00 	vldr	d7, [r3]
 80056fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80056fe:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <cinematicaInversa+0x14d4>)
 8005700:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <cinematicaInversa+0x14dc>)
 8005706:	ed93 6b00 	vldr	d6, [r3]
 800570a:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <cinematicaInversa+0x14c8>)
 800570c:	ed93 7b00 	vldr	d7, [r3]
 8005710:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005714:	eeb0 0b45 	vmov.f64	d0, d5
 8005718:	f00a ff56 	bl	80105c8 <asin>
 800571c:	eeb0 7b40 	vmov.f64	d7, d0
 8005720:	eeb1 7b47 	vneg.f64	d7, d7
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <cinematicaInversa+0x14e0>)
 8005726:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * (180.0 / pi);
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <cinematicaInversa+0x14d8>)
 800572c:	ed93 7b00 	vldr	d7, [r3]
 8005730:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8005798 <cinematicaInversa+0x14b8>
 8005734:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <cinematicaInversa+0x14e0>)
 800573a:	ed93 7b00 	vldr	d7, [r3]
 800573e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005742:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <cinematicaInversa+0x14e0>)
 8005744:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <cinematicaInversa+0x14e4>)
 800574a:	ed93 6b00 	vldr	d6, [r3]
 800574e:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <cinematicaInversa+0x14c8>)
 8005750:	ed93 7b00 	vldr	d7, [r3]
 8005754:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005758:	eeb0 0b45 	vmov.f64	d0, d5
 800575c:	f00a ff34 	bl	80105c8 <asin>
 8005760:	eeb0 7b40 	vmov.f64	d7, d0
 8005764:	eeb1 7b47 	vneg.f64	d7, d7
 8005768:	4b17      	ldr	r3, [pc, #92]	; (80057c8 <cinematicaInversa+0x14e8>)
 800576a:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * (180.0 / pi);
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <cinematicaInversa+0x14d8>)
 8005770:	ed93 7b00 	vldr	d7, [r3]
 8005774:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8005798 <cinematicaInversa+0x14b8>
 8005778:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800577c:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <cinematicaInversa+0x14e8>)
 800577e:	ed93 7b00 	vldr	d7, [r3]
 8005782:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <cinematicaInversa+0x14e8>)
 8005788:	ed83 7b00 	vstr	d7, [r3]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	ecbd 8b06 	vpop	{d8-d10}
 8005796:	bd90      	pop	{r4, r7, pc}
 8005798:	00000000 	.word	0x00000000
 800579c:	40668000 	.word	0x40668000
 80057a0:	24000038 	.word	0x24000038
 80057a4:	24000040 	.word	0x24000040
 80057a8:	24000030 	.word	0x24000030
 80057ac:	24000758 	.word	0x24000758
 80057b0:	24000900 	.word	0x24000900
 80057b4:	24000450 	.word	0x24000450
 80057b8:	24000100 	.word	0x24000100
 80057bc:	24000a00 	.word	0x24000a00
 80057c0:	240004b8 	.word	0x240004b8
 80057c4:	240008f0 	.word	0x240008f0
 80057c8:	240003c0 	.word	0x240003c0

080057cc <transpuesta>:

array2D transpuesta(double Maux[3][3]) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b096      	sub	sp, #88	; 0x58
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 80057d6:	2300      	movs	r3, #0
 80057d8:	657b      	str	r3, [r7, #84]	; 0x54
 80057da:	e025      	b.n	8005828 <transpuesta+0x5c>
		for (int j = 0; j < 3; ++j) {
 80057dc:	2300      	movs	r3, #0
 80057de:	653b      	str	r3, [r7, #80]	; 0x50
 80057e0:	e01c      	b.n	800581c <transpuesta+0x50>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 80057e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057e4:	4613      	mov	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	461a      	mov	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	441a      	add	r2, r3
 80057f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80057fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80057fe:	4603      	mov	r3, r0
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4403      	add	r3, r0
 8005804:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005806:	4403      	add	r3, r0
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800580e:	4403      	add	r3, r0
 8005810:	3b50      	subs	r3, #80	; 0x50
 8005812:	e9c3 1200 	strd	r1, r2, [r3]
		for (int j = 0; j < 3; ++j) {
 8005816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005818:	3301      	adds	r3, #1
 800581a:	653b      	str	r3, [r7, #80]	; 0x50
 800581c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581e:	2b02      	cmp	r3, #2
 8005820:	dddf      	ble.n	80057e2 <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8005822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005824:	3301      	adds	r3, #1
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
 8005828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582a:	2b02      	cmp	r3, #2
 800582c:	ddd6      	ble.n	80057dc <transpuesta+0x10>
		}
	}
	return MTaux;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f107 0308 	add.w	r3, r7, #8
 8005836:	2248      	movs	r2, #72	; 0x48
 8005838:	4619      	mov	r1, r3
 800583a:	f009 f8dd 	bl	800e9f8 <memcpy>
}
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	3758      	adds	r7, #88	; 0x58
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <productDot>:

double productDot(double VectA[], double VectB[]) {
 8005846:	b490      	push	{r4, r7}
 8005848:	b086      	sub	sp, #24
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	f04f 0400 	mov.w	r4, #0
 8005858:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e016      	b.n	8005890 <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	ed93 6b00 	vldr	d6, [r3]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	4413      	add	r3, r2
 8005876:	ed93 7b00 	vldr	d7, [r3]
 800587a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800587e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005882:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005886:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b02      	cmp	r3, #2
 8005894:	dde5      	ble.n	8005862 <productDot+0x1c>
	}
	return dotaux;
 8005896:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800589a:	ec44 3b17 	vmov	d7, r3, r4
}
 800589e:	eeb0 0b47 	vmov.f64	d0, d7
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc90      	pop	{r4, r7}
 80058a8:	4770      	bx	lr

080058aa <determinante>:

double determinante(double Maux[3][3]) {
 80058aa:	b490      	push	{r4, r7}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	ed93 6b00 	vldr	d6, [r3]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3318      	adds	r3, #24
 80058bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80058c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3330      	adds	r3, #48	; 0x30
 80058c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80058cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80058d0:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 80058d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80058d8:	ec44 3b17 	vmov	d7, r3, r4
}
 80058dc:	eeb0 0b47 	vmov.f64	d0, d7
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc90      	pop	{r4, r7}
 80058e6:	4770      	bx	lr

080058e8 <adjunta>:

array2D adjunta(double Maux[3][3]) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b094      	sub	sp, #80	; 0x50
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	3318      	adds	r3, #24
 80058f6:	ed93 6b02 	vldr	d6, [r3, #8]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	3330      	adds	r3, #48	; 0x30
 80058fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8005902:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	3330      	adds	r3, #48	; 0x30
 800590a:	ed93 5b02 	vldr	d5, [r3, #8]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	3318      	adds	r3, #24
 8005912:	ed93 7b04 	vldr	d7, [r3, #16]
 8005916:	ee25 7b07 	vmul.f64	d7, d5, d7
 800591a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800591e:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	3318      	adds	r3, #24
 8005926:	ed93 6b00 	vldr	d6, [r3]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	3330      	adds	r3, #48	; 0x30
 800592e:	ed93 7b04 	vldr	d7, [r3, #16]
 8005932:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	3330      	adds	r3, #48	; 0x30
 800593a:	ed93 5b00 	vldr	d5, [r3]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	3318      	adds	r3, #24
 8005942:	ed93 7b04 	vldr	d7, [r3, #16]
 8005946:	ee25 7b07 	vmul.f64	d7, d5, d7
 800594a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800594e:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	3318      	adds	r3, #24
 8005956:	ed93 6b00 	vldr	d6, [r3]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3330      	adds	r3, #48	; 0x30
 800595e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005962:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	3330      	adds	r3, #48	; 0x30
 800596a:	ed93 5b00 	vldr	d5, [r3]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	3318      	adds	r3, #24
 8005972:	ed93 7b02 	vldr	d7, [r3, #8]
 8005976:	ee25 7b07 	vmul.f64	d7, d5, d7
 800597a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800597e:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	ed93 6b02 	vldr	d6, [r3, #8]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	3330      	adds	r3, #48	; 0x30
 800598c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005990:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	3330      	adds	r3, #48	; 0x30
 8005998:	ed93 5b02 	vldr	d5, [r3, #8]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	ed93 7b04 	vldr	d7, [r3, #16]
 80059a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80059a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059aa:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	ed93 6b00 	vldr	d6, [r3]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	3330      	adds	r3, #48	; 0x30
 80059b8:	ed93 7b04 	vldr	d7, [r3, #16]
 80059bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	3330      	adds	r3, #48	; 0x30
 80059c4:	ed93 5b00 	vldr	d5, [r3]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	ed93 7b04 	vldr	d7, [r3, #16]
 80059ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80059d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059d6:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	ed93 6b00 	vldr	d6, [r3]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	3330      	adds	r3, #48	; 0x30
 80059e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80059e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	3330      	adds	r3, #48	; 0x30
 80059f0:	ed93 5b00 	vldr	d5, [r3]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80059fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80059fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a02:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	ed93 6b02 	vldr	d6, [r3, #8]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	3318      	adds	r3, #24
 8005a10:	ed93 7b04 	vldr	d7, [r3, #16]
 8005a14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	ed93 5b02 	vldr	d5, [r3, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	ed93 7b04 	vldr	d7, [r3, #16]
 8005a26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a2e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	ed93 6b00 	vldr	d6, [r3]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005a40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	3318      	adds	r3, #24
 8005a48:	ed93 5b00 	vldr	d5, [r3]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	ed93 7b04 	vldr	d7, [r3, #16]
 8005a52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a5a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	ed93 6b00 	vldr	d6, [r3]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3318      	adds	r3, #24
 8005a68:	ed93 7b02 	vldr	d7, [r3, #8]
 8005a6c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	3318      	adds	r3, #24
 8005a74:	ed93 5b00 	vldr	d5, [r3]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	ed93 7b02 	vldr	d7, [r3, #8]
 8005a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a86:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f107 0308 	add.w	r3, r7, #8
 8005a92:	2248      	movs	r2, #72	; 0x48
 8005a94:	4619      	mov	r1, r3
 8005a96:	f008 ffaf 	bl	800e9f8 <memcpy>
}
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	3750      	adds	r7, #80	; 0x50
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <inversa>:

array2D inversa(double A[3][3]) {
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b0bc      	sub	sp, #240	; 0xf0
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005aaa:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8005aac:	463b      	mov	r3, r7
 8005aae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ff19 	bl	80058e8 <adjunta>
 8005ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005aba:	4639      	mov	r1, r7
 8005abc:	2248      	movs	r2, #72	; 0x48
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f008 ff9a 	bl	800e9f8 <memcpy>
	Maux = transpuesta(Maux.m);
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fe7d 	bl	80057cc <transpuesta>
 8005ad2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	2248      	movs	r2, #72	; 0x48
 8005ada:	4618      	mov	r0, r3
 8005adc:	f008 ff8c 	bl	800e9f8 <memcpy>
	det = determinante(A);
 8005ae0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005ae2:	f7ff fee2 	bl	80058aa <determinante>
 8005ae6:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005af0:	e037      	b.n	8005b62 <inversa+0xc0>
		for (int j = 0; j < 3; ++j) {
 8005af2:	2300      	movs	r3, #0
 8005af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005af8:	e02a      	b.n	8005b50 <inversa+0xae>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8005afa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8005afe:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8005b02:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005b06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005b14:	4413      	add	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3ba0      	subs	r3, #160	; 0xa0
 8005b20:	ed93 7b00 	vldr	d7, [r3]
 8005b24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b28:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005b36:	4413      	add	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005b3e:	4413      	add	r3, r2
 8005b40:	3b58      	subs	r3, #88	; 0x58
 8005b42:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8005b46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	ddd0      	ble.n	8005afa <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8005b58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	ddc3      	ble.n	8005af2 <inversa+0x50>
		}
	}
	return Minv;
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005b72:	2248      	movs	r2, #72	; 0x48
 8005b74:	4619      	mov	r1, r3
 8005b76:	f008 ff3f 	bl	800e9f8 <memcpy>
}
 8005b7a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005b7c:	37f0      	adds	r7, #240	; 0xf0
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8005b82:	b590      	push	{r4, r7, lr}
 8005b84:	b09d      	sub	sp, #116	; 0x74
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8005b8e:	2300      	movs	r3, #0
 8005b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b92:	e04c      	b.n	8005c2e <productMatriz+0xac>
		for (int i = 0; i < 3; ++i) {
 8005b94:	2300      	movs	r3, #0
 8005b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b98:	e043      	b.n	8005c22 <productMatriz+0xa0>
			double suma = 0;
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	f04f 0400 	mov.w	r4, #0
 8005ba2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005baa:	e024      	b.n	8005bf6 <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8005bac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bae:	4613      	mov	r3, r2
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4413      	add	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	441a      	add	r2, r3
 8005bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	ed93 6b00 	vldr	d6, [r3]
 8005bc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	ed93 7b00 	vldr	d7, [r3]
 8005be0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005be4:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8005be8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005bec:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8005bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	ddd7      	ble.n	8005bac <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8005bfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bfe:	4613      	mov	r3, r2
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	4413      	add	r3, r2
 8005c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c06:	4413      	add	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005c0e:	4413      	add	r3, r2
 8005c10:	f1a3 0260 	sub.w	r2, r3, #96	; 0x60
 8005c14:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005c18:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < 3; ++i) {
 8005c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c1e:	3301      	adds	r3, #1
 8005c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	ddb8      	ble.n	8005b9a <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8005c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	ddaf      	ble.n	8005b94 <productMatriz+0x12>
		}
	}
	return producto;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f107 0310 	add.w	r3, r7, #16
 8005c3c:	2248      	movs	r2, #72	; 0x48
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f008 feda 	bl	800e9f8 <memcpy>
}
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	3774      	adds	r7, #116	; 0x74
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd90      	pop	{r4, r7, pc}
 8005c4c:	0000      	movs	r0, r0
	...

08005c50 <jacobianoInverso>:

void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8005c50:	b590      	push	{r4, r7, lr}
 8005c52:	b0ad      	sub	sp, #180	; 0xb4
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8005c5a:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8005c5e:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8005c62:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8005c66:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8005c6a:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8005c6e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005c72:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005c76:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005c7a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8005c7e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005c82:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8005c86:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005c8a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8005f98 <jacobianoInverso+0x348>
 8005c8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c92:	4bc9      	ldr	r3, [pc, #804]	; (8005fb8 <jacobianoInverso+0x368>)
 8005c94:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8005c98:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005c9c:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8005fa0 <jacobianoInverso+0x350>
 8005ca0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ca4:	4bc4      	ldr	r3, [pc, #784]	; (8005fb8 <jacobianoInverso+0x368>)
 8005ca6:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8005caa:	4ac3      	ldr	r2, [pc, #780]	; (8005fb8 <jacobianoInverso+0x368>)
 8005cac:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005cb0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	E2[0] = Pxaux + 0.060621778264911;
 8005cb4:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005cb8:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8005fa8 <jacobianoInverso+0x358>
 8005cbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cc0:	4bbe      	ldr	r3, [pc, #760]	; (8005fbc <jacobianoInverso+0x36c>)
 8005cc2:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8005cc6:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005cca:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8005fb0 <jacobianoInverso+0x360>
 8005cce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cd2:	4bba      	ldr	r3, [pc, #744]	; (8005fbc <jacobianoInverso+0x36c>)
 8005cd4:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8005cd8:	4ab8      	ldr	r2, [pc, #736]	; (8005fbc <jacobianoInverso+0x36c>)
 8005cda:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005cde:	e9c2 3404 	strd	r3, r4, [r2, #16]
	E3[0] = Pxaux - 0.060621778264911;
 8005ce2:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005ce6:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8005fa8 <jacobianoInverso+0x358>
 8005cea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cee:	4bb4      	ldr	r3, [pc, #720]	; (8005fc0 <jacobianoInverso+0x370>)
 8005cf0:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8005cf4:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005cf8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005fb0 <jacobianoInverso+0x360>
 8005cfc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d00:	4baf      	ldr	r3, [pc, #700]	; (8005fc0 <jacobianoInverso+0x370>)
 8005d02:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8005d06:	4aae      	ldr	r2, [pc, #696]	; (8005fc0 <jacobianoInverso+0x370>)
 8005d08:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005d0c:	e9c2 3404 	strd	r3, r4, [r2, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8005d10:	4bac      	ldr	r3, [pc, #688]	; (8005fc4 <jacobianoInverso+0x374>)
 8005d12:	ed93 6b00 	vldr	d6, [r3]
 8005d16:	4bac      	ldr	r3, [pc, #688]	; (8005fc8 <jacobianoInverso+0x378>)
 8005d18:	ed93 7b00 	vldr	d7, [r3]
 8005d1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d20:	4baa      	ldr	r3, [pc, #680]	; (8005fcc <jacobianoInverso+0x37c>)
 8005d22:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8005d26:	4baa      	ldr	r3, [pc, #680]	; (8005fd0 <jacobianoInverso+0x380>)
 8005d28:	ed93 6b00 	vldr	d6, [r3]
 8005d2c:	4ba6      	ldr	r3, [pc, #664]	; (8005fc8 <jacobianoInverso+0x378>)
 8005d2e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d36:	4ba5      	ldr	r3, [pc, #660]	; (8005fcc <jacobianoInverso+0x37c>)
 8005d38:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8005d3c:	4ba5      	ldr	r3, [pc, #660]	; (8005fd4 <jacobianoInverso+0x384>)
 8005d3e:	ed93 6b00 	vldr	d6, [r3]
 8005d42:	4ba1      	ldr	r3, [pc, #644]	; (8005fc8 <jacobianoInverso+0x378>)
 8005d44:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d4c:	4b9f      	ldr	r3, [pc, #636]	; (8005fcc <jacobianoInverso+0x37c>)
 8005d4e:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8005d52:	4ba1      	ldr	r3, [pc, #644]	; (8005fd8 <jacobianoInverso+0x388>)
 8005d54:	ed93 6b00 	vldr	d6, [r3]
 8005d58:	4ba0      	ldr	r3, [pc, #640]	; (8005fdc <jacobianoInverso+0x38c>)
 8005d5a:	ed93 7b00 	vldr	d7, [r3]
 8005d5e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d62:	4b9a      	ldr	r3, [pc, #616]	; (8005fcc <jacobianoInverso+0x37c>)
 8005d64:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8005d68:	4b9d      	ldr	r3, [pc, #628]	; (8005fe0 <jacobianoInverso+0x390>)
 8005d6a:	ed93 6b00 	vldr	d6, [r3]
 8005d6e:	4b9b      	ldr	r3, [pc, #620]	; (8005fdc <jacobianoInverso+0x38c>)
 8005d70:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d78:	4b94      	ldr	r3, [pc, #592]	; (8005fcc <jacobianoInverso+0x37c>)
 8005d7a:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8005d7e:	4b99      	ldr	r3, [pc, #612]	; (8005fe4 <jacobianoInverso+0x394>)
 8005d80:	ed93 6b00 	vldr	d6, [r3]
 8005d84:	4b95      	ldr	r3, [pc, #596]	; (8005fdc <jacobianoInverso+0x38c>)
 8005d86:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d8e:	4b8f      	ldr	r3, [pc, #572]	; (8005fcc <jacobianoInverso+0x37c>)
 8005d90:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8005d94:	4b94      	ldr	r3, [pc, #592]	; (8005fe8 <jacobianoInverso+0x398>)
 8005d96:	ed93 6b00 	vldr	d6, [r3]
 8005d9a:	4b94      	ldr	r3, [pc, #592]	; (8005fec <jacobianoInverso+0x39c>)
 8005d9c:	ed93 7b00 	vldr	d7, [r3]
 8005da0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005da4:	4b89      	ldr	r3, [pc, #548]	; (8005fcc <jacobianoInverso+0x37c>)
 8005da6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8005daa:	4b91      	ldr	r3, [pc, #580]	; (8005ff0 <jacobianoInverso+0x3a0>)
 8005dac:	ed93 6b00 	vldr	d6, [r3]
 8005db0:	4b8e      	ldr	r3, [pc, #568]	; (8005fec <jacobianoInverso+0x39c>)
 8005db2:	ed93 7b02 	vldr	d7, [r3, #8]
 8005db6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dba:	4b84      	ldr	r3, [pc, #528]	; (8005fcc <jacobianoInverso+0x37c>)
 8005dbc:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8005dc0:	4b8c      	ldr	r3, [pc, #560]	; (8005ff4 <jacobianoInverso+0x3a4>)
 8005dc2:	ed93 6b00 	vldr	d6, [r3]
 8005dc6:	4b89      	ldr	r3, [pc, #548]	; (8005fec <jacobianoInverso+0x39c>)
 8005dc8:	ed93 7b04 	vldr	d7, [r3, #16]
 8005dcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dd0:	4b7e      	ldr	r3, [pc, #504]	; (8005fcc <jacobianoInverso+0x37c>)
 8005dd2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 8005dd6:	4b78      	ldr	r3, [pc, #480]	; (8005fb8 <jacobianoInverso+0x368>)
 8005dd8:	ed93 6b00 	vldr	d6, [r3]
 8005ddc:	4b79      	ldr	r3, [pc, #484]	; (8005fc4 <jacobianoInverso+0x374>)
 8005dde:	ed93 7b00 	vldr	d7, [r3]
 8005de2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005de6:	4b84      	ldr	r3, [pc, #528]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005de8:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8005dec:	4b72      	ldr	r3, [pc, #456]	; (8005fb8 <jacobianoInverso+0x368>)
 8005dee:	ed93 6b02 	vldr	d6, [r3, #8]
 8005df2:	4b77      	ldr	r3, [pc, #476]	; (8005fd0 <jacobianoInverso+0x380>)
 8005df4:	ed93 7b00 	vldr	d7, [r3]
 8005df8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dfc:	4b7e      	ldr	r3, [pc, #504]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005dfe:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 8005e02:	4b6d      	ldr	r3, [pc, #436]	; (8005fb8 <jacobianoInverso+0x368>)
 8005e04:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e08:	4b72      	ldr	r3, [pc, #456]	; (8005fd4 <jacobianoInverso+0x384>)
 8005e0a:	ed93 7b00 	vldr	d7, [r3]
 8005e0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e12:	4b79      	ldr	r3, [pc, #484]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005e14:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8005e18:	4b68      	ldr	r3, [pc, #416]	; (8005fbc <jacobianoInverso+0x36c>)
 8005e1a:	ed93 6b00 	vldr	d6, [r3]
 8005e1e:	4b6e      	ldr	r3, [pc, #440]	; (8005fd8 <jacobianoInverso+0x388>)
 8005e20:	ed93 7b00 	vldr	d7, [r3]
 8005e24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e28:	4b73      	ldr	r3, [pc, #460]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005e2a:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8005e2e:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <jacobianoInverso+0x36c>)
 8005e30:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e34:	4b6a      	ldr	r3, [pc, #424]	; (8005fe0 <jacobianoInverso+0x390>)
 8005e36:	ed93 7b00 	vldr	d7, [r3]
 8005e3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e3e:	4b6e      	ldr	r3, [pc, #440]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005e40:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 8005e44:	4b5d      	ldr	r3, [pc, #372]	; (8005fbc <jacobianoInverso+0x36c>)
 8005e46:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e4a:	4b66      	ldr	r3, [pc, #408]	; (8005fe4 <jacobianoInverso+0x394>)
 8005e4c:	ed93 7b00 	vldr	d7, [r3]
 8005e50:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e54:	4b68      	ldr	r3, [pc, #416]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005e56:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8005e5a:	4b59      	ldr	r3, [pc, #356]	; (8005fc0 <jacobianoInverso+0x370>)
 8005e5c:	ed93 6b00 	vldr	d6, [r3]
 8005e60:	4b61      	ldr	r3, [pc, #388]	; (8005fe8 <jacobianoInverso+0x398>)
 8005e62:	ed93 7b00 	vldr	d7, [r3]
 8005e66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e6a:	4b63      	ldr	r3, [pc, #396]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005e6c:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8005e70:	4b53      	ldr	r3, [pc, #332]	; (8005fc0 <jacobianoInverso+0x370>)
 8005e72:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e76:	4b5e      	ldr	r3, [pc, #376]	; (8005ff0 <jacobianoInverso+0x3a0>)
 8005e78:	ed93 7b00 	vldr	d7, [r3]
 8005e7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e80:	4b5d      	ldr	r3, [pc, #372]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005e82:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 8005e86:	4b4e      	ldr	r3, [pc, #312]	; (8005fc0 <jacobianoInverso+0x370>)
 8005e88:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e8c:	4b59      	ldr	r3, [pc, #356]	; (8005ff4 <jacobianoInverso+0x3a4>)
 8005e8e:	ed93 7b00 	vldr	d7, [r3]
 8005e92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e96:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005e98:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8005e9c:	4c57      	ldr	r4, [pc, #348]	; (8005ffc <jacobianoInverso+0x3ac>)
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	4955      	ldr	r1, [pc, #340]	; (8005ff8 <jacobianoInverso+0x3a8>)
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fc92 	bl	80057cc <transpuesta>
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	463b      	mov	r3, r7
 8005eac:	2248      	movs	r2, #72	; 0x48
 8005eae:	4619      	mov	r1, r3
 8005eb0:	f008 fda2 	bl	800e9f8 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8005eb4:	4b52      	ldr	r3, [pc, #328]	; (8006000 <jacobianoInverso+0x3b0>)
 8005eb6:	ed93 6b02 	vldr	d6, [r3, #8]
 8005eba:	4b44      	ldr	r3, [pc, #272]	; (8005fcc <jacobianoInverso+0x37c>)
 8005ebc:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ec0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ec4:	4b4e      	ldr	r3, [pc, #312]	; (8006000 <jacobianoInverso+0x3b0>)
 8005ec6:	ed93 5b04 	vldr	d5, [r3, #16]
 8005eca:	4b40      	ldr	r3, [pc, #256]	; (8005fcc <jacobianoInverso+0x37c>)
 8005ecc:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ed0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ed4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ed8:	4b4a      	ldr	r3, [pc, #296]	; (8006004 <jacobianoInverso+0x3b4>)
 8005eda:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8005ede:	4b48      	ldr	r3, [pc, #288]	; (8006000 <jacobianoInverso+0x3b0>)
 8005ee0:	ed93 6b04 	vldr	d6, [r3, #16]
 8005ee4:	4b39      	ldr	r3, [pc, #228]	; (8005fcc <jacobianoInverso+0x37c>)
 8005ee6:	ed93 7b00 	vldr	d7, [r3]
 8005eea:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005eee:	4b44      	ldr	r3, [pc, #272]	; (8006000 <jacobianoInverso+0x3b0>)
 8005ef0:	ed93 5b00 	vldr	d5, [r3]
 8005ef4:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <jacobianoInverso+0x37c>)
 8005ef6:	ed93 7b04 	vldr	d7, [r3, #16]
 8005efa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005efe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f02:	4b40      	ldr	r3, [pc, #256]	; (8006004 <jacobianoInverso+0x3b4>)
 8005f04:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8005f08:	4b3d      	ldr	r3, [pc, #244]	; (8006000 <jacobianoInverso+0x3b0>)
 8005f0a:	ed93 6b00 	vldr	d6, [r3]
 8005f0e:	4b2f      	ldr	r3, [pc, #188]	; (8005fcc <jacobianoInverso+0x37c>)
 8005f10:	ed93 7b02 	vldr	d7, [r3, #8]
 8005f14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f18:	4b39      	ldr	r3, [pc, #228]	; (8006000 <jacobianoInverso+0x3b0>)
 8005f1a:	ed93 5b02 	vldr	d5, [r3, #8]
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <jacobianoInverso+0x37c>)
 8005f20:	ed93 7b00 	vldr	d7, [r3]
 8005f24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f2c:	4b35      	ldr	r3, [pc, #212]	; (8006004 <jacobianoInverso+0x3b4>)
 8005f2e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 8005f32:	4b35      	ldr	r3, [pc, #212]	; (8006008 <jacobianoInverso+0x3b8>)
 8005f34:	ed93 6b02 	vldr	d6, [r3, #8]
 8005f38:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <jacobianoInverso+0x37c>)
 8005f3a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005f3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f42:	4b31      	ldr	r3, [pc, #196]	; (8006008 <jacobianoInverso+0x3b8>)
 8005f44:	ed93 5b04 	vldr	d5, [r3, #16]
 8005f48:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <jacobianoInverso+0x37c>)
 8005f4a:	ed93 7b08 	vldr	d7, [r3, #32]
 8005f4e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f56:	4b2d      	ldr	r3, [pc, #180]	; (800600c <jacobianoInverso+0x3bc>)
 8005f58:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8005f5c:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <jacobianoInverso+0x3b8>)
 8005f5e:	ed93 6b04 	vldr	d6, [r3, #16]
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <jacobianoInverso+0x37c>)
 8005f64:	ed93 7b06 	vldr	d7, [r3, #24]
 8005f68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f6c:	4b26      	ldr	r3, [pc, #152]	; (8006008 <jacobianoInverso+0x3b8>)
 8005f6e:	ed93 5b00 	vldr	d5, [r3]
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <jacobianoInverso+0x37c>)
 8005f74:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005f78:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f80:	4b22      	ldr	r3, [pc, #136]	; (800600c <jacobianoInverso+0x3bc>)
 8005f82:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 8005f86:	4b20      	ldr	r3, [pc, #128]	; (8006008 <jacobianoInverso+0x3b8>)
 8005f88:	ed93 6b00 	vldr	d6, [r3]
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <jacobianoInverso+0x37c>)
 8005f8e:	ed93 7b08 	vldr	d7, [r3, #32]
 8005f92:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f96:	e03b      	b.n	8006010 <jacobianoInverso+0x3c0>
	...
 8005fa0:	1eb851ec 	.word	0x1eb851ec
 8005fa4:	3fb1eb85 	.word	0x3fb1eb85
 8005fa8:	562574c0 	.word	0x562574c0
 8005fac:	3faf09d1 	.word	0x3faf09d1
 8005fb0:	1eb851ec 	.word	0x1eb851ec
 8005fb4:	3fa1eb85 	.word	0x3fa1eb85
 8005fb8:	24000a20 	.word	0x24000a20
 8005fbc:	240008c8 	.word	0x240008c8
 8005fc0:	24000bd8 	.word	0x24000bd8
 8005fc4:	24000770 	.word	0x24000770
 8005fc8:	24000050 	.word	0x24000050
 8005fcc:	24000a68 	.word	0x24000a68
 8005fd0:	240007c8 	.word	0x240007c8
 8005fd4:	24000900 	.word	0x24000900
 8005fd8:	240007b8 	.word	0x240007b8
 8005fdc:	24000068 	.word	0x24000068
 8005fe0:	240009e8 	.word	0x240009e8
 8005fe4:	24000a00 	.word	0x24000a00
 8005fe8:	240008b0 	.word	0x240008b0
 8005fec:	24000080 	.word	0x24000080
 8005ff0:	24000830 	.word	0x24000830
 8005ff4:	240008f0 	.word	0x240008f0
 8005ff8:	24000908 	.word	0x24000908
 8005ffc:	24000848 	.word	0x24000848
 8006000:	24000098 	.word	0x24000098
 8006004:	24000778 	.word	0x24000778
 8006008:	240000b0 	.word	0x240000b0
 800600c:	240009a8 	.word	0x240009a8
 8006010:	4b93      	ldr	r3, [pc, #588]	; (8006260 <jacobianoInverso+0x610>)
 8006012:	ed93 5b02 	vldr	d5, [r3, #8]
 8006016:	4b93      	ldr	r3, [pc, #588]	; (8006264 <jacobianoInverso+0x614>)
 8006018:	ed93 7b06 	vldr	d7, [r3, #24]
 800601c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006020:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006024:	4b90      	ldr	r3, [pc, #576]	; (8006268 <jacobianoInverso+0x618>)
 8006026:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 800602a:	4b90      	ldr	r3, [pc, #576]	; (800626c <jacobianoInverso+0x61c>)
 800602c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006030:	4b8c      	ldr	r3, [pc, #560]	; (8006264 <jacobianoInverso+0x614>)
 8006032:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006036:	ee26 6b07 	vmul.f64	d6, d6, d7
 800603a:	4b8c      	ldr	r3, [pc, #560]	; (800626c <jacobianoInverso+0x61c>)
 800603c:	ed93 5b04 	vldr	d5, [r3, #16]
 8006040:	4b88      	ldr	r3, [pc, #544]	; (8006264 <jacobianoInverso+0x614>)
 8006042:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8006046:	ee25 7b07 	vmul.f64	d7, d5, d7
 800604a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800604e:	4b88      	ldr	r3, [pc, #544]	; (8006270 <jacobianoInverso+0x620>)
 8006050:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 8006054:	4b85      	ldr	r3, [pc, #532]	; (800626c <jacobianoInverso+0x61c>)
 8006056:	ed93 6b04 	vldr	d6, [r3, #16]
 800605a:	4b82      	ldr	r3, [pc, #520]	; (8006264 <jacobianoInverso+0x614>)
 800605c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006060:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006064:	4b81      	ldr	r3, [pc, #516]	; (800626c <jacobianoInverso+0x61c>)
 8006066:	ed93 5b00 	vldr	d5, [r3]
 800606a:	4b7e      	ldr	r3, [pc, #504]	; (8006264 <jacobianoInverso+0x614>)
 800606c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006070:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006074:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006078:	4b7d      	ldr	r3, [pc, #500]	; (8006270 <jacobianoInverso+0x620>)
 800607a:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 800607e:	4b7b      	ldr	r3, [pc, #492]	; (800626c <jacobianoInverso+0x61c>)
 8006080:	ed93 6b00 	vldr	d6, [r3]
 8006084:	4b77      	ldr	r3, [pc, #476]	; (8006264 <jacobianoInverso+0x614>)
 8006086:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800608a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800608e:	4b77      	ldr	r3, [pc, #476]	; (800626c <jacobianoInverso+0x61c>)
 8006090:	ed93 5b02 	vldr	d5, [r3, #8]
 8006094:	4b73      	ldr	r3, [pc, #460]	; (8006264 <jacobianoInverso+0x614>)
 8006096:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800609a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800609e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060a2:	4b73      	ldr	r3, [pc, #460]	; (8006270 <jacobianoInverso+0x620>)
 80060a4:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 80060a8:	4972      	ldr	r1, [pc, #456]	; (8006274 <jacobianoInverso+0x624>)
 80060aa:	4873      	ldr	r0, [pc, #460]	; (8006278 <jacobianoInverso+0x628>)
 80060ac:	f7ff fbcb 	bl	8005846 <productDot>
 80060b0:	eeb0 7b40 	vmov.f64	d7, d0
 80060b4:	4b71      	ldr	r3, [pc, #452]	; (800627c <jacobianoInverso+0x62c>)
 80060b6:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 80060ba:	4971      	ldr	r1, [pc, #452]	; (8006280 <jacobianoInverso+0x630>)
 80060bc:	486a      	ldr	r0, [pc, #424]	; (8006268 <jacobianoInverso+0x618>)
 80060be:	f7ff fbc2 	bl	8005846 <productDot>
 80060c2:	eeb0 7b40 	vmov.f64	d7, d0
 80060c6:	4b6d      	ldr	r3, [pc, #436]	; (800627c <jacobianoInverso+0x62c>)
 80060c8:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 80060cc:	496d      	ldr	r1, [pc, #436]	; (8006284 <jacobianoInverso+0x634>)
 80060ce:	4868      	ldr	r0, [pc, #416]	; (8006270 <jacobianoInverso+0x620>)
 80060d0:	f7ff fbb9 	bl	8005846 <productDot>
 80060d4:	eeb0 7b40 	vmov.f64	d7, d0
 80060d8:	4b68      	ldr	r3, [pc, #416]	; (800627c <jacobianoInverso+0x62c>)
 80060da:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060e4:	e03d      	b.n	8006162 <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060ec:	e030      	b.n	8006150 <jacobianoInverso+0x500>
			if (i == j) {
 80060ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d114      	bne.n	8006124 <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 80060fa:	4a60      	ldr	r2, [pc, #384]	; (800627c <jacobianoInverso+0x62c>)
 80060fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006108:	4c5f      	ldr	r4, [pc, #380]	; (8006288 <jacobianoInverso+0x638>)
 800610a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800610e:	4603      	mov	r3, r0
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4403      	add	r3, r0
 8006114:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006118:	4403      	add	r3, r0
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4423      	add	r3, r4
 800611e:	e9c3 1200 	strd	r1, r2, [r3]
 8006122:	e010      	b.n	8006146 <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 8006124:	4958      	ldr	r1, [pc, #352]	; (8006288 <jacobianoInverso+0x638>)
 8006126:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800612a:	4613      	mov	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4413      	add	r3, r2
 8006130:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006134:	4413      	add	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	18ca      	adds	r2, r1, r3
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	f04f 0400 	mov.w	r4, #0
 8006142:	e9c2 3400 	strd	r3, r4, [r2]
		for (int j = 0; j < 3; ++j) {
 8006146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800614a:	3301      	adds	r3, #1
 800614c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006154:	2b02      	cmp	r3, #2
 8006156:	ddca      	ble.n	80060ee <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8006158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800615c:	3301      	adds	r3, #1
 800615e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006166:	2b02      	cmp	r3, #2
 8006168:	ddbd      	ble.n	80060e6 <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 800616a:	4c48      	ldr	r4, [pc, #288]	; (800628c <jacobianoInverso+0x63c>)
 800616c:	463b      	mov	r3, r7
 800616e:	4946      	ldr	r1, [pc, #280]	; (8006288 <jacobianoInverso+0x638>)
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fc96 	bl	8005aa2 <inversa>
 8006176:	4620      	mov	r0, r4
 8006178:	463b      	mov	r3, r7
 800617a:	2248      	movs	r2, #72	; 0x48
 800617c:	4619      	mov	r1, r3
 800617e:	f008 fc3b 	bl	800e9f8 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 8006182:	4c43      	ldr	r4, [pc, #268]	; (8006290 <jacobianoInverso+0x640>)
 8006184:	463b      	mov	r3, r7
 8006186:	4a41      	ldr	r2, [pc, #260]	; (800628c <jacobianoInverso+0x63c>)
 8006188:	493a      	ldr	r1, [pc, #232]	; (8006274 <jacobianoInverso+0x624>)
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fcf9 	bl	8005b82 <productMatriz>
 8006190:	4620      	mov	r0, r4
 8006192:	463b      	mov	r3, r7
 8006194:	2248      	movs	r2, #72	; 0x48
 8006196:	4619      	mov	r1, r3
 8006198:	f008 fc2e 	bl	800e9f8 <memcpy>

	for (int i = 0; i < 3; ++i) {
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061a2:	e042      	b.n	800622a <jacobianoInverso+0x5da>
		double sum = 0;
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	f04f 0400 	mov.w	r4, #0
 80061ac:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061b6:	e026      	b.n	8006206 <jacobianoInverso+0x5b6>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 80061b8:	4935      	ldr	r1, [pc, #212]	; (8006290 <jacobianoInverso+0x640>)
 80061ba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80061be:	4613      	mov	r3, r2
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	4413      	add	r3, r2
 80061c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	440b      	add	r3, r1
 80061ce:	ed93 6b00 	vldr	d6, [r3]
 80061d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80061dc:	4413      	add	r3, r2
 80061de:	3b38      	subs	r3, #56	; 0x38
 80061e0:	ed93 7b00 	vldr	d7, [r3]
 80061e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061e8:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 80061ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061f0:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 80061f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061f8:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 80061fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006200:	3301      	adds	r3, #1
 8006202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800620a:	2b02      	cmp	r3, #2
 800620c:	ddd4      	ble.n	80061b8 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 800620e:	4a21      	ldr	r2, [pc, #132]	; (8006294 <jacobianoInverso+0x644>)
 8006210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	441a      	add	r2, r3
 8006218:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800621c:	e9c2 3400 	strd	r3, r4, [r2]
	for (int i = 0; i < 3; ++i) {
 8006220:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006224:	3301      	adds	r3, #1
 8006226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800622a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800622e:	2b02      	cmp	r3, #2
 8006230:	ddb8      	ble.n	80061a4 <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 8006232:	4b18      	ldr	r3, [pc, #96]	; (8006294 <jacobianoInverso+0x644>)
 8006234:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006238:	4a17      	ldr	r2, [pc, #92]	; (8006298 <jacobianoInverso+0x648>)
 800623a:	e9c2 3400 	strd	r3, r4, [r2]
	omega2 = omega[1];
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <jacobianoInverso+0x644>)
 8006240:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006244:	4a15      	ldr	r2, [pc, #84]	; (800629c <jacobianoInverso+0x64c>)
 8006246:	e9c2 3400 	strd	r3, r4, [r2]
	omega3 = omega[2];
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <jacobianoInverso+0x644>)
 800624c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006250:	4a13      	ldr	r2, [pc, #76]	; (80062a0 <jacobianoInverso+0x650>)
 8006252:	e9c2 3400 	strd	r3, r4, [r2]

}
 8006256:	bf00      	nop
 8006258:	37b4      	adds	r7, #180	; 0xb4
 800625a:	46bd      	mov	sp, r7
 800625c:	bd90      	pop	{r4, r7, pc}
 800625e:	bf00      	nop
 8006260:	240000b0 	.word	0x240000b0
 8006264:	24000a68 	.word	0x24000a68
 8006268:	240009a8 	.word	0x240009a8
 800626c:	240000c8 	.word	0x240000c8
 8006270:	24000ae8 	.word	0x24000ae8
 8006274:	24000848 	.word	0x24000848
 8006278:	24000778 	.word	0x24000778
 800627c:	24000ad0 	.word	0x24000ad0
 8006280:	24000860 	.word	0x24000860
 8006284:	24000878 	.word	0x24000878
 8006288:	240007d8 	.word	0x240007d8
 800628c:	24000950 	.word	0x24000950
 8006290:	24000b68 	.word	0x24000b68
 8006294:	24000498 	.word	0x24000498
 8006298:	240003a8 	.word	0x240003a8
 800629c:	240004e8 	.word	0x240004e8
 80062a0:	240003d0 	.word	0x240003d0
 80062a4:	00000000 	.word	0x00000000

080062a8 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 80062a8:	b490      	push	{r4, r7}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	ed87 0b04 	vstr	d0, [r7, #16]
 80062b2:	ed87 1b02 	vstr	d1, [r7, #8]
 80062b6:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 80062ba:	4ba5      	ldr	r3, [pc, #660]	; (8006550 <SetPerfilTimers+0x2a8>)
 80062bc:	ed93 7b00 	vldr	d7, [r3]
 80062c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80062c4:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8006538 <SetPerfilTimers+0x290>
 80062c8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80062cc:	ed97 7b04 	vldr	d7, [r7, #16]
 80062d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80062d4:	4b9f      	ldr	r3, [pc, #636]	; (8006554 <SetPerfilTimers+0x2ac>)
 80062d6:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 80062da:	4b9d      	ldr	r3, [pc, #628]	; (8006550 <SetPerfilTimers+0x2a8>)
 80062dc:	ed93 7b00 	vldr	d7, [r3]
 80062e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80062e4:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8006538 <SetPerfilTimers+0x290>
 80062e8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80062ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80062f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80062f4:	4b98      	ldr	r3, [pc, #608]	; (8006558 <SetPerfilTimers+0x2b0>)
 80062f6:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 80062fa:	4b95      	ldr	r3, [pc, #596]	; (8006550 <SetPerfilTimers+0x2a8>)
 80062fc:	ed93 7b00 	vldr	d7, [r3]
 8006300:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006304:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8006538 <SetPerfilTimers+0x290>
 8006308:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800630c:	ed97 7b00 	vldr	d7, [r7]
 8006310:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006314:	4b91      	ldr	r3, [pc, #580]	; (800655c <SetPerfilTimers+0x2b4>)
 8006316:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 800631a:	4b8e      	ldr	r3, [pc, #568]	; (8006554 <SetPerfilTimers+0x2ac>)
 800631c:	ed93 7b00 	vldr	d7, [r3]
 8006320:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8006540 <SetPerfilTimers+0x298>
 8006324:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632c:	d805      	bhi.n	800633a <SetPerfilTimers+0x92>
			rpm1=0.1;
 800632e:	4a89      	ldr	r2, [pc, #548]	; (8006554 <SetPerfilTimers+0x2ac>)
 8006330:	a483      	add	r4, pc, #524	; (adr r4, 8006540 <SetPerfilTimers+0x298>)
 8006332:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006336:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if(rpm2<=0.1){
 800633a:	4b87      	ldr	r3, [pc, #540]	; (8006558 <SetPerfilTimers+0x2b0>)
 800633c:	ed93 7b00 	vldr	d7, [r3]
 8006340:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8006540 <SetPerfilTimers+0x298>
 8006344:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634c:	d805      	bhi.n	800635a <SetPerfilTimers+0xb2>
			rpm2=0.1;
 800634e:	4a82      	ldr	r2, [pc, #520]	; (8006558 <SetPerfilTimers+0x2b0>)
 8006350:	a47b      	add	r4, pc, #492	; (adr r4, 8006540 <SetPerfilTimers+0x298>)
 8006352:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006356:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if(rpm3<=0.1){
 800635a:	4b80      	ldr	r3, [pc, #512]	; (800655c <SetPerfilTimers+0x2b4>)
 800635c:	ed93 7b00 	vldr	d7, [r3]
 8006360:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006540 <SetPerfilTimers+0x298>
 8006364:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636c:	d805      	bhi.n	800637a <SetPerfilTimers+0xd2>
			rpm3=0.1;
 800636e:	4a7b      	ldr	r2, [pc, #492]	; (800655c <SetPerfilTimers+0x2b4>)
 8006370:	a473      	add	r4, pc, #460	; (adr r4, 8006540 <SetPerfilTimers+0x298>)
 8006372:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006376:	e9c2 3400 	strd	r3, r4, [r2]
		}


		periodoM[0] = (((Fcl * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 800637a:	4b79      	ldr	r3, [pc, #484]	; (8006560 <SetPerfilTimers+0x2b8>)
 800637c:	ed93 7b00 	vldr	d7, [r3]
 8006380:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8006538 <SetPerfilTimers+0x290>
 8006384:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006388:	4b76      	ldr	r3, [pc, #472]	; (8006564 <SetPerfilTimers+0x2bc>)
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006394:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006398:	ee37 6b06 	vadd.f64	d6, d7, d6
 800639c:	4b6d      	ldr	r3, [pc, #436]	; (8006554 <SetPerfilTimers+0x2ac>)
 800639e:	ed93 7b00 	vldr	d7, [r3]
 80063a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80063a6:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8006548 <SetPerfilTimers+0x2a0>
 80063aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80063ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80063b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063ba:	4b6b      	ldr	r3, [pc, #428]	; (8006568 <SetPerfilTimers+0x2c0>)
 80063bc:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((Fcl * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 80063c0:	4b67      	ldr	r3, [pc, #412]	; (8006560 <SetPerfilTimers+0x2b8>)
 80063c2:	ed93 7b00 	vldr	d7, [r3]
 80063c6:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8006538 <SetPerfilTimers+0x290>
 80063ca:	ee27 5b06 	vmul.f64	d5, d7, d6
 80063ce:	4b67      	ldr	r3, [pc, #412]	; (800656c <SetPerfilTimers+0x2c4>)
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80063da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063de:	ee37 6b06 	vadd.f64	d6, d7, d6
 80063e2:	4b5d      	ldr	r3, [pc, #372]	; (8006558 <SetPerfilTimers+0x2b0>)
 80063e4:	ed93 7b00 	vldr	d7, [r3]
 80063e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80063ec:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8006548 <SetPerfilTimers+0x2a0>
 80063f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80063f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80063f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006400:	4b59      	ldr	r3, [pc, #356]	; (8006568 <SetPerfilTimers+0x2c0>)
 8006402:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((Fcl * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 8006406:	4b56      	ldr	r3, [pc, #344]	; (8006560 <SetPerfilTimers+0x2b8>)
 8006408:	ed93 7b00 	vldr	d7, [r3]
 800640c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8006538 <SetPerfilTimers+0x290>
 8006410:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006414:	4b56      	ldr	r3, [pc, #344]	; (8006570 <SetPerfilTimers+0x2c8>)
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006420:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006424:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006428:	4b4c      	ldr	r3, [pc, #304]	; (800655c <SetPerfilTimers+0x2b4>)
 800642a:	ed93 7b00 	vldr	d7, [r3]
 800642e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006432:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8006548 <SetPerfilTimers+0x2a0>
 8006436:	ee27 6b06 	vmul.f64	d6, d7, d6
 800643a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800643e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006442:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006446:	4b48      	ldr	r3, [pc, #288]	; (8006568 <SetPerfilTimers+0x2c0>)
 8006448:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 800644c:	2300      	movs	r3, #0
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	e0ad      	b.n	80065ae <SetPerfilTimers+0x306>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 8006452:	4a45      	ldr	r2, [pc, #276]	; (8006568 <SetPerfilTimers+0x2c0>)
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	ed93 6b00 	vldr	d6, [r3]
 800645e:	4a42      	ldr	r2, [pc, #264]	; (8006568 <SetPerfilTimers+0x2c0>)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	ed93 7b00 	vldr	d7, [r3]
 800646a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800646e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006472:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006476:	4a3f      	ldr	r2, [pc, #252]	; (8006574 <SetPerfilTimers+0x2cc>)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	4413      	add	r3, r2
 800647e:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 8006482:	4a3d      	ldr	r2, [pc, #244]	; (8006578 <SetPerfilTimers+0x2d0>)
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	4413      	add	r3, r2
 800648a:	ed93 6b00 	vldr	d6, [r3]
 800648e:	4a39      	ldr	r2, [pc, #228]	; (8006574 <SetPerfilTimers+0x2cc>)
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	ed93 7b00 	vldr	d7, [r3]
 800649a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800649e:	4a36      	ldr	r2, [pc, #216]	; (8006578 <SetPerfilTimers+0x2d0>)
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 80064aa:	4a33      	ldr	r2, [pc, #204]	; (8006578 <SetPerfilTimers+0x2d0>)
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4413      	add	r3, r2
 80064b2:	ed93 7b00 	vldr	d7, [r3]
 80064b6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80064be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c2:	dd1f      	ble.n	8006504 <SetPerfilTimers+0x25c>
				periodoM[i] = periodoM[i] + 1;
 80064c4:	4a28      	ldr	r2, [pc, #160]	; (8006568 <SetPerfilTimers+0x2c0>)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4413      	add	r3, r2
 80064cc:	ed93 7b00 	vldr	d7, [r3]
 80064d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064d8:	4a23      	ldr	r2, [pc, #140]	; (8006568 <SetPerfilTimers+0x2c0>)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4413      	add	r3, r2
 80064e0:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 80064e4:	4a24      	ldr	r2, [pc, #144]	; (8006578 <SetPerfilTimers+0x2d0>)
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	ed93 7b00 	vldr	d7, [r3]
 80064f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80064f8:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <SetPerfilTimers+0x2d0>)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 8006504:	4a18      	ldr	r2, [pc, #96]	; (8006568 <SetPerfilTimers+0x2c0>)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	ed93 7b00 	vldr	d7, [r3]
 8006510:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8006514:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	d52e      	bpl.n	800657c <SetPerfilTimers+0x2d4>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <SetPerfilTimers+0x2c0>)
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	441a      	add	r2, r3
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	f04f 0400 	mov.w	r4, #0
 800652e:	e9c2 3400 	strd	r3, r4, [r2]
 8006532:	e039      	b.n	80065a8 <SetPerfilTimers+0x300>
 8006534:	f3af 8000 	nop.w
 8006538:	00000000 	.word	0x00000000
 800653c:	404e0000 	.word	0x404e0000
 8006540:	9999999a 	.word	0x9999999a
 8006544:	3fb99999 	.word	0x3fb99999
 8006548:	00000000 	.word	0x00000000
 800654c:	40c2c000 	.word	0x40c2c000
 8006550:	24000100 	.word	0x24000100
 8006554:	24000428 	.word	0x24000428
 8006558:	24000390 	.word	0x24000390
 800655c:	240004d8 	.word	0x240004d8
 8006560:	24000000 	.word	0x24000000
 8006564:	40001800 	.word	0x40001800
 8006568:	240004c0 	.word	0x240004c0
 800656c:	40001c00 	.word	0x40001c00
 8006570:	40002000 	.word	0x40002000
 8006574:	240003d8 	.word	0x240003d8
 8006578:	24000500 	.word	0x24000500
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 800657c:	4aa0      	ldr	r2, [pc, #640]	; (8006800 <SetPerfilTimers+0x558>)
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	ed93 7b00 	vldr	d7, [r3]
 8006588:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80067e8 <SetPerfilTimers+0x540>
 800658c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006594:	dd08      	ble.n	80065a8 <SetPerfilTimers+0x300>
				periodoM[i] = pow(2, 16);
 8006596:	4a9a      	ldr	r2, [pc, #616]	; (8006800 <SetPerfilTimers+0x558>)
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	441a      	add	r2, r3
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	4c98      	ldr	r4, [pc, #608]	; (8006804 <SetPerfilTimers+0x55c>)
 80065a4:	e9c2 3400 	strd	r3, r4, [r2]
		for (int i = 0; i < 3; ++i) {
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	3301      	adds	r3, #1
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	f77f af4e 	ble.w	8006452 <SetPerfilTimers+0x1aa>
			}
		}

			periodoM[0]=(uint32_t)(((Fcl * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 80065b6:	4b94      	ldr	r3, [pc, #592]	; (8006808 <SetPerfilTimers+0x560>)
 80065b8:	ed93 7b00 	vldr	d7, [r3]
 80065bc:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80067f0 <SetPerfilTimers+0x548>
 80065c0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80065c4:	4b91      	ldr	r3, [pc, #580]	; (800680c <SetPerfilTimers+0x564>)
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065d4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065d8:	4b8d      	ldr	r3, [pc, #564]	; (8006810 <SetPerfilTimers+0x568>)
 80065da:	ed93 7b00 	vldr	d7, [r3]
 80065de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065e2:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80067f8 <SetPerfilTimers+0x550>
 80065e6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065fe:	4b80      	ldr	r3, [pc, #512]	; (8006800 <SetPerfilTimers+0x558>)
 8006600:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((Fcl * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8006604:	4b80      	ldr	r3, [pc, #512]	; (8006808 <SetPerfilTimers+0x560>)
 8006606:	ed93 7b00 	vldr	d7, [r3]
 800660a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80067f0 <SetPerfilTimers+0x548>
 800660e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006612:	4b80      	ldr	r3, [pc, #512]	; (8006814 <SetPerfilTimers+0x56c>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800661e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006622:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006626:	4b7c      	ldr	r3, [pc, #496]	; (8006818 <SetPerfilTimers+0x570>)
 8006628:	ed93 7b00 	vldr	d7, [r3]
 800662c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006630:	ed9f 6b71 	vldr	d6, [pc, #452]	; 80067f8 <SetPerfilTimers+0x550>
 8006634:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006638:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800663c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006640:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006644:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006648:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800664c:	4b6c      	ldr	r3, [pc, #432]	; (8006800 <SetPerfilTimers+0x558>)
 800664e:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((Fcl * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8006652:	4b6d      	ldr	r3, [pc, #436]	; (8006808 <SetPerfilTimers+0x560>)
 8006654:	ed93 7b00 	vldr	d7, [r3]
 8006658:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80067f0 <SetPerfilTimers+0x548>
 800665c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006660:	4b6e      	ldr	r3, [pc, #440]	; (800681c <SetPerfilTimers+0x574>)
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800666c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006670:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006674:	4b6a      	ldr	r3, [pc, #424]	; (8006820 <SetPerfilTimers+0x578>)
 8006676:	ed93 7b00 	vldr	d7, [r3]
 800667a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800667e:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80067f8 <SetPerfilTimers+0x550>
 8006682:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006686:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800668a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800668e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006692:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006696:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800669a:	4b59      	ldr	r3, [pc, #356]	; (8006800 <SetPerfilTimers+0x558>)
 800669c:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 80066a0:	4b5a      	ldr	r3, [pc, #360]	; (800680c <SetPerfilTimers+0x564>)
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	ee07 3a90 	vmov	s15, r3
 80066a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066ac:	4b54      	ldr	r3, [pc, #336]	; (8006800 <SetPerfilTimers+0x558>)
 80066ae:	ed93 7b00 	vldr	d7, [r3]
 80066b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ba:	dd0c      	ble.n	80066d6 <SetPerfilTimers+0x42e>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80066bc:	4b50      	ldr	r3, [pc, #320]	; (8006800 <SetPerfilTimers+0x558>)
 80066be:	ed93 7b00 	vldr	d7, [r3]
 80066c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066ca:	4b50      	ldr	r3, [pc, #320]	; (800680c <SetPerfilTimers+0x564>)
 80066cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066d0:	ee17 2a90 	vmov	r2, s15
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 80066d6:	4b4f      	ldr	r3, [pc, #316]	; (8006814 <SetPerfilTimers+0x56c>)
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066e2:	4b47      	ldr	r3, [pc, #284]	; (8006800 <SetPerfilTimers+0x558>)
 80066e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80066e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f0:	dd0c      	ble.n	800670c <SetPerfilTimers+0x464>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80066f2:	4b43      	ldr	r3, [pc, #268]	; (8006800 <SetPerfilTimers+0x558>)
 80066f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80066f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006700:	4b44      	ldr	r3, [pc, #272]	; (8006814 <SetPerfilTimers+0x56c>)
 8006702:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006706:	ee17 2a90 	vmov	r2, s15
 800670a:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 800670c:	4b43      	ldr	r3, [pc, #268]	; (800681c <SetPerfilTimers+0x574>)
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006718:	4b39      	ldr	r3, [pc, #228]	; (8006800 <SetPerfilTimers+0x558>)
 800671a:	ed93 7b04 	vldr	d7, [r3, #16]
 800671e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006726:	dd0c      	ble.n	8006742 <SetPerfilTimers+0x49a>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006728:	4b35      	ldr	r3, [pc, #212]	; (8006800 <SetPerfilTimers+0x558>)
 800672a:	ed93 7b04 	vldr	d7, [r3, #16]
 800672e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006732:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006736:	4b39      	ldr	r3, [pc, #228]	; (800681c <SetPerfilTimers+0x574>)
 8006738:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800673c:	ee17 2a90 	vmov	r2, s15
 8006740:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 8006742:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <SetPerfilTimers+0x558>)
 8006744:	ed93 7b00 	vldr	d7, [r3]
 8006748:	4b30      	ldr	r3, [pc, #192]	; (800680c <SetPerfilTimers+0x564>)
 800674a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800674e:	ee17 2a90 	vmov	r2, s15
 8006752:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006754:	4b2d      	ldr	r3, [pc, #180]	; (800680c <SetPerfilTimers+0x564>)
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006760:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006764:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006768:	4b28      	ldr	r3, [pc, #160]	; (800680c <SetPerfilTimers+0x564>)
 800676a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800676e:	ee17 2a90 	vmov	r2, s15
 8006772:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 8006774:	4b22      	ldr	r3, [pc, #136]	; (8006800 <SetPerfilTimers+0x558>)
 8006776:	ed93 7b02 	vldr	d7, [r3, #8]
 800677a:	4b26      	ldr	r3, [pc, #152]	; (8006814 <SetPerfilTimers+0x56c>)
 800677c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006780:	ee17 2a90 	vmov	r2, s15
 8006784:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006786:	4b23      	ldr	r3, [pc, #140]	; (8006814 <SetPerfilTimers+0x56c>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006792:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006796:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800679a:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <SetPerfilTimers+0x56c>)
 800679c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067a0:	ee17 2a90 	vmov	r2, s15
 80067a4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 80067a6:	4b16      	ldr	r3, [pc, #88]	; (8006800 <SetPerfilTimers+0x558>)
 80067a8:	ed93 7b04 	vldr	d7, [r3, #16]
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <SetPerfilTimers+0x574>)
 80067ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067b2:	ee17 2a90 	vmov	r2, s15
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80067b8:	4b18      	ldr	r3, [pc, #96]	; (800681c <SetPerfilTimers+0x574>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80067c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067cc:	4b13      	ldr	r3, [pc, #76]	; (800681c <SetPerfilTimers+0x574>)
 80067ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067d2:	ee17 2a90 	vmov	r2, s15
 80067d6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 80067d8:	bf00      	nop
 80067da:	3720      	adds	r7, #32
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc90      	pop	{r4, r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	f3af 8000 	nop.w
 80067e8:	00000000 	.word	0x00000000
 80067ec:	40f00000 	.word	0x40f00000
 80067f0:	00000000 	.word	0x00000000
 80067f4:	404e0000 	.word	0x404e0000
 80067f8:	00000000 	.word	0x00000000
 80067fc:	40c2c000 	.word	0x40c2c000
 8006800:	240004c0 	.word	0x240004c0
 8006804:	40f00000 	.word	0x40f00000
 8006808:	24000000 	.word	0x24000000
 800680c:	40001800 	.word	0x40001800
 8006810:	24000428 	.word	0x24000428
 8006814:	40001c00 	.word	0x40001c00
 8006818:	24000390 	.word	0x24000390
 800681c:	40002000 	.word	0x40002000
 8006820:	240004d8 	.word	0x240004d8

08006824 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006828:	4b22      	ldr	r3, [pc, #136]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 800682a:	4a23      	ldr	r2, [pc, #140]	; (80068b8 <MX_USART1_UART_Init+0x94>)
 800682c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800682e:	4b21      	ldr	r3, [pc, #132]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006830:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006836:	4b1f      	ldr	r3, [pc, #124]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006838:	2200      	movs	r2, #0
 800683a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800683c:	4b1d      	ldr	r3, [pc, #116]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 800683e:	2200      	movs	r2, #0
 8006840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006844:	2200      	movs	r2, #0
 8006846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006848:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 800684a:	220c      	movs	r2, #12
 800684c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800684e:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006850:	2200      	movs	r2, #0
 8006852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006854:	4b17      	ldr	r3, [pc, #92]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006856:	2200      	movs	r2, #0
 8006858:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800685a:	4b16      	ldr	r3, [pc, #88]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 800685c:	2200      	movs	r2, #0
 800685e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006860:	4b14      	ldr	r3, [pc, #80]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006862:	2200      	movs	r2, #0
 8006864:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006866:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006868:	2200      	movs	r2, #0
 800686a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800686c:	4811      	ldr	r0, [pc, #68]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 800686e:	f004 ff27 	bl	800b6c0 <HAL_UART_Init>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006878:	f7fb fb92 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800687c:	2100      	movs	r1, #0
 800687e:	480d      	ldr	r0, [pc, #52]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006880:	f007 ffab 	bl	800e7da <HAL_UARTEx_SetTxFifoThreshold>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800688a:	f7fb fb89 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800688e:	2100      	movs	r1, #0
 8006890:	4808      	ldr	r0, [pc, #32]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 8006892:	f007 ffe0 	bl	800e856 <HAL_UARTEx_SetRxFifoThreshold>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800689c:	f7fb fb80 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80068a0:	4804      	ldr	r0, [pc, #16]	; (80068b4 <MX_USART1_UART_Init+0x90>)
 80068a2:	f007 ff61 	bl	800e768 <HAL_UARTEx_DisableFifoMode>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80068ac:	f7fb fb78 	bl	8001fa0 <Error_Handler>
  }

}
 80068b0:	bf00      	nop
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	24000c7c 	.word	0x24000c7c
 80068b8:	40011000 	.word	0x40011000

080068bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80068c0:	4b22      	ldr	r3, [pc, #136]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068c2:	4a23      	ldr	r2, [pc, #140]	; (8006950 <MX_USART2_UART_Init+0x94>)
 80068c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80068c6:	4b21      	ldr	r3, [pc, #132]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80068cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068ce:	4b1f      	ldr	r3, [pc, #124]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068da:	4b1c      	ldr	r3, [pc, #112]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068dc:	2200      	movs	r2, #0
 80068de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068e2:	220c      	movs	r2, #12
 80068e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068e6:	4b19      	ldr	r3, [pc, #100]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068ec:	4b17      	ldr	r3, [pc, #92]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068f2:	4b16      	ldr	r3, [pc, #88]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068f8:	4b14      	ldr	r3, [pc, #80]	; (800694c <MX_USART2_UART_Init+0x90>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <MX_USART2_UART_Init+0x90>)
 8006900:	2200      	movs	r2, #0
 8006902:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006904:	4811      	ldr	r0, [pc, #68]	; (800694c <MX_USART2_UART_Init+0x90>)
 8006906:	f004 fedb 	bl	800b6c0 <HAL_UART_Init>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006910:	f7fb fb46 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006914:	2100      	movs	r1, #0
 8006916:	480d      	ldr	r0, [pc, #52]	; (800694c <MX_USART2_UART_Init+0x90>)
 8006918:	f007 ff5f 	bl	800e7da <HAL_UARTEx_SetTxFifoThreshold>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006922:	f7fb fb3d 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006926:	2100      	movs	r1, #0
 8006928:	4808      	ldr	r0, [pc, #32]	; (800694c <MX_USART2_UART_Init+0x90>)
 800692a:	f007 ff94 	bl	800e856 <HAL_UARTEx_SetRxFifoThreshold>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006934:	f7fb fb34 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006938:	4804      	ldr	r0, [pc, #16]	; (800694c <MX_USART2_UART_Init+0x90>)
 800693a:	f007 ff15 	bl	800e768 <HAL_UARTEx_DisableFifoMode>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006944:	f7fb fb2c 	bl	8001fa0 <Error_Handler>
  }

}
 8006948:	bf00      	nop
 800694a:	bd80      	pop	{r7, pc}
 800694c:	24000d08 	.word	0x24000d08
 8006950:	40004400 	.word	0x40004400

08006954 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8006958:	4b22      	ldr	r3, [pc, #136]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 800695a:	4a23      	ldr	r2, [pc, #140]	; (80069e8 <MX_USART3_UART_Init+0x94>)
 800695c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800695e:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 8006960:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006964:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006966:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 8006968:	2200      	movs	r2, #0
 800696a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 800696e:	2200      	movs	r2, #0
 8006970:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 8006974:	2200      	movs	r2, #0
 8006976:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 800697a:	220c      	movs	r2, #12
 800697c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800697e:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 8006980:	2200      	movs	r2, #0
 8006982:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006984:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 8006986:	2200      	movs	r2, #0
 8006988:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800698a:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 800698c:	2200      	movs	r2, #0
 800698e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006990:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 8006992:	2200      	movs	r2, #0
 8006994:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 8006998:	2200      	movs	r2, #0
 800699a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800699c:	4811      	ldr	r0, [pc, #68]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 800699e:	f004 fe8f 	bl	800b6c0 <HAL_UART_Init>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80069a8:	f7fb fafa 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80069ac:	2100      	movs	r1, #0
 80069ae:	480d      	ldr	r0, [pc, #52]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 80069b0:	f007 ff13 	bl	800e7da <HAL_UARTEx_SetTxFifoThreshold>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80069ba:	f7fb faf1 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80069be:	2100      	movs	r1, #0
 80069c0:	4808      	ldr	r0, [pc, #32]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 80069c2:	f007 ff48 	bl	800e856 <HAL_UARTEx_SetRxFifoThreshold>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80069cc:	f7fb fae8 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80069d0:	4804      	ldr	r0, [pc, #16]	; (80069e4 <MX_USART3_UART_Init+0x90>)
 80069d2:	f007 fec9 	bl	800e768 <HAL_UARTEx_DisableFifoMode>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80069dc:	f7fb fae0 	bl	8001fa0 <Error_Handler>
  }

}
 80069e0:	bf00      	nop
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	24000bf0 	.word	0x24000bf0
 80069e8:	40004800 	.word	0x40004800

080069ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08e      	sub	sp, #56	; 0x38
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	609a      	str	r2, [r3, #8]
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a63      	ldr	r2, [pc, #396]	; (8006b98 <HAL_UART_MspInit+0x1ac>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d14f      	bne.n	8006aae <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a0e:	4b63      	ldr	r3, [pc, #396]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a14:	4a61      	ldr	r2, [pc, #388]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a16:	f043 0310 	orr.w	r3, r3, #16
 8006a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a1e:	4b5f      	ldr	r3, [pc, #380]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	623b      	str	r3, [r7, #32]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a2c:	4b5b      	ldr	r3, [pc, #364]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a32:	4a5a      	ldr	r2, [pc, #360]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a3c:	4b57      	ldr	r3, [pc, #348]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4a:	4b54      	ldr	r3, [pc, #336]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a50:	4a52      	ldr	r2, [pc, #328]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a5a:	4b50      	ldr	r3, [pc, #320]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a76:	2300      	movs	r3, #0
 8006a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a82:	4619      	mov	r1, r3
 8006a84:	4846      	ldr	r0, [pc, #280]	; (8006ba0 <HAL_UART_MspInit+0x1b4>)
 8006a86:	f000 fcff 	bl	8007488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a90:	2302      	movs	r3, #2
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006a9c:	2307      	movs	r3, #7
 8006a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	483f      	ldr	r0, [pc, #252]	; (8006ba4 <HAL_UART_MspInit+0x1b8>)
 8006aa8:	f000 fcee 	bl	8007488 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006aac:	e06f      	b.n	8006b8e <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART2)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <HAL_UART_MspInit+0x1bc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d12e      	bne.n	8006b16 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ab8:	4b38      	ldr	r3, [pc, #224]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006abe:	4a37      	ldr	r2, [pc, #220]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ac8:	4b34      	ldr	r3, [pc, #208]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad6:	4b31      	ldr	r3, [pc, #196]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006adc:	4a2f      	ldr	r2, [pc, #188]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ae6:	4b2d      	ldr	r3, [pc, #180]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006af4:	230c      	movs	r3, #12
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af8:	2302      	movs	r3, #2
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b00:	2300      	movs	r3, #0
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b04:	2307      	movs	r3, #7
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4825      	ldr	r0, [pc, #148]	; (8006ba4 <HAL_UART_MspInit+0x1b8>)
 8006b10:	f000 fcba 	bl	8007488 <HAL_GPIO_Init>
}
 8006b14:	e03b      	b.n	8006b8e <HAL_UART_MspInit+0x1a2>
  else if(uartHandle->Instance==USART3)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a24      	ldr	r2, [pc, #144]	; (8006bac <HAL_UART_MspInit+0x1c0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d136      	bne.n	8006b8e <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b20:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b26:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006b32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b3e:	4b17      	ldr	r3, [pc, #92]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b44:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006b46:	f043 0308 	orr.w	r3, r3, #8
 8006b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b4e:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <HAL_UART_MspInit+0x1b0>)
 8006b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006b5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b62:	2302      	movs	r3, #2
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b6e:	2307      	movs	r3, #7
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b76:	4619      	mov	r1, r3
 8006b78:	480d      	ldr	r0, [pc, #52]	; (8006bb0 <HAL_UART_MspInit+0x1c4>)
 8006b7a:	f000 fc85 	bl	8007488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006b7e:	2201      	movs	r2, #1
 8006b80:	2101      	movs	r1, #1
 8006b82:	2027      	movs	r0, #39	; 0x27
 8006b84:	f000 f9f9 	bl	8006f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b88:	2027      	movs	r0, #39	; 0x27
 8006b8a:	f000 fa10 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 8006b8e:	bf00      	nop
 8006b90:	3738      	adds	r7, #56	; 0x38
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40011000 	.word	0x40011000
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	58020400 	.word	0x58020400
 8006ba4:	58020000 	.word	0x58020000
 8006ba8:	40004400 	.word	0x40004400
 8006bac:	40004800 	.word	0x40004800
 8006bb0:	58020c00 	.word	0x58020c00

08006bb4 <Reset_Handler>:
 8006bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bec <LoopFillZerobss+0x14>
 8006bb8:	2100      	movs	r1, #0
 8006bba:	e003      	b.n	8006bc4 <LoopCopyDataInit>

08006bbc <CopyDataInit>:
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <LoopFillZerobss+0x18>)
 8006bbe:	585b      	ldr	r3, [r3, r1]
 8006bc0:	5043      	str	r3, [r0, r1]
 8006bc2:	3104      	adds	r1, #4

08006bc4 <LoopCopyDataInit>:
 8006bc4:	480b      	ldr	r0, [pc, #44]	; (8006bf4 <LoopFillZerobss+0x1c>)
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <LoopFillZerobss+0x20>)
 8006bc8:	1842      	adds	r2, r0, r1
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d3f6      	bcc.n	8006bbc <CopyDataInit>
 8006bce:	4a0b      	ldr	r2, [pc, #44]	; (8006bfc <LoopFillZerobss+0x24>)
 8006bd0:	e002      	b.n	8006bd8 <LoopFillZerobss>

08006bd2 <FillZerobss>:
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f842 3b04 	str.w	r3, [r2], #4

08006bd8 <LoopFillZerobss>:
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <LoopFillZerobss+0x28>)
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d3f9      	bcc.n	8006bd2 <FillZerobss>
 8006bde:	f7fb fd0f 	bl	8002600 <SystemInit>
 8006be2:	f007 fee5 	bl	800e9b0 <__libc_init_array>
 8006be6:	f7fa fd47 	bl	8001678 <main>
 8006bea:	4770      	bx	lr
 8006bec:	24080000 	.word	0x24080000
 8006bf0:	08011928 	.word	0x08011928
 8006bf4:	24000000 	.word	0x24000000
 8006bf8:	240002e4 	.word	0x240002e4
 8006bfc:	240002e8 	.word	0x240002e8
 8006c00:	24000d9c 	.word	0x24000d9c

08006c04 <ADC3_IRQHandler>:
 8006c04:	e7fe      	b.n	8006c04 <ADC3_IRQHandler>
	...

08006c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c0c:	2003      	movs	r0, #3
 8006c0e:	f000 f9a9 	bl	8006f64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c12:	f001 fbeb 	bl	80083ec <HAL_RCC_GetSysClockFreq>
 8006c16:	4601      	mov	r1, r0
 8006c18:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <HAL_Init+0x60>)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	4a12      	ldr	r2, [pc, #72]	; (8006c6c <HAL_Init+0x64>)
 8006c24:	5cd3      	ldrb	r3, [r2, r3]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <HAL_Init+0x68>)
 8006c30:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <HAL_Init+0x68>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <HAL_Init+0x60>)
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	490b      	ldr	r1, [pc, #44]	; (8006c6c <HAL_Init+0x64>)
 8006c40:	5ccb      	ldrb	r3, [r1, r3]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4a:	4a0a      	ldr	r2, [pc, #40]	; (8006c74 <HAL_Init+0x6c>)
 8006c4c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c4e:	2000      	movs	r0, #0
 8006c50:	f000 f812 	bl	8006c78 <HAL_InitTick>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e002      	b.n	8006c64 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c5e:	f7fb fbe5 	bl	800242c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	08011648 	.word	0x08011648
 8006c70:	24000028 	.word	0x24000028
 8006c74:	2400002c 	.word	0x2400002c

08006c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006c80:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <HAL_InitTick+0x60>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e021      	b.n	8006cd0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006c8c:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <HAL_InitTick+0x64>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <HAL_InitTick+0x60>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 f99f 	bl	8006fe6 <HAL_SYSTICK_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e00e      	b.n	8006cd0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b0f      	cmp	r3, #15
 8006cb6:	d80a      	bhi.n	8006cce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cb8:	2200      	movs	r2, #0
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	f000 f95b 	bl	8006f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cc4:	4a06      	ldr	r2, [pc, #24]	; (8006ce0 <HAL_InitTick+0x68>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	2400010c 	.word	0x2400010c
 8006cdc:	24000028 	.word	0x24000028
 8006ce0:	24000108 	.word	0x24000108

08006ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_IncTick+0x20>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <HAL_IncTick+0x24>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	4a04      	ldr	r2, [pc, #16]	; (8006d08 <HAL_IncTick+0x24>)
 8006cf6:	6013      	str	r3, [r2, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2400010c 	.word	0x2400010c
 8006d08:	24000d94 	.word	0x24000d94

08006d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8006d10:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <HAL_GetTick+0x14>)
 8006d12:	681b      	ldr	r3, [r3, #0]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	24000d94 	.word	0x24000d94

08006d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d2c:	f7ff ffee 	bl	8006d0c <HAL_GetTick>
 8006d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d005      	beq.n	8006d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <HAL_Delay+0x40>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d4a:	bf00      	nop
 8006d4c:	f7ff ffde 	bl	8006d0c <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d8f7      	bhi.n	8006d4c <HAL_Delay+0x28>
  {
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	2400010c 	.word	0x2400010c

08006d68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006d6c:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <HAL_GetREVID+0x14>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	0c1b      	lsrs	r3, r3, #16
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	5c001000 	.word	0x5c001000

08006d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dae:	4a04      	ldr	r2, [pc, #16]	; (8006dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	60d3      	str	r3, [r2, #12]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000ed00 	.word	0xe000ed00
 8006dc4:	05fa0000 	.word	0x05fa0000

08006dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dcc:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <__NVIC_GetPriorityGrouping+0x18>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	0a1b      	lsrs	r3, r3, #8
 8006dd2:	f003 0307 	and.w	r3, r3, #7
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	e000ed00 	.word	0xe000ed00

08006de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	db0b      	blt.n	8006e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	f003 021f 	and.w	r2, r3, #31
 8006dfc:	4907      	ldr	r1, [pc, #28]	; (8006e1c <__NVIC_EnableIRQ+0x38>)
 8006dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	2001      	movs	r0, #1
 8006e06:	fa00 f202 	lsl.w	r2, r0, r2
 8006e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	e000e100 	.word	0xe000e100

08006e20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	db10      	blt.n	8006e54 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	f003 021f 	and.w	r2, r3, #31
 8006e38:	4909      	ldr	r1, [pc, #36]	; (8006e60 <__NVIC_DisableIRQ+0x40>)
 8006e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	2001      	movs	r0, #1
 8006e42:	fa00 f202 	lsl.w	r2, r0, r2
 8006e46:	3320      	adds	r3, #32
 8006e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006e50:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	e000e100 	.word	0xe000e100

08006e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db0a      	blt.n	8006e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	490c      	ldr	r1, [pc, #48]	; (8006eb0 <__NVIC_SetPriority+0x4c>)
 8006e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e82:	0112      	lsls	r2, r2, #4
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	440b      	add	r3, r1
 8006e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e8c:	e00a      	b.n	8006ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4908      	ldr	r1, [pc, #32]	; (8006eb4 <__NVIC_SetPriority+0x50>)
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	3b04      	subs	r3, #4
 8006e9c:	0112      	lsls	r2, r2, #4
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	761a      	strb	r2, [r3, #24]
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	e000e100 	.word	0xe000e100
 8006eb4:	e000ed00 	.word	0xe000ed00

08006eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b089      	sub	sp, #36	; 0x24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f1c3 0307 	rsb	r3, r3, #7
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	bf28      	it	cs
 8006ed6:	2304      	movcs	r3, #4
 8006ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	3304      	adds	r3, #4
 8006ede:	2b06      	cmp	r3, #6
 8006ee0:	d902      	bls.n	8006ee8 <NVIC_EncodePriority+0x30>
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	3b03      	subs	r3, #3
 8006ee6:	e000      	b.n	8006eea <NVIC_EncodePriority+0x32>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	43da      	mvns	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	401a      	ands	r2, r3
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f00:	f04f 31ff 	mov.w	r1, #4294967295
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0a:	43d9      	mvns	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f10:	4313      	orrs	r3, r2
         );
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3724      	adds	r7, #36	; 0x24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f30:	d301      	bcc.n	8006f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f32:	2301      	movs	r3, #1
 8006f34:	e00f      	b.n	8006f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f36:	4a0a      	ldr	r2, [pc, #40]	; (8006f60 <SysTick_Config+0x40>)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f3e:	210f      	movs	r1, #15
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	f7ff ff8e 	bl	8006e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f48:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <SysTick_Config+0x40>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f4e:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <SysTick_Config+0x40>)
 8006f50:	2207      	movs	r2, #7
 8006f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	e000e010 	.word	0xe000e010

08006f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7ff ff07 	bl	8006d80 <__NVIC_SetPriorityGrouping>
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	4603      	mov	r3, r0
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f88:	f7ff ff1e 	bl	8006dc8 <__NVIC_GetPriorityGrouping>
 8006f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	6978      	ldr	r0, [r7, #20]
 8006f94:	f7ff ff90 	bl	8006eb8 <NVIC_EncodePriority>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff ff5f 	bl	8006e64 <__NVIC_SetPriority>
}
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff ff11 	bl	8006de4 <__NVIC_EnableIRQ>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff21 	bl	8006e20 <__NVIC_DisableIRQ>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff ff96 	bl	8006f20 <SysTick_Config>
 8006ff4:	4603      	mov	r3, r0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e205      	b.n	800741e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d004      	beq.n	8007028 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e1fa      	b.n	800741e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a8c      	ldr	r2, [pc, #560]	; (8007260 <HAL_DMA_Abort_IT+0x260>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d04a      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a8b      	ldr	r2, [pc, #556]	; (8007264 <HAL_DMA_Abort_IT+0x264>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d045      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a89      	ldr	r2, [pc, #548]	; (8007268 <HAL_DMA_Abort_IT+0x268>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d040      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a88      	ldr	r2, [pc, #544]	; (800726c <HAL_DMA_Abort_IT+0x26c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d03b      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a86      	ldr	r2, [pc, #536]	; (8007270 <HAL_DMA_Abort_IT+0x270>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d036      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a85      	ldr	r2, [pc, #532]	; (8007274 <HAL_DMA_Abort_IT+0x274>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d031      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a83      	ldr	r2, [pc, #524]	; (8007278 <HAL_DMA_Abort_IT+0x278>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d02c      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a82      	ldr	r2, [pc, #520]	; (800727c <HAL_DMA_Abort_IT+0x27c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d027      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a80      	ldr	r2, [pc, #512]	; (8007280 <HAL_DMA_Abort_IT+0x280>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d022      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a7f      	ldr	r2, [pc, #508]	; (8007284 <HAL_DMA_Abort_IT+0x284>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d01d      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a7d      	ldr	r2, [pc, #500]	; (8007288 <HAL_DMA_Abort_IT+0x288>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d018      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a7c      	ldr	r2, [pc, #496]	; (800728c <HAL_DMA_Abort_IT+0x28c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d013      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a7a      	ldr	r2, [pc, #488]	; (8007290 <HAL_DMA_Abort_IT+0x290>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00e      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a79      	ldr	r2, [pc, #484]	; (8007294 <HAL_DMA_Abort_IT+0x294>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d009      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a77      	ldr	r2, [pc, #476]	; (8007298 <HAL_DMA_Abort_IT+0x298>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d004      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xc8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a76      	ldr	r2, [pc, #472]	; (800729c <HAL_DMA_Abort_IT+0x29c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d101      	bne.n	80070cc <HAL_DMA_Abort_IT+0xcc>
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <HAL_DMA_Abort_IT+0xce>
 80070cc:	2300      	movs	r3, #0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d065      	beq.n	800719e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a60      	ldr	r2, [pc, #384]	; (8007260 <HAL_DMA_Abort_IT+0x260>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d04a      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5e      	ldr	r2, [pc, #376]	; (8007264 <HAL_DMA_Abort_IT+0x264>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d045      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a5d      	ldr	r2, [pc, #372]	; (8007268 <HAL_DMA_Abort_IT+0x268>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d040      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a5b      	ldr	r2, [pc, #364]	; (800726c <HAL_DMA_Abort_IT+0x26c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d03b      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a5a      	ldr	r2, [pc, #360]	; (8007270 <HAL_DMA_Abort_IT+0x270>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d036      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a58      	ldr	r2, [pc, #352]	; (8007274 <HAL_DMA_Abort_IT+0x274>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d031      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a57      	ldr	r2, [pc, #348]	; (8007278 <HAL_DMA_Abort_IT+0x278>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d02c      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a55      	ldr	r2, [pc, #340]	; (800727c <HAL_DMA_Abort_IT+0x27c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d027      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a54      	ldr	r2, [pc, #336]	; (8007280 <HAL_DMA_Abort_IT+0x280>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d022      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a52      	ldr	r2, [pc, #328]	; (8007284 <HAL_DMA_Abort_IT+0x284>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01d      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a51      	ldr	r2, [pc, #324]	; (8007288 <HAL_DMA_Abort_IT+0x288>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d018      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a4f      	ldr	r2, [pc, #316]	; (800728c <HAL_DMA_Abort_IT+0x28c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a4e      	ldr	r2, [pc, #312]	; (8007290 <HAL_DMA_Abort_IT+0x290>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a4c      	ldr	r2, [pc, #304]	; (8007294 <HAL_DMA_Abort_IT+0x294>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a4b      	ldr	r2, [pc, #300]	; (8007298 <HAL_DMA_Abort_IT+0x298>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <HAL_DMA_Abort_IT+0x17a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a49      	ldr	r2, [pc, #292]	; (800729c <HAL_DMA_Abort_IT+0x29c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <HAL_DMA_Abort_IT+0x18c>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e147      	b.n	800741c <HAL_DMA_Abort_IT+0x41c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0201 	bic.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e13e      	b.n	800741c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 020e 	bic.w	r2, r2, #14
 80071ac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a2b      	ldr	r2, [pc, #172]	; (8007260 <HAL_DMA_Abort_IT+0x260>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d04a      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a29      	ldr	r2, [pc, #164]	; (8007264 <HAL_DMA_Abort_IT+0x264>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d045      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a28      	ldr	r2, [pc, #160]	; (8007268 <HAL_DMA_Abort_IT+0x268>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d040      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a26      	ldr	r2, [pc, #152]	; (800726c <HAL_DMA_Abort_IT+0x26c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d03b      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a25      	ldr	r2, [pc, #148]	; (8007270 <HAL_DMA_Abort_IT+0x270>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d036      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a23      	ldr	r2, [pc, #140]	; (8007274 <HAL_DMA_Abort_IT+0x274>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d031      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a22      	ldr	r2, [pc, #136]	; (8007278 <HAL_DMA_Abort_IT+0x278>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d02c      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a20      	ldr	r2, [pc, #128]	; (800727c <HAL_DMA_Abort_IT+0x27c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d027      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1f      	ldr	r2, [pc, #124]	; (8007280 <HAL_DMA_Abort_IT+0x280>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d022      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_DMA_Abort_IT+0x284>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01d      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1c      	ldr	r2, [pc, #112]	; (8007288 <HAL_DMA_Abort_IT+0x288>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d018      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1a      	ldr	r2, [pc, #104]	; (800728c <HAL_DMA_Abort_IT+0x28c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a19      	ldr	r2, [pc, #100]	; (8007290 <HAL_DMA_Abort_IT+0x290>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a17      	ldr	r2, [pc, #92]	; (8007294 <HAL_DMA_Abort_IT+0x294>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a16      	ldr	r2, [pc, #88]	; (8007298 <HAL_DMA_Abort_IT+0x298>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <HAL_DMA_Abort_IT+0x24e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a14      	ldr	r2, [pc, #80]	; (800729c <HAL_DMA_Abort_IT+0x29c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d128      	bne.n	80072a0 <HAL_DMA_Abort_IT+0x2a0>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e027      	b.n	80072b0 <HAL_DMA_Abort_IT+0x2b0>
 8007260:	40020010 	.word	0x40020010
 8007264:	40020028 	.word	0x40020028
 8007268:	40020040 	.word	0x40020040
 800726c:	40020058 	.word	0x40020058
 8007270:	40020070 	.word	0x40020070
 8007274:	40020088 	.word	0x40020088
 8007278:	400200a0 	.word	0x400200a0
 800727c:	400200b8 	.word	0x400200b8
 8007280:	40020410 	.word	0x40020410
 8007284:	40020428 	.word	0x40020428
 8007288:	40020440 	.word	0x40020440
 800728c:	40020458 	.word	0x40020458
 8007290:	40020470 	.word	0x40020470
 8007294:	40020488 	.word	0x40020488
 8007298:	400204a0 	.word	0x400204a0
 800729c:	400204b8 	.word	0x400204b8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a5c      	ldr	r2, [pc, #368]	; (8007428 <HAL_DMA_Abort_IT+0x428>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d072      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5b      	ldr	r2, [pc, #364]	; (800742c <HAL_DMA_Abort_IT+0x42c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d06d      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a59      	ldr	r2, [pc, #356]	; (8007430 <HAL_DMA_Abort_IT+0x430>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d068      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a58      	ldr	r2, [pc, #352]	; (8007434 <HAL_DMA_Abort_IT+0x434>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d063      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a56      	ldr	r2, [pc, #344]	; (8007438 <HAL_DMA_Abort_IT+0x438>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d05e      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a55      	ldr	r2, [pc, #340]	; (800743c <HAL_DMA_Abort_IT+0x43c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d059      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a53      	ldr	r2, [pc, #332]	; (8007440 <HAL_DMA_Abort_IT+0x440>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d054      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a52      	ldr	r2, [pc, #328]	; (8007444 <HAL_DMA_Abort_IT+0x444>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d04f      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a50      	ldr	r2, [pc, #320]	; (8007448 <HAL_DMA_Abort_IT+0x448>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04a      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a4f      	ldr	r2, [pc, #316]	; (800744c <HAL_DMA_Abort_IT+0x44c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d045      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a4d      	ldr	r2, [pc, #308]	; (8007450 <HAL_DMA_Abort_IT+0x450>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d040      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a4c      	ldr	r2, [pc, #304]	; (8007454 <HAL_DMA_Abort_IT+0x454>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d03b      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a4a      	ldr	r2, [pc, #296]	; (8007458 <HAL_DMA_Abort_IT+0x458>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d036      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a49      	ldr	r2, [pc, #292]	; (800745c <HAL_DMA_Abort_IT+0x45c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d031      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a47      	ldr	r2, [pc, #284]	; (8007460 <HAL_DMA_Abort_IT+0x460>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d02c      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a46      	ldr	r2, [pc, #280]	; (8007464 <HAL_DMA_Abort_IT+0x464>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d027      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a44      	ldr	r2, [pc, #272]	; (8007468 <HAL_DMA_Abort_IT+0x468>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d022      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a43      	ldr	r2, [pc, #268]	; (800746c <HAL_DMA_Abort_IT+0x46c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d01d      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a41      	ldr	r2, [pc, #260]	; (8007470 <HAL_DMA_Abort_IT+0x470>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a40      	ldr	r2, [pc, #256]	; (8007474 <HAL_DMA_Abort_IT+0x474>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a3e      	ldr	r2, [pc, #248]	; (8007478 <HAL_DMA_Abort_IT+0x478>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a3d      	ldr	r2, [pc, #244]	; (800747c <HAL_DMA_Abort_IT+0x47c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a3b      	ldr	r2, [pc, #236]	; (8007480 <HAL_DMA_Abort_IT+0x480>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x3a0>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a3a      	ldr	r2, [pc, #232]	; (8007484 <HAL_DMA_Abort_IT+0x484>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d101      	bne.n	80073a4 <HAL_DMA_Abort_IT+0x3a4>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <HAL_DMA_Abort_IT+0x3a6>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d028      	beq.n	80073fc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2201      	movs	r2, #1
 80073ca:	409a      	lsls	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00c      	beq.n	80073fc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40020010 	.word	0x40020010
 800742c:	40020028 	.word	0x40020028
 8007430:	40020040 	.word	0x40020040
 8007434:	40020058 	.word	0x40020058
 8007438:	40020070 	.word	0x40020070
 800743c:	40020088 	.word	0x40020088
 8007440:	400200a0 	.word	0x400200a0
 8007444:	400200b8 	.word	0x400200b8
 8007448:	40020410 	.word	0x40020410
 800744c:	40020428 	.word	0x40020428
 8007450:	40020440 	.word	0x40020440
 8007454:	40020458 	.word	0x40020458
 8007458:	40020470 	.word	0x40020470
 800745c:	40020488 	.word	0x40020488
 8007460:	400204a0 	.word	0x400204a0
 8007464:	400204b8 	.word	0x400204b8
 8007468:	58025408 	.word	0x58025408
 800746c:	5802541c 	.word	0x5802541c
 8007470:	58025430 	.word	0x58025430
 8007474:	58025444 	.word	0x58025444
 8007478:	58025458 	.word	0x58025458
 800747c:	5802546c 	.word	0x5802546c
 8007480:	58025480 	.word	0x58025480
 8007484:	58025494 	.word	0x58025494

08007488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007488:	b480      	push	{r7}
 800748a:	b089      	sub	sp, #36	; 0x24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007496:	4b89      	ldr	r3, [pc, #548]	; (80076bc <HAL_GPIO_Init+0x234>)
 8007498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800749a:	e194      	b.n	80077c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	2101      	movs	r1, #1
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	fa01 f303 	lsl.w	r3, r1, r3
 80074a8:	4013      	ands	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 8186 	beq.w	80077c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d003      	beq.n	80074c4 <HAL_GPIO_Init+0x3c>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b12      	cmp	r3, #18
 80074c2:	d123      	bne.n	800750c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	08da      	lsrs	r2, r3, #3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3208      	adds	r2, #8
 80074cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	220f      	movs	r2, #15
 80074dc:	fa02 f303 	lsl.w	r3, r2, r3
 80074e0:	43db      	mvns	r3, r3
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	4013      	ands	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	08da      	lsrs	r2, r3, #3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3208      	adds	r2, #8
 8007506:	69b9      	ldr	r1, [r7, #24]
 8007508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	2203      	movs	r2, #3
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	43db      	mvns	r3, r3
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	4013      	ands	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f003 0203 	and.w	r2, r3, #3
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	4313      	orrs	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d00b      	beq.n	8007560 <HAL_GPIO_Init+0xd8>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d007      	beq.n	8007560 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007554:	2b11      	cmp	r3, #17
 8007556:	d003      	beq.n	8007560 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b12      	cmp	r3, #18
 800755e:	d130      	bne.n	80075c2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	2203      	movs	r2, #3
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	43db      	mvns	r3, r3
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	4013      	ands	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4313      	orrs	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007596:	2201      	movs	r2, #1
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	43db      	mvns	r3, r3
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	4013      	ands	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	091b      	lsrs	r3, r3, #4
 80075ac:	f003 0201 	and.w	r2, r3, #1
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	2203      	movs	r2, #3
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	43db      	mvns	r3, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	4013      	ands	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	fa02 f303 	lsl.w	r3, r2, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 80e0 	beq.w	80077c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007600:	4b2f      	ldr	r3, [pc, #188]	; (80076c0 <HAL_GPIO_Init+0x238>)
 8007602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007606:	4a2e      	ldr	r2, [pc, #184]	; (80076c0 <HAL_GPIO_Init+0x238>)
 8007608:	f043 0302 	orr.w	r3, r3, #2
 800760c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007610:	4b2b      	ldr	r3, [pc, #172]	; (80076c0 <HAL_GPIO_Init+0x238>)
 8007612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800761e:	4a29      	ldr	r2, [pc, #164]	; (80076c4 <HAL_GPIO_Init+0x23c>)
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	089b      	lsrs	r3, r3, #2
 8007624:	3302      	adds	r3, #2
 8007626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	220f      	movs	r2, #15
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4013      	ands	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a20      	ldr	r2, [pc, #128]	; (80076c8 <HAL_GPIO_Init+0x240>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d052      	beq.n	80076f0 <HAL_GPIO_Init+0x268>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <HAL_GPIO_Init+0x244>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d031      	beq.n	80076b6 <HAL_GPIO_Init+0x22e>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <HAL_GPIO_Init+0x248>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d02b      	beq.n	80076b2 <HAL_GPIO_Init+0x22a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <HAL_GPIO_Init+0x24c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d025      	beq.n	80076ae <HAL_GPIO_Init+0x226>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a1c      	ldr	r2, [pc, #112]	; (80076d8 <HAL_GPIO_Init+0x250>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01f      	beq.n	80076aa <HAL_GPIO_Init+0x222>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a1b      	ldr	r2, [pc, #108]	; (80076dc <HAL_GPIO_Init+0x254>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d019      	beq.n	80076a6 <HAL_GPIO_Init+0x21e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <HAL_GPIO_Init+0x258>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <HAL_GPIO_Init+0x21a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <HAL_GPIO_Init+0x25c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00d      	beq.n	800769e <HAL_GPIO_Init+0x216>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <HAL_GPIO_Init+0x260>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d007      	beq.n	800769a <HAL_GPIO_Init+0x212>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a17      	ldr	r2, [pc, #92]	; (80076ec <HAL_GPIO_Init+0x264>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d101      	bne.n	8007696 <HAL_GPIO_Init+0x20e>
 8007692:	2309      	movs	r3, #9
 8007694:	e02d      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 8007696:	230a      	movs	r3, #10
 8007698:	e02b      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 800769a:	2308      	movs	r3, #8
 800769c:	e029      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 800769e:	2307      	movs	r3, #7
 80076a0:	e027      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 80076a2:	2306      	movs	r3, #6
 80076a4:	e025      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 80076a6:	2305      	movs	r3, #5
 80076a8:	e023      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 80076aa:	2304      	movs	r3, #4
 80076ac:	e021      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 80076ae:	2303      	movs	r3, #3
 80076b0:	e01f      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e01d      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e01b      	b.n	80076f2 <HAL_GPIO_Init+0x26a>
 80076ba:	bf00      	nop
 80076bc:	58000080 	.word	0x58000080
 80076c0:	58024400 	.word	0x58024400
 80076c4:	58000400 	.word	0x58000400
 80076c8:	58020000 	.word	0x58020000
 80076cc:	58020400 	.word	0x58020400
 80076d0:	58020800 	.word	0x58020800
 80076d4:	58020c00 	.word	0x58020c00
 80076d8:	58021000 	.word	0x58021000
 80076dc:	58021400 	.word	0x58021400
 80076e0:	58021800 	.word	0x58021800
 80076e4:	58021c00 	.word	0x58021c00
 80076e8:	58022000 	.word	0x58022000
 80076ec:	58022400 	.word	0x58022400
 80076f0:	2300      	movs	r3, #0
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	f002 0203 	and.w	r2, r2, #3
 80076f8:	0092      	lsls	r2, r2, #2
 80076fa:	4093      	lsls	r3, r2
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	4313      	orrs	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007702:	4938      	ldr	r1, [pc, #224]	; (80077e4 <HAL_GPIO_Init+0x35c>)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	089b      	lsrs	r3, r3, #2
 8007708:	3302      	adds	r3, #2
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	43db      	mvns	r3, r3
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4013      	ands	r3, r2
 800771e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	43db      	mvns	r3, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4013      	ands	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	43db      	mvns	r3, r3
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	4013      	ands	r3, r2
 8007774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4313      	orrs	r3, r2
 8007788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800778a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	43db      	mvns	r3, r3
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	4013      	ands	r3, r2
 80077a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80077b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f47f ae63 	bne.w	800749c <HAL_GPIO_Init+0x14>
  }
}
 80077d6:	bf00      	nop
 80077d8:	3724      	adds	r7, #36	; 0x24
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	58000400 	.word	0x58000400

080077e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	887b      	ldrh	r3, [r7, #2]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
 8007804:	e001      	b.n	800780a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
 8007824:	4613      	mov	r3, r2
 8007826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007828:	787b      	ldrb	r3, [r7, #1]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800782e:	887a      	ldrh	r2, [r7, #2]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007834:	e003      	b.n	800783e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	041a      	lsls	r2, r3, #16
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	619a      	str	r2, [r3, #24]
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	4603      	mov	r3, r0
 8007852:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007858:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	4013      	ands	r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fa f937 	bl	8001ae4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007888:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <HAL_PWREx_ConfigSupply+0x70>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b04      	cmp	r3, #4
 8007892:	d00a      	beq.n	80078aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007894:	4b16      	ldr	r3, [pc, #88]	; (80078f0 <HAL_PWREx_ConfigSupply+0x70>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d001      	beq.n	80078a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e01f      	b.n	80078e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	e01d      	b.n	80078e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <HAL_PWREx_ConfigSupply+0x70>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f023 0207 	bic.w	r2, r3, #7
 80078b2:	490f      	ldr	r1, [pc, #60]	; (80078f0 <HAL_PWREx_ConfigSupply+0x70>)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078ba:	f7ff fa27 	bl	8006d0c <HAL_GetTick>
 80078be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078c0:	e009      	b.n	80078d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078c2:	f7ff fa23 	bl	8006d0c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078d0:	d901      	bls.n	80078d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e007      	b.n	80078e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078d6:	4b06      	ldr	r3, [pc, #24]	; (80078f0 <HAL_PWREx_ConfigSupply+0x70>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e2:	d1ee      	bne.n	80078c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	58024800 	.word	0x58024800

080078f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08c      	sub	sp, #48	; 0x30
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e3c4      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8087 	beq.w	8007a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007914:	4ba2      	ldr	r3, [pc, #648]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800791e:	4ba0      	ldr	r3, [pc, #640]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	2b10      	cmp	r3, #16
 8007928:	d007      	beq.n	800793a <HAL_RCC_OscConfig+0x46>
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	2b18      	cmp	r3, #24
 800792e:	d110      	bne.n	8007952 <HAL_RCC_OscConfig+0x5e>
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d10b      	bne.n	8007952 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800793a:	4b99      	ldr	r3, [pc, #612]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d06c      	beq.n	8007a20 <HAL_RCC_OscConfig+0x12c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d168      	bne.n	8007a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e39e      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800795a:	d106      	bne.n	800796a <HAL_RCC_OscConfig+0x76>
 800795c:	4b90      	ldr	r3, [pc, #576]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a8f      	ldr	r2, [pc, #572]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e02e      	b.n	80079c8 <HAL_RCC_OscConfig+0xd4>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10c      	bne.n	800798c <HAL_RCC_OscConfig+0x98>
 8007972:	4b8b      	ldr	r3, [pc, #556]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a8a      	ldr	r2, [pc, #552]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	4b88      	ldr	r3, [pc, #544]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a87      	ldr	r2, [pc, #540]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e01d      	b.n	80079c8 <HAL_RCC_OscConfig+0xd4>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007994:	d10c      	bne.n	80079b0 <HAL_RCC_OscConfig+0xbc>
 8007996:	4b82      	ldr	r3, [pc, #520]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a81      	ldr	r2, [pc, #516]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 800799c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079a0:	6013      	str	r3, [r2, #0]
 80079a2:	4b7f      	ldr	r3, [pc, #508]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a7e      	ldr	r2, [pc, #504]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 80079a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	e00b      	b.n	80079c8 <HAL_RCC_OscConfig+0xd4>
 80079b0:	4b7b      	ldr	r3, [pc, #492]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a7a      	ldr	r2, [pc, #488]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 80079b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	4b78      	ldr	r3, [pc, #480]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a77      	ldr	r2, [pc, #476]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 80079c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d013      	beq.n	80079f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7ff f99c 	bl	8006d0c <HAL_GetTick>
 80079d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079d8:	f7ff f998 	bl	8006d0c <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b64      	cmp	r3, #100	; 0x64
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e352      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ea:	4b6d      	ldr	r3, [pc, #436]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0f0      	beq.n	80079d8 <HAL_RCC_OscConfig+0xe4>
 80079f6:	e014      	b.n	8007a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f8:	f7ff f988 	bl	8006d0c <HAL_GetTick>
 80079fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a00:	f7ff f984 	bl	8006d0c <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	; 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e33e      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a12:	4b63      	ldr	r3, [pc, #396]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f0      	bne.n	8007a00 <HAL_RCC_OscConfig+0x10c>
 8007a1e:	e000      	b.n	8007a22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8092 	beq.w	8007b54 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a30:	4b5b      	ldr	r3, [pc, #364]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a3a:	4b59      	ldr	r3, [pc, #356]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_RCC_OscConfig+0x162>
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	2b18      	cmp	r3, #24
 8007a4a:	d12d      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x1b4>
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d128      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a56:	4b52      	ldr	r3, [pc, #328]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_RCC_OscConfig+0x17a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e310      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6e:	f7ff f97b 	bl	8006d68 <HAL_GetREVID>
 8007a72:	4602      	mov	r2, r0
 8007a74:	f241 0303 	movw	r3, #4099	; 0x1003
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d80a      	bhi.n	8007a92 <HAL_RCC_OscConfig+0x19e>
 8007a7c:	4b48      	ldr	r3, [pc, #288]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	031b      	lsls	r3, r3, #12
 8007a8a:	4945      	ldr	r1, [pc, #276]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a90:	e060      	b.n	8007b54 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a92:	4b43      	ldr	r3, [pc, #268]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	061b      	lsls	r3, r3, #24
 8007aa0:	493f      	ldr	r1, [pc, #252]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aa6:	e055      	b.n	8007b54 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d038      	beq.n	8007b22 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ab0:	4b3b      	ldr	r3, [pc, #236]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f023 0219 	bic.w	r2, r3, #25
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	4938      	ldr	r1, [pc, #224]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac2:	f7ff f923 	bl	8006d0c <HAL_GetTick>
 8007ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ac8:	e008      	b.n	8007adc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007aca:	f7ff f91f 	bl	8006d0c <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e2d9      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007adc:	4b30      	ldr	r3, [pc, #192]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0f0      	beq.n	8007aca <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae8:	f7ff f93e 	bl	8006d68 <HAL_GetREVID>
 8007aec:	4602      	mov	r2, r0
 8007aee:	f241 0303 	movw	r3, #4099	; 0x1003
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d80a      	bhi.n	8007b0c <HAL_RCC_OscConfig+0x218>
 8007af6:	4b2a      	ldr	r3, [pc, #168]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	031b      	lsls	r3, r3, #12
 8007b04:	4926      	ldr	r1, [pc, #152]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	604b      	str	r3, [r1, #4]
 8007b0a:	e023      	b.n	8007b54 <HAL_RCC_OscConfig+0x260>
 8007b0c:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	061b      	lsls	r3, r3, #24
 8007b1a:	4921      	ldr	r1, [pc, #132]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	604b      	str	r3, [r1, #4]
 8007b20:	e018      	b.n	8007b54 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b22:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2e:	f7ff f8ed 	bl	8006d0c <HAL_GetTick>
 8007b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b34:	e008      	b.n	8007b48 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b36:	f7ff f8e9 	bl	8006d0c <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e2a3      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b48:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f0      	bne.n	8007b36 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0310 	and.w	r3, r3, #16
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8091 	beq.w	8007c84 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b62:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d007      	beq.n	8007b88 <HAL_RCC_OscConfig+0x294>
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b18      	cmp	r3, #24
 8007b7c:	d12f      	bne.n	8007bde <HAL_RCC_OscConfig+0x2ea>
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f003 0303 	and.w	r3, r3, #3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d12a      	bne.n	8007bde <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <HAL_RCC_OscConfig+0x2ac>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x2b0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d003      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e277      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
 8007ba0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ba4:	f7ff f8e0 	bl	8006d68 <HAL_GetREVID>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	f241 0303 	movw	r3, #4099	; 0x1003
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d80a      	bhi.n	8007bc8 <HAL_RCC_OscConfig+0x2d4>
 8007bb2:	4ba2      	ldr	r3, [pc, #648]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	069b      	lsls	r3, r3, #26
 8007bc0:	499e      	ldr	r1, [pc, #632]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bc6:	e05d      	b.n	8007c84 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bc8:	4b9c      	ldr	r3, [pc, #624]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	061b      	lsls	r3, r3, #24
 8007bd6:	4999      	ldr	r1, [pc, #612]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bdc:	e052      	b.n	8007c84 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d035      	beq.n	8007c52 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007be6:	4b95      	ldr	r3, [pc, #596]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a94      	ldr	r2, [pc, #592]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf2:	f7ff f88b 	bl	8006d0c <HAL_GetTick>
 8007bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007bfa:	f7ff f887 	bl	8006d0c <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e241      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c0c:	4b8b      	ldr	r3, [pc, #556]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c18:	f7ff f8a6 	bl	8006d68 <HAL_GetREVID>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d80a      	bhi.n	8007c3c <HAL_RCC_OscConfig+0x348>
 8007c26:	4b85      	ldr	r3, [pc, #532]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	069b      	lsls	r3, r3, #26
 8007c34:	4981      	ldr	r1, [pc, #516]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	604b      	str	r3, [r1, #4]
 8007c3a:	e023      	b.n	8007c84 <HAL_RCC_OscConfig+0x390>
 8007c3c:	4b7f      	ldr	r3, [pc, #508]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	061b      	lsls	r3, r3, #24
 8007c4a:	497c      	ldr	r1, [pc, #496]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60cb      	str	r3, [r1, #12]
 8007c50:	e018      	b.n	8007c84 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007c52:	4b7a      	ldr	r3, [pc, #488]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a79      	ldr	r2, [pc, #484]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5e:	f7ff f855 	bl	8006d0c <HAL_GetTick>
 8007c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c64:	e008      	b.n	8007c78 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007c66:	f7ff f851 	bl	8006d0c <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e20b      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c78:	4b70      	ldr	r3, [pc, #448]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1f0      	bne.n	8007c66 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d036      	beq.n	8007cfe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d019      	beq.n	8007ccc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c98:	4b68      	ldr	r3, [pc, #416]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9c:	4a67      	ldr	r2, [pc, #412]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca4:	f7ff f832 	bl	8006d0c <HAL_GetTick>
 8007ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cac:	f7ff f82e 	bl	8006d0c <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e1e8      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007cbe:	4b5f      	ldr	r3, [pc, #380]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <HAL_RCC_OscConfig+0x3b8>
 8007cca:	e018      	b.n	8007cfe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ccc:	4b5b      	ldr	r3, [pc, #364]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd0:	4a5a      	ldr	r2, [pc, #360]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd8:	f7ff f818 	bl	8006d0c <HAL_GetTick>
 8007cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cde:	e008      	b.n	8007cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ce0:	f7ff f814 	bl	8006d0c <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e1ce      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cf2:	4b52      	ldr	r3, [pc, #328]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f0      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d036      	beq.n	8007d78 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d019      	beq.n	8007d46 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d12:	4b4a      	ldr	r3, [pc, #296]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a49      	ldr	r2, [pc, #292]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d1e:	f7fe fff5 	bl	8006d0c <HAL_GetTick>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007d26:	f7fe fff1 	bl	8006d0c <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e1ab      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d38:	4b40      	ldr	r3, [pc, #256]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0f0      	beq.n	8007d26 <HAL_RCC_OscConfig+0x432>
 8007d44:	e018      	b.n	8007d78 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d46:	4b3d      	ldr	r3, [pc, #244]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a3c      	ldr	r2, [pc, #240]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d52:	f7fe ffdb 	bl	8006d0c <HAL_GetTick>
 8007d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d58:	e008      	b.n	8007d6c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007d5a:	f7fe ffd7 	bl	8006d0c <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e191      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d6c:	4b33      	ldr	r3, [pc, #204]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f0      	bne.n	8007d5a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8086 	beq.w	8007e92 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d86:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <HAL_RCC_OscConfig+0x54c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a2d      	ldr	r2, [pc, #180]	; (8007e40 <HAL_RCC_OscConfig+0x54c>)
 8007d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d92:	f7fe ffbb 	bl	8006d0c <HAL_GetTick>
 8007d96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d98:	e008      	b.n	8007dac <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d9a:	f7fe ffb7 	bl	8006d0c <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b64      	cmp	r3, #100	; 0x64
 8007da6:	d901      	bls.n	8007dac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e171      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dac:	4b24      	ldr	r3, [pc, #144]	; (8007e40 <HAL_RCC_OscConfig+0x54c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0f0      	beq.n	8007d9a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d106      	bne.n	8007dce <HAL_RCC_OscConfig+0x4da>
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	6713      	str	r3, [r2, #112]	; 0x70
 8007dcc:	e02d      	b.n	8007e2a <HAL_RCC_OscConfig+0x536>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10c      	bne.n	8007df0 <HAL_RCC_OscConfig+0x4fc>
 8007dd6:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dda:	4a18      	ldr	r2, [pc, #96]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	6713      	str	r3, [r2, #112]	; 0x70
 8007de2:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de6:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007de8:	f023 0304 	bic.w	r3, r3, #4
 8007dec:	6713      	str	r3, [r2, #112]	; 0x70
 8007dee:	e01c      	b.n	8007e2a <HAL_RCC_OscConfig+0x536>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2b05      	cmp	r3, #5
 8007df6:	d10c      	bne.n	8007e12 <HAL_RCC_OscConfig+0x51e>
 8007df8:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfc:	4a0f      	ldr	r2, [pc, #60]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007dfe:	f043 0304 	orr.w	r3, r3, #4
 8007e02:	6713      	str	r3, [r2, #112]	; 0x70
 8007e04:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e08:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e10:	e00b      	b.n	8007e2a <HAL_RCC_OscConfig+0x536>
 8007e12:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e16:	4a09      	ldr	r2, [pc, #36]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e1e:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e22:	4a06      	ldr	r2, [pc, #24]	; (8007e3c <HAL_RCC_OscConfig+0x548>)
 8007e24:	f023 0304 	bic.w	r3, r3, #4
 8007e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01a      	beq.n	8007e68 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e32:	f7fe ff6b 	bl	8006d0c <HAL_GetTick>
 8007e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e38:	e00f      	b.n	8007e5a <HAL_RCC_OscConfig+0x566>
 8007e3a:	bf00      	nop
 8007e3c:	58024400 	.word	0x58024400
 8007e40:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e44:	f7fe ff62 	bl	8006d0c <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e11a      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e5a:	4b8f      	ldr	r3, [pc, #572]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0ee      	beq.n	8007e44 <HAL_RCC_OscConfig+0x550>
 8007e66:	e014      	b.n	8007e92 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e68:	f7fe ff50 	bl	8006d0c <HAL_GetTick>
 8007e6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e6e:	e00a      	b.n	8007e86 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e70:	f7fe ff4c 	bl	8006d0c <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e104      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e86:	4b84      	ldr	r3, [pc, #528]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1ee      	bne.n	8007e70 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 80f9 	beq.w	800808e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e9c:	4b7e      	ldr	r3, [pc, #504]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ea4:	2b18      	cmp	r3, #24
 8007ea6:	f000 80b4 	beq.w	8008012 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	f040 8095 	bne.w	8007fde <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb4:	4b78      	ldr	r3, [pc, #480]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a77      	ldr	r2, [pc, #476]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec0:	f7fe ff24 	bl	8006d0c <HAL_GetTick>
 8007ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ec8:	f7fe ff20 	bl	8006d0c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e0da      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eda:	4b6f      	ldr	r3, [pc, #444]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f0      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ee6:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eea:	4b6c      	ldr	r3, [pc, #432]	; (800809c <HAL_RCC_OscConfig+0x7a8>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007ef6:	0112      	lsls	r2, r2, #4
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	4967      	ldr	r1, [pc, #412]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	628b      	str	r3, [r1, #40]	; 0x28
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	3b01      	subs	r3, #1
 8007f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	025b      	lsls	r3, r3, #9
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	041b      	lsls	r3, r3, #16
 8007f1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	061b      	lsls	r3, r3, #24
 8007f2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f30:	4959      	ldr	r1, [pc, #356]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007f36:	4b58      	ldr	r3, [pc, #352]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	4a57      	ldr	r2, [pc, #348]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f3c:	f023 0301 	bic.w	r3, r3, #1
 8007f40:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f42:	4b55      	ldr	r3, [pc, #340]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f46:	4b56      	ldr	r3, [pc, #344]	; (80080a0 <HAL_RCC_OscConfig+0x7ac>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f4e:	00d2      	lsls	r2, r2, #3
 8007f50:	4951      	ldr	r1, [pc, #324]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007f56:	4b50      	ldr	r3, [pc, #320]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	f023 020c 	bic.w	r2, r3, #12
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	494d      	ldr	r1, [pc, #308]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007f68:	4b4b      	ldr	r3, [pc, #300]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	f023 0202 	bic.w	r2, r3, #2
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f74:	4948      	ldr	r1, [pc, #288]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f7a:	4b47      	ldr	r3, [pc, #284]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	4a46      	ldr	r2, [pc, #280]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f86:	4b44      	ldr	r3, [pc, #272]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	4a43      	ldr	r2, [pc, #268]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f92:	4b41      	ldr	r3, [pc, #260]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f96:	4a40      	ldr	r2, [pc, #256]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007f9e:	4b3e      	ldr	r3, [pc, #248]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	4a3d      	ldr	r2, [pc, #244]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007faa:	4b3b      	ldr	r3, [pc, #236]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a3a      	ldr	r2, [pc, #232]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb6:	f7fe fea9 	bl	8006d0c <HAL_GetTick>
 8007fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fbe:	f7fe fea5 	bl	8006d0c <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e05f      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fd0:	4b31      	ldr	r3, [pc, #196]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d0f0      	beq.n	8007fbe <HAL_RCC_OscConfig+0x6ca>
 8007fdc:	e057      	b.n	800808e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fde:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2d      	ldr	r2, [pc, #180]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8007fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fea:	f7fe fe8f 	bl	8006d0c <HAL_GetTick>
 8007fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ff2:	f7fe fe8b 	bl	8006d0c <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e045      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008004:	4b24      	ldr	r3, [pc, #144]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1f0      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x6fe>
 8008010:	e03d      	b.n	800808e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008012:	4b21      	ldr	r3, [pc, #132]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008018:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <HAL_RCC_OscConfig+0x7a4>)
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b01      	cmp	r3, #1
 8008024:	d031      	beq.n	800808a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f003 0203 	and.w	r2, r3, #3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008030:	429a      	cmp	r2, r3
 8008032:	d12a      	bne.n	800808a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	091b      	lsrs	r3, r3, #4
 8008038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008040:	429a      	cmp	r2, r3
 8008042:	d122      	bne.n	800808a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008050:	429a      	cmp	r2, r3
 8008052:	d11a      	bne.n	800808a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	0a5b      	lsrs	r3, r3, #9
 8008058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008062:	429a      	cmp	r2, r3
 8008064:	d111      	bne.n	800808a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	0c1b      	lsrs	r3, r3, #16
 800806a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008074:	429a      	cmp	r2, r3
 8008076:	d108      	bne.n	800808a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008084:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008086:	429a      	cmp	r2, r3
 8008088:	d001      	beq.n	800808e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3730      	adds	r7, #48	; 0x30
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	58024400 	.word	0x58024400
 800809c:	fffffc0c 	.word	0xfffffc0c
 80080a0:	ffff0007 	.word	0xffff0007

080080a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e18d      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080b8:	4b8a      	ldr	r3, [pc, #552]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 030f 	and.w	r3, r3, #15
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d910      	bls.n	80080e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080c6:	4b87      	ldr	r3, [pc, #540]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f023 020f 	bic.w	r2, r3, #15
 80080ce:	4985      	ldr	r1, [pc, #532]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080d6:	4b83      	ldr	r3, [pc, #524]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d001      	beq.n	80080e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e175      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d010      	beq.n	8008116 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691a      	ldr	r2, [r3, #16]
 80080f8:	4b7b      	ldr	r3, [pc, #492]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008100:	429a      	cmp	r2, r3
 8008102:	d908      	bls.n	8008116 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008104:	4b78      	ldr	r3, [pc, #480]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	4975      	ldr	r1, [pc, #468]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008112:	4313      	orrs	r3, r2
 8008114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d010      	beq.n	8008144 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695a      	ldr	r2, [r3, #20]
 8008126:	4b70      	ldr	r3, [pc, #448]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800812e:	429a      	cmp	r2, r3
 8008130:	d908      	bls.n	8008144 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008132:	4b6d      	ldr	r3, [pc, #436]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	496a      	ldr	r1, [pc, #424]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008140:	4313      	orrs	r3, r2
 8008142:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b00      	cmp	r3, #0
 800814e:	d010      	beq.n	8008172 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	4b64      	ldr	r3, [pc, #400]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800815c:	429a      	cmp	r2, r3
 800815e:	d908      	bls.n	8008172 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008160:	4b61      	ldr	r3, [pc, #388]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	495e      	ldr	r1, [pc, #376]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 800816e:	4313      	orrs	r3, r2
 8008170:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d010      	beq.n	80081a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69da      	ldr	r2, [r3, #28]
 8008182:	4b59      	ldr	r3, [pc, #356]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800818a:	429a      	cmp	r2, r3
 800818c:	d908      	bls.n	80081a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800818e:	4b56      	ldr	r3, [pc, #344]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	4953      	ldr	r1, [pc, #332]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 800819c:	4313      	orrs	r3, r2
 800819e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d010      	beq.n	80081ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	4b4d      	ldr	r3, [pc, #308]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d908      	bls.n	80081ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081bc:	4b4a      	ldr	r3, [pc, #296]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f023 020f 	bic.w	r2, r3, #15
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	4947      	ldr	r1, [pc, #284]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d055      	beq.n	8008286 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80081da:	4b43      	ldr	r3, [pc, #268]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	4940      	ldr	r1, [pc, #256]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d107      	bne.n	8008204 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081f4:	4b3c      	ldr	r3, [pc, #240]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d121      	bne.n	8008244 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e0e7      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d107      	bne.n	800821c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800820c:	4b36      	ldr	r3, [pc, #216]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d115      	bne.n	8008244 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e0db      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d107      	bne.n	8008234 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008224:	4b30      	ldr	r3, [pc, #192]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e0cf      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008234:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e0c7      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008244:	4b28      	ldr	r3, [pc, #160]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f023 0207 	bic.w	r2, r3, #7
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4925      	ldr	r1, [pc, #148]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008252:	4313      	orrs	r3, r2
 8008254:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008256:	f7fe fd59 	bl	8006d0c <HAL_GetTick>
 800825a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800825c:	e00a      	b.n	8008274 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800825e:	f7fe fd55 	bl	8006d0c <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	f241 3288 	movw	r2, #5000	; 0x1388
 800826c:	4293      	cmp	r3, r2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e0af      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008274:	4b1c      	ldr	r3, [pc, #112]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	429a      	cmp	r2, r3
 8008284:	d1eb      	bne.n	800825e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d010      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	429a      	cmp	r2, r3
 80082a0:	d208      	bcs.n	80082b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082a2:	4b11      	ldr	r3, [pc, #68]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f023 020f 	bic.w	r2, r3, #15
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	490e      	ldr	r1, [pc, #56]	; (80082e8 <HAL_RCC_ClockConfig+0x244>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082b4:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d214      	bcs.n	80082ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c2:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f023 020f 	bic.w	r2, r3, #15
 80082ca:	4906      	ldr	r1, [pc, #24]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082d2:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <HAL_RCC_ClockConfig+0x240>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d005      	beq.n	80082ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e077      	b.n	80083d4 <HAL_RCC_ClockConfig+0x330>
 80082e4:	52002000 	.word	0x52002000
 80082e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d010      	beq.n	800831a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	4b37      	ldr	r3, [pc, #220]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008304:	429a      	cmp	r2, r3
 8008306:	d208      	bcs.n	800831a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008308:	4b34      	ldr	r3, [pc, #208]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	4931      	ldr	r1, [pc, #196]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 8008316:	4313      	orrs	r3, r2
 8008318:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d010      	beq.n	8008348 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695a      	ldr	r2, [r3, #20]
 800832a:	4b2c      	ldr	r3, [pc, #176]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008332:	429a      	cmp	r2, r3
 8008334:	d208      	bcs.n	8008348 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008336:	4b29      	ldr	r3, [pc, #164]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	4926      	ldr	r1, [pc, #152]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 8008344:	4313      	orrs	r3, r2
 8008346:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	d010      	beq.n	8008376 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699a      	ldr	r2, [r3, #24]
 8008358:	4b20      	ldr	r3, [pc, #128]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008360:	429a      	cmp	r2, r3
 8008362:	d208      	bcs.n	8008376 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008364:	4b1d      	ldr	r3, [pc, #116]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	491a      	ldr	r1, [pc, #104]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 8008372:	4313      	orrs	r3, r2
 8008374:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69da      	ldr	r2, [r3, #28]
 8008386:	4b15      	ldr	r3, [pc, #84]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800838e:	429a      	cmp	r2, r3
 8008390:	d208      	bcs.n	80083a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008392:	4b12      	ldr	r3, [pc, #72]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	490f      	ldr	r1, [pc, #60]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80083a4:	f000 f822 	bl	80083ec <HAL_RCC_GetSysClockFreq>
 80083a8:	4601      	mov	r1, r0
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <HAL_RCC_ClockConfig+0x338>)
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	f003 030f 	and.w	r3, r3, #15
 80083b4:	4a0a      	ldr	r2, [pc, #40]	; (80083e0 <HAL_RCC_ClockConfig+0x33c>)
 80083b6:	5cd3      	ldrb	r3, [r2, r3]
 80083b8:	f003 031f 	and.w	r3, r3, #31
 80083bc:	fa21 f303 	lsr.w	r3, r1, r3
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <HAL_RCC_ClockConfig+0x340>)
 80083c2:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80083c4:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <HAL_RCC_ClockConfig+0x344>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fc55 	bl	8006c78 <HAL_InitTick>
 80083ce:	4603      	mov	r3, r0
 80083d0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80083d2:	7afb      	ldrb	r3, [r7, #11]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	58024400 	.word	0x58024400
 80083e0:	08011648 	.word	0x08011648
 80083e4:	24000028 	.word	0x24000028
 80083e8:	24000108 	.word	0x24000108

080083ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	; 0x24
 80083f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083f2:	4baf      	ldr	r3, [pc, #700]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083fa:	2b18      	cmp	r3, #24
 80083fc:	f200 814e 	bhi.w	800869c <HAL_RCC_GetSysClockFreq+0x2b0>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	0800846d 	.word	0x0800846d
 800840c:	0800869d 	.word	0x0800869d
 8008410:	0800869d 	.word	0x0800869d
 8008414:	0800869d 	.word	0x0800869d
 8008418:	0800869d 	.word	0x0800869d
 800841c:	0800869d 	.word	0x0800869d
 8008420:	0800869d 	.word	0x0800869d
 8008424:	0800869d 	.word	0x0800869d
 8008428:	08008493 	.word	0x08008493
 800842c:	0800869d 	.word	0x0800869d
 8008430:	0800869d 	.word	0x0800869d
 8008434:	0800869d 	.word	0x0800869d
 8008438:	0800869d 	.word	0x0800869d
 800843c:	0800869d 	.word	0x0800869d
 8008440:	0800869d 	.word	0x0800869d
 8008444:	0800869d 	.word	0x0800869d
 8008448:	08008499 	.word	0x08008499
 800844c:	0800869d 	.word	0x0800869d
 8008450:	0800869d 	.word	0x0800869d
 8008454:	0800869d 	.word	0x0800869d
 8008458:	0800869d 	.word	0x0800869d
 800845c:	0800869d 	.word	0x0800869d
 8008460:	0800869d 	.word	0x0800869d
 8008464:	0800869d 	.word	0x0800869d
 8008468:	0800849f 	.word	0x0800849f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800846c:	4b90      	ldr	r3, [pc, #576]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008478:	4b8d      	ldr	r3, [pc, #564]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	08db      	lsrs	r3, r3, #3
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	4a8c      	ldr	r2, [pc, #560]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008484:	fa22 f303 	lsr.w	r3, r2, r3
 8008488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800848a:	e10a      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800848c:	4b89      	ldr	r3, [pc, #548]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800848e:	61bb      	str	r3, [r7, #24]
    break;
 8008490:	e107      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008492:	4b89      	ldr	r3, [pc, #548]	; (80086b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008494:	61bb      	str	r3, [r7, #24]
    break;
 8008496:	e104      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008498:	4b88      	ldr	r3, [pc, #544]	; (80086bc <HAL_RCC_GetSysClockFreq+0x2d0>)
 800849a:	61bb      	str	r3, [r7, #24]
    break;
 800849c:	e101      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800849e:	4b84      	ldr	r3, [pc, #528]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80084a8:	4b81      	ldr	r3, [pc, #516]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	091b      	lsrs	r3, r3, #4
 80084ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80084b4:	4b7e      	ldr	r3, [pc, #504]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80084be:	4b7c      	ldr	r3, [pc, #496]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80da 	beq.w	8008696 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d05a      	beq.n	800859e <HAL_RCC_GetSysClockFreq+0x1b2>
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d302      	bcc.n	80084f2 <HAL_RCC_GetSysClockFreq+0x106>
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d078      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80084f0:	e099      	b.n	8008626 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084f2:	4b6f      	ldr	r3, [pc, #444]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d02d      	beq.n	800855a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084fe:	4b6c      	ldr	r3, [pc, #432]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	4a6a      	ldr	r2, [pc, #424]	; (80086b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800850a:	fa22 f303 	lsr.w	r3, r2, r3
 800850e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	ee07 3a90 	vmov	s15, r3
 8008520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008528:	4b61      	ldr	r3, [pc, #388]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008538:	ed97 6a02 	vldr	s12, [r7, #8]
 800853c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80086c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800854c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008554:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008558:	e087      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008564:	eddf 6a57 	vldr	s13, [pc, #348]	; 80086c4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8008568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856c:	4b50      	ldr	r3, [pc, #320]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008580:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80086c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008598:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800859c:	e065      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	ee07 3a90 	vmov	s15, r3
 80085a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80086c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80085ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b0:	4b3f      	ldr	r3, [pc, #252]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80085c4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80086c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80085c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085e0:	e043      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	ee07 3a90 	vmov	s15, r3
 80085e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ec:	eddf 6a37 	vldr	s13, [pc, #220]	; 80086cc <HAL_RCC_GetSysClockFreq+0x2e0>
 80085f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f4:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008604:	ed97 6a02 	vldr	s12, [r7, #8]
 8008608:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80086c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800860c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008624:	e021      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008630:	eddf 6a25 	vldr	s13, [pc, #148]	; 80086c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008638:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008648:	ed97 6a02 	vldr	s12, [r7, #8]
 800864c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80086c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008664:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008668:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800866a:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	0a5b      	lsrs	r3, r3, #9
 8008670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008674:	3301      	adds	r3, #1
 8008676:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008682:	edd7 6a07 	vldr	s13, [r7, #28]
 8008686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868e:	ee17 3a90 	vmov	r3, s15
 8008692:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008694:	e005      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	61bb      	str	r3, [r7, #24]
    break;
 800869a:	e002      	b.n	80086a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800869c:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800869e:	61bb      	str	r3, [r7, #24]
    break;
 80086a0:	bf00      	nop
  }

  return sysclockfreq;
 80086a2:	69bb      	ldr	r3, [r7, #24]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3724      	adds	r7, #36	; 0x24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	58024400 	.word	0x58024400
 80086b4:	03d09000 	.word	0x03d09000
 80086b8:	003d0900 	.word	0x003d0900
 80086bc:	017d7840 	.word	0x017d7840
 80086c0:	46000000 	.word	0x46000000
 80086c4:	4c742400 	.word	0x4c742400
 80086c8:	4a742400 	.word	0x4a742400
 80086cc:	4bbebc20 	.word	0x4bbebc20

080086d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086d4:	f001 f9d0 	bl	8009a78 <HAL_RCCEx_GetD1SysClockFreq>
 80086d8:	4601      	mov	r1, r0
 80086da:	4b08      	ldr	r3, [pc, #32]	; (80086fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	4a07      	ldr	r2, [pc, #28]	; (8008700 <HAL_RCC_GetHCLKFreq+0x30>)
 80086e4:	5cd3      	ldrb	r3, [r2, r3]
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	fa21 f303 	lsr.w	r3, r1, r3
 80086ee:	4a05      	ldr	r2, [pc, #20]	; (8008704 <HAL_RCC_GetHCLKFreq+0x34>)
 80086f0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 80086f2:	4b04      	ldr	r3, [pc, #16]	; (8008704 <HAL_RCC_GetHCLKFreq+0x34>)
 80086f4:	681b      	ldr	r3, [r3, #0]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
 8008700:	08011648 	.word	0x08011648
 8008704:	2400002c 	.word	0x2400002c

08008708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800870c:	f7ff ffe0 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 8008710:	4601      	mov	r1, r0
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	091b      	lsrs	r3, r3, #4
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	4a04      	ldr	r2, [pc, #16]	; (8008730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800871e:	5cd3      	ldrb	r3, [r2, r3]
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> POSITION_VAL(RCC_CDCFGR2_CDPPRE1_0)]);
#endif
}
 8008728:	4618      	mov	r0, r3
 800872a:	bd80      	pop	{r7, pc}
 800872c:	58024400 	.word	0x58024400
 8008730:	08011648 	.word	0x08011648

08008734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008738:	f7ff ffca 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 800873c:	4601      	mov	r1, r0
 800873e:	4b06      	ldr	r3, [pc, #24]	; (8008758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	4a04      	ldr	r2, [pc, #16]	; (800875c <HAL_RCC_GetPCLK2Freq+0x28>)
 800874a:	5cd3      	ldrb	r3, [r2, r3]
 800874c:	f003 031f 	and.w	r3, r3, #31
 8008750:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008754:	4618      	mov	r0, r3
 8008756:	bd80      	pop	{r7, pc}
 8008758:	58024400 	.word	0x58024400
 800875c:	08011648 	.word	0x08011648

08008760 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008768:	2300      	movs	r3, #0
 800876a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800876c:	2300      	movs	r3, #0
 800876e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d03d      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008784:	d013      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800878a:	d802      	bhi.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008790:	e01f      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008796:	d013      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800879c:	d01c      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800879e:	e018      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a0:	4baf      	ldr	r3, [pc, #700]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	4aae      	ldr	r2, [pc, #696]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80087ac:	e015      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3304      	adds	r3, #4
 80087b2:	2102      	movs	r1, #2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 f97b 	bl	8009ab0 <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80087be:	e00c      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3324      	adds	r3, #36	; 0x24
 80087c4:	2102      	movs	r1, #2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 fa24 	bl	8009c14 <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80087d0:	e003      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
      break;
 80087d6:	e000      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80087d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087e0:	4b9f      	ldr	r3, [pc, #636]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ec:	499c      	ldr	r1, [pc, #624]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	650b      	str	r3, [r1, #80]	; 0x50
 80087f2:	e001      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008800:	2b00      	cmp	r3, #0
 8008802:	d03d      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008808:	2b04      	cmp	r3, #4
 800880a:	d826      	bhi.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008829 	.word	0x08008829
 8008818:	08008837 	.word	0x08008837
 800881c:	08008849 	.word	0x08008849
 8008820:	08008861 	.word	0x08008861
 8008824:	08008861 	.word	0x08008861
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008828:	4b8d      	ldr	r3, [pc, #564]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	4a8c      	ldr	r2, [pc, #560]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800882e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008834:	e015      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3304      	adds	r3, #4
 800883a:	2100      	movs	r1, #0
 800883c:	4618      	mov	r0, r3
 800883e:	f001 f937 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008842:	4603      	mov	r3, r0
 8008844:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008846:	e00c      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3324      	adds	r3, #36	; 0x24
 800884c:	2100      	movs	r1, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f001 f9e0 	bl	8009c14 <RCCEx_PLL3_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008858:	e003      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	75fb      	strb	r3, [r7, #23]
      break;
 800885e:	e000      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008868:	4b7d      	ldr	r3, [pc, #500]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800886a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886c:	f023 0207 	bic.w	r2, r3, #7
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008874:	497a      	ldr	r1, [pc, #488]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008876:	4313      	orrs	r3, r2
 8008878:	650b      	str	r3, [r1, #80]	; 0x50
 800887a:	e001      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008888:	2b00      	cmp	r3, #0
 800888a:	d03e      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	2b80      	cmp	r3, #128	; 0x80
 8008892:	d01c      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008894:	2b80      	cmp	r3, #128	; 0x80
 8008896:	d804      	bhi.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800889c:	2b40      	cmp	r3, #64	; 0x40
 800889e:	d00d      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80088a0:	e01e      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80088a2:	2bc0      	cmp	r3, #192	; 0xc0
 80088a4:	d01f      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80088a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088aa:	d01e      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80088ac:	e018      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ae:	4b6c      	ldr	r3, [pc, #432]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	4a6b      	ldr	r2, [pc, #428]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80088ba:	e017      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3304      	adds	r3, #4
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f001 f8f4 	bl	8009ab0 <RCCEx_PLL2_Config>
 80088c8:	4603      	mov	r3, r0
 80088ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80088cc:	e00e      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3324      	adds	r3, #36	; 0x24
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 f99d 	bl	8009c14 <RCCEx_PLL3_Config>
 80088da:	4603      	mov	r3, r0
 80088dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80088de:	e005      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	75fb      	strb	r3, [r7, #23]
      break;
 80088e4:	e002      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80088e6:	bf00      	nop
 80088e8:	e000      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80088ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d109      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088f2:	4b5b      	ldr	r3, [pc, #364]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fe:	4958      	ldr	r1, [pc, #352]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008900:	4313      	orrs	r3, r2
 8008902:	650b      	str	r3, [r1, #80]	; 0x50
 8008904:	e001      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008912:	2b00      	cmp	r3, #0
 8008914:	d044      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800891c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008920:	d01f      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008926:	d805      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800892c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008930:	d00e      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008932:	e01f      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008934:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008938:	d01f      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800893a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800893e:	d01e      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008940:	e018      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008942:	4b47      	ldr	r3, [pc, #284]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	4a46      	ldr	r2, [pc, #280]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800894e:	e017      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	2100      	movs	r1, #0
 8008956:	4618      	mov	r0, r3
 8008958:	f001 f8aa 	bl	8009ab0 <RCCEx_PLL2_Config>
 800895c:	4603      	mov	r3, r0
 800895e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008960:	e00e      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3324      	adds	r3, #36	; 0x24
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f001 f953 	bl	8009c14 <RCCEx_PLL3_Config>
 800896e:	4603      	mov	r3, r0
 8008970:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008972:	e005      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
      break;
 8008978:	e002      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800897a:	bf00      	nop
 800897c:	e000      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800897e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008986:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008994:	4932      	ldr	r1, [pc, #200]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008996:	4313      	orrs	r3, r2
 8008998:	658b      	str	r3, [r1, #88]	; 0x58
 800899a:	e001      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d044      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089b6:	d01f      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80089b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089bc:	d805      	bhi.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80089c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089c6:	d00e      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80089c8:	e01f      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80089ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089ce:	d01f      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80089d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089d4:	d01e      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80089d6:	e018      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d8:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	4a20      	ldr	r2, [pc, #128]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089e4:	e017      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	2100      	movs	r1, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 f85f 	bl	8009ab0 <RCCEx_PLL2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80089f6:	e00e      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3324      	adds	r3, #36	; 0x24
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 f908 	bl	8009c14 <RCCEx_PLL3_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a08:	e005      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0e:	e002      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008a10:	bf00      	nop
 8008a12:	e000      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a1c:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a20:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a2a:	490d      	ldr	r1, [pc, #52]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	658b      	str	r3, [r1, #88]	; 0x58
 8008a30:	e001      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d035      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	d00c      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008a4a:	2b10      	cmp	r3, #16
 8008a4c:	d802      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01b      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008a52:	e017      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d00c      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008a58:	2b30      	cmp	r3, #48	; 0x30
 8008a5a:	d018      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008a5c:	e012      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008a5e:	bf00      	nop
 8008a60:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a64:	4baf      	ldr	r3, [pc, #700]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	4aae      	ldr	r2, [pc, #696]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a70:	e00e      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3304      	adds	r3, #4
 8008a76:	2102      	movs	r1, #2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 f819 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a82:	e005      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	75fb      	strb	r3, [r7, #23]
      break;
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a96:	4ba3      	ldr	r3, [pc, #652]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa2:	49a0      	ldr	r1, [pc, #640]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008aa8:	e001      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d042      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac2:	d01f      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac8:	d805      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad2:	d00e      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008ad4:	e01f      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008ad6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ada:	d01f      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ae0:	d01e      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008ae2:	e018      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae4:	4b8f      	ldr	r3, [pc, #572]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4a8e      	ldr	r2, [pc, #568]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008af0:	e017      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3304      	adds	r3, #4
 8008af6:	2100      	movs	r1, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 ffd9 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008b02:	e00e      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3324      	adds	r3, #36	; 0x24
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 f882 	bl	8009c14 <RCCEx_PLL3_Config>
 8008b10:	4603      	mov	r3, r0
 8008b12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008b14:	e005      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1a:	e002      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008b1c:	bf00      	nop
 8008b1e:	e000      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d109      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b28:	4b7e      	ldr	r3, [pc, #504]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b34:	497b      	ldr	r1, [pc, #492]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	650b      	str	r3, [r1, #80]	; 0x50
 8008b3a:	e001      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d042      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b54:	d01b      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5a:	d805      	bhi.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d022      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b64:	d00a      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008b66:	e01b      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b6c:	d01d      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008b6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b72:	d01c      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008b74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b78:	d01b      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008b7a:	e011      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	2101      	movs	r1, #1
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 ff94 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b8c:	e012      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3324      	adds	r3, #36	; 0x24
 8008b92:	2101      	movs	r1, #1
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 f83d 	bl	8009c14 <RCCEx_PLL3_Config>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b9e:	e009      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba4:	e006      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008ba6:	bf00      	nop
 8008ba8:	e004      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008baa:	bf00      	nop
 8008bac:	e002      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008bae:	bf00      	nop
 8008bb0:	e000      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d109      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008bba:	4b5a      	ldr	r3, [pc, #360]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bbe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc6:	4957      	ldr	r1, [pc, #348]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	650b      	str	r3, [r1, #80]	; 0x50
 8008bcc:	e001      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d044      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be8:	d01b      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bee:	d805      	bhi.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d022      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008bf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bf8:	d00a      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008bfa:	e01b      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c00:	d01d      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c06:	d01c      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008c08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c0c:	d01b      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008c0e:	e011      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3304      	adds	r3, #4
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 ff4a 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c20:	e012      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3324      	adds	r3, #36	; 0x24
 8008c26:	2101      	movs	r1, #1
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fff3 	bl	8009c14 <RCCEx_PLL3_Config>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c32:	e009      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	75fb      	strb	r3, [r7, #23]
      break;
 8008c38:	e006      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008c3a:	bf00      	nop
 8008c3c:	e004      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008c3e:	bf00      	nop
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c4e:	4b35      	ldr	r3, [pc, #212]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c5c:	4931      	ldr	r1, [pc, #196]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	658b      	str	r3, [r1, #88]	; 0x58
 8008c62:	e001      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d02d      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c7c:	d005      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c82:	d009      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d013      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008c88:	e00f      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c8a:	4b26      	ldr	r3, [pc, #152]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	4a25      	ldr	r2, [pc, #148]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c96:	e00c      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 ff06 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008ca8:	e003      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]
      break;
 8008cae:	e000      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cb8:	4b1a      	ldr	r3, [pc, #104]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc4:	4917      	ldr	r1, [pc, #92]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	650b      	str	r3, [r1, #80]	; 0x50
 8008cca:	e001      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d035      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d81b      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008ce4:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cea:	bf00      	nop
 8008cec:	08008d29 	.word	0x08008d29
 8008cf0:	08008cfd 	.word	0x08008cfd
 8008cf4:	08008d0b 	.word	0x08008d0b
 8008cf8:	08008d29 	.word	0x08008d29
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfc:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4a08      	ldr	r2, [pc, #32]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d08:	e00f      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	2102      	movs	r1, #2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fecd 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d1a:	e006      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d20:	e003      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008d22:	bf00      	nop
 8008d24:	58024400 	.word	0x58024400
      break;
 8008d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008d30:	4bba      	ldr	r3, [pc, #744]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d34:	f023 0203 	bic.w	r2, r3, #3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3c:	49b7      	ldr	r1, [pc, #732]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d42:	e001      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8086 	beq.w	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d56:	4bb2      	ldr	r3, [pc, #712]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4ab1      	ldr	r2, [pc, #708]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d62:	f7fd ffd3 	bl	8006d0c <HAL_GetTick>
 8008d66:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d68:	e009      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d6a:	f7fd ffcf 	bl	8006d0c <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b64      	cmp	r3, #100	; 0x64
 8008d76:	d902      	bls.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
        break;
 8008d7c:	e005      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d7e:	4ba8      	ldr	r3, [pc, #672]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0ef      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d166      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d90:	4ba2      	ldr	r3, [pc, #648]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008d92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d9a:	4053      	eors	r3, r2
 8008d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d013      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008da4:	4b9d      	ldr	r3, [pc, #628]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008dae:	4b9b      	ldr	r3, [pc, #620]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db2:	4a9a      	ldr	r2, [pc, #616]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dba:	4b98      	ldr	r3, [pc, #608]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbe:	4a97      	ldr	r2, [pc, #604]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008dc6:	4a95      	ldr	r2, [pc, #596]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d115      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd8:	f7fd ff98 	bl	8006d0c <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dde:	e00b      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008de0:	f7fd ff94 	bl	8006d0c <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d902      	bls.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	75fb      	strb	r3, [r7, #23]
            break;
 8008df6:	e005      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008df8:	4b88      	ldr	r3, [pc, #544]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ed      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d126      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e18:	d10d      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008e1a:	4b80      	ldr	r3, [pc, #512]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e28:	0919      	lsrs	r1, r3, #4
 8008e2a:	4b7e      	ldr	r3, [pc, #504]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008e2c:	400b      	ands	r3, r1
 8008e2e:	497b      	ldr	r1, [pc, #492]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	610b      	str	r3, [r1, #16]
 8008e34:	e005      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008e36:	4b79      	ldr	r3, [pc, #484]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	4a78      	ldr	r2, [pc, #480]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e40:	6113      	str	r3, [r2, #16]
 8008e42:	4b76      	ldr	r3, [pc, #472]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e50:	4972      	ldr	r1, [pc, #456]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	670b      	str	r3, [r1, #112]	; 0x70
 8008e56:	e004      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	75bb      	strb	r3, [r7, #22]
 8008e5c:	e001      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d07d      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e72:	2b28      	cmp	r3, #40	; 0x28
 8008e74:	d866      	bhi.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008e76:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008f4b 	.word	0x08008f4b
 8008e80:	08008f45 	.word	0x08008f45
 8008e84:	08008f45 	.word	0x08008f45
 8008e88:	08008f45 	.word	0x08008f45
 8008e8c:	08008f45 	.word	0x08008f45
 8008e90:	08008f45 	.word	0x08008f45
 8008e94:	08008f45 	.word	0x08008f45
 8008e98:	08008f45 	.word	0x08008f45
 8008e9c:	08008f21 	.word	0x08008f21
 8008ea0:	08008f45 	.word	0x08008f45
 8008ea4:	08008f45 	.word	0x08008f45
 8008ea8:	08008f45 	.word	0x08008f45
 8008eac:	08008f45 	.word	0x08008f45
 8008eb0:	08008f45 	.word	0x08008f45
 8008eb4:	08008f45 	.word	0x08008f45
 8008eb8:	08008f45 	.word	0x08008f45
 8008ebc:	08008f33 	.word	0x08008f33
 8008ec0:	08008f45 	.word	0x08008f45
 8008ec4:	08008f45 	.word	0x08008f45
 8008ec8:	08008f45 	.word	0x08008f45
 8008ecc:	08008f45 	.word	0x08008f45
 8008ed0:	08008f45 	.word	0x08008f45
 8008ed4:	08008f45 	.word	0x08008f45
 8008ed8:	08008f45 	.word	0x08008f45
 8008edc:	08008f4b 	.word	0x08008f4b
 8008ee0:	08008f45 	.word	0x08008f45
 8008ee4:	08008f45 	.word	0x08008f45
 8008ee8:	08008f45 	.word	0x08008f45
 8008eec:	08008f45 	.word	0x08008f45
 8008ef0:	08008f45 	.word	0x08008f45
 8008ef4:	08008f45 	.word	0x08008f45
 8008ef8:	08008f45 	.word	0x08008f45
 8008efc:	08008f4b 	.word	0x08008f4b
 8008f00:	08008f45 	.word	0x08008f45
 8008f04:	08008f45 	.word	0x08008f45
 8008f08:	08008f45 	.word	0x08008f45
 8008f0c:	08008f45 	.word	0x08008f45
 8008f10:	08008f45 	.word	0x08008f45
 8008f14:	08008f45 	.word	0x08008f45
 8008f18:	08008f45 	.word	0x08008f45
 8008f1c:	08008f4b 	.word	0x08008f4b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3304      	adds	r3, #4
 8008f24:	2101      	movs	r1, #1
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fdc2 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f30:	e00c      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3324      	adds	r3, #36	; 0x24
 8008f36:	2101      	movs	r1, #1
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fe6b 	bl	8009c14 <RCCEx_PLL3_Config>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f42:	e003      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	75fb      	strb	r3, [r7, #23]
      break;
 8008f48:	e000      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f52:	4b32      	ldr	r3, [pc, #200]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f5e:	492f      	ldr	r1, [pc, #188]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	654b      	str	r3, [r1, #84]	; 0x54
 8008f64:	e001      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d037      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f7a:	2b05      	cmp	r3, #5
 8008f7c:	d820      	bhi.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008f7e:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008fc7 	.word	0x08008fc7
 8008f88:	08008f9d 	.word	0x08008f9d
 8008f8c:	08008faf 	.word	0x08008faf
 8008f90:	08008fc7 	.word	0x08008fc7
 8008f94:	08008fc7 	.word	0x08008fc7
 8008f98:	08008fc7 	.word	0x08008fc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 fd84 	bl	8009ab0 <RCCEx_PLL2_Config>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fac:	e00c      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3324      	adds	r3, #36	; 0x24
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fe2d 	bl	8009c14 <RCCEx_PLL3_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fbe:	e003      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d109      	bne.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd2:	f023 0207 	bic.w	r2, r3, #7
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fda:	4910      	ldr	r1, [pc, #64]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	654b      	str	r3, [r1, #84]	; 0x54
 8008fe0:	e001      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d040      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff8:	2b05      	cmp	r3, #5
 8008ffa:	d827      	bhi.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008ffc:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	08009053 	.word	0x08009053
 8009008:	08009029 	.word	0x08009029
 800900c:	0800903b 	.word	0x0800903b
 8009010:	08009053 	.word	0x08009053
 8009014:	08009053 	.word	0x08009053
 8009018:	08009053 	.word	0x08009053
 800901c:	58024400 	.word	0x58024400
 8009020:	58024800 	.word	0x58024800
 8009024:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3304      	adds	r3, #4
 800902c:	2101      	movs	r1, #1
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fd3e 	bl	8009ab0 <RCCEx_PLL2_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009038:	e00c      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3324      	adds	r3, #36	; 0x24
 800903e:	2101      	movs	r1, #1
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fde7 	bl	8009c14 <RCCEx_PLL3_Config>
 8009046:	4603      	mov	r3, r0
 8009048:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800904a:	e003      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	75fb      	strb	r3, [r7, #23]
      break;
 8009050:	e000      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009054:	7dfb      	ldrb	r3, [r7, #23]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10a      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800905a:	4bb2      	ldr	r3, [pc, #712]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800905c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905e:	f023 0207 	bic.w	r2, r3, #7
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009068:	49ae      	ldr	r1, [pc, #696]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800906a:	4313      	orrs	r3, r2
 800906c:	658b      	str	r3, [r1, #88]	; 0x58
 800906e:	e001      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0320 	and.w	r3, r3, #32
 800907c:	2b00      	cmp	r3, #0
 800907e:	d044      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908a:	d01b      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800908c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009090:	d805      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d022      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800909a:	d00a      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800909c:	e01b      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800909e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a2:	d01d      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80090a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a8:	d01c      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80090aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090ae:	d01b      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80090b0:	e011      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3304      	adds	r3, #4
 80090b6:	2100      	movs	r1, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fcf9 	bl	8009ab0 <RCCEx_PLL2_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090c2:	e012      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3324      	adds	r3, #36	; 0x24
 80090c8:	2102      	movs	r1, #2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fda2 	bl	8009c14 <RCCEx_PLL3_Config>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090d4:	e009      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	75fb      	strb	r3, [r7, #23]
      break;
 80090da:	e006      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80090dc:	bf00      	nop
 80090de:	e004      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80090e0:	bf00      	nop
 80090e2:	e002      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80090e4:	bf00      	nop
 80090e6:	e000      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80090e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090f0:	4b8c      	ldr	r3, [pc, #560]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80090f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090fe:	4989      	ldr	r1, [pc, #548]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009100:	4313      	orrs	r3, r2
 8009102:	654b      	str	r3, [r1, #84]	; 0x54
 8009104:	e001      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d044      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800911c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009120:	d01b      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009126:	d805      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d022      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800912c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009130:	d00a      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009132:	e01b      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009138:	d01d      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800913a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800913e:	d01c      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009144:	d01b      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009146:	e011      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f000 fcae 	bl	8009ab0 <RCCEx_PLL2_Config>
 8009154:	4603      	mov	r3, r0
 8009156:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009158:	e012      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3324      	adds	r3, #36	; 0x24
 800915e:	2102      	movs	r1, #2
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fd57 	bl	8009c14 <RCCEx_PLL3_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800916a:	e009      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	75fb      	strb	r3, [r7, #23]
      break;
 8009170:	e006      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009172:	bf00      	nop
 8009174:	e004      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009176:	bf00      	nop
 8009178:	e002      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800917a:	bf00      	nop
 800917c:	e000      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800917e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009186:	4b67      	ldr	r3, [pc, #412]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009194:	4963      	ldr	r1, [pc, #396]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009196:	4313      	orrs	r3, r2
 8009198:	658b      	str	r3, [r1, #88]	; 0x58
 800919a:	e001      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d044      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091b6:	d01b      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80091b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091bc:	d805      	bhi.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d022      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80091c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c6:	d00a      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80091c8:	e01b      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80091ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ce:	d01d      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80091d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091d4:	d01c      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80091d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091da:	d01b      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80091dc:	e011      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	2100      	movs	r1, #0
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fc63 	bl	8009ab0 <RCCEx_PLL2_Config>
 80091ea:	4603      	mov	r3, r0
 80091ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80091ee:	e012      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3324      	adds	r3, #36	; 0x24
 80091f4:	2102      	movs	r1, #2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fd0c 	bl	8009c14 <RCCEx_PLL3_Config>
 80091fc:	4603      	mov	r3, r0
 80091fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009200:	e009      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	75fb      	strb	r3, [r7, #23]
      break;
 8009206:	e006      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009208:	bf00      	nop
 800920a:	e004      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800921c:	4b41      	ldr	r3, [pc, #260]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800921e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009220:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800922a:	493e      	ldr	r1, [pc, #248]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800922c:	4313      	orrs	r3, r2
 800922e:	658b      	str	r3, [r1, #88]	; 0x58
 8009230:	e001      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0308 	and.w	r3, r3, #8
 800923e:	2b00      	cmp	r3, #0
 8009240:	d01a      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924c:	d10a      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3324      	adds	r3, #36	; 0x24
 8009252:	2102      	movs	r1, #2
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fcdd 	bl	8009c14 <RCCEx_PLL3_Config>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009264:	4b2f      	ldr	r3, [pc, #188]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009272:	492c      	ldr	r1, [pc, #176]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009274:	4313      	orrs	r3, r2
 8009276:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0310 	and.w	r3, r3, #16
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01a      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800928a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800928e:	d10a      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3324      	adds	r3, #36	; 0x24
 8009294:	2102      	movs	r1, #2
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fcbc 	bl	8009c14 <RCCEx_PLL3_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092a6:	4b1f      	ldr	r3, [pc, #124]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092b4:	491b      	ldr	r1, [pc, #108]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d032      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d0:	d00d      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80092d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092d6:	d016      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d111      	bne.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3304      	adds	r3, #4
 80092e0:	2100      	movs	r1, #0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fbe4 	bl	8009ab0 <RCCEx_PLL2_Config>
 80092e8:	4603      	mov	r3, r0
 80092ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092ec:	e00c      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3324      	adds	r3, #36	; 0x24
 80092f2:	2102      	movs	r1, #2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fc8d 	bl	8009c14 <RCCEx_PLL3_Config>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80092fe:	e003      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	75fb      	strb	r3, [r7, #23]
      break;
 8009304:	e000      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10c      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800930e:	4b05      	ldr	r3, [pc, #20]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009312:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800931c:	4901      	ldr	r1, [pc, #4]	; (8009324 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800931e:	4313      	orrs	r3, r2
 8009320:	658b      	str	r3, [r1, #88]	; 0x58
 8009322:	e003      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d02f      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800933e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009342:	d00c      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009344:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009348:	d015      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800934a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800934e:	d10f      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009350:	4b71      	ldr	r3, [pc, #452]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4a70      	ldr	r2, [pc, #448]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800935a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800935c:	e00c      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3324      	adds	r3, #36	; 0x24
 8009362:	2101      	movs	r1, #1
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fc55 	bl	8009c14 <RCCEx_PLL3_Config>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800936e:	e003      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
      break;
 8009374:	e000      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800937e:	4b66      	ldr	r3, [pc, #408]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800938c:	4962      	ldr	r1, [pc, #392]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800938e:	4313      	orrs	r3, r2
 8009390:	654b      	str	r3, [r1, #84]	; 0x54
 8009392:	e001      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d029      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80093ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b0:	d007      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80093b2:	e00f      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b4:	4b58      	ldr	r3, [pc, #352]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a57      	ldr	r2, [pc, #348]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80093c0:	e00b      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	2102      	movs	r1, #2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fb71 	bl	8009ab0 <RCCEx_PLL2_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80093d2:	e002      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	75fb      	strb	r3, [r7, #23]
      break;
 80093d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093e0:	4b4d      	ldr	r3, [pc, #308]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ec:	494a      	ldr	r1, [pc, #296]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093f2:	e001      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00a      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3324      	adds	r3, #36	; 0x24
 8009408:	2102      	movs	r1, #2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fc02 	bl	8009c14 <RCCEx_PLL3_Config>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d02f      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800942a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800942e:	d00c      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009434:	d802      	bhi.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d011      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800943a:	e00d      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800943c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009440:	d00f      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009446:	d00e      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009448:	e006      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800944a:	4b33      	ldr	r3, [pc, #204]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800944c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944e:	4a32      	ldr	r2, [pc, #200]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009454:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009456:	e007      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	75fb      	strb	r3, [r7, #23]
      break;
 800945c:	e004      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800945e:	bf00      	nop
 8009460:	e002      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009462:	bf00      	nop
 8009464:	e000      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d109      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800946e:	4b2a      	ldr	r3, [pc, #168]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009472:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800947a:	4927      	ldr	r1, [pc, #156]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800947c:	4313      	orrs	r3, r2
 800947e:	654b      	str	r3, [r1, #84]	; 0x54
 8009480:	e001      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d008      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009492:	4b21      	ldr	r3, [pc, #132]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009496:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949e:	491e      	ldr	r1, [pc, #120]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d008      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094b0:	4b19      	ldr	r3, [pc, #100]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094bc:	4916      	ldr	r1, [pc, #88]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00d      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80094ce:	4b12      	ldr	r3, [pc, #72]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	4a11      	ldr	r2, [pc, #68]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094d8:	6113      	str	r3, [r2, #16]
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094dc:	691a      	ldr	r2, [r3, #16]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094e4:	490c      	ldr	r1, [pc, #48]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	da08      	bge.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094f2:	4b09      	ldr	r3, [pc, #36]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80094f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fe:	4906      	ldr	r1, [pc, #24]	; (8009518 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009500:	4313      	orrs	r3, r2
 8009502:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009504:	7dbb      	ldrb	r3, [r7, #22]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	e000      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	58024400 	.word	0x58024400

0800951c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009520:	f7ff f8d6 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 8009524:	4601      	mov	r1, r0
 8009526:	4b06      	ldr	r3, [pc, #24]	; (8009540 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	091b      	lsrs	r3, r3, #4
 800952c:	f003 0307 	and.w	r3, r3, #7
 8009530:	4a04      	ldr	r2, [pc, #16]	; (8009544 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009532:	5cd3      	ldrb	r3, [r2, r3]
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800953c:	4618      	mov	r0, r3
 800953e:	bd80      	pop	{r7, pc}
 8009540:	58024400 	.word	0x58024400
 8009544:	08011648 	.word	0x08011648

08009548 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	; 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009550:	4b9d      	ldr	r3, [pc, #628]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800955a:	4b9b      	ldr	r3, [pc, #620]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800955c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955e:	0b1b      	lsrs	r3, r3, #12
 8009560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009564:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009566:	4b98      	ldr	r3, [pc, #608]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	091b      	lsrs	r3, r3, #4
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009572:	4b95      	ldr	r3, [pc, #596]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009576:	08db      	lsrs	r3, r3, #3
 8009578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	fb02 f303 	mul.w	r3, r2, r3
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 810a 	beq.w	80097aa <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d05a      	beq.n	8009652 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800959c:	2b01      	cmp	r3, #1
 800959e:	d302      	bcc.n	80095a6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d078      	beq.n	8009696 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80095a4:	e099      	b.n	80096da <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a6:	4b88      	ldr	r3, [pc, #544]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d02d      	beq.n	800960e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095b2:	4b85      	ldr	r3, [pc, #532]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	08db      	lsrs	r3, r3, #3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	4a83      	ldr	r2, [pc, #524]	; (80097cc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80095be:	fa22 f303 	lsr.w	r3, r2, r3
 80095c2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	ee07 3a90 	vmov	s15, r3
 80095d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095dc:	4b7a      	ldr	r3, [pc, #488]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e4:	ee07 3a90 	vmov	s15, r3
 80095e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80095f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009608:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800960c:	e087      	b.n	800971e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009618:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80097d4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800961c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009620:	4b69      	ldr	r3, [pc, #420]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009630:	ed97 6a03 	vldr	s12, [r7, #12]
 8009634:	eddf 5a66 	vldr	s11, [pc, #408]	; 80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009650:	e065      	b.n	800971e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80097d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009664:	4b58      	ldr	r3, [pc, #352]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966c:	ee07 3a90 	vmov	s15, r3
 8009670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009674:	ed97 6a03 	vldr	s12, [r7, #12]
 8009678:	eddf 5a55 	vldr	s11, [pc, #340]	; 80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800967c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009694:	e043      	b.n	800971e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	ee07 3a90 	vmov	s15, r3
 800969c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80097dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80096a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a8:	4b47      	ldr	r3, [pc, #284]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b0:	ee07 3a90 	vmov	s15, r3
 80096b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80096c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d8:	e021      	b.n	800971e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80097d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80096e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ec:	4b36      	ldr	r3, [pc, #216]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f4:	ee07 3a90 	vmov	s15, r3
 80096f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009700:	eddf 5a33 	vldr	s11, [pc, #204]	; 80097d0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800971c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800971e:	4b2a      	ldr	r3, [pc, #168]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009722:	0a5b      	lsrs	r3, r3, #9
 8009724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009738:	edd7 6a07 	vldr	s13, [r7, #28]
 800973c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009744:	ee17 2a90 	vmov	r2, s15
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800974c:	4b1e      	ldr	r3, [pc, #120]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	0c1b      	lsrs	r3, r3, #16
 8009752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009756:	ee07 3a90 	vmov	s15, r3
 800975a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009766:	edd7 6a07 	vldr	s13, [r7, #28]
 800976a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009772:	ee17 2a90 	vmov	r2, s15
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800977a:	4b13      	ldr	r3, [pc, #76]	; (80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	0e1b      	lsrs	r3, r3, #24
 8009780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009794:	edd7 6a07 	vldr	s13, [r7, #28]
 8009798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097a0:	ee17 2a90 	vmov	r2, s15
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80097a8:	e008      	b.n	80097bc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	609a      	str	r2, [r3, #8]
}
 80097bc:	bf00      	nop
 80097be:	3724      	adds	r7, #36	; 0x24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	58024400 	.word	0x58024400
 80097cc:	03d09000 	.word	0x03d09000
 80097d0:	46000000 	.word	0x46000000
 80097d4:	4c742400 	.word	0x4c742400
 80097d8:	4a742400 	.word	0x4a742400
 80097dc:	4bbebc20 	.word	0x4bbebc20

080097e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b089      	sub	sp, #36	; 0x24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097e8:	4b9d      	ldr	r3, [pc, #628]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80097f2:	4b9b      	ldr	r3, [pc, #620]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	0d1b      	lsrs	r3, r3, #20
 80097f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097fe:	4b98      	ldr	r3, [pc, #608]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	0a1b      	lsrs	r3, r3, #8
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800980a:	4b95      	ldr	r3, [pc, #596]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800980c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980e:	08db      	lsrs	r3, r3, #3
 8009810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	fb02 f303 	mul.w	r3, r2, r3
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 810a 	beq.w	8009a42 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d05a      	beq.n	80098ea <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009834:	2b01      	cmp	r3, #1
 8009836:	d302      	bcc.n	800983e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009838:	2b02      	cmp	r3, #2
 800983a:	d078      	beq.n	800992e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800983c:	e099      	b.n	8009972 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800983e:	4b88      	ldr	r3, [pc, #544]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d02d      	beq.n	80098a6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800984a:	4b85      	ldr	r3, [pc, #532]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	08db      	lsrs	r3, r3, #3
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	4a83      	ldr	r2, [pc, #524]	; (8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009856:	fa22 f303 	lsr.w	r3, r2, r3
 800985a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	ee07 3a90 	vmov	s15, r3
 800986c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009874:	4b7a      	ldr	r3, [pc, #488]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987c:	ee07 3a90 	vmov	s15, r3
 8009880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009884:	ed97 6a03 	vldr	s12, [r7, #12]
 8009888:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800988c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098a4:	e087      	b.n	80099b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a6c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80098b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b8:	4b69      	ldr	r3, [pc, #420]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80098d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098e8:	e065      	b.n	80099b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80098f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fc:	4b58      	ldr	r3, [pc, #352]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009904:	ee07 3a90 	vmov	s15, r3
 8009908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009910:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009928:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800992c:	e043      	b.n	80099b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009938:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800993c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009940:	4b47      	ldr	r3, [pc, #284]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009948:	ee07 3a90 	vmov	s15, r3
 800994c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009950:	ed97 6a03 	vldr	s12, [r7, #12]
 8009954:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009970:	e021      	b.n	80099b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	ee07 3a90 	vmov	s15, r3
 8009978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009a70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009984:	4b36      	ldr	r3, [pc, #216]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009994:	ed97 6a03 	vldr	s12, [r7, #12]
 8009998:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800999c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099b4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80099b6:	4b2a      	ldr	r3, [pc, #168]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	0a5b      	lsrs	r3, r3, #9
 80099bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099dc:	ee17 2a90 	vmov	r2, s15
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099e4:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	0c1b      	lsrs	r3, r3, #16
 80099ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0a:	ee17 2a90 	vmov	r2, s15
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a12:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	0e1b      	lsrs	r3, r3, #24
 8009a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1c:	ee07 3a90 	vmov	s15, r3
 8009a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a38:	ee17 2a90 	vmov	r2, s15
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a40:	e008      	b.n	8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	609a      	str	r2, [r3, #8]
}
 8009a54:	bf00      	nop
 8009a56:	3724      	adds	r7, #36	; 0x24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	58024400 	.word	0x58024400
 8009a64:	03d09000 	.word	0x03d09000
 8009a68:	46000000 	.word	0x46000000
 8009a6c:	4c742400 	.word	0x4c742400
 8009a70:	4a742400 	.word	0x4a742400
 8009a74:	4bbebc20 	.word	0x4bbebc20

08009a78 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a7c:	f7fe fcb6 	bl	80083ec <HAL_RCC_GetSysClockFreq>
 8009a80:	4601      	mov	r1, r0
 8009a82:	4b08      	ldr	r3, [pc, #32]	; (8009aa4 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	4a06      	ldr	r2, [pc, #24]	; (8009aa8 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8009a8e:	5cd3      	ldrb	r3, [r2, r3]
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	fa21 f303 	lsr.w	r3, r1, r3
 8009a98:	4a04      	ldr	r2, [pc, #16]	; (8009aac <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8009a9a:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 8009a9c:	4b03      	ldr	r3, [pc, #12]	; (8009aac <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	08011648 	.word	0x08011648
 8009aac:	24000028 	.word	0x24000028

08009ab0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009abe:	4b53      	ldr	r3, [pc, #332]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d101      	bne.n	8009ace <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e099      	b.n	8009c02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ace:	4b4f      	ldr	r3, [pc, #316]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a4e      	ldr	r2, [pc, #312]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009ad4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ada:	f7fd f917 	bl	8006d0c <HAL_GetTick>
 8009ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ae0:	e008      	b.n	8009af4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ae2:	f7fd f913 	bl	8006d0c <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d901      	bls.n	8009af4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e086      	b.n	8009c02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009af4:	4b45      	ldr	r3, [pc, #276]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f0      	bne.n	8009ae2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b00:	4b42      	ldr	r3, [pc, #264]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	031b      	lsls	r3, r3, #12
 8009b0e:	493f      	ldr	r1, [pc, #252]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	628b      	str	r3, [r1, #40]	; 0x28
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	025b      	lsls	r3, r3, #9
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	061b      	lsls	r3, r3, #24
 8009b40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b44:	4931      	ldr	r1, [pc, #196]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b4a:	4b30      	ldr	r3, [pc, #192]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	492d      	ldr	r1, [pc, #180]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b5c:	4b2b      	ldr	r3, [pc, #172]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	f023 0220 	bic.w	r2, r3, #32
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	4928      	ldr	r1, [pc, #160]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b6e:	4b27      	ldr	r3, [pc, #156]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	4a26      	ldr	r2, [pc, #152]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b74:	f023 0310 	bic.w	r3, r3, #16
 8009b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b7a:	4b24      	ldr	r3, [pc, #144]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b7e:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <RCCEx_PLL2_Config+0x160>)
 8009b80:	4013      	ands	r3, r2
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	69d2      	ldr	r2, [r2, #28]
 8009b86:	00d2      	lsls	r2, r2, #3
 8009b88:	4920      	ldr	r1, [pc, #128]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b8e:	4b1f      	ldr	r3, [pc, #124]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	4a1e      	ldr	r2, [pc, #120]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009b94:	f043 0310 	orr.w	r3, r3, #16
 8009b98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ba0:	4b1a      	ldr	r3, [pc, #104]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	4a19      	ldr	r2, [pc, #100]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bac:	e00f      	b.n	8009bce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d106      	bne.n	8009bc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009bb4:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	4a14      	ldr	r2, [pc, #80]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bc0:	e005      	b.n	8009bce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009bc2:	4b12      	ldr	r3, [pc, #72]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc6:	4a11      	ldr	r2, [pc, #68]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009bce:	4b0f      	ldr	r3, [pc, #60]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a0e      	ldr	r2, [pc, #56]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bda:	f7fd f897 	bl	8006d0c <HAL_GetTick>
 8009bde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009be0:	e008      	b.n	8009bf4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009be2:	f7fd f893 	bl	8006d0c <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d901      	bls.n	8009bf4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e006      	b.n	8009c02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bf4:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <RCCEx_PLL2_Config+0x15c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0f0      	beq.n	8009be2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	ffff0007 	.word	0xffff0007

08009c14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c22:	4b53      	ldr	r3, [pc, #332]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d101      	bne.n	8009c32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e099      	b.n	8009d66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c32:	4b4f      	ldr	r3, [pc, #316]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a4e      	ldr	r2, [pc, #312]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c3e:	f7fd f865 	bl	8006d0c <HAL_GetTick>
 8009c42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c44:	e008      	b.n	8009c58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c46:	f7fd f861 	bl	8006d0c <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d901      	bls.n	8009c58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e086      	b.n	8009d66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c58:	4b45      	ldr	r3, [pc, #276]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1f0      	bne.n	8009c46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c64:	4b42      	ldr	r3, [pc, #264]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	051b      	lsls	r3, r3, #20
 8009c72:	493f      	ldr	r1, [pc, #252]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009c74:	4313      	orrs	r3, r2
 8009c76:	628b      	str	r3, [r1, #40]	; 0x28
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	025b      	lsls	r3, r3, #9
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	061b      	lsls	r3, r3, #24
 8009ca4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ca8:	4931      	ldr	r1, [pc, #196]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009cae:	4b30      	ldr	r3, [pc, #192]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	492d      	ldr	r1, [pc, #180]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009cc0:	4b2b      	ldr	r3, [pc, #172]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	4928      	ldr	r1, [pc, #160]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009cd2:	4b27      	ldr	r3, [pc, #156]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	4a26      	ldr	r2, [pc, #152]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009cde:	4b24      	ldr	r3, [pc, #144]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ce2:	4b24      	ldr	r3, [pc, #144]	; (8009d74 <RCCEx_PLL3_Config+0x160>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	69d2      	ldr	r2, [r2, #28]
 8009cea:	00d2      	lsls	r2, r2, #3
 8009cec:	4920      	ldr	r1, [pc, #128]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cf2:	4b1f      	ldr	r3, [pc, #124]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	4a1e      	ldr	r2, [pc, #120]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d106      	bne.n	8009d12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d04:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4a19      	ldr	r2, [pc, #100]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d10:	e00f      	b.n	8009d32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d106      	bne.n	8009d26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	4a14      	ldr	r2, [pc, #80]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d24:	e005      	b.n	8009d32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d26:	4b12      	ldr	r3, [pc, #72]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2a:	4a11      	ldr	r2, [pc, #68]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d32:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a0e      	ldr	r2, [pc, #56]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d3e:	f7fc ffe5 	bl	8006d0c <HAL_GetTick>
 8009d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d44:	e008      	b.n	8009d58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d46:	f7fc ffe1 	bl	8006d0c <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d901      	bls.n	8009d58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e006      	b.n	8009d66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d58:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <RCCEx_PLL3_Config+0x15c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0f0      	beq.n	8009d46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	58024400 	.word	0x58024400
 8009d74:	ffff0007 	.word	0xffff0007

08009d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e01d      	b.n	8009dc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7f8 ff8a 	bl	8002cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f000 fe86 	bl	800aac8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689a      	ldr	r2, [r3, #8]
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <HAL_TIM_Base_Start+0x50>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b06      	cmp	r3, #6
 8009df0:	d00b      	beq.n	8009e0a <HAL_TIM_Base_Start+0x3a>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df8:	d007      	beq.n	8009e0a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0201 	orr.w	r2, r2, #1
 8009e08:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	00010007 	.word	0x00010007

08009e24 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6a1a      	ldr	r2, [r3, #32]
 8009e3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e3e:	4013      	ands	r3, r2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10f      	bne.n	8009e64 <HAL_TIM_Base_Stop+0x40>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6a1a      	ldr	r2, [r3, #32]
 8009e4a:	f240 4344 	movw	r3, #1092	; 0x444
 8009e4e:	4013      	ands	r3, r2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d107      	bne.n	8009e64 <HAL_TIM_Base_Stop+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0201 	bic.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f042 0201 	orr.w	r2, r2, #1
 8009e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <HAL_TIM_Base_Start_IT+0x50>)
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b06      	cmp	r3, #6
 8009ea4:	d00b      	beq.n	8009ebe <HAL_TIM_Base_Start_IT+0x42>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eac:	d007      	beq.n	8009ebe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f042 0201 	orr.w	r2, r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	00010007 	.word	0x00010007

08009ed0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f022 0201 	bic.w	r2, r2, #1
 8009ee6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6a1a      	ldr	r2, [r3, #32]
 8009eee:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10f      	bne.n	8009f18 <HAL_TIM_Base_Stop_IT+0x48>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6a1a      	ldr	r2, [r3, #32]
 8009efe:	f240 4344 	movw	r3, #1092	; 0x444
 8009f02:	4013      	ands	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d107      	bne.n	8009f18 <HAL_TIM_Base_Stop_IT+0x48>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0201 	bic.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e01d      	b.n	8009f74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d106      	bne.n	8009f52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f815 	bl	8009f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f000 fdaf 	bl	800aac8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fac0 	bl	800b528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a1e      	ldr	r2, [pc, #120]	; (800a028 <HAL_TIM_PWM_Start+0x98>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d013      	beq.n	8009fda <HAL_TIM_PWM_Start+0x4a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a1d      	ldr	r2, [pc, #116]	; (800a02c <HAL_TIM_PWM_Start+0x9c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00e      	beq.n	8009fda <HAL_TIM_PWM_Start+0x4a>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a1b      	ldr	r2, [pc, #108]	; (800a030 <HAL_TIM_PWM_Start+0xa0>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d009      	beq.n	8009fda <HAL_TIM_PWM_Start+0x4a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a1a      	ldr	r2, [pc, #104]	; (800a034 <HAL_TIM_PWM_Start+0xa4>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d004      	beq.n	8009fda <HAL_TIM_PWM_Start+0x4a>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a18      	ldr	r2, [pc, #96]	; (800a038 <HAL_TIM_PWM_Start+0xa8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_PWM_Start+0x4e>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <HAL_TIM_PWM_Start+0x50>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d007      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ff2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	4b10      	ldr	r3, [pc, #64]	; (800a03c <HAL_TIM_PWM_Start+0xac>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b06      	cmp	r3, #6
 800a004:	d00b      	beq.n	800a01e <HAL_TIM_PWM_Start+0x8e>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	d007      	beq.n	800a01e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0201 	orr.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	40010000 	.word	0x40010000
 800a02c:	40010400 	.word	0x40010400
 800a030:	40014000 	.word	0x40014000
 800a034:	40014400 	.word	0x40014400
 800a038:	40014800 	.word	0x40014800
 800a03c:	00010007 	.word	0x00010007

0800a040 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2200      	movs	r2, #0
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f001 fa68 	bl	800b528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a2a      	ldr	r2, [pc, #168]	; (800a108 <HAL_TIM_PWM_Stop+0xc8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d013      	beq.n	800a08a <HAL_TIM_PWM_Stop+0x4a>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a29      	ldr	r2, [pc, #164]	; (800a10c <HAL_TIM_PWM_Stop+0xcc>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d00e      	beq.n	800a08a <HAL_TIM_PWM_Stop+0x4a>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a27      	ldr	r2, [pc, #156]	; (800a110 <HAL_TIM_PWM_Stop+0xd0>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d009      	beq.n	800a08a <HAL_TIM_PWM_Stop+0x4a>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a26      	ldr	r2, [pc, #152]	; (800a114 <HAL_TIM_PWM_Stop+0xd4>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d004      	beq.n	800a08a <HAL_TIM_PWM_Stop+0x4a>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a24      	ldr	r2, [pc, #144]	; (800a118 <HAL_TIM_PWM_Stop+0xd8>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d101      	bne.n	800a08e <HAL_TIM_PWM_Stop+0x4e>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <HAL_TIM_PWM_Stop+0x50>
 800a08e:	2300      	movs	r3, #0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d017      	beq.n	800a0c4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6a1a      	ldr	r2, [r3, #32]
 800a09a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10f      	bne.n	800a0c4 <HAL_TIM_PWM_Stop+0x84>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6a1a      	ldr	r2, [r3, #32]
 800a0aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d107      	bne.n	800a0c4 <HAL_TIM_PWM_Stop+0x84>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6a1a      	ldr	r2, [r3, #32]
 800a0ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10f      	bne.n	800a0f4 <HAL_TIM_PWM_Stop+0xb4>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	f240 4344 	movw	r3, #1092	; 0x444
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <HAL_TIM_PWM_Stop+0xb4>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	40010000 	.word	0x40010000
 800a10c:	40010400 	.word	0x40010400
 800a110:	40014000 	.word	0x40014000
 800a114:	40014400 	.word	0x40014400
 800a118:	40014800 	.word	0x40014800

0800a11c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e01d      	b.n	800a16a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f815 	bl	800a172 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3304      	adds	r3, #4
 800a158:	4619      	mov	r1, r3
 800a15a:	4610      	mov	r0, r2
 800a15c:	f000 fcb4 	bl	800aac8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a172:	b480      	push	{r7}
 800a174:	b083      	sub	sp, #12
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
	...

0800a188 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b0c      	cmp	r3, #12
 800a196:	d841      	bhi.n	800a21c <HAL_TIM_IC_Start_IT+0x94>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <HAL_TIM_IC_Start_IT+0x18>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1d5 	.word	0x0800a1d5
 800a1a4:	0800a21d 	.word	0x0800a21d
 800a1a8:	0800a21d 	.word	0x0800a21d
 800a1ac:	0800a21d 	.word	0x0800a21d
 800a1b0:	0800a1e7 	.word	0x0800a1e7
 800a1b4:	0800a21d 	.word	0x0800a21d
 800a1b8:	0800a21d 	.word	0x0800a21d
 800a1bc:	0800a21d 	.word	0x0800a21d
 800a1c0:	0800a1f9 	.word	0x0800a1f9
 800a1c4:	0800a21d 	.word	0x0800a21d
 800a1c8:	0800a21d 	.word	0x0800a21d
 800a1cc:	0800a21d 	.word	0x0800a21d
 800a1d0:	0800a20b 	.word	0x0800a20b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68da      	ldr	r2, [r3, #12]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f042 0202 	orr.w	r2, r2, #2
 800a1e2:	60da      	str	r2, [r3, #12]
      break;
 800a1e4:	e01b      	b.n	800a21e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f042 0204 	orr.w	r2, r2, #4
 800a1f4:	60da      	str	r2, [r3, #12]
      break;
 800a1f6:	e012      	b.n	800a21e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0208 	orr.w	r2, r2, #8
 800a206:	60da      	str	r2, [r3, #12]
      break;
 800a208:	e009      	b.n	800a21e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68da      	ldr	r2, [r3, #12]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 0210 	orr.w	r2, r2, #16
 800a218:	60da      	str	r2, [r3, #12]
      break;
 800a21a:	e000      	b.n	800a21e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800a21c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2201      	movs	r2, #1
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	4618      	mov	r0, r3
 800a228:	f001 f97e 	bl	800b528 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689a      	ldr	r2, [r3, #8]
 800a232:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <HAL_TIM_IC_Start_IT+0xd8>)
 800a234:	4013      	ands	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b06      	cmp	r3, #6
 800a23c:	d00b      	beq.n	800a256 <HAL_TIM_IC_Start_IT+0xce>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a244:	d007      	beq.n	800a256 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f042 0201 	orr.w	r2, r2, #1
 800a254:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	00010007 	.word	0x00010007

0800a264 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b0c      	cmp	r3, #12
 800a272:	d841      	bhi.n	800a2f8 <HAL_TIM_IC_Stop_IT+0x94>
 800a274:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <HAL_TIM_IC_Stop_IT+0x18>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a2b1 	.word	0x0800a2b1
 800a280:	0800a2f9 	.word	0x0800a2f9
 800a284:	0800a2f9 	.word	0x0800a2f9
 800a288:	0800a2f9 	.word	0x0800a2f9
 800a28c:	0800a2c3 	.word	0x0800a2c3
 800a290:	0800a2f9 	.word	0x0800a2f9
 800a294:	0800a2f9 	.word	0x0800a2f9
 800a298:	0800a2f9 	.word	0x0800a2f9
 800a29c:	0800a2d5 	.word	0x0800a2d5
 800a2a0:	0800a2f9 	.word	0x0800a2f9
 800a2a4:	0800a2f9 	.word	0x0800a2f9
 800a2a8:	0800a2f9 	.word	0x0800a2f9
 800a2ac:	0800a2e7 	.word	0x0800a2e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68da      	ldr	r2, [r3, #12]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0202 	bic.w	r2, r2, #2
 800a2be:	60da      	str	r2, [r3, #12]
      break;
 800a2c0:	e01b      	b.n	800a2fa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68da      	ldr	r2, [r3, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0204 	bic.w	r2, r2, #4
 800a2d0:	60da      	str	r2, [r3, #12]
      break;
 800a2d2:	e012      	b.n	800a2fa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f022 0208 	bic.w	r2, r2, #8
 800a2e2:	60da      	str	r2, [r3, #12]
      break;
 800a2e4:	e009      	b.n	800a2fa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f022 0210 	bic.w	r2, r2, #16
 800a2f4:	60da      	str	r2, [r3, #12]
      break;
 800a2f6:	e000      	b.n	800a2fa <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800a2f8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2200      	movs	r2, #0
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f001 f910 	bl	800b528 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6a1a      	ldr	r2, [r3, #32]
 800a30e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a312:	4013      	ands	r3, r2
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10f      	bne.n	800a338 <HAL_TIM_IC_Stop_IT+0xd4>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6a1a      	ldr	r2, [r3, #32]
 800a31e:	f240 4344 	movw	r3, #1092	; 0x444
 800a322:	4013      	ands	r3, r2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d107      	bne.n	800a338 <HAL_TIM_IC_Stop_IT+0xd4>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0201 	bic.w	r2, r2, #1
 800a336:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop

0800a344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b02      	cmp	r3, #2
 800a358:	d122      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	2b02      	cmp	r3, #2
 800a366:	d11b      	bne.n	800a3a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f06f 0202 	mvn.w	r2, #2
 800a370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7f7 fc34 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 800a38c:	e005      	b.n	800a39a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fb7c 	bl	800aa8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fb83 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d122      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d11b      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0204 	mvn.w	r2, #4
 800a3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7f7 fc0a 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 800a3e0:	e005      	b.n	800a3ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fb52 	bl	800aa8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fb59 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	f003 0308 	and.w	r3, r3, #8
 800a3fe:	2b08      	cmp	r3, #8
 800a400:	d122      	bne.n	800a448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f003 0308 	and.w	r3, r3, #8
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d11b      	bne.n	800a448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f06f 0208 	mvn.w	r2, #8
 800a418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2204      	movs	r2, #4
 800a41e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7f7 fbe0 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 800a434:	e005      	b.n	800a442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fb28 	bl	800aa8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fb2f 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f003 0310 	and.w	r3, r3, #16
 800a452:	2b10      	cmp	r3, #16
 800a454:	d122      	bne.n	800a49c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b10      	cmp	r3, #16
 800a462:	d11b      	bne.n	800a49c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0210 	mvn.w	r2, #16
 800a46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2208      	movs	r2, #8
 800a472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7f7 fbb6 	bl	8001bf4 <HAL_TIM_IC_CaptureCallback>
 800a488:	e005      	b.n	800a496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fafe 	bl	800aa8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fb05 	bl	800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d10e      	bne.n	800a4c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d107      	bne.n	800a4c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f06f 0201 	mvn.w	r2, #1
 800a4c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7f7 fc10 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d2:	2b80      	cmp	r3, #128	; 0x80
 800a4d4:	d10e      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e0:	2b80      	cmp	r3, #128	; 0x80
 800a4e2:	d107      	bne.n	800a4f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 f8d2 	bl	800b698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a502:	d10e      	bne.n	800a522 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50e:	2b80      	cmp	r3, #128	; 0x80
 800a510:	d107      	bne.n	800a522 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 f8c5 	bl	800b6ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52c:	2b40      	cmp	r3, #64	; 0x40
 800a52e:	d10e      	bne.n	800a54e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53a:	2b40      	cmp	r3, #64	; 0x40
 800a53c:	d107      	bne.n	800a54e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fab3 	bl	800aab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	f003 0320 	and.w	r3, r3, #32
 800a558:	2b20      	cmp	r3, #32
 800a55a:	d10e      	bne.n	800a57a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b20      	cmp	r3, #32
 800a568:	d107      	bne.n	800a57a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f06f 0220 	mvn.w	r2, #32
 800a572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 f885 	bl	800b684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	60b9      	str	r1, [r7, #8]
 800a58c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a594:	2b01      	cmp	r3, #1
 800a596:	d101      	bne.n	800a59c <HAL_TIM_IC_ConfigChannel+0x1a>
 800a598:	2302      	movs	r3, #2
 800a59a:	e08a      	b.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x130>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d11b      	bne.n	800a5ea <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6818      	ldr	r0, [r3, #0]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6819      	ldr	r1, [r3, #0]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f000 fde9 	bl	800b198 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	699a      	ldr	r2, [r3, #24]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f022 020c 	bic.w	r2, r2, #12
 800a5d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6999      	ldr	r1, [r3, #24]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	619a      	str	r2, [r3, #24]
 800a5e8:	e05a      	b.n	800a6a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d11c      	bne.n	800a62a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	6819      	ldr	r1, [r3, #0]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f000 fe6d 	bl	800b2de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	699a      	ldr	r2, [r3, #24]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a612:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6999      	ldr	r1, [r3, #24]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	021a      	lsls	r2, r3, #8
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	619a      	str	r2, [r3, #24]
 800a628:	e03a      	b.n	800a6a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d11b      	bne.n	800a668 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	6819      	ldr	r1, [r3, #0]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	f000 feba 	bl	800b3b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	69da      	ldr	r2, [r3, #28]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 020c 	bic.w	r2, r2, #12
 800a652:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	69d9      	ldr	r1, [r3, #28]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	689a      	ldr	r2, [r3, #8]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	61da      	str	r2, [r3, #28]
 800a666:	e01b      	b.n	800a6a0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6818      	ldr	r0, [r3, #0]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	6819      	ldr	r1, [r3, #0]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f000 feda 	bl	800b430 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	69da      	ldr	r2, [r3, #28]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a68a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	69d9      	ldr	r1, [r3, #28]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	021a      	lsls	r2, r3, #8
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d101      	bne.n	800a6d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e105      	b.n	800a8e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b14      	cmp	r3, #20
 800a6ea:	f200 80f0 	bhi.w	800a8ce <HAL_TIM_PWM_ConfigChannel+0x212>
 800a6ee:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f4:	0800a749 	.word	0x0800a749
 800a6f8:	0800a8cf 	.word	0x0800a8cf
 800a6fc:	0800a8cf 	.word	0x0800a8cf
 800a700:	0800a8cf 	.word	0x0800a8cf
 800a704:	0800a789 	.word	0x0800a789
 800a708:	0800a8cf 	.word	0x0800a8cf
 800a70c:	0800a8cf 	.word	0x0800a8cf
 800a710:	0800a8cf 	.word	0x0800a8cf
 800a714:	0800a7cb 	.word	0x0800a7cb
 800a718:	0800a8cf 	.word	0x0800a8cf
 800a71c:	0800a8cf 	.word	0x0800a8cf
 800a720:	0800a8cf 	.word	0x0800a8cf
 800a724:	0800a80b 	.word	0x0800a80b
 800a728:	0800a8cf 	.word	0x0800a8cf
 800a72c:	0800a8cf 	.word	0x0800a8cf
 800a730:	0800a8cf 	.word	0x0800a8cf
 800a734:	0800a84d 	.word	0x0800a84d
 800a738:	0800a8cf 	.word	0x0800a8cf
 800a73c:	0800a8cf 	.word	0x0800a8cf
 800a740:	0800a8cf 	.word	0x0800a8cf
 800a744:	0800a88d 	.word	0x0800a88d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68b9      	ldr	r1, [r7, #8]
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fa54 	bl	800abfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f042 0208 	orr.w	r2, r2, #8
 800a762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 0204 	bic.w	r2, r2, #4
 800a772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6999      	ldr	r1, [r3, #24]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	691a      	ldr	r2, [r3, #16]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	619a      	str	r2, [r3, #24]
      break;
 800a786:	e0a3      	b.n	800a8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68b9      	ldr	r1, [r7, #8]
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fac4 	bl	800ad1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	699a      	ldr	r2, [r3, #24]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	699a      	ldr	r2, [r3, #24]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6999      	ldr	r1, [r3, #24]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	021a      	lsls	r2, r3, #8
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	619a      	str	r2, [r3, #24]
      break;
 800a7c8:	e082      	b.n	800a8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fb2d 	bl	800ae30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	69da      	ldr	r2, [r3, #28]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f042 0208 	orr.w	r2, r2, #8
 800a7e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f022 0204 	bic.w	r2, r2, #4
 800a7f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69d9      	ldr	r1, [r3, #28]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	61da      	str	r2, [r3, #28]
      break;
 800a808:	e062      	b.n	800a8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68b9      	ldr	r1, [r7, #8]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fb93 	bl	800af3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69da      	ldr	r2, [r3, #28]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	69da      	ldr	r2, [r3, #28]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69d9      	ldr	r1, [r3, #28]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	021a      	lsls	r2, r3, #8
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	61da      	str	r2, [r3, #28]
      break;
 800a84a:	e041      	b.n	800a8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68b9      	ldr	r1, [r7, #8]
 800a852:	4618      	mov	r0, r3
 800a854:	f000 fbda 	bl	800b00c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0208 	orr.w	r2, r2, #8
 800a866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0204 	bic.w	r2, r2, #4
 800a876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	691a      	ldr	r2, [r3, #16]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	430a      	orrs	r2, r1
 800a888:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a88a:	e021      	b.n	800a8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68b9      	ldr	r1, [r7, #8]
 800a892:	4618      	mov	r0, r3
 800a894:	f000 fc1c 	bl	800b0d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	021a      	lsls	r2, r3, #8
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8cc:	e000      	b.n	800a8d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a8ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop

0800a8ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d101      	bne.n	800a904 <HAL_TIM_ConfigClockSource+0x18>
 800a900:	2302      	movs	r3, #2
 800a902:	e0b7      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0x188>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4b57      	ldr	r3, [pc, #348]	; (800aa7c <HAL_TIM_ConfigClockSource+0x190>)
 800a920:	4013      	ands	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a92a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b70      	cmp	r3, #112	; 0x70
 800a93a:	d02e      	beq.n	800a99a <HAL_TIM_ConfigClockSource+0xae>
 800a93c:	2b70      	cmp	r3, #112	; 0x70
 800a93e:	d812      	bhi.n	800a966 <HAL_TIM_ConfigClockSource+0x7a>
 800a940:	2b30      	cmp	r3, #48	; 0x30
 800a942:	f000 8084 	beq.w	800aa4e <HAL_TIM_ConfigClockSource+0x162>
 800a946:	2b30      	cmp	r3, #48	; 0x30
 800a948:	d806      	bhi.n	800a958 <HAL_TIM_ConfigClockSource+0x6c>
 800a94a:	2b10      	cmp	r3, #16
 800a94c:	d07f      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d07d      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d07b      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a956:	e084      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a958:	2b50      	cmp	r3, #80	; 0x50
 800a95a:	d048      	beq.n	800a9ee <HAL_TIM_ConfigClockSource+0x102>
 800a95c:	2b60      	cmp	r3, #96	; 0x60
 800a95e:	d056      	beq.n	800aa0e <HAL_TIM_ConfigClockSource+0x122>
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d064      	beq.n	800aa2e <HAL_TIM_ConfigClockSource+0x142>
      break;
 800a964:	e07d      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a966:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a96a:	d070      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
 800a96c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a970:	d809      	bhi.n	800a986 <HAL_TIM_ConfigClockSource+0x9a>
 800a972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a976:	d027      	beq.n	800a9c8 <HAL_TIM_ConfigClockSource+0xdc>
 800a978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a97c:	d067      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
 800a97e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a982:	d06d      	beq.n	800aa60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a984:	e06d      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800a986:	4a3e      	ldr	r2, [pc, #248]	; (800aa80 <HAL_TIM_ConfigClockSource+0x194>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d060      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
 800a98c:	4a3d      	ldr	r2, [pc, #244]	; (800aa84 <HAL_TIM_ConfigClockSource+0x198>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d05d      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
 800a992:	4a3d      	ldr	r2, [pc, #244]	; (800aa88 <HAL_TIM_ConfigClockSource+0x19c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d05a      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0x162>
      break;
 800a998:	e063      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	6899      	ldr	r1, [r3, #8]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f000 fd9d 	bl	800b4e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	609a      	str	r2, [r3, #8]
      break;
 800a9c6:	e04c      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6818      	ldr	r0, [r3, #0]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	6899      	ldr	r1, [r3, #8]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f000 fd86 	bl	800b4e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9ea:	609a      	str	r2, [r3, #8]
      break;
 800a9ec:	e039      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	6859      	ldr	r1, [r3, #4]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f000 fc40 	bl	800b280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2150      	movs	r1, #80	; 0x50
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fd50 	bl	800b4ac <TIM_ITRx_SetConfig>
      break;
 800aa0c:	e029      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	6859      	ldr	r1, [r3, #4]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f000 fc9c 	bl	800b358 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2160      	movs	r1, #96	; 0x60
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fd40 	bl	800b4ac <TIM_ITRx_SetConfig>
      break;
 800aa2c:	e019      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	6859      	ldr	r1, [r3, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f000 fc20 	bl	800b280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2140      	movs	r1, #64	; 0x40
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fd30 	bl	800b4ac <TIM_ITRx_SetConfig>
      break;
 800aa4c:	e009      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4619      	mov	r1, r3
 800aa58:	4610      	mov	r0, r2
 800aa5a:	f000 fd27 	bl	800b4ac <TIM_ITRx_SetConfig>
      break;
 800aa5e:	e000      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800aa60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	ffceff88 	.word	0xffceff88
 800aa80:	00100030 	.word	0x00100030
 800aa84:	00100040 	.word	0x00100040
 800aa88:	00100020 	.word	0x00100020

0800aa8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a40      	ldr	r2, [pc, #256]	; (800abdc <TIM_Base_SetConfig+0x114>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d013      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae6:	d00f      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a3d      	ldr	r2, [pc, #244]	; (800abe0 <TIM_Base_SetConfig+0x118>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d00b      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a3c      	ldr	r2, [pc, #240]	; (800abe4 <TIM_Base_SetConfig+0x11c>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d007      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a3b      	ldr	r2, [pc, #236]	; (800abe8 <TIM_Base_SetConfig+0x120>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d003      	beq.n	800ab08 <TIM_Base_SetConfig+0x40>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a3a      	ldr	r2, [pc, #232]	; (800abec <TIM_Base_SetConfig+0x124>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d108      	bne.n	800ab1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a2f      	ldr	r2, [pc, #188]	; (800abdc <TIM_Base_SetConfig+0x114>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d01f      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab28:	d01b      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a2c      	ldr	r2, [pc, #176]	; (800abe0 <TIM_Base_SetConfig+0x118>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d017      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a2b      	ldr	r2, [pc, #172]	; (800abe4 <TIM_Base_SetConfig+0x11c>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d013      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a2a      	ldr	r2, [pc, #168]	; (800abe8 <TIM_Base_SetConfig+0x120>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00f      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a29      	ldr	r2, [pc, #164]	; (800abec <TIM_Base_SetConfig+0x124>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00b      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a28      	ldr	r2, [pc, #160]	; (800abf0 <TIM_Base_SetConfig+0x128>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d007      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a27      	ldr	r2, [pc, #156]	; (800abf4 <TIM_Base_SetConfig+0x12c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d003      	beq.n	800ab62 <TIM_Base_SetConfig+0x9a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <TIM_Base_SetConfig+0x130>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d108      	bne.n	800ab74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a10      	ldr	r2, [pc, #64]	; (800abdc <TIM_Base_SetConfig+0x114>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d00f      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a12      	ldr	r2, [pc, #72]	; (800abec <TIM_Base_SetConfig+0x124>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00b      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a11      	ldr	r2, [pc, #68]	; (800abf0 <TIM_Base_SetConfig+0x128>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d007      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a10      	ldr	r2, [pc, #64]	; (800abf4 <TIM_Base_SetConfig+0x12c>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d003      	beq.n	800abc0 <TIM_Base_SetConfig+0xf8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a0f      	ldr	r2, [pc, #60]	; (800abf8 <TIM_Base_SetConfig+0x130>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d103      	bne.n	800abc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	691a      	ldr	r2, [r3, #16]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	615a      	str	r2, [r3, #20]
}
 800abce:	bf00      	nop
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	40010000 	.word	0x40010000
 800abe0:	40000400 	.word	0x40000400
 800abe4:	40000800 	.word	0x40000800
 800abe8:	40000c00 	.word	0x40000c00
 800abec:	40010400 	.word	0x40010400
 800abf0:	40014000 	.word	0x40014000
 800abf4:	40014400 	.word	0x40014400
 800abf8:	40014800 	.word	0x40014800

0800abfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f023 0201 	bic.w	r2, r3, #1
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4b37      	ldr	r3, [pc, #220]	; (800ad04 <TIM_OC1_SetConfig+0x108>)
 800ac28:	4013      	ands	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f023 0303 	bic.w	r3, r3, #3
 800ac32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f023 0302 	bic.w	r3, r3, #2
 800ac44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a2d      	ldr	r2, [pc, #180]	; (800ad08 <TIM_OC1_SetConfig+0x10c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00f      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a2c      	ldr	r2, [pc, #176]	; (800ad0c <TIM_OC1_SetConfig+0x110>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d00b      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a2b      	ldr	r2, [pc, #172]	; (800ad10 <TIM_OC1_SetConfig+0x114>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d007      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a2a      	ldr	r2, [pc, #168]	; (800ad14 <TIM_OC1_SetConfig+0x118>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d003      	beq.n	800ac78 <TIM_OC1_SetConfig+0x7c>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a29      	ldr	r2, [pc, #164]	; (800ad18 <TIM_OC1_SetConfig+0x11c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d10c      	bne.n	800ac92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f023 0308 	bic.w	r3, r3, #8
 800ac7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f023 0304 	bic.w	r3, r3, #4
 800ac90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a1c      	ldr	r2, [pc, #112]	; (800ad08 <TIM_OC1_SetConfig+0x10c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d00f      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a1b      	ldr	r2, [pc, #108]	; (800ad0c <TIM_OC1_SetConfig+0x110>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00b      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a1a      	ldr	r2, [pc, #104]	; (800ad10 <TIM_OC1_SetConfig+0x114>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d007      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a19      	ldr	r2, [pc, #100]	; (800ad14 <TIM_OC1_SetConfig+0x118>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_OC1_SetConfig+0xbe>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a18      	ldr	r2, [pc, #96]	; (800ad18 <TIM_OC1_SetConfig+0x11c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d111      	bne.n	800acde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	4313      	orrs	r3, r2
 800acdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	621a      	str	r2, [r3, #32]
}
 800acf8:	bf00      	nop
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	fffeff8f 	.word	0xfffeff8f
 800ad08:	40010000 	.word	0x40010000
 800ad0c:	40010400 	.word	0x40010400
 800ad10:	40014000 	.word	0x40014000
 800ad14:	40014400 	.word	0x40014400
 800ad18:	40014800 	.word	0x40014800

0800ad1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	f023 0210 	bic.w	r2, r3, #16
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4b34      	ldr	r3, [pc, #208]	; (800ae18 <TIM_OC2_SetConfig+0xfc>)
 800ad48:	4013      	ands	r3, r2
 800ad4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f023 0320 	bic.w	r3, r3, #32
 800ad66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	011b      	lsls	r3, r3, #4
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a29      	ldr	r2, [pc, #164]	; (800ae1c <TIM_OC2_SetConfig+0x100>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d003      	beq.n	800ad84 <TIM_OC2_SetConfig+0x68>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a28      	ldr	r2, [pc, #160]	; (800ae20 <TIM_OC2_SetConfig+0x104>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d10d      	bne.n	800ada0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a1e      	ldr	r2, [pc, #120]	; (800ae1c <TIM_OC2_SetConfig+0x100>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d00f      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a1d      	ldr	r2, [pc, #116]	; (800ae20 <TIM_OC2_SetConfig+0x104>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d00b      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a1c      	ldr	r2, [pc, #112]	; (800ae24 <TIM_OC2_SetConfig+0x108>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d007      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a1b      	ldr	r2, [pc, #108]	; (800ae28 <TIM_OC2_SetConfig+0x10c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d003      	beq.n	800adc8 <TIM_OC2_SetConfig+0xac>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a1a      	ldr	r2, [pc, #104]	; (800ae2c <TIM_OC2_SetConfig+0x110>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d113      	bne.n	800adf0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800add6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	621a      	str	r2, [r3, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	feff8fff 	.word	0xfeff8fff
 800ae1c:	40010000 	.word	0x40010000
 800ae20:	40010400 	.word	0x40010400
 800ae24:	40014000 	.word	0x40014000
 800ae28:	40014400 	.word	0x40014400
 800ae2c:	40014800 	.word	0x40014800

0800ae30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a1b      	ldr	r3, [r3, #32]
 800ae4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	021b      	lsls	r3, r3, #8
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a27      	ldr	r2, [pc, #156]	; (800af28 <TIM_OC3_SetConfig+0xf8>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d003      	beq.n	800ae96 <TIM_OC3_SetConfig+0x66>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a26      	ldr	r2, [pc, #152]	; (800af2c <TIM_OC3_SetConfig+0xfc>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d10d      	bne.n	800aeb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aeb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a1c      	ldr	r2, [pc, #112]	; (800af28 <TIM_OC3_SetConfig+0xf8>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d00f      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a1b      	ldr	r2, [pc, #108]	; (800af2c <TIM_OC3_SetConfig+0xfc>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d00b      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a1a      	ldr	r2, [pc, #104]	; (800af30 <TIM_OC3_SetConfig+0x100>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d007      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a19      	ldr	r2, [pc, #100]	; (800af34 <TIM_OC3_SetConfig+0x104>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d003      	beq.n	800aeda <TIM_OC3_SetConfig+0xaa>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a18      	ldr	r2, [pc, #96]	; (800af38 <TIM_OC3_SetConfig+0x108>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d113      	bne.n	800af02 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	011b      	lsls	r3, r3, #4
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	4313      	orrs	r3, r2
 800af00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	621a      	str	r2, [r3, #32]
}
 800af1c:	bf00      	nop
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	40010000 	.word	0x40010000
 800af2c:	40010400 	.word	0x40010400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800

0800af3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	021b      	lsls	r3, r3, #8
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	031b      	lsls	r3, r3, #12
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	4313      	orrs	r3, r2
 800af92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a18      	ldr	r2, [pc, #96]	; (800aff8 <TIM_OC4_SetConfig+0xbc>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00f      	beq.n	800afbc <TIM_OC4_SetConfig+0x80>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a17      	ldr	r2, [pc, #92]	; (800affc <TIM_OC4_SetConfig+0xc0>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d00b      	beq.n	800afbc <TIM_OC4_SetConfig+0x80>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a16      	ldr	r2, [pc, #88]	; (800b000 <TIM_OC4_SetConfig+0xc4>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d007      	beq.n	800afbc <TIM_OC4_SetConfig+0x80>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a15      	ldr	r2, [pc, #84]	; (800b004 <TIM_OC4_SetConfig+0xc8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d003      	beq.n	800afbc <TIM_OC4_SetConfig+0x80>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a14      	ldr	r2, [pc, #80]	; (800b008 <TIM_OC4_SetConfig+0xcc>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d109      	bne.n	800afd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	019b      	lsls	r3, r3, #6
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	4313      	orrs	r3, r2
 800afce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	621a      	str	r2, [r3, #32]
}
 800afea:	bf00      	nop
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	40010000 	.word	0x40010000
 800affc:	40010400 	.word	0x40010400
 800b000:	40014000 	.word	0x40014000
 800b004:	40014400 	.word	0x40014400
 800b008:	40014800 	.word	0x40014800

0800b00c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b04c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	041b      	lsls	r3, r3, #16
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a17      	ldr	r2, [pc, #92]	; (800b0bc <TIM_OC5_SetConfig+0xb0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d00f      	beq.n	800b082 <TIM_OC5_SetConfig+0x76>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a16      	ldr	r2, [pc, #88]	; (800b0c0 <TIM_OC5_SetConfig+0xb4>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d00b      	beq.n	800b082 <TIM_OC5_SetConfig+0x76>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a15      	ldr	r2, [pc, #84]	; (800b0c4 <TIM_OC5_SetConfig+0xb8>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d007      	beq.n	800b082 <TIM_OC5_SetConfig+0x76>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a14      	ldr	r2, [pc, #80]	; (800b0c8 <TIM_OC5_SetConfig+0xbc>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d003      	beq.n	800b082 <TIM_OC5_SetConfig+0x76>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a13      	ldr	r2, [pc, #76]	; (800b0cc <TIM_OC5_SetConfig+0xc0>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d109      	bne.n	800b096 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b088:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	021b      	lsls	r3, r3, #8
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	4313      	orrs	r3, r2
 800b094:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	621a      	str	r2, [r3, #32]
}
 800b0b0:	bf00      	nop
 800b0b2:	371c      	adds	r7, #28
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	40010000 	.word	0x40010000
 800b0c0:	40010400 	.word	0x40010400
 800b0c4:	40014000 	.word	0x40014000
 800b0c8:	40014400 	.word	0x40014400
 800b0cc:	40014800 	.word	0x40014800

0800b0d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	021b      	lsls	r3, r3, #8
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	051b      	lsls	r3, r3, #20
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a18      	ldr	r2, [pc, #96]	; (800b184 <TIM_OC6_SetConfig+0xb4>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d00f      	beq.n	800b148 <TIM_OC6_SetConfig+0x78>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a17      	ldr	r2, [pc, #92]	; (800b188 <TIM_OC6_SetConfig+0xb8>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d00b      	beq.n	800b148 <TIM_OC6_SetConfig+0x78>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a16      	ldr	r2, [pc, #88]	; (800b18c <TIM_OC6_SetConfig+0xbc>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d007      	beq.n	800b148 <TIM_OC6_SetConfig+0x78>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a15      	ldr	r2, [pc, #84]	; (800b190 <TIM_OC6_SetConfig+0xc0>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d003      	beq.n	800b148 <TIM_OC6_SetConfig+0x78>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a14      	ldr	r2, [pc, #80]	; (800b194 <TIM_OC6_SetConfig+0xc4>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d109      	bne.n	800b15c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b14e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	029b      	lsls	r3, r3, #10
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	4313      	orrs	r3, r2
 800b15a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	621a      	str	r2, [r3, #32]
}
 800b176:	bf00      	nop
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	40010000 	.word	0x40010000
 800b188:	40010400 	.word	0x40010400
 800b18c:	40014000 	.word	0x40014000
 800b190:	40014400 	.word	0x40014400
 800b194:	40014800 	.word	0x40014800

0800b198 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	f023 0201 	bic.w	r2, r3, #1
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6a1b      	ldr	r3, [r3, #32]
 800b1bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4a28      	ldr	r2, [pc, #160]	; (800b264 <TIM_TI1_SetConfig+0xcc>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d01b      	beq.n	800b1fe <TIM_TI1_SetConfig+0x66>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1cc:	d017      	beq.n	800b1fe <TIM_TI1_SetConfig+0x66>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4a25      	ldr	r2, [pc, #148]	; (800b268 <TIM_TI1_SetConfig+0xd0>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d013      	beq.n	800b1fe <TIM_TI1_SetConfig+0x66>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	4a24      	ldr	r2, [pc, #144]	; (800b26c <TIM_TI1_SetConfig+0xd4>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d00f      	beq.n	800b1fe <TIM_TI1_SetConfig+0x66>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4a23      	ldr	r2, [pc, #140]	; (800b270 <TIM_TI1_SetConfig+0xd8>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d00b      	beq.n	800b1fe <TIM_TI1_SetConfig+0x66>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4a22      	ldr	r2, [pc, #136]	; (800b274 <TIM_TI1_SetConfig+0xdc>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d007      	beq.n	800b1fe <TIM_TI1_SetConfig+0x66>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	4a21      	ldr	r2, [pc, #132]	; (800b278 <TIM_TI1_SetConfig+0xe0>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d003      	beq.n	800b1fe <TIM_TI1_SetConfig+0x66>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4a20      	ldr	r2, [pc, #128]	; (800b27c <TIM_TI1_SetConfig+0xe4>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d101      	bne.n	800b202 <TIM_TI1_SetConfig+0x6a>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e000      	b.n	800b204 <TIM_TI1_SetConfig+0x6c>
 800b202:	2300      	movs	r3, #0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d008      	beq.n	800b21a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4313      	orrs	r3, r2
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	e003      	b.n	800b222 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f043 0301 	orr.w	r3, r3, #1
 800b220:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	011b      	lsls	r3, r3, #4
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f023 030a 	bic.w	r3, r3, #10
 800b23c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f003 030a 	and.w	r3, r3, #10
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	4313      	orrs	r3, r2
 800b248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	621a      	str	r2, [r3, #32]
}
 800b256:	bf00      	nop
 800b258:	371c      	adds	r7, #28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	40010000 	.word	0x40010000
 800b268:	40000400 	.word	0x40000400
 800b26c:	40000800 	.word	0x40000800
 800b270:	40000c00 	.word	0x40000c00
 800b274:	40010400 	.word	0x40010400
 800b278:	40001800 	.word	0x40001800
 800b27c:	40014000 	.word	0x40014000

0800b280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	f023 0201 	bic.w	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f023 030a 	bic.w	r3, r3, #10
 800b2bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	621a      	str	r2, [r3, #32]
}
 800b2d2:	bf00      	nop
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	607a      	str	r2, [r7, #4]
 800b2ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	f023 0210 	bic.w	r2, r3, #16
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b30a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	021b      	lsls	r3, r3, #8
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b31c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	031b      	lsls	r3, r3, #12
 800b322:	b29b      	uxth	r3, r3
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	4313      	orrs	r3, r2
 800b328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b330:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	011b      	lsls	r3, r3, #4
 800b336:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	621a      	str	r2, [r3, #32]
}
 800b34c:	bf00      	nop
 800b34e:	371c      	adds	r7, #28
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6a1b      	ldr	r3, [r3, #32]
 800b368:	f023 0210 	bic.w	r2, r3, #16
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	031b      	lsls	r3, r3, #12
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b394:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	011b      	lsls	r3, r3, #4
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	621a      	str	r2, [r3, #32]
}
 800b3ac:	bf00      	nop
 800b3ae:	371c      	adds	r7, #28
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f023 0303 	bic.w	r3, r3, #3
 800b3e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	011b      	lsls	r3, r3, #4
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b408:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4313      	orrs	r3, r2
 800b416:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	621a      	str	r2, [r3, #32]
}
 800b424:	bf00      	nop
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b430:	b480      	push	{r7}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b45c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	021b      	lsls	r3, r3, #8
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b46e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	031b      	lsls	r3, r3, #12
 800b474:	b29b      	uxth	r3, r3
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	4313      	orrs	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b482:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	031b      	lsls	r3, r3, #12
 800b488:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	4313      	orrs	r3, r2
 800b490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	621a      	str	r2, [r3, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
	...

0800b4ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4b09      	ldr	r3, [pc, #36]	; (800b4e4 <TIM_ITRx_SetConfig+0x38>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	f043 0307 	orr.w	r3, r3, #7
 800b4ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	609a      	str	r2, [r3, #8]
}
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	ffcfff8f 	.word	0xffcfff8f

0800b4e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b087      	sub	sp, #28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	021a      	lsls	r2, r3, #8
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	431a      	orrs	r2, r3
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	4313      	orrs	r3, r2
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	4313      	orrs	r3, r2
 800b514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	609a      	str	r2, [r3, #8]
}
 800b51c:	bf00      	nop
 800b51e:	371c      	adds	r7, #28
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f003 031f 	and.w	r3, r3, #31
 800b53a:	2201      	movs	r2, #1
 800b53c:	fa02 f303 	lsl.w	r3, r2, r3
 800b540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6a1a      	ldr	r2, [r3, #32]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	43db      	mvns	r3, r3
 800b54a:	401a      	ands	r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6a1a      	ldr	r2, [r3, #32]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f003 031f 	and.w	r3, r3, #31
 800b55a:	6879      	ldr	r1, [r7, #4]
 800b55c:	fa01 f303 	lsl.w	r3, r1, r3
 800b560:	431a      	orrs	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	621a      	str	r2, [r3, #32]
}
 800b566:	bf00      	nop
 800b568:	371c      	adds	r7, #28
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
	...

0800b574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b588:	2302      	movs	r3, #2
 800b58a:	e068      	b.n	800b65e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a2e      	ldr	r2, [pc, #184]	; (800b66c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d004      	beq.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a2d      	ldr	r2, [pc, #180]	; (800b670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d108      	bne.n	800b5d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b5c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a1e      	ldr	r2, [pc, #120]	; (800b66c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d01d      	beq.n	800b632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5fe:	d018      	beq.n	800b632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a1b      	ldr	r2, [pc, #108]	; (800b674 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d013      	beq.n	800b632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a1a      	ldr	r2, [pc, #104]	; (800b678 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00e      	beq.n	800b632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a18      	ldr	r2, [pc, #96]	; (800b67c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d009      	beq.n	800b632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a13      	ldr	r2, [pc, #76]	; (800b670 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d004      	beq.n	800b632 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a14      	ldr	r2, [pc, #80]	; (800b680 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d10c      	bne.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	4313      	orrs	r3, r2
 800b642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	40010000 	.word	0x40010000
 800b670:	40010400 	.word	0x40010400
 800b674:	40000400 	.word	0x40000400
 800b678:	40000800 	.word	0x40000800
 800b67c:	40000c00 	.word	0x40000c00
 800b680:	40001800 	.word	0x40001800

0800b684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e042      	b.n	800b758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7fb f981 	bl	80069ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2224      	movs	r2, #36	; 0x24
 800b6ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 0201 	bic.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fb24 	bl	800bd50 <UART_SetConfig>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e022      	b.n	800b758 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f002 fc96 	bl	800e04c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b72e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689a      	ldr	r2, [r3, #8]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b73e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f042 0201 	orr.w	r2, r2, #1
 800b74e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f002 fd1d 	bl	800e190 <UART_CheckIdleState>
 800b756:	4603      	mov	r3, r0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08a      	sub	sp, #40	; 0x28
 800b764:	af02      	add	r7, sp, #8
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	4613      	mov	r3, r2
 800b76e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b776:	2b20      	cmp	r3, #32
 800b778:	f040 8083 	bne.w	800b882 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <HAL_UART_Transmit+0x28>
 800b782:	88fb      	ldrh	r3, [r7, #6]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	e07b      	b.n	800b884 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <HAL_UART_Transmit+0x3a>
 800b796:	2302      	movs	r3, #2
 800b798:	e074      	b.n	800b884 <HAL_UART_Transmit+0x124>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2221      	movs	r2, #33	; 0x21
 800b7ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b7b2:	f7fb faab 	bl	8006d0c <HAL_GetTick>
 800b7b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	88fa      	ldrh	r2, [r7, #6]
 800b7bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	88fa      	ldrh	r2, [r7, #6]
 800b7c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d0:	d108      	bne.n	800b7e4 <HAL_UART_Transmit+0x84>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d104      	bne.n	800b7e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	61bb      	str	r3, [r7, #24]
 800b7e2:	e003      	b.n	800b7ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b7ec:	e02c      	b.n	800b848 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	2180      	movs	r1, #128	; 0x80
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f002 fd11 	bl	800e220 <UART_WaitOnFlagUntilTimeout>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	e03d      	b.n	800b884 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10b      	bne.n	800b826 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b81c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	3302      	adds	r3, #2
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	e007      	b.n	800b836 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	781a      	ldrb	r2, [r3, #0]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	3301      	adds	r3, #1
 800b834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	3b01      	subs	r3, #1
 800b840:	b29a      	uxth	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b84e:	b29b      	uxth	r3, r3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1cc      	bne.n	800b7ee <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2200      	movs	r2, #0
 800b85c:	2140      	movs	r1, #64	; 0x40
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f002 fcde 	bl	800e220 <UART_WaitOnFlagUntilTimeout>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d001      	beq.n	800b86e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b86a:	2303      	movs	r3, #3
 800b86c:	e00a      	b.n	800b884 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2220      	movs	r2, #32
 800b872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	e000      	b.n	800b884 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b882:	2302      	movs	r3, #2
  }
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	4613      	mov	r3, r2
 800b898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a0:	2b20      	cmp	r3, #32
 800b8a2:	f040 80bc 	bne.w	800ba1e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <HAL_UART_Receive_IT+0x26>
 800b8ac:	88fb      	ldrh	r3, [r7, #6]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e0b4      	b.n	800ba20 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d101      	bne.n	800b8c4 <HAL_UART_Receive_IT+0x38>
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e0ad      	b.n	800ba20 <HAL_UART_Receive_IT+0x194>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	88fa      	ldrh	r2, [r7, #6]
 800b8d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	88fa      	ldrh	r2, [r7, #6]
 800b8de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f0:	d10e      	bne.n	800b910 <HAL_UART_Receive_IT+0x84>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d105      	bne.n	800b906 <HAL_UART_Receive_IT+0x7a>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b904:	e02d      	b.n	800b962 <HAL_UART_Receive_IT+0xd6>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	22ff      	movs	r2, #255	; 0xff
 800b90a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b90e:	e028      	b.n	800b962 <HAL_UART_Receive_IT+0xd6>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10d      	bne.n	800b934 <HAL_UART_Receive_IT+0xa8>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d104      	bne.n	800b92a <HAL_UART_Receive_IT+0x9e>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	22ff      	movs	r2, #255	; 0xff
 800b924:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b928:	e01b      	b.n	800b962 <HAL_UART_Receive_IT+0xd6>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	227f      	movs	r2, #127	; 0x7f
 800b92e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b932:	e016      	b.n	800b962 <HAL_UART_Receive_IT+0xd6>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b93c:	d10d      	bne.n	800b95a <HAL_UART_Receive_IT+0xce>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d104      	bne.n	800b950 <HAL_UART_Receive_IT+0xc4>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	227f      	movs	r2, #127	; 0x7f
 800b94a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b94e:	e008      	b.n	800b962 <HAL_UART_Receive_IT+0xd6>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	223f      	movs	r2, #63	; 0x3f
 800b954:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b958:	e003      	b.n	800b962 <HAL_UART_Receive_IT+0xd6>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2222      	movs	r2, #34	; 0x22
 800b96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689a      	ldr	r2, [r3, #8]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f042 0201 	orr.w	r2, r2, #1
 800b980:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b98a:	d12a      	bne.n	800b9e2 <HAL_UART_Receive_IT+0x156>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b992:	88fa      	ldrh	r2, [r7, #6]
 800b994:	429a      	cmp	r2, r3
 800b996:	d324      	bcc.n	800b9e2 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a0:	d107      	bne.n	800b9b2 <HAL_UART_Receive_IT+0x126>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d103      	bne.n	800b9b2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4a1f      	ldr	r2, [pc, #124]	; (800ba2c <HAL_UART_Receive_IT+0x1a0>)
 800b9ae:	66da      	str	r2, [r3, #108]	; 0x6c
 800b9b0:	e002      	b.n	800b9b8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	4a1e      	ldr	r2, [pc, #120]	; (800ba30 <HAL_UART_Receive_IT+0x1a4>)
 800b9b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9ce:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689a      	ldr	r2, [r3, #8]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b9de:	609a      	str	r2, [r3, #8]
 800b9e0:	e01b      	b.n	800ba1a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ea:	d107      	bne.n	800b9fc <HAL_UART_Receive_IT+0x170>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4a0f      	ldr	r2, [pc, #60]	; (800ba34 <HAL_UART_Receive_IT+0x1a8>)
 800b9f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b9fa:	e002      	b.n	800ba02 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4a0e      	ldr	r2, [pc, #56]	; (800ba38 <HAL_UART_Receive_IT+0x1ac>)
 800ba00:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ba18:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e000      	b.n	800ba20 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800ba1e:	2302      	movs	r3, #2
  }
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	0800e625 	.word	0x0800e625
 800ba30:	0800e51d 	.word	0x0800e51d
 800ba34:	0800e473 	.word	0x0800e473
 800ba38:	0800e3c9 	.word	0x0800e3c9

0800ba3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba5c:	69fa      	ldr	r2, [r7, #28]
 800ba5e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba62:	4013      	ands	r3, r2
 800ba64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d118      	bne.n	800ba9e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	f003 0320 	and.w	r3, r3, #32
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d013      	beq.n	800ba9e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	f003 0320 	and.w	r3, r3, #32
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d104      	bne.n	800ba8a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d009      	beq.n	800ba9e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 8145 	beq.w	800bd1e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	4798      	blx	r3
      }
      return;
 800ba9c:	e13f      	b.n	800bd1e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 80e8 	beq.w	800bc76 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	4ba1      	ldr	r3, [pc, #644]	; (800bd30 <HAL_UART_IRQHandler+0x2f4>)
 800baaa:	4013      	ands	r3, r2
 800baac:	2b00      	cmp	r3, #0
 800baae:	d105      	bne.n	800babc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bab0:	69ba      	ldr	r2, [r7, #24]
 800bab2:	4ba0      	ldr	r3, [pc, #640]	; (800bd34 <HAL_UART_IRQHandler+0x2f8>)
 800bab4:	4013      	ands	r3, r2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 80dd 	beq.w	800bc76 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d010      	beq.n	800bae8 <HAL_UART_IRQHandler+0xac>
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2201      	movs	r2, #1
 800bad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bade:	f043 0201 	orr.w	r2, r3, #1
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d010      	beq.n	800bb14 <HAL_UART_IRQHandler+0xd8>
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00b      	beq.n	800bb14 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2202      	movs	r2, #2
 800bb02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb0a:	f043 0204 	orr.w	r2, r3, #4
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f003 0304 	and.w	r3, r3, #4
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d010      	beq.n	800bb40 <HAL_UART_IRQHandler+0x104>
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00b      	beq.n	800bb40 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2204      	movs	r2, #4
 800bb2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb36:	f043 0202 	orr.w	r2, r3, #2
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	f003 0308 	and.w	r3, r3, #8
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d015      	beq.n	800bb76 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	f003 0320 	and.w	r3, r3, #32
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d104      	bne.n	800bb5e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	4b76      	ldr	r3, [pc, #472]	; (800bd30 <HAL_UART_IRQHandler+0x2f4>)
 800bb58:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00b      	beq.n	800bb76 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2208      	movs	r2, #8
 800bb64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb6c:	f043 0208 	orr.w	r2, r3, #8
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d011      	beq.n	800bba4 <HAL_UART_IRQHandler+0x168>
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00c      	beq.n	800bba4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9a:	f043 0220 	orr.w	r2, r3, #32
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 80b9 	beq.w	800bd22 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	f003 0320 	and.w	r3, r3, #32
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d011      	beq.n	800bbde <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	f003 0320 	and.w	r3, r3, #32
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d104      	bne.n	800bbce <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d007      	beq.n	800bbde <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf0:	2b40      	cmp	r3, #64	; 0x40
 800bbf2:	d004      	beq.n	800bbfe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d031      	beq.n	800bc62 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f002 fb8e 	bl	800e320 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0e:	2b40      	cmp	r3, #64	; 0x40
 800bc10:	d123      	bne.n	800bc5a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d013      	beq.n	800bc52 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc2e:	4a42      	ldr	r2, [pc, #264]	; (800bd38 <HAL_UART_IRQHandler+0x2fc>)
 800bc30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fb f9e2 	bl	8007000 <HAL_DMA_Abort_IT>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d017      	beq.n	800bc72 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc50:	e00f      	b.n	800bc72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f872 	bl	800bd3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc58:	e00b      	b.n	800bc72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f86e 	bl	800bd3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc60:	e007      	b.n	800bc72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f86a 	bl	800bd3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800bc70:	e057      	b.n	800bd22 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc72:	bf00      	nop
    return;
 800bc74:	e055      	b.n	800bd22 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00d      	beq.n	800bc9c <HAL_UART_IRQHandler+0x260>
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d008      	beq.n	800bc9c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bc92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f002 fd49 	bl	800e72c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc9a:	e045      	b.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d012      	beq.n	800bccc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d008      	beq.n	800bccc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d031      	beq.n	800bd26 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	4798      	blx	r3
    }
    return;
 800bcca:	e02c      	b.n	800bd26 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d008      	beq.n	800bce8 <HAL_UART_IRQHandler+0x2ac>
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f002 fb57 	bl	800e394 <UART_EndTransmit_IT>
    return;
 800bce6:	e01f      	b.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d008      	beq.n	800bd04 <HAL_UART_IRQHandler+0x2c8>
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d003      	beq.n	800bd04 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f002 fd29 	bl	800e754 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd02:	e011      	b.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00c      	beq.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	da09      	bge.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f002 fd13 	bl	800e740 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd1a:	bf00      	nop
 800bd1c:	e004      	b.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
      return;
 800bd1e:	bf00      	nop
 800bd20:	e002      	b.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bd22:	bf00      	nop
 800bd24:	e000      	b.n	800bd28 <HAL_UART_IRQHandler+0x2ec>
    return;
 800bd26:	bf00      	nop
  }
}
 800bd28:	3720      	adds	r7, #32
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	10000001 	.word	0x10000001
 800bd34:	04000120 	.word	0x04000120
 800bd38:	0800e369 	.word	0x0800e369

0800bd3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bd54:	b090      	sub	sp, #64	; 0x40
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800bd64:	2300      	movs	r3, #0
 800bd66:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	689a      	ldr	r2, [r3, #8]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	431a      	orrs	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	431a      	orrs	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd86:	4313      	orrs	r3, r2
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	4bc1      	ldr	r3, [pc, #772]	; (800c098 <UART_SetConfig+0x348>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	6812      	ldr	r2, [r2, #0]
 800bd98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd9a:	430b      	orrs	r3, r1
 800bd9c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68da      	ldr	r2, [r3, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	430a      	orrs	r2, r1
 800bdb2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4ab7      	ldr	r2, [pc, #732]	; (800c09c <UART_SetConfig+0x34c>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d004      	beq.n	800bdce <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a1b      	ldr	r3, [r3, #32]
 800bdc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	4bb2      	ldr	r3, [pc, #712]	; (800c0a0 <UART_SetConfig+0x350>)
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	6812      	ldr	r2, [r2, #0]
 800bddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdde:	430b      	orrs	r3, r1
 800bde0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde8:	f023 010f 	bic.w	r1, r3, #15
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4aa9      	ldr	r2, [pc, #676]	; (800c0a4 <UART_SetConfig+0x354>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d177      	bne.n	800bef2 <UART_SetConfig+0x1a2>
 800be02:	4ba9      	ldr	r3, [pc, #676]	; (800c0a8 <UART_SetConfig+0x358>)
 800be04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be0a:	2b28      	cmp	r3, #40	; 0x28
 800be0c:	d86c      	bhi.n	800bee8 <UART_SetConfig+0x198>
 800be0e:	a201      	add	r2, pc, #4	; (adr r2, 800be14 <UART_SetConfig+0xc4>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800beb9 	.word	0x0800beb9
 800be18:	0800bee9 	.word	0x0800bee9
 800be1c:	0800bee9 	.word	0x0800bee9
 800be20:	0800bee9 	.word	0x0800bee9
 800be24:	0800bee9 	.word	0x0800bee9
 800be28:	0800bee9 	.word	0x0800bee9
 800be2c:	0800bee9 	.word	0x0800bee9
 800be30:	0800bee9 	.word	0x0800bee9
 800be34:	0800bec1 	.word	0x0800bec1
 800be38:	0800bee9 	.word	0x0800bee9
 800be3c:	0800bee9 	.word	0x0800bee9
 800be40:	0800bee9 	.word	0x0800bee9
 800be44:	0800bee9 	.word	0x0800bee9
 800be48:	0800bee9 	.word	0x0800bee9
 800be4c:	0800bee9 	.word	0x0800bee9
 800be50:	0800bee9 	.word	0x0800bee9
 800be54:	0800bec9 	.word	0x0800bec9
 800be58:	0800bee9 	.word	0x0800bee9
 800be5c:	0800bee9 	.word	0x0800bee9
 800be60:	0800bee9 	.word	0x0800bee9
 800be64:	0800bee9 	.word	0x0800bee9
 800be68:	0800bee9 	.word	0x0800bee9
 800be6c:	0800bee9 	.word	0x0800bee9
 800be70:	0800bee9 	.word	0x0800bee9
 800be74:	0800bed1 	.word	0x0800bed1
 800be78:	0800bee9 	.word	0x0800bee9
 800be7c:	0800bee9 	.word	0x0800bee9
 800be80:	0800bee9 	.word	0x0800bee9
 800be84:	0800bee9 	.word	0x0800bee9
 800be88:	0800bee9 	.word	0x0800bee9
 800be8c:	0800bee9 	.word	0x0800bee9
 800be90:	0800bee9 	.word	0x0800bee9
 800be94:	0800bed9 	.word	0x0800bed9
 800be98:	0800bee9 	.word	0x0800bee9
 800be9c:	0800bee9 	.word	0x0800bee9
 800bea0:	0800bee9 	.word	0x0800bee9
 800bea4:	0800bee9 	.word	0x0800bee9
 800bea8:	0800bee9 	.word	0x0800bee9
 800beac:	0800bee9 	.word	0x0800bee9
 800beb0:	0800bee9 	.word	0x0800bee9
 800beb4:	0800bee1 	.word	0x0800bee1
 800beb8:	2301      	movs	r3, #1
 800beba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bebe:	e233      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bec0:	2304      	movs	r3, #4
 800bec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bec6:	e22f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bec8:	2308      	movs	r3, #8
 800beca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bece:	e22b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bed0:	2310      	movs	r3, #16
 800bed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bed6:	e227      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bed8:	2320      	movs	r3, #32
 800beda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bede:	e223      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bee0:	2340      	movs	r3, #64	; 0x40
 800bee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bee6:	e21f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800beee:	bf00      	nop
 800bef0:	e21a      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a6d      	ldr	r2, [pc, #436]	; (800c0ac <UART_SetConfig+0x35c>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d132      	bne.n	800bf62 <UART_SetConfig+0x212>
 800befc:	4b6a      	ldr	r3, [pc, #424]	; (800c0a8 <UART_SetConfig+0x358>)
 800befe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf00:	f003 0307 	and.w	r3, r3, #7
 800bf04:	2b05      	cmp	r3, #5
 800bf06:	d827      	bhi.n	800bf58 <UART_SetConfig+0x208>
 800bf08:	a201      	add	r2, pc, #4	; (adr r2, 800bf10 <UART_SetConfig+0x1c0>)
 800bf0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0e:	bf00      	nop
 800bf10:	0800bf29 	.word	0x0800bf29
 800bf14:	0800bf31 	.word	0x0800bf31
 800bf18:	0800bf39 	.word	0x0800bf39
 800bf1c:	0800bf41 	.word	0x0800bf41
 800bf20:	0800bf49 	.word	0x0800bf49
 800bf24:	0800bf51 	.word	0x0800bf51
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf2e:	e1fb      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bf30:	2304      	movs	r3, #4
 800bf32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf36:	e1f7      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bf38:	2308      	movs	r3, #8
 800bf3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf3e:	e1f3      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bf40:	2310      	movs	r3, #16
 800bf42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf46:	e1ef      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bf48:	2320      	movs	r3, #32
 800bf4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf4e:	e1eb      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bf50:	2340      	movs	r3, #64	; 0x40
 800bf52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf56:	e1e7      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bf58:	2380      	movs	r3, #128	; 0x80
 800bf5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf5e:	bf00      	nop
 800bf60:	e1e2      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a52      	ldr	r2, [pc, #328]	; (800c0b0 <UART_SetConfig+0x360>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d132      	bne.n	800bfd2 <UART_SetConfig+0x282>
 800bf6c:	4b4e      	ldr	r3, [pc, #312]	; (800c0a8 <UART_SetConfig+0x358>)
 800bf6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf70:	f003 0307 	and.w	r3, r3, #7
 800bf74:	2b05      	cmp	r3, #5
 800bf76:	d827      	bhi.n	800bfc8 <UART_SetConfig+0x278>
 800bf78:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <UART_SetConfig+0x230>)
 800bf7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7e:	bf00      	nop
 800bf80:	0800bf99 	.word	0x0800bf99
 800bf84:	0800bfa1 	.word	0x0800bfa1
 800bf88:	0800bfa9 	.word	0x0800bfa9
 800bf8c:	0800bfb1 	.word	0x0800bfb1
 800bf90:	0800bfb9 	.word	0x0800bfb9
 800bf94:	0800bfc1 	.word	0x0800bfc1
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bf9e:	e1c3      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bfa0:	2304      	movs	r3, #4
 800bfa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfa6:	e1bf      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bfa8:	2308      	movs	r3, #8
 800bfaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfae:	e1bb      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfb6:	e1b7      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bfb8:	2320      	movs	r3, #32
 800bfba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfbe:	e1b3      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bfc0:	2340      	movs	r3, #64	; 0x40
 800bfc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfc6:	e1af      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bfc8:	2380      	movs	r3, #128	; 0x80
 800bfca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800bfce:	bf00      	nop
 800bfd0:	e1aa      	b.n	800c328 <UART_SetConfig+0x5d8>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a37      	ldr	r2, [pc, #220]	; (800c0b4 <UART_SetConfig+0x364>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d132      	bne.n	800c042 <UART_SetConfig+0x2f2>
 800bfdc:	4b32      	ldr	r3, [pc, #200]	; (800c0a8 <UART_SetConfig+0x358>)
 800bfde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe0:	f003 0307 	and.w	r3, r3, #7
 800bfe4:	2b05      	cmp	r3, #5
 800bfe6:	d827      	bhi.n	800c038 <UART_SetConfig+0x2e8>
 800bfe8:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <UART_SetConfig+0x2a0>)
 800bfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfee:	bf00      	nop
 800bff0:	0800c009 	.word	0x0800c009
 800bff4:	0800c011 	.word	0x0800c011
 800bff8:	0800c019 	.word	0x0800c019
 800bffc:	0800c021 	.word	0x0800c021
 800c000:	0800c029 	.word	0x0800c029
 800c004:	0800c031 	.word	0x0800c031
 800c008:	2300      	movs	r3, #0
 800c00a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c00e:	e18b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c010:	2304      	movs	r3, #4
 800c012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c016:	e187      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c018:	2308      	movs	r3, #8
 800c01a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c01e:	e183      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c020:	2310      	movs	r3, #16
 800c022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c026:	e17f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c028:	2320      	movs	r3, #32
 800c02a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c02e:	e17b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c030:	2340      	movs	r3, #64	; 0x40
 800c032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c036:	e177      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c038:	2380      	movs	r3, #128	; 0x80
 800c03a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c03e:	bf00      	nop
 800c040:	e172      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a1c      	ldr	r2, [pc, #112]	; (800c0b8 <UART_SetConfig+0x368>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d144      	bne.n	800c0d6 <UART_SetConfig+0x386>
 800c04c:	4b16      	ldr	r3, [pc, #88]	; (800c0a8 <UART_SetConfig+0x358>)
 800c04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c050:	f003 0307 	and.w	r3, r3, #7
 800c054:	2b05      	cmp	r3, #5
 800c056:	d839      	bhi.n	800c0cc <UART_SetConfig+0x37c>
 800c058:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <UART_SetConfig+0x310>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c079 	.word	0x0800c079
 800c064:	0800c081 	.word	0x0800c081
 800c068:	0800c089 	.word	0x0800c089
 800c06c:	0800c091 	.word	0x0800c091
 800c070:	0800c0bd 	.word	0x0800c0bd
 800c074:	0800c0c5 	.word	0x0800c0c5
 800c078:	2300      	movs	r3, #0
 800c07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c07e:	e153      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c080:	2304      	movs	r3, #4
 800c082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c086:	e14f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c088:	2308      	movs	r3, #8
 800c08a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c08e:	e14b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c090:	2310      	movs	r3, #16
 800c092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c096:	e147      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c098:	cfff69f3 	.word	0xcfff69f3
 800c09c:	58000c00 	.word	0x58000c00
 800c0a0:	11fff4ff 	.word	0x11fff4ff
 800c0a4:	40011000 	.word	0x40011000
 800c0a8:	58024400 	.word	0x58024400
 800c0ac:	40004400 	.word	0x40004400
 800c0b0:	40004800 	.word	0x40004800
 800c0b4:	40004c00 	.word	0x40004c00
 800c0b8:	40005000 	.word	0x40005000
 800c0bc:	2320      	movs	r3, #32
 800c0be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0c2:	e131      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c0c4:	2340      	movs	r3, #64	; 0x40
 800c0c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0ca:	e12d      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c0cc:	2380      	movs	r3, #128	; 0x80
 800c0ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c0d2:	bf00      	nop
 800c0d4:	e128      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4ac3      	ldr	r2, [pc, #780]	; (800c3e8 <UART_SetConfig+0x698>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d178      	bne.n	800c1d2 <UART_SetConfig+0x482>
 800c0e0:	4bc2      	ldr	r3, [pc, #776]	; (800c3ec <UART_SetConfig+0x69c>)
 800c0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0e8:	2b28      	cmp	r3, #40	; 0x28
 800c0ea:	d86d      	bhi.n	800c1c8 <UART_SetConfig+0x478>
 800c0ec:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <UART_SetConfig+0x3a4>)
 800c0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f2:	bf00      	nop
 800c0f4:	0800c199 	.word	0x0800c199
 800c0f8:	0800c1c9 	.word	0x0800c1c9
 800c0fc:	0800c1c9 	.word	0x0800c1c9
 800c100:	0800c1c9 	.word	0x0800c1c9
 800c104:	0800c1c9 	.word	0x0800c1c9
 800c108:	0800c1c9 	.word	0x0800c1c9
 800c10c:	0800c1c9 	.word	0x0800c1c9
 800c110:	0800c1c9 	.word	0x0800c1c9
 800c114:	0800c1a1 	.word	0x0800c1a1
 800c118:	0800c1c9 	.word	0x0800c1c9
 800c11c:	0800c1c9 	.word	0x0800c1c9
 800c120:	0800c1c9 	.word	0x0800c1c9
 800c124:	0800c1c9 	.word	0x0800c1c9
 800c128:	0800c1c9 	.word	0x0800c1c9
 800c12c:	0800c1c9 	.word	0x0800c1c9
 800c130:	0800c1c9 	.word	0x0800c1c9
 800c134:	0800c1a9 	.word	0x0800c1a9
 800c138:	0800c1c9 	.word	0x0800c1c9
 800c13c:	0800c1c9 	.word	0x0800c1c9
 800c140:	0800c1c9 	.word	0x0800c1c9
 800c144:	0800c1c9 	.word	0x0800c1c9
 800c148:	0800c1c9 	.word	0x0800c1c9
 800c14c:	0800c1c9 	.word	0x0800c1c9
 800c150:	0800c1c9 	.word	0x0800c1c9
 800c154:	0800c1b1 	.word	0x0800c1b1
 800c158:	0800c1c9 	.word	0x0800c1c9
 800c15c:	0800c1c9 	.word	0x0800c1c9
 800c160:	0800c1c9 	.word	0x0800c1c9
 800c164:	0800c1c9 	.word	0x0800c1c9
 800c168:	0800c1c9 	.word	0x0800c1c9
 800c16c:	0800c1c9 	.word	0x0800c1c9
 800c170:	0800c1c9 	.word	0x0800c1c9
 800c174:	0800c1b9 	.word	0x0800c1b9
 800c178:	0800c1c9 	.word	0x0800c1c9
 800c17c:	0800c1c9 	.word	0x0800c1c9
 800c180:	0800c1c9 	.word	0x0800c1c9
 800c184:	0800c1c9 	.word	0x0800c1c9
 800c188:	0800c1c9 	.word	0x0800c1c9
 800c18c:	0800c1c9 	.word	0x0800c1c9
 800c190:	0800c1c9 	.word	0x0800c1c9
 800c194:	0800c1c1 	.word	0x0800c1c1
 800c198:	2301      	movs	r3, #1
 800c19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c19e:	e0c3      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1a6:	e0bf      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c1a8:	2308      	movs	r3, #8
 800c1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1ae:	e0bb      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c1b0:	2310      	movs	r3, #16
 800c1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1b6:	e0b7      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c1b8:	2320      	movs	r3, #32
 800c1ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1be:	e0b3      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c1c0:	2340      	movs	r3, #64	; 0x40
 800c1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1c6:	e0af      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c1c8:	2380      	movs	r3, #128	; 0x80
 800c1ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c1ce:	bf00      	nop
 800c1d0:	e0aa      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a86      	ldr	r2, [pc, #536]	; (800c3f0 <UART_SetConfig+0x6a0>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d132      	bne.n	800c242 <UART_SetConfig+0x4f2>
 800c1dc:	4b83      	ldr	r3, [pc, #524]	; (800c3ec <UART_SetConfig+0x69c>)
 800c1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e0:	f003 0307 	and.w	r3, r3, #7
 800c1e4:	2b05      	cmp	r3, #5
 800c1e6:	d827      	bhi.n	800c238 <UART_SetConfig+0x4e8>
 800c1e8:	a201      	add	r2, pc, #4	; (adr r2, 800c1f0 <UART_SetConfig+0x4a0>)
 800c1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ee:	bf00      	nop
 800c1f0:	0800c209 	.word	0x0800c209
 800c1f4:	0800c211 	.word	0x0800c211
 800c1f8:	0800c219 	.word	0x0800c219
 800c1fc:	0800c221 	.word	0x0800c221
 800c200:	0800c229 	.word	0x0800c229
 800c204:	0800c231 	.word	0x0800c231
 800c208:	2300      	movs	r3, #0
 800c20a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c20e:	e08b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c210:	2304      	movs	r3, #4
 800c212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c216:	e087      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c218:	2308      	movs	r3, #8
 800c21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c21e:	e083      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c220:	2310      	movs	r3, #16
 800c222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c226:	e07f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c228:	2320      	movs	r3, #32
 800c22a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c22e:	e07b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c230:	2340      	movs	r3, #64	; 0x40
 800c232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c236:	e077      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c238:	2380      	movs	r3, #128	; 0x80
 800c23a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c23e:	bf00      	nop
 800c240:	e072      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a6b      	ldr	r2, [pc, #428]	; (800c3f4 <UART_SetConfig+0x6a4>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d132      	bne.n	800c2b2 <UART_SetConfig+0x562>
 800c24c:	4b67      	ldr	r3, [pc, #412]	; (800c3ec <UART_SetConfig+0x69c>)
 800c24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c250:	f003 0307 	and.w	r3, r3, #7
 800c254:	2b05      	cmp	r3, #5
 800c256:	d827      	bhi.n	800c2a8 <UART_SetConfig+0x558>
 800c258:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <UART_SetConfig+0x510>)
 800c25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25e:	bf00      	nop
 800c260:	0800c279 	.word	0x0800c279
 800c264:	0800c281 	.word	0x0800c281
 800c268:	0800c289 	.word	0x0800c289
 800c26c:	0800c291 	.word	0x0800c291
 800c270:	0800c299 	.word	0x0800c299
 800c274:	0800c2a1 	.word	0x0800c2a1
 800c278:	2300      	movs	r3, #0
 800c27a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c27e:	e053      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c280:	2304      	movs	r3, #4
 800c282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c286:	e04f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c288:	2308      	movs	r3, #8
 800c28a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c28e:	e04b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c290:	2310      	movs	r3, #16
 800c292:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c296:	e047      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c298:	2320      	movs	r3, #32
 800c29a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c29e:	e043      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c2a0:	2340      	movs	r3, #64	; 0x40
 800c2a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2a6:	e03f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c2a8:	2380      	movs	r3, #128	; 0x80
 800c2aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2ae:	bf00      	nop
 800c2b0:	e03a      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a50      	ldr	r2, [pc, #320]	; (800c3f8 <UART_SetConfig+0x6a8>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d132      	bne.n	800c322 <UART_SetConfig+0x5d2>
 800c2bc:	4b4b      	ldr	r3, [pc, #300]	; (800c3ec <UART_SetConfig+0x69c>)
 800c2be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c0:	f003 0307 	and.w	r3, r3, #7
 800c2c4:	2b05      	cmp	r3, #5
 800c2c6:	d827      	bhi.n	800c318 <UART_SetConfig+0x5c8>
 800c2c8:	a201      	add	r2, pc, #4	; (adr r2, 800c2d0 <UART_SetConfig+0x580>)
 800c2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ce:	bf00      	nop
 800c2d0:	0800c2e9 	.word	0x0800c2e9
 800c2d4:	0800c2f1 	.word	0x0800c2f1
 800c2d8:	0800c2f9 	.word	0x0800c2f9
 800c2dc:	0800c301 	.word	0x0800c301
 800c2e0:	0800c309 	.word	0x0800c309
 800c2e4:	0800c311 	.word	0x0800c311
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2ee:	e01b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2f6:	e017      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c2f8:	2308      	movs	r3, #8
 800c2fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c2fe:	e013      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c300:	2310      	movs	r3, #16
 800c302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c306:	e00f      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c308:	2320      	movs	r3, #32
 800c30a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c30e:	e00b      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c310:	2340      	movs	r3, #64	; 0x40
 800c312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c316:	e007      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c318:	2380      	movs	r3, #128	; 0x80
 800c31a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c31e:	bf00      	nop
 800c320:	e002      	b.n	800c328 <UART_SetConfig+0x5d8>
 800c322:	2380      	movs	r3, #128	; 0x80
 800c324:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a32      	ldr	r2, [pc, #200]	; (800c3f8 <UART_SetConfig+0x6a8>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	f040 86f7 	bne.w	800d122 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c334:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c338:	2b08      	cmp	r3, #8
 800c33a:	f000 80c0 	beq.w	800c4be <UART_SetConfig+0x76e>
 800c33e:	2b08      	cmp	r3, #8
 800c340:	dc04      	bgt.n	800c34c <UART_SetConfig+0x5fc>
 800c342:	2b02      	cmp	r3, #2
 800c344:	d00c      	beq.n	800c360 <UART_SetConfig+0x610>
 800c346:	2b04      	cmp	r3, #4
 800c348:	d065      	beq.n	800c416 <UART_SetConfig+0x6c6>
 800c34a:	e27a      	b.n	800c842 <UART_SetConfig+0xaf2>
 800c34c:	2b20      	cmp	r3, #32
 800c34e:	f000 81b0 	beq.w	800c6b2 <UART_SetConfig+0x962>
 800c352:	2b40      	cmp	r3, #64	; 0x40
 800c354:	f000 821e 	beq.w	800c794 <UART_SetConfig+0xa44>
 800c358:	2b10      	cmp	r3, #16
 800c35a:	f000 8104 	beq.w	800c566 <UART_SetConfig+0x816>
 800c35e:	e270      	b.n	800c842 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c360:	f7fd f8dc 	bl	800951c <HAL_RCCEx_GetD3PCLK1Freq>
 800c364:	4602      	mov	r2, r0
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d04e      	beq.n	800c40c <UART_SetConfig+0x6bc>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	2b01      	cmp	r3, #1
 800c374:	d048      	beq.n	800c408 <UART_SetConfig+0x6b8>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d042      	beq.n	800c404 <UART_SetConfig+0x6b4>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c382:	2b03      	cmp	r3, #3
 800c384:	d03c      	beq.n	800c400 <UART_SetConfig+0x6b0>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38a:	2b04      	cmp	r3, #4
 800c38c:	d036      	beq.n	800c3fc <UART_SetConfig+0x6ac>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c392:	2b05      	cmp	r3, #5
 800c394:	d026      	beq.n	800c3e4 <UART_SetConfig+0x694>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	2b06      	cmp	r3, #6
 800c39c:	d020      	beq.n	800c3e0 <UART_SetConfig+0x690>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a2:	2b07      	cmp	r3, #7
 800c3a4:	d01a      	beq.n	800c3dc <UART_SetConfig+0x68c>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3aa:	2b08      	cmp	r3, #8
 800c3ac:	d014      	beq.n	800c3d8 <UART_SetConfig+0x688>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b2:	2b09      	cmp	r3, #9
 800c3b4:	d00e      	beq.n	800c3d4 <UART_SetConfig+0x684>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ba:	2b0a      	cmp	r3, #10
 800c3bc:	d008      	beq.n	800c3d0 <UART_SetConfig+0x680>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	2b0b      	cmp	r3, #11
 800c3c4:	d102      	bne.n	800c3cc <UART_SetConfig+0x67c>
 800c3c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3ca:	e020      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e01e      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3d0:	2380      	movs	r3, #128	; 0x80
 800c3d2:	e01c      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3d4:	2340      	movs	r3, #64	; 0x40
 800c3d6:	e01a      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3d8:	2320      	movs	r3, #32
 800c3da:	e018      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3dc:	2310      	movs	r3, #16
 800c3de:	e016      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3e0:	230c      	movs	r3, #12
 800c3e2:	e014      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3e4:	230a      	movs	r3, #10
 800c3e6:	e012      	b.n	800c40e <UART_SetConfig+0x6be>
 800c3e8:	40011400 	.word	0x40011400
 800c3ec:	58024400 	.word	0x58024400
 800c3f0:	40007800 	.word	0x40007800
 800c3f4:	40007c00 	.word	0x40007c00
 800c3f8:	58000c00 	.word	0x58000c00
 800c3fc:	2308      	movs	r3, #8
 800c3fe:	e006      	b.n	800c40e <UART_SetConfig+0x6be>
 800c400:	2306      	movs	r3, #6
 800c402:	e004      	b.n	800c40e <UART_SetConfig+0x6be>
 800c404:	2304      	movs	r3, #4
 800c406:	e002      	b.n	800c40e <UART_SetConfig+0x6be>
 800c408:	2302      	movs	r3, #2
 800c40a:	e000      	b.n	800c40e <UART_SetConfig+0x6be>
 800c40c:	2301      	movs	r3, #1
 800c40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c414:	e219      	b.n	800c84a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c416:	f107 0318 	add.w	r3, r7, #24
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fd f894 	bl	8009548 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c420:	69fa      	ldr	r2, [r7, #28]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c426:	2b00      	cmp	r3, #0
 800c428:	d044      	beq.n	800c4b4 <UART_SetConfig+0x764>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d03e      	beq.n	800c4b0 <UART_SetConfig+0x760>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c436:	2b02      	cmp	r3, #2
 800c438:	d038      	beq.n	800c4ac <UART_SetConfig+0x75c>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d032      	beq.n	800c4a8 <UART_SetConfig+0x758>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c446:	2b04      	cmp	r3, #4
 800c448:	d02c      	beq.n	800c4a4 <UART_SetConfig+0x754>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44e:	2b05      	cmp	r3, #5
 800c450:	d026      	beq.n	800c4a0 <UART_SetConfig+0x750>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c456:	2b06      	cmp	r3, #6
 800c458:	d020      	beq.n	800c49c <UART_SetConfig+0x74c>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45e:	2b07      	cmp	r3, #7
 800c460:	d01a      	beq.n	800c498 <UART_SetConfig+0x748>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c466:	2b08      	cmp	r3, #8
 800c468:	d014      	beq.n	800c494 <UART_SetConfig+0x744>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46e:	2b09      	cmp	r3, #9
 800c470:	d00e      	beq.n	800c490 <UART_SetConfig+0x740>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c476:	2b0a      	cmp	r3, #10
 800c478:	d008      	beq.n	800c48c <UART_SetConfig+0x73c>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47e:	2b0b      	cmp	r3, #11
 800c480:	d102      	bne.n	800c488 <UART_SetConfig+0x738>
 800c482:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c486:	e016      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c488:	2301      	movs	r3, #1
 800c48a:	e014      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c48c:	2380      	movs	r3, #128	; 0x80
 800c48e:	e012      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c490:	2340      	movs	r3, #64	; 0x40
 800c492:	e010      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c494:	2320      	movs	r3, #32
 800c496:	e00e      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c498:	2310      	movs	r3, #16
 800c49a:	e00c      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c49c:	230c      	movs	r3, #12
 800c49e:	e00a      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c4a0:	230a      	movs	r3, #10
 800c4a2:	e008      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	e006      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c4a8:	2306      	movs	r3, #6
 800c4aa:	e004      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	e002      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	e000      	b.n	800c4b6 <UART_SetConfig+0x766>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4bc:	e1c5      	b.n	800c84a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4be:	f107 030c 	add.w	r3, r7, #12
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fd f98c 	bl	80097e0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d044      	beq.n	800c55c <UART_SetConfig+0x80c>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d03e      	beq.n	800c558 <UART_SetConfig+0x808>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d038      	beq.n	800c554 <UART_SetConfig+0x804>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d032      	beq.n	800c550 <UART_SetConfig+0x800>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d02c      	beq.n	800c54c <UART_SetConfig+0x7fc>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	2b05      	cmp	r3, #5
 800c4f8:	d026      	beq.n	800c548 <UART_SetConfig+0x7f8>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	2b06      	cmp	r3, #6
 800c500:	d020      	beq.n	800c544 <UART_SetConfig+0x7f4>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c506:	2b07      	cmp	r3, #7
 800c508:	d01a      	beq.n	800c540 <UART_SetConfig+0x7f0>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50e:	2b08      	cmp	r3, #8
 800c510:	d014      	beq.n	800c53c <UART_SetConfig+0x7ec>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c516:	2b09      	cmp	r3, #9
 800c518:	d00e      	beq.n	800c538 <UART_SetConfig+0x7e8>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51e:	2b0a      	cmp	r3, #10
 800c520:	d008      	beq.n	800c534 <UART_SetConfig+0x7e4>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c526:	2b0b      	cmp	r3, #11
 800c528:	d102      	bne.n	800c530 <UART_SetConfig+0x7e0>
 800c52a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c52e:	e016      	b.n	800c55e <UART_SetConfig+0x80e>
 800c530:	2301      	movs	r3, #1
 800c532:	e014      	b.n	800c55e <UART_SetConfig+0x80e>
 800c534:	2380      	movs	r3, #128	; 0x80
 800c536:	e012      	b.n	800c55e <UART_SetConfig+0x80e>
 800c538:	2340      	movs	r3, #64	; 0x40
 800c53a:	e010      	b.n	800c55e <UART_SetConfig+0x80e>
 800c53c:	2320      	movs	r3, #32
 800c53e:	e00e      	b.n	800c55e <UART_SetConfig+0x80e>
 800c540:	2310      	movs	r3, #16
 800c542:	e00c      	b.n	800c55e <UART_SetConfig+0x80e>
 800c544:	230c      	movs	r3, #12
 800c546:	e00a      	b.n	800c55e <UART_SetConfig+0x80e>
 800c548:	230a      	movs	r3, #10
 800c54a:	e008      	b.n	800c55e <UART_SetConfig+0x80e>
 800c54c:	2308      	movs	r3, #8
 800c54e:	e006      	b.n	800c55e <UART_SetConfig+0x80e>
 800c550:	2306      	movs	r3, #6
 800c552:	e004      	b.n	800c55e <UART_SetConfig+0x80e>
 800c554:	2304      	movs	r3, #4
 800c556:	e002      	b.n	800c55e <UART_SetConfig+0x80e>
 800c558:	2302      	movs	r3, #2
 800c55a:	e000      	b.n	800c55e <UART_SetConfig+0x80e>
 800c55c:	2301      	movs	r3, #1
 800c55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c562:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c564:	e171      	b.n	800c84a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c566:	4b7a      	ldr	r3, [pc, #488]	; (800c750 <UART_SetConfig+0xa00>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d054      	beq.n	800c61c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c572:	4b77      	ldr	r3, [pc, #476]	; (800c750 <UART_SetConfig+0xa00>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	08db      	lsrs	r3, r3, #3
 800c578:	f003 0303 	and.w	r3, r3, #3
 800c57c:	4a75      	ldr	r2, [pc, #468]	; (800c754 <UART_SetConfig+0xa04>)
 800c57e:	40da      	lsrs	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c584:	2b00      	cmp	r3, #0
 800c586:	d044      	beq.n	800c612 <UART_SetConfig+0x8c2>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d03e      	beq.n	800c60e <UART_SetConfig+0x8be>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	2b02      	cmp	r3, #2
 800c596:	d038      	beq.n	800c60a <UART_SetConfig+0x8ba>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d032      	beq.n	800c606 <UART_SetConfig+0x8b6>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	d02c      	beq.n	800c602 <UART_SetConfig+0x8b2>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	d026      	beq.n	800c5fe <UART_SetConfig+0x8ae>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b4:	2b06      	cmp	r3, #6
 800c5b6:	d020      	beq.n	800c5fa <UART_SetConfig+0x8aa>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	2b07      	cmp	r3, #7
 800c5be:	d01a      	beq.n	800c5f6 <UART_SetConfig+0x8a6>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	2b08      	cmp	r3, #8
 800c5c6:	d014      	beq.n	800c5f2 <UART_SetConfig+0x8a2>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	d00e      	beq.n	800c5ee <UART_SetConfig+0x89e>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d4:	2b0a      	cmp	r3, #10
 800c5d6:	d008      	beq.n	800c5ea <UART_SetConfig+0x89a>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	2b0b      	cmp	r3, #11
 800c5de:	d102      	bne.n	800c5e6 <UART_SetConfig+0x896>
 800c5e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5e4:	e016      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e014      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c5ea:	2380      	movs	r3, #128	; 0x80
 800c5ec:	e012      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c5ee:	2340      	movs	r3, #64	; 0x40
 800c5f0:	e010      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	e00e      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c5f6:	2310      	movs	r3, #16
 800c5f8:	e00c      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	e00a      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c5fe:	230a      	movs	r3, #10
 800c600:	e008      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c602:	2308      	movs	r3, #8
 800c604:	e006      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c606:	2306      	movs	r3, #6
 800c608:	e004      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c60a:	2304      	movs	r3, #4
 800c60c:	e002      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c60e:	2302      	movs	r3, #2
 800c610:	e000      	b.n	800c614 <UART_SetConfig+0x8c4>
 800c612:	2301      	movs	r3, #1
 800c614:	fbb2 f3f3 	udiv	r3, r2, r3
 800c618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800c61a:	e116      	b.n	800c84a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c620:	2b00      	cmp	r3, #0
 800c622:	d043      	beq.n	800c6ac <UART_SetConfig+0x95c>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d03d      	beq.n	800c6a8 <UART_SetConfig+0x958>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c630:	2b02      	cmp	r3, #2
 800c632:	d037      	beq.n	800c6a4 <UART_SetConfig+0x954>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d031      	beq.n	800c6a0 <UART_SetConfig+0x950>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	2b04      	cmp	r3, #4
 800c642:	d02b      	beq.n	800c69c <UART_SetConfig+0x94c>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c648:	2b05      	cmp	r3, #5
 800c64a:	d025      	beq.n	800c698 <UART_SetConfig+0x948>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c650:	2b06      	cmp	r3, #6
 800c652:	d01f      	beq.n	800c694 <UART_SetConfig+0x944>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c658:	2b07      	cmp	r3, #7
 800c65a:	d019      	beq.n	800c690 <UART_SetConfig+0x940>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c660:	2b08      	cmp	r3, #8
 800c662:	d013      	beq.n	800c68c <UART_SetConfig+0x93c>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c668:	2b09      	cmp	r3, #9
 800c66a:	d00d      	beq.n	800c688 <UART_SetConfig+0x938>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	2b0a      	cmp	r3, #10
 800c672:	d007      	beq.n	800c684 <UART_SetConfig+0x934>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c678:	2b0b      	cmp	r3, #11
 800c67a:	d101      	bne.n	800c680 <UART_SetConfig+0x930>
 800c67c:	4b36      	ldr	r3, [pc, #216]	; (800c758 <UART_SetConfig+0xa08>)
 800c67e:	e016      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c680:	4b34      	ldr	r3, [pc, #208]	; (800c754 <UART_SetConfig+0xa04>)
 800c682:	e014      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c684:	4b35      	ldr	r3, [pc, #212]	; (800c75c <UART_SetConfig+0xa0c>)
 800c686:	e012      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c688:	4b35      	ldr	r3, [pc, #212]	; (800c760 <UART_SetConfig+0xa10>)
 800c68a:	e010      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c68c:	4b35      	ldr	r3, [pc, #212]	; (800c764 <UART_SetConfig+0xa14>)
 800c68e:	e00e      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c690:	4b35      	ldr	r3, [pc, #212]	; (800c768 <UART_SetConfig+0xa18>)
 800c692:	e00c      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c694:	4b35      	ldr	r3, [pc, #212]	; (800c76c <UART_SetConfig+0xa1c>)
 800c696:	e00a      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c698:	4b35      	ldr	r3, [pc, #212]	; (800c770 <UART_SetConfig+0xa20>)
 800c69a:	e008      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c69c:	4b35      	ldr	r3, [pc, #212]	; (800c774 <UART_SetConfig+0xa24>)
 800c69e:	e006      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c6a0:	4b35      	ldr	r3, [pc, #212]	; (800c778 <UART_SetConfig+0xa28>)
 800c6a2:	e004      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c6a4:	4b35      	ldr	r3, [pc, #212]	; (800c77c <UART_SetConfig+0xa2c>)
 800c6a6:	e002      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c6a8:	4b35      	ldr	r3, [pc, #212]	; (800c780 <UART_SetConfig+0xa30>)
 800c6aa:	e000      	b.n	800c6ae <UART_SetConfig+0x95e>
 800c6ac:	4b29      	ldr	r3, [pc, #164]	; (800c754 <UART_SetConfig+0xa04>)
 800c6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c6b0:	e0cb      	b.n	800c84a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d046      	beq.n	800c748 <UART_SetConfig+0x9f8>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d040      	beq.n	800c744 <UART_SetConfig+0x9f4>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d03a      	beq.n	800c740 <UART_SetConfig+0x9f0>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	d034      	beq.n	800c73c <UART_SetConfig+0x9ec>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d6:	2b04      	cmp	r3, #4
 800c6d8:	d02e      	beq.n	800c738 <UART_SetConfig+0x9e8>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	2b05      	cmp	r3, #5
 800c6e0:	d028      	beq.n	800c734 <UART_SetConfig+0x9e4>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e6:	2b06      	cmp	r3, #6
 800c6e8:	d022      	beq.n	800c730 <UART_SetConfig+0x9e0>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ee:	2b07      	cmp	r3, #7
 800c6f0:	d01c      	beq.n	800c72c <UART_SetConfig+0x9dc>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	2b08      	cmp	r3, #8
 800c6f8:	d016      	beq.n	800c728 <UART_SetConfig+0x9d8>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	2b09      	cmp	r3, #9
 800c700:	d00f      	beq.n	800c722 <UART_SetConfig+0x9d2>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	2b0a      	cmp	r3, #10
 800c708:	d008      	beq.n	800c71c <UART_SetConfig+0x9cc>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70e:	2b0b      	cmp	r3, #11
 800c710:	d102      	bne.n	800c718 <UART_SetConfig+0x9c8>
 800c712:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c716:	e018      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c718:	4b13      	ldr	r3, [pc, #76]	; (800c768 <UART_SetConfig+0xa18>)
 800c71a:	e016      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c71c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c720:	e013      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c722:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c726:	e010      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c728:	4b16      	ldr	r3, [pc, #88]	; (800c784 <UART_SetConfig+0xa34>)
 800c72a:	e00e      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c72c:	4b0a      	ldr	r3, [pc, #40]	; (800c758 <UART_SetConfig+0xa08>)
 800c72e:	e00c      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c730:	4b15      	ldr	r3, [pc, #84]	; (800c788 <UART_SetConfig+0xa38>)
 800c732:	e00a      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c734:	4b15      	ldr	r3, [pc, #84]	; (800c78c <UART_SetConfig+0xa3c>)
 800c736:	e008      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c738:	4b08      	ldr	r3, [pc, #32]	; (800c75c <UART_SetConfig+0xa0c>)
 800c73a:	e006      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c73c:	4b14      	ldr	r3, [pc, #80]	; (800c790 <UART_SetConfig+0xa40>)
 800c73e:	e004      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c740:	4b07      	ldr	r3, [pc, #28]	; (800c760 <UART_SetConfig+0xa10>)
 800c742:	e002      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c744:	4b07      	ldr	r3, [pc, #28]	; (800c764 <UART_SetConfig+0xa14>)
 800c746:	e000      	b.n	800c74a <UART_SetConfig+0x9fa>
 800c748:	4b07      	ldr	r3, [pc, #28]	; (800c768 <UART_SetConfig+0xa18>)
 800c74a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c74c:	e07d      	b.n	800c84a <UART_SetConfig+0xafa>
 800c74e:	bf00      	nop
 800c750:	58024400 	.word	0x58024400
 800c754:	03d09000 	.word	0x03d09000
 800c758:	0003d090 	.word	0x0003d090
 800c75c:	0007a120 	.word	0x0007a120
 800c760:	000f4240 	.word	0x000f4240
 800c764:	001e8480 	.word	0x001e8480
 800c768:	003d0900 	.word	0x003d0900
 800c76c:	00516155 	.word	0x00516155
 800c770:	0061a800 	.word	0x0061a800
 800c774:	007a1200 	.word	0x007a1200
 800c778:	00a2c2aa 	.word	0x00a2c2aa
 800c77c:	00f42400 	.word	0x00f42400
 800c780:	01e84800 	.word	0x01e84800
 800c784:	0001e848 	.word	0x0001e848
 800c788:	00051615 	.word	0x00051615
 800c78c:	00061a80 	.word	0x00061a80
 800c790:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d04e      	beq.n	800c83a <UART_SetConfig+0xaea>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d047      	beq.n	800c834 <UART_SetConfig+0xae4>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d040      	beq.n	800c82e <UART_SetConfig+0xade>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d039      	beq.n	800c828 <UART_SetConfig+0xad8>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b8:	2b04      	cmp	r3, #4
 800c7ba:	d032      	beq.n	800c822 <UART_SetConfig+0xad2>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c0:	2b05      	cmp	r3, #5
 800c7c2:	d02b      	beq.n	800c81c <UART_SetConfig+0xacc>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c8:	2b06      	cmp	r3, #6
 800c7ca:	d024      	beq.n	800c816 <UART_SetConfig+0xac6>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d0:	2b07      	cmp	r3, #7
 800c7d2:	d01d      	beq.n	800c810 <UART_SetConfig+0xac0>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d8:	2b08      	cmp	r3, #8
 800c7da:	d016      	beq.n	800c80a <UART_SetConfig+0xaba>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	2b09      	cmp	r3, #9
 800c7e2:	d00f      	beq.n	800c804 <UART_SetConfig+0xab4>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e8:	2b0a      	cmp	r3, #10
 800c7ea:	d008      	beq.n	800c7fe <UART_SetConfig+0xaae>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	2b0b      	cmp	r3, #11
 800c7f2:	d101      	bne.n	800c7f8 <UART_SetConfig+0xaa8>
 800c7f4:	2380      	movs	r3, #128	; 0x80
 800c7f6:	e022      	b.n	800c83e <UART_SetConfig+0xaee>
 800c7f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7fc:	e01f      	b.n	800c83e <UART_SetConfig+0xaee>
 800c7fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c802:	e01c      	b.n	800c83e <UART_SetConfig+0xaee>
 800c804:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c808:	e019      	b.n	800c83e <UART_SetConfig+0xaee>
 800c80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c80e:	e016      	b.n	800c83e <UART_SetConfig+0xaee>
 800c810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c814:	e013      	b.n	800c83e <UART_SetConfig+0xaee>
 800c816:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c81a:	e010      	b.n	800c83e <UART_SetConfig+0xaee>
 800c81c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c820:	e00d      	b.n	800c83e <UART_SetConfig+0xaee>
 800c822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c826:	e00a      	b.n	800c83e <UART_SetConfig+0xaee>
 800c828:	f241 5355 	movw	r3, #5461	; 0x1555
 800c82c:	e007      	b.n	800c83e <UART_SetConfig+0xaee>
 800c82e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c832:	e004      	b.n	800c83e <UART_SetConfig+0xaee>
 800c834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c838:	e001      	b.n	800c83e <UART_SetConfig+0xaee>
 800c83a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c83e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c840:	e003      	b.n	800c84a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c848:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f001 83e8 	beq.w	800e022 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	4613      	mov	r3, r2
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	4413      	add	r3, r2
 800c85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c85e:	429a      	cmp	r2, r3
 800c860:	d305      	bcc.n	800c86e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d904      	bls.n	800c878 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c874:	f001 bbd5 	b.w	800e022 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800c878:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c87c:	2b08      	cmp	r3, #8
 800c87e:	f000 8154 	beq.w	800cb2a <UART_SetConfig+0xdda>
 800c882:	2b08      	cmp	r3, #8
 800c884:	dc06      	bgt.n	800c894 <UART_SetConfig+0xb44>
 800c886:	2b02      	cmp	r3, #2
 800c888:	d00f      	beq.n	800c8aa <UART_SetConfig+0xb5a>
 800c88a:	2b04      	cmp	r3, #4
 800c88c:	f000 80ac 	beq.w	800c9e8 <UART_SetConfig+0xc98>
 800c890:	f000 bc30 	b.w	800d0f4 <UART_SetConfig+0x13a4>
 800c894:	2b20      	cmp	r3, #32
 800c896:	f000 832d 	beq.w	800cef4 <UART_SetConfig+0x11a4>
 800c89a:	2b40      	cmp	r3, #64	; 0x40
 800c89c:	f000 83a5 	beq.w	800cfea <UART_SetConfig+0x129a>
 800c8a0:	2b10      	cmp	r3, #16
 800c8a2:	f000 81e3 	beq.w	800cc6c <UART_SetConfig+0xf1c>
 800c8a6:	f000 bc25 	b.w	800d0f4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c8aa:	f7fc fe37 	bl	800951c <HAL_RCCEx_GetD3PCLK1Freq>
 800c8ae:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f04f 0100 	mov.w	r1, #0
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d067      	beq.n	800c990 <UART_SetConfig+0xc40>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d05e      	beq.n	800c986 <UART_SetConfig+0xc36>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d055      	beq.n	800c97c <UART_SetConfig+0xc2c>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d4:	2b03      	cmp	r3, #3
 800c8d6:	d04c      	beq.n	800c972 <UART_SetConfig+0xc22>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8dc:	2b04      	cmp	r3, #4
 800c8de:	d043      	beq.n	800c968 <UART_SetConfig+0xc18>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e4:	2b05      	cmp	r3, #5
 800c8e6:	d03a      	beq.n	800c95e <UART_SetConfig+0xc0e>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	2b06      	cmp	r3, #6
 800c8ee:	d031      	beq.n	800c954 <UART_SetConfig+0xc04>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	2b07      	cmp	r3, #7
 800c8f6:	d028      	beq.n	800c94a <UART_SetConfig+0xbfa>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d01f      	beq.n	800c940 <UART_SetConfig+0xbf0>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c904:	2b09      	cmp	r3, #9
 800c906:	d016      	beq.n	800c936 <UART_SetConfig+0xbe6>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90c:	2b0a      	cmp	r3, #10
 800c90e:	d00d      	beq.n	800c92c <UART_SetConfig+0xbdc>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c914:	2b0b      	cmp	r3, #11
 800c916:	d104      	bne.n	800c922 <UART_SetConfig+0xbd2>
 800c918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c91c:	f04f 0400 	mov.w	r4, #0
 800c920:	e03a      	b.n	800c998 <UART_SetConfig+0xc48>
 800c922:	f04f 0301 	mov.w	r3, #1
 800c926:	f04f 0400 	mov.w	r4, #0
 800c92a:	e035      	b.n	800c998 <UART_SetConfig+0xc48>
 800c92c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c930:	f04f 0400 	mov.w	r4, #0
 800c934:	e030      	b.n	800c998 <UART_SetConfig+0xc48>
 800c936:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c93a:	f04f 0400 	mov.w	r4, #0
 800c93e:	e02b      	b.n	800c998 <UART_SetConfig+0xc48>
 800c940:	f04f 0320 	mov.w	r3, #32
 800c944:	f04f 0400 	mov.w	r4, #0
 800c948:	e026      	b.n	800c998 <UART_SetConfig+0xc48>
 800c94a:	f04f 0310 	mov.w	r3, #16
 800c94e:	f04f 0400 	mov.w	r4, #0
 800c952:	e021      	b.n	800c998 <UART_SetConfig+0xc48>
 800c954:	f04f 030c 	mov.w	r3, #12
 800c958:	f04f 0400 	mov.w	r4, #0
 800c95c:	e01c      	b.n	800c998 <UART_SetConfig+0xc48>
 800c95e:	f04f 030a 	mov.w	r3, #10
 800c962:	f04f 0400 	mov.w	r4, #0
 800c966:	e017      	b.n	800c998 <UART_SetConfig+0xc48>
 800c968:	f04f 0308 	mov.w	r3, #8
 800c96c:	f04f 0400 	mov.w	r4, #0
 800c970:	e012      	b.n	800c998 <UART_SetConfig+0xc48>
 800c972:	f04f 0306 	mov.w	r3, #6
 800c976:	f04f 0400 	mov.w	r4, #0
 800c97a:	e00d      	b.n	800c998 <UART_SetConfig+0xc48>
 800c97c:	f04f 0304 	mov.w	r3, #4
 800c980:	f04f 0400 	mov.w	r4, #0
 800c984:	e008      	b.n	800c998 <UART_SetConfig+0xc48>
 800c986:	f04f 0302 	mov.w	r3, #2
 800c98a:	f04f 0400 	mov.w	r4, #0
 800c98e:	e003      	b.n	800c998 <UART_SetConfig+0xc48>
 800c990:	f04f 0301 	mov.w	r3, #1
 800c994:	f04f 0400 	mov.w	r4, #0
 800c998:	461a      	mov	r2, r3
 800c99a:	4623      	mov	r3, r4
 800c99c:	f7f3 fca4 	bl	80002e8 <__aeabi_uldivmod>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	f04f 0300 	mov.w	r3, #0
 800c9ac:	f04f 0400 	mov.w	r4, #0
 800c9b0:	0214      	lsls	r4, r2, #8
 800c9b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c9b6:	020b      	lsls	r3, r1, #8
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	6852      	ldr	r2, [r2, #4]
 800c9bc:	0852      	lsrs	r2, r2, #1
 800c9be:	4611      	mov	r1, r2
 800c9c0:	f04f 0200 	mov.w	r2, #0
 800c9c4:	eb13 0b01 	adds.w	fp, r3, r1
 800c9c8:	eb44 0c02 	adc.w	ip, r4, r2
 800c9cc:	4658      	mov	r0, fp
 800c9ce:	4661      	mov	r1, ip
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	f04f 0400 	mov.w	r4, #0
 800c9d8:	461a      	mov	r2, r3
 800c9da:	4623      	mov	r3, r4
 800c9dc:	f7f3 fc84 	bl	80002e8 <__aeabi_uldivmod>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9e6:	e389      	b.n	800d0fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9e8:	f107 0318 	add.w	r3, r7, #24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fc fdab 	bl	8009548 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f04f 0100 	mov.w	r1, #0
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d067      	beq.n	800cad2 <UART_SetConfig+0xd82>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d05e      	beq.n	800cac8 <UART_SetConfig+0xd78>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d055      	beq.n	800cabe <UART_SetConfig+0xd6e>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d04c      	beq.n	800cab4 <UART_SetConfig+0xd64>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d043      	beq.n	800caaa <UART_SetConfig+0xd5a>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca26:	2b05      	cmp	r3, #5
 800ca28:	d03a      	beq.n	800caa0 <UART_SetConfig+0xd50>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2e:	2b06      	cmp	r3, #6
 800ca30:	d031      	beq.n	800ca96 <UART_SetConfig+0xd46>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca36:	2b07      	cmp	r3, #7
 800ca38:	d028      	beq.n	800ca8c <UART_SetConfig+0xd3c>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3e:	2b08      	cmp	r3, #8
 800ca40:	d01f      	beq.n	800ca82 <UART_SetConfig+0xd32>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca46:	2b09      	cmp	r3, #9
 800ca48:	d016      	beq.n	800ca78 <UART_SetConfig+0xd28>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4e:	2b0a      	cmp	r3, #10
 800ca50:	d00d      	beq.n	800ca6e <UART_SetConfig+0xd1e>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca56:	2b0b      	cmp	r3, #11
 800ca58:	d104      	bne.n	800ca64 <UART_SetConfig+0xd14>
 800ca5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca5e:	f04f 0400 	mov.w	r4, #0
 800ca62:	e03a      	b.n	800cada <UART_SetConfig+0xd8a>
 800ca64:	f04f 0301 	mov.w	r3, #1
 800ca68:	f04f 0400 	mov.w	r4, #0
 800ca6c:	e035      	b.n	800cada <UART_SetConfig+0xd8a>
 800ca6e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ca72:	f04f 0400 	mov.w	r4, #0
 800ca76:	e030      	b.n	800cada <UART_SetConfig+0xd8a>
 800ca78:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ca7c:	f04f 0400 	mov.w	r4, #0
 800ca80:	e02b      	b.n	800cada <UART_SetConfig+0xd8a>
 800ca82:	f04f 0320 	mov.w	r3, #32
 800ca86:	f04f 0400 	mov.w	r4, #0
 800ca8a:	e026      	b.n	800cada <UART_SetConfig+0xd8a>
 800ca8c:	f04f 0310 	mov.w	r3, #16
 800ca90:	f04f 0400 	mov.w	r4, #0
 800ca94:	e021      	b.n	800cada <UART_SetConfig+0xd8a>
 800ca96:	f04f 030c 	mov.w	r3, #12
 800ca9a:	f04f 0400 	mov.w	r4, #0
 800ca9e:	e01c      	b.n	800cada <UART_SetConfig+0xd8a>
 800caa0:	f04f 030a 	mov.w	r3, #10
 800caa4:	f04f 0400 	mov.w	r4, #0
 800caa8:	e017      	b.n	800cada <UART_SetConfig+0xd8a>
 800caaa:	f04f 0308 	mov.w	r3, #8
 800caae:	f04f 0400 	mov.w	r4, #0
 800cab2:	e012      	b.n	800cada <UART_SetConfig+0xd8a>
 800cab4:	f04f 0306 	mov.w	r3, #6
 800cab8:	f04f 0400 	mov.w	r4, #0
 800cabc:	e00d      	b.n	800cada <UART_SetConfig+0xd8a>
 800cabe:	f04f 0304 	mov.w	r3, #4
 800cac2:	f04f 0400 	mov.w	r4, #0
 800cac6:	e008      	b.n	800cada <UART_SetConfig+0xd8a>
 800cac8:	f04f 0302 	mov.w	r3, #2
 800cacc:	f04f 0400 	mov.w	r4, #0
 800cad0:	e003      	b.n	800cada <UART_SetConfig+0xd8a>
 800cad2:	f04f 0301 	mov.w	r3, #1
 800cad6:	f04f 0400 	mov.w	r4, #0
 800cada:	461a      	mov	r2, r3
 800cadc:	4623      	mov	r3, r4
 800cade:	f7f3 fc03 	bl	80002e8 <__aeabi_uldivmod>
 800cae2:	4603      	mov	r3, r0
 800cae4:	460c      	mov	r4, r1
 800cae6:	4619      	mov	r1, r3
 800cae8:	4622      	mov	r2, r4
 800caea:	f04f 0300 	mov.w	r3, #0
 800caee:	f04f 0400 	mov.w	r4, #0
 800caf2:	0214      	lsls	r4, r2, #8
 800caf4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800caf8:	020b      	lsls	r3, r1, #8
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6852      	ldr	r2, [r2, #4]
 800cafe:	0852      	lsrs	r2, r2, #1
 800cb00:	4611      	mov	r1, r2
 800cb02:	f04f 0200 	mov.w	r2, #0
 800cb06:	eb13 0b01 	adds.w	fp, r3, r1
 800cb0a:	eb44 0c02 	adc.w	ip, r4, r2
 800cb0e:	4658      	mov	r0, fp
 800cb10:	4661      	mov	r1, ip
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	f04f 0400 	mov.w	r4, #0
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	4623      	mov	r3, r4
 800cb1e:	f7f3 fbe3 	bl	80002e8 <__aeabi_uldivmod>
 800cb22:	4603      	mov	r3, r0
 800cb24:	460c      	mov	r4, r1
 800cb26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb28:	e2e8      	b.n	800d0fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb2a:	f107 030c 	add.w	r3, r7, #12
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fc fe56 	bl	80097e0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f04f 0100 	mov.w	r1, #0
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d067      	beq.n	800cc14 <UART_SetConfig+0xec4>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d05e      	beq.n	800cc0a <UART_SetConfig+0xeba>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d055      	beq.n	800cc00 <UART_SetConfig+0xeb0>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d04c      	beq.n	800cbf6 <UART_SetConfig+0xea6>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb60:	2b04      	cmp	r3, #4
 800cb62:	d043      	beq.n	800cbec <UART_SetConfig+0xe9c>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb68:	2b05      	cmp	r3, #5
 800cb6a:	d03a      	beq.n	800cbe2 <UART_SetConfig+0xe92>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb70:	2b06      	cmp	r3, #6
 800cb72:	d031      	beq.n	800cbd8 <UART_SetConfig+0xe88>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb78:	2b07      	cmp	r3, #7
 800cb7a:	d028      	beq.n	800cbce <UART_SetConfig+0xe7e>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	2b08      	cmp	r3, #8
 800cb82:	d01f      	beq.n	800cbc4 <UART_SetConfig+0xe74>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb88:	2b09      	cmp	r3, #9
 800cb8a:	d016      	beq.n	800cbba <UART_SetConfig+0xe6a>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb90:	2b0a      	cmp	r3, #10
 800cb92:	d00d      	beq.n	800cbb0 <UART_SetConfig+0xe60>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb98:	2b0b      	cmp	r3, #11
 800cb9a:	d104      	bne.n	800cba6 <UART_SetConfig+0xe56>
 800cb9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cba0:	f04f 0400 	mov.w	r4, #0
 800cba4:	e03a      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cba6:	f04f 0301 	mov.w	r3, #1
 800cbaa:	f04f 0400 	mov.w	r4, #0
 800cbae:	e035      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbb0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cbb4:	f04f 0400 	mov.w	r4, #0
 800cbb8:	e030      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbba:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cbbe:	f04f 0400 	mov.w	r4, #0
 800cbc2:	e02b      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbc4:	f04f 0320 	mov.w	r3, #32
 800cbc8:	f04f 0400 	mov.w	r4, #0
 800cbcc:	e026      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbce:	f04f 0310 	mov.w	r3, #16
 800cbd2:	f04f 0400 	mov.w	r4, #0
 800cbd6:	e021      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbd8:	f04f 030c 	mov.w	r3, #12
 800cbdc:	f04f 0400 	mov.w	r4, #0
 800cbe0:	e01c      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbe2:	f04f 030a 	mov.w	r3, #10
 800cbe6:	f04f 0400 	mov.w	r4, #0
 800cbea:	e017      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbec:	f04f 0308 	mov.w	r3, #8
 800cbf0:	f04f 0400 	mov.w	r4, #0
 800cbf4:	e012      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cbf6:	f04f 0306 	mov.w	r3, #6
 800cbfa:	f04f 0400 	mov.w	r4, #0
 800cbfe:	e00d      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cc00:	f04f 0304 	mov.w	r3, #4
 800cc04:	f04f 0400 	mov.w	r4, #0
 800cc08:	e008      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cc0a:	f04f 0302 	mov.w	r3, #2
 800cc0e:	f04f 0400 	mov.w	r4, #0
 800cc12:	e003      	b.n	800cc1c <UART_SetConfig+0xecc>
 800cc14:	f04f 0301 	mov.w	r3, #1
 800cc18:	f04f 0400 	mov.w	r4, #0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4623      	mov	r3, r4
 800cc20:	f7f3 fb62 	bl	80002e8 <__aeabi_uldivmod>
 800cc24:	4603      	mov	r3, r0
 800cc26:	460c      	mov	r4, r1
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4622      	mov	r2, r4
 800cc2c:	f04f 0300 	mov.w	r3, #0
 800cc30:	f04f 0400 	mov.w	r4, #0
 800cc34:	0214      	lsls	r4, r2, #8
 800cc36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cc3a:	020b      	lsls	r3, r1, #8
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	6852      	ldr	r2, [r2, #4]
 800cc40:	0852      	lsrs	r2, r2, #1
 800cc42:	4611      	mov	r1, r2
 800cc44:	f04f 0200 	mov.w	r2, #0
 800cc48:	eb13 0b01 	adds.w	fp, r3, r1
 800cc4c:	eb44 0c02 	adc.w	ip, r4, r2
 800cc50:	4658      	mov	r0, fp
 800cc52:	4661      	mov	r1, ip
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	f04f 0400 	mov.w	r4, #0
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	4623      	mov	r3, r4
 800cc60:	f7f3 fb42 	bl	80002e8 <__aeabi_uldivmod>
 800cc64:	4603      	mov	r3, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc6a:	e247      	b.n	800d0fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc6c:	4b96      	ldr	r3, [pc, #600]	; (800cec8 <UART_SetConfig+0x1178>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0320 	and.w	r3, r3, #32
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 80a3 	beq.w	800cdc0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc7a:	4b93      	ldr	r3, [pc, #588]	; (800cec8 <UART_SetConfig+0x1178>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	08db      	lsrs	r3, r3, #3
 800cc80:	f003 0303 	and.w	r3, r3, #3
 800cc84:	4a91      	ldr	r2, [pc, #580]	; (800cecc <UART_SetConfig+0x117c>)
 800cc86:	fa22 f303 	lsr.w	r3, r2, r3
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f04f 0100 	mov.w	r1, #0
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d067      	beq.n	800cd68 <UART_SetConfig+0x1018>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d05e      	beq.n	800cd5e <UART_SetConfig+0x100e>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d055      	beq.n	800cd54 <UART_SetConfig+0x1004>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d04c      	beq.n	800cd4a <UART_SetConfig+0xffa>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb4:	2b04      	cmp	r3, #4
 800ccb6:	d043      	beq.n	800cd40 <UART_SetConfig+0xff0>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	2b05      	cmp	r3, #5
 800ccbe:	d03a      	beq.n	800cd36 <UART_SetConfig+0xfe6>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	2b06      	cmp	r3, #6
 800ccc6:	d031      	beq.n	800cd2c <UART_SetConfig+0xfdc>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cccc:	2b07      	cmp	r3, #7
 800ccce:	d028      	beq.n	800cd22 <UART_SetConfig+0xfd2>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	2b08      	cmp	r3, #8
 800ccd6:	d01f      	beq.n	800cd18 <UART_SetConfig+0xfc8>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccdc:	2b09      	cmp	r3, #9
 800ccde:	d016      	beq.n	800cd0e <UART_SetConfig+0xfbe>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce4:	2b0a      	cmp	r3, #10
 800cce6:	d00d      	beq.n	800cd04 <UART_SetConfig+0xfb4>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	2b0b      	cmp	r3, #11
 800ccee:	d104      	bne.n	800ccfa <UART_SetConfig+0xfaa>
 800ccf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ccf4:	f04f 0400 	mov.w	r4, #0
 800ccf8:	e03a      	b.n	800cd70 <UART_SetConfig+0x1020>
 800ccfa:	f04f 0301 	mov.w	r3, #1
 800ccfe:	f04f 0400 	mov.w	r4, #0
 800cd02:	e035      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd04:	f04f 0380 	mov.w	r3, #128	; 0x80
 800cd08:	f04f 0400 	mov.w	r4, #0
 800cd0c:	e030      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd0e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800cd12:	f04f 0400 	mov.w	r4, #0
 800cd16:	e02b      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd18:	f04f 0320 	mov.w	r3, #32
 800cd1c:	f04f 0400 	mov.w	r4, #0
 800cd20:	e026      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd22:	f04f 0310 	mov.w	r3, #16
 800cd26:	f04f 0400 	mov.w	r4, #0
 800cd2a:	e021      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd2c:	f04f 030c 	mov.w	r3, #12
 800cd30:	f04f 0400 	mov.w	r4, #0
 800cd34:	e01c      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd36:	f04f 030a 	mov.w	r3, #10
 800cd3a:	f04f 0400 	mov.w	r4, #0
 800cd3e:	e017      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd40:	f04f 0308 	mov.w	r3, #8
 800cd44:	f04f 0400 	mov.w	r4, #0
 800cd48:	e012      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd4a:	f04f 0306 	mov.w	r3, #6
 800cd4e:	f04f 0400 	mov.w	r4, #0
 800cd52:	e00d      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd54:	f04f 0304 	mov.w	r3, #4
 800cd58:	f04f 0400 	mov.w	r4, #0
 800cd5c:	e008      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd5e:	f04f 0302 	mov.w	r3, #2
 800cd62:	f04f 0400 	mov.w	r4, #0
 800cd66:	e003      	b.n	800cd70 <UART_SetConfig+0x1020>
 800cd68:	f04f 0301 	mov.w	r3, #1
 800cd6c:	f04f 0400 	mov.w	r4, #0
 800cd70:	461a      	mov	r2, r3
 800cd72:	4623      	mov	r3, r4
 800cd74:	f7f3 fab8 	bl	80002e8 <__aeabi_uldivmod>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4622      	mov	r2, r4
 800cd80:	f04f 0300 	mov.w	r3, #0
 800cd84:	f04f 0400 	mov.w	r4, #0
 800cd88:	0214      	lsls	r4, r2, #8
 800cd8a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd8e:	020b      	lsls	r3, r1, #8
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	6852      	ldr	r2, [r2, #4]
 800cd94:	0852      	lsrs	r2, r2, #1
 800cd96:	4611      	mov	r1, r2
 800cd98:	f04f 0200 	mov.w	r2, #0
 800cd9c:	eb13 0b01 	adds.w	fp, r3, r1
 800cda0:	eb44 0c02 	adc.w	ip, r4, r2
 800cda4:	4658      	mov	r0, fp
 800cda6:	4661      	mov	r1, ip
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f04f 0400 	mov.w	r4, #0
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	4623      	mov	r3, r4
 800cdb4:	f7f3 fa98 	bl	80002e8 <__aeabi_uldivmod>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	460c      	mov	r4, r1
 800cdbc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800cdbe:	e19d      	b.n	800d0fc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d05b      	beq.n	800ce80 <UART_SetConfig+0x1130>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d053      	beq.n	800ce78 <UART_SetConfig+0x1128>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d04b      	beq.n	800ce70 <UART_SetConfig+0x1120>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	2b03      	cmp	r3, #3
 800cdde:	d043      	beq.n	800ce68 <UART_SetConfig+0x1118>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	d03b      	beq.n	800ce60 <UART_SetConfig+0x1110>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	2b05      	cmp	r3, #5
 800cdee:	d033      	beq.n	800ce58 <UART_SetConfig+0x1108>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf4:	2b06      	cmp	r3, #6
 800cdf6:	d02b      	beq.n	800ce50 <UART_SetConfig+0x1100>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfc:	2b07      	cmp	r3, #7
 800cdfe:	d023      	beq.n	800ce48 <UART_SetConfig+0x10f8>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	2b08      	cmp	r3, #8
 800ce06:	d01b      	beq.n	800ce40 <UART_SetConfig+0x10f0>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0c:	2b09      	cmp	r3, #9
 800ce0e:	d013      	beq.n	800ce38 <UART_SetConfig+0x10e8>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce14:	2b0a      	cmp	r3, #10
 800ce16:	d00b      	beq.n	800ce30 <UART_SetConfig+0x10e0>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	2b0b      	cmp	r3, #11
 800ce1e:	d103      	bne.n	800ce28 <UART_SetConfig+0x10d8>
 800ce20:	4b2a      	ldr	r3, [pc, #168]	; (800cecc <UART_SetConfig+0x117c>)
 800ce22:	f04f 0400 	mov.w	r4, #0
 800ce26:	e02e      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce28:	4b29      	ldr	r3, [pc, #164]	; (800ced0 <UART_SetConfig+0x1180>)
 800ce2a:	f04f 0403 	mov.w	r4, #3
 800ce2e:	e02a      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce30:	4b28      	ldr	r3, [pc, #160]	; (800ced4 <UART_SetConfig+0x1184>)
 800ce32:	f04f 0400 	mov.w	r4, #0
 800ce36:	e026      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce38:	4b27      	ldr	r3, [pc, #156]	; (800ced8 <UART_SetConfig+0x1188>)
 800ce3a:	f04f 0400 	mov.w	r4, #0
 800ce3e:	e022      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce40:	4b26      	ldr	r3, [pc, #152]	; (800cedc <UART_SetConfig+0x118c>)
 800ce42:	f04f 0400 	mov.w	r4, #0
 800ce46:	e01e      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce48:	4b25      	ldr	r3, [pc, #148]	; (800cee0 <UART_SetConfig+0x1190>)
 800ce4a:	f04f 0400 	mov.w	r4, #0
 800ce4e:	e01a      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce50:	a419      	add	r4, pc, #100	; (adr r4, 800ceb8 <UART_SetConfig+0x1168>)
 800ce52:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ce56:	e016      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce58:	4b22      	ldr	r3, [pc, #136]	; (800cee4 <UART_SetConfig+0x1194>)
 800ce5a:	f04f 0400 	mov.w	r4, #0
 800ce5e:	e012      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce60:	4b21      	ldr	r3, [pc, #132]	; (800cee8 <UART_SetConfig+0x1198>)
 800ce62:	f04f 0400 	mov.w	r4, #0
 800ce66:	e00e      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce68:	a415      	add	r4, pc, #84	; (adr r4, 800cec0 <UART_SetConfig+0x1170>)
 800ce6a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ce6e:	e00a      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce70:	4b1e      	ldr	r3, [pc, #120]	; (800ceec <UART_SetConfig+0x119c>)
 800ce72:	f04f 0400 	mov.w	r4, #0
 800ce76:	e006      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce78:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <UART_SetConfig+0x11a0>)
 800ce7a:	f04f 0401 	mov.w	r4, #1
 800ce7e:	e002      	b.n	800ce86 <UART_SetConfig+0x1136>
 800ce80:	4b13      	ldr	r3, [pc, #76]	; (800ced0 <UART_SetConfig+0x1180>)
 800ce82:	f04f 0403 	mov.w	r4, #3
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	6852      	ldr	r2, [r2, #4]
 800ce8a:	0852      	lsrs	r2, r2, #1
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	f04f 0200 	mov.w	r2, #0
 800ce92:	eb13 0b01 	adds.w	fp, r3, r1
 800ce96:	eb44 0c02 	adc.w	ip, r4, r2
 800ce9a:	4658      	mov	r0, fp
 800ce9c:	4661      	mov	r1, ip
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	f04f 0400 	mov.w	r4, #0
 800cea6:	461a      	mov	r2, r3
 800cea8:	4623      	mov	r3, r4
 800ceaa:	f7f3 fa1d 	bl	80002e8 <__aeabi_uldivmod>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ceb4:	e122      	b.n	800d0fc <UART_SetConfig+0x13ac>
 800ceb6:	bf00      	nop
 800ceb8:	51615500 	.word	0x51615500
 800cebc:	00000000 	.word	0x00000000
 800cec0:	a2c2aa00 	.word	0xa2c2aa00
 800cec4:	00000000 	.word	0x00000000
 800cec8:	58024400 	.word	0x58024400
 800cecc:	03d09000 	.word	0x03d09000
 800ced0:	d0900000 	.word	0xd0900000
 800ced4:	07a12000 	.word	0x07a12000
 800ced8:	0f424000 	.word	0x0f424000
 800cedc:	1e848000 	.word	0x1e848000
 800cee0:	3d090000 	.word	0x3d090000
 800cee4:	61a80000 	.word	0x61a80000
 800cee8:	7a120000 	.word	0x7a120000
 800ceec:	f4240000 	.word	0xf4240000
 800cef0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d05b      	beq.n	800cfb4 <UART_SetConfig+0x1264>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d053      	beq.n	800cfac <UART_SetConfig+0x125c>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d04b      	beq.n	800cfa4 <UART_SetConfig+0x1254>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	2b03      	cmp	r3, #3
 800cf12:	d043      	beq.n	800cf9c <UART_SetConfig+0x124c>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d03b      	beq.n	800cf94 <UART_SetConfig+0x1244>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf20:	2b05      	cmp	r3, #5
 800cf22:	d033      	beq.n	800cf8c <UART_SetConfig+0x123c>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	2b06      	cmp	r3, #6
 800cf2a:	d02b      	beq.n	800cf84 <UART_SetConfig+0x1234>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	2b07      	cmp	r3, #7
 800cf32:	d023      	beq.n	800cf7c <UART_SetConfig+0x122c>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf38:	2b08      	cmp	r3, #8
 800cf3a:	d01b      	beq.n	800cf74 <UART_SetConfig+0x1224>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	2b09      	cmp	r3, #9
 800cf42:	d013      	beq.n	800cf6c <UART_SetConfig+0x121c>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	2b0a      	cmp	r3, #10
 800cf4a:	d00b      	beq.n	800cf64 <UART_SetConfig+0x1214>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf50:	2b0b      	cmp	r3, #11
 800cf52:	d103      	bne.n	800cf5c <UART_SetConfig+0x120c>
 800cf54:	4bc0      	ldr	r3, [pc, #768]	; (800d258 <UART_SetConfig+0x1508>)
 800cf56:	f04f 0400 	mov.w	r4, #0
 800cf5a:	e02e      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf5c:	4bbf      	ldr	r3, [pc, #764]	; (800d25c <UART_SetConfig+0x150c>)
 800cf5e:	f04f 0400 	mov.w	r4, #0
 800cf62:	e02a      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf64:	4bbe      	ldr	r3, [pc, #760]	; (800d260 <UART_SetConfig+0x1510>)
 800cf66:	f04f 0400 	mov.w	r4, #0
 800cf6a:	e026      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf6c:	4bbd      	ldr	r3, [pc, #756]	; (800d264 <UART_SetConfig+0x1514>)
 800cf6e:	f04f 0400 	mov.w	r4, #0
 800cf72:	e022      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf74:	4bbc      	ldr	r3, [pc, #752]	; (800d268 <UART_SetConfig+0x1518>)
 800cf76:	f04f 0400 	mov.w	r4, #0
 800cf7a:	e01e      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf7c:	4bbb      	ldr	r3, [pc, #748]	; (800d26c <UART_SetConfig+0x151c>)
 800cf7e:	f04f 0400 	mov.w	r4, #0
 800cf82:	e01a      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf84:	a4b0      	add	r4, pc, #704	; (adr r4, 800d248 <UART_SetConfig+0x14f8>)
 800cf86:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cf8a:	e016      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf8c:	4bb8      	ldr	r3, [pc, #736]	; (800d270 <UART_SetConfig+0x1520>)
 800cf8e:	f04f 0400 	mov.w	r4, #0
 800cf92:	e012      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf94:	4bb7      	ldr	r3, [pc, #732]	; (800d274 <UART_SetConfig+0x1524>)
 800cf96:	f04f 0400 	mov.w	r4, #0
 800cf9a:	e00e      	b.n	800cfba <UART_SetConfig+0x126a>
 800cf9c:	a4ac      	add	r4, pc, #688	; (adr r4, 800d250 <UART_SetConfig+0x1500>)
 800cf9e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cfa2:	e00a      	b.n	800cfba <UART_SetConfig+0x126a>
 800cfa4:	4bb4      	ldr	r3, [pc, #720]	; (800d278 <UART_SetConfig+0x1528>)
 800cfa6:	f04f 0400 	mov.w	r4, #0
 800cfaa:	e006      	b.n	800cfba <UART_SetConfig+0x126a>
 800cfac:	4bb3      	ldr	r3, [pc, #716]	; (800d27c <UART_SetConfig+0x152c>)
 800cfae:	f04f 0400 	mov.w	r4, #0
 800cfb2:	e002      	b.n	800cfba <UART_SetConfig+0x126a>
 800cfb4:	4ba9      	ldr	r3, [pc, #676]	; (800d25c <UART_SetConfig+0x150c>)
 800cfb6:	f04f 0400 	mov.w	r4, #0
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	6852      	ldr	r2, [r2, #4]
 800cfbe:	0852      	lsrs	r2, r2, #1
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	f04f 0200 	mov.w	r2, #0
 800cfc6:	eb13 0b01 	adds.w	fp, r3, r1
 800cfca:	eb44 0c02 	adc.w	ip, r4, r2
 800cfce:	4658      	mov	r0, fp
 800cfd0:	4661      	mov	r1, ip
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	f04f 0400 	mov.w	r4, #0
 800cfda:	461a      	mov	r2, r3
 800cfdc:	4623      	mov	r3, r4
 800cfde:	f7f3 f983 	bl	80002e8 <__aeabi_uldivmod>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cfe8:	e088      	b.n	800d0fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d064      	beq.n	800d0bc <UART_SetConfig+0x136c>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d05b      	beq.n	800d0b2 <UART_SetConfig+0x1362>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d052      	beq.n	800d0a8 <UART_SetConfig+0x1358>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	2b03      	cmp	r3, #3
 800d008:	d04a      	beq.n	800d0a0 <UART_SetConfig+0x1350>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00e:	2b04      	cmp	r3, #4
 800d010:	d041      	beq.n	800d096 <UART_SetConfig+0x1346>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	2b05      	cmp	r3, #5
 800d018:	d039      	beq.n	800d08e <UART_SetConfig+0x133e>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	2b06      	cmp	r3, #6
 800d020:	d031      	beq.n	800d086 <UART_SetConfig+0x1336>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d026:	2b07      	cmp	r3, #7
 800d028:	d028      	beq.n	800d07c <UART_SetConfig+0x132c>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02e:	2b08      	cmp	r3, #8
 800d030:	d01f      	beq.n	800d072 <UART_SetConfig+0x1322>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d036:	2b09      	cmp	r3, #9
 800d038:	d016      	beq.n	800d068 <UART_SetConfig+0x1318>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	2b0a      	cmp	r3, #10
 800d040:	d00d      	beq.n	800d05e <UART_SetConfig+0x130e>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	2b0b      	cmp	r3, #11
 800d048:	d104      	bne.n	800d054 <UART_SetConfig+0x1304>
 800d04a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d04e:	f04f 0400 	mov.w	r4, #0
 800d052:	e037      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d054:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d058:	f04f 0400 	mov.w	r4, #0
 800d05c:	e032      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d05e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d062:	f04f 0400 	mov.w	r4, #0
 800d066:	e02d      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d06c:	f04f 0400 	mov.w	r4, #0
 800d070:	e028      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d072:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d076:	f04f 0400 	mov.w	r4, #0
 800d07a:	e023      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d07c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d080:	f04f 0400 	mov.w	r4, #0
 800d084:	e01e      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d086:	4b7e      	ldr	r3, [pc, #504]	; (800d280 <UART_SetConfig+0x1530>)
 800d088:	f04f 0400 	mov.w	r4, #0
 800d08c:	e01a      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d08e:	4b7d      	ldr	r3, [pc, #500]	; (800d284 <UART_SetConfig+0x1534>)
 800d090:	f04f 0400 	mov.w	r4, #0
 800d094:	e016      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d096:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d09a:	f04f 0400 	mov.w	r4, #0
 800d09e:	e011      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d0a0:	4b79      	ldr	r3, [pc, #484]	; (800d288 <UART_SetConfig+0x1538>)
 800d0a2:	f04f 0400 	mov.w	r4, #0
 800d0a6:	e00d      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d0a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d0ac:	f04f 0400 	mov.w	r4, #0
 800d0b0:	e008      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d0b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0b6:	f04f 0400 	mov.w	r4, #0
 800d0ba:	e003      	b.n	800d0c4 <UART_SetConfig+0x1374>
 800d0bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d0c0:	f04f 0400 	mov.w	r4, #0
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	6852      	ldr	r2, [r2, #4]
 800d0c8:	0852      	lsrs	r2, r2, #1
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	eb13 0b01 	adds.w	fp, r3, r1
 800d0d4:	eb44 0c02 	adc.w	ip, r4, r2
 800d0d8:	4658      	mov	r0, fp
 800d0da:	4661      	mov	r1, ip
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	f04f 0400 	mov.w	r4, #0
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4623      	mov	r3, r4
 800d0e8:	f7f3 f8fe 	bl	80002e8 <__aeabi_uldivmod>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d0f2:	e003      	b.n	800d0fc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800d0fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d102:	d309      	bcc.n	800d118 <UART_SetConfig+0x13c8>
 800d104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d10a:	d205      	bcs.n	800d118 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d112:	60da      	str	r2, [r3, #12]
 800d114:	f000 bf85 	b.w	800e022 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d11e:	f000 bf80 	b.w	800e022 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d12a:	f040 83da 	bne.w	800d8e2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800d12e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d132:	2b40      	cmp	r3, #64	; 0x40
 800d134:	f200 83b3 	bhi.w	800d89e <UART_SetConfig+0x1b4e>
 800d138:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <UART_SetConfig+0x13f0>)
 800d13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13e:	bf00      	nop
 800d140:	0800d28d 	.word	0x0800d28d
 800d144:	0800d345 	.word	0x0800d345
 800d148:	0800d89f 	.word	0x0800d89f
 800d14c:	0800d89f 	.word	0x0800d89f
 800d150:	0800d3fd 	.word	0x0800d3fd
 800d154:	0800d89f 	.word	0x0800d89f
 800d158:	0800d89f 	.word	0x0800d89f
 800d15c:	0800d89f 	.word	0x0800d89f
 800d160:	0800d4b9 	.word	0x0800d4b9
 800d164:	0800d89f 	.word	0x0800d89f
 800d168:	0800d89f 	.word	0x0800d89f
 800d16c:	0800d89f 	.word	0x0800d89f
 800d170:	0800d89f 	.word	0x0800d89f
 800d174:	0800d89f 	.word	0x0800d89f
 800d178:	0800d89f 	.word	0x0800d89f
 800d17c:	0800d89f 	.word	0x0800d89f
 800d180:	0800d575 	.word	0x0800d575
 800d184:	0800d89f 	.word	0x0800d89f
 800d188:	0800d89f 	.word	0x0800d89f
 800d18c:	0800d89f 	.word	0x0800d89f
 800d190:	0800d89f 	.word	0x0800d89f
 800d194:	0800d89f 	.word	0x0800d89f
 800d198:	0800d89f 	.word	0x0800d89f
 800d19c:	0800d89f 	.word	0x0800d89f
 800d1a0:	0800d89f 	.word	0x0800d89f
 800d1a4:	0800d89f 	.word	0x0800d89f
 800d1a8:	0800d89f 	.word	0x0800d89f
 800d1ac:	0800d89f 	.word	0x0800d89f
 800d1b0:	0800d89f 	.word	0x0800d89f
 800d1b4:	0800d89f 	.word	0x0800d89f
 800d1b8:	0800d89f 	.word	0x0800d89f
 800d1bc:	0800d89f 	.word	0x0800d89f
 800d1c0:	0800d6e7 	.word	0x0800d6e7
 800d1c4:	0800d89f 	.word	0x0800d89f
 800d1c8:	0800d89f 	.word	0x0800d89f
 800d1cc:	0800d89f 	.word	0x0800d89f
 800d1d0:	0800d89f 	.word	0x0800d89f
 800d1d4:	0800d89f 	.word	0x0800d89f
 800d1d8:	0800d89f 	.word	0x0800d89f
 800d1dc:	0800d89f 	.word	0x0800d89f
 800d1e0:	0800d89f 	.word	0x0800d89f
 800d1e4:	0800d89f 	.word	0x0800d89f
 800d1e8:	0800d89f 	.word	0x0800d89f
 800d1ec:	0800d89f 	.word	0x0800d89f
 800d1f0:	0800d89f 	.word	0x0800d89f
 800d1f4:	0800d89f 	.word	0x0800d89f
 800d1f8:	0800d89f 	.word	0x0800d89f
 800d1fc:	0800d89f 	.word	0x0800d89f
 800d200:	0800d89f 	.word	0x0800d89f
 800d204:	0800d89f 	.word	0x0800d89f
 800d208:	0800d89f 	.word	0x0800d89f
 800d20c:	0800d89f 	.word	0x0800d89f
 800d210:	0800d89f 	.word	0x0800d89f
 800d214:	0800d89f 	.word	0x0800d89f
 800d218:	0800d89f 	.word	0x0800d89f
 800d21c:	0800d89f 	.word	0x0800d89f
 800d220:	0800d89f 	.word	0x0800d89f
 800d224:	0800d89f 	.word	0x0800d89f
 800d228:	0800d89f 	.word	0x0800d89f
 800d22c:	0800d89f 	.word	0x0800d89f
 800d230:	0800d89f 	.word	0x0800d89f
 800d234:	0800d89f 	.word	0x0800d89f
 800d238:	0800d89f 	.word	0x0800d89f
 800d23c:	0800d89f 	.word	0x0800d89f
 800d240:	0800d7dd 	.word	0x0800d7dd
 800d244:	f3af 8000 	nop.w
 800d248:	05161500 	.word	0x05161500
 800d24c:	00000000 	.word	0x00000000
 800d250:	0a2c2a00 	.word	0x0a2c2a00
 800d254:	00000000 	.word	0x00000000
 800d258:	003d0900 	.word	0x003d0900
 800d25c:	3d090000 	.word	0x3d090000
 800d260:	007a1200 	.word	0x007a1200
 800d264:	00f42400 	.word	0x00f42400
 800d268:	01e84800 	.word	0x01e84800
 800d26c:	03d09000 	.word	0x03d09000
 800d270:	061a8000 	.word	0x061a8000
 800d274:	07a12000 	.word	0x07a12000
 800d278:	0f424000 	.word	0x0f424000
 800d27c:	1e848000 	.word	0x1e848000
 800d280:	000aaa00 	.word	0x000aaa00
 800d284:	000ccc00 	.word	0x000ccc00
 800d288:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d28c:	f7fb fa3c 	bl	8008708 <HAL_RCC_GetPCLK1Freq>
 800d290:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d296:	2b00      	cmp	r3, #0
 800d298:	d044      	beq.n	800d324 <UART_SetConfig+0x15d4>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d03e      	beq.n	800d320 <UART_SetConfig+0x15d0>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d038      	beq.n	800d31c <UART_SetConfig+0x15cc>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	d032      	beq.n	800d318 <UART_SetConfig+0x15c8>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b6:	2b04      	cmp	r3, #4
 800d2b8:	d02c      	beq.n	800d314 <UART_SetConfig+0x15c4>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2be:	2b05      	cmp	r3, #5
 800d2c0:	d026      	beq.n	800d310 <UART_SetConfig+0x15c0>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c6:	2b06      	cmp	r3, #6
 800d2c8:	d020      	beq.n	800d30c <UART_SetConfig+0x15bc>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ce:	2b07      	cmp	r3, #7
 800d2d0:	d01a      	beq.n	800d308 <UART_SetConfig+0x15b8>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d6:	2b08      	cmp	r3, #8
 800d2d8:	d014      	beq.n	800d304 <UART_SetConfig+0x15b4>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2de:	2b09      	cmp	r3, #9
 800d2e0:	d00e      	beq.n	800d300 <UART_SetConfig+0x15b0>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e6:	2b0a      	cmp	r3, #10
 800d2e8:	d008      	beq.n	800d2fc <UART_SetConfig+0x15ac>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ee:	2b0b      	cmp	r3, #11
 800d2f0:	d102      	bne.n	800d2f8 <UART_SetConfig+0x15a8>
 800d2f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2f6:	e016      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e014      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d2fc:	2380      	movs	r3, #128	; 0x80
 800d2fe:	e012      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d300:	2340      	movs	r3, #64	; 0x40
 800d302:	e010      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d304:	2320      	movs	r3, #32
 800d306:	e00e      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d308:	2310      	movs	r3, #16
 800d30a:	e00c      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d30c:	230c      	movs	r3, #12
 800d30e:	e00a      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d310:	230a      	movs	r3, #10
 800d312:	e008      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d314:	2308      	movs	r3, #8
 800d316:	e006      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d318:	2306      	movs	r3, #6
 800d31a:	e004      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d31c:	2304      	movs	r3, #4
 800d31e:	e002      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d320:	2302      	movs	r3, #2
 800d322:	e000      	b.n	800d326 <UART_SetConfig+0x15d6>
 800d324:	2301      	movs	r3, #1
 800d326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d328:	fbb2 f3f3 	udiv	r3, r2, r3
 800d32c:	005a      	lsls	r2, r3, #1
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	085b      	lsrs	r3, r3, #1
 800d334:	441a      	add	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d33e:	b29b      	uxth	r3, r3
 800d340:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d342:	e2b0      	b.n	800d8a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d344:	f7fb f9f6 	bl	8008734 <HAL_RCC_GetPCLK2Freq>
 800d348:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d044      	beq.n	800d3dc <UART_SetConfig+0x168c>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d356:	2b01      	cmp	r3, #1
 800d358:	d03e      	beq.n	800d3d8 <UART_SetConfig+0x1688>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d038      	beq.n	800d3d4 <UART_SetConfig+0x1684>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d366:	2b03      	cmp	r3, #3
 800d368:	d032      	beq.n	800d3d0 <UART_SetConfig+0x1680>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	2b04      	cmp	r3, #4
 800d370:	d02c      	beq.n	800d3cc <UART_SetConfig+0x167c>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	2b05      	cmp	r3, #5
 800d378:	d026      	beq.n	800d3c8 <UART_SetConfig+0x1678>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37e:	2b06      	cmp	r3, #6
 800d380:	d020      	beq.n	800d3c4 <UART_SetConfig+0x1674>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d386:	2b07      	cmp	r3, #7
 800d388:	d01a      	beq.n	800d3c0 <UART_SetConfig+0x1670>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38e:	2b08      	cmp	r3, #8
 800d390:	d014      	beq.n	800d3bc <UART_SetConfig+0x166c>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d396:	2b09      	cmp	r3, #9
 800d398:	d00e      	beq.n	800d3b8 <UART_SetConfig+0x1668>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	2b0a      	cmp	r3, #10
 800d3a0:	d008      	beq.n	800d3b4 <UART_SetConfig+0x1664>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a6:	2b0b      	cmp	r3, #11
 800d3a8:	d102      	bne.n	800d3b0 <UART_SetConfig+0x1660>
 800d3aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3ae:	e016      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e014      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3b4:	2380      	movs	r3, #128	; 0x80
 800d3b6:	e012      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3b8:	2340      	movs	r3, #64	; 0x40
 800d3ba:	e010      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3bc:	2320      	movs	r3, #32
 800d3be:	e00e      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3c0:	2310      	movs	r3, #16
 800d3c2:	e00c      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3c4:	230c      	movs	r3, #12
 800d3c6:	e00a      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3c8:	230a      	movs	r3, #10
 800d3ca:	e008      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3cc:	2308      	movs	r3, #8
 800d3ce:	e006      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3d0:	2306      	movs	r3, #6
 800d3d2:	e004      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3d4:	2304      	movs	r3, #4
 800d3d6:	e002      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3d8:	2302      	movs	r3, #2
 800d3da:	e000      	b.n	800d3de <UART_SetConfig+0x168e>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e4:	005a      	lsls	r2, r3, #1
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	085b      	lsrs	r3, r3, #1
 800d3ec:	441a      	add	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d3fa:	e254      	b.n	800d8a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3fc:	f107 0318 	add.w	r3, r7, #24
 800d400:	4618      	mov	r0, r3
 800d402:	f7fc f8a1 	bl	8009548 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d406:	69fa      	ldr	r2, [r7, #28]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d044      	beq.n	800d49a <UART_SetConfig+0x174a>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d414:	2b01      	cmp	r3, #1
 800d416:	d03e      	beq.n	800d496 <UART_SetConfig+0x1746>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d038      	beq.n	800d492 <UART_SetConfig+0x1742>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d424:	2b03      	cmp	r3, #3
 800d426:	d032      	beq.n	800d48e <UART_SetConfig+0x173e>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42c:	2b04      	cmp	r3, #4
 800d42e:	d02c      	beq.n	800d48a <UART_SetConfig+0x173a>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d434:	2b05      	cmp	r3, #5
 800d436:	d026      	beq.n	800d486 <UART_SetConfig+0x1736>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43c:	2b06      	cmp	r3, #6
 800d43e:	d020      	beq.n	800d482 <UART_SetConfig+0x1732>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d444:	2b07      	cmp	r3, #7
 800d446:	d01a      	beq.n	800d47e <UART_SetConfig+0x172e>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44c:	2b08      	cmp	r3, #8
 800d44e:	d014      	beq.n	800d47a <UART_SetConfig+0x172a>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d454:	2b09      	cmp	r3, #9
 800d456:	d00e      	beq.n	800d476 <UART_SetConfig+0x1726>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45c:	2b0a      	cmp	r3, #10
 800d45e:	d008      	beq.n	800d472 <UART_SetConfig+0x1722>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d464:	2b0b      	cmp	r3, #11
 800d466:	d102      	bne.n	800d46e <UART_SetConfig+0x171e>
 800d468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d46c:	e016      	b.n	800d49c <UART_SetConfig+0x174c>
 800d46e:	2301      	movs	r3, #1
 800d470:	e014      	b.n	800d49c <UART_SetConfig+0x174c>
 800d472:	2380      	movs	r3, #128	; 0x80
 800d474:	e012      	b.n	800d49c <UART_SetConfig+0x174c>
 800d476:	2340      	movs	r3, #64	; 0x40
 800d478:	e010      	b.n	800d49c <UART_SetConfig+0x174c>
 800d47a:	2320      	movs	r3, #32
 800d47c:	e00e      	b.n	800d49c <UART_SetConfig+0x174c>
 800d47e:	2310      	movs	r3, #16
 800d480:	e00c      	b.n	800d49c <UART_SetConfig+0x174c>
 800d482:	230c      	movs	r3, #12
 800d484:	e00a      	b.n	800d49c <UART_SetConfig+0x174c>
 800d486:	230a      	movs	r3, #10
 800d488:	e008      	b.n	800d49c <UART_SetConfig+0x174c>
 800d48a:	2308      	movs	r3, #8
 800d48c:	e006      	b.n	800d49c <UART_SetConfig+0x174c>
 800d48e:	2306      	movs	r3, #6
 800d490:	e004      	b.n	800d49c <UART_SetConfig+0x174c>
 800d492:	2304      	movs	r3, #4
 800d494:	e002      	b.n	800d49c <UART_SetConfig+0x174c>
 800d496:	2302      	movs	r3, #2
 800d498:	e000      	b.n	800d49c <UART_SetConfig+0x174c>
 800d49a:	2301      	movs	r3, #1
 800d49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a0:	005a      	lsls	r2, r3, #1
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	085b      	lsrs	r3, r3, #1
 800d4a8:	441a      	add	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d4b6:	e1f6      	b.n	800d8a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4b8:	f107 030c 	add.w	r3, r7, #12
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fc f98f 	bl	80097e0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d044      	beq.n	800d556 <UART_SetConfig+0x1806>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d03e      	beq.n	800d552 <UART_SetConfig+0x1802>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d038      	beq.n	800d54e <UART_SetConfig+0x17fe>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d032      	beq.n	800d54a <UART_SetConfig+0x17fa>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	d02c      	beq.n	800d546 <UART_SetConfig+0x17f6>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f0:	2b05      	cmp	r3, #5
 800d4f2:	d026      	beq.n	800d542 <UART_SetConfig+0x17f2>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f8:	2b06      	cmp	r3, #6
 800d4fa:	d020      	beq.n	800d53e <UART_SetConfig+0x17ee>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	2b07      	cmp	r3, #7
 800d502:	d01a      	beq.n	800d53a <UART_SetConfig+0x17ea>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d508:	2b08      	cmp	r3, #8
 800d50a:	d014      	beq.n	800d536 <UART_SetConfig+0x17e6>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	2b09      	cmp	r3, #9
 800d512:	d00e      	beq.n	800d532 <UART_SetConfig+0x17e2>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d518:	2b0a      	cmp	r3, #10
 800d51a:	d008      	beq.n	800d52e <UART_SetConfig+0x17de>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d520:	2b0b      	cmp	r3, #11
 800d522:	d102      	bne.n	800d52a <UART_SetConfig+0x17da>
 800d524:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d528:	e016      	b.n	800d558 <UART_SetConfig+0x1808>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e014      	b.n	800d558 <UART_SetConfig+0x1808>
 800d52e:	2380      	movs	r3, #128	; 0x80
 800d530:	e012      	b.n	800d558 <UART_SetConfig+0x1808>
 800d532:	2340      	movs	r3, #64	; 0x40
 800d534:	e010      	b.n	800d558 <UART_SetConfig+0x1808>
 800d536:	2320      	movs	r3, #32
 800d538:	e00e      	b.n	800d558 <UART_SetConfig+0x1808>
 800d53a:	2310      	movs	r3, #16
 800d53c:	e00c      	b.n	800d558 <UART_SetConfig+0x1808>
 800d53e:	230c      	movs	r3, #12
 800d540:	e00a      	b.n	800d558 <UART_SetConfig+0x1808>
 800d542:	230a      	movs	r3, #10
 800d544:	e008      	b.n	800d558 <UART_SetConfig+0x1808>
 800d546:	2308      	movs	r3, #8
 800d548:	e006      	b.n	800d558 <UART_SetConfig+0x1808>
 800d54a:	2306      	movs	r3, #6
 800d54c:	e004      	b.n	800d558 <UART_SetConfig+0x1808>
 800d54e:	2304      	movs	r3, #4
 800d550:	e002      	b.n	800d558 <UART_SetConfig+0x1808>
 800d552:	2302      	movs	r3, #2
 800d554:	e000      	b.n	800d558 <UART_SetConfig+0x1808>
 800d556:	2301      	movs	r3, #1
 800d558:	fbb2 f3f3 	udiv	r3, r2, r3
 800d55c:	005a      	lsls	r2, r3, #1
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	441a      	add	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d56e:	b29b      	uxth	r3, r3
 800d570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d572:	e198      	b.n	800d8a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d574:	4b87      	ldr	r3, [pc, #540]	; (800d794 <UART_SetConfig+0x1a44>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f003 0320 	and.w	r3, r3, #32
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d05e      	beq.n	800d63e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d580:	4b84      	ldr	r3, [pc, #528]	; (800d794 <UART_SetConfig+0x1a44>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	08db      	lsrs	r3, r3, #3
 800d586:	f003 0303 	and.w	r3, r3, #3
 800d58a:	4a83      	ldr	r2, [pc, #524]	; (800d798 <UART_SetConfig+0x1a48>)
 800d58c:	40da      	lsrs	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d592:	2b00      	cmp	r3, #0
 800d594:	d044      	beq.n	800d620 <UART_SetConfig+0x18d0>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d03e      	beq.n	800d61c <UART_SetConfig+0x18cc>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d038      	beq.n	800d618 <UART_SetConfig+0x18c8>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d032      	beq.n	800d614 <UART_SetConfig+0x18c4>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	2b04      	cmp	r3, #4
 800d5b4:	d02c      	beq.n	800d610 <UART_SetConfig+0x18c0>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ba:	2b05      	cmp	r3, #5
 800d5bc:	d026      	beq.n	800d60c <UART_SetConfig+0x18bc>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c2:	2b06      	cmp	r3, #6
 800d5c4:	d020      	beq.n	800d608 <UART_SetConfig+0x18b8>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ca:	2b07      	cmp	r3, #7
 800d5cc:	d01a      	beq.n	800d604 <UART_SetConfig+0x18b4>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d2:	2b08      	cmp	r3, #8
 800d5d4:	d014      	beq.n	800d600 <UART_SetConfig+0x18b0>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5da:	2b09      	cmp	r3, #9
 800d5dc:	d00e      	beq.n	800d5fc <UART_SetConfig+0x18ac>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e2:	2b0a      	cmp	r3, #10
 800d5e4:	d008      	beq.n	800d5f8 <UART_SetConfig+0x18a8>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ea:	2b0b      	cmp	r3, #11
 800d5ec:	d102      	bne.n	800d5f4 <UART_SetConfig+0x18a4>
 800d5ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5f2:	e016      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e014      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d5f8:	2380      	movs	r3, #128	; 0x80
 800d5fa:	e012      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d5fc:	2340      	movs	r3, #64	; 0x40
 800d5fe:	e010      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d600:	2320      	movs	r3, #32
 800d602:	e00e      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d604:	2310      	movs	r3, #16
 800d606:	e00c      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d608:	230c      	movs	r3, #12
 800d60a:	e00a      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d60c:	230a      	movs	r3, #10
 800d60e:	e008      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d610:	2308      	movs	r3, #8
 800d612:	e006      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d614:	2306      	movs	r3, #6
 800d616:	e004      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d618:	2304      	movs	r3, #4
 800d61a:	e002      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d61c:	2302      	movs	r3, #2
 800d61e:	e000      	b.n	800d622 <UART_SetConfig+0x18d2>
 800d620:	2301      	movs	r3, #1
 800d622:	fbb2 f3f3 	udiv	r3, r2, r3
 800d626:	005a      	lsls	r2, r3, #1
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	085b      	lsrs	r3, r3, #1
 800d62e:	441a      	add	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	fbb2 f3f3 	udiv	r3, r2, r3
 800d638:	b29b      	uxth	r3, r3
 800d63a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800d63c:	e133      	b.n	800d8a6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d642:	2b00      	cmp	r3, #0
 800d644:	d043      	beq.n	800d6ce <UART_SetConfig+0x197e>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d03d      	beq.n	800d6ca <UART_SetConfig+0x197a>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d652:	2b02      	cmp	r3, #2
 800d654:	d037      	beq.n	800d6c6 <UART_SetConfig+0x1976>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d031      	beq.n	800d6c2 <UART_SetConfig+0x1972>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d662:	2b04      	cmp	r3, #4
 800d664:	d02b      	beq.n	800d6be <UART_SetConfig+0x196e>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66a:	2b05      	cmp	r3, #5
 800d66c:	d025      	beq.n	800d6ba <UART_SetConfig+0x196a>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d672:	2b06      	cmp	r3, #6
 800d674:	d01f      	beq.n	800d6b6 <UART_SetConfig+0x1966>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67a:	2b07      	cmp	r3, #7
 800d67c:	d019      	beq.n	800d6b2 <UART_SetConfig+0x1962>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d682:	2b08      	cmp	r3, #8
 800d684:	d013      	beq.n	800d6ae <UART_SetConfig+0x195e>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68a:	2b09      	cmp	r3, #9
 800d68c:	d00d      	beq.n	800d6aa <UART_SetConfig+0x195a>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d692:	2b0a      	cmp	r3, #10
 800d694:	d007      	beq.n	800d6a6 <UART_SetConfig+0x1956>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69a:	2b0b      	cmp	r3, #11
 800d69c:	d101      	bne.n	800d6a2 <UART_SetConfig+0x1952>
 800d69e:	4b3f      	ldr	r3, [pc, #252]	; (800d79c <UART_SetConfig+0x1a4c>)
 800d6a0:	e016      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6a2:	4b3f      	ldr	r3, [pc, #252]	; (800d7a0 <UART_SetConfig+0x1a50>)
 800d6a4:	e014      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6a6:	4b3f      	ldr	r3, [pc, #252]	; (800d7a4 <UART_SetConfig+0x1a54>)
 800d6a8:	e012      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6aa:	4b3f      	ldr	r3, [pc, #252]	; (800d7a8 <UART_SetConfig+0x1a58>)
 800d6ac:	e010      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6ae:	4b3f      	ldr	r3, [pc, #252]	; (800d7ac <UART_SetConfig+0x1a5c>)
 800d6b0:	e00e      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6b2:	4b3f      	ldr	r3, [pc, #252]	; (800d7b0 <UART_SetConfig+0x1a60>)
 800d6b4:	e00c      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6b6:	4b3f      	ldr	r3, [pc, #252]	; (800d7b4 <UART_SetConfig+0x1a64>)
 800d6b8:	e00a      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6ba:	4b3f      	ldr	r3, [pc, #252]	; (800d7b8 <UART_SetConfig+0x1a68>)
 800d6bc:	e008      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6be:	4b3f      	ldr	r3, [pc, #252]	; (800d7bc <UART_SetConfig+0x1a6c>)
 800d6c0:	e006      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6c2:	4b3f      	ldr	r3, [pc, #252]	; (800d7c0 <UART_SetConfig+0x1a70>)
 800d6c4:	e004      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6c6:	4b3f      	ldr	r3, [pc, #252]	; (800d7c4 <UART_SetConfig+0x1a74>)
 800d6c8:	e002      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6ca:	4b33      	ldr	r3, [pc, #204]	; (800d798 <UART_SetConfig+0x1a48>)
 800d6cc:	e000      	b.n	800d6d0 <UART_SetConfig+0x1980>
 800d6ce:	4b34      	ldr	r3, [pc, #208]	; (800d7a0 <UART_SetConfig+0x1a50>)
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	6852      	ldr	r2, [r2, #4]
 800d6d4:	0852      	lsrs	r2, r2, #1
 800d6d6:	441a      	add	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d6e4:	e0df      	b.n	800d8a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d045      	beq.n	800d77a <UART_SetConfig+0x1a2a>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d03f      	beq.n	800d776 <UART_SetConfig+0x1a26>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d039      	beq.n	800d772 <UART_SetConfig+0x1a22>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d702:	2b03      	cmp	r3, #3
 800d704:	d033      	beq.n	800d76e <UART_SetConfig+0x1a1e>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d02d      	beq.n	800d76a <UART_SetConfig+0x1a1a>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	2b05      	cmp	r3, #5
 800d714:	d027      	beq.n	800d766 <UART_SetConfig+0x1a16>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71a:	2b06      	cmp	r3, #6
 800d71c:	d021      	beq.n	800d762 <UART_SetConfig+0x1a12>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d722:	2b07      	cmp	r3, #7
 800d724:	d01b      	beq.n	800d75e <UART_SetConfig+0x1a0e>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	2b08      	cmp	r3, #8
 800d72c:	d015      	beq.n	800d75a <UART_SetConfig+0x1a0a>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d732:	2b09      	cmp	r3, #9
 800d734:	d00f      	beq.n	800d756 <UART_SetConfig+0x1a06>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73a:	2b0a      	cmp	r3, #10
 800d73c:	d008      	beq.n	800d750 <UART_SetConfig+0x1a00>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d742:	2b0b      	cmp	r3, #11
 800d744:	d102      	bne.n	800d74c <UART_SetConfig+0x19fc>
 800d746:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d74a:	e017      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d74c:	4b18      	ldr	r3, [pc, #96]	; (800d7b0 <UART_SetConfig+0x1a60>)
 800d74e:	e015      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d750:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d754:	e012      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d756:	4b1c      	ldr	r3, [pc, #112]	; (800d7c8 <UART_SetConfig+0x1a78>)
 800d758:	e010      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d75a:	4b1c      	ldr	r3, [pc, #112]	; (800d7cc <UART_SetConfig+0x1a7c>)
 800d75c:	e00e      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d75e:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <UART_SetConfig+0x1a4c>)
 800d760:	e00c      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d762:	4b1b      	ldr	r3, [pc, #108]	; (800d7d0 <UART_SetConfig+0x1a80>)
 800d764:	e00a      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d766:	4b1b      	ldr	r3, [pc, #108]	; (800d7d4 <UART_SetConfig+0x1a84>)
 800d768:	e008      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d76a:	4b0e      	ldr	r3, [pc, #56]	; (800d7a4 <UART_SetConfig+0x1a54>)
 800d76c:	e006      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d76e:	4b1a      	ldr	r3, [pc, #104]	; (800d7d8 <UART_SetConfig+0x1a88>)
 800d770:	e004      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d772:	4b0d      	ldr	r3, [pc, #52]	; (800d7a8 <UART_SetConfig+0x1a58>)
 800d774:	e002      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d776:	4b0d      	ldr	r3, [pc, #52]	; (800d7ac <UART_SetConfig+0x1a5c>)
 800d778:	e000      	b.n	800d77c <UART_SetConfig+0x1a2c>
 800d77a:	4b0d      	ldr	r3, [pc, #52]	; (800d7b0 <UART_SetConfig+0x1a60>)
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6852      	ldr	r2, [r2, #4]
 800d780:	0852      	lsrs	r2, r2, #1
 800d782:	441a      	add	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	fbb2 f3f3 	udiv	r3, r2, r3
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d790:	e089      	b.n	800d8a6 <UART_SetConfig+0x1b56>
 800d792:	bf00      	nop
 800d794:	58024400 	.word	0x58024400
 800d798:	03d09000 	.word	0x03d09000
 800d79c:	0007a120 	.word	0x0007a120
 800d7a0:	07a12000 	.word	0x07a12000
 800d7a4:	000f4240 	.word	0x000f4240
 800d7a8:	001e8480 	.word	0x001e8480
 800d7ac:	003d0900 	.word	0x003d0900
 800d7b0:	007a1200 	.word	0x007a1200
 800d7b4:	00a2c2aa 	.word	0x00a2c2aa
 800d7b8:	00c35000 	.word	0x00c35000
 800d7bc:	00f42400 	.word	0x00f42400
 800d7c0:	01458554 	.word	0x01458554
 800d7c4:	01e84800 	.word	0x01e84800
 800d7c8:	0001e848 	.word	0x0001e848
 800d7cc:	0003d090 	.word	0x0003d090
 800d7d0:	000a2c2a 	.word	0x000a2c2a
 800d7d4:	000c3500 	.word	0x000c3500
 800d7d8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d04f      	beq.n	800d884 <UART_SetConfig+0x1b34>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d048      	beq.n	800d87e <UART_SetConfig+0x1b2e>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d041      	beq.n	800d878 <UART_SetConfig+0x1b28>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	d03a      	beq.n	800d872 <UART_SetConfig+0x1b22>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d800:	2b04      	cmp	r3, #4
 800d802:	d033      	beq.n	800d86c <UART_SetConfig+0x1b1c>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	2b05      	cmp	r3, #5
 800d80a:	d02c      	beq.n	800d866 <UART_SetConfig+0x1b16>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d810:	2b06      	cmp	r3, #6
 800d812:	d025      	beq.n	800d860 <UART_SetConfig+0x1b10>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d818:	2b07      	cmp	r3, #7
 800d81a:	d01e      	beq.n	800d85a <UART_SetConfig+0x1b0a>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d820:	2b08      	cmp	r3, #8
 800d822:	d017      	beq.n	800d854 <UART_SetConfig+0x1b04>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d828:	2b09      	cmp	r3, #9
 800d82a:	d010      	beq.n	800d84e <UART_SetConfig+0x1afe>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d830:	2b0a      	cmp	r3, #10
 800d832:	d009      	beq.n	800d848 <UART_SetConfig+0x1af8>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d838:	2b0b      	cmp	r3, #11
 800d83a:	d102      	bne.n	800d842 <UART_SetConfig+0x1af2>
 800d83c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d840:	e022      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d846:	e01f      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d84c:	e01c      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d852:	e019      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d858:	e016      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d85a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d85e:	e013      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d860:	f241 5354 	movw	r3, #5460	; 0x1554
 800d864:	e010      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d866:	f641 1398 	movw	r3, #6552	; 0x1998
 800d86a:	e00d      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d86c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d870:	e00a      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d872:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800d876:	e007      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d878:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d87c:	e004      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d87e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d882:	e001      	b.n	800d888 <UART_SetConfig+0x1b38>
 800d884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	6852      	ldr	r2, [r2, #4]
 800d88c:	0852      	lsrs	r2, r2, #1
 800d88e:	441a      	add	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	fbb2 f3f3 	udiv	r3, r2, r3
 800d898:	b29b      	uxth	r3, r3
 800d89a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d89c:	e003      	b.n	800d8a6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800d8a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a8:	2b0f      	cmp	r3, #15
 800d8aa:	d916      	bls.n	800d8da <UART_SetConfig+0x1b8a>
 800d8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8b2:	d212      	bcs.n	800d8da <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	f023 030f 	bic.w	r3, r3, #15
 800d8bc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c0:	085b      	lsrs	r3, r3, #1
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	f003 0307 	and.w	r3, r3, #7
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d8d6:	60da      	str	r2, [r3, #12]
 800d8d8:	e3a3      	b.n	800e022 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8e0:	e39f      	b.n	800e022 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800d8e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d8e6:	2b40      	cmp	r3, #64	; 0x40
 800d8e8:	f200 8388 	bhi.w	800dffc <UART_SetConfig+0x22ac>
 800d8ec:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <UART_SetConfig+0x1ba4>)
 800d8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f2:	bf00      	nop
 800d8f4:	0800d9f9 	.word	0x0800d9f9
 800d8f8:	0800daaf 	.word	0x0800daaf
 800d8fc:	0800dffd 	.word	0x0800dffd
 800d900:	0800dffd 	.word	0x0800dffd
 800d904:	0800db65 	.word	0x0800db65
 800d908:	0800dffd 	.word	0x0800dffd
 800d90c:	0800dffd 	.word	0x0800dffd
 800d910:	0800dffd 	.word	0x0800dffd
 800d914:	0800dc1f 	.word	0x0800dc1f
 800d918:	0800dffd 	.word	0x0800dffd
 800d91c:	0800dffd 	.word	0x0800dffd
 800d920:	0800dffd 	.word	0x0800dffd
 800d924:	0800dffd 	.word	0x0800dffd
 800d928:	0800dffd 	.word	0x0800dffd
 800d92c:	0800dffd 	.word	0x0800dffd
 800d930:	0800dffd 	.word	0x0800dffd
 800d934:	0800dcd9 	.word	0x0800dcd9
 800d938:	0800dffd 	.word	0x0800dffd
 800d93c:	0800dffd 	.word	0x0800dffd
 800d940:	0800dffd 	.word	0x0800dffd
 800d944:	0800dffd 	.word	0x0800dffd
 800d948:	0800dffd 	.word	0x0800dffd
 800d94c:	0800dffd 	.word	0x0800dffd
 800d950:	0800dffd 	.word	0x0800dffd
 800d954:	0800dffd 	.word	0x0800dffd
 800d958:	0800dffd 	.word	0x0800dffd
 800d95c:	0800dffd 	.word	0x0800dffd
 800d960:	0800dffd 	.word	0x0800dffd
 800d964:	0800dffd 	.word	0x0800dffd
 800d968:	0800dffd 	.word	0x0800dffd
 800d96c:	0800dffd 	.word	0x0800dffd
 800d970:	0800dffd 	.word	0x0800dffd
 800d974:	0800de49 	.word	0x0800de49
 800d978:	0800dffd 	.word	0x0800dffd
 800d97c:	0800dffd 	.word	0x0800dffd
 800d980:	0800dffd 	.word	0x0800dffd
 800d984:	0800dffd 	.word	0x0800dffd
 800d988:	0800dffd 	.word	0x0800dffd
 800d98c:	0800dffd 	.word	0x0800dffd
 800d990:	0800dffd 	.word	0x0800dffd
 800d994:	0800dffd 	.word	0x0800dffd
 800d998:	0800dffd 	.word	0x0800dffd
 800d99c:	0800dffd 	.word	0x0800dffd
 800d9a0:	0800dffd 	.word	0x0800dffd
 800d9a4:	0800dffd 	.word	0x0800dffd
 800d9a8:	0800dffd 	.word	0x0800dffd
 800d9ac:	0800dffd 	.word	0x0800dffd
 800d9b0:	0800dffd 	.word	0x0800dffd
 800d9b4:	0800dffd 	.word	0x0800dffd
 800d9b8:	0800dffd 	.word	0x0800dffd
 800d9bc:	0800dffd 	.word	0x0800dffd
 800d9c0:	0800dffd 	.word	0x0800dffd
 800d9c4:	0800dffd 	.word	0x0800dffd
 800d9c8:	0800dffd 	.word	0x0800dffd
 800d9cc:	0800dffd 	.word	0x0800dffd
 800d9d0:	0800dffd 	.word	0x0800dffd
 800d9d4:	0800dffd 	.word	0x0800dffd
 800d9d8:	0800dffd 	.word	0x0800dffd
 800d9dc:	0800dffd 	.word	0x0800dffd
 800d9e0:	0800dffd 	.word	0x0800dffd
 800d9e4:	0800dffd 	.word	0x0800dffd
 800d9e8:	0800dffd 	.word	0x0800dffd
 800d9ec:	0800dffd 	.word	0x0800dffd
 800d9f0:	0800dffd 	.word	0x0800dffd
 800d9f4:	0800df3d 	.word	0x0800df3d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9f8:	f7fa fe86 	bl	8008708 <HAL_RCC_GetPCLK1Freq>
 800d9fc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da02:	2b00      	cmp	r3, #0
 800da04:	d044      	beq.n	800da90 <UART_SetConfig+0x1d40>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d03e      	beq.n	800da8c <UART_SetConfig+0x1d3c>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da12:	2b02      	cmp	r3, #2
 800da14:	d038      	beq.n	800da88 <UART_SetConfig+0x1d38>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1a:	2b03      	cmp	r3, #3
 800da1c:	d032      	beq.n	800da84 <UART_SetConfig+0x1d34>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	2b04      	cmp	r3, #4
 800da24:	d02c      	beq.n	800da80 <UART_SetConfig+0x1d30>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2a:	2b05      	cmp	r3, #5
 800da2c:	d026      	beq.n	800da7c <UART_SetConfig+0x1d2c>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da32:	2b06      	cmp	r3, #6
 800da34:	d020      	beq.n	800da78 <UART_SetConfig+0x1d28>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3a:	2b07      	cmp	r3, #7
 800da3c:	d01a      	beq.n	800da74 <UART_SetConfig+0x1d24>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	2b08      	cmp	r3, #8
 800da44:	d014      	beq.n	800da70 <UART_SetConfig+0x1d20>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	2b09      	cmp	r3, #9
 800da4c:	d00e      	beq.n	800da6c <UART_SetConfig+0x1d1c>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	2b0a      	cmp	r3, #10
 800da54:	d008      	beq.n	800da68 <UART_SetConfig+0x1d18>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5a:	2b0b      	cmp	r3, #11
 800da5c:	d102      	bne.n	800da64 <UART_SetConfig+0x1d14>
 800da5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da62:	e016      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da64:	2301      	movs	r3, #1
 800da66:	e014      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da68:	2380      	movs	r3, #128	; 0x80
 800da6a:	e012      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da6c:	2340      	movs	r3, #64	; 0x40
 800da6e:	e010      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da70:	2320      	movs	r3, #32
 800da72:	e00e      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da74:	2310      	movs	r3, #16
 800da76:	e00c      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da78:	230c      	movs	r3, #12
 800da7a:	e00a      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da7c:	230a      	movs	r3, #10
 800da7e:	e008      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da80:	2308      	movs	r3, #8
 800da82:	e006      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da84:	2306      	movs	r3, #6
 800da86:	e004      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da88:	2304      	movs	r3, #4
 800da8a:	e002      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da8c:	2302      	movs	r3, #2
 800da8e:	e000      	b.n	800da92 <UART_SetConfig+0x1d42>
 800da90:	2301      	movs	r3, #1
 800da92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da94:	fbb2 f2f3 	udiv	r2, r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	085b      	lsrs	r3, r3, #1
 800da9e:	441a      	add	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800daac:	e2aa      	b.n	800e004 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800daae:	f7fa fe41 	bl	8008734 <HAL_RCC_GetPCLK2Freq>
 800dab2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d044      	beq.n	800db46 <UART_SetConfig+0x1df6>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d03e      	beq.n	800db42 <UART_SetConfig+0x1df2>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d038      	beq.n	800db3e <UART_SetConfig+0x1dee>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad0:	2b03      	cmp	r3, #3
 800dad2:	d032      	beq.n	800db3a <UART_SetConfig+0x1dea>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad8:	2b04      	cmp	r3, #4
 800dada:	d02c      	beq.n	800db36 <UART_SetConfig+0x1de6>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae0:	2b05      	cmp	r3, #5
 800dae2:	d026      	beq.n	800db32 <UART_SetConfig+0x1de2>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae8:	2b06      	cmp	r3, #6
 800daea:	d020      	beq.n	800db2e <UART_SetConfig+0x1dde>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf0:	2b07      	cmp	r3, #7
 800daf2:	d01a      	beq.n	800db2a <UART_SetConfig+0x1dda>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf8:	2b08      	cmp	r3, #8
 800dafa:	d014      	beq.n	800db26 <UART_SetConfig+0x1dd6>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db00:	2b09      	cmp	r3, #9
 800db02:	d00e      	beq.n	800db22 <UART_SetConfig+0x1dd2>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db08:	2b0a      	cmp	r3, #10
 800db0a:	d008      	beq.n	800db1e <UART_SetConfig+0x1dce>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db10:	2b0b      	cmp	r3, #11
 800db12:	d102      	bne.n	800db1a <UART_SetConfig+0x1dca>
 800db14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db18:	e016      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db1a:	2301      	movs	r3, #1
 800db1c:	e014      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db1e:	2380      	movs	r3, #128	; 0x80
 800db20:	e012      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db22:	2340      	movs	r3, #64	; 0x40
 800db24:	e010      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db26:	2320      	movs	r3, #32
 800db28:	e00e      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db2a:	2310      	movs	r3, #16
 800db2c:	e00c      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db2e:	230c      	movs	r3, #12
 800db30:	e00a      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db32:	230a      	movs	r3, #10
 800db34:	e008      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db36:	2308      	movs	r3, #8
 800db38:	e006      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db3a:	2306      	movs	r3, #6
 800db3c:	e004      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db3e:	2304      	movs	r3, #4
 800db40:	e002      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db42:	2302      	movs	r3, #2
 800db44:	e000      	b.n	800db48 <UART_SetConfig+0x1df8>
 800db46:	2301      	movs	r3, #1
 800db48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db4a:	fbb2 f2f3 	udiv	r2, r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	085b      	lsrs	r3, r3, #1
 800db54:	441a      	add	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db5e:	b29b      	uxth	r3, r3
 800db60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800db62:	e24f      	b.n	800e004 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db64:	f107 0318 	add.w	r3, r7, #24
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fb fced 	bl	8009548 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db6e:	69fa      	ldr	r2, [r7, #28]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db74:	2b00      	cmp	r3, #0
 800db76:	d044      	beq.n	800dc02 <UART_SetConfig+0x1eb2>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d03e      	beq.n	800dbfe <UART_SetConfig+0x1eae>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	2b02      	cmp	r3, #2
 800db86:	d038      	beq.n	800dbfa <UART_SetConfig+0x1eaa>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8c:	2b03      	cmp	r3, #3
 800db8e:	d032      	beq.n	800dbf6 <UART_SetConfig+0x1ea6>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db94:	2b04      	cmp	r3, #4
 800db96:	d02c      	beq.n	800dbf2 <UART_SetConfig+0x1ea2>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9c:	2b05      	cmp	r3, #5
 800db9e:	d026      	beq.n	800dbee <UART_SetConfig+0x1e9e>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba4:	2b06      	cmp	r3, #6
 800dba6:	d020      	beq.n	800dbea <UART_SetConfig+0x1e9a>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	2b07      	cmp	r3, #7
 800dbae:	d01a      	beq.n	800dbe6 <UART_SetConfig+0x1e96>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb4:	2b08      	cmp	r3, #8
 800dbb6:	d014      	beq.n	800dbe2 <UART_SetConfig+0x1e92>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbc:	2b09      	cmp	r3, #9
 800dbbe:	d00e      	beq.n	800dbde <UART_SetConfig+0x1e8e>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc4:	2b0a      	cmp	r3, #10
 800dbc6:	d008      	beq.n	800dbda <UART_SetConfig+0x1e8a>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	2b0b      	cmp	r3, #11
 800dbce:	d102      	bne.n	800dbd6 <UART_SetConfig+0x1e86>
 800dbd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbd4:	e016      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e014      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbda:	2380      	movs	r3, #128	; 0x80
 800dbdc:	e012      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbde:	2340      	movs	r3, #64	; 0x40
 800dbe0:	e010      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbe2:	2320      	movs	r3, #32
 800dbe4:	e00e      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbe6:	2310      	movs	r3, #16
 800dbe8:	e00c      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbea:	230c      	movs	r3, #12
 800dbec:	e00a      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbee:	230a      	movs	r3, #10
 800dbf0:	e008      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbf2:	2308      	movs	r3, #8
 800dbf4:	e006      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbf6:	2306      	movs	r3, #6
 800dbf8:	e004      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbfa:	2304      	movs	r3, #4
 800dbfc:	e002      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dbfe:	2302      	movs	r3, #2
 800dc00:	e000      	b.n	800dc04 <UART_SetConfig+0x1eb4>
 800dc02:	2301      	movs	r3, #1
 800dc04:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	085b      	lsrs	r3, r3, #1
 800dc0e:	441a      	add	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dc1c:	e1f2      	b.n	800e004 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc1e:	f107 030c 	add.w	r3, r7, #12
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fb fddc 	bl	80097e0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc28:	693a      	ldr	r2, [r7, #16]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d044      	beq.n	800dcbc <UART_SetConfig+0x1f6c>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d03e      	beq.n	800dcb8 <UART_SetConfig+0x1f68>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d038      	beq.n	800dcb4 <UART_SetConfig+0x1f64>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc46:	2b03      	cmp	r3, #3
 800dc48:	d032      	beq.n	800dcb0 <UART_SetConfig+0x1f60>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	2b04      	cmp	r3, #4
 800dc50:	d02c      	beq.n	800dcac <UART_SetConfig+0x1f5c>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	2b05      	cmp	r3, #5
 800dc58:	d026      	beq.n	800dca8 <UART_SetConfig+0x1f58>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5e:	2b06      	cmp	r3, #6
 800dc60:	d020      	beq.n	800dca4 <UART_SetConfig+0x1f54>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc66:	2b07      	cmp	r3, #7
 800dc68:	d01a      	beq.n	800dca0 <UART_SetConfig+0x1f50>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6e:	2b08      	cmp	r3, #8
 800dc70:	d014      	beq.n	800dc9c <UART_SetConfig+0x1f4c>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc76:	2b09      	cmp	r3, #9
 800dc78:	d00e      	beq.n	800dc98 <UART_SetConfig+0x1f48>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7e:	2b0a      	cmp	r3, #10
 800dc80:	d008      	beq.n	800dc94 <UART_SetConfig+0x1f44>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc86:	2b0b      	cmp	r3, #11
 800dc88:	d102      	bne.n	800dc90 <UART_SetConfig+0x1f40>
 800dc8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc8e:	e016      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dc90:	2301      	movs	r3, #1
 800dc92:	e014      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dc94:	2380      	movs	r3, #128	; 0x80
 800dc96:	e012      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dc98:	2340      	movs	r3, #64	; 0x40
 800dc9a:	e010      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dc9c:	2320      	movs	r3, #32
 800dc9e:	e00e      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dca0:	2310      	movs	r3, #16
 800dca2:	e00c      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dca4:	230c      	movs	r3, #12
 800dca6:	e00a      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dca8:	230a      	movs	r3, #10
 800dcaa:	e008      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dcac:	2308      	movs	r3, #8
 800dcae:	e006      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dcb0:	2306      	movs	r3, #6
 800dcb2:	e004      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dcb4:	2304      	movs	r3, #4
 800dcb6:	e002      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dcb8:	2302      	movs	r3, #2
 800dcba:	e000      	b.n	800dcbe <UART_SetConfig+0x1f6e>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	fbb2 f2f3 	udiv	r2, r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	085b      	lsrs	r3, r3, #1
 800dcc8:	441a      	add	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dcd6:	e195      	b.n	800e004 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcd8:	4b87      	ldr	r3, [pc, #540]	; (800def8 <UART_SetConfig+0x21a8>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f003 0320 	and.w	r3, r3, #32
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d05d      	beq.n	800dda0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dce4:	4b84      	ldr	r3, [pc, #528]	; (800def8 <UART_SetConfig+0x21a8>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	08db      	lsrs	r3, r3, #3
 800dcea:	f003 0303 	and.w	r3, r3, #3
 800dcee:	4a83      	ldr	r2, [pc, #524]	; (800defc <UART_SetConfig+0x21ac>)
 800dcf0:	40da      	lsrs	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d044      	beq.n	800dd84 <UART_SetConfig+0x2034>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d03e      	beq.n	800dd80 <UART_SetConfig+0x2030>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d038      	beq.n	800dd7c <UART_SetConfig+0x202c>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d032      	beq.n	800dd78 <UART_SetConfig+0x2028>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd16:	2b04      	cmp	r3, #4
 800dd18:	d02c      	beq.n	800dd74 <UART_SetConfig+0x2024>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1e:	2b05      	cmp	r3, #5
 800dd20:	d026      	beq.n	800dd70 <UART_SetConfig+0x2020>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd26:	2b06      	cmp	r3, #6
 800dd28:	d020      	beq.n	800dd6c <UART_SetConfig+0x201c>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2e:	2b07      	cmp	r3, #7
 800dd30:	d01a      	beq.n	800dd68 <UART_SetConfig+0x2018>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd36:	2b08      	cmp	r3, #8
 800dd38:	d014      	beq.n	800dd64 <UART_SetConfig+0x2014>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3e:	2b09      	cmp	r3, #9
 800dd40:	d00e      	beq.n	800dd60 <UART_SetConfig+0x2010>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd46:	2b0a      	cmp	r3, #10
 800dd48:	d008      	beq.n	800dd5c <UART_SetConfig+0x200c>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	2b0b      	cmp	r3, #11
 800dd50:	d102      	bne.n	800dd58 <UART_SetConfig+0x2008>
 800dd52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd56:	e016      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e014      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd5c:	2380      	movs	r3, #128	; 0x80
 800dd5e:	e012      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd60:	2340      	movs	r3, #64	; 0x40
 800dd62:	e010      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd64:	2320      	movs	r3, #32
 800dd66:	e00e      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd68:	2310      	movs	r3, #16
 800dd6a:	e00c      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd6c:	230c      	movs	r3, #12
 800dd6e:	e00a      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd70:	230a      	movs	r3, #10
 800dd72:	e008      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd74:	2308      	movs	r3, #8
 800dd76:	e006      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd78:	2306      	movs	r3, #6
 800dd7a:	e004      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd7c:	2304      	movs	r3, #4
 800dd7e:	e002      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd80:	2302      	movs	r3, #2
 800dd82:	e000      	b.n	800dd86 <UART_SetConfig+0x2036>
 800dd84:	2301      	movs	r3, #1
 800dd86:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	085b      	lsrs	r3, r3, #1
 800dd90:	441a      	add	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800dd9e:	e131      	b.n	800e004 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d043      	beq.n	800de30 <UART_SetConfig+0x20e0>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d03d      	beq.n	800de2c <UART_SetConfig+0x20dc>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d037      	beq.n	800de28 <UART_SetConfig+0x20d8>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d031      	beq.n	800de24 <UART_SetConfig+0x20d4>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc4:	2b04      	cmp	r3, #4
 800ddc6:	d02b      	beq.n	800de20 <UART_SetConfig+0x20d0>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddcc:	2b05      	cmp	r3, #5
 800ddce:	d025      	beq.n	800de1c <UART_SetConfig+0x20cc>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	2b06      	cmp	r3, #6
 800ddd6:	d01f      	beq.n	800de18 <UART_SetConfig+0x20c8>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dddc:	2b07      	cmp	r3, #7
 800ddde:	d019      	beq.n	800de14 <UART_SetConfig+0x20c4>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde4:	2b08      	cmp	r3, #8
 800dde6:	d013      	beq.n	800de10 <UART_SetConfig+0x20c0>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddec:	2b09      	cmp	r3, #9
 800ddee:	d00d      	beq.n	800de0c <UART_SetConfig+0x20bc>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf4:	2b0a      	cmp	r3, #10
 800ddf6:	d007      	beq.n	800de08 <UART_SetConfig+0x20b8>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfc:	2b0b      	cmp	r3, #11
 800ddfe:	d101      	bne.n	800de04 <UART_SetConfig+0x20b4>
 800de00:	4b3f      	ldr	r3, [pc, #252]	; (800df00 <UART_SetConfig+0x21b0>)
 800de02:	e016      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de04:	4b3d      	ldr	r3, [pc, #244]	; (800defc <UART_SetConfig+0x21ac>)
 800de06:	e014      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de08:	4b3e      	ldr	r3, [pc, #248]	; (800df04 <UART_SetConfig+0x21b4>)
 800de0a:	e012      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de0c:	4b3e      	ldr	r3, [pc, #248]	; (800df08 <UART_SetConfig+0x21b8>)
 800de0e:	e010      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de10:	4b3e      	ldr	r3, [pc, #248]	; (800df0c <UART_SetConfig+0x21bc>)
 800de12:	e00e      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de14:	4b3e      	ldr	r3, [pc, #248]	; (800df10 <UART_SetConfig+0x21c0>)
 800de16:	e00c      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de18:	4b3e      	ldr	r3, [pc, #248]	; (800df14 <UART_SetConfig+0x21c4>)
 800de1a:	e00a      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de1c:	4b3e      	ldr	r3, [pc, #248]	; (800df18 <UART_SetConfig+0x21c8>)
 800de1e:	e008      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de20:	4b3e      	ldr	r3, [pc, #248]	; (800df1c <UART_SetConfig+0x21cc>)
 800de22:	e006      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de24:	4b3e      	ldr	r3, [pc, #248]	; (800df20 <UART_SetConfig+0x21d0>)
 800de26:	e004      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de28:	4b3e      	ldr	r3, [pc, #248]	; (800df24 <UART_SetConfig+0x21d4>)
 800de2a:	e002      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de2c:	4b3e      	ldr	r3, [pc, #248]	; (800df28 <UART_SetConfig+0x21d8>)
 800de2e:	e000      	b.n	800de32 <UART_SetConfig+0x20e2>
 800de30:	4b32      	ldr	r3, [pc, #200]	; (800defc <UART_SetConfig+0x21ac>)
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	6852      	ldr	r2, [r2, #4]
 800de36:	0852      	lsrs	r2, r2, #1
 800de38:	441a      	add	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de42:	b29b      	uxth	r3, r3
 800de44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800de46:	e0dd      	b.n	800e004 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d046      	beq.n	800dede <UART_SetConfig+0x218e>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de54:	2b01      	cmp	r3, #1
 800de56:	d040      	beq.n	800deda <UART_SetConfig+0x218a>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d03a      	beq.n	800ded6 <UART_SetConfig+0x2186>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de64:	2b03      	cmp	r3, #3
 800de66:	d034      	beq.n	800ded2 <UART_SetConfig+0x2182>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6c:	2b04      	cmp	r3, #4
 800de6e:	d02e      	beq.n	800dece <UART_SetConfig+0x217e>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de74:	2b05      	cmp	r3, #5
 800de76:	d028      	beq.n	800deca <UART_SetConfig+0x217a>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7c:	2b06      	cmp	r3, #6
 800de7e:	d022      	beq.n	800dec6 <UART_SetConfig+0x2176>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de84:	2b07      	cmp	r3, #7
 800de86:	d01c      	beq.n	800dec2 <UART_SetConfig+0x2172>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8c:	2b08      	cmp	r3, #8
 800de8e:	d016      	beq.n	800debe <UART_SetConfig+0x216e>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de94:	2b09      	cmp	r3, #9
 800de96:	d00f      	beq.n	800deb8 <UART_SetConfig+0x2168>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9c:	2b0a      	cmp	r3, #10
 800de9e:	d008      	beq.n	800deb2 <UART_SetConfig+0x2162>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea4:	2b0b      	cmp	r3, #11
 800dea6:	d102      	bne.n	800deae <UART_SetConfig+0x215e>
 800dea8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800deac:	e018      	b.n	800dee0 <UART_SetConfig+0x2190>
 800deae:	4b18      	ldr	r3, [pc, #96]	; (800df10 <UART_SetConfig+0x21c0>)
 800deb0:	e016      	b.n	800dee0 <UART_SetConfig+0x2190>
 800deb2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800deb6:	e013      	b.n	800dee0 <UART_SetConfig+0x2190>
 800deb8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800debc:	e010      	b.n	800dee0 <UART_SetConfig+0x2190>
 800debe:	4b1b      	ldr	r3, [pc, #108]	; (800df2c <UART_SetConfig+0x21dc>)
 800dec0:	e00e      	b.n	800dee0 <UART_SetConfig+0x2190>
 800dec2:	4b0f      	ldr	r3, [pc, #60]	; (800df00 <UART_SetConfig+0x21b0>)
 800dec4:	e00c      	b.n	800dee0 <UART_SetConfig+0x2190>
 800dec6:	4b1a      	ldr	r3, [pc, #104]	; (800df30 <UART_SetConfig+0x21e0>)
 800dec8:	e00a      	b.n	800dee0 <UART_SetConfig+0x2190>
 800deca:	4b1a      	ldr	r3, [pc, #104]	; (800df34 <UART_SetConfig+0x21e4>)
 800decc:	e008      	b.n	800dee0 <UART_SetConfig+0x2190>
 800dece:	4b0d      	ldr	r3, [pc, #52]	; (800df04 <UART_SetConfig+0x21b4>)
 800ded0:	e006      	b.n	800dee0 <UART_SetConfig+0x2190>
 800ded2:	4b19      	ldr	r3, [pc, #100]	; (800df38 <UART_SetConfig+0x21e8>)
 800ded4:	e004      	b.n	800dee0 <UART_SetConfig+0x2190>
 800ded6:	4b0c      	ldr	r3, [pc, #48]	; (800df08 <UART_SetConfig+0x21b8>)
 800ded8:	e002      	b.n	800dee0 <UART_SetConfig+0x2190>
 800deda:	4b0c      	ldr	r3, [pc, #48]	; (800df0c <UART_SetConfig+0x21bc>)
 800dedc:	e000      	b.n	800dee0 <UART_SetConfig+0x2190>
 800dede:	4b0c      	ldr	r3, [pc, #48]	; (800df10 <UART_SetConfig+0x21c0>)
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	6852      	ldr	r2, [r2, #4]
 800dee4:	0852      	lsrs	r2, r2, #1
 800dee6:	441a      	add	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	fbb2 f3f3 	udiv	r3, r2, r3
 800def0:	b29b      	uxth	r3, r3
 800def2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800def4:	e086      	b.n	800e004 <UART_SetConfig+0x22b4>
 800def6:	bf00      	nop
 800def8:	58024400 	.word	0x58024400
 800defc:	03d09000 	.word	0x03d09000
 800df00:	0003d090 	.word	0x0003d090
 800df04:	0007a120 	.word	0x0007a120
 800df08:	000f4240 	.word	0x000f4240
 800df0c:	001e8480 	.word	0x001e8480
 800df10:	003d0900 	.word	0x003d0900
 800df14:	00516155 	.word	0x00516155
 800df18:	0061a800 	.word	0x0061a800
 800df1c:	007a1200 	.word	0x007a1200
 800df20:	00a2c2aa 	.word	0x00a2c2aa
 800df24:	00f42400 	.word	0x00f42400
 800df28:	01e84800 	.word	0x01e84800
 800df2c:	0001e848 	.word	0x0001e848
 800df30:	00051615 	.word	0x00051615
 800df34:	00061a80 	.word	0x00061a80
 800df38:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	d04e      	beq.n	800dfe2 <UART_SetConfig+0x2292>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d047      	beq.n	800dfdc <UART_SetConfig+0x228c>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df50:	2b02      	cmp	r3, #2
 800df52:	d040      	beq.n	800dfd6 <UART_SetConfig+0x2286>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df58:	2b03      	cmp	r3, #3
 800df5a:	d039      	beq.n	800dfd0 <UART_SetConfig+0x2280>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df60:	2b04      	cmp	r3, #4
 800df62:	d032      	beq.n	800dfca <UART_SetConfig+0x227a>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df68:	2b05      	cmp	r3, #5
 800df6a:	d02b      	beq.n	800dfc4 <UART_SetConfig+0x2274>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df70:	2b06      	cmp	r3, #6
 800df72:	d024      	beq.n	800dfbe <UART_SetConfig+0x226e>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df78:	2b07      	cmp	r3, #7
 800df7a:	d01d      	beq.n	800dfb8 <UART_SetConfig+0x2268>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df80:	2b08      	cmp	r3, #8
 800df82:	d016      	beq.n	800dfb2 <UART_SetConfig+0x2262>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df88:	2b09      	cmp	r3, #9
 800df8a:	d00f      	beq.n	800dfac <UART_SetConfig+0x225c>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df90:	2b0a      	cmp	r3, #10
 800df92:	d008      	beq.n	800dfa6 <UART_SetConfig+0x2256>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df98:	2b0b      	cmp	r3, #11
 800df9a:	d101      	bne.n	800dfa0 <UART_SetConfig+0x2250>
 800df9c:	2380      	movs	r3, #128	; 0x80
 800df9e:	e022      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfa4:	e01f      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfaa:	e01c      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfb0:	e019      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfb6:	e016      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfbc:	e013      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfbe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800dfc2:	e010      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfc4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800dfc8:	e00d      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfce:	e00a      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfd0:	f241 5355 	movw	r3, #5461	; 0x1555
 800dfd4:	e007      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfda:	e004      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dfe0:	e001      	b.n	800dfe6 <UART_SetConfig+0x2296>
 800dfe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	6852      	ldr	r2, [r2, #4]
 800dfea:	0852      	lsrs	r2, r2, #1
 800dfec:	441a      	add	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800dffa:	e003      	b.n	800e004 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800dffc:	2301      	movs	r3, #1
 800dffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e002:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e006:	2b0f      	cmp	r3, #15
 800e008:	d908      	bls.n	800e01c <UART_SetConfig+0x22cc>
 800e00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e010:	d204      	bcs.n	800e01c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	e002      	b.n	800e022 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800e03e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800e042:	4618      	mov	r0, r3
 800e044:	3740      	adds	r7, #64	; 0x40
 800e046:	46bd      	mov	sp, r7
 800e048:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800e04c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00a      	beq.n	800e076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	430a      	orrs	r2, r1
 800e074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07a:	f003 0302 	and.w	r3, r3, #2
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00a      	beq.n	800e098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	430a      	orrs	r2, r1
 800e096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00a      	beq.n	800e0ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0be:	f003 0308 	and.w	r3, r3, #8
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00a      	beq.n	800e0dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	430a      	orrs	r2, r1
 800e0da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e0:	f003 0310 	and.w	r3, r3, #16
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00a      	beq.n	800e0fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	430a      	orrs	r2, r1
 800e0fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	f003 0320 	and.w	r3, r3, #32
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00a      	beq.n	800e120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	430a      	orrs	r2, r1
 800e11e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d01a      	beq.n	800e162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	430a      	orrs	r2, r1
 800e140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e14a:	d10a      	bne.n	800e162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	430a      	orrs	r2, r1
 800e160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00a      	beq.n	800e184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	430a      	orrs	r2, r1
 800e182:	605a      	str	r2, [r3, #4]
  }
}
 800e184:	bf00      	nop
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af02      	add	r7, sp, #8
 800e196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e1a0:	f7f8 fdb4 	bl	8006d0c <HAL_GetTick>
 800e1a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f003 0308 	and.w	r3, r3, #8
 800e1b0:	2b08      	cmp	r3, #8
 800e1b2:	d10e      	bne.n	800e1d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f82c 	bl	800e220 <UART_WaitOnFlagUntilTimeout>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	e022      	b.n	800e218 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f003 0304 	and.w	r3, r3, #4
 800e1dc:	2b04      	cmp	r3, #4
 800e1de:	d10e      	bne.n	800e1fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f816 	bl	800e220 <UART_WaitOnFlagUntilTimeout>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d001      	beq.n	800e1fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1fa:	2303      	movs	r3, #3
 800e1fc:	e00c      	b.n	800e218 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2220      	movs	r2, #32
 800e202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2220      	movs	r2, #32
 800e20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2200      	movs	r2, #0
 800e212:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	603b      	str	r3, [r7, #0]
 800e22c:	4613      	mov	r3, r2
 800e22e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e230:	e062      	b.n	800e2f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e238:	d05e      	beq.n	800e2f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e23a:	f7f8 fd67 	bl	8006d0c <HAL_GetTick>
 800e23e:	4602      	mov	r2, r0
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	1ad3      	subs	r3, r2, r3
 800e244:	69ba      	ldr	r2, [r7, #24]
 800e246:	429a      	cmp	r2, r3
 800e248:	d302      	bcc.n	800e250 <UART_WaitOnFlagUntilTimeout+0x30>
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d11d      	bne.n	800e28c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e25e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	689a      	ldr	r2, [r3, #8]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f022 0201 	bic.w	r2, r2, #1
 800e26e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2220      	movs	r2, #32
 800e274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2220      	movs	r2, #32
 800e27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e288:	2303      	movs	r3, #3
 800e28a:	e045      	b.n	800e318 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f003 0304 	and.w	r3, r3, #4
 800e296:	2b00      	cmp	r3, #0
 800e298:	d02e      	beq.n	800e2f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	69db      	ldr	r3, [r3, #28]
 800e2a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2a8:	d126      	bne.n	800e2f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2b2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e2c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	689a      	ldr	r2, [r3, #8]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f022 0201 	bic.w	r2, r2, #1
 800e2d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2220      	movs	r2, #32
 800e2d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2220      	movs	r2, #32
 800e2e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	e00f      	b.n	800e318 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	69da      	ldr	r2, [r3, #28]
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	4013      	ands	r3, r2
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	429a      	cmp	r2, r3
 800e306:	bf0c      	ite	eq
 800e308:	2301      	moveq	r3, #1
 800e30a:	2300      	movne	r3, #0
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	461a      	mov	r2, r3
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	429a      	cmp	r2, r3
 800e314:	d08d      	beq.n	800e232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e336:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	6899      	ldr	r1, [r3, #8]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	4b08      	ldr	r3, [pc, #32]	; (800e364 <UART_EndRxTransfer+0x44>)
 800e344:	400b      	ands	r3, r1
 800e346:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2220      	movs	r2, #32
 800e34c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800e356:	bf00      	nop
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	effffffe 	.word	0xeffffffe

0800e368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f7fd fcd8 	bl	800bd3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e38c:	bf00      	nop
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3aa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2220      	movs	r2, #32
 800e3b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7f3 fc0e 	bl	8001bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3de:	2b22      	cmp	r3, #34	; 0x22
 800e3e0:	d13b      	bne.n	800e45a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e3ea:	89bb      	ldrh	r3, [r7, #12]
 800e3ec:	b2d9      	uxtb	r1, r3
 800e3ee:	89fb      	ldrh	r3, [r7, #14]
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3f6:	400a      	ands	r2, r1
 800e3f8:	b2d2      	uxtb	r2, r2
 800e3fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e400:	1c5a      	adds	r2, r3, #1
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3b01      	subs	r3, #1
 800e410:	b29a      	uxth	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e41e:	b29b      	uxth	r3, r3
 800e420:	2b00      	cmp	r3, #0
 800e422:	d122      	bne.n	800e46a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e432:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	689a      	ldr	r2, [r3, #8]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f022 0201 	bic.w	r2, r2, #1
 800e442:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2220      	movs	r2, #32
 800e448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7f3 fb60 	bl	8001b18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e458:	e007      	b.n	800e46a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	699a      	ldr	r2, [r3, #24]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f042 0208 	orr.w	r2, r2, #8
 800e468:	619a      	str	r2, [r3, #24]
}
 800e46a:	bf00      	nop
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e472:	b580      	push	{r7, lr}
 800e474:	b084      	sub	sp, #16
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e480:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e488:	2b22      	cmp	r3, #34	; 0x22
 800e48a:	d13b      	bne.n	800e504 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e492:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e498:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e49a:	89ba      	ldrh	r2, [r7, #12]
 800e49c:	89fb      	ldrh	r3, [r7, #14]
 800e49e:	4013      	ands	r3, r2
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4aa:	1c9a      	adds	r2, r3, #2
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d122      	bne.n	800e514 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e4dc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	689a      	ldr	r2, [r3, #8]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f022 0201 	bic.w	r2, r2, #1
 800e4ec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f7f3 fb0b 	bl	8001b18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e502:	e007      	b.n	800e514 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	699a      	ldr	r2, [r3, #24]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f042 0208 	orr.w	r2, r2, #8
 800e512:	619a      	str	r2, [r3, #24]
}
 800e514:	bf00      	nop
 800e516:	3710      	adds	r7, #16
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e52a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e532:	2b22      	cmp	r3, #34	; 0x22
 800e534:	d166      	bne.n	800e604 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e53c:	81fb      	strh	r3, [r7, #14]
 800e53e:	e03d      	b.n	800e5bc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e546:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e548:	893b      	ldrh	r3, [r7, #8]
 800e54a:	b2d9      	uxtb	r1, r3
 800e54c:	89bb      	ldrh	r3, [r7, #12]
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e554:	400a      	ands	r2, r1
 800e556:	b2d2      	uxtb	r2, r2
 800e558:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e55e:	1c5a      	adds	r2, r3, #1
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3b01      	subs	r3, #1
 800e56e:	b29a      	uxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d119      	bne.n	800e5b6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e590:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6899      	ldr	r1, [r3, #8]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	4b1f      	ldr	r3, [pc, #124]	; (800e61c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800e59e:	400b      	ands	r3, r1
 800e5a0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2220      	movs	r2, #32
 800e5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7f3 fab1 	bl	8001b18 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e5b6:	89fb      	ldrh	r3, [r7, #14]
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	81fb      	strh	r3, [r7, #14]
 800e5bc:	89fb      	ldrh	r3, [r7, #14]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1be      	bne.n	800e540 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5c8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e5ca:	897b      	ldrh	r3, [r7, #10]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d021      	beq.n	800e614 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e5d6:	897a      	ldrh	r2, [r7, #10]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d21b      	bcs.n	800e614 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	689a      	ldr	r2, [r3, #8]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e5ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4a0c      	ldr	r2, [pc, #48]	; (800e620 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800e5f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f042 0220 	orr.w	r2, r2, #32
 800e600:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e602:	e007      	b.n	800e614 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	699a      	ldr	r2, [r3, #24]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f042 0208 	orr.w	r2, r2, #8
 800e612:	619a      	str	r2, [r3, #24]
}
 800e614:	bf00      	nop
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	effffffe 	.word	0xeffffffe
 800e620:	0800e3c9 	.word	0x0800e3c9

0800e624 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b086      	sub	sp, #24
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e632:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e63a:	2b22      	cmp	r3, #34	; 0x22
 800e63c:	d166      	bne.n	800e70c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e644:	82fb      	strh	r3, [r7, #22]
 800e646:	e03d      	b.n	800e6c4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e654:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800e656:	8a3a      	ldrh	r2, [r7, #16]
 800e658:	8abb      	ldrh	r3, [r7, #20]
 800e65a:	4013      	ands	r3, r2
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e666:	1c9a      	adds	r2, r3, #2
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e672:	b29b      	uxth	r3, r3
 800e674:	3b01      	subs	r3, #1
 800e676:	b29a      	uxth	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e684:	b29b      	uxth	r3, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	d119      	bne.n	800e6be <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e698:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6899      	ldr	r1, [r3, #8]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	4b1f      	ldr	r3, [pc, #124]	; (800e724 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800e6a6:	400b      	ands	r3, r1
 800e6a8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2220      	movs	r2, #32
 800e6ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7f3 fa2d 	bl	8001b18 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800e6be:	8afb      	ldrh	r3, [r7, #22]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	82fb      	strh	r3, [r7, #22]
 800e6c4:	8afb      	ldrh	r3, [r7, #22]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1be      	bne.n	800e648 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6d0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e6d2:	8a7b      	ldrh	r3, [r7, #18]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d021      	beq.n	800e71c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6de:	8a7a      	ldrh	r2, [r7, #18]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d21b      	bcs.n	800e71c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	689a      	ldr	r2, [r3, #8]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e6f2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a0c      	ldr	r2, [pc, #48]	; (800e728 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800e6f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f042 0220 	orr.w	r2, r2, #32
 800e708:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e70a:	e007      	b.n	800e71c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	699a      	ldr	r2, [r3, #24]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f042 0208 	orr.w	r2, r2, #8
 800e71a:	619a      	str	r2, [r3, #24]
}
 800e71c:	bf00      	nop
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	effffffe 	.word	0xeffffffe
 800e728:	0800e473 	.word	0x0800e473

0800e72c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e734:	bf00      	nop
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e75c:	bf00      	nop
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e776:	2b01      	cmp	r3, #1
 800e778:	d101      	bne.n	800e77e <HAL_UARTEx_DisableFifoMode+0x16>
 800e77a:	2302      	movs	r3, #2
 800e77c:	e027      	b.n	800e7ce <HAL_UARTEx_DisableFifoMode+0x66>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2201      	movs	r2, #1
 800e782:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2224      	movs	r2, #36	; 0x24
 800e78a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f022 0201 	bic.w	r2, r2, #1
 800e7a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2220      	movs	r2, #32
 800e7c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e7cc:	2300      	movs	r3, #0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3714      	adds	r7, #20
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr

0800e7da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b084      	sub	sp, #16
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d101      	bne.n	800e7f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7ee:	2302      	movs	r3, #2
 800e7f0:	e02d      	b.n	800e84e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2224      	movs	r2, #36	; 0x24
 800e7fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f022 0201 	bic.w	r2, r2, #1
 800e818:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	683a      	ldr	r2, [r7, #0]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 f850 	bl	800e8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2220      	movs	r2, #32
 800e840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e866:	2b01      	cmp	r3, #1
 800e868:	d101      	bne.n	800e86e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e86a:	2302      	movs	r3, #2
 800e86c:	e02d      	b.n	800e8ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2224      	movs	r2, #36	; 0x24
 800e87a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f022 0201 	bic.w	r2, r2, #1
 800e894:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f812 	bl	800e8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2220      	movs	r2, #32
 800e8bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
	...

0800e8d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b089      	sub	sp, #36	; 0x24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e8dc:	4a2f      	ldr	r2, [pc, #188]	; (800e99c <UARTEx_SetNbDataToProcess+0xc8>)
 800e8de:	f107 0314 	add.w	r3, r7, #20
 800e8e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e8ea:	4a2d      	ldr	r2, [pc, #180]	; (800e9a0 <UARTEx_SetNbDataToProcess+0xcc>)
 800e8ec:	f107 030c 	add.w	r3, r7, #12
 800e8f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d108      	bne.n	800e912 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e910:	e03d      	b.n	800e98e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e912:	2308      	movs	r3, #8
 800e914:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e916:	2308      	movs	r3, #8
 800e918:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	0e5b      	lsrs	r3, r3, #25
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 0307 	and.w	r3, r3, #7
 800e928:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	0f5b      	lsrs	r3, r3, #29
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 0307 	and.w	r3, r3, #7
 800e938:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800e93a:	7fbb      	ldrb	r3, [r7, #30]
 800e93c:	7f3a      	ldrb	r2, [r7, #28]
 800e93e:	f107 0120 	add.w	r1, r7, #32
 800e942:	440a      	add	r2, r1
 800e944:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e948:	fb02 f303 	mul.w	r3, r2, r3
 800e94c:	7f3a      	ldrb	r2, [r7, #28]
 800e94e:	f107 0120 	add.w	r1, r7, #32
 800e952:	440a      	add	r2, r1
 800e954:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e958:	fb93 f3f2 	sdiv	r3, r3, r2
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800e964:	7ffb      	ldrb	r3, [r7, #31]
 800e966:	7f7a      	ldrb	r2, [r7, #29]
 800e968:	f107 0120 	add.w	r1, r7, #32
 800e96c:	440a      	add	r2, r1
 800e96e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e972:	fb02 f303 	mul.w	r3, r2, r3
 800e976:	7f7a      	ldrb	r2, [r7, #29]
 800e978:	f107 0120 	add.w	r1, r7, #32
 800e97c:	440a      	add	r2, r1
 800e97e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e982:	fb93 f3f2 	sdiv	r3, r3, r2
 800e986:	b29a      	uxth	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e98e:	bf00      	nop
 800e990:	3724      	adds	r7, #36	; 0x24
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	08011638 	.word	0x08011638
 800e9a0:	08011640 	.word	0x08011640

0800e9a4 <__errno>:
 800e9a4:	4b01      	ldr	r3, [pc, #4]	; (800e9ac <__errno+0x8>)
 800e9a6:	6818      	ldr	r0, [r3, #0]
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	24000110 	.word	0x24000110

0800e9b0 <__libc_init_array>:
 800e9b0:	b570      	push	{r4, r5, r6, lr}
 800e9b2:	4e0d      	ldr	r6, [pc, #52]	; (800e9e8 <__libc_init_array+0x38>)
 800e9b4:	4c0d      	ldr	r4, [pc, #52]	; (800e9ec <__libc_init_array+0x3c>)
 800e9b6:	1ba4      	subs	r4, r4, r6
 800e9b8:	10a4      	asrs	r4, r4, #2
 800e9ba:	2500      	movs	r5, #0
 800e9bc:	42a5      	cmp	r5, r4
 800e9be:	d109      	bne.n	800e9d4 <__libc_init_array+0x24>
 800e9c0:	4e0b      	ldr	r6, [pc, #44]	; (800e9f0 <__libc_init_array+0x40>)
 800e9c2:	4c0c      	ldr	r4, [pc, #48]	; (800e9f4 <__libc_init_array+0x44>)
 800e9c4:	f002 fda6 	bl	8011514 <_init>
 800e9c8:	1ba4      	subs	r4, r4, r6
 800e9ca:	10a4      	asrs	r4, r4, #2
 800e9cc:	2500      	movs	r5, #0
 800e9ce:	42a5      	cmp	r5, r4
 800e9d0:	d105      	bne.n	800e9de <__libc_init_array+0x2e>
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e9d8:	4798      	blx	r3
 800e9da:	3501      	adds	r5, #1
 800e9dc:	e7ee      	b.n	800e9bc <__libc_init_array+0xc>
 800e9de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e9e2:	4798      	blx	r3
 800e9e4:	3501      	adds	r5, #1
 800e9e6:	e7f2      	b.n	800e9ce <__libc_init_array+0x1e>
 800e9e8:	08011920 	.word	0x08011920
 800e9ec:	08011920 	.word	0x08011920
 800e9f0:	08011920 	.word	0x08011920
 800e9f4:	08011924 	.word	0x08011924

0800e9f8 <memcpy>:
 800e9f8:	b510      	push	{r4, lr}
 800e9fa:	1e43      	subs	r3, r0, #1
 800e9fc:	440a      	add	r2, r1
 800e9fe:	4291      	cmp	r1, r2
 800ea00:	d100      	bne.n	800ea04 <memcpy+0xc>
 800ea02:	bd10      	pop	{r4, pc}
 800ea04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea0c:	e7f7      	b.n	800e9fe <memcpy+0x6>

0800ea0e <memset>:
 800ea0e:	4402      	add	r2, r0
 800ea10:	4603      	mov	r3, r0
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d100      	bne.n	800ea18 <memset+0xa>
 800ea16:	4770      	bx	lr
 800ea18:	f803 1b01 	strb.w	r1, [r3], #1
 800ea1c:	e7f9      	b.n	800ea12 <memset+0x4>

0800ea1e <sulp>:
 800ea1e:	b570      	push	{r4, r5, r6, lr}
 800ea20:	4604      	mov	r4, r0
 800ea22:	460d      	mov	r5, r1
 800ea24:	4616      	mov	r6, r2
 800ea26:	ec45 4b10 	vmov	d0, r4, r5
 800ea2a:	f001 fbf7 	bl	801021c <__ulp>
 800ea2e:	b17e      	cbz	r6, 800ea50 <sulp+0x32>
 800ea30:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ea34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	dd09      	ble.n	800ea50 <sulp+0x32>
 800ea3c:	051b      	lsls	r3, r3, #20
 800ea3e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ea42:	2000      	movs	r0, #0
 800ea44:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ea48:	ec41 0b17 	vmov	d7, r0, r1
 800ea4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ea50:	bd70      	pop	{r4, r5, r6, pc}
 800ea52:	0000      	movs	r0, r0
 800ea54:	0000      	movs	r0, r0
	...

0800ea58 <_strtod_l>:
 800ea58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5c:	ed2d 8b0c 	vpush	{d8-d13}
 800ea60:	4698      	mov	r8, r3
 800ea62:	b09d      	sub	sp, #116	; 0x74
 800ea64:	2300      	movs	r3, #0
 800ea66:	4604      	mov	r4, r0
 800ea68:	4640      	mov	r0, r8
 800ea6a:	460e      	mov	r6, r1
 800ea6c:	9214      	str	r2, [sp, #80]	; 0x50
 800ea6e:	9318      	str	r3, [sp, #96]	; 0x60
 800ea70:	f001 f8f4 	bl	800fc5c <__localeconv_l>
 800ea74:	4681      	mov	r9, r0
 800ea76:	6800      	ldr	r0, [r0, #0]
 800ea78:	f7f1 fc2e 	bl	80002d8 <strlen>
 800ea7c:	f04f 0a00 	mov.w	sl, #0
 800ea80:	4607      	mov	r7, r0
 800ea82:	f04f 0b00 	mov.w	fp, #0
 800ea86:	9617      	str	r6, [sp, #92]	; 0x5c
 800ea88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea8a:	781a      	ldrb	r2, [r3, #0]
 800ea8c:	2a0d      	cmp	r2, #13
 800ea8e:	d834      	bhi.n	800eafa <_strtod_l+0xa2>
 800ea90:	2a09      	cmp	r2, #9
 800ea92:	d238      	bcs.n	800eb06 <_strtod_l+0xae>
 800ea94:	2a00      	cmp	r2, #0
 800ea96:	d040      	beq.n	800eb1a <_strtod_l+0xc2>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ea9c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800ea9e:	782b      	ldrb	r3, [r5, #0]
 800eaa0:	2b30      	cmp	r3, #48	; 0x30
 800eaa2:	f040 80b3 	bne.w	800ec0c <_strtod_l+0x1b4>
 800eaa6:	786b      	ldrb	r3, [r5, #1]
 800eaa8:	2b58      	cmp	r3, #88	; 0x58
 800eaaa:	d001      	beq.n	800eab0 <_strtod_l+0x58>
 800eaac:	2b78      	cmp	r3, #120	; 0x78
 800eaae:	d169      	bne.n	800eb84 <_strtod_l+0x12c>
 800eab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	ab18      	add	r3, sp, #96	; 0x60
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	f8cd 8008 	str.w	r8, [sp, #8]
 800eabc:	ab19      	add	r3, sp, #100	; 0x64
 800eabe:	4a8f      	ldr	r2, [pc, #572]	; (800ecfc <_strtod_l+0x2a4>)
 800eac0:	a917      	add	r1, sp, #92	; 0x5c
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 fdf3 	bl	800f6ae <__gethex>
 800eac8:	f010 0607 	ands.w	r6, r0, #7
 800eacc:	4607      	mov	r7, r0
 800eace:	d005      	beq.n	800eadc <_strtod_l+0x84>
 800ead0:	2e06      	cmp	r6, #6
 800ead2:	d12c      	bne.n	800eb2e <_strtod_l+0xd6>
 800ead4:	3501      	adds	r5, #1
 800ead6:	2300      	movs	r3, #0
 800ead8:	9517      	str	r5, [sp, #92]	; 0x5c
 800eada:	930d      	str	r3, [sp, #52]	; 0x34
 800eadc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f040 855e 	bne.w	800f5a0 <_strtod_l+0xb48>
 800eae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eae6:	b1eb      	cbz	r3, 800eb24 <_strtod_l+0xcc>
 800eae8:	ec4b ab17 	vmov	d7, sl, fp
 800eaec:	eeb1 0b47 	vneg.f64	d0, d7
 800eaf0:	b01d      	add	sp, #116	; 0x74
 800eaf2:	ecbd 8b0c 	vpop	{d8-d13}
 800eaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafa:	2a2b      	cmp	r2, #43	; 0x2b
 800eafc:	d015      	beq.n	800eb2a <_strtod_l+0xd2>
 800eafe:	2a2d      	cmp	r2, #45	; 0x2d
 800eb00:	d004      	beq.n	800eb0c <_strtod_l+0xb4>
 800eb02:	2a20      	cmp	r2, #32
 800eb04:	d1c8      	bne.n	800ea98 <_strtod_l+0x40>
 800eb06:	3301      	adds	r3, #1
 800eb08:	9317      	str	r3, [sp, #92]	; 0x5c
 800eb0a:	e7bd      	b.n	800ea88 <_strtod_l+0x30>
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	920d      	str	r2, [sp, #52]	; 0x34
 800eb10:	1c5a      	adds	r2, r3, #1
 800eb12:	9217      	str	r2, [sp, #92]	; 0x5c
 800eb14:	785b      	ldrb	r3, [r3, #1]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1c0      	bne.n	800ea9c <_strtod_l+0x44>
 800eb1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb1c:	9617      	str	r6, [sp, #92]	; 0x5c
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f040 853c 	bne.w	800f59c <_strtod_l+0xb44>
 800eb24:	ec4b ab10 	vmov	d0, sl, fp
 800eb28:	e7e2      	b.n	800eaf0 <_strtod_l+0x98>
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	e7ef      	b.n	800eb0e <_strtod_l+0xb6>
 800eb2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eb30:	b13a      	cbz	r2, 800eb42 <_strtod_l+0xea>
 800eb32:	2135      	movs	r1, #53	; 0x35
 800eb34:	a81a      	add	r0, sp, #104	; 0x68
 800eb36:	f001 fc6a 	bl	801040e <__copybits>
 800eb3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f001 f8d5 	bl	800fcec <_Bfree>
 800eb42:	3e01      	subs	r6, #1
 800eb44:	2e04      	cmp	r6, #4
 800eb46:	d806      	bhi.n	800eb56 <_strtod_l+0xfe>
 800eb48:	e8df f006 	tbb	[pc, r6]
 800eb4c:	1714030a 	.word	0x1714030a
 800eb50:	0a          	.byte	0x0a
 800eb51:	00          	.byte	0x00
 800eb52:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800eb56:	073b      	lsls	r3, r7, #28
 800eb58:	d5c0      	bpl.n	800eadc <_strtod_l+0x84>
 800eb5a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800eb5e:	e7bd      	b.n	800eadc <_strtod_l+0x84>
 800eb60:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800eb64:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800eb6a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800eb6e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eb72:	e7f0      	b.n	800eb56 <_strtod_l+0xfe>
 800eb74:	f8df b188 	ldr.w	fp, [pc, #392]	; 800ed00 <_strtod_l+0x2a8>
 800eb78:	e7ed      	b.n	800eb56 <_strtod_l+0xfe>
 800eb7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800eb7e:	f04f 3aff 	mov.w	sl, #4294967295
 800eb82:	e7e8      	b.n	800eb56 <_strtod_l+0xfe>
 800eb84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb86:	1c5a      	adds	r2, r3, #1
 800eb88:	9217      	str	r2, [sp, #92]	; 0x5c
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	2b30      	cmp	r3, #48	; 0x30
 800eb8e:	d0f9      	beq.n	800eb84 <_strtod_l+0x12c>
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0a3      	beq.n	800eadc <_strtod_l+0x84>
 800eb94:	2301      	movs	r3, #1
 800eb96:	930a      	str	r3, [sp, #40]	; 0x28
 800eb98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb9a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9306      	str	r3, [sp, #24]
 800eba0:	9308      	str	r3, [sp, #32]
 800eba2:	461d      	mov	r5, r3
 800eba4:	220a      	movs	r2, #10
 800eba6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800eba8:	f890 8000 	ldrb.w	r8, [r0]
 800ebac:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800ebb0:	b2d9      	uxtb	r1, r3
 800ebb2:	2909      	cmp	r1, #9
 800ebb4:	d92c      	bls.n	800ec10 <_strtod_l+0x1b8>
 800ebb6:	463a      	mov	r2, r7
 800ebb8:	f8d9 1000 	ldr.w	r1, [r9]
 800ebbc:	f001 fcda 	bl	8010574 <strncmp>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d035      	beq.n	800ec30 <_strtod_l+0x1d8>
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	4642      	mov	r2, r8
 800ebc8:	462b      	mov	r3, r5
 800ebca:	4601      	mov	r1, r0
 800ebcc:	9004      	str	r0, [sp, #16]
 800ebce:	2a65      	cmp	r2, #101	; 0x65
 800ebd0:	d001      	beq.n	800ebd6 <_strtod_l+0x17e>
 800ebd2:	2a45      	cmp	r2, #69	; 0x45
 800ebd4:	d117      	bne.n	800ec06 <_strtod_l+0x1ae>
 800ebd6:	b923      	cbnz	r3, 800ebe2 <_strtod_l+0x18a>
 800ebd8:	b910      	cbnz	r0, 800ebe0 <_strtod_l+0x188>
 800ebda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d09c      	beq.n	800eb1a <_strtod_l+0xc2>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ebe4:	1c72      	adds	r2, r6, #1
 800ebe6:	9217      	str	r2, [sp, #92]	; 0x5c
 800ebe8:	7872      	ldrb	r2, [r6, #1]
 800ebea:	2a2b      	cmp	r2, #43	; 0x2b
 800ebec:	f000 8082 	beq.w	800ecf4 <_strtod_l+0x29c>
 800ebf0:	2a2d      	cmp	r2, #45	; 0x2d
 800ebf2:	d079      	beq.n	800ece8 <_strtod_l+0x290>
 800ebf4:	f04f 0e00 	mov.w	lr, #0
 800ebf8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ebfc:	f1bc 0f09 	cmp.w	ip, #9
 800ec00:	f240 8086 	bls.w	800ed10 <_strtod_l+0x2b8>
 800ec04:	9617      	str	r6, [sp, #92]	; 0x5c
 800ec06:	f04f 0800 	mov.w	r8, #0
 800ec0a:	e0a8      	b.n	800ed5e <_strtod_l+0x306>
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	e7c2      	b.n	800eb96 <_strtod_l+0x13e>
 800ec10:	2d08      	cmp	r5, #8
 800ec12:	bfd5      	itete	le
 800ec14:	9908      	ldrle	r1, [sp, #32]
 800ec16:	9906      	ldrgt	r1, [sp, #24]
 800ec18:	fb02 3301 	mlale	r3, r2, r1, r3
 800ec1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ec20:	f100 0001 	add.w	r0, r0, #1
 800ec24:	bfd4      	ite	le
 800ec26:	9308      	strle	r3, [sp, #32]
 800ec28:	9306      	strgt	r3, [sp, #24]
 800ec2a:	3501      	adds	r5, #1
 800ec2c:	9017      	str	r0, [sp, #92]	; 0x5c
 800ec2e:	e7ba      	b.n	800eba6 <_strtod_l+0x14e>
 800ec30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec32:	19da      	adds	r2, r3, r7
 800ec34:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec36:	5dda      	ldrb	r2, [r3, r7]
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	d038      	beq.n	800ecae <_strtod_l+0x256>
 800ec3c:	4601      	mov	r1, r0
 800ec3e:	462b      	mov	r3, r5
 800ec40:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800ec44:	2f09      	cmp	r7, #9
 800ec46:	d913      	bls.n	800ec70 <_strtod_l+0x218>
 800ec48:	2701      	movs	r7, #1
 800ec4a:	9704      	str	r7, [sp, #16]
 800ec4c:	e7bf      	b.n	800ebce <_strtod_l+0x176>
 800ec4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec50:	1c5a      	adds	r2, r3, #1
 800ec52:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec54:	785a      	ldrb	r2, [r3, #1]
 800ec56:	3001      	adds	r0, #1
 800ec58:	2a30      	cmp	r2, #48	; 0x30
 800ec5a:	d0f8      	beq.n	800ec4e <_strtod_l+0x1f6>
 800ec5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ec60:	2b08      	cmp	r3, #8
 800ec62:	f200 84a2 	bhi.w	800f5aa <_strtod_l+0xb52>
 800ec66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec68:	930c      	str	r3, [sp, #48]	; 0x30
 800ec6a:	4601      	mov	r1, r0
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	4603      	mov	r3, r0
 800ec70:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800ec74:	f100 0701 	add.w	r7, r0, #1
 800ec78:	d013      	beq.n	800eca2 <_strtod_l+0x24a>
 800ec7a:	4439      	add	r1, r7
 800ec7c:	eb00 0e03 	add.w	lr, r0, r3
 800ec80:	461f      	mov	r7, r3
 800ec82:	f04f 0c0a 	mov.w	ip, #10
 800ec86:	45be      	cmp	lr, r7
 800ec88:	d113      	bne.n	800ecb2 <_strtod_l+0x25a>
 800ec8a:	181f      	adds	r7, r3, r0
 800ec8c:	2f08      	cmp	r7, #8
 800ec8e:	f103 0301 	add.w	r3, r3, #1
 800ec92:	4403      	add	r3, r0
 800ec94:	dc1d      	bgt.n	800ecd2 <_strtod_l+0x27a>
 800ec96:	9a08      	ldr	r2, [sp, #32]
 800ec98:	200a      	movs	r0, #10
 800ec9a:	fb00 8202 	mla	r2, r0, r2, r8
 800ec9e:	9208      	str	r2, [sp, #32]
 800eca0:	2700      	movs	r7, #0
 800eca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eca4:	1c50      	adds	r0, r2, #1
 800eca6:	9017      	str	r0, [sp, #92]	; 0x5c
 800eca8:	7852      	ldrb	r2, [r2, #1]
 800ecaa:	4638      	mov	r0, r7
 800ecac:	e7c8      	b.n	800ec40 <_strtod_l+0x1e8>
 800ecae:	4628      	mov	r0, r5
 800ecb0:	e7d2      	b.n	800ec58 <_strtod_l+0x200>
 800ecb2:	2f08      	cmp	r7, #8
 800ecb4:	f107 0701 	add.w	r7, r7, #1
 800ecb8:	dc04      	bgt.n	800ecc4 <_strtod_l+0x26c>
 800ecba:	9a08      	ldr	r2, [sp, #32]
 800ecbc:	fb0c f202 	mul.w	r2, ip, r2
 800ecc0:	9208      	str	r2, [sp, #32]
 800ecc2:	e7e0      	b.n	800ec86 <_strtod_l+0x22e>
 800ecc4:	2f10      	cmp	r7, #16
 800ecc6:	bfde      	ittt	le
 800ecc8:	9a06      	ldrle	r2, [sp, #24]
 800ecca:	fb0c f202 	mulle.w	r2, ip, r2
 800ecce:	9206      	strle	r2, [sp, #24]
 800ecd0:	e7d9      	b.n	800ec86 <_strtod_l+0x22e>
 800ecd2:	2b10      	cmp	r3, #16
 800ecd4:	bfdf      	itttt	le
 800ecd6:	9a06      	ldrle	r2, [sp, #24]
 800ecd8:	200a      	movle	r0, #10
 800ecda:	fb00 8202 	mlale	r2, r0, r2, r8
 800ecde:	9206      	strle	r2, [sp, #24]
 800ece0:	e7de      	b.n	800eca0 <_strtod_l+0x248>
 800ece2:	2301      	movs	r3, #1
 800ece4:	9304      	str	r3, [sp, #16]
 800ece6:	e777      	b.n	800ebd8 <_strtod_l+0x180>
 800ece8:	f04f 0e01 	mov.w	lr, #1
 800ecec:	1cb2      	adds	r2, r6, #2
 800ecee:	9217      	str	r2, [sp, #92]	; 0x5c
 800ecf0:	78b2      	ldrb	r2, [r6, #2]
 800ecf2:	e781      	b.n	800ebf8 <_strtod_l+0x1a0>
 800ecf4:	f04f 0e00 	mov.w	lr, #0
 800ecf8:	e7f8      	b.n	800ecec <_strtod_l+0x294>
 800ecfa:	bf00      	nop
 800ecfc:	08011664 	.word	0x08011664
 800ed00:	7ff00000 	.word	0x7ff00000
 800ed04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ed06:	f102 0c01 	add.w	ip, r2, #1
 800ed0a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800ed0e:	7852      	ldrb	r2, [r2, #1]
 800ed10:	2a30      	cmp	r2, #48	; 0x30
 800ed12:	d0f7      	beq.n	800ed04 <_strtod_l+0x2ac>
 800ed14:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800ed18:	f1bc 0f08 	cmp.w	ip, #8
 800ed1c:	f63f af73 	bhi.w	800ec06 <_strtod_l+0x1ae>
 800ed20:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800ed24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ed26:	920e      	str	r2, [sp, #56]	; 0x38
 800ed28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ed2a:	f102 0c01 	add.w	ip, r2, #1
 800ed2e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800ed32:	7852      	ldrb	r2, [r2, #1]
 800ed34:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800ed38:	f1b9 0f09 	cmp.w	r9, #9
 800ed3c:	d939      	bls.n	800edb2 <_strtod_l+0x35a>
 800ed3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ed40:	ebac 0c07 	sub.w	ip, ip, r7
 800ed44:	f1bc 0f08 	cmp.w	ip, #8
 800ed48:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800ed4c:	dc37      	bgt.n	800edbe <_strtod_l+0x366>
 800ed4e:	45e0      	cmp	r8, ip
 800ed50:	bfa8      	it	ge
 800ed52:	46e0      	movge	r8, ip
 800ed54:	f1be 0f00 	cmp.w	lr, #0
 800ed58:	d001      	beq.n	800ed5e <_strtod_l+0x306>
 800ed5a:	f1c8 0800 	rsb	r8, r8, #0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d151      	bne.n	800ee06 <_strtod_l+0x3ae>
 800ed62:	2800      	cmp	r0, #0
 800ed64:	f47f aeba 	bne.w	800eadc <_strtod_l+0x84>
 800ed68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f47f aeb6 	bne.w	800eadc <_strtod_l+0x84>
 800ed70:	9b04      	ldr	r3, [sp, #16]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f47f aed1 	bne.w	800eb1a <_strtod_l+0xc2>
 800ed78:	2a4e      	cmp	r2, #78	; 0x4e
 800ed7a:	d027      	beq.n	800edcc <_strtod_l+0x374>
 800ed7c:	dc21      	bgt.n	800edc2 <_strtod_l+0x36a>
 800ed7e:	2a49      	cmp	r2, #73	; 0x49
 800ed80:	f47f aecb 	bne.w	800eb1a <_strtod_l+0xc2>
 800ed84:	499a      	ldr	r1, [pc, #616]	; (800eff0 <_strtod_l+0x598>)
 800ed86:	a817      	add	r0, sp, #92	; 0x5c
 800ed88:	f000 fec4 	bl	800fb14 <__match>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	f43f aec4 	beq.w	800eb1a <_strtod_l+0xc2>
 800ed92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed94:	4997      	ldr	r1, [pc, #604]	; (800eff4 <_strtod_l+0x59c>)
 800ed96:	3b01      	subs	r3, #1
 800ed98:	a817      	add	r0, sp, #92	; 0x5c
 800ed9a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ed9c:	f000 feba 	bl	800fb14 <__match>
 800eda0:	b910      	cbnz	r0, 800eda8 <_strtod_l+0x350>
 800eda2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eda4:	3301      	adds	r3, #1
 800eda6:	9317      	str	r3, [sp, #92]	; 0x5c
 800eda8:	f8df b260 	ldr.w	fp, [pc, #608]	; 800f00c <_strtod_l+0x5b4>
 800edac:	f04f 0a00 	mov.w	sl, #0
 800edb0:	e694      	b.n	800eadc <_strtod_l+0x84>
 800edb2:	270a      	movs	r7, #10
 800edb4:	fb07 2808 	mla	r8, r7, r8, r2
 800edb8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800edbc:	e7b4      	b.n	800ed28 <_strtod_l+0x2d0>
 800edbe:	46e0      	mov	r8, ip
 800edc0:	e7c8      	b.n	800ed54 <_strtod_l+0x2fc>
 800edc2:	2a69      	cmp	r2, #105	; 0x69
 800edc4:	d0de      	beq.n	800ed84 <_strtod_l+0x32c>
 800edc6:	2a6e      	cmp	r2, #110	; 0x6e
 800edc8:	f47f aea7 	bne.w	800eb1a <_strtod_l+0xc2>
 800edcc:	498a      	ldr	r1, [pc, #552]	; (800eff8 <_strtod_l+0x5a0>)
 800edce:	a817      	add	r0, sp, #92	; 0x5c
 800edd0:	f000 fea0 	bl	800fb14 <__match>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	f43f aea0 	beq.w	800eb1a <_strtod_l+0xc2>
 800edda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	2b28      	cmp	r3, #40	; 0x28
 800ede0:	d10e      	bne.n	800ee00 <_strtod_l+0x3a8>
 800ede2:	aa1a      	add	r2, sp, #104	; 0x68
 800ede4:	4985      	ldr	r1, [pc, #532]	; (800effc <_strtod_l+0x5a4>)
 800ede6:	a817      	add	r0, sp, #92	; 0x5c
 800ede8:	f000 fea8 	bl	800fb3c <__hexnan>
 800edec:	2805      	cmp	r0, #5
 800edee:	d107      	bne.n	800ee00 <_strtod_l+0x3a8>
 800edf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edf2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800edf6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800edfa:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800edfe:	e66d      	b.n	800eadc <_strtod_l+0x84>
 800ee00:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800f010 <_strtod_l+0x5b8>
 800ee04:	e7d2      	b.n	800edac <_strtod_l+0x354>
 800ee06:	eddd 7a08 	vldr	s15, [sp, #32]
 800ee0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ee0e:	eba8 0201 	sub.w	r2, r8, r1
 800ee12:	2d00      	cmp	r5, #0
 800ee14:	bf08      	it	eq
 800ee16:	461d      	moveq	r5, r3
 800ee18:	2b10      	cmp	r3, #16
 800ee1a:	9204      	str	r2, [sp, #16]
 800ee1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee20:	461a      	mov	r2, r3
 800ee22:	bfa8      	it	ge
 800ee24:	2210      	movge	r2, #16
 800ee26:	2b09      	cmp	r3, #9
 800ee28:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ee2c:	dc14      	bgt.n	800ee58 <_strtod_l+0x400>
 800ee2e:	9904      	ldr	r1, [sp, #16]
 800ee30:	2900      	cmp	r1, #0
 800ee32:	f43f ae53 	beq.w	800eadc <_strtod_l+0x84>
 800ee36:	9904      	ldr	r1, [sp, #16]
 800ee38:	dd72      	ble.n	800ef20 <_strtod_l+0x4c8>
 800ee3a:	2916      	cmp	r1, #22
 800ee3c:	dc5a      	bgt.n	800eef4 <_strtod_l+0x49c>
 800ee3e:	4970      	ldr	r1, [pc, #448]	; (800f000 <_strtod_l+0x5a8>)
 800ee40:	9b04      	ldr	r3, [sp, #16]
 800ee42:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ee46:	ed91 7b00 	vldr	d7, [r1]
 800ee4a:	ec4b ab16 	vmov	d6, sl, fp
 800ee4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee52:	ec5b ab17 	vmov	sl, fp, d7
 800ee56:	e641      	b.n	800eadc <_strtod_l+0x84>
 800ee58:	4969      	ldr	r1, [pc, #420]	; (800f000 <_strtod_l+0x5a8>)
 800ee5a:	eddd 7a06 	vldr	s15, [sp, #24]
 800ee5e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ee62:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800ee66:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ee6a:	2b0f      	cmp	r3, #15
 800ee6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ee70:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ee74:	ec5b ab17 	vmov	sl, fp, d7
 800ee78:	ddd9      	ble.n	800ee2e <_strtod_l+0x3d6>
 800ee7a:	9904      	ldr	r1, [sp, #16]
 800ee7c:	1a9a      	subs	r2, r3, r2
 800ee7e:	440a      	add	r2, r1
 800ee80:	2a00      	cmp	r2, #0
 800ee82:	f340 8096 	ble.w	800efb2 <_strtod_l+0x55a>
 800ee86:	f012 000f 	ands.w	r0, r2, #15
 800ee8a:	d00a      	beq.n	800eea2 <_strtod_l+0x44a>
 800ee8c:	495c      	ldr	r1, [pc, #368]	; (800f000 <_strtod_l+0x5a8>)
 800ee8e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ee92:	ed91 7b00 	vldr	d7, [r1]
 800ee96:	ec4b ab16 	vmov	d6, sl, fp
 800ee9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee9e:	ec5b ab17 	vmov	sl, fp, d7
 800eea2:	f032 020f 	bics.w	r2, r2, #15
 800eea6:	d072      	beq.n	800ef8e <_strtod_l+0x536>
 800eea8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800eeac:	dd45      	ble.n	800ef3a <_strtod_l+0x4e2>
 800eeae:	2500      	movs	r5, #0
 800eeb0:	46a8      	mov	r8, r5
 800eeb2:	9506      	str	r5, [sp, #24]
 800eeb4:	46a9      	mov	r9, r5
 800eeb6:	2322      	movs	r3, #34	; 0x22
 800eeb8:	f8df b150 	ldr.w	fp, [pc, #336]	; 800f00c <_strtod_l+0x5b4>
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	f04f 0a00 	mov.w	sl, #0
 800eec2:	9b06      	ldr	r3, [sp, #24]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f43f ae09 	beq.w	800eadc <_strtod_l+0x84>
 800eeca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 ff0d 	bl	800fcec <_Bfree>
 800eed2:	4649      	mov	r1, r9
 800eed4:	4620      	mov	r0, r4
 800eed6:	f000 ff09 	bl	800fcec <_Bfree>
 800eeda:	4641      	mov	r1, r8
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 ff05 	bl	800fcec <_Bfree>
 800eee2:	9906      	ldr	r1, [sp, #24]
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 ff01 	bl	800fcec <_Bfree>
 800eeea:	4629      	mov	r1, r5
 800eeec:	4620      	mov	r0, r4
 800eeee:	f000 fefd 	bl	800fcec <_Bfree>
 800eef2:	e5f3      	b.n	800eadc <_strtod_l+0x84>
 800eef4:	9804      	ldr	r0, [sp, #16]
 800eef6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800eefa:	4281      	cmp	r1, r0
 800eefc:	dbbd      	blt.n	800ee7a <_strtod_l+0x422>
 800eefe:	4a40      	ldr	r2, [pc, #256]	; (800f000 <_strtod_l+0x5a8>)
 800ef00:	f1c3 030f 	rsb	r3, r3, #15
 800ef04:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ef08:	ed91 7b00 	vldr	d7, [r1]
 800ef0c:	ec4b ab16 	vmov	d6, sl, fp
 800ef10:	1ac3      	subs	r3, r0, r3
 800ef12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ef16:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef1a:	ed92 6b00 	vldr	d6, [r2]
 800ef1e:	e796      	b.n	800ee4e <_strtod_l+0x3f6>
 800ef20:	3116      	adds	r1, #22
 800ef22:	dbaa      	blt.n	800ee7a <_strtod_l+0x422>
 800ef24:	4936      	ldr	r1, [pc, #216]	; (800f000 <_strtod_l+0x5a8>)
 800ef26:	9b04      	ldr	r3, [sp, #16]
 800ef28:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800ef2c:	ed91 7b00 	vldr	d7, [r1]
 800ef30:	ec4b ab16 	vmov	d6, sl, fp
 800ef34:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ef38:	e78b      	b.n	800ee52 <_strtod_l+0x3fa>
 800ef3a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800ef3e:	2000      	movs	r0, #0
 800ef40:	4e30      	ldr	r6, [pc, #192]	; (800f004 <_strtod_l+0x5ac>)
 800ef42:	1112      	asrs	r2, r2, #4
 800ef44:	4601      	mov	r1, r0
 800ef46:	2a01      	cmp	r2, #1
 800ef48:	dc23      	bgt.n	800ef92 <_strtod_l+0x53a>
 800ef4a:	b108      	cbz	r0, 800ef50 <_strtod_l+0x4f8>
 800ef4c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800ef50:	4a2c      	ldr	r2, [pc, #176]	; (800f004 <_strtod_l+0x5ac>)
 800ef52:	482d      	ldr	r0, [pc, #180]	; (800f008 <_strtod_l+0x5b0>)
 800ef54:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800ef58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ef5c:	ed91 7b00 	vldr	d7, [r1]
 800ef60:	ec4b ab16 	vmov	d6, sl, fp
 800ef64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef68:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ef6c:	9907      	ldr	r1, [sp, #28]
 800ef6e:	4a27      	ldr	r2, [pc, #156]	; (800f00c <_strtod_l+0x5b4>)
 800ef70:	400a      	ands	r2, r1
 800ef72:	4282      	cmp	r2, r0
 800ef74:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800ef78:	d899      	bhi.n	800eeae <_strtod_l+0x456>
 800ef7a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ef7e:	4282      	cmp	r2, r0
 800ef80:	bf86      	itte	hi
 800ef82:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800f014 <_strtod_l+0x5bc>
 800ef86:	f04f 3aff 	movhi.w	sl, #4294967295
 800ef8a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800ef8e:	2700      	movs	r7, #0
 800ef90:	e070      	b.n	800f074 <_strtod_l+0x61c>
 800ef92:	07d7      	lsls	r7, r2, #31
 800ef94:	d50a      	bpl.n	800efac <_strtod_l+0x554>
 800ef96:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800ef9a:	ed90 7b00 	vldr	d7, [r0]
 800ef9e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800efa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800efa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800efaa:	2001      	movs	r0, #1
 800efac:	3101      	adds	r1, #1
 800efae:	1052      	asrs	r2, r2, #1
 800efb0:	e7c9      	b.n	800ef46 <_strtod_l+0x4ee>
 800efb2:	d0ec      	beq.n	800ef8e <_strtod_l+0x536>
 800efb4:	4252      	negs	r2, r2
 800efb6:	f012 000f 	ands.w	r0, r2, #15
 800efba:	d00a      	beq.n	800efd2 <_strtod_l+0x57a>
 800efbc:	4910      	ldr	r1, [pc, #64]	; (800f000 <_strtod_l+0x5a8>)
 800efbe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800efc2:	ed91 7b00 	vldr	d7, [r1]
 800efc6:	ec4b ab16 	vmov	d6, sl, fp
 800efca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800efce:	ec5b ab17 	vmov	sl, fp, d7
 800efd2:	1112      	asrs	r2, r2, #4
 800efd4:	d0db      	beq.n	800ef8e <_strtod_l+0x536>
 800efd6:	2a1f      	cmp	r2, #31
 800efd8:	dd1e      	ble.n	800f018 <_strtod_l+0x5c0>
 800efda:	2500      	movs	r5, #0
 800efdc:	46a8      	mov	r8, r5
 800efde:	9506      	str	r5, [sp, #24]
 800efe0:	46a9      	mov	r9, r5
 800efe2:	2322      	movs	r3, #34	; 0x22
 800efe4:	f04f 0a00 	mov.w	sl, #0
 800efe8:	f04f 0b00 	mov.w	fp, #0
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	e768      	b.n	800eec2 <_strtod_l+0x46a>
 800eff0:	08011658 	.word	0x08011658
 800eff4:	0801165b 	.word	0x0801165b
 800eff8:	08011661 	.word	0x08011661
 800effc:	08011678 	.word	0x08011678
 800f000:	080116f0 	.word	0x080116f0
 800f004:	080116c8 	.word	0x080116c8
 800f008:	7ca00000 	.word	0x7ca00000
 800f00c:	7ff00000 	.word	0x7ff00000
 800f010:	fff80000 	.word	0xfff80000
 800f014:	7fefffff 	.word	0x7fefffff
 800f018:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800f01c:	f012 0710 	ands.w	r7, r2, #16
 800f020:	49ab      	ldr	r1, [pc, #684]	; (800f2d0 <_strtod_l+0x878>)
 800f022:	bf18      	it	ne
 800f024:	276a      	movne	r7, #106	; 0x6a
 800f026:	2000      	movs	r0, #0
 800f028:	2a00      	cmp	r2, #0
 800f02a:	f300 8113 	bgt.w	800f254 <_strtod_l+0x7fc>
 800f02e:	b108      	cbz	r0, 800f034 <_strtod_l+0x5dc>
 800f030:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800f034:	b1bf      	cbz	r7, 800f066 <_strtod_l+0x60e>
 800f036:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f03a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800f03e:	2a00      	cmp	r2, #0
 800f040:	4659      	mov	r1, fp
 800f042:	dd10      	ble.n	800f066 <_strtod_l+0x60e>
 800f044:	2a1f      	cmp	r2, #31
 800f046:	f340 8113 	ble.w	800f270 <_strtod_l+0x818>
 800f04a:	2a34      	cmp	r2, #52	; 0x34
 800f04c:	bfde      	ittt	le
 800f04e:	3a20      	suble	r2, #32
 800f050:	f04f 30ff 	movle.w	r0, #4294967295
 800f054:	fa00 f202 	lslle.w	r2, r0, r2
 800f058:	f04f 0a00 	mov.w	sl, #0
 800f05c:	bfcc      	ite	gt
 800f05e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f062:	ea02 0b01 	andle.w	fp, r2, r1
 800f066:	ec4b ab17 	vmov	d7, sl, fp
 800f06a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	d0b2      	beq.n	800efda <_strtod_l+0x582>
 800f074:	9a08      	ldr	r2, [sp, #32]
 800f076:	9200      	str	r2, [sp, #0]
 800f078:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f07a:	462a      	mov	r2, r5
 800f07c:	4620      	mov	r0, r4
 800f07e:	f000 fe87 	bl	800fd90 <__s2b>
 800f082:	9006      	str	r0, [sp, #24]
 800f084:	2800      	cmp	r0, #0
 800f086:	f43f af12 	beq.w	800eeae <_strtod_l+0x456>
 800f08a:	9a04      	ldr	r2, [sp, #16]
 800f08c:	9b04      	ldr	r3, [sp, #16]
 800f08e:	2a00      	cmp	r2, #0
 800f090:	f1c3 0300 	rsb	r3, r3, #0
 800f094:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800f2b8 <_strtod_l+0x860>
 800f098:	bfa8      	it	ge
 800f09a:	2300      	movge	r3, #0
 800f09c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800f2c0 <_strtod_l+0x868>
 800f0a0:	ed9f bb89 	vldr	d11, [pc, #548]	; 800f2c8 <_strtod_l+0x870>
 800f0a4:	930e      	str	r3, [sp, #56]	; 0x38
 800f0a6:	2500      	movs	r5, #0
 800f0a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f0ac:	9310      	str	r3, [sp, #64]	; 0x40
 800f0ae:	46a8      	mov	r8, r5
 800f0b0:	9b06      	ldr	r3, [sp, #24]
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	6859      	ldr	r1, [r3, #4]
 800f0b6:	f000 fde5 	bl	800fc84 <_Balloc>
 800f0ba:	4681      	mov	r9, r0
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	f43f aefa 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f0c2:	9b06      	ldr	r3, [sp, #24]
 800f0c4:	691a      	ldr	r2, [r3, #16]
 800f0c6:	3202      	adds	r2, #2
 800f0c8:	f103 010c 	add.w	r1, r3, #12
 800f0cc:	0092      	lsls	r2, r2, #2
 800f0ce:	300c      	adds	r0, #12
 800f0d0:	f7ff fc92 	bl	800e9f8 <memcpy>
 800f0d4:	aa1a      	add	r2, sp, #104	; 0x68
 800f0d6:	a919      	add	r1, sp, #100	; 0x64
 800f0d8:	ec4b ab10 	vmov	d0, sl, fp
 800f0dc:	4620      	mov	r0, r4
 800f0de:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f0e2:	f001 f911 	bl	8010308 <__d2b>
 800f0e6:	9018      	str	r0, [sp, #96]	; 0x60
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	f43f aee4 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f0ee:	2101      	movs	r1, #1
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 fed9 	bl	800fea8 <__i2b>
 800f0f6:	4680      	mov	r8, r0
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	f43f aedc 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f0fe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800f100:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f102:	2e00      	cmp	r6, #0
 800f104:	bfb1      	iteee	lt
 800f106:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800f108:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f10a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800f10c:	18f3      	addge	r3, r6, r3
 800f10e:	bfba      	itte	lt
 800f110:	1b98      	sublt	r0, r3, r6
 800f112:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f114:	9308      	strge	r3, [sp, #32]
 800f116:	eba6 0607 	sub.w	r6, r6, r7
 800f11a:	bfb8      	it	lt
 800f11c:	9308      	strlt	r3, [sp, #32]
 800f11e:	4416      	add	r6, r2
 800f120:	4b6c      	ldr	r3, [pc, #432]	; (800f2d4 <_strtod_l+0x87c>)
 800f122:	3e01      	subs	r6, #1
 800f124:	429e      	cmp	r6, r3
 800f126:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f12a:	f280 80b4 	bge.w	800f296 <_strtod_l+0x83e>
 800f12e:	1b9b      	subs	r3, r3, r6
 800f130:	2b1f      	cmp	r3, #31
 800f132:	eba2 0203 	sub.w	r2, r2, r3
 800f136:	f04f 0101 	mov.w	r1, #1
 800f13a:	f300 80a0 	bgt.w	800f27e <_strtod_l+0x826>
 800f13e:	fa01 f303 	lsl.w	r3, r1, r3
 800f142:	9311      	str	r3, [sp, #68]	; 0x44
 800f144:	2300      	movs	r3, #0
 800f146:	930f      	str	r3, [sp, #60]	; 0x3c
 800f148:	9b08      	ldr	r3, [sp, #32]
 800f14a:	4413      	add	r3, r2
 800f14c:	4402      	add	r2, r0
 800f14e:	18be      	adds	r6, r7, r2
 800f150:	9a08      	ldr	r2, [sp, #32]
 800f152:	429a      	cmp	r2, r3
 800f154:	bfa8      	it	ge
 800f156:	461a      	movge	r2, r3
 800f158:	42b2      	cmp	r2, r6
 800f15a:	bfa8      	it	ge
 800f15c:	4632      	movge	r2, r6
 800f15e:	2a00      	cmp	r2, #0
 800f160:	dd04      	ble.n	800f16c <_strtod_l+0x714>
 800f162:	9908      	ldr	r1, [sp, #32]
 800f164:	1a9b      	subs	r3, r3, r2
 800f166:	1ab6      	subs	r6, r6, r2
 800f168:	1a8a      	subs	r2, r1, r2
 800f16a:	9208      	str	r2, [sp, #32]
 800f16c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f16e:	b1c2      	cbz	r2, 800f1a2 <_strtod_l+0x74a>
 800f170:	4641      	mov	r1, r8
 800f172:	4620      	mov	r0, r4
 800f174:	9315      	str	r3, [sp, #84]	; 0x54
 800f176:	f000 ff37 	bl	800ffe8 <__pow5mult>
 800f17a:	4680      	mov	r8, r0
 800f17c:	2800      	cmp	r0, #0
 800f17e:	f43f ae9a 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f182:	4601      	mov	r1, r0
 800f184:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f186:	4620      	mov	r0, r4
 800f188:	f000 fe97 	bl	800feba <__multiply>
 800f18c:	900c      	str	r0, [sp, #48]	; 0x30
 800f18e:	2800      	cmp	r0, #0
 800f190:	f43f ae91 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f194:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f196:	4620      	mov	r0, r4
 800f198:	f000 fda8 	bl	800fcec <_Bfree>
 800f19c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1a0:	9218      	str	r2, [sp, #96]	; 0x60
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	dc7c      	bgt.n	800f2a0 <_strtod_l+0x848>
 800f1a6:	9b04      	ldr	r3, [sp, #16]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	dd08      	ble.n	800f1be <_strtod_l+0x766>
 800f1ac:	4649      	mov	r1, r9
 800f1ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 ff19 	bl	800ffe8 <__pow5mult>
 800f1b6:	4681      	mov	r9, r0
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	f43f ae7c 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f1be:	2e00      	cmp	r6, #0
 800f1c0:	dd08      	ble.n	800f1d4 <_strtod_l+0x77c>
 800f1c2:	4649      	mov	r1, r9
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 ff5c 	bl	8010084 <__lshift>
 800f1cc:	4681      	mov	r9, r0
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	f43f ae71 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f1d4:	9b08      	ldr	r3, [sp, #32]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	dd08      	ble.n	800f1ec <_strtod_l+0x794>
 800f1da:	4641      	mov	r1, r8
 800f1dc:	461a      	mov	r2, r3
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 ff50 	bl	8010084 <__lshift>
 800f1e4:	4680      	mov	r8, r0
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	f43f ae65 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f1ec:	464a      	mov	r2, r9
 800f1ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 ffb5 	bl	8010160 <__mdiff>
 800f1f6:	4605      	mov	r5, r0
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	f43f ae5c 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f1fe:	68c3      	ldr	r3, [r0, #12]
 800f200:	930c      	str	r3, [sp, #48]	; 0x30
 800f202:	2300      	movs	r3, #0
 800f204:	60c3      	str	r3, [r0, #12]
 800f206:	4641      	mov	r1, r8
 800f208:	f000 ff90 	bl	801012c <__mcmp>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	da63      	bge.n	800f2d8 <_strtod_l+0x880>
 800f210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f212:	b9e3      	cbnz	r3, 800f24e <_strtod_l+0x7f6>
 800f214:	f1ba 0f00 	cmp.w	sl, #0
 800f218:	d119      	bne.n	800f24e <_strtod_l+0x7f6>
 800f21a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f21e:	b9b3      	cbnz	r3, 800f24e <_strtod_l+0x7f6>
 800f220:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f224:	0d1b      	lsrs	r3, r3, #20
 800f226:	051b      	lsls	r3, r3, #20
 800f228:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f22c:	d90f      	bls.n	800f24e <_strtod_l+0x7f6>
 800f22e:	696b      	ldr	r3, [r5, #20]
 800f230:	b913      	cbnz	r3, 800f238 <_strtod_l+0x7e0>
 800f232:	692b      	ldr	r3, [r5, #16]
 800f234:	2b01      	cmp	r3, #1
 800f236:	dd0a      	ble.n	800f24e <_strtod_l+0x7f6>
 800f238:	4629      	mov	r1, r5
 800f23a:	2201      	movs	r2, #1
 800f23c:	4620      	mov	r0, r4
 800f23e:	f000 ff21 	bl	8010084 <__lshift>
 800f242:	4641      	mov	r1, r8
 800f244:	4605      	mov	r5, r0
 800f246:	f000 ff71 	bl	801012c <__mcmp>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	dc75      	bgt.n	800f33a <_strtod_l+0x8e2>
 800f24e:	2f00      	cmp	r7, #0
 800f250:	d17f      	bne.n	800f352 <_strtod_l+0x8fa>
 800f252:	e63a      	b.n	800eeca <_strtod_l+0x472>
 800f254:	07d6      	lsls	r6, r2, #31
 800f256:	d508      	bpl.n	800f26a <_strtod_l+0x812>
 800f258:	ed9d 6b06 	vldr	d6, [sp, #24]
 800f25c:	ed91 7b00 	vldr	d7, [r1]
 800f260:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f264:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f268:	2001      	movs	r0, #1
 800f26a:	1052      	asrs	r2, r2, #1
 800f26c:	3108      	adds	r1, #8
 800f26e:	e6db      	b.n	800f028 <_strtod_l+0x5d0>
 800f270:	f04f 31ff 	mov.w	r1, #4294967295
 800f274:	fa01 f202 	lsl.w	r2, r1, r2
 800f278:	ea02 0a0a 	and.w	sl, r2, sl
 800f27c:	e6f3      	b.n	800f066 <_strtod_l+0x60e>
 800f27e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f282:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f286:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f28a:	36e2      	adds	r6, #226	; 0xe2
 800f28c:	fa01 f306 	lsl.w	r3, r1, r6
 800f290:	930f      	str	r3, [sp, #60]	; 0x3c
 800f292:	9111      	str	r1, [sp, #68]	; 0x44
 800f294:	e758      	b.n	800f148 <_strtod_l+0x6f0>
 800f296:	2300      	movs	r3, #0
 800f298:	930f      	str	r3, [sp, #60]	; 0x3c
 800f29a:	2301      	movs	r3, #1
 800f29c:	9311      	str	r3, [sp, #68]	; 0x44
 800f29e:	e753      	b.n	800f148 <_strtod_l+0x6f0>
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f000 feed 	bl	8010084 <__lshift>
 800f2aa:	9018      	str	r0, [sp, #96]	; 0x60
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f47f af7a 	bne.w	800f1a6 <_strtod_l+0x74e>
 800f2b2:	e600      	b.n	800eeb6 <_strtod_l+0x45e>
 800f2b4:	f3af 8000 	nop.w
 800f2b8:	94a03595 	.word	0x94a03595
 800f2bc:	3fdfffff 	.word	0x3fdfffff
 800f2c0:	35afe535 	.word	0x35afe535
 800f2c4:	3fe00000 	.word	0x3fe00000
 800f2c8:	94a03595 	.word	0x94a03595
 800f2cc:	3fcfffff 	.word	0x3fcfffff
 800f2d0:	08011690 	.word	0x08011690
 800f2d4:	fffffc02 	.word	0xfffffc02
 800f2d8:	f8cd b020 	str.w	fp, [sp, #32]
 800f2dc:	f040 8085 	bne.w	800f3ea <_strtod_l+0x992>
 800f2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2e6:	b322      	cbz	r2, 800f332 <_strtod_l+0x8da>
 800f2e8:	4ab7      	ldr	r2, [pc, #732]	; (800f5c8 <_strtod_l+0xb70>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d154      	bne.n	800f398 <_strtod_l+0x940>
 800f2ee:	4651      	mov	r1, sl
 800f2f0:	b1e7      	cbz	r7, 800f32c <_strtod_l+0x8d4>
 800f2f2:	4bb6      	ldr	r3, [pc, #728]	; (800f5cc <_strtod_l+0xb74>)
 800f2f4:	465a      	mov	r2, fp
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f300:	d803      	bhi.n	800f30a <_strtod_l+0x8b2>
 800f302:	0d1b      	lsrs	r3, r3, #20
 800f304:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f308:	409a      	lsls	r2, r3
 800f30a:	4291      	cmp	r1, r2
 800f30c:	d144      	bne.n	800f398 <_strtod_l+0x940>
 800f30e:	4bb0      	ldr	r3, [pc, #704]	; (800f5d0 <_strtod_l+0xb78>)
 800f310:	9a08      	ldr	r2, [sp, #32]
 800f312:	429a      	cmp	r2, r3
 800f314:	d102      	bne.n	800f31c <_strtod_l+0x8c4>
 800f316:	3101      	adds	r1, #1
 800f318:	f43f adcd 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f31c:	4bab      	ldr	r3, [pc, #684]	; (800f5cc <_strtod_l+0xb74>)
 800f31e:	9a08      	ldr	r2, [sp, #32]
 800f320:	401a      	ands	r2, r3
 800f322:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800f326:	f04f 0a00 	mov.w	sl, #0
 800f32a:	e790      	b.n	800f24e <_strtod_l+0x7f6>
 800f32c:	f04f 32ff 	mov.w	r2, #4294967295
 800f330:	e7eb      	b.n	800f30a <_strtod_l+0x8b2>
 800f332:	bb8b      	cbnz	r3, 800f398 <_strtod_l+0x940>
 800f334:	f1ba 0f00 	cmp.w	sl, #0
 800f338:	d12e      	bne.n	800f398 <_strtod_l+0x940>
 800f33a:	465b      	mov	r3, fp
 800f33c:	4aa3      	ldr	r2, [pc, #652]	; (800f5cc <_strtod_l+0xb74>)
 800f33e:	b30f      	cbz	r7, 800f384 <_strtod_l+0x92c>
 800f340:	ea02 010b 	and.w	r1, r2, fp
 800f344:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f348:	dc1c      	bgt.n	800f384 <_strtod_l+0x92c>
 800f34a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f34e:	f77f ae48 	ble.w	800efe2 <_strtod_l+0x58a>
 800f352:	4aa0      	ldr	r2, [pc, #640]	; (800f5d4 <_strtod_l+0xb7c>)
 800f354:	2300      	movs	r3, #0
 800f356:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800f35a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800f35e:	ec4b ab17 	vmov	d7, sl, fp
 800f362:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f366:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f36a:	9b05      	ldr	r3, [sp, #20]
 800f36c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f370:	2b00      	cmp	r3, #0
 800f372:	f47f adaa 	bne.w	800eeca <_strtod_l+0x472>
 800f376:	9b04      	ldr	r3, [sp, #16]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f47f ada6 	bne.w	800eeca <_strtod_l+0x472>
 800f37e:	2322      	movs	r3, #34	; 0x22
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	e5a2      	b.n	800eeca <_strtod_l+0x472>
 800f384:	4013      	ands	r3, r2
 800f386:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f38a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f38e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f392:	f04f 3aff 	mov.w	sl, #4294967295
 800f396:	e75a      	b.n	800f24e <_strtod_l+0x7f6>
 800f398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f39a:	b18b      	cbz	r3, 800f3c0 <_strtod_l+0x968>
 800f39c:	9a08      	ldr	r2, [sp, #32]
 800f39e:	4213      	tst	r3, r2
 800f3a0:	f43f af55 	beq.w	800f24e <_strtod_l+0x7f6>
 800f3a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3a6:	463a      	mov	r2, r7
 800f3a8:	4650      	mov	r0, sl
 800f3aa:	4659      	mov	r1, fp
 800f3ac:	b163      	cbz	r3, 800f3c8 <_strtod_l+0x970>
 800f3ae:	f7ff fb36 	bl	800ea1e <sulp>
 800f3b2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800f3b6:	ee37 7b00 	vadd.f64	d7, d7, d0
 800f3ba:	ec5b ab17 	vmov	sl, fp, d7
 800f3be:	e746      	b.n	800f24e <_strtod_l+0x7f6>
 800f3c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3c2:	ea13 0f0a 	tst.w	r3, sl
 800f3c6:	e7eb      	b.n	800f3a0 <_strtod_l+0x948>
 800f3c8:	f7ff fb29 	bl	800ea1e <sulp>
 800f3cc:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800f3d0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800f3d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f3d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f3e4:	f43f adfd 	beq.w	800efe2 <_strtod_l+0x58a>
 800f3e8:	e731      	b.n	800f24e <_strtod_l+0x7f6>
 800f3ea:	4641      	mov	r1, r8
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f000 ffda 	bl	80103a6 <__ratio>
 800f3f2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f3f6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fe:	d869      	bhi.n	800f4d4 <_strtod_l+0xa7c>
 800f400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f402:	2b00      	cmp	r3, #0
 800f404:	d045      	beq.n	800f492 <_strtod_l+0xa3a>
 800f406:	4b74      	ldr	r3, [pc, #464]	; (800f5d8 <_strtod_l+0xb80>)
 800f408:	2200      	movs	r2, #0
 800f40a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800f40e:	9808      	ldr	r0, [sp, #32]
 800f410:	496e      	ldr	r1, [pc, #440]	; (800f5cc <_strtod_l+0xb74>)
 800f412:	ea00 0601 	and.w	r6, r0, r1
 800f416:	4871      	ldr	r0, [pc, #452]	; (800f5dc <_strtod_l+0xb84>)
 800f418:	4286      	cmp	r6, r0
 800f41a:	f040 8089 	bne.w	800f530 <_strtod_l+0xad8>
 800f41e:	910f      	str	r1, [sp, #60]	; 0x3c
 800f420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f424:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800f428:	9908      	ldr	r1, [sp, #32]
 800f42a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800f42e:	ec4b ab10 	vmov	d0, sl, fp
 800f432:	ec43 2b1c 	vmov	d12, r2, r3
 800f436:	f000 fef1 	bl	801021c <__ulp>
 800f43a:	ec4b ab1d 	vmov	d13, sl, fp
 800f43e:	eeac db00 	vfma.f64	d13, d12, d0
 800f442:	ed8d db08 	vstr	d13, [sp, #32]
 800f446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f448:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f44a:	4a65      	ldr	r2, [pc, #404]	; (800f5e0 <_strtod_l+0xb88>)
 800f44c:	4019      	ands	r1, r3
 800f44e:	4291      	cmp	r1, r2
 800f450:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800f454:	d948      	bls.n	800f4e8 <_strtod_l+0xa90>
 800f456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f458:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d103      	bne.n	800f468 <_strtod_l+0xa10>
 800f460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f462:	3301      	adds	r3, #1
 800f464:	f43f ad27 	beq.w	800eeb6 <_strtod_l+0x45e>
 800f468:	f8df b164 	ldr.w	fp, [pc, #356]	; 800f5d0 <_strtod_l+0xb78>
 800f46c:	f04f 3aff 	mov.w	sl, #4294967295
 800f470:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f472:	4620      	mov	r0, r4
 800f474:	f000 fc3a 	bl	800fcec <_Bfree>
 800f478:	4649      	mov	r1, r9
 800f47a:	4620      	mov	r0, r4
 800f47c:	f000 fc36 	bl	800fcec <_Bfree>
 800f480:	4641      	mov	r1, r8
 800f482:	4620      	mov	r0, r4
 800f484:	f000 fc32 	bl	800fcec <_Bfree>
 800f488:	4629      	mov	r1, r5
 800f48a:	4620      	mov	r0, r4
 800f48c:	f000 fc2e 	bl	800fcec <_Bfree>
 800f490:	e60e      	b.n	800f0b0 <_strtod_l+0x658>
 800f492:	f1ba 0f00 	cmp.w	sl, #0
 800f496:	d113      	bne.n	800f4c0 <_strtod_l+0xa68>
 800f498:	9b08      	ldr	r3, [sp, #32]
 800f49a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f49e:	b9b3      	cbnz	r3, 800f4ce <_strtod_l+0xa76>
 800f4a0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f4a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ac:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800f4b0:	d401      	bmi.n	800f4b6 <_strtod_l+0xa5e>
 800f4b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f4b6:	eeb1 7b48 	vneg.f64	d7, d8
 800f4ba:	ec53 2b17 	vmov	r2, r3, d7
 800f4be:	e7a6      	b.n	800f40e <_strtod_l+0x9b6>
 800f4c0:	f1ba 0f01 	cmp.w	sl, #1
 800f4c4:	d103      	bne.n	800f4ce <_strtod_l+0xa76>
 800f4c6:	9b08      	ldr	r3, [sp, #32]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f43f ad8a 	beq.w	800efe2 <_strtod_l+0x58a>
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	4b44      	ldr	r3, [pc, #272]	; (800f5e4 <_strtod_l+0xb8c>)
 800f4d2:	e79a      	b.n	800f40a <_strtod_l+0x9b2>
 800f4d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4d6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800f4da:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d0e9      	beq.n	800f4b6 <_strtod_l+0xa5e>
 800f4e2:	ec53 2b18 	vmov	r2, r3, d8
 800f4e6:	e792      	b.n	800f40e <_strtod_l+0x9b6>
 800f4e8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f4ec:	2f00      	cmp	r7, #0
 800f4ee:	d1bf      	bne.n	800f470 <_strtod_l+0xa18>
 800f4f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f4f4:	0d1b      	lsrs	r3, r3, #20
 800f4f6:	051b      	lsls	r3, r3, #20
 800f4f8:	429e      	cmp	r6, r3
 800f4fa:	d1b9      	bne.n	800f470 <_strtod_l+0xa18>
 800f4fc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800f500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f502:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800f506:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f50a:	b92b      	cbnz	r3, 800f518 <_strtod_l+0xac0>
 800f50c:	f1ba 0f00 	cmp.w	sl, #0
 800f510:	d102      	bne.n	800f518 <_strtod_l+0xac0>
 800f512:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800f516:	b3d2      	cbz	r2, 800f58e <_strtod_l+0xb36>
 800f518:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800f51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f520:	f53f acd3 	bmi.w	800eeca <_strtod_l+0x472>
 800f524:	eeb4 8bca 	vcmpe.f64	d8, d10
 800f528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52c:	dda0      	ble.n	800f470 <_strtod_l+0xa18>
 800f52e:	e4cc      	b.n	800eeca <_strtod_l+0x472>
 800f530:	b1ef      	cbz	r7, 800f56e <_strtod_l+0xb16>
 800f532:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800f536:	d81a      	bhi.n	800f56e <_strtod_l+0xb16>
 800f538:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f5c0 <_strtod_l+0xb68>
 800f53c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	d810      	bhi.n	800f568 <_strtod_l+0xb10>
 800f546:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800f54a:	ee17 3a90 	vmov	r3, s15
 800f54e:	2b00      	cmp	r3, #0
 800f550:	bf08      	it	eq
 800f552:	2301      	moveq	r3, #1
 800f554:	ee07 3a90 	vmov	s15, r3
 800f558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f55a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800f55e:	b99b      	cbnz	r3, 800f588 <_strtod_l+0xb30>
 800f560:	eeb1 7b48 	vneg.f64	d7, d8
 800f564:	ec53 2b17 	vmov	r2, r3, d7
 800f568:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800f56c:	1b8b      	subs	r3, r1, r6
 800f56e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f572:	ec43 2b1c 	vmov	d12, r2, r3
 800f576:	f000 fe51 	bl	801021c <__ulp>
 800f57a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800f57e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800f582:	ec5b ab17 	vmov	sl, fp, d7
 800f586:	e7b1      	b.n	800f4ec <_strtod_l+0xa94>
 800f588:	ec53 2b18 	vmov	r2, r3, d8
 800f58c:	e7ec      	b.n	800f568 <_strtod_l+0xb10>
 800f58e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f596:	f57f af6b 	bpl.w	800f470 <_strtod_l+0xa18>
 800f59a:	e496      	b.n	800eeca <_strtod_l+0x472>
 800f59c:	2300      	movs	r3, #0
 800f59e:	930d      	str	r3, [sp, #52]	; 0x34
 800f5a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5a4:	6013      	str	r3, [r2, #0]
 800f5a6:	f7ff ba9d 	b.w	800eae4 <_strtod_l+0x8c>
 800f5aa:	2a65      	cmp	r2, #101	; 0x65
 800f5ac:	f04f 0100 	mov.w	r1, #0
 800f5b0:	f43f ab97 	beq.w	800ece2 <_strtod_l+0x28a>
 800f5b4:	2701      	movs	r7, #1
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	9704      	str	r7, [sp, #16]
 800f5ba:	f7ff bb0a 	b.w	800ebd2 <_strtod_l+0x17a>
 800f5be:	bf00      	nop
 800f5c0:	ffc00000 	.word	0xffc00000
 800f5c4:	41dfffff 	.word	0x41dfffff
 800f5c8:	000fffff 	.word	0x000fffff
 800f5cc:	7ff00000 	.word	0x7ff00000
 800f5d0:	7fefffff 	.word	0x7fefffff
 800f5d4:	39500000 	.word	0x39500000
 800f5d8:	3ff00000 	.word	0x3ff00000
 800f5dc:	7fe00000 	.word	0x7fe00000
 800f5e0:	7c9fffff 	.word	0x7c9fffff
 800f5e4:	bff00000 	.word	0xbff00000

0800f5e8 <strtod>:
 800f5e8:	4b07      	ldr	r3, [pc, #28]	; (800f608 <strtod+0x20>)
 800f5ea:	4a08      	ldr	r2, [pc, #32]	; (800f60c <strtod+0x24>)
 800f5ec:	b410      	push	{r4}
 800f5ee:	681c      	ldr	r4, [r3, #0]
 800f5f0:	6a23      	ldr	r3, [r4, #32]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	bf08      	it	eq
 800f5f6:	4613      	moveq	r3, r2
 800f5f8:	460a      	mov	r2, r1
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f602:	f7ff ba29 	b.w	800ea58 <_strtod_l>
 800f606:	bf00      	nop
 800f608:	24000110 	.word	0x24000110
 800f60c:	24000174 	.word	0x24000174

0800f610 <rshift>:
 800f610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f612:	6906      	ldr	r6, [r0, #16]
 800f614:	114b      	asrs	r3, r1, #5
 800f616:	429e      	cmp	r6, r3
 800f618:	f100 0414 	add.w	r4, r0, #20
 800f61c:	dd30      	ble.n	800f680 <rshift+0x70>
 800f61e:	f011 011f 	ands.w	r1, r1, #31
 800f622:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f626:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f62a:	d108      	bne.n	800f63e <rshift+0x2e>
 800f62c:	4621      	mov	r1, r4
 800f62e:	42b2      	cmp	r2, r6
 800f630:	460b      	mov	r3, r1
 800f632:	d211      	bcs.n	800f658 <rshift+0x48>
 800f634:	f852 3b04 	ldr.w	r3, [r2], #4
 800f638:	f841 3b04 	str.w	r3, [r1], #4
 800f63c:	e7f7      	b.n	800f62e <rshift+0x1e>
 800f63e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f642:	f1c1 0c20 	rsb	ip, r1, #32
 800f646:	40cd      	lsrs	r5, r1
 800f648:	3204      	adds	r2, #4
 800f64a:	4623      	mov	r3, r4
 800f64c:	42b2      	cmp	r2, r6
 800f64e:	4617      	mov	r7, r2
 800f650:	d30c      	bcc.n	800f66c <rshift+0x5c>
 800f652:	601d      	str	r5, [r3, #0]
 800f654:	b105      	cbz	r5, 800f658 <rshift+0x48>
 800f656:	3304      	adds	r3, #4
 800f658:	1b1a      	subs	r2, r3, r4
 800f65a:	42a3      	cmp	r3, r4
 800f65c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f660:	bf08      	it	eq
 800f662:	2300      	moveq	r3, #0
 800f664:	6102      	str	r2, [r0, #16]
 800f666:	bf08      	it	eq
 800f668:	6143      	streq	r3, [r0, #20]
 800f66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f66c:	683f      	ldr	r7, [r7, #0]
 800f66e:	fa07 f70c 	lsl.w	r7, r7, ip
 800f672:	433d      	orrs	r5, r7
 800f674:	f843 5b04 	str.w	r5, [r3], #4
 800f678:	f852 5b04 	ldr.w	r5, [r2], #4
 800f67c:	40cd      	lsrs	r5, r1
 800f67e:	e7e5      	b.n	800f64c <rshift+0x3c>
 800f680:	4623      	mov	r3, r4
 800f682:	e7e9      	b.n	800f658 <rshift+0x48>

0800f684 <__hexdig_fun>:
 800f684:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f688:	2b09      	cmp	r3, #9
 800f68a:	d802      	bhi.n	800f692 <__hexdig_fun+0xe>
 800f68c:	3820      	subs	r0, #32
 800f68e:	b2c0      	uxtb	r0, r0
 800f690:	4770      	bx	lr
 800f692:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f696:	2b05      	cmp	r3, #5
 800f698:	d801      	bhi.n	800f69e <__hexdig_fun+0x1a>
 800f69a:	3847      	subs	r0, #71	; 0x47
 800f69c:	e7f7      	b.n	800f68e <__hexdig_fun+0xa>
 800f69e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f6a2:	2b05      	cmp	r3, #5
 800f6a4:	d801      	bhi.n	800f6aa <__hexdig_fun+0x26>
 800f6a6:	3827      	subs	r0, #39	; 0x27
 800f6a8:	e7f1      	b.n	800f68e <__hexdig_fun+0xa>
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	4770      	bx	lr

0800f6ae <__gethex>:
 800f6ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b2:	b08b      	sub	sp, #44	; 0x2c
 800f6b4:	468a      	mov	sl, r1
 800f6b6:	9002      	str	r0, [sp, #8]
 800f6b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f6ba:	9306      	str	r3, [sp, #24]
 800f6bc:	4690      	mov	r8, r2
 800f6be:	f000 facd 	bl	800fc5c <__localeconv_l>
 800f6c2:	6803      	ldr	r3, [r0, #0]
 800f6c4:	9303      	str	r3, [sp, #12]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f0 fe06 	bl	80002d8 <strlen>
 800f6cc:	9b03      	ldr	r3, [sp, #12]
 800f6ce:	9001      	str	r0, [sp, #4]
 800f6d0:	4403      	add	r3, r0
 800f6d2:	f04f 0b00 	mov.w	fp, #0
 800f6d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f6da:	9307      	str	r3, [sp, #28]
 800f6dc:	f8da 3000 	ldr.w	r3, [sl]
 800f6e0:	3302      	adds	r3, #2
 800f6e2:	461f      	mov	r7, r3
 800f6e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f6e8:	2830      	cmp	r0, #48	; 0x30
 800f6ea:	d06c      	beq.n	800f7c6 <__gethex+0x118>
 800f6ec:	f7ff ffca 	bl	800f684 <__hexdig_fun>
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d16a      	bne.n	800f7cc <__gethex+0x11e>
 800f6f6:	9a01      	ldr	r2, [sp, #4]
 800f6f8:	9903      	ldr	r1, [sp, #12]
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	f000 ff3a 	bl	8010574 <strncmp>
 800f700:	2800      	cmp	r0, #0
 800f702:	d166      	bne.n	800f7d2 <__gethex+0x124>
 800f704:	9b01      	ldr	r3, [sp, #4]
 800f706:	5cf8      	ldrb	r0, [r7, r3]
 800f708:	18fe      	adds	r6, r7, r3
 800f70a:	f7ff ffbb 	bl	800f684 <__hexdig_fun>
 800f70e:	2800      	cmp	r0, #0
 800f710:	d062      	beq.n	800f7d8 <__gethex+0x12a>
 800f712:	4633      	mov	r3, r6
 800f714:	7818      	ldrb	r0, [r3, #0]
 800f716:	2830      	cmp	r0, #48	; 0x30
 800f718:	461f      	mov	r7, r3
 800f71a:	f103 0301 	add.w	r3, r3, #1
 800f71e:	d0f9      	beq.n	800f714 <__gethex+0x66>
 800f720:	f7ff ffb0 	bl	800f684 <__hexdig_fun>
 800f724:	fab0 f580 	clz	r5, r0
 800f728:	096d      	lsrs	r5, r5, #5
 800f72a:	4634      	mov	r4, r6
 800f72c:	f04f 0b01 	mov.w	fp, #1
 800f730:	463a      	mov	r2, r7
 800f732:	4616      	mov	r6, r2
 800f734:	3201      	adds	r2, #1
 800f736:	7830      	ldrb	r0, [r6, #0]
 800f738:	f7ff ffa4 	bl	800f684 <__hexdig_fun>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d1f8      	bne.n	800f732 <__gethex+0x84>
 800f740:	9a01      	ldr	r2, [sp, #4]
 800f742:	9903      	ldr	r1, [sp, #12]
 800f744:	4630      	mov	r0, r6
 800f746:	f000 ff15 	bl	8010574 <strncmp>
 800f74a:	b950      	cbnz	r0, 800f762 <__gethex+0xb4>
 800f74c:	b954      	cbnz	r4, 800f764 <__gethex+0xb6>
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	18f4      	adds	r4, r6, r3
 800f752:	4622      	mov	r2, r4
 800f754:	4616      	mov	r6, r2
 800f756:	3201      	adds	r2, #1
 800f758:	7830      	ldrb	r0, [r6, #0]
 800f75a:	f7ff ff93 	bl	800f684 <__hexdig_fun>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d1f8      	bne.n	800f754 <__gethex+0xa6>
 800f762:	b10c      	cbz	r4, 800f768 <__gethex+0xba>
 800f764:	1ba4      	subs	r4, r4, r6
 800f766:	00a4      	lsls	r4, r4, #2
 800f768:	7833      	ldrb	r3, [r6, #0]
 800f76a:	2b50      	cmp	r3, #80	; 0x50
 800f76c:	d001      	beq.n	800f772 <__gethex+0xc4>
 800f76e:	2b70      	cmp	r3, #112	; 0x70
 800f770:	d140      	bne.n	800f7f4 <__gethex+0x146>
 800f772:	7873      	ldrb	r3, [r6, #1]
 800f774:	2b2b      	cmp	r3, #43	; 0x2b
 800f776:	d031      	beq.n	800f7dc <__gethex+0x12e>
 800f778:	2b2d      	cmp	r3, #45	; 0x2d
 800f77a:	d033      	beq.n	800f7e4 <__gethex+0x136>
 800f77c:	1c71      	adds	r1, r6, #1
 800f77e:	f04f 0900 	mov.w	r9, #0
 800f782:	7808      	ldrb	r0, [r1, #0]
 800f784:	f7ff ff7e 	bl	800f684 <__hexdig_fun>
 800f788:	1e43      	subs	r3, r0, #1
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	2b18      	cmp	r3, #24
 800f78e:	d831      	bhi.n	800f7f4 <__gethex+0x146>
 800f790:	f1a0 0210 	sub.w	r2, r0, #16
 800f794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f798:	f7ff ff74 	bl	800f684 <__hexdig_fun>
 800f79c:	1e43      	subs	r3, r0, #1
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b18      	cmp	r3, #24
 800f7a2:	d922      	bls.n	800f7ea <__gethex+0x13c>
 800f7a4:	f1b9 0f00 	cmp.w	r9, #0
 800f7a8:	d000      	beq.n	800f7ac <__gethex+0xfe>
 800f7aa:	4252      	negs	r2, r2
 800f7ac:	4414      	add	r4, r2
 800f7ae:	f8ca 1000 	str.w	r1, [sl]
 800f7b2:	b30d      	cbz	r5, 800f7f8 <__gethex+0x14a>
 800f7b4:	f1bb 0f00 	cmp.w	fp, #0
 800f7b8:	bf0c      	ite	eq
 800f7ba:	2706      	moveq	r7, #6
 800f7bc:	2700      	movne	r7, #0
 800f7be:	4638      	mov	r0, r7
 800f7c0:	b00b      	add	sp, #44	; 0x2c
 800f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c6:	f10b 0b01 	add.w	fp, fp, #1
 800f7ca:	e78a      	b.n	800f6e2 <__gethex+0x34>
 800f7cc:	2500      	movs	r5, #0
 800f7ce:	462c      	mov	r4, r5
 800f7d0:	e7ae      	b.n	800f730 <__gethex+0x82>
 800f7d2:	463e      	mov	r6, r7
 800f7d4:	2501      	movs	r5, #1
 800f7d6:	e7c7      	b.n	800f768 <__gethex+0xba>
 800f7d8:	4604      	mov	r4, r0
 800f7da:	e7fb      	b.n	800f7d4 <__gethex+0x126>
 800f7dc:	f04f 0900 	mov.w	r9, #0
 800f7e0:	1cb1      	adds	r1, r6, #2
 800f7e2:	e7ce      	b.n	800f782 <__gethex+0xd4>
 800f7e4:	f04f 0901 	mov.w	r9, #1
 800f7e8:	e7fa      	b.n	800f7e0 <__gethex+0x132>
 800f7ea:	230a      	movs	r3, #10
 800f7ec:	fb03 0202 	mla	r2, r3, r2, r0
 800f7f0:	3a10      	subs	r2, #16
 800f7f2:	e7cf      	b.n	800f794 <__gethex+0xe6>
 800f7f4:	4631      	mov	r1, r6
 800f7f6:	e7da      	b.n	800f7ae <__gethex+0x100>
 800f7f8:	1bf3      	subs	r3, r6, r7
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	2b07      	cmp	r3, #7
 800f800:	dc49      	bgt.n	800f896 <__gethex+0x1e8>
 800f802:	9802      	ldr	r0, [sp, #8]
 800f804:	f000 fa3e 	bl	800fc84 <_Balloc>
 800f808:	9b01      	ldr	r3, [sp, #4]
 800f80a:	f100 0914 	add.w	r9, r0, #20
 800f80e:	f04f 0b00 	mov.w	fp, #0
 800f812:	f1c3 0301 	rsb	r3, r3, #1
 800f816:	4605      	mov	r5, r0
 800f818:	f8cd 9010 	str.w	r9, [sp, #16]
 800f81c:	46da      	mov	sl, fp
 800f81e:	9308      	str	r3, [sp, #32]
 800f820:	42b7      	cmp	r7, r6
 800f822:	d33b      	bcc.n	800f89c <__gethex+0x1ee>
 800f824:	9804      	ldr	r0, [sp, #16]
 800f826:	f840 ab04 	str.w	sl, [r0], #4
 800f82a:	eba0 0009 	sub.w	r0, r0, r9
 800f82e:	1080      	asrs	r0, r0, #2
 800f830:	6128      	str	r0, [r5, #16]
 800f832:	0147      	lsls	r7, r0, #5
 800f834:	4650      	mov	r0, sl
 800f836:	f000 fae9 	bl	800fe0c <__hi0bits>
 800f83a:	f8d8 6000 	ldr.w	r6, [r8]
 800f83e:	1a3f      	subs	r7, r7, r0
 800f840:	42b7      	cmp	r7, r6
 800f842:	dd64      	ble.n	800f90e <__gethex+0x260>
 800f844:	1bbf      	subs	r7, r7, r6
 800f846:	4639      	mov	r1, r7
 800f848:	4628      	mov	r0, r5
 800f84a:	f000 fdfa 	bl	8010442 <__any_on>
 800f84e:	4682      	mov	sl, r0
 800f850:	b178      	cbz	r0, 800f872 <__gethex+0x1c4>
 800f852:	1e7b      	subs	r3, r7, #1
 800f854:	1159      	asrs	r1, r3, #5
 800f856:	f003 021f 	and.w	r2, r3, #31
 800f85a:	f04f 0a01 	mov.w	sl, #1
 800f85e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f862:	fa0a f202 	lsl.w	r2, sl, r2
 800f866:	420a      	tst	r2, r1
 800f868:	d003      	beq.n	800f872 <__gethex+0x1c4>
 800f86a:	4553      	cmp	r3, sl
 800f86c:	dc46      	bgt.n	800f8fc <__gethex+0x24e>
 800f86e:	f04f 0a02 	mov.w	sl, #2
 800f872:	4639      	mov	r1, r7
 800f874:	4628      	mov	r0, r5
 800f876:	f7ff fecb 	bl	800f610 <rshift>
 800f87a:	443c      	add	r4, r7
 800f87c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f880:	42a3      	cmp	r3, r4
 800f882:	da52      	bge.n	800f92a <__gethex+0x27c>
 800f884:	4629      	mov	r1, r5
 800f886:	9802      	ldr	r0, [sp, #8]
 800f888:	f000 fa30 	bl	800fcec <_Bfree>
 800f88c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f88e:	2300      	movs	r3, #0
 800f890:	6013      	str	r3, [r2, #0]
 800f892:	27a3      	movs	r7, #163	; 0xa3
 800f894:	e793      	b.n	800f7be <__gethex+0x110>
 800f896:	3101      	adds	r1, #1
 800f898:	105b      	asrs	r3, r3, #1
 800f89a:	e7b0      	b.n	800f7fe <__gethex+0x150>
 800f89c:	1e73      	subs	r3, r6, #1
 800f89e:	9305      	str	r3, [sp, #20]
 800f8a0:	9a07      	ldr	r2, [sp, #28]
 800f8a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d018      	beq.n	800f8dc <__gethex+0x22e>
 800f8aa:	f1bb 0f20 	cmp.w	fp, #32
 800f8ae:	d107      	bne.n	800f8c0 <__gethex+0x212>
 800f8b0:	9b04      	ldr	r3, [sp, #16]
 800f8b2:	f8c3 a000 	str.w	sl, [r3]
 800f8b6:	3304      	adds	r3, #4
 800f8b8:	f04f 0a00 	mov.w	sl, #0
 800f8bc:	9304      	str	r3, [sp, #16]
 800f8be:	46d3      	mov	fp, sl
 800f8c0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f8c4:	f7ff fede 	bl	800f684 <__hexdig_fun>
 800f8c8:	f000 000f 	and.w	r0, r0, #15
 800f8cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800f8d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800f8d4:	f10b 0b04 	add.w	fp, fp, #4
 800f8d8:	9b05      	ldr	r3, [sp, #20]
 800f8da:	e00d      	b.n	800f8f8 <__gethex+0x24a>
 800f8dc:	9b05      	ldr	r3, [sp, #20]
 800f8de:	9a08      	ldr	r2, [sp, #32]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	42bb      	cmp	r3, r7
 800f8e4:	d3e1      	bcc.n	800f8aa <__gethex+0x1fc>
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	9a01      	ldr	r2, [sp, #4]
 800f8ea:	9903      	ldr	r1, [sp, #12]
 800f8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ee:	f000 fe41 	bl	8010574 <strncmp>
 800f8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d1d8      	bne.n	800f8aa <__gethex+0x1fc>
 800f8f8:	461e      	mov	r6, r3
 800f8fa:	e791      	b.n	800f820 <__gethex+0x172>
 800f8fc:	1eb9      	subs	r1, r7, #2
 800f8fe:	4628      	mov	r0, r5
 800f900:	f000 fd9f 	bl	8010442 <__any_on>
 800f904:	2800      	cmp	r0, #0
 800f906:	d0b2      	beq.n	800f86e <__gethex+0x1c0>
 800f908:	f04f 0a03 	mov.w	sl, #3
 800f90c:	e7b1      	b.n	800f872 <__gethex+0x1c4>
 800f90e:	da09      	bge.n	800f924 <__gethex+0x276>
 800f910:	1bf7      	subs	r7, r6, r7
 800f912:	4629      	mov	r1, r5
 800f914:	463a      	mov	r2, r7
 800f916:	9802      	ldr	r0, [sp, #8]
 800f918:	f000 fbb4 	bl	8010084 <__lshift>
 800f91c:	1be4      	subs	r4, r4, r7
 800f91e:	4605      	mov	r5, r0
 800f920:	f100 0914 	add.w	r9, r0, #20
 800f924:	f04f 0a00 	mov.w	sl, #0
 800f928:	e7a8      	b.n	800f87c <__gethex+0x1ce>
 800f92a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f92e:	42a0      	cmp	r0, r4
 800f930:	dd6a      	ble.n	800fa08 <__gethex+0x35a>
 800f932:	1b04      	subs	r4, r0, r4
 800f934:	42a6      	cmp	r6, r4
 800f936:	dc2e      	bgt.n	800f996 <__gethex+0x2e8>
 800f938:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d022      	beq.n	800f986 <__gethex+0x2d8>
 800f940:	2b03      	cmp	r3, #3
 800f942:	d024      	beq.n	800f98e <__gethex+0x2e0>
 800f944:	2b01      	cmp	r3, #1
 800f946:	d115      	bne.n	800f974 <__gethex+0x2c6>
 800f948:	42a6      	cmp	r6, r4
 800f94a:	d113      	bne.n	800f974 <__gethex+0x2c6>
 800f94c:	2e01      	cmp	r6, #1
 800f94e:	dc0b      	bgt.n	800f968 <__gethex+0x2ba>
 800f950:	9a06      	ldr	r2, [sp, #24]
 800f952:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	2301      	movs	r3, #1
 800f95a:	612b      	str	r3, [r5, #16]
 800f95c:	f8c9 3000 	str.w	r3, [r9]
 800f960:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f962:	2762      	movs	r7, #98	; 0x62
 800f964:	601d      	str	r5, [r3, #0]
 800f966:	e72a      	b.n	800f7be <__gethex+0x110>
 800f968:	1e71      	subs	r1, r6, #1
 800f96a:	4628      	mov	r0, r5
 800f96c:	f000 fd69 	bl	8010442 <__any_on>
 800f970:	2800      	cmp	r0, #0
 800f972:	d1ed      	bne.n	800f950 <__gethex+0x2a2>
 800f974:	4629      	mov	r1, r5
 800f976:	9802      	ldr	r0, [sp, #8]
 800f978:	f000 f9b8 	bl	800fcec <_Bfree>
 800f97c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f97e:	2300      	movs	r3, #0
 800f980:	6013      	str	r3, [r2, #0]
 800f982:	2750      	movs	r7, #80	; 0x50
 800f984:	e71b      	b.n	800f7be <__gethex+0x110>
 800f986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d0e1      	beq.n	800f950 <__gethex+0x2a2>
 800f98c:	e7f2      	b.n	800f974 <__gethex+0x2c6>
 800f98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1dd      	bne.n	800f950 <__gethex+0x2a2>
 800f994:	e7ee      	b.n	800f974 <__gethex+0x2c6>
 800f996:	1e67      	subs	r7, r4, #1
 800f998:	f1ba 0f00 	cmp.w	sl, #0
 800f99c:	d131      	bne.n	800fa02 <__gethex+0x354>
 800f99e:	b127      	cbz	r7, 800f9aa <__gethex+0x2fc>
 800f9a0:	4639      	mov	r1, r7
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	f000 fd4d 	bl	8010442 <__any_on>
 800f9a8:	4682      	mov	sl, r0
 800f9aa:	117a      	asrs	r2, r7, #5
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	f007 071f 	and.w	r7, r7, #31
 800f9b2:	fa03 f707 	lsl.w	r7, r3, r7
 800f9b6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f9ba:	4621      	mov	r1, r4
 800f9bc:	421f      	tst	r7, r3
 800f9be:	4628      	mov	r0, r5
 800f9c0:	bf18      	it	ne
 800f9c2:	f04a 0a02 	orrne.w	sl, sl, #2
 800f9c6:	1b36      	subs	r6, r6, r4
 800f9c8:	f7ff fe22 	bl	800f610 <rshift>
 800f9cc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f9d0:	2702      	movs	r7, #2
 800f9d2:	f1ba 0f00 	cmp.w	sl, #0
 800f9d6:	d048      	beq.n	800fa6a <__gethex+0x3bc>
 800f9d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d015      	beq.n	800fa0c <__gethex+0x35e>
 800f9e0:	2b03      	cmp	r3, #3
 800f9e2:	d017      	beq.n	800fa14 <__gethex+0x366>
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d109      	bne.n	800f9fc <__gethex+0x34e>
 800f9e8:	f01a 0f02 	tst.w	sl, #2
 800f9ec:	d006      	beq.n	800f9fc <__gethex+0x34e>
 800f9ee:	f8d9 3000 	ldr.w	r3, [r9]
 800f9f2:	ea4a 0a03 	orr.w	sl, sl, r3
 800f9f6:	f01a 0f01 	tst.w	sl, #1
 800f9fa:	d10e      	bne.n	800fa1a <__gethex+0x36c>
 800f9fc:	f047 0710 	orr.w	r7, r7, #16
 800fa00:	e033      	b.n	800fa6a <__gethex+0x3bc>
 800fa02:	f04f 0a01 	mov.w	sl, #1
 800fa06:	e7d0      	b.n	800f9aa <__gethex+0x2fc>
 800fa08:	2701      	movs	r7, #1
 800fa0a:	e7e2      	b.n	800f9d2 <__gethex+0x324>
 800fa0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa0e:	f1c3 0301 	rsb	r3, r3, #1
 800fa12:	9315      	str	r3, [sp, #84]	; 0x54
 800fa14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d0f0      	beq.n	800f9fc <__gethex+0x34e>
 800fa1a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800fa1e:	f105 0314 	add.w	r3, r5, #20
 800fa22:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800fa26:	eb03 010a 	add.w	r1, r3, sl
 800fa2a:	f04f 0c00 	mov.w	ip, #0
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fa38:	d01c      	beq.n	800fa74 <__gethex+0x3c6>
 800fa3a:	3201      	adds	r2, #1
 800fa3c:	6002      	str	r2, [r0, #0]
 800fa3e:	2f02      	cmp	r7, #2
 800fa40:	f105 0314 	add.w	r3, r5, #20
 800fa44:	d138      	bne.n	800fab8 <__gethex+0x40a>
 800fa46:	f8d8 2000 	ldr.w	r2, [r8]
 800fa4a:	3a01      	subs	r2, #1
 800fa4c:	42b2      	cmp	r2, r6
 800fa4e:	d10a      	bne.n	800fa66 <__gethex+0x3b8>
 800fa50:	1171      	asrs	r1, r6, #5
 800fa52:	2201      	movs	r2, #1
 800fa54:	f006 061f 	and.w	r6, r6, #31
 800fa58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa5c:	fa02 f606 	lsl.w	r6, r2, r6
 800fa60:	421e      	tst	r6, r3
 800fa62:	bf18      	it	ne
 800fa64:	4617      	movne	r7, r2
 800fa66:	f047 0720 	orr.w	r7, r7, #32
 800fa6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa6c:	601d      	str	r5, [r3, #0]
 800fa6e:	9b06      	ldr	r3, [sp, #24]
 800fa70:	601c      	str	r4, [r3, #0]
 800fa72:	e6a4      	b.n	800f7be <__gethex+0x110>
 800fa74:	4299      	cmp	r1, r3
 800fa76:	f843 cc04 	str.w	ip, [r3, #-4]
 800fa7a:	d8d8      	bhi.n	800fa2e <__gethex+0x380>
 800fa7c:	68ab      	ldr	r3, [r5, #8]
 800fa7e:	4599      	cmp	r9, r3
 800fa80:	db12      	blt.n	800faa8 <__gethex+0x3fa>
 800fa82:	6869      	ldr	r1, [r5, #4]
 800fa84:	9802      	ldr	r0, [sp, #8]
 800fa86:	3101      	adds	r1, #1
 800fa88:	f000 f8fc 	bl	800fc84 <_Balloc>
 800fa8c:	692a      	ldr	r2, [r5, #16]
 800fa8e:	3202      	adds	r2, #2
 800fa90:	f105 010c 	add.w	r1, r5, #12
 800fa94:	4683      	mov	fp, r0
 800fa96:	0092      	lsls	r2, r2, #2
 800fa98:	300c      	adds	r0, #12
 800fa9a:	f7fe ffad 	bl	800e9f8 <memcpy>
 800fa9e:	4629      	mov	r1, r5
 800faa0:	9802      	ldr	r0, [sp, #8]
 800faa2:	f000 f923 	bl	800fcec <_Bfree>
 800faa6:	465d      	mov	r5, fp
 800faa8:	692b      	ldr	r3, [r5, #16]
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fab0:	612a      	str	r2, [r5, #16]
 800fab2:	2201      	movs	r2, #1
 800fab4:	615a      	str	r2, [r3, #20]
 800fab6:	e7c2      	b.n	800fa3e <__gethex+0x390>
 800fab8:	692a      	ldr	r2, [r5, #16]
 800faba:	454a      	cmp	r2, r9
 800fabc:	dd0b      	ble.n	800fad6 <__gethex+0x428>
 800fabe:	2101      	movs	r1, #1
 800fac0:	4628      	mov	r0, r5
 800fac2:	f7ff fda5 	bl	800f610 <rshift>
 800fac6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800faca:	3401      	adds	r4, #1
 800facc:	42a3      	cmp	r3, r4
 800face:	f6ff aed9 	blt.w	800f884 <__gethex+0x1d6>
 800fad2:	2701      	movs	r7, #1
 800fad4:	e7c7      	b.n	800fa66 <__gethex+0x3b8>
 800fad6:	f016 061f 	ands.w	r6, r6, #31
 800fada:	d0fa      	beq.n	800fad2 <__gethex+0x424>
 800fadc:	449a      	add	sl, r3
 800fade:	f1c6 0620 	rsb	r6, r6, #32
 800fae2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fae6:	f000 f991 	bl	800fe0c <__hi0bits>
 800faea:	42b0      	cmp	r0, r6
 800faec:	dbe7      	blt.n	800fabe <__gethex+0x410>
 800faee:	e7f0      	b.n	800fad2 <__gethex+0x424>

0800faf0 <L_shift>:
 800faf0:	f1c2 0208 	rsb	r2, r2, #8
 800faf4:	0092      	lsls	r2, r2, #2
 800faf6:	b570      	push	{r4, r5, r6, lr}
 800faf8:	f1c2 0620 	rsb	r6, r2, #32
 800fafc:	6843      	ldr	r3, [r0, #4]
 800fafe:	6804      	ldr	r4, [r0, #0]
 800fb00:	fa03 f506 	lsl.w	r5, r3, r6
 800fb04:	432c      	orrs	r4, r5
 800fb06:	40d3      	lsrs	r3, r2
 800fb08:	6004      	str	r4, [r0, #0]
 800fb0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800fb0e:	4288      	cmp	r0, r1
 800fb10:	d3f4      	bcc.n	800fafc <L_shift+0xc>
 800fb12:	bd70      	pop	{r4, r5, r6, pc}

0800fb14 <__match>:
 800fb14:	b530      	push	{r4, r5, lr}
 800fb16:	6803      	ldr	r3, [r0, #0]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb1e:	b914      	cbnz	r4, 800fb26 <__match+0x12>
 800fb20:	6003      	str	r3, [r0, #0]
 800fb22:	2001      	movs	r0, #1
 800fb24:	bd30      	pop	{r4, r5, pc}
 800fb26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fb2e:	2d19      	cmp	r5, #25
 800fb30:	bf98      	it	ls
 800fb32:	3220      	addls	r2, #32
 800fb34:	42a2      	cmp	r2, r4
 800fb36:	d0f0      	beq.n	800fb1a <__match+0x6>
 800fb38:	2000      	movs	r0, #0
 800fb3a:	e7f3      	b.n	800fb24 <__match+0x10>

0800fb3c <__hexnan>:
 800fb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb40:	680b      	ldr	r3, [r1, #0]
 800fb42:	6801      	ldr	r1, [r0, #0]
 800fb44:	115f      	asrs	r7, r3, #5
 800fb46:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800fb4a:	f013 031f 	ands.w	r3, r3, #31
 800fb4e:	b087      	sub	sp, #28
 800fb50:	bf18      	it	ne
 800fb52:	3704      	addne	r7, #4
 800fb54:	2500      	movs	r5, #0
 800fb56:	1f3e      	subs	r6, r7, #4
 800fb58:	4682      	mov	sl, r0
 800fb5a:	4690      	mov	r8, r2
 800fb5c:	9301      	str	r3, [sp, #4]
 800fb5e:	f847 5c04 	str.w	r5, [r7, #-4]
 800fb62:	46b1      	mov	r9, r6
 800fb64:	4634      	mov	r4, r6
 800fb66:	9502      	str	r5, [sp, #8]
 800fb68:	46ab      	mov	fp, r5
 800fb6a:	784a      	ldrb	r2, [r1, #1]
 800fb6c:	1c4b      	adds	r3, r1, #1
 800fb6e:	9303      	str	r3, [sp, #12]
 800fb70:	b342      	cbz	r2, 800fbc4 <__hexnan+0x88>
 800fb72:	4610      	mov	r0, r2
 800fb74:	9105      	str	r1, [sp, #20]
 800fb76:	9204      	str	r2, [sp, #16]
 800fb78:	f7ff fd84 	bl	800f684 <__hexdig_fun>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	d143      	bne.n	800fc08 <__hexnan+0xcc>
 800fb80:	9a04      	ldr	r2, [sp, #16]
 800fb82:	9905      	ldr	r1, [sp, #20]
 800fb84:	2a20      	cmp	r2, #32
 800fb86:	d818      	bhi.n	800fbba <__hexnan+0x7e>
 800fb88:	9b02      	ldr	r3, [sp, #8]
 800fb8a:	459b      	cmp	fp, r3
 800fb8c:	dd13      	ble.n	800fbb6 <__hexnan+0x7a>
 800fb8e:	454c      	cmp	r4, r9
 800fb90:	d206      	bcs.n	800fba0 <__hexnan+0x64>
 800fb92:	2d07      	cmp	r5, #7
 800fb94:	dc04      	bgt.n	800fba0 <__hexnan+0x64>
 800fb96:	462a      	mov	r2, r5
 800fb98:	4649      	mov	r1, r9
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f7ff ffa8 	bl	800faf0 <L_shift>
 800fba0:	4544      	cmp	r4, r8
 800fba2:	d944      	bls.n	800fc2e <__hexnan+0xf2>
 800fba4:	2300      	movs	r3, #0
 800fba6:	f1a4 0904 	sub.w	r9, r4, #4
 800fbaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbae:	f8cd b008 	str.w	fp, [sp, #8]
 800fbb2:	464c      	mov	r4, r9
 800fbb4:	461d      	mov	r5, r3
 800fbb6:	9903      	ldr	r1, [sp, #12]
 800fbb8:	e7d7      	b.n	800fb6a <__hexnan+0x2e>
 800fbba:	2a29      	cmp	r2, #41	; 0x29
 800fbbc:	d14a      	bne.n	800fc54 <__hexnan+0x118>
 800fbbe:	3102      	adds	r1, #2
 800fbc0:	f8ca 1000 	str.w	r1, [sl]
 800fbc4:	f1bb 0f00 	cmp.w	fp, #0
 800fbc8:	d044      	beq.n	800fc54 <__hexnan+0x118>
 800fbca:	454c      	cmp	r4, r9
 800fbcc:	d206      	bcs.n	800fbdc <__hexnan+0xa0>
 800fbce:	2d07      	cmp	r5, #7
 800fbd0:	dc04      	bgt.n	800fbdc <__hexnan+0xa0>
 800fbd2:	462a      	mov	r2, r5
 800fbd4:	4649      	mov	r1, r9
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f7ff ff8a 	bl	800faf0 <L_shift>
 800fbdc:	4544      	cmp	r4, r8
 800fbde:	d928      	bls.n	800fc32 <__hexnan+0xf6>
 800fbe0:	4643      	mov	r3, r8
 800fbe2:	f854 2b04 	ldr.w	r2, [r4], #4
 800fbe6:	f843 2b04 	str.w	r2, [r3], #4
 800fbea:	42a6      	cmp	r6, r4
 800fbec:	d2f9      	bcs.n	800fbe2 <__hexnan+0xa6>
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f843 2b04 	str.w	r2, [r3], #4
 800fbf4:	429e      	cmp	r6, r3
 800fbf6:	d2fb      	bcs.n	800fbf0 <__hexnan+0xb4>
 800fbf8:	6833      	ldr	r3, [r6, #0]
 800fbfa:	b91b      	cbnz	r3, 800fc04 <__hexnan+0xc8>
 800fbfc:	4546      	cmp	r6, r8
 800fbfe:	d127      	bne.n	800fc50 <__hexnan+0x114>
 800fc00:	2301      	movs	r3, #1
 800fc02:	6033      	str	r3, [r6, #0]
 800fc04:	2005      	movs	r0, #5
 800fc06:	e026      	b.n	800fc56 <__hexnan+0x11a>
 800fc08:	3501      	adds	r5, #1
 800fc0a:	2d08      	cmp	r5, #8
 800fc0c:	f10b 0b01 	add.w	fp, fp, #1
 800fc10:	dd06      	ble.n	800fc20 <__hexnan+0xe4>
 800fc12:	4544      	cmp	r4, r8
 800fc14:	d9cf      	bls.n	800fbb6 <__hexnan+0x7a>
 800fc16:	2300      	movs	r3, #0
 800fc18:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc1c:	2501      	movs	r5, #1
 800fc1e:	3c04      	subs	r4, #4
 800fc20:	6822      	ldr	r2, [r4, #0]
 800fc22:	f000 000f 	and.w	r0, r0, #15
 800fc26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fc2a:	6020      	str	r0, [r4, #0]
 800fc2c:	e7c3      	b.n	800fbb6 <__hexnan+0x7a>
 800fc2e:	2508      	movs	r5, #8
 800fc30:	e7c1      	b.n	800fbb6 <__hexnan+0x7a>
 800fc32:	9b01      	ldr	r3, [sp, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d0df      	beq.n	800fbf8 <__hexnan+0xbc>
 800fc38:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3c:	f1c3 0320 	rsb	r3, r3, #32
 800fc40:	fa22 f303 	lsr.w	r3, r2, r3
 800fc44:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800fc48:	401a      	ands	r2, r3
 800fc4a:	f847 2c04 	str.w	r2, [r7, #-4]
 800fc4e:	e7d3      	b.n	800fbf8 <__hexnan+0xbc>
 800fc50:	3e04      	subs	r6, #4
 800fc52:	e7d1      	b.n	800fbf8 <__hexnan+0xbc>
 800fc54:	2004      	movs	r0, #4
 800fc56:	b007      	add	sp, #28
 800fc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc5c <__localeconv_l>:
 800fc5c:	30f0      	adds	r0, #240	; 0xf0
 800fc5e:	4770      	bx	lr

0800fc60 <__ascii_mbtowc>:
 800fc60:	b082      	sub	sp, #8
 800fc62:	b901      	cbnz	r1, 800fc66 <__ascii_mbtowc+0x6>
 800fc64:	a901      	add	r1, sp, #4
 800fc66:	b142      	cbz	r2, 800fc7a <__ascii_mbtowc+0x1a>
 800fc68:	b14b      	cbz	r3, 800fc7e <__ascii_mbtowc+0x1e>
 800fc6a:	7813      	ldrb	r3, [r2, #0]
 800fc6c:	600b      	str	r3, [r1, #0]
 800fc6e:	7812      	ldrb	r2, [r2, #0]
 800fc70:	1c10      	adds	r0, r2, #0
 800fc72:	bf18      	it	ne
 800fc74:	2001      	movne	r0, #1
 800fc76:	b002      	add	sp, #8
 800fc78:	4770      	bx	lr
 800fc7a:	4610      	mov	r0, r2
 800fc7c:	e7fb      	b.n	800fc76 <__ascii_mbtowc+0x16>
 800fc7e:	f06f 0001 	mvn.w	r0, #1
 800fc82:	e7f8      	b.n	800fc76 <__ascii_mbtowc+0x16>

0800fc84 <_Balloc>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc88:	4604      	mov	r4, r0
 800fc8a:	460e      	mov	r6, r1
 800fc8c:	b93d      	cbnz	r5, 800fc9e <_Balloc+0x1a>
 800fc8e:	2010      	movs	r0, #16
 800fc90:	f000 fc90 	bl	80105b4 <malloc>
 800fc94:	6260      	str	r0, [r4, #36]	; 0x24
 800fc96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc9a:	6005      	str	r5, [r0, #0]
 800fc9c:	60c5      	str	r5, [r0, #12]
 800fc9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fca0:	68eb      	ldr	r3, [r5, #12]
 800fca2:	b183      	cbz	r3, 800fcc6 <_Balloc+0x42>
 800fca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fcac:	b9b8      	cbnz	r0, 800fcde <_Balloc+0x5a>
 800fcae:	2101      	movs	r1, #1
 800fcb0:	fa01 f506 	lsl.w	r5, r1, r6
 800fcb4:	1d6a      	adds	r2, r5, #5
 800fcb6:	0092      	lsls	r2, r2, #2
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fbe3 	bl	8010484 <_calloc_r>
 800fcbe:	b160      	cbz	r0, 800fcda <_Balloc+0x56>
 800fcc0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fcc4:	e00e      	b.n	800fce4 <_Balloc+0x60>
 800fcc6:	2221      	movs	r2, #33	; 0x21
 800fcc8:	2104      	movs	r1, #4
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 fbda 	bl	8010484 <_calloc_r>
 800fcd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcd2:	60e8      	str	r0, [r5, #12]
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1e4      	bne.n	800fca4 <_Balloc+0x20>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	bd70      	pop	{r4, r5, r6, pc}
 800fcde:	6802      	ldr	r2, [r0, #0]
 800fce0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fce4:	2300      	movs	r3, #0
 800fce6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcea:	e7f7      	b.n	800fcdc <_Balloc+0x58>

0800fcec <_Bfree>:
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	460d      	mov	r5, r1
 800fcf4:	b93c      	cbnz	r4, 800fd06 <_Bfree+0x1a>
 800fcf6:	2010      	movs	r0, #16
 800fcf8:	f000 fc5c 	bl	80105b4 <malloc>
 800fcfc:	6270      	str	r0, [r6, #36]	; 0x24
 800fcfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd02:	6004      	str	r4, [r0, #0]
 800fd04:	60c4      	str	r4, [r0, #12]
 800fd06:	b13d      	cbz	r5, 800fd18 <_Bfree+0x2c>
 800fd08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fd0a:	686a      	ldr	r2, [r5, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd12:	6029      	str	r1, [r5, #0]
 800fd14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fd18:	bd70      	pop	{r4, r5, r6, pc}

0800fd1a <__multadd>:
 800fd1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd1e:	690d      	ldr	r5, [r1, #16]
 800fd20:	461f      	mov	r7, r3
 800fd22:	4606      	mov	r6, r0
 800fd24:	460c      	mov	r4, r1
 800fd26:	f101 0c14 	add.w	ip, r1, #20
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	f8dc 0000 	ldr.w	r0, [ip]
 800fd30:	b281      	uxth	r1, r0
 800fd32:	fb02 7101 	mla	r1, r2, r1, r7
 800fd36:	0c0f      	lsrs	r7, r1, #16
 800fd38:	0c00      	lsrs	r0, r0, #16
 800fd3a:	fb02 7000 	mla	r0, r2, r0, r7
 800fd3e:	b289      	uxth	r1, r1
 800fd40:	3301      	adds	r3, #1
 800fd42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fd46:	429d      	cmp	r5, r3
 800fd48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fd4c:	f84c 1b04 	str.w	r1, [ip], #4
 800fd50:	dcec      	bgt.n	800fd2c <__multadd+0x12>
 800fd52:	b1d7      	cbz	r7, 800fd8a <__multadd+0x70>
 800fd54:	68a3      	ldr	r3, [r4, #8]
 800fd56:	42ab      	cmp	r3, r5
 800fd58:	dc12      	bgt.n	800fd80 <__multadd+0x66>
 800fd5a:	6861      	ldr	r1, [r4, #4]
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	3101      	adds	r1, #1
 800fd60:	f7ff ff90 	bl	800fc84 <_Balloc>
 800fd64:	6922      	ldr	r2, [r4, #16]
 800fd66:	3202      	adds	r2, #2
 800fd68:	f104 010c 	add.w	r1, r4, #12
 800fd6c:	4680      	mov	r8, r0
 800fd6e:	0092      	lsls	r2, r2, #2
 800fd70:	300c      	adds	r0, #12
 800fd72:	f7fe fe41 	bl	800e9f8 <memcpy>
 800fd76:	4621      	mov	r1, r4
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7ff ffb7 	bl	800fcec <_Bfree>
 800fd7e:	4644      	mov	r4, r8
 800fd80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd84:	3501      	adds	r5, #1
 800fd86:	615f      	str	r7, [r3, #20]
 800fd88:	6125      	str	r5, [r4, #16]
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd90 <__s2b>:
 800fd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd94:	460c      	mov	r4, r1
 800fd96:	4615      	mov	r5, r2
 800fd98:	461f      	mov	r7, r3
 800fd9a:	2209      	movs	r2, #9
 800fd9c:	3308      	adds	r3, #8
 800fd9e:	4606      	mov	r6, r0
 800fda0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fda4:	2100      	movs	r1, #0
 800fda6:	2201      	movs	r2, #1
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	db20      	blt.n	800fdee <__s2b+0x5e>
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7ff ff69 	bl	800fc84 <_Balloc>
 800fdb2:	9b08      	ldr	r3, [sp, #32]
 800fdb4:	6143      	str	r3, [r0, #20]
 800fdb6:	2d09      	cmp	r5, #9
 800fdb8:	f04f 0301 	mov.w	r3, #1
 800fdbc:	6103      	str	r3, [r0, #16]
 800fdbe:	dd19      	ble.n	800fdf4 <__s2b+0x64>
 800fdc0:	f104 0809 	add.w	r8, r4, #9
 800fdc4:	46c1      	mov	r9, r8
 800fdc6:	442c      	add	r4, r5
 800fdc8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fdcc:	4601      	mov	r1, r0
 800fdce:	3b30      	subs	r3, #48	; 0x30
 800fdd0:	220a      	movs	r2, #10
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7ff ffa1 	bl	800fd1a <__multadd>
 800fdd8:	45a1      	cmp	r9, r4
 800fdda:	d1f5      	bne.n	800fdc8 <__s2b+0x38>
 800fddc:	eb08 0405 	add.w	r4, r8, r5
 800fde0:	3c08      	subs	r4, #8
 800fde2:	1b2d      	subs	r5, r5, r4
 800fde4:	1963      	adds	r3, r4, r5
 800fde6:	42bb      	cmp	r3, r7
 800fde8:	db07      	blt.n	800fdfa <__s2b+0x6a>
 800fdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdee:	0052      	lsls	r2, r2, #1
 800fdf0:	3101      	adds	r1, #1
 800fdf2:	e7d9      	b.n	800fda8 <__s2b+0x18>
 800fdf4:	340a      	adds	r4, #10
 800fdf6:	2509      	movs	r5, #9
 800fdf8:	e7f3      	b.n	800fde2 <__s2b+0x52>
 800fdfa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fdfe:	4601      	mov	r1, r0
 800fe00:	3b30      	subs	r3, #48	; 0x30
 800fe02:	220a      	movs	r2, #10
 800fe04:	4630      	mov	r0, r6
 800fe06:	f7ff ff88 	bl	800fd1a <__multadd>
 800fe0a:	e7eb      	b.n	800fde4 <__s2b+0x54>

0800fe0c <__hi0bits>:
 800fe0c:	0c02      	lsrs	r2, r0, #16
 800fe0e:	0412      	lsls	r2, r2, #16
 800fe10:	4603      	mov	r3, r0
 800fe12:	b9b2      	cbnz	r2, 800fe42 <__hi0bits+0x36>
 800fe14:	0403      	lsls	r3, r0, #16
 800fe16:	2010      	movs	r0, #16
 800fe18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fe1c:	bf04      	itt	eq
 800fe1e:	021b      	lsleq	r3, r3, #8
 800fe20:	3008      	addeq	r0, #8
 800fe22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fe26:	bf04      	itt	eq
 800fe28:	011b      	lsleq	r3, r3, #4
 800fe2a:	3004      	addeq	r0, #4
 800fe2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fe30:	bf04      	itt	eq
 800fe32:	009b      	lsleq	r3, r3, #2
 800fe34:	3002      	addeq	r0, #2
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	db06      	blt.n	800fe48 <__hi0bits+0x3c>
 800fe3a:	005b      	lsls	r3, r3, #1
 800fe3c:	d503      	bpl.n	800fe46 <__hi0bits+0x3a>
 800fe3e:	3001      	adds	r0, #1
 800fe40:	4770      	bx	lr
 800fe42:	2000      	movs	r0, #0
 800fe44:	e7e8      	b.n	800fe18 <__hi0bits+0xc>
 800fe46:	2020      	movs	r0, #32
 800fe48:	4770      	bx	lr

0800fe4a <__lo0bits>:
 800fe4a:	6803      	ldr	r3, [r0, #0]
 800fe4c:	f013 0207 	ands.w	r2, r3, #7
 800fe50:	4601      	mov	r1, r0
 800fe52:	d00b      	beq.n	800fe6c <__lo0bits+0x22>
 800fe54:	07da      	lsls	r2, r3, #31
 800fe56:	d423      	bmi.n	800fea0 <__lo0bits+0x56>
 800fe58:	0798      	lsls	r0, r3, #30
 800fe5a:	bf49      	itett	mi
 800fe5c:	085b      	lsrmi	r3, r3, #1
 800fe5e:	089b      	lsrpl	r3, r3, #2
 800fe60:	2001      	movmi	r0, #1
 800fe62:	600b      	strmi	r3, [r1, #0]
 800fe64:	bf5c      	itt	pl
 800fe66:	600b      	strpl	r3, [r1, #0]
 800fe68:	2002      	movpl	r0, #2
 800fe6a:	4770      	bx	lr
 800fe6c:	b298      	uxth	r0, r3
 800fe6e:	b9a8      	cbnz	r0, 800fe9c <__lo0bits+0x52>
 800fe70:	0c1b      	lsrs	r3, r3, #16
 800fe72:	2010      	movs	r0, #16
 800fe74:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fe78:	bf04      	itt	eq
 800fe7a:	0a1b      	lsreq	r3, r3, #8
 800fe7c:	3008      	addeq	r0, #8
 800fe7e:	071a      	lsls	r2, r3, #28
 800fe80:	bf04      	itt	eq
 800fe82:	091b      	lsreq	r3, r3, #4
 800fe84:	3004      	addeq	r0, #4
 800fe86:	079a      	lsls	r2, r3, #30
 800fe88:	bf04      	itt	eq
 800fe8a:	089b      	lsreq	r3, r3, #2
 800fe8c:	3002      	addeq	r0, #2
 800fe8e:	07da      	lsls	r2, r3, #31
 800fe90:	d402      	bmi.n	800fe98 <__lo0bits+0x4e>
 800fe92:	085b      	lsrs	r3, r3, #1
 800fe94:	d006      	beq.n	800fea4 <__lo0bits+0x5a>
 800fe96:	3001      	adds	r0, #1
 800fe98:	600b      	str	r3, [r1, #0]
 800fe9a:	4770      	bx	lr
 800fe9c:	4610      	mov	r0, r2
 800fe9e:	e7e9      	b.n	800fe74 <__lo0bits+0x2a>
 800fea0:	2000      	movs	r0, #0
 800fea2:	4770      	bx	lr
 800fea4:	2020      	movs	r0, #32
 800fea6:	4770      	bx	lr

0800fea8 <__i2b>:
 800fea8:	b510      	push	{r4, lr}
 800feaa:	460c      	mov	r4, r1
 800feac:	2101      	movs	r1, #1
 800feae:	f7ff fee9 	bl	800fc84 <_Balloc>
 800feb2:	2201      	movs	r2, #1
 800feb4:	6144      	str	r4, [r0, #20]
 800feb6:	6102      	str	r2, [r0, #16]
 800feb8:	bd10      	pop	{r4, pc}

0800feba <__multiply>:
 800feba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800febe:	4614      	mov	r4, r2
 800fec0:	690a      	ldr	r2, [r1, #16]
 800fec2:	6923      	ldr	r3, [r4, #16]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	bfb8      	it	lt
 800fec8:	460b      	movlt	r3, r1
 800feca:	4688      	mov	r8, r1
 800fecc:	bfbc      	itt	lt
 800fece:	46a0      	movlt	r8, r4
 800fed0:	461c      	movlt	r4, r3
 800fed2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fed6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800feda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fede:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fee2:	eb07 0609 	add.w	r6, r7, r9
 800fee6:	42b3      	cmp	r3, r6
 800fee8:	bfb8      	it	lt
 800feea:	3101      	addlt	r1, #1
 800feec:	f7ff feca 	bl	800fc84 <_Balloc>
 800fef0:	f100 0514 	add.w	r5, r0, #20
 800fef4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fef8:	462b      	mov	r3, r5
 800fefa:	2200      	movs	r2, #0
 800fefc:	4573      	cmp	r3, lr
 800fefe:	d316      	bcc.n	800ff2e <__multiply+0x74>
 800ff00:	f104 0214 	add.w	r2, r4, #20
 800ff04:	f108 0114 	add.w	r1, r8, #20
 800ff08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ff0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ff10:	9300      	str	r3, [sp, #0]
 800ff12:	9b00      	ldr	r3, [sp, #0]
 800ff14:	9201      	str	r2, [sp, #4]
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d80c      	bhi.n	800ff34 <__multiply+0x7a>
 800ff1a:	2e00      	cmp	r6, #0
 800ff1c:	dd03      	ble.n	800ff26 <__multiply+0x6c>
 800ff1e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d05d      	beq.n	800ffe2 <__multiply+0x128>
 800ff26:	6106      	str	r6, [r0, #16]
 800ff28:	b003      	add	sp, #12
 800ff2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff2e:	f843 2b04 	str.w	r2, [r3], #4
 800ff32:	e7e3      	b.n	800fefc <__multiply+0x42>
 800ff34:	f8b2 b000 	ldrh.w	fp, [r2]
 800ff38:	f1bb 0f00 	cmp.w	fp, #0
 800ff3c:	d023      	beq.n	800ff86 <__multiply+0xcc>
 800ff3e:	4689      	mov	r9, r1
 800ff40:	46ac      	mov	ip, r5
 800ff42:	f04f 0800 	mov.w	r8, #0
 800ff46:	f859 4b04 	ldr.w	r4, [r9], #4
 800ff4a:	f8dc a000 	ldr.w	sl, [ip]
 800ff4e:	b2a3      	uxth	r3, r4
 800ff50:	fa1f fa8a 	uxth.w	sl, sl
 800ff54:	fb0b a303 	mla	r3, fp, r3, sl
 800ff58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ff5c:	f8dc 4000 	ldr.w	r4, [ip]
 800ff60:	4443      	add	r3, r8
 800ff62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ff66:	fb0b 840a 	mla	r4, fp, sl, r8
 800ff6a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ff6e:	46e2      	mov	sl, ip
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ff76:	454f      	cmp	r7, r9
 800ff78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ff7c:	f84a 3b04 	str.w	r3, [sl], #4
 800ff80:	d82b      	bhi.n	800ffda <__multiply+0x120>
 800ff82:	f8cc 8004 	str.w	r8, [ip, #4]
 800ff86:	9b01      	ldr	r3, [sp, #4]
 800ff88:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ff8c:	3204      	adds	r2, #4
 800ff8e:	f1ba 0f00 	cmp.w	sl, #0
 800ff92:	d020      	beq.n	800ffd6 <__multiply+0x11c>
 800ff94:	682b      	ldr	r3, [r5, #0]
 800ff96:	4689      	mov	r9, r1
 800ff98:	46a8      	mov	r8, r5
 800ff9a:	f04f 0b00 	mov.w	fp, #0
 800ff9e:	f8b9 c000 	ldrh.w	ip, [r9]
 800ffa2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ffa6:	fb0a 440c 	mla	r4, sl, ip, r4
 800ffaa:	445c      	add	r4, fp
 800ffac:	46c4      	mov	ip, r8
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ffb4:	f84c 3b04 	str.w	r3, [ip], #4
 800ffb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800ffbc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ffc0:	0c1b      	lsrs	r3, r3, #16
 800ffc2:	fb0a b303 	mla	r3, sl, r3, fp
 800ffc6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ffca:	454f      	cmp	r7, r9
 800ffcc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ffd0:	d805      	bhi.n	800ffde <__multiply+0x124>
 800ffd2:	f8c8 3004 	str.w	r3, [r8, #4]
 800ffd6:	3504      	adds	r5, #4
 800ffd8:	e79b      	b.n	800ff12 <__multiply+0x58>
 800ffda:	46d4      	mov	ip, sl
 800ffdc:	e7b3      	b.n	800ff46 <__multiply+0x8c>
 800ffde:	46e0      	mov	r8, ip
 800ffe0:	e7dd      	b.n	800ff9e <__multiply+0xe4>
 800ffe2:	3e01      	subs	r6, #1
 800ffe4:	e799      	b.n	800ff1a <__multiply+0x60>
	...

0800ffe8 <__pow5mult>:
 800ffe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffec:	4615      	mov	r5, r2
 800ffee:	f012 0203 	ands.w	r2, r2, #3
 800fff2:	4606      	mov	r6, r0
 800fff4:	460f      	mov	r7, r1
 800fff6:	d007      	beq.n	8010008 <__pow5mult+0x20>
 800fff8:	3a01      	subs	r2, #1
 800fffa:	4c21      	ldr	r4, [pc, #132]	; (8010080 <__pow5mult+0x98>)
 800fffc:	2300      	movs	r3, #0
 800fffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010002:	f7ff fe8a 	bl	800fd1a <__multadd>
 8010006:	4607      	mov	r7, r0
 8010008:	10ad      	asrs	r5, r5, #2
 801000a:	d035      	beq.n	8010078 <__pow5mult+0x90>
 801000c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801000e:	b93c      	cbnz	r4, 8010020 <__pow5mult+0x38>
 8010010:	2010      	movs	r0, #16
 8010012:	f000 facf 	bl	80105b4 <malloc>
 8010016:	6270      	str	r0, [r6, #36]	; 0x24
 8010018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801001c:	6004      	str	r4, [r0, #0]
 801001e:	60c4      	str	r4, [r0, #12]
 8010020:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010028:	b94c      	cbnz	r4, 801003e <__pow5mult+0x56>
 801002a:	f240 2171 	movw	r1, #625	; 0x271
 801002e:	4630      	mov	r0, r6
 8010030:	f7ff ff3a 	bl	800fea8 <__i2b>
 8010034:	2300      	movs	r3, #0
 8010036:	f8c8 0008 	str.w	r0, [r8, #8]
 801003a:	4604      	mov	r4, r0
 801003c:	6003      	str	r3, [r0, #0]
 801003e:	f04f 0800 	mov.w	r8, #0
 8010042:	07eb      	lsls	r3, r5, #31
 8010044:	d50a      	bpl.n	801005c <__pow5mult+0x74>
 8010046:	4639      	mov	r1, r7
 8010048:	4622      	mov	r2, r4
 801004a:	4630      	mov	r0, r6
 801004c:	f7ff ff35 	bl	800feba <__multiply>
 8010050:	4639      	mov	r1, r7
 8010052:	4681      	mov	r9, r0
 8010054:	4630      	mov	r0, r6
 8010056:	f7ff fe49 	bl	800fcec <_Bfree>
 801005a:	464f      	mov	r7, r9
 801005c:	106d      	asrs	r5, r5, #1
 801005e:	d00b      	beq.n	8010078 <__pow5mult+0x90>
 8010060:	6820      	ldr	r0, [r4, #0]
 8010062:	b938      	cbnz	r0, 8010074 <__pow5mult+0x8c>
 8010064:	4622      	mov	r2, r4
 8010066:	4621      	mov	r1, r4
 8010068:	4630      	mov	r0, r6
 801006a:	f7ff ff26 	bl	800feba <__multiply>
 801006e:	6020      	str	r0, [r4, #0]
 8010070:	f8c0 8000 	str.w	r8, [r0]
 8010074:	4604      	mov	r4, r0
 8010076:	e7e4      	b.n	8010042 <__pow5mult+0x5a>
 8010078:	4638      	mov	r0, r7
 801007a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801007e:	bf00      	nop
 8010080:	080117b8 	.word	0x080117b8

08010084 <__lshift>:
 8010084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010088:	460c      	mov	r4, r1
 801008a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801008e:	6923      	ldr	r3, [r4, #16]
 8010090:	6849      	ldr	r1, [r1, #4]
 8010092:	eb0a 0903 	add.w	r9, sl, r3
 8010096:	68a3      	ldr	r3, [r4, #8]
 8010098:	4607      	mov	r7, r0
 801009a:	4616      	mov	r6, r2
 801009c:	f109 0501 	add.w	r5, r9, #1
 80100a0:	42ab      	cmp	r3, r5
 80100a2:	db32      	blt.n	801010a <__lshift+0x86>
 80100a4:	4638      	mov	r0, r7
 80100a6:	f7ff fded 	bl	800fc84 <_Balloc>
 80100aa:	2300      	movs	r3, #0
 80100ac:	4680      	mov	r8, r0
 80100ae:	f100 0114 	add.w	r1, r0, #20
 80100b2:	461a      	mov	r2, r3
 80100b4:	4553      	cmp	r3, sl
 80100b6:	db2b      	blt.n	8010110 <__lshift+0x8c>
 80100b8:	6920      	ldr	r0, [r4, #16]
 80100ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100be:	f104 0314 	add.w	r3, r4, #20
 80100c2:	f016 021f 	ands.w	r2, r6, #31
 80100c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100ce:	d025      	beq.n	801011c <__lshift+0x98>
 80100d0:	f1c2 0e20 	rsb	lr, r2, #32
 80100d4:	2000      	movs	r0, #0
 80100d6:	681e      	ldr	r6, [r3, #0]
 80100d8:	468a      	mov	sl, r1
 80100da:	4096      	lsls	r6, r2
 80100dc:	4330      	orrs	r0, r6
 80100de:	f84a 0b04 	str.w	r0, [sl], #4
 80100e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80100e6:	459c      	cmp	ip, r3
 80100e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80100ec:	d814      	bhi.n	8010118 <__lshift+0x94>
 80100ee:	6048      	str	r0, [r1, #4]
 80100f0:	b108      	cbz	r0, 80100f6 <__lshift+0x72>
 80100f2:	f109 0502 	add.w	r5, r9, #2
 80100f6:	3d01      	subs	r5, #1
 80100f8:	4638      	mov	r0, r7
 80100fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80100fe:	4621      	mov	r1, r4
 8010100:	f7ff fdf4 	bl	800fcec <_Bfree>
 8010104:	4640      	mov	r0, r8
 8010106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801010a:	3101      	adds	r1, #1
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	e7c7      	b.n	80100a0 <__lshift+0x1c>
 8010110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010114:	3301      	adds	r3, #1
 8010116:	e7cd      	b.n	80100b4 <__lshift+0x30>
 8010118:	4651      	mov	r1, sl
 801011a:	e7dc      	b.n	80100d6 <__lshift+0x52>
 801011c:	3904      	subs	r1, #4
 801011e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010122:	f841 2f04 	str.w	r2, [r1, #4]!
 8010126:	459c      	cmp	ip, r3
 8010128:	d8f9      	bhi.n	801011e <__lshift+0x9a>
 801012a:	e7e4      	b.n	80100f6 <__lshift+0x72>

0801012c <__mcmp>:
 801012c:	6903      	ldr	r3, [r0, #16]
 801012e:	690a      	ldr	r2, [r1, #16]
 8010130:	1a9b      	subs	r3, r3, r2
 8010132:	b530      	push	{r4, r5, lr}
 8010134:	d10c      	bne.n	8010150 <__mcmp+0x24>
 8010136:	0092      	lsls	r2, r2, #2
 8010138:	3014      	adds	r0, #20
 801013a:	3114      	adds	r1, #20
 801013c:	1884      	adds	r4, r0, r2
 801013e:	4411      	add	r1, r2
 8010140:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010144:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010148:	4295      	cmp	r5, r2
 801014a:	d003      	beq.n	8010154 <__mcmp+0x28>
 801014c:	d305      	bcc.n	801015a <__mcmp+0x2e>
 801014e:	2301      	movs	r3, #1
 8010150:	4618      	mov	r0, r3
 8010152:	bd30      	pop	{r4, r5, pc}
 8010154:	42a0      	cmp	r0, r4
 8010156:	d3f3      	bcc.n	8010140 <__mcmp+0x14>
 8010158:	e7fa      	b.n	8010150 <__mcmp+0x24>
 801015a:	f04f 33ff 	mov.w	r3, #4294967295
 801015e:	e7f7      	b.n	8010150 <__mcmp+0x24>

08010160 <__mdiff>:
 8010160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010164:	460d      	mov	r5, r1
 8010166:	4607      	mov	r7, r0
 8010168:	4611      	mov	r1, r2
 801016a:	4628      	mov	r0, r5
 801016c:	4614      	mov	r4, r2
 801016e:	f7ff ffdd 	bl	801012c <__mcmp>
 8010172:	1e06      	subs	r6, r0, #0
 8010174:	d108      	bne.n	8010188 <__mdiff+0x28>
 8010176:	4631      	mov	r1, r6
 8010178:	4638      	mov	r0, r7
 801017a:	f7ff fd83 	bl	800fc84 <_Balloc>
 801017e:	2301      	movs	r3, #1
 8010180:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010188:	bfa4      	itt	ge
 801018a:	4623      	movge	r3, r4
 801018c:	462c      	movge	r4, r5
 801018e:	4638      	mov	r0, r7
 8010190:	6861      	ldr	r1, [r4, #4]
 8010192:	bfa6      	itte	ge
 8010194:	461d      	movge	r5, r3
 8010196:	2600      	movge	r6, #0
 8010198:	2601      	movlt	r6, #1
 801019a:	f7ff fd73 	bl	800fc84 <_Balloc>
 801019e:	692b      	ldr	r3, [r5, #16]
 80101a0:	60c6      	str	r6, [r0, #12]
 80101a2:	6926      	ldr	r6, [r4, #16]
 80101a4:	f105 0914 	add.w	r9, r5, #20
 80101a8:	f104 0214 	add.w	r2, r4, #20
 80101ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80101b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80101b4:	f100 0514 	add.w	r5, r0, #20
 80101b8:	f04f 0e00 	mov.w	lr, #0
 80101bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80101c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80101c4:	fa1e f18a 	uxtah	r1, lr, sl
 80101c8:	b2a3      	uxth	r3, r4
 80101ca:	1ac9      	subs	r1, r1, r3
 80101cc:	0c23      	lsrs	r3, r4, #16
 80101ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80101d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80101d6:	b289      	uxth	r1, r1
 80101d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80101dc:	45c8      	cmp	r8, r9
 80101de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80101e2:	4694      	mov	ip, r2
 80101e4:	f845 3b04 	str.w	r3, [r5], #4
 80101e8:	d8e8      	bhi.n	80101bc <__mdiff+0x5c>
 80101ea:	45bc      	cmp	ip, r7
 80101ec:	d304      	bcc.n	80101f8 <__mdiff+0x98>
 80101ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80101f2:	b183      	cbz	r3, 8010216 <__mdiff+0xb6>
 80101f4:	6106      	str	r6, [r0, #16]
 80101f6:	e7c5      	b.n	8010184 <__mdiff+0x24>
 80101f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80101fc:	fa1e f381 	uxtah	r3, lr, r1
 8010200:	141a      	asrs	r2, r3, #16
 8010202:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010206:	b29b      	uxth	r3, r3
 8010208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801020c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010210:	f845 3b04 	str.w	r3, [r5], #4
 8010214:	e7e9      	b.n	80101ea <__mdiff+0x8a>
 8010216:	3e01      	subs	r6, #1
 8010218:	e7e9      	b.n	80101ee <__mdiff+0x8e>
	...

0801021c <__ulp>:
 801021c:	4b12      	ldr	r3, [pc, #72]	; (8010268 <__ulp+0x4c>)
 801021e:	ee10 2a90 	vmov	r2, s1
 8010222:	401a      	ands	r2, r3
 8010224:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010228:	2b00      	cmp	r3, #0
 801022a:	dd04      	ble.n	8010236 <__ulp+0x1a>
 801022c:	2000      	movs	r0, #0
 801022e:	4619      	mov	r1, r3
 8010230:	ec41 0b10 	vmov	d0, r0, r1
 8010234:	4770      	bx	lr
 8010236:	425b      	negs	r3, r3
 8010238:	151b      	asrs	r3, r3, #20
 801023a:	2b13      	cmp	r3, #19
 801023c:	f04f 0000 	mov.w	r0, #0
 8010240:	f04f 0100 	mov.w	r1, #0
 8010244:	dc04      	bgt.n	8010250 <__ulp+0x34>
 8010246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801024a:	fa42 f103 	asr.w	r1, r2, r3
 801024e:	e7ef      	b.n	8010230 <__ulp+0x14>
 8010250:	3b14      	subs	r3, #20
 8010252:	2b1e      	cmp	r3, #30
 8010254:	f04f 0201 	mov.w	r2, #1
 8010258:	bfda      	itte	le
 801025a:	f1c3 031f 	rsble	r3, r3, #31
 801025e:	fa02 f303 	lslle.w	r3, r2, r3
 8010262:	4613      	movgt	r3, r2
 8010264:	4618      	mov	r0, r3
 8010266:	e7e3      	b.n	8010230 <__ulp+0x14>
 8010268:	7ff00000 	.word	0x7ff00000

0801026c <__b2d>:
 801026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026e:	6905      	ldr	r5, [r0, #16]
 8010270:	f100 0714 	add.w	r7, r0, #20
 8010274:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010278:	1f2e      	subs	r6, r5, #4
 801027a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801027e:	4620      	mov	r0, r4
 8010280:	f7ff fdc4 	bl	800fe0c <__hi0bits>
 8010284:	f1c0 0320 	rsb	r3, r0, #32
 8010288:	280a      	cmp	r0, #10
 801028a:	600b      	str	r3, [r1, #0]
 801028c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010304 <__b2d+0x98>
 8010290:	dc14      	bgt.n	80102bc <__b2d+0x50>
 8010292:	f1c0 0e0b 	rsb	lr, r0, #11
 8010296:	fa24 f10e 	lsr.w	r1, r4, lr
 801029a:	42b7      	cmp	r7, r6
 801029c:	ea41 030c 	orr.w	r3, r1, ip
 80102a0:	bf34      	ite	cc
 80102a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80102a6:	2100      	movcs	r1, #0
 80102a8:	3015      	adds	r0, #21
 80102aa:	fa04 f000 	lsl.w	r0, r4, r0
 80102ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80102b2:	ea40 0201 	orr.w	r2, r0, r1
 80102b6:	ec43 2b10 	vmov	d0, r2, r3
 80102ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102bc:	42b7      	cmp	r7, r6
 80102be:	bf3a      	itte	cc
 80102c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80102c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80102c8:	2100      	movcs	r1, #0
 80102ca:	380b      	subs	r0, #11
 80102cc:	d015      	beq.n	80102fa <__b2d+0x8e>
 80102ce:	4084      	lsls	r4, r0
 80102d0:	f1c0 0520 	rsb	r5, r0, #32
 80102d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80102d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80102dc:	42be      	cmp	r6, r7
 80102de:	fa21 fc05 	lsr.w	ip, r1, r5
 80102e2:	ea44 030c 	orr.w	r3, r4, ip
 80102e6:	bf8c      	ite	hi
 80102e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80102ec:	2400      	movls	r4, #0
 80102ee:	fa01 f000 	lsl.w	r0, r1, r0
 80102f2:	40ec      	lsrs	r4, r5
 80102f4:	ea40 0204 	orr.w	r2, r0, r4
 80102f8:	e7dd      	b.n	80102b6 <__b2d+0x4a>
 80102fa:	ea44 030c 	orr.w	r3, r4, ip
 80102fe:	460a      	mov	r2, r1
 8010300:	e7d9      	b.n	80102b6 <__b2d+0x4a>
 8010302:	bf00      	nop
 8010304:	3ff00000 	.word	0x3ff00000

08010308 <__d2b>:
 8010308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801030c:	460e      	mov	r6, r1
 801030e:	2101      	movs	r1, #1
 8010310:	ec59 8b10 	vmov	r8, r9, d0
 8010314:	4615      	mov	r5, r2
 8010316:	f7ff fcb5 	bl	800fc84 <_Balloc>
 801031a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801031e:	4607      	mov	r7, r0
 8010320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010324:	bb34      	cbnz	r4, 8010374 <__d2b+0x6c>
 8010326:	9301      	str	r3, [sp, #4]
 8010328:	f1b8 0300 	subs.w	r3, r8, #0
 801032c:	d027      	beq.n	801037e <__d2b+0x76>
 801032e:	a802      	add	r0, sp, #8
 8010330:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010334:	f7ff fd89 	bl	800fe4a <__lo0bits>
 8010338:	9900      	ldr	r1, [sp, #0]
 801033a:	b1f0      	cbz	r0, 801037a <__d2b+0x72>
 801033c:	9a01      	ldr	r2, [sp, #4]
 801033e:	f1c0 0320 	rsb	r3, r0, #32
 8010342:	fa02 f303 	lsl.w	r3, r2, r3
 8010346:	430b      	orrs	r3, r1
 8010348:	40c2      	lsrs	r2, r0
 801034a:	617b      	str	r3, [r7, #20]
 801034c:	9201      	str	r2, [sp, #4]
 801034e:	9b01      	ldr	r3, [sp, #4]
 8010350:	61bb      	str	r3, [r7, #24]
 8010352:	2b00      	cmp	r3, #0
 8010354:	bf14      	ite	ne
 8010356:	2102      	movne	r1, #2
 8010358:	2101      	moveq	r1, #1
 801035a:	6139      	str	r1, [r7, #16]
 801035c:	b1c4      	cbz	r4, 8010390 <__d2b+0x88>
 801035e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010362:	4404      	add	r4, r0
 8010364:	6034      	str	r4, [r6, #0]
 8010366:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801036a:	6028      	str	r0, [r5, #0]
 801036c:	4638      	mov	r0, r7
 801036e:	b003      	add	sp, #12
 8010370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010378:	e7d5      	b.n	8010326 <__d2b+0x1e>
 801037a:	6179      	str	r1, [r7, #20]
 801037c:	e7e7      	b.n	801034e <__d2b+0x46>
 801037e:	a801      	add	r0, sp, #4
 8010380:	f7ff fd63 	bl	800fe4a <__lo0bits>
 8010384:	9b01      	ldr	r3, [sp, #4]
 8010386:	617b      	str	r3, [r7, #20]
 8010388:	2101      	movs	r1, #1
 801038a:	6139      	str	r1, [r7, #16]
 801038c:	3020      	adds	r0, #32
 801038e:	e7e5      	b.n	801035c <__d2b+0x54>
 8010390:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010394:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010398:	6030      	str	r0, [r6, #0]
 801039a:	6918      	ldr	r0, [r3, #16]
 801039c:	f7ff fd36 	bl	800fe0c <__hi0bits>
 80103a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80103a4:	e7e1      	b.n	801036a <__d2b+0x62>

080103a6 <__ratio>:
 80103a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103aa:	4688      	mov	r8, r1
 80103ac:	4669      	mov	r1, sp
 80103ae:	4681      	mov	r9, r0
 80103b0:	f7ff ff5c 	bl	801026c <__b2d>
 80103b4:	a901      	add	r1, sp, #4
 80103b6:	4640      	mov	r0, r8
 80103b8:	ec57 6b10 	vmov	r6, r7, d0
 80103bc:	ee10 4a10 	vmov	r4, s0
 80103c0:	f7ff ff54 	bl	801026c <__b2d>
 80103c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80103cc:	eba3 0c02 	sub.w	ip, r3, r2
 80103d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80103d4:	1a9b      	subs	r3, r3, r2
 80103d6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80103da:	ec51 0b10 	vmov	r0, r1, d0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	ee10 aa10 	vmov	sl, s0
 80103e4:	bfce      	itee	gt
 80103e6:	463a      	movgt	r2, r7
 80103e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80103ec:	460a      	movle	r2, r1
 80103ee:	463d      	mov	r5, r7
 80103f0:	468b      	mov	fp, r1
 80103f2:	bfcc      	ite	gt
 80103f4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80103f8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80103fc:	ec45 4b17 	vmov	d7, r4, r5
 8010400:	ec4b ab16 	vmov	d6, sl, fp
 8010404:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8010408:	b003      	add	sp, #12
 801040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801040e <__copybits>:
 801040e:	3901      	subs	r1, #1
 8010410:	b510      	push	{r4, lr}
 8010412:	1149      	asrs	r1, r1, #5
 8010414:	6914      	ldr	r4, [r2, #16]
 8010416:	3101      	adds	r1, #1
 8010418:	f102 0314 	add.w	r3, r2, #20
 801041c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010420:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010424:	42a3      	cmp	r3, r4
 8010426:	4602      	mov	r2, r0
 8010428:	d303      	bcc.n	8010432 <__copybits+0x24>
 801042a:	2300      	movs	r3, #0
 801042c:	428a      	cmp	r2, r1
 801042e:	d305      	bcc.n	801043c <__copybits+0x2e>
 8010430:	bd10      	pop	{r4, pc}
 8010432:	f853 2b04 	ldr.w	r2, [r3], #4
 8010436:	f840 2b04 	str.w	r2, [r0], #4
 801043a:	e7f3      	b.n	8010424 <__copybits+0x16>
 801043c:	f842 3b04 	str.w	r3, [r2], #4
 8010440:	e7f4      	b.n	801042c <__copybits+0x1e>

08010442 <__any_on>:
 8010442:	f100 0214 	add.w	r2, r0, #20
 8010446:	6900      	ldr	r0, [r0, #16]
 8010448:	114b      	asrs	r3, r1, #5
 801044a:	4298      	cmp	r0, r3
 801044c:	b510      	push	{r4, lr}
 801044e:	db11      	blt.n	8010474 <__any_on+0x32>
 8010450:	dd0a      	ble.n	8010468 <__any_on+0x26>
 8010452:	f011 011f 	ands.w	r1, r1, #31
 8010456:	d007      	beq.n	8010468 <__any_on+0x26>
 8010458:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801045c:	fa24 f001 	lsr.w	r0, r4, r1
 8010460:	fa00 f101 	lsl.w	r1, r0, r1
 8010464:	428c      	cmp	r4, r1
 8010466:	d10b      	bne.n	8010480 <__any_on+0x3e>
 8010468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801046c:	4293      	cmp	r3, r2
 801046e:	d803      	bhi.n	8010478 <__any_on+0x36>
 8010470:	2000      	movs	r0, #0
 8010472:	bd10      	pop	{r4, pc}
 8010474:	4603      	mov	r3, r0
 8010476:	e7f7      	b.n	8010468 <__any_on+0x26>
 8010478:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801047c:	2900      	cmp	r1, #0
 801047e:	d0f5      	beq.n	801046c <__any_on+0x2a>
 8010480:	2001      	movs	r0, #1
 8010482:	e7f6      	b.n	8010472 <__any_on+0x30>

08010484 <_calloc_r>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	fb02 f401 	mul.w	r4, r2, r1
 801048a:	4621      	mov	r1, r4
 801048c:	f000 f808 	bl	80104a0 <_malloc_r>
 8010490:	4605      	mov	r5, r0
 8010492:	b118      	cbz	r0, 801049c <_calloc_r+0x18>
 8010494:	4622      	mov	r2, r4
 8010496:	2100      	movs	r1, #0
 8010498:	f7fe fab9 	bl	800ea0e <memset>
 801049c:	4628      	mov	r0, r5
 801049e:	bd38      	pop	{r3, r4, r5, pc}

080104a0 <_malloc_r>:
 80104a0:	b570      	push	{r4, r5, r6, lr}
 80104a2:	1ccd      	adds	r5, r1, #3
 80104a4:	f025 0503 	bic.w	r5, r5, #3
 80104a8:	3508      	adds	r5, #8
 80104aa:	2d0c      	cmp	r5, #12
 80104ac:	bf38      	it	cc
 80104ae:	250c      	movcc	r5, #12
 80104b0:	2d00      	cmp	r5, #0
 80104b2:	4606      	mov	r6, r0
 80104b4:	db01      	blt.n	80104ba <_malloc_r+0x1a>
 80104b6:	42a9      	cmp	r1, r5
 80104b8:	d903      	bls.n	80104c2 <_malloc_r+0x22>
 80104ba:	230c      	movs	r3, #12
 80104bc:	6033      	str	r3, [r6, #0]
 80104be:	2000      	movs	r0, #0
 80104c0:	bd70      	pop	{r4, r5, r6, pc}
 80104c2:	f000 f87f 	bl	80105c4 <__malloc_lock>
 80104c6:	4a21      	ldr	r2, [pc, #132]	; (801054c <_malloc_r+0xac>)
 80104c8:	6814      	ldr	r4, [r2, #0]
 80104ca:	4621      	mov	r1, r4
 80104cc:	b991      	cbnz	r1, 80104f4 <_malloc_r+0x54>
 80104ce:	4c20      	ldr	r4, [pc, #128]	; (8010550 <_malloc_r+0xb0>)
 80104d0:	6823      	ldr	r3, [r4, #0]
 80104d2:	b91b      	cbnz	r3, 80104dc <_malloc_r+0x3c>
 80104d4:	4630      	mov	r0, r6
 80104d6:	f000 f83d 	bl	8010554 <_sbrk_r>
 80104da:	6020      	str	r0, [r4, #0]
 80104dc:	4629      	mov	r1, r5
 80104de:	4630      	mov	r0, r6
 80104e0:	f000 f838 	bl	8010554 <_sbrk_r>
 80104e4:	1c43      	adds	r3, r0, #1
 80104e6:	d124      	bne.n	8010532 <_malloc_r+0x92>
 80104e8:	230c      	movs	r3, #12
 80104ea:	6033      	str	r3, [r6, #0]
 80104ec:	4630      	mov	r0, r6
 80104ee:	f000 f86a 	bl	80105c6 <__malloc_unlock>
 80104f2:	e7e4      	b.n	80104be <_malloc_r+0x1e>
 80104f4:	680b      	ldr	r3, [r1, #0]
 80104f6:	1b5b      	subs	r3, r3, r5
 80104f8:	d418      	bmi.n	801052c <_malloc_r+0x8c>
 80104fa:	2b0b      	cmp	r3, #11
 80104fc:	d90f      	bls.n	801051e <_malloc_r+0x7e>
 80104fe:	600b      	str	r3, [r1, #0]
 8010500:	50cd      	str	r5, [r1, r3]
 8010502:	18cc      	adds	r4, r1, r3
 8010504:	4630      	mov	r0, r6
 8010506:	f000 f85e 	bl	80105c6 <__malloc_unlock>
 801050a:	f104 000b 	add.w	r0, r4, #11
 801050e:	1d23      	adds	r3, r4, #4
 8010510:	f020 0007 	bic.w	r0, r0, #7
 8010514:	1ac3      	subs	r3, r0, r3
 8010516:	d0d3      	beq.n	80104c0 <_malloc_r+0x20>
 8010518:	425a      	negs	r2, r3
 801051a:	50e2      	str	r2, [r4, r3]
 801051c:	e7d0      	b.n	80104c0 <_malloc_r+0x20>
 801051e:	428c      	cmp	r4, r1
 8010520:	684b      	ldr	r3, [r1, #4]
 8010522:	bf16      	itet	ne
 8010524:	6063      	strne	r3, [r4, #4]
 8010526:	6013      	streq	r3, [r2, #0]
 8010528:	460c      	movne	r4, r1
 801052a:	e7eb      	b.n	8010504 <_malloc_r+0x64>
 801052c:	460c      	mov	r4, r1
 801052e:	6849      	ldr	r1, [r1, #4]
 8010530:	e7cc      	b.n	80104cc <_malloc_r+0x2c>
 8010532:	1cc4      	adds	r4, r0, #3
 8010534:	f024 0403 	bic.w	r4, r4, #3
 8010538:	42a0      	cmp	r0, r4
 801053a:	d005      	beq.n	8010548 <_malloc_r+0xa8>
 801053c:	1a21      	subs	r1, r4, r0
 801053e:	4630      	mov	r0, r6
 8010540:	f000 f808 	bl	8010554 <_sbrk_r>
 8010544:	3001      	adds	r0, #1
 8010546:	d0cf      	beq.n	80104e8 <_malloc_r+0x48>
 8010548:	6025      	str	r5, [r4, #0]
 801054a:	e7db      	b.n	8010504 <_malloc_r+0x64>
 801054c:	24000364 	.word	0x24000364
 8010550:	24000368 	.word	0x24000368

08010554 <_sbrk_r>:
 8010554:	b538      	push	{r3, r4, r5, lr}
 8010556:	4c06      	ldr	r4, [pc, #24]	; (8010570 <_sbrk_r+0x1c>)
 8010558:	2300      	movs	r3, #0
 801055a:	4605      	mov	r5, r0
 801055c:	4608      	mov	r0, r1
 801055e:	6023      	str	r3, [r4, #0]
 8010560:	f7f2 f822 	bl	80025a8 <_sbrk>
 8010564:	1c43      	adds	r3, r0, #1
 8010566:	d102      	bne.n	801056e <_sbrk_r+0x1a>
 8010568:	6823      	ldr	r3, [r4, #0]
 801056a:	b103      	cbz	r3, 801056e <_sbrk_r+0x1a>
 801056c:	602b      	str	r3, [r5, #0]
 801056e:	bd38      	pop	{r3, r4, r5, pc}
 8010570:	24000d98 	.word	0x24000d98

08010574 <strncmp>:
 8010574:	b510      	push	{r4, lr}
 8010576:	b16a      	cbz	r2, 8010594 <strncmp+0x20>
 8010578:	3901      	subs	r1, #1
 801057a:	1884      	adds	r4, r0, r2
 801057c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010580:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010584:	4293      	cmp	r3, r2
 8010586:	d103      	bne.n	8010590 <strncmp+0x1c>
 8010588:	42a0      	cmp	r0, r4
 801058a:	d001      	beq.n	8010590 <strncmp+0x1c>
 801058c:	2b00      	cmp	r3, #0
 801058e:	d1f5      	bne.n	801057c <strncmp+0x8>
 8010590:	1a98      	subs	r0, r3, r2
 8010592:	bd10      	pop	{r4, pc}
 8010594:	4610      	mov	r0, r2
 8010596:	e7fc      	b.n	8010592 <strncmp+0x1e>

08010598 <__ascii_wctomb>:
 8010598:	b149      	cbz	r1, 80105ae <__ascii_wctomb+0x16>
 801059a:	2aff      	cmp	r2, #255	; 0xff
 801059c:	bf85      	ittet	hi
 801059e:	238a      	movhi	r3, #138	; 0x8a
 80105a0:	6003      	strhi	r3, [r0, #0]
 80105a2:	700a      	strbls	r2, [r1, #0]
 80105a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80105a8:	bf98      	it	ls
 80105aa:	2001      	movls	r0, #1
 80105ac:	4770      	bx	lr
 80105ae:	4608      	mov	r0, r1
 80105b0:	4770      	bx	lr
	...

080105b4 <malloc>:
 80105b4:	4b02      	ldr	r3, [pc, #8]	; (80105c0 <malloc+0xc>)
 80105b6:	4601      	mov	r1, r0
 80105b8:	6818      	ldr	r0, [r3, #0]
 80105ba:	f7ff bf71 	b.w	80104a0 <_malloc_r>
 80105be:	bf00      	nop
 80105c0:	24000110 	.word	0x24000110

080105c4 <__malloc_lock>:
 80105c4:	4770      	bx	lr

080105c6 <__malloc_unlock>:
 80105c6:	4770      	bx	lr

080105c8 <asin>:
 80105c8:	b510      	push	{r4, lr}
 80105ca:	ed2d 8b04 	vpush	{d8-d9}
 80105ce:	eeb0 8b40 	vmov.f64	d8, d0
 80105d2:	4c22      	ldr	r4, [pc, #136]	; (801065c <asin+0x94>)
 80105d4:	b08a      	sub	sp, #40	; 0x28
 80105d6:	f000 f9c3 	bl	8010960 <__ieee754_asin>
 80105da:	f994 3000 	ldrsb.w	r3, [r4]
 80105de:	eeb0 9b40 	vmov.f64	d9, d0
 80105e2:	3301      	adds	r3, #1
 80105e4:	d034      	beq.n	8010650 <asin+0x88>
 80105e6:	eeb4 8b48 	vcmp.f64	d8, d8
 80105ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ee:	d62f      	bvs.n	8010650 <asin+0x88>
 80105f0:	eeb0 0b48 	vmov.f64	d0, d8
 80105f4:	f000 fe59 	bl	80112aa <fabs>
 80105f8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80105fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010604:	dd24      	ble.n	8010650 <asin+0x88>
 8010606:	2301      	movs	r3, #1
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	4b15      	ldr	r3, [pc, #84]	; (8010660 <asin+0x98>)
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	4815      	ldr	r0, [pc, #84]	; (8010664 <asin+0x9c>)
 8010610:	2300      	movs	r3, #0
 8010612:	9308      	str	r3, [sp, #32]
 8010614:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010618:	ed8d 8b02 	vstr	d8, [sp, #8]
 801061c:	f000 fe58 	bl	80112d0 <nan>
 8010620:	f994 3000 	ldrsb.w	r3, [r4]
 8010624:	2b02      	cmp	r3, #2
 8010626:	ed8d 0b06 	vstr	d0, [sp, #24]
 801062a:	d104      	bne.n	8010636 <asin+0x6e>
 801062c:	f7fe f9ba 	bl	800e9a4 <__errno>
 8010630:	2321      	movs	r3, #33	; 0x21
 8010632:	6003      	str	r3, [r0, #0]
 8010634:	e004      	b.n	8010640 <asin+0x78>
 8010636:	4668      	mov	r0, sp
 8010638:	f000 fe48 	bl	80112cc <matherr>
 801063c:	2800      	cmp	r0, #0
 801063e:	d0f5      	beq.n	801062c <asin+0x64>
 8010640:	9b08      	ldr	r3, [sp, #32]
 8010642:	b11b      	cbz	r3, 801064c <asin+0x84>
 8010644:	f7fe f9ae 	bl	800e9a4 <__errno>
 8010648:	9b08      	ldr	r3, [sp, #32]
 801064a:	6003      	str	r3, [r0, #0]
 801064c:	ed9d 9b06 	vldr	d9, [sp, #24]
 8010650:	eeb0 0b49 	vmov.f64	d0, d9
 8010654:	b00a      	add	sp, #40	; 0x28
 8010656:	ecbd 8b04 	vpop	{d8-d9}
 801065a:	bd10      	pop	{r4, pc}
 801065c:	240002e0 	.word	0x240002e0
 8010660:	080118c5 	.word	0x080118c5
 8010664:	080116c1 	.word	0x080116c1

08010668 <pow>:
 8010668:	b570      	push	{r4, r5, r6, lr}
 801066a:	ed2d 8b0a 	vpush	{d8-d12}
 801066e:	eeb0 9b40 	vmov.f64	d9, d0
 8010672:	eeb0 8b41 	vmov.f64	d8, d1
 8010676:	4c8c      	ldr	r4, [pc, #560]	; (80108a8 <pow+0x240>)
 8010678:	b08a      	sub	sp, #40	; 0x28
 801067a:	f000 fa8d 	bl	8010b98 <__ieee754_pow>
 801067e:	f994 3000 	ldrsb.w	r3, [r4]
 8010682:	eeb0 ab40 	vmov.f64	d10, d0
 8010686:	1c5a      	adds	r2, r3, #1
 8010688:	4626      	mov	r6, r4
 801068a:	d04b      	beq.n	8010724 <pow+0xbc>
 801068c:	eeb4 8b48 	vcmp.f64	d8, d8
 8010690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010694:	d646      	bvs.n	8010724 <pow+0xbc>
 8010696:	eeb4 9b49 	vcmp.f64	d9, d9
 801069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801069e:	d719      	bvc.n	80106d4 <pow+0x6c>
 80106a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80106a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a8:	d13c      	bne.n	8010724 <pow+0xbc>
 80106aa:	2201      	movs	r2, #1
 80106ac:	9200      	str	r2, [sp, #0]
 80106ae:	497f      	ldr	r1, [pc, #508]	; (80108ac <pow+0x244>)
 80106b0:	4a7f      	ldr	r2, [pc, #508]	; (80108b0 <pow+0x248>)
 80106b2:	9201      	str	r2, [sp, #4]
 80106b4:	2000      	movs	r0, #0
 80106b6:	2200      	movs	r2, #0
 80106b8:	2b02      	cmp	r3, #2
 80106ba:	9208      	str	r2, [sp, #32]
 80106bc:	ed8d 9b02 	vstr	d9, [sp, #8]
 80106c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80106c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80106c8:	d02a      	beq.n	8010720 <pow+0xb8>
 80106ca:	4668      	mov	r0, sp
 80106cc:	f000 fdfe 	bl	80112cc <matherr>
 80106d0:	bb00      	cbnz	r0, 8010714 <pow+0xac>
 80106d2:	e04e      	b.n	8010772 <pow+0x10a>
 80106d4:	ed9f bb72 	vldr	d11, [pc, #456]	; 80108a0 <pow+0x238>
 80106d8:	eeb4 9b4b 	vcmp.f64	d9, d11
 80106dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e0:	eeb0 cb4b 	vmov.f64	d12, d11
 80106e4:	d14a      	bne.n	801077c <pow+0x114>
 80106e6:	eeb4 8b4b 	vcmp.f64	d8, d11
 80106ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ee:	d11f      	bne.n	8010730 <pow+0xc8>
 80106f0:	2201      	movs	r2, #1
 80106f2:	9200      	str	r2, [sp, #0]
 80106f4:	4a6e      	ldr	r2, [pc, #440]	; (80108b0 <pow+0x248>)
 80106f6:	9201      	str	r2, [sp, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	9208      	str	r2, [sp, #32]
 80106fc:	ed8d 9b02 	vstr	d9, [sp, #8]
 8010700:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010704:	ed8d bb06 	vstr	d11, [sp, #24]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d0de      	beq.n	80106ca <pow+0x62>
 801070c:	4b67      	ldr	r3, [pc, #412]	; (80108ac <pow+0x244>)
 801070e:	2200      	movs	r2, #0
 8010710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010714:	9b08      	ldr	r3, [sp, #32]
 8010716:	b11b      	cbz	r3, 8010720 <pow+0xb8>
 8010718:	f7fe f944 	bl	800e9a4 <__errno>
 801071c:	9b08      	ldr	r3, [sp, #32]
 801071e:	6003      	str	r3, [r0, #0]
 8010720:	ed9d ab06 	vldr	d10, [sp, #24]
 8010724:	eeb0 0b4a 	vmov.f64	d0, d10
 8010728:	b00a      	add	sp, #40	; 0x28
 801072a:	ecbd 8b0a 	vpop	{d8-d12}
 801072e:	bd70      	pop	{r4, r5, r6, pc}
 8010730:	eeb0 0b48 	vmov.f64	d0, d8
 8010734:	f000 fdc2 	bl	80112bc <finite>
 8010738:	2800      	cmp	r0, #0
 801073a:	d0f3      	beq.n	8010724 <pow+0xbc>
 801073c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8010740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010744:	d5ee      	bpl.n	8010724 <pow+0xbc>
 8010746:	2301      	movs	r3, #1
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	4b59      	ldr	r3, [pc, #356]	; (80108b0 <pow+0x248>)
 801074c:	9301      	str	r3, [sp, #4]
 801074e:	2300      	movs	r3, #0
 8010750:	9308      	str	r3, [sp, #32]
 8010752:	f994 3000 	ldrsb.w	r3, [r4]
 8010756:	ed8d 9b02 	vstr	d9, [sp, #8]
 801075a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801075e:	b913      	cbnz	r3, 8010766 <pow+0xfe>
 8010760:	ed8d bb06 	vstr	d11, [sp, #24]
 8010764:	e7b1      	b.n	80106ca <pow+0x62>
 8010766:	4953      	ldr	r1, [pc, #332]	; (80108b4 <pow+0x24c>)
 8010768:	2000      	movs	r0, #0
 801076a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801076e:	2b02      	cmp	r3, #2
 8010770:	d1ab      	bne.n	80106ca <pow+0x62>
 8010772:	f7fe f917 	bl	800e9a4 <__errno>
 8010776:	2321      	movs	r3, #33	; 0x21
 8010778:	6003      	str	r3, [r0, #0]
 801077a:	e7cb      	b.n	8010714 <pow+0xac>
 801077c:	f000 fd9e 	bl	80112bc <finite>
 8010780:	4605      	mov	r5, r0
 8010782:	2800      	cmp	r0, #0
 8010784:	d164      	bne.n	8010850 <pow+0x1e8>
 8010786:	eeb0 0b49 	vmov.f64	d0, d9
 801078a:	f000 fd97 	bl	80112bc <finite>
 801078e:	2800      	cmp	r0, #0
 8010790:	d05e      	beq.n	8010850 <pow+0x1e8>
 8010792:	eeb0 0b48 	vmov.f64	d0, d8
 8010796:	f000 fd91 	bl	80112bc <finite>
 801079a:	2800      	cmp	r0, #0
 801079c:	d058      	beq.n	8010850 <pow+0x1e8>
 801079e:	eeb4 ab4a 	vcmp.f64	d10, d10
 80107a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107a6:	f994 3000 	ldrsb.w	r3, [r4]
 80107aa:	4a41      	ldr	r2, [pc, #260]	; (80108b0 <pow+0x248>)
 80107ac:	d70e      	bvc.n	80107cc <pow+0x164>
 80107ae:	2101      	movs	r1, #1
 80107b0:	e9cd 1200 	strd	r1, r2, [sp]
 80107b4:	9508      	str	r5, [sp, #32]
 80107b6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80107ba:	ed8d 8b04 	vstr	d8, [sp, #16]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d0ce      	beq.n	8010760 <pow+0xf8>
 80107c2:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 80107c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80107ca:	e7d0      	b.n	801076e <pow+0x106>
 80107cc:	2103      	movs	r1, #3
 80107ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 80107d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80107d6:	ee28 8b07 	vmul.f64	d8, d8, d7
 80107da:	e9cd 1200 	strd	r1, r2, [sp]
 80107de:	9508      	str	r5, [sp, #32]
 80107e0:	ed8d 9b02 	vstr	d9, [sp, #8]
 80107e4:	b9fb      	cbnz	r3, 8010826 <pow+0x1be>
 80107e6:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80107ea:	4b33      	ldr	r3, [pc, #204]	; (80108b8 <pow+0x250>)
 80107ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80107f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80107f8:	d54b      	bpl.n	8010892 <pow+0x22a>
 80107fa:	eeb0 0b48 	vmov.f64	d0, d8
 80107fe:	f000 fd6f 	bl	80112e0 <rint>
 8010802:	eeb4 0b48 	vcmp.f64	d0, d8
 8010806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080a:	d004      	beq.n	8010816 <pow+0x1ae>
 801080c:	4b2b      	ldr	r3, [pc, #172]	; (80108bc <pow+0x254>)
 801080e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010812:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010816:	f996 3000 	ldrsb.w	r3, [r6]
 801081a:	2b02      	cmp	r3, #2
 801081c:	d139      	bne.n	8010892 <pow+0x22a>
 801081e:	f7fe f8c1 	bl	800e9a4 <__errno>
 8010822:	2322      	movs	r3, #34	; 0x22
 8010824:	e7a8      	b.n	8010778 <pow+0x110>
 8010826:	4b26      	ldr	r3, [pc, #152]	; (80108c0 <pow+0x258>)
 8010828:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801082c:	2200      	movs	r2, #0
 801082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010832:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010836:	d5ee      	bpl.n	8010816 <pow+0x1ae>
 8010838:	eeb0 0b48 	vmov.f64	d0, d8
 801083c:	f000 fd50 	bl	80112e0 <rint>
 8010840:	eeb4 0b48 	vcmp.f64	d0, d8
 8010844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010848:	d0e5      	beq.n	8010816 <pow+0x1ae>
 801084a:	2200      	movs	r2, #0
 801084c:	4b19      	ldr	r3, [pc, #100]	; (80108b4 <pow+0x24c>)
 801084e:	e7e0      	b.n	8010812 <pow+0x1aa>
 8010850:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8010854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010858:	f47f af64 	bne.w	8010724 <pow+0xbc>
 801085c:	eeb0 0b49 	vmov.f64	d0, d9
 8010860:	f000 fd2c 	bl	80112bc <finite>
 8010864:	2800      	cmp	r0, #0
 8010866:	f43f af5d 	beq.w	8010724 <pow+0xbc>
 801086a:	eeb0 0b48 	vmov.f64	d0, d8
 801086e:	f000 fd25 	bl	80112bc <finite>
 8010872:	2800      	cmp	r0, #0
 8010874:	f43f af56 	beq.w	8010724 <pow+0xbc>
 8010878:	2304      	movs	r3, #4
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	4b0c      	ldr	r3, [pc, #48]	; (80108b0 <pow+0x248>)
 801087e:	9301      	str	r3, [sp, #4]
 8010880:	2300      	movs	r3, #0
 8010882:	9308      	str	r3, [sp, #32]
 8010884:	ed8d 9b02 	vstr	d9, [sp, #8]
 8010888:	ed8d 8b04 	vstr	d8, [sp, #16]
 801088c:	ed8d cb06 	vstr	d12, [sp, #24]
 8010890:	e7c1      	b.n	8010816 <pow+0x1ae>
 8010892:	4668      	mov	r0, sp
 8010894:	f000 fd1a 	bl	80112cc <matherr>
 8010898:	2800      	cmp	r0, #0
 801089a:	f47f af3b 	bne.w	8010714 <pow+0xac>
 801089e:	e7be      	b.n	801081e <pow+0x1b6>
	...
 80108a8:	240002e0 	.word	0x240002e0
 80108ac:	3ff00000 	.word	0x3ff00000
 80108b0:	080118ca 	.word	0x080118ca
 80108b4:	fff00000 	.word	0xfff00000
 80108b8:	47efffff 	.word	0x47efffff
 80108bc:	c7efffff 	.word	0xc7efffff
 80108c0:	7ff00000 	.word	0x7ff00000
 80108c4:	00000000 	.word	0x00000000

080108c8 <sqrt>:
 80108c8:	b500      	push	{lr}
 80108ca:	ed2d 8b02 	vpush	{d8}
 80108ce:	eeb0 8b40 	vmov.f64	d8, d0
 80108d2:	b08b      	sub	sp, #44	; 0x2c
 80108d4:	f000 fce6 	bl	80112a4 <__ieee754_sqrt>
 80108d8:	4b1f      	ldr	r3, [pc, #124]	; (8010958 <sqrt+0x90>)
 80108da:	f993 3000 	ldrsb.w	r3, [r3]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	d024      	beq.n	801092c <sqrt+0x64>
 80108e2:	eeb4 8b48 	vcmp.f64	d8, d8
 80108e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ea:	d61f      	bvs.n	801092c <sqrt+0x64>
 80108ec:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8010950 <sqrt+0x88>
 80108f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80108f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f8:	d518      	bpl.n	801092c <sqrt+0x64>
 80108fa:	2201      	movs	r2, #1
 80108fc:	9200      	str	r2, [sp, #0]
 80108fe:	4a17      	ldr	r2, [pc, #92]	; (801095c <sqrt+0x94>)
 8010900:	9201      	str	r2, [sp, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	9208      	str	r2, [sp, #32]
 8010906:	ed8d 8b04 	vstr	d8, [sp, #16]
 801090a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801090e:	b993      	cbnz	r3, 8010936 <sqrt+0x6e>
 8010910:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010914:	4668      	mov	r0, sp
 8010916:	f000 fcd9 	bl	80112cc <matherr>
 801091a:	b190      	cbz	r0, 8010942 <sqrt+0x7a>
 801091c:	9b08      	ldr	r3, [sp, #32]
 801091e:	b11b      	cbz	r3, 8010928 <sqrt+0x60>
 8010920:	f7fe f840 	bl	800e9a4 <__errno>
 8010924:	9b08      	ldr	r3, [sp, #32]
 8010926:	6003      	str	r3, [r0, #0]
 8010928:	ed9d 0b06 	vldr	d0, [sp, #24]
 801092c:	b00b      	add	sp, #44	; 0x2c
 801092e:	ecbd 8b02 	vpop	{d8}
 8010932:	f85d fb04 	ldr.w	pc, [sp], #4
 8010936:	2b02      	cmp	r3, #2
 8010938:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801093c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8010940:	d1e8      	bne.n	8010914 <sqrt+0x4c>
 8010942:	f7fe f82f 	bl	800e9a4 <__errno>
 8010946:	2321      	movs	r3, #33	; 0x21
 8010948:	6003      	str	r3, [r0, #0]
 801094a:	e7e7      	b.n	801091c <sqrt+0x54>
 801094c:	f3af 8000 	nop.w
	...
 8010958:	240002e0 	.word	0x240002e0
 801095c:	080118ce 	.word	0x080118ce

08010960 <__ieee754_asin>:
 8010960:	b530      	push	{r4, r5, lr}
 8010962:	ee10 5a90 	vmov	r5, s1
 8010966:	ed2d 8b06 	vpush	{d8-d10}
 801096a:	4b87      	ldr	r3, [pc, #540]	; (8010b88 <__ieee754_asin+0x228>)
 801096c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010970:	429c      	cmp	r4, r3
 8010972:	b083      	sub	sp, #12
 8010974:	dd1a      	ble.n	80109ac <__ieee754_asin+0x4c>
 8010976:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801097a:	ee10 3a10 	vmov	r3, s0
 801097e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010982:	4323      	orrs	r3, r4
 8010984:	d10d      	bne.n	80109a2 <__ieee754_asin+0x42>
 8010986:	ed9f 7b62 	vldr	d7, [pc, #392]	; 8010b10 <__ieee754_asin+0x1b0>
 801098a:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8010b18 <__ieee754_asin+0x1b8>
 801098e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010992:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010996:	eeb0 0b47 	vmov.f64	d0, d7
 801099a:	b003      	add	sp, #12
 801099c:	ecbd 8b06 	vpop	{d8-d10}
 80109a0:	bd30      	pop	{r4, r5, pc}
 80109a2:	ee30 7b40 	vsub.f64	d7, d0, d0
 80109a6:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80109aa:	e7f6      	b.n	801099a <__ieee754_asin+0x3a>
 80109ac:	4b77      	ldr	r3, [pc, #476]	; (8010b8c <__ieee754_asin+0x22c>)
 80109ae:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80109b2:	429c      	cmp	r4, r3
 80109b4:	dc0b      	bgt.n	80109ce <__ieee754_asin+0x6e>
 80109b6:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80109ba:	da56      	bge.n	8010a6a <__ieee754_asin+0x10a>
 80109bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010b20 <__ieee754_asin+0x1c0>
 80109c0:	ee30 7b07 	vadd.f64	d7, d0, d7
 80109c4:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80109c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109cc:	dce5      	bgt.n	801099a <__ieee754_asin+0x3a>
 80109ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80109d2:	f000 fc6a 	bl	80112aa <fabs>
 80109d6:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8010b28 <__ieee754_asin+0x1c8>
 80109da:	ee39 0b40 	vsub.f64	d0, d9, d0
 80109de:	ee20 8b08 	vmul.f64	d8, d0, d8
 80109e2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8010b30 <__ieee754_asin+0x1d0>
 80109e6:	eeb0 0b48 	vmov.f64	d0, d8
 80109ea:	eea8 6b07 	vfma.f64	d6, d8, d7
 80109ee:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8010b38 <__ieee754_asin+0x1d8>
 80109f2:	eea6 7b08 	vfma.f64	d7, d6, d8
 80109f6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8010b40 <__ieee754_asin+0x1e0>
 80109fa:	ed9f ab53 	vldr	d10, [pc, #332]	; 8010b48 <__ieee754_asin+0x1e8>
 80109fe:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010a02:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010b50 <__ieee754_asin+0x1f0>
 8010a06:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010a0a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8010b58 <__ieee754_asin+0x1f8>
 8010a0e:	eea7 ab08 	vfma.f64	d10, d7, d8
 8010a12:	ee2a ab08 	vmul.f64	d10, d10, d8
 8010a16:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8010b60 <__ieee754_asin+0x200>
 8010a1a:	eea8 7b06 	vfma.f64	d7, d8, d6
 8010a1e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8010b68 <__ieee754_asin+0x208>
 8010a22:	eea7 6b08 	vfma.f64	d6, d7, d8
 8010a26:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8010b70 <__ieee754_asin+0x210>
 8010a2a:	eea6 7b08 	vfma.f64	d7, d6, d8
 8010a2e:	eea7 9b08 	vfma.f64	d9, d7, d8
 8010a32:	f000 fc37 	bl	80112a4 <__ieee754_sqrt>
 8010a36:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 8010a3a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8010a3e:	4b54      	ldr	r3, [pc, #336]	; (8010b90 <__ieee754_asin+0x230>)
 8010a40:	429c      	cmp	r4, r3
 8010a42:	ed8d 0b00 	vstr	d0, [sp]
 8010a46:	dd3f      	ble.n	8010ac8 <__ieee754_asin+0x168>
 8010a48:	eeb0 7b40 	vmov.f64	d7, d0
 8010a4c:	eea0 7b04 	vfma.f64	d7, d0, d4
 8010a50:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8010b78 <__ieee754_asin+0x218>
 8010a54:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010a58:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010b18 <__ieee754_asin+0x1b8>
 8010a5c:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010a60:	2d00      	cmp	r5, #0
 8010a62:	bfd8      	it	le
 8010a64:	eeb1 0b40 	vnegle.f64	d0, d0
 8010a68:	e797      	b.n	801099a <__ieee754_asin+0x3a>
 8010a6a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8010b28 <__ieee754_asin+0x1c8>
 8010a6e:	ee20 7b00 	vmul.f64	d7, d0, d0
 8010a72:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8010b30 <__ieee754_asin+0x1d0>
 8010a76:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a7a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8010b38 <__ieee754_asin+0x1d8>
 8010a7e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010a82:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8010b40 <__ieee754_asin+0x1e0>
 8010a86:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010a8a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8010b50 <__ieee754_asin+0x1f0>
 8010a8e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010a92:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8010b48 <__ieee754_asin+0x1e8>
 8010a96:	ed9f 4b30 	vldr	d4, [pc, #192]	; 8010b58 <__ieee754_asin+0x1f8>
 8010a9a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010a9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010aa2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8010b60 <__ieee754_asin+0x200>
 8010aa6:	eea7 5b04 	vfma.f64	d5, d7, d4
 8010aaa:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 8010b68 <__ieee754_asin+0x208>
 8010aae:	eea5 4b07 	vfma.f64	d4, d5, d7
 8010ab2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8010b70 <__ieee754_asin+0x210>
 8010ab6:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010aba:	eea5 9b07 	vfma.f64	d9, d5, d7
 8010abe:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8010ac2:	eea0 0b07 	vfma.f64	d0, d0, d7
 8010ac6:	e768      	b.n	801099a <__ieee754_asin+0x3a>
 8010ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010acc:	ed9d 5b00 	vldr	d5, [sp]
 8010ad0:	ed9d 2b00 	vldr	d2, [sp]
 8010ad4:	ee35 3b05 	vadd.f64	d3, d5, d5
 8010ad8:	2200      	movs	r2, #0
 8010ada:	ec43 2b17 	vmov	d7, r2, r3
 8010ade:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8010b10 <__ieee754_asin+0x1b0>
 8010ae2:	eeb1 5b47 	vneg.f64	d5, d7
 8010ae6:	eea5 8b07 	vfma.f64	d8, d5, d7
 8010aea:	ee32 7b07 	vadd.f64	d7, d2, d7
 8010aee:	ee88 2b07 	vdiv.f64	d2, d8, d7
 8010af2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8010b80 <__ieee754_asin+0x220>
 8010af6:	eea2 0b46 	vfms.f64	d0, d2, d6
 8010afa:	ee93 0b04 	vfnms.f64	d0, d3, d4
 8010afe:	eeb0 4b47 	vmov.f64	d4, d7
 8010b02:	eea5 4b06 	vfma.f64	d4, d5, d6
 8010b06:	ee30 0b44 	vsub.f64	d0, d0, d4
 8010b0a:	e7a7      	b.n	8010a5c <__ieee754_asin+0xfc>
 8010b0c:	f3af 8000 	nop.w
 8010b10:	33145c07 	.word	0x33145c07
 8010b14:	3c91a626 	.word	0x3c91a626
 8010b18:	54442d18 	.word	0x54442d18
 8010b1c:	3ff921fb 	.word	0x3ff921fb
 8010b20:	8800759c 	.word	0x8800759c
 8010b24:	7e37e43c 	.word	0x7e37e43c
 8010b28:	0dfdf709 	.word	0x0dfdf709
 8010b2c:	3f023de1 	.word	0x3f023de1
 8010b30:	7501b288 	.word	0x7501b288
 8010b34:	3f49efe0 	.word	0x3f49efe0
 8010b38:	b5688f3b 	.word	0xb5688f3b
 8010b3c:	bfa48228 	.word	0xbfa48228
 8010b40:	0e884455 	.word	0x0e884455
 8010b44:	3fc9c155 	.word	0x3fc9c155
 8010b48:	55555555 	.word	0x55555555
 8010b4c:	3fc55555 	.word	0x3fc55555
 8010b50:	03eb6f7d 	.word	0x03eb6f7d
 8010b54:	bfd4d612 	.word	0xbfd4d612
 8010b58:	b12e9282 	.word	0xb12e9282
 8010b5c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010b60:	1b8d0159 	.word	0x1b8d0159
 8010b64:	bfe6066c 	.word	0xbfe6066c
 8010b68:	9c598ac8 	.word	0x9c598ac8
 8010b6c:	40002ae5 	.word	0x40002ae5
 8010b70:	1c8a2d4b 	.word	0x1c8a2d4b
 8010b74:	c0033a27 	.word	0xc0033a27
 8010b78:	33145c07 	.word	0x33145c07
 8010b7c:	bc91a626 	.word	0xbc91a626
 8010b80:	54442d18 	.word	0x54442d18
 8010b84:	3fe921fb 	.word	0x3fe921fb
 8010b88:	3fefffff 	.word	0x3fefffff
 8010b8c:	3fdfffff 	.word	0x3fdfffff
 8010b90:	3fef3332 	.word	0x3fef3332
 8010b94:	00000000 	.word	0x00000000

08010b98 <__ieee754_pow>:
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	ec57 6b11 	vmov	r6, r7, d1
 8010ba0:	ed2d 8b02 	vpush	{d8}
 8010ba4:	eeb0 8b40 	vmov.f64	d8, d0
 8010ba8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010bac:	ea58 0306 	orrs.w	r3, r8, r6
 8010bb0:	b085      	sub	sp, #20
 8010bb2:	46b9      	mov	r9, r7
 8010bb4:	ee11 2a10 	vmov	r2, s2
 8010bb8:	f000 8306 	beq.w	80111c8 <__ieee754_pow+0x630>
 8010bbc:	ee18 aa90 	vmov	sl, s17
 8010bc0:	4bb9      	ldr	r3, [pc, #740]	; (8010ea8 <__ieee754_pow+0x310>)
 8010bc2:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8010bc6:	429c      	cmp	r4, r3
 8010bc8:	ee10 ba10 	vmov	fp, s0
 8010bcc:	dc0b      	bgt.n	8010be6 <__ieee754_pow+0x4e>
 8010bce:	d105      	bne.n	8010bdc <__ieee754_pow+0x44>
 8010bd0:	f1bb 0f00 	cmp.w	fp, #0
 8010bd4:	d107      	bne.n	8010be6 <__ieee754_pow+0x4e>
 8010bd6:	45a0      	cmp	r8, r4
 8010bd8:	dc0d      	bgt.n	8010bf6 <__ieee754_pow+0x5e>
 8010bda:	e001      	b.n	8010be0 <__ieee754_pow+0x48>
 8010bdc:	4598      	cmp	r8, r3
 8010bde:	dc02      	bgt.n	8010be6 <__ieee754_pow+0x4e>
 8010be0:	4598      	cmp	r8, r3
 8010be2:	d110      	bne.n	8010c06 <__ieee754_pow+0x6e>
 8010be4:	b17a      	cbz	r2, 8010c06 <__ieee754_pow+0x6e>
 8010be6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010bea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010bee:	ea54 030b 	orrs.w	r3, r4, fp
 8010bf2:	f000 82e9 	beq.w	80111c8 <__ieee754_pow+0x630>
 8010bf6:	48ad      	ldr	r0, [pc, #692]	; (8010eac <__ieee754_pow+0x314>)
 8010bf8:	b005      	add	sp, #20
 8010bfa:	ecbd 8b02 	vpop	{d8}
 8010bfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c02:	f000 bb65 	b.w	80112d0 <nan>
 8010c06:	f1ba 0f00 	cmp.w	sl, #0
 8010c0a:	da4e      	bge.n	8010caa <__ieee754_pow+0x112>
 8010c0c:	4ba8      	ldr	r3, [pc, #672]	; (8010eb0 <__ieee754_pow+0x318>)
 8010c0e:	4598      	cmp	r8, r3
 8010c10:	dc49      	bgt.n	8010ca6 <__ieee754_pow+0x10e>
 8010c12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010c16:	4598      	cmp	r8, r3
 8010c18:	dd47      	ble.n	8010caa <__ieee754_pow+0x112>
 8010c1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010c1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010c22:	2b14      	cmp	r3, #20
 8010c24:	dd24      	ble.n	8010c70 <__ieee754_pow+0xd8>
 8010c26:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010c2a:	fa22 f503 	lsr.w	r5, r2, r3
 8010c2e:	fa05 f303 	lsl.w	r3, r5, r3
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d139      	bne.n	8010caa <__ieee754_pow+0x112>
 8010c36:	f005 0501 	and.w	r5, r5, #1
 8010c3a:	f1c5 0502 	rsb	r5, r5, #2
 8010c3e:	2a00      	cmp	r2, #0
 8010c40:	d15a      	bne.n	8010cf8 <__ieee754_pow+0x160>
 8010c42:	4b99      	ldr	r3, [pc, #612]	; (8010ea8 <__ieee754_pow+0x310>)
 8010c44:	4598      	cmp	r8, r3
 8010c46:	d122      	bne.n	8010c8e <__ieee754_pow+0xf6>
 8010c48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010c4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010c50:	ea53 030b 	orrs.w	r3, r3, fp
 8010c54:	f000 82b8 	beq.w	80111c8 <__ieee754_pow+0x630>
 8010c58:	4b96      	ldr	r3, [pc, #600]	; (8010eb4 <__ieee754_pow+0x31c>)
 8010c5a:	429c      	cmp	r4, r3
 8010c5c:	dd27      	ble.n	8010cae <__ieee754_pow+0x116>
 8010c5e:	f1b9 0f00 	cmp.w	r9, #0
 8010c62:	f280 82b4 	bge.w	80111ce <__ieee754_pow+0x636>
 8010c66:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8010e78 <__ieee754_pow+0x2e0>
 8010c6a:	ed8d 7b00 	vstr	d7, [sp]
 8010c6e:	e026      	b.n	8010cbe <__ieee754_pow+0x126>
 8010c70:	2a00      	cmp	r2, #0
 8010c72:	d140      	bne.n	8010cf6 <__ieee754_pow+0x15e>
 8010c74:	f1c3 0314 	rsb	r3, r3, #20
 8010c78:	fa48 f503 	asr.w	r5, r8, r3
 8010c7c:	fa05 f303 	lsl.w	r3, r5, r3
 8010c80:	4543      	cmp	r3, r8
 8010c82:	f040 82aa 	bne.w	80111da <__ieee754_pow+0x642>
 8010c86:	f005 0501 	and.w	r5, r5, #1
 8010c8a:	f1c5 0502 	rsb	r5, r5, #2
 8010c8e:	4b8a      	ldr	r3, [pc, #552]	; (8010eb8 <__ieee754_pow+0x320>)
 8010c90:	4598      	cmp	r8, r3
 8010c92:	d11b      	bne.n	8010ccc <__ieee754_pow+0x134>
 8010c94:	f1b9 0f00 	cmp.w	r9, #0
 8010c98:	f280 829c 	bge.w	80111d4 <__ieee754_pow+0x63c>
 8010c9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010ca0:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8010ca4:	e7e1      	b.n	8010c6a <__ieee754_pow+0xd2>
 8010ca6:	2502      	movs	r5, #2
 8010ca8:	e7c9      	b.n	8010c3e <__ieee754_pow+0xa6>
 8010caa:	2500      	movs	r5, #0
 8010cac:	e7c7      	b.n	8010c3e <__ieee754_pow+0xa6>
 8010cae:	f1b9 0f00 	cmp.w	r9, #0
 8010cb2:	dad8      	bge.n	8010c66 <__ieee754_pow+0xce>
 8010cb4:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8010cb8:	4633      	mov	r3, r6
 8010cba:	e9cd 3400 	strd	r3, r4, [sp]
 8010cbe:	ed9d 0b00 	vldr	d0, [sp]
 8010cc2:	b005      	add	sp, #20
 8010cc4:	ecbd 8b02 	vpop	{d8}
 8010cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ccc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010cd0:	d102      	bne.n	8010cd8 <__ieee754_pow+0x140>
 8010cd2:	ee28 7b08 	vmul.f64	d7, d8, d8
 8010cd6:	e7c8      	b.n	8010c6a <__ieee754_pow+0xd2>
 8010cd8:	4b78      	ldr	r3, [pc, #480]	; (8010ebc <__ieee754_pow+0x324>)
 8010cda:	4599      	cmp	r9, r3
 8010cdc:	d10c      	bne.n	8010cf8 <__ieee754_pow+0x160>
 8010cde:	f1ba 0f00 	cmp.w	sl, #0
 8010ce2:	db09      	blt.n	8010cf8 <__ieee754_pow+0x160>
 8010ce4:	eeb0 0b48 	vmov.f64	d0, d8
 8010ce8:	b005      	add	sp, #20
 8010cea:	ecbd 8b02 	vpop	{d8}
 8010cee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf2:	f000 bad7 	b.w	80112a4 <__ieee754_sqrt>
 8010cf6:	2500      	movs	r5, #0
 8010cf8:	eeb0 0b48 	vmov.f64	d0, d8
 8010cfc:	f000 fad5 	bl	80112aa <fabs>
 8010d00:	ed8d 0b00 	vstr	d0, [sp]
 8010d04:	f1bb 0f00 	cmp.w	fp, #0
 8010d08:	d128      	bne.n	8010d5c <__ieee754_pow+0x1c4>
 8010d0a:	b124      	cbz	r4, 8010d16 <__ieee754_pow+0x17e>
 8010d0c:	4b6a      	ldr	r3, [pc, #424]	; (8010eb8 <__ieee754_pow+0x320>)
 8010d0e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d122      	bne.n	8010d5c <__ieee754_pow+0x1c4>
 8010d16:	f1b9 0f00 	cmp.w	r9, #0
 8010d1a:	da07      	bge.n	8010d2c <__ieee754_pow+0x194>
 8010d1c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010d20:	ed9d 6b00 	vldr	d6, [sp]
 8010d24:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8010d28:	ed8d 7b00 	vstr	d7, [sp]
 8010d2c:	f1ba 0f00 	cmp.w	sl, #0
 8010d30:	dac5      	bge.n	8010cbe <__ieee754_pow+0x126>
 8010d32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010d36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d3a:	ea54 0305 	orrs.w	r3, r4, r5
 8010d3e:	d106      	bne.n	8010d4e <__ieee754_pow+0x1b6>
 8010d40:	ed9d 7b00 	vldr	d7, [sp]
 8010d44:	ee37 7b47 	vsub.f64	d7, d7, d7
 8010d48:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8010d4c:	e78d      	b.n	8010c6a <__ieee754_pow+0xd2>
 8010d4e:	2d01      	cmp	r5, #1
 8010d50:	d1b5      	bne.n	8010cbe <__ieee754_pow+0x126>
 8010d52:	ed9d 7b00 	vldr	d7, [sp]
 8010d56:	eeb1 7b47 	vneg.f64	d7, d7
 8010d5a:	e786      	b.n	8010c6a <__ieee754_pow+0xd2>
 8010d5c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8010d60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d64:	ea55 030a 	orrs.w	r3, r5, sl
 8010d68:	d104      	bne.n	8010d74 <__ieee754_pow+0x1dc>
 8010d6a:	ee38 8b48 	vsub.f64	d8, d8, d8
 8010d6e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8010d72:	e77a      	b.n	8010c6a <__ieee754_pow+0xd2>
 8010d74:	4b52      	ldr	r3, [pc, #328]	; (8010ec0 <__ieee754_pow+0x328>)
 8010d76:	4598      	cmp	r8, r3
 8010d78:	f340 80a8 	ble.w	8010ecc <__ieee754_pow+0x334>
 8010d7c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010d80:	4598      	cmp	r8, r3
 8010d82:	dd0b      	ble.n	8010d9c <__ieee754_pow+0x204>
 8010d84:	4b4b      	ldr	r3, [pc, #300]	; (8010eb4 <__ieee754_pow+0x31c>)
 8010d86:	429c      	cmp	r4, r3
 8010d88:	dc0e      	bgt.n	8010da8 <__ieee754_pow+0x210>
 8010d8a:	f1b9 0f00 	cmp.w	r9, #0
 8010d8e:	f6bf af6a 	bge.w	8010c66 <__ieee754_pow+0xce>
 8010d92:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8010e80 <__ieee754_pow+0x2e8>
 8010d96:	ee27 7b07 	vmul.f64	d7, d7, d7
 8010d9a:	e766      	b.n	8010c6a <__ieee754_pow+0xd2>
 8010d9c:	4b49      	ldr	r3, [pc, #292]	; (8010ec4 <__ieee754_pow+0x32c>)
 8010d9e:	429c      	cmp	r4, r3
 8010da0:	ddf3      	ble.n	8010d8a <__ieee754_pow+0x1f2>
 8010da2:	4b45      	ldr	r3, [pc, #276]	; (8010eb8 <__ieee754_pow+0x320>)
 8010da4:	429c      	cmp	r4, r3
 8010da6:	dd03      	ble.n	8010db0 <__ieee754_pow+0x218>
 8010da8:	f1b9 0f00 	cmp.w	r9, #0
 8010dac:	dcf1      	bgt.n	8010d92 <__ieee754_pow+0x1fa>
 8010dae:	e75a      	b.n	8010c66 <__ieee754_pow+0xce>
 8010db0:	ed9d 7b00 	vldr	d7, [sp]
 8010db4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010db8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8010e88 <__ieee754_pow+0x2f0>
 8010dbc:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010dc0:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 8010dc4:	eeb1 3b46 	vneg.f64	d3, d6
 8010dc8:	eea3 5b07 	vfma.f64	d5, d3, d7
 8010dcc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010dd0:	eea5 7b46 	vfms.f64	d7, d5, d6
 8010dd4:	ee26 5b06 	vmul.f64	d5, d6, d6
 8010dd8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010ddc:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8010e90 <__ieee754_pow+0x2f8>
 8010de0:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010de4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010e98 <__ieee754_pow+0x300>
 8010de8:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010dec:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010ea0 <__ieee754_pow+0x308>
 8010df0:	eeb0 4b47 	vmov.f64	d4, d7
 8010df4:	eea6 4b05 	vfma.f64	d4, d6, d5
 8010df8:	ec53 2b14 	vmov	r2, r3, d4
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	ec43 2b14 	vmov	d4, r2, r3
 8010e02:	eeb0 6b44 	vmov.f64	d6, d4
 8010e06:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010e0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e0e:	3d01      	subs	r5, #1
 8010e10:	ea55 030a 	orrs.w	r3, r5, sl
 8010e14:	f04f 0200 	mov.w	r2, #0
 8010e18:	463b      	mov	r3, r7
 8010e1a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010e1e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8010e22:	ec47 6b15 	vmov	d5, r6, r7
 8010e26:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8010e2a:	ec47 6b13 	vmov	d3, r6, r7
 8010e2e:	ec43 2b16 	vmov	d6, r2, r3
 8010e32:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010e36:	ee35 5b46 	vsub.f64	d5, d5, d6
 8010e3a:	4b23      	ldr	r3, [pc, #140]	; (8010ec8 <__ieee754_pow+0x330>)
 8010e3c:	eea5 7b04 	vfma.f64	d7, d5, d4
 8010e40:	ee24 6b06 	vmul.f64	d6, d4, d6
 8010e44:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010e48:	ee15 1a90 	vmov	r1, s11
 8010e4c:	4299      	cmp	r1, r3
 8010e4e:	ee15 2a10 	vmov	r2, s10
 8010e52:	f340 819b 	ble.w	801118c <__ieee754_pow+0x5f4>
 8010e56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010e5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	f000 810a 	beq.w	8011078 <__ieee754_pow+0x4e0>
 8010e64:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8010e80 <__ieee754_pow+0x2e8>
 8010e68:	ee28 8b07 	vmul.f64	d8, d8, d7
 8010e6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010e70:	e6fb      	b.n	8010c6a <__ieee754_pow+0xd2>
 8010e72:	bf00      	nop
 8010e74:	f3af 8000 	nop.w
	...
 8010e80:	8800759c 	.word	0x8800759c
 8010e84:	7e37e43c 	.word	0x7e37e43c
 8010e88:	55555555 	.word	0x55555555
 8010e8c:	3fd55555 	.word	0x3fd55555
 8010e90:	652b82fe 	.word	0x652b82fe
 8010e94:	3ff71547 	.word	0x3ff71547
 8010e98:	f85ddf44 	.word	0xf85ddf44
 8010e9c:	3e54ae0b 	.word	0x3e54ae0b
 8010ea0:	60000000 	.word	0x60000000
 8010ea4:	3ff71547 	.word	0x3ff71547
 8010ea8:	7ff00000 	.word	0x7ff00000
 8010eac:	080116c1 	.word	0x080116c1
 8010eb0:	433fffff 	.word	0x433fffff
 8010eb4:	3fefffff 	.word	0x3fefffff
 8010eb8:	3ff00000 	.word	0x3ff00000
 8010ebc:	3fe00000 	.word	0x3fe00000
 8010ec0:	41e00000 	.word	0x41e00000
 8010ec4:	3feffffe 	.word	0x3feffffe
 8010ec8:	408fffff 	.word	0x408fffff
 8010ecc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010ed0:	f280 80ce 	bge.w	8011070 <__ieee754_pow+0x4d8>
 8010ed4:	ed9d 6b00 	vldr	d6, [sp]
 8010ed8:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 80111e0 <__ieee754_pow+0x648>
 8010edc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010ee0:	ed8d 7b00 	vstr	d7, [sp]
 8010ee4:	9c01      	ldr	r4, [sp, #4]
 8010ee6:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8010eea:	1521      	asrs	r1, r4, #20
 8010eec:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010ef0:	4419      	add	r1, r3
 8010ef2:	4be3      	ldr	r3, [pc, #908]	; (8011280 <__ieee754_pow+0x6e8>)
 8010ef4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010ef8:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8010efc:	429c      	cmp	r4, r3
 8010efe:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8010f02:	dd06      	ble.n	8010f12 <__ieee754_pow+0x37a>
 8010f04:	4bdf      	ldr	r3, [pc, #892]	; (8011284 <__ieee754_pow+0x6ec>)
 8010f06:	429c      	cmp	r4, r3
 8010f08:	f340 80b4 	ble.w	8011074 <__ieee754_pow+0x4dc>
 8010f0c:	3101      	adds	r1, #1
 8010f0e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8010f12:	2400      	movs	r4, #0
 8010f14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f18:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	ec43 2b17 	vmov	d7, r2, r3
 8010f22:	4bd9      	ldr	r3, [pc, #868]	; (8011288 <__ieee754_pow+0x6f0>)
 8010f24:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8010f28:	4463      	add	r3, ip
 8010f2a:	ed93 5b00 	vldr	d5, [r3]
 8010f2e:	1040      	asrs	r0, r0, #1
 8010f30:	ee37 2b45 	vsub.f64	d2, d7, d5
 8010f34:	ee35 6b07 	vadd.f64	d6, d5, d7
 8010f38:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8010f3c:	ee22 6b01 	vmul.f64	d6, d2, d1
 8010f40:	ed8d 6b00 	vstr	d6, [sp]
 8010f44:	e9dd 8900 	ldrd	r8, r9, [sp]
 8010f48:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8010f4c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8010f50:	f04f 0800 	mov.w	r8, #0
 8010f54:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8010f58:	2200      	movs	r2, #0
 8010f5a:	ec49 8b14 	vmov	d4, r8, r9
 8010f5e:	ec43 2b16 	vmov	d6, r2, r3
 8010f62:	eeb1 3b44 	vneg.f64	d3, d4
 8010f66:	eea3 2b06 	vfma.f64	d2, d3, d6
 8010f6a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010f72:	eea3 2b07 	vfma.f64	d2, d3, d7
 8010f76:	ed9d 7b00 	vldr	d7, [sp]
 8010f7a:	ee22 2b01 	vmul.f64	d2, d2, d1
 8010f7e:	ee27 5b07 	vmul.f64	d5, d7, d7
 8010f82:	ee37 6b04 	vadd.f64	d6, d7, d4
 8010f86:	ed9f 1b98 	vldr	d1, [pc, #608]	; 80111e8 <__ieee754_pow+0x650>
 8010f8a:	ee25 0b05 	vmul.f64	d0, d5, d5
 8010f8e:	ee26 6b02 	vmul.f64	d6, d6, d2
 8010f92:	ed9f 7b97 	vldr	d7, [pc, #604]	; 80111f0 <__ieee754_pow+0x658>
 8010f96:	eea5 7b01 	vfma.f64	d7, d5, d1
 8010f9a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 80111f8 <__ieee754_pow+0x660>
 8010f9e:	eea7 1b05 	vfma.f64	d1, d7, d5
 8010fa2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8011200 <__ieee754_pow+0x668>
 8010fa6:	eea1 7b05 	vfma.f64	d7, d1, d5
 8010faa:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8011208 <__ieee754_pow+0x670>
 8010fae:	eea7 1b05 	vfma.f64	d1, d7, d5
 8010fb2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8011210 <__ieee754_pow+0x678>
 8010fb6:	eea1 7b05 	vfma.f64	d7, d1, d5
 8010fba:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010fbe:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8010fc2:	eeb0 5b47 	vmov.f64	d5, d7
 8010fc6:	eea4 5b04 	vfma.f64	d5, d4, d4
 8010fca:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010fce:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010fd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8010fd6:	ed9d 5b02 	vldr	d5, [sp, #8]
 8010fda:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010fde:	eea3 7b04 	vfma.f64	d7, d3, d4
 8010fe2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010fe6:	ed9d 6b00 	vldr	d6, [sp]
 8010fea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010fee:	eea2 7b05 	vfma.f64	d7, d2, d5
 8010ff2:	eeb0 6b47 	vmov.f64	d6, d7
 8010ff6:	eea4 6b05 	vfma.f64	d6, d4, d5
 8010ffa:	ed8d 6b00 	vstr	d6, [sp]
 8010ffe:	f8cd 8000 	str.w	r8, [sp]
 8011002:	ed9d 2b00 	vldr	d2, [sp]
 8011006:	eeb0 6b42 	vmov.f64	d6, d2
 801100a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801100e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011012:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8011218 <__ieee754_pow+0x680>
 8011016:	4b9d      	ldr	r3, [pc, #628]	; (801128c <__ieee754_pow+0x6f4>)
 8011018:	ee27 7b06 	vmul.f64	d7, d7, d6
 801101c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8011220 <__ieee754_pow+0x688>
 8011020:	4463      	add	r3, ip
 8011022:	eea2 7b06 	vfma.f64	d7, d2, d6
 8011026:	ed93 6b00 	vldr	d6, [r3]
 801102a:	4b99      	ldr	r3, [pc, #612]	; (8011290 <__ieee754_pow+0x6f8>)
 801102c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8011030:	449c      	add	ip, r3
 8011032:	ed9c 1b00 	vldr	d1, [ip]
 8011036:	eeb0 4b46 	vmov.f64	d4, d6
 801103a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8011228 <__ieee754_pow+0x690>
 801103e:	ee07 1a90 	vmov	s15, r1
 8011042:	eea2 4b03 	vfma.f64	d4, d2, d3
 8011046:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801104a:	ee34 4b01 	vadd.f64	d4, d4, d1
 801104e:	ee34 5b07 	vadd.f64	d5, d4, d7
 8011052:	ed8d 5b00 	vstr	d5, [sp]
 8011056:	f8cd 8000 	str.w	r8, [sp]
 801105a:	ed9d 4b00 	vldr	d4, [sp]
 801105e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8011062:	ee37 7b41 	vsub.f64	d7, d7, d1
 8011066:	eea2 7b43 	vfms.f64	d7, d2, d3
 801106a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801106e:	e6ce      	b.n	8010e0e <__ieee754_pow+0x276>
 8011070:	2300      	movs	r3, #0
 8011072:	e73a      	b.n	8010eea <__ieee754_pow+0x352>
 8011074:	2401      	movs	r4, #1
 8011076:	e74d      	b.n	8010f14 <__ieee754_pow+0x37c>
 8011078:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8011230 <__ieee754_pow+0x698>
 801107c:	ee35 5b46 	vsub.f64	d5, d5, d6
 8011080:	ee37 4b04 	vadd.f64	d4, d7, d4
 8011084:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8011088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108c:	f73f aeea 	bgt.w	8010e64 <__ieee754_pow+0x2cc>
 8011090:	4a80      	ldr	r2, [pc, #512]	; (8011294 <__ieee754_pow+0x6fc>)
 8011092:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011096:	4293      	cmp	r3, r2
 8011098:	f340 808e 	ble.w	80111b8 <__ieee754_pow+0x620>
 801109c:	151b      	asrs	r3, r3, #20
 801109e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 80110a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80110a6:	4103      	asrs	r3, r0
 80110a8:	440b      	add	r3, r1
 80110aa:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80110ae:	487a      	ldr	r0, [pc, #488]	; (8011298 <__ieee754_pow+0x700>)
 80110b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80110b4:	4110      	asrs	r0, r2
 80110b6:	ea23 0500 	bic.w	r5, r3, r0
 80110ba:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80110be:	2400      	movs	r4, #0
 80110c0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80110c4:	f1c2 0214 	rsb	r2, r2, #20
 80110c8:	ec45 4b15 	vmov	d5, r4, r5
 80110cc:	4110      	asrs	r0, r2
 80110ce:	2900      	cmp	r1, #0
 80110d0:	bfb8      	it	lt
 80110d2:	4240      	neglt	r0, r0
 80110d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80110d8:	ee36 5b07 	vadd.f64	d5, d6, d7
 80110dc:	ec53 2b15 	vmov	r2, r3, d5
 80110e0:	2200      	movs	r2, #0
 80110e2:	ec43 2b15 	vmov	d5, r2, r3
 80110e6:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8011238 <__ieee754_pow+0x6a0>
 80110ea:	ee35 6b46 	vsub.f64	d6, d5, d6
 80110ee:	ee37 6b46 	vsub.f64	d6, d7, d6
 80110f2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8011240 <__ieee754_pow+0x6a8>
 80110f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80110fa:	eea6 7b04 	vfma.f64	d7, d6, d4
 80110fe:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8011248 <__ieee754_pow+0x6b0>
 8011102:	eeb0 4b47 	vmov.f64	d4, d7
 8011106:	eea5 4b06 	vfma.f64	d4, d5, d6
 801110a:	eeb0 3b44 	vmov.f64	d3, d4
 801110e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8011112:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8011250 <__ieee754_pow+0x6b8>
 8011116:	ee37 7b43 	vsub.f64	d7, d7, d3
 801111a:	ee24 6b04 	vmul.f64	d6, d4, d4
 801111e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8011258 <__ieee754_pow+0x6c0>
 8011122:	eea4 7b07 	vfma.f64	d7, d4, d7
 8011126:	eea6 3b05 	vfma.f64	d3, d6, d5
 801112a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8011260 <__ieee754_pow+0x6c8>
 801112e:	eea3 5b06 	vfma.f64	d5, d3, d6
 8011132:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011268 <__ieee754_pow+0x6d0>
 8011136:	eea5 3b06 	vfma.f64	d3, d5, d6
 801113a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8011270 <__ieee754_pow+0x6d8>
 801113e:	eea3 5b06 	vfma.f64	d5, d3, d6
 8011142:	eeb0 3b44 	vmov.f64	d3, d4
 8011146:	eea5 3b46 	vfms.f64	d3, d5, d6
 801114a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801114e:	eeb0 6b43 	vmov.f64	d6, d3
 8011152:	ee24 3b03 	vmul.f64	d3, d4, d3
 8011156:	ee36 5b45 	vsub.f64	d5, d6, d5
 801115a:	ee83 6b05 	vdiv.f64	d6, d3, d5
 801115e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011162:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011166:	ee37 7b44 	vsub.f64	d7, d7, d4
 801116a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801116e:	ed8d 7b00 	vstr	d7, [sp]
 8011172:	9901      	ldr	r1, [sp, #4]
 8011174:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8011178:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801117c:	da1e      	bge.n	80111bc <__ieee754_pow+0x624>
 801117e:	eeb0 0b47 	vmov.f64	d0, d7
 8011182:	f000 f939 	bl	80113f8 <scalbn>
 8011186:	ee20 7b08 	vmul.f64	d7, d0, d8
 801118a:	e56e      	b.n	8010c6a <__ieee754_pow+0xd2>
 801118c:	4b43      	ldr	r3, [pc, #268]	; (801129c <__ieee754_pow+0x704>)
 801118e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8011192:	4298      	cmp	r0, r3
 8011194:	f77f af7c 	ble.w	8011090 <__ieee754_pow+0x4f8>
 8011198:	4b41      	ldr	r3, [pc, #260]	; (80112a0 <__ieee754_pow+0x708>)
 801119a:	440b      	add	r3, r1
 801119c:	4313      	orrs	r3, r2
 801119e:	d002      	beq.n	80111a6 <__ieee754_pow+0x60e>
 80111a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011278 <__ieee754_pow+0x6e0>
 80111a4:	e660      	b.n	8010e68 <__ieee754_pow+0x2d0>
 80111a6:	ee35 5b46 	vsub.f64	d5, d5, d6
 80111aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80111ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b2:	f6ff af6d 	blt.w	8011090 <__ieee754_pow+0x4f8>
 80111b6:	e7f3      	b.n	80111a0 <__ieee754_pow+0x608>
 80111b8:	2000      	movs	r0, #0
 80111ba:	e78d      	b.n	80110d8 <__ieee754_pow+0x540>
 80111bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111c0:	460b      	mov	r3, r1
 80111c2:	ec43 2b10 	vmov	d0, r2, r3
 80111c6:	e7de      	b.n	8011186 <__ieee754_pow+0x5ee>
 80111c8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80111cc:	e54d      	b.n	8010c6a <__ieee754_pow+0xd2>
 80111ce:	e9cd 6700 	strd	r6, r7, [sp]
 80111d2:	e574      	b.n	8010cbe <__ieee754_pow+0x126>
 80111d4:	ed8d 8b00 	vstr	d8, [sp]
 80111d8:	e571      	b.n	8010cbe <__ieee754_pow+0x126>
 80111da:	4615      	mov	r5, r2
 80111dc:	e557      	b.n	8010c8e <__ieee754_pow+0xf6>
 80111de:	bf00      	nop
 80111e0:	00000000 	.word	0x00000000
 80111e4:	43400000 	.word	0x43400000
 80111e8:	4a454eef 	.word	0x4a454eef
 80111ec:	3fca7e28 	.word	0x3fca7e28
 80111f0:	93c9db65 	.word	0x93c9db65
 80111f4:	3fcd864a 	.word	0x3fcd864a
 80111f8:	a91d4101 	.word	0xa91d4101
 80111fc:	3fd17460 	.word	0x3fd17460
 8011200:	518f264d 	.word	0x518f264d
 8011204:	3fd55555 	.word	0x3fd55555
 8011208:	db6fabff 	.word	0xdb6fabff
 801120c:	3fdb6db6 	.word	0x3fdb6db6
 8011210:	33333303 	.word	0x33333303
 8011214:	3fe33333 	.word	0x3fe33333
 8011218:	dc3a03fd 	.word	0xdc3a03fd
 801121c:	3feec709 	.word	0x3feec709
 8011220:	145b01f5 	.word	0x145b01f5
 8011224:	be3e2fe0 	.word	0xbe3e2fe0
 8011228:	e0000000 	.word	0xe0000000
 801122c:	3feec709 	.word	0x3feec709
 8011230:	652b82fe 	.word	0x652b82fe
 8011234:	3c971547 	.word	0x3c971547
 8011238:	fefa39ef 	.word	0xfefa39ef
 801123c:	3fe62e42 	.word	0x3fe62e42
 8011240:	0ca86c39 	.word	0x0ca86c39
 8011244:	be205c61 	.word	0xbe205c61
 8011248:	00000000 	.word	0x00000000
 801124c:	3fe62e43 	.word	0x3fe62e43
 8011250:	72bea4d0 	.word	0x72bea4d0
 8011254:	3e663769 	.word	0x3e663769
 8011258:	c5d26bf1 	.word	0xc5d26bf1
 801125c:	bebbbd41 	.word	0xbebbbd41
 8011260:	af25de2c 	.word	0xaf25de2c
 8011264:	3f11566a 	.word	0x3f11566a
 8011268:	16bebd93 	.word	0x16bebd93
 801126c:	bf66c16c 	.word	0xbf66c16c
 8011270:	5555553e 	.word	0x5555553e
 8011274:	3fc55555 	.word	0x3fc55555
 8011278:	c2f8f359 	.word	0xc2f8f359
 801127c:	01a56e1f 	.word	0x01a56e1f
 8011280:	0003988e 	.word	0x0003988e
 8011284:	000bb679 	.word	0x000bb679
 8011288:	080118d8 	.word	0x080118d8
 801128c:	080118f8 	.word	0x080118f8
 8011290:	080118e8 	.word	0x080118e8
 8011294:	3fe00000 	.word	0x3fe00000
 8011298:	000fffff 	.word	0x000fffff
 801129c:	4090cbff 	.word	0x4090cbff
 80112a0:	3f6f3400 	.word	0x3f6f3400

080112a4 <__ieee754_sqrt>:
 80112a4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80112a8:	4770      	bx	lr

080112aa <fabs>:
 80112aa:	ec51 0b10 	vmov	r0, r1, d0
 80112ae:	ee10 2a10 	vmov	r2, s0
 80112b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80112b6:	ec43 2b10 	vmov	d0, r2, r3
 80112ba:	4770      	bx	lr

080112bc <finite>:
 80112bc:	ee10 3a90 	vmov	r3, s1
 80112c0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80112c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80112c8:	0fc0      	lsrs	r0, r0, #31
 80112ca:	4770      	bx	lr

080112cc <matherr>:
 80112cc:	2000      	movs	r0, #0
 80112ce:	4770      	bx	lr

080112d0 <nan>:
 80112d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80112d8 <nan+0x8>
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop
 80112d8:	00000000 	.word	0x00000000
 80112dc:	7ff80000 	.word	0x7ff80000

080112e0 <rint>:
 80112e0:	b530      	push	{r4, r5, lr}
 80112e2:	b085      	sub	sp, #20
 80112e4:	ed8d 0b00 	vstr	d0, [sp]
 80112e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112ec:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80112f0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 80112f4:	2813      	cmp	r0, #19
 80112f6:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80112fa:	dc5a      	bgt.n	80113b2 <rint+0xd2>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	da2f      	bge.n	8011360 <rint+0x80>
 8011300:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011304:	4311      	orrs	r1, r2
 8011306:	d027      	beq.n	8011358 <rint+0x78>
 8011308:	f3c3 0513 	ubfx	r5, r3, #0, #20
 801130c:	4315      	orrs	r5, r2
 801130e:	426a      	negs	r2, r5
 8011310:	432a      	orrs	r2, r5
 8011312:	0b12      	lsrs	r2, r2, #12
 8011314:	0c5b      	lsrs	r3, r3, #17
 8011316:	045b      	lsls	r3, r3, #17
 8011318:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 801131c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011320:	ea42 0103 	orr.w	r1, r2, r3
 8011324:	4b31      	ldr	r3, [pc, #196]	; (80113ec <rint+0x10c>)
 8011326:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801132a:	ed93 6b00 	vldr	d6, [r3]
 801132e:	ec41 0b17 	vmov	d7, r0, r1
 8011332:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011336:	ed8d 7b02 	vstr	d7, [sp, #8]
 801133a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801133e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011342:	ed8d 7b00 	vstr	d7, [sp]
 8011346:	9b01      	ldr	r3, [sp, #4]
 8011348:	e9dd 0100 	ldrd	r0, r1, [sp]
 801134c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011350:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8011354:	e9cd 0100 	strd	r0, r1, [sp]
 8011358:	ed9d 0b00 	vldr	d0, [sp]
 801135c:	b005      	add	sp, #20
 801135e:	bd30      	pop	{r4, r5, pc}
 8011360:	4923      	ldr	r1, [pc, #140]	; (80113f0 <rint+0x110>)
 8011362:	4101      	asrs	r1, r0
 8011364:	ea03 0501 	and.w	r5, r3, r1
 8011368:	4315      	orrs	r5, r2
 801136a:	d0f5      	beq.n	8011358 <rint+0x78>
 801136c:	0849      	lsrs	r1, r1, #1
 801136e:	ea03 0501 	and.w	r5, r3, r1
 8011372:	432a      	orrs	r2, r5
 8011374:	d00b      	beq.n	801138e <rint+0xae>
 8011376:	ea23 0101 	bic.w	r1, r3, r1
 801137a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801137e:	2813      	cmp	r0, #19
 8011380:	fa43 f300 	asr.w	r3, r3, r0
 8011384:	bf0c      	ite	eq
 8011386:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 801138a:	2200      	movne	r2, #0
 801138c:	430b      	orrs	r3, r1
 801138e:	4619      	mov	r1, r3
 8011390:	4b16      	ldr	r3, [pc, #88]	; (80113ec <rint+0x10c>)
 8011392:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011396:	ed94 6b00 	vldr	d6, [r4]
 801139a:	4610      	mov	r0, r2
 801139c:	ec41 0b17 	vmov	d7, r0, r1
 80113a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80113a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80113a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80113b0:	e008      	b.n	80113c4 <rint+0xe4>
 80113b2:	2833      	cmp	r0, #51	; 0x33
 80113b4:	dd09      	ble.n	80113ca <rint+0xea>
 80113b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80113ba:	d1cd      	bne.n	8011358 <rint+0x78>
 80113bc:	ed9d 7b00 	vldr	d7, [sp]
 80113c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113c4:	ed8d 7b00 	vstr	d7, [sp]
 80113c8:	e7c6      	b.n	8011358 <rint+0x78>
 80113ca:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 80113ce:	f04f 31ff 	mov.w	r1, #4294967295
 80113d2:	40c1      	lsrs	r1, r0
 80113d4:	420a      	tst	r2, r1
 80113d6:	d0bf      	beq.n	8011358 <rint+0x78>
 80113d8:	0849      	lsrs	r1, r1, #1
 80113da:	420a      	tst	r2, r1
 80113dc:	bf1f      	itttt	ne
 80113de:	ea22 0101 	bicne.w	r1, r2, r1
 80113e2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80113e6:	4102      	asrne	r2, r0
 80113e8:	430a      	orrne	r2, r1
 80113ea:	e7d0      	b.n	801138e <rint+0xae>
 80113ec:	08011908 	.word	0x08011908
 80113f0:	000fffff 	.word	0x000fffff
 80113f4:	00000000 	.word	0x00000000

080113f8 <scalbn>:
 80113f8:	b500      	push	{lr}
 80113fa:	ed2d 8b02 	vpush	{d8}
 80113fe:	b083      	sub	sp, #12
 8011400:	ed8d 0b00 	vstr	d0, [sp]
 8011404:	9b01      	ldr	r3, [sp, #4]
 8011406:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801140a:	b9a2      	cbnz	r2, 8011436 <scalbn+0x3e>
 801140c:	9a00      	ldr	r2, [sp, #0]
 801140e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011412:	4313      	orrs	r3, r2
 8011414:	d03a      	beq.n	801148c <scalbn+0x94>
 8011416:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80114d0 <scalbn+0xd8>
 801141a:	4b35      	ldr	r3, [pc, #212]	; (80114f0 <scalbn+0xf8>)
 801141c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011420:	4298      	cmp	r0, r3
 8011422:	ed8d 7b00 	vstr	d7, [sp]
 8011426:	da11      	bge.n	801144c <scalbn+0x54>
 8011428:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80114d8 <scalbn+0xe0>
 801142c:	ed9d 6b00 	vldr	d6, [sp]
 8011430:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011434:	e007      	b.n	8011446 <scalbn+0x4e>
 8011436:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801143a:	428a      	cmp	r2, r1
 801143c:	d10a      	bne.n	8011454 <scalbn+0x5c>
 801143e:	ed9d 7b00 	vldr	d7, [sp]
 8011442:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011446:	ed8d 7b00 	vstr	d7, [sp]
 801144a:	e01f      	b.n	801148c <scalbn+0x94>
 801144c:	9b01      	ldr	r3, [sp, #4]
 801144e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011452:	3a36      	subs	r2, #54	; 0x36
 8011454:	4402      	add	r2, r0
 8011456:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801145a:	428a      	cmp	r2, r1
 801145c:	dd0a      	ble.n	8011474 <scalbn+0x7c>
 801145e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80114e0 <scalbn+0xe8>
 8011462:	eeb0 0b48 	vmov.f64	d0, d8
 8011466:	ed9d 1b00 	vldr	d1, [sp]
 801146a:	f000 f843 	bl	80114f4 <copysign>
 801146e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8011472:	e7e8      	b.n	8011446 <scalbn+0x4e>
 8011474:	2a00      	cmp	r2, #0
 8011476:	dd10      	ble.n	801149a <scalbn+0xa2>
 8011478:	e9dd 0100 	ldrd	r0, r1, [sp]
 801147c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011480:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011484:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011488:	e9cd 0100 	strd	r0, r1, [sp]
 801148c:	ed9d 0b00 	vldr	d0, [sp]
 8011490:	b003      	add	sp, #12
 8011492:	ecbd 8b02 	vpop	{d8}
 8011496:	f85d fb04 	ldr.w	pc, [sp], #4
 801149a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801149e:	da06      	bge.n	80114ae <scalbn+0xb6>
 80114a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80114a4:	4298      	cmp	r0, r3
 80114a6:	dcda      	bgt.n	801145e <scalbn+0x66>
 80114a8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80114d8 <scalbn+0xe0>
 80114ac:	e7d9      	b.n	8011462 <scalbn+0x6a>
 80114ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80114b6:	3236      	adds	r2, #54	; 0x36
 80114b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80114bc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80114c0:	ec41 0b17 	vmov	d7, r0, r1
 80114c4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80114e8 <scalbn+0xf0>
 80114c8:	e7b2      	b.n	8011430 <scalbn+0x38>
 80114ca:	bf00      	nop
 80114cc:	f3af 8000 	nop.w
 80114d0:	00000000 	.word	0x00000000
 80114d4:	43500000 	.word	0x43500000
 80114d8:	c2f8f359 	.word	0xc2f8f359
 80114dc:	01a56e1f 	.word	0x01a56e1f
 80114e0:	8800759c 	.word	0x8800759c
 80114e4:	7e37e43c 	.word	0x7e37e43c
 80114e8:	00000000 	.word	0x00000000
 80114ec:	3c900000 	.word	0x3c900000
 80114f0:	ffff3cb0 	.word	0xffff3cb0

080114f4 <copysign>:
 80114f4:	ec51 0b10 	vmov	r0, r1, d0
 80114f8:	ee11 0a90 	vmov	r0, s3
 80114fc:	ee10 2a10 	vmov	r2, s0
 8011500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011504:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011508:	ea41 0300 	orr.w	r3, r1, r0
 801150c:	ec43 2b10 	vmov	d0, r2, r3
 8011510:	4770      	bx	lr
	...

08011514 <_init>:
 8011514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011516:	bf00      	nop
 8011518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801151a:	bc08      	pop	{r3}
 801151c:	469e      	mov	lr, r3
 801151e:	4770      	bx	lr

08011520 <_fini>:
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011522:	bf00      	nop
 8011524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011526:	bc08      	pop	{r3}
 8011528:	469e      	mov	lr, r3
 801152a:	4770      	bx	lr
