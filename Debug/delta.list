
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012234  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  080124d8  080124d8  000224d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142f0  080142f0  00030284  2**0
                  CONTENTS
  4 .ARM          00000008  080142f0  080142f0  000242f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142f8  080142f8  00030284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142f8  080142f8  000242f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142fc  080142fc  000242fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  24000000  08014300  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b0c  24000288  08014584  00030288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000d94  08014584  00030d94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c283  00000000  00000000  000302b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a1  00000000  00000000  0004c535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0004fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00050e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039536  00000000  00000000  00051fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d1fc  00000000  00000000  0008b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165306  00000000  00000000  000a86e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020d9e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006268  00000000  00000000  0020da38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000288 	.word	0x24000288
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080124bc 	.word	0x080124bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400028c 	.word	0x2400028c
 80002dc:	080124bc 	.word	0x080124bc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <cinematicaInversa>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void cinematicaInversa(Vec3D _Pfin) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	ed2d 8b04 	vpush	{d8-d9}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	eeb0 5b40 	vmov.f64	d5, d0
 8000a8e:	eeb0 6b41 	vmov.f64	d6, d1
 8000a92:	eeb0 7b42 	vmov.f64	d7, d2
 8000a96:	ed87 5b00 	vstr	d5, [r7]
 8000a9a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000a9e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8000aa2:	ed97 7b02 	vldr	d7, [r7, #8]
 8000aa6:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e60 <cinematicaInversa+0x3e0>
 8000aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000aae:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e68 <cinematicaInversa+0x3e8>
 8000ab2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ab6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000aba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000abe:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ac2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ac6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000aca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ace:	eeb0 0b45 	vmov.f64	d0, d5
 8000ad2:	f011 f8c5 	bl	8011c60 <pow>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ade:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ae2:	4bf9      	ldr	r3, [pc, #996]	; (8000ec8 <cinematicaInversa+0x448>)
 8000ae4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8000ae8:	ed97 7b00 	vldr	d7, [r7]
 8000aec:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e70 <cinematicaInversa+0x3f0>
 8000af0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e78 <cinematicaInversa+0x3f8>
 8000af8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e80 <cinematicaInversa+0x400>
 8000b00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b04:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b08:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8000e88 <cinematicaInversa+0x408>
 8000b0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b10:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b18:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b20:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b24:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b28:	eeb0 0b45 	vmov.f64	d0, d5
 8000b2c:	f011 f898 	bl	8011c60 <pow>
 8000b30:	eeb0 7b40 	vmov.f64	d7, d0
 8000b34:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b3c:	4be3      	ldr	r3, [pc, #908]	; (8000ecc <cinematicaInversa+0x44c>)
 8000b3e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8000b42:	ed97 7b00 	vldr	d7, [r7]
 8000b46:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e70 <cinematicaInversa+0x3f0>
 8000b4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b4e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e78 <cinematicaInversa+0x3f8>
 8000b52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b56:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b5a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8000e88 <cinematicaInversa+0x408>
 8000b5e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b6a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8000e90 <cinematicaInversa+0x410>
 8000b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b72:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8000e68 <cinematicaInversa+0x3e8>
 8000b76:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000b7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b82:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b8a:	eeb0 0b45 	vmov.f64	d0, d5
 8000b8e:	f011 f867 	bl	8011c60 <pow>
 8000b92:	eeb0 7b40 	vmov.f64	d7, d0
 8000b96:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b9e:	4bcc      	ldr	r3, [pc, #816]	; (8000ed0 <cinematicaInversa+0x450>)
 8000ba0:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8000ba4:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ba8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bb0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e68 <cinematicaInversa+0x3e8>
 8000bb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bb8:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000bbc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000bc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000bc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bcc:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000bd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000bd4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bdc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000be0:	eeb0 0b47 	vmov.f64	d0, d7
 8000be4:	f011 f83c 	bl	8011c60 <pow>
 8000be8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bec:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8000e98 <cinematicaInversa+0x418>
 8000bf0:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000bf4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bf8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000bfc:	eeb0 0b47 	vmov.f64	d0, d7
 8000c00:	f011 f82e 	bl	8011c60 <pow>
 8000c04:	eeb0 7b40 	vmov.f64	d7, d0
 8000c08:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000c0c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8000ea0 <cinematicaInversa+0x420>
 8000c10:	ee37 9b46 	vsub.f64	d9, d7, d6
 8000c14:	ed97 7b00 	vldr	d7, [r7]
 8000c18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c20:	f011 f81e 	bl	8011c60 <pow>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	ee39 5b07 	vadd.f64	d5, d9, d7
 8000c2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c30:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c38:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000c3c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000ea8 <cinematicaInversa+0x428>
 8000c40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c44:	4ba3      	ldr	r3, [pc, #652]	; (8000ed4 <cinematicaInversa+0x454>)
 8000c46:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8000c4a:	ed97 7b00 	vldr	d7, [r7]
 8000c4e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c56:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8000eb0 <cinematicaInversa+0x430>
 8000c5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c62:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8000e88 <cinematicaInversa+0x408>
 8000c66:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000c6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c72:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8000e80 <cinematicaInversa+0x400>
 8000c76:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000c7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c7e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c82:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c86:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000c8a:	ed97 7b00 	vldr	d7, [r7]
 8000c8e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c9e:	f010 ffdf 	bl	8011c60 <pow>
 8000ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ca6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8000e98 <cinematicaInversa+0x418>
 8000caa:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000cae:	ed97 7b02 	vldr	d7, [r7, #8]
 8000cb2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000e88 <cinematicaInversa+0x408>
 8000cb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8000cc2:	f010 ffcd 	bl	8011c60 <pow>
 8000cc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cca:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000cce:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cd2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8000cda:	f010 ffc1 	bl	8011c60 <pow>
 8000cde:	eeb0 7b40 	vmov.f64	d7, d0
 8000ce2:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000ce6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000ea0 <cinematicaInversa+0x420>
 8000cea:	ee37 5b46 	vsub.f64	d5, d7, d6
 8000cee:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cf2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000cf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cfa:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000cfe:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8000e80 <cinematicaInversa+0x400>
 8000d02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <cinematicaInversa+0x458>)
 8000d08:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8000d0c:	ed97 7b00 	vldr	d7, [r7]
 8000d10:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d18:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e78 <cinematicaInversa+0x3f8>
 8000d1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d20:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d24:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000e88 <cinematicaInversa+0x408>
 8000d28:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d2c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d34:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000e90 <cinematicaInversa+0x410>
 8000d38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d3c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8000e68 <cinematicaInversa+0x3e8>
 8000d40:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000d44:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d48:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000d4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d50:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000d54:	ed97 7b00 	vldr	d7, [r7]
 8000d58:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d64:	eeb0 0b47 	vmov.f64	d0, d7
 8000d68:	f010 ff7a 	bl	8011c60 <pow>
 8000d6c:	eeb0 9b40 	vmov.f64	d9, d0
 8000d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d74:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8000e88 <cinematicaInversa+0x408>
 8000d78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d7c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d80:	eeb0 0b47 	vmov.f64	d0, d7
 8000d84:	f010 ff6c 	bl	8011c60 <pow>
 8000d88:	eeb0 7b40 	vmov.f64	d7, d0
 8000d8c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000d90:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d98:	eeb0 0b47 	vmov.f64	d0, d7
 8000d9c:	f010 ff60 	bl	8011c60 <pow>
 8000da0:	eeb0 7b40 	vmov.f64	d7, d0
 8000da4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000da8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000ea0 <cinematicaInversa+0x420>
 8000dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000eb8 <cinematicaInversa+0x438>
 8000db4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000ec0 <cinematicaInversa+0x440>
 8000dbc:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000dc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000dc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000dd0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000e80 <cinematicaInversa+0x400>
 8000dd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <cinematicaInversa+0x45c>)
 8000dda:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8000dde:	ed97 7b02 	vldr	d7, [r7, #8]
 8000de2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000e60 <cinematicaInversa+0x3e0>
 8000de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000dee:	eeb0 0b47 	vmov.f64	d0, d7
 8000df2:	f010 ff35 	bl	8011c60 <pow>
 8000df6:	eeb0 8b40 	vmov.f64	d8, d0
 8000dfa:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dfe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e02:	eeb0 0b47 	vmov.f64	d0, d7
 8000e06:	f010 ff2b 	bl	8011c60 <pow>
 8000e0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e12:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000ea0 <cinematicaInversa+0x420>
 8000e16:	ee37 8b46 	vsub.f64	d8, d7, d6
 8000e1a:	ed97 7b00 	vldr	d7, [r7]
 8000e1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e22:	eeb0 0b47 	vmov.f64	d0, d7
 8000e26:	f010 ff1b 	bl	8011c60 <pow>
 8000e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e2e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e32:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000eb8 <cinematicaInversa+0x438>
 8000e36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e3a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000ec0 <cinematicaInversa+0x440>
 8000e3e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e42:	ed97 7b04 	vldr	d7, [r7, #16]
 8000e46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000e4a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000e4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e52:	eeb0 0b45 	vmov.f64	d0, d5
 8000e56:	f010 ff03 	bl	8011c60 <pow>
 8000e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e5e:	e03f      	b.n	8000ee0 <cinematicaInversa+0x460>
 8000e60:	1eb851ec 	.word	0x1eb851ec
 8000e64:	3fb1eb85 	.word	0x3fb1eb85
 8000e68:	24dd2f1b 	.word	0x24dd2f1b
 8000e6c:	3fc58106 	.word	0x3fc58106
 8000e70:	5625749b 	.word	0x5625749b
 8000e74:	3faf09d1 	.word	0x3faf09d1
 8000e78:	e8584caa 	.word	0xe8584caa
 8000e7c:	400bb67a 	.word	0x400bb67a
 8000e80:	24dd2f1d 	.word	0x24dd2f1d
 8000e84:	3fe58106 	.word	0x3fe58106
 8000e88:	1eb851ec 	.word	0x1eb851ec
 8000e8c:	3fa1eb85 	.word	0x3fa1eb85
 8000e90:	9ba5e356 	.word	0x9ba5e356
 8000e94:	3fe020c4 	.word	0x3fe020c4
 8000e98:	3532e7b5 	.word	0x3532e7b5
 8000e9c:	3fc0de09 	.word	0x3fc0de09
 8000ea0:	70a3d70a 	.word	0x70a3d70a
 8000ea4:	3fd70a3d 	.word	0x3fd70a3d
 8000ea8:	24dd2f1b 	.word	0x24dd2f1b
 8000eac:	3fd58106 	.word	0x3fd58106
 8000eb0:	e8584caa 	.word	0xe8584caa
 8000eb4:	c00bb67a 	.word	0xc00bb67a
 8000eb8:	93d96639 	.word	0x93d96639
 8000ebc:	3f9ce6c0 	.word	0x3f9ce6c0
 8000ec0:	47ae147c 	.word	0x47ae147c
 8000ec4:	3fc47ae1 	.word	0x3fc47ae1
 8000ec8:	240002a8 	.word	0x240002a8
 8000ecc:	240002f0 	.word	0x240002f0
 8000ed0:	24000338 	.word	0x24000338
 8000ed4:	240002b0 	.word	0x240002b0
 8000ed8:	240002f8 	.word	0x240002f8
 8000edc:	24000340 	.word	0x24000340
 8000ee0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001260 <cinematicaInversa+0x7e0>
 8000ee4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ee8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001268 <cinematicaInversa+0x7e8>
 8000eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ef0:	4be7      	ldr	r3, [pc, #924]	; (8001290 <cinematicaInversa+0x810>)
 8000ef2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000ef6:	ed97 7b00 	vldr	d7, [r7]
 8000efa:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001270 <cinematicaInversa+0x7f0>
 8000efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f06:	eeb0 0b47 	vmov.f64	d0, d7
 8000f0a:	f010 fea9 	bl	8011c60 <pow>
 8000f0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f12:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001278 <cinematicaInversa+0x7f8>
 8000f16:	ee37 8b06 	vadd.f64	d8, d7, d6
 8000f1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f1e:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001280 <cinematicaInversa+0x800>
 8000f22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f26:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f2a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f2e:	f010 fe97 	bl	8011c60 <pow>
 8000f32:	eeb0 7b40 	vmov.f64	d7, d0
 8000f36:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000f3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f42:	eeb0 0b47 	vmov.f64	d0, d7
 8000f46:	f010 fe8b 	bl	8011c60 <pow>
 8000f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f4e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f52:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001288 <cinematicaInversa+0x808>
 8000f56:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f62:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f6a:	eeb0 0b45 	vmov.f64	d0, d5
 8000f6e:	f010 fe77 	bl	8011c60 <pow>
 8000f72:	eeb0 7b40 	vmov.f64	d7, d0
 8000f76:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001278 <cinematicaInversa+0x7f8>
 8000f7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f7e:	4bc5      	ldr	r3, [pc, #788]	; (8001294 <cinematicaInversa+0x814>)
 8000f80:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000f84:	ed97 7b00 	vldr	d7, [r7]
 8000f88:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001270 <cinematicaInversa+0x7f0>
 8000f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f94:	eeb0 0b47 	vmov.f64	d0, d7
 8000f98:	f010 fe62 	bl	8011c60 <pow>
 8000f9c:	eeb0 8b40 	vmov.f64	d8, d0
 8000fa0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fa4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001280 <cinematicaInversa+0x800>
 8000fa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8000fb4:	f010 fe54 	bl	8011c60 <pow>
 8000fb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fbc:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000fc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000fc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fc8:	eeb0 0b47 	vmov.f64	d0, d7
 8000fcc:	f010 fe48 	bl	8011c60 <pow>
 8000fd0:	eeb0 7b40 	vmov.f64	d7, d0
 8000fd4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000fd8:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001288 <cinematicaInversa+0x808>
 8000fdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001268 <cinematicaInversa+0x7e8>
 8000fe4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001260 <cinematicaInversa+0x7e0>
 8000fec:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000ff0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ff4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ff8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ffc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001000:	eeb0 0b45 	vmov.f64	d0, d5
 8001004:	f010 fe2c 	bl	8011c60 <pow>
 8001008:	eeb0 7b40 	vmov.f64	d7, d0
 800100c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001278 <cinematicaInversa+0x7f8>
 8001010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001014:	4ba0      	ldr	r3, [pc, #640]	; (8001298 <cinematicaInversa+0x818>)
 8001016:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <cinematicaInversa+0x81c>)
 800101c:	ed93 7b00 	vldr	d7, [r3]
 8001020:	eeb1 8b47 	vneg.f64	d8, d7
 8001024:	4b9d      	ldr	r3, [pc, #628]	; (800129c <cinematicaInversa+0x81c>)
 8001026:	ed93 7b00 	vldr	d7, [r3]
 800102a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800102e:	eeb0 0b47 	vmov.f64	d0, d7
 8001032:	f010 fe15 	bl	8011c60 <pow>
 8001036:	eeb0 5b40 	vmov.f64	d5, d0
 800103a:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <cinematicaInversa+0x820>)
 800103c:	ed93 7b00 	vldr	d7, [r3]
 8001040:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001044:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001048:	4b91      	ldr	r3, [pc, #580]	; (8001290 <cinematicaInversa+0x810>)
 800104a:	ed93 7b00 	vldr	d7, [r3]
 800104e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001052:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001056:	eeb0 0b47 	vmov.f64	d0, d7
 800105a:	f011 f881 	bl	8012160 <sqrt>
 800105e:	eeb0 7b40 	vmov.f64	d7, d0
 8001062:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <cinematicaInversa+0x820>)
 8001068:	ed93 7b00 	vldr	d7, [r3]
 800106c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001070:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001074:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <cinematicaInversa+0x824>)
 8001076:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <cinematicaInversa+0x81c>)
 800107c:	ed93 7b00 	vldr	d7, [r3]
 8001080:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001084:	eeb0 0b47 	vmov.f64	d0, d7
 8001088:	f010 fdea 	bl	8011c60 <pow>
 800108c:	eeb0 5b40 	vmov.f64	d5, d0
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <cinematicaInversa+0x820>)
 8001092:	ed93 7b00 	vldr	d7, [r3]
 8001096:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800109e:	4b7c      	ldr	r3, [pc, #496]	; (8001290 <cinematicaInversa+0x810>)
 80010a0:	ed93 7b00 	vldr	d7, [r3]
 80010a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80010ac:	eeb0 0b47 	vmov.f64	d0, d7
 80010b0:	f011 f856 	bl	8012160 <sqrt>
 80010b4:	eeb0 6b40 	vmov.f64	d6, d0
 80010b8:	4b78      	ldr	r3, [pc, #480]	; (800129c <cinematicaInversa+0x81c>)
 80010ba:	ed93 7b00 	vldr	d7, [r3]
 80010be:	ee36 5b47 	vsub.f64	d5, d6, d7
 80010c2:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <cinematicaInversa+0x820>)
 80010c4:	ed93 7b00 	vldr	d7, [r3]
 80010c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80010cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <cinematicaInversa+0x828>)
 80010d2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80010d6:	4b75      	ldr	r3, [pc, #468]	; (80012ac <cinematicaInversa+0x82c>)
 80010d8:	ed93 7b00 	vldr	d7, [r3]
 80010dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80010e0:	eeb0 0b47 	vmov.f64	d0, d7
 80010e4:	f010 fdbc 	bl	8011c60 <pow>
 80010e8:	eeb0 5b40 	vmov.f64	d5, d0
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <cinematicaInversa+0x830>)
 80010ee:	ed93 7b00 	vldr	d7, [r3]
 80010f2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80010f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <cinematicaInversa+0x814>)
 80010fc:	ed93 7b00 	vldr	d7, [r3]
 8001100:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001104:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001108:	eeb0 0b47 	vmov.f64	d0, d7
 800110c:	f011 f828 	bl	8012160 <sqrt>
 8001110:	eeb0 6b40 	vmov.f64	d6, d0
 8001114:	4b65      	ldr	r3, [pc, #404]	; (80012ac <cinematicaInversa+0x82c>)
 8001116:	ed93 7b00 	vldr	d7, [r3]
 800111a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <cinematicaInversa+0x830>)
 8001120:	ed93 7b00 	vldr	d7, [r3]
 8001124:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001128:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <cinematicaInversa+0x834>)
 800112e:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001132:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <cinematicaInversa+0x82c>)
 8001134:	ed93 7b00 	vldr	d7, [r3]
 8001138:	eeb1 8b47 	vneg.f64	d8, d7
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <cinematicaInversa+0x82c>)
 800113e:	ed93 7b00 	vldr	d7, [r3]
 8001142:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001146:	eeb0 0b47 	vmov.f64	d0, d7
 800114a:	f010 fd89 	bl	8011c60 <pow>
 800114e:	eeb0 5b40 	vmov.f64	d5, d0
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <cinematicaInversa+0x830>)
 8001154:	ed93 7b00 	vldr	d7, [r3]
 8001158:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800115c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <cinematicaInversa+0x814>)
 8001162:	ed93 7b00 	vldr	d7, [r3]
 8001166:	ee26 7b07 	vmul.f64	d7, d6, d7
 800116a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800116e:	eeb0 0b47 	vmov.f64	d0, d7
 8001172:	f010 fff5 	bl	8012160 <sqrt>
 8001176:	eeb0 7b40 	vmov.f64	d7, d0
 800117a:	ee38 5b47 	vsub.f64	d5, d8, d7
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <cinematicaInversa+0x830>)
 8001180:	ed93 7b00 	vldr	d7, [r3]
 8001184:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800118c:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <cinematicaInversa+0x838>)
 800118e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <cinematicaInversa+0x83c>)
 8001194:	ed93 7b00 	vldr	d7, [r3]
 8001198:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800119c:	eeb0 0b47 	vmov.f64	d0, d7
 80011a0:	f010 fd5e 	bl	8011c60 <pow>
 80011a4:	eeb0 5b40 	vmov.f64	d5, d0
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <cinematicaInversa+0x840>)
 80011aa:	ed93 7b00 	vldr	d7, [r3]
 80011ae:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80011b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <cinematicaInversa+0x818>)
 80011b8:	ed93 7b00 	vldr	d7, [r3]
 80011bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80011c4:	eeb0 0b47 	vmov.f64	d0, d7
 80011c8:	f010 ffca 	bl	8012160 <sqrt>
 80011cc:	eeb0 6b40 	vmov.f64	d6, d0
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <cinematicaInversa+0x83c>)
 80011d2:	ed93 7b00 	vldr	d7, [r3]
 80011d6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <cinematicaInversa+0x840>)
 80011dc:	ed93 7b00 	vldr	d7, [r3]
 80011e0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <cinematicaInversa+0x844>)
 80011ea:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <cinematicaInversa+0x83c>)
 80011f0:	ed93 7b00 	vldr	d7, [r3]
 80011f4:	eeb1 8b47 	vneg.f64	d8, d7
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <cinematicaInversa+0x83c>)
 80011fa:	ed93 7b00 	vldr	d7, [r3]
 80011fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001202:	eeb0 0b47 	vmov.f64	d0, d7
 8001206:	f010 fd2b 	bl	8011c60 <pow>
 800120a:	eeb0 5b40 	vmov.f64	d5, d0
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <cinematicaInversa+0x840>)
 8001210:	ed93 7b00 	vldr	d7, [r3]
 8001214:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001218:	ee27 6b06 	vmul.f64	d6, d7, d6
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <cinematicaInversa+0x818>)
 800121e:	ed93 7b00 	vldr	d7, [r3]
 8001222:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001226:	ee35 7b47 	vsub.f64	d7, d5, d7
 800122a:	eeb0 0b47 	vmov.f64	d0, d7
 800122e:	f010 ff97 	bl	8012160 <sqrt>
 8001232:	eeb0 7b40 	vmov.f64	d7, d0
 8001236:	ee38 5b47 	vsub.f64	d5, d8, d7
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <cinematicaInversa+0x840>)
 800123c:	ed93 7b00 	vldr	d7, [r3]
 8001240:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001244:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <cinematicaInversa+0x848>)
 800124a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <cinematicaInversa+0x84c>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c1 2300 	strd	r2, r3, [r1]
 800125c:	e038      	b.n	80012d0 <cinematicaInversa+0x850>
 800125e:	bf00      	nop
 8001260:	47ae147c 	.word	0x47ae147c
 8001264:	3fc47ae1 	.word	0x3fc47ae1
 8001268:	93d96639 	.word	0x93d96639
 800126c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001270:	5625749b 	.word	0x5625749b
 8001274:	3faf09d1 	.word	0x3faf09d1
 8001278:	3532e7b5 	.word	0x3532e7b5
 800127c:	3fc0de09 	.word	0x3fc0de09
 8001280:	1eb851ec 	.word	0x1eb851ec
 8001284:	3fa1eb85 	.word	0x3fa1eb85
 8001288:	70a3d70a 	.word	0x70a3d70a
 800128c:	3fd70a3d 	.word	0x3fd70a3d
 8001290:	240002b8 	.word	0x240002b8
 8001294:	24000300 	.word	0x24000300
 8001298:	24000348 	.word	0x24000348
 800129c:	240002b0 	.word	0x240002b0
 80012a0:	240002a8 	.word	0x240002a8
 80012a4:	240002d0 	.word	0x240002d0
 80012a8:	240002d8 	.word	0x240002d8
 80012ac:	240002f8 	.word	0x240002f8
 80012b0:	240002f0 	.word	0x240002f0
 80012b4:	24000318 	.word	0x24000318
 80012b8:	24000320 	.word	0x24000320
 80012bc:	24000340 	.word	0x24000340
 80012c0:	24000338 	.word	0x24000338
 80012c4:	24000360 	.word	0x24000360
 80012c8:	24000368 	.word	0x24000368
 80012cc:	240002c0 	.word	0x240002c0
	XJ1_2 = 0;
 80012d0:	49f1      	ldr	r1, [pc, #964]	; (8001698 <cinematicaInversa+0xc18>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 80012de:	4bef      	ldr	r3, [pc, #956]	; (800169c <cinematicaInversa+0xc1c>)
 80012e0:	ed93 7b00 	vldr	d7, [r3]
 80012e4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8001630 <cinematicaInversa+0xbb0>
 80012e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012ec:	4bec      	ldr	r3, [pc, #944]	; (80016a0 <cinematicaInversa+0xc20>)
 80012ee:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 80012f2:	4bec      	ldr	r3, [pc, #944]	; (80016a4 <cinematicaInversa+0xc24>)
 80012f4:	ed93 7b00 	vldr	d7, [r3]
 80012f8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001630 <cinematicaInversa+0xbb0>
 80012fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001300:	4be9      	ldr	r3, [pc, #932]	; (80016a8 <cinematicaInversa+0xc28>)
 8001302:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001306:	4be9      	ldr	r3, [pc, #932]	; (80016ac <cinematicaInversa+0xc2c>)
 8001308:	ed93 7b00 	vldr	d7, [r3]
 800130c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001638 <cinematicaInversa+0xbb8>
 8001310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001314:	4be6      	ldr	r3, [pc, #920]	; (80016b0 <cinematicaInversa+0xc30>)
 8001316:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 800131a:	4be6      	ldr	r3, [pc, #920]	; (80016b4 <cinematicaInversa+0xc34>)
 800131c:	ed93 7b00 	vldr	d7, [r3]
 8001320:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8001638 <cinematicaInversa+0xbb8>
 8001324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001328:	4be3      	ldr	r3, [pc, #908]	; (80016b8 <cinematicaInversa+0xc38>)
 800132a:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 800132e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001332:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001640 <cinematicaInversa+0xbc0>
 8001336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800133a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001648 <cinematicaInversa+0xbc8>
 800133e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001342:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001346:	ee27 5b06 	vmul.f64	d5, d7, d6
 800134a:	ed97 7b04 	vldr	d7, [r7, #16]
 800134e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001352:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001356:	4bd9      	ldr	r3, [pc, #868]	; (80016bc <cinematicaInversa+0xc3c>)
 8001358:	ed93 7b00 	vldr	d7, [r3]
 800135c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001360:	ed97 7b02 	vldr	d7, [r7, #8]
 8001364:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001640 <cinematicaInversa+0xbc0>
 8001368:	ee37 7b46 	vsub.f64	d7, d7, d6
 800136c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001370:	eeb0 0b47 	vmov.f64	d0, d7
 8001374:	f010 fc74 	bl	8011c60 <pow>
 8001378:	eeb0 9b40 	vmov.f64	d9, d0
 800137c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001380:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001384:	eeb0 0b47 	vmov.f64	d0, d7
 8001388:	f010 fc6a 	bl	8011c60 <pow>
 800138c:	eeb0 7b40 	vmov.f64	d7, d0
 8001390:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001394:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001650 <cinematicaInversa+0xbd0>
 8001398:	ee37 9b46 	vsub.f64	d9, d7, d6
 800139c:	ed97 7b00 	vldr	d7, [r7]
 80013a0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013a4:	eeb0 0b47 	vmov.f64	d0, d7
 80013a8:	f010 fc5a 	bl	8011c60 <pow>
 80013ac:	eeb0 7b40 	vmov.f64	d7, d0
 80013b0:	ee39 7b07 	vadd.f64	d7, d9, d7
 80013b4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001658 <cinematicaInversa+0xbd8>
 80013b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013bc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001660 <cinematicaInversa+0xbe0>
 80013c0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80013c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80013c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80013cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013d0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013d4:	4bba      	ldr	r3, [pc, #744]	; (80016c0 <cinematicaInversa+0xc40>)
 80013d6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80013da:	ed97 7b02 	vldr	d7, [r7, #8]
 80013de:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001640 <cinematicaInversa+0xbc0>
 80013e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013e6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001648 <cinematicaInversa+0xbc8>
 80013ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013ee:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80013f2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80013f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80013fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001402:	4bb0      	ldr	r3, [pc, #704]	; (80016c4 <cinematicaInversa+0xc44>)
 8001404:	ed93 7b00 	vldr	d7, [r3]
 8001408:	ee26 8b07 	vmul.f64	d8, d6, d7
 800140c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001410:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001640 <cinematicaInversa+0xbc0>
 8001414:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001418:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800141c:	eeb0 0b47 	vmov.f64	d0, d7
 8001420:	f010 fc1e 	bl	8011c60 <pow>
 8001424:	eeb0 9b40 	vmov.f64	d9, d0
 8001428:	ed97 7b04 	vldr	d7, [r7, #16]
 800142c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001430:	eeb0 0b47 	vmov.f64	d0, d7
 8001434:	f010 fc14 	bl	8011c60 <pow>
 8001438:	eeb0 7b40 	vmov.f64	d7, d0
 800143c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001440:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001650 <cinematicaInversa+0xbd0>
 8001444:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001448:	ed97 7b00 	vldr	d7, [r7]
 800144c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001450:	eeb0 0b47 	vmov.f64	d0, d7
 8001454:	f010 fc04 	bl	8011c60 <pow>
 8001458:	eeb0 7b40 	vmov.f64	d7, d0
 800145c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001460:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001658 <cinematicaInversa+0xbd8>
 8001464:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001468:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001660 <cinematicaInversa+0xbe0>
 800146c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001470:	ed97 7b04 	vldr	d7, [r7, #16]
 8001474:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001478:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001480:	4b91      	ldr	r3, [pc, #580]	; (80016c8 <cinematicaInversa+0xc48>)
 8001482:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001486:	ed97 7b00 	vldr	d7, [r7]
 800148a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001668 <cinematicaInversa+0xbe8>
 800148e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001492:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001670 <cinematicaInversa+0xbf0>
 8001496:	ee27 6b06 	vmul.f64	d6, d7, d6
 800149a:	ed97 7b02 	vldr	d7, [r7, #8]
 800149e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001678 <cinematicaInversa+0xbf8>
 80014a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80014a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014ae:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001680 <cinematicaInversa+0xc00>
 80014b2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80014b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80014ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <cinematicaInversa+0xc1c>)
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80014cc:	ed97 7b00 	vldr	d7, [r7]
 80014d0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001668 <cinematicaInversa+0xbe8>
 80014d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014dc:	eeb0 0b47 	vmov.f64	d0, d7
 80014e0:	f010 fbbe 	bl	8011c60 <pow>
 80014e4:	eeb0 7b40 	vmov.f64	d7, d0
 80014e8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001688 <cinematicaInversa+0xc08>
 80014ec:	ee37 9b06 	vadd.f64	d9, d7, d6
 80014f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80014f4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001678 <cinematicaInversa+0xbf8>
 80014f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001500:	eeb0 0b47 	vmov.f64	d0, d7
 8001504:	f010 fbac 	bl	8011c60 <pow>
 8001508:	eeb0 7b40 	vmov.f64	d7, d0
 800150c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001510:	ed97 7b04 	vldr	d7, [r7, #16]
 8001514:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001518:	eeb0 0b47 	vmov.f64	d0, d7
 800151c:	f010 fba0 	bl	8011c60 <pow>
 8001520:	eeb0 7b40 	vmov.f64	d7, d0
 8001524:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001528:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001650 <cinematicaInversa+0xbd0>
 800152c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001530:	ed97 7b04 	vldr	d7, [r7, #16]
 8001534:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <cinematicaInversa+0xc4c>)
 8001542:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001546:	ed97 7b00 	vldr	d7, [r7]
 800154a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001668 <cinematicaInversa+0xbe8>
 800154e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001552:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001670 <cinematicaInversa+0xbf0>
 8001556:	ee27 6b06 	vmul.f64	d6, d7, d6
 800155a:	ed97 7b02 	vldr	d7, [r7, #8]
 800155e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001678 <cinematicaInversa+0xbf8>
 8001562:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001566:	ee37 7b07 	vadd.f64	d7, d7, d7
 800156a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800156e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001680 <cinematicaInversa+0xc00>
 8001572:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001576:	ed97 7b04 	vldr	d7, [r7, #16]
 800157a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800157e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <cinematicaInversa+0xc24>)
 8001584:	ed93 7b00 	vldr	d7, [r3]
 8001588:	ee26 8b07 	vmul.f64	d8, d6, d7
 800158c:	ed97 7b00 	vldr	d7, [r7]
 8001590:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001668 <cinematicaInversa+0xbe8>
 8001594:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001598:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800159c:	eeb0 0b47 	vmov.f64	d0, d7
 80015a0:	f010 fb5e 	bl	8011c60 <pow>
 80015a4:	eeb0 7b40 	vmov.f64	d7, d0
 80015a8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001688 <cinematicaInversa+0xc08>
 80015ac:	ee37 9b06 	vadd.f64	d9, d7, d6
 80015b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001678 <cinematicaInversa+0xbf8>
 80015b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015c0:	eeb0 0b47 	vmov.f64	d0, d7
 80015c4:	f010 fb4c 	bl	8011c60 <pow>
 80015c8:	eeb0 7b40 	vmov.f64	d7, d0
 80015cc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80015d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015d8:	eeb0 0b47 	vmov.f64	d0, d7
 80015dc:	f010 fb40 	bl	8011c60 <pow>
 80015e0:	eeb0 7b40 	vmov.f64	d7, d0
 80015e4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80015e8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001650 <cinematicaInversa+0xbd0>
 80015ec:	ee37 5b46 	vsub.f64	d5, d7, d6
 80015f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015f4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <cinematicaInversa+0xc50>)
 8001602:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001606:	ed97 7b00 	vldr	d7, [r7]
 800160a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001668 <cinematicaInversa+0xbe8>
 800160e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001612:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001690 <cinematicaInversa+0xc10>
 8001616:	ee27 6b06 	vmul.f64	d6, d7, d6
 800161a:	ed97 7b02 	vldr	d7, [r7, #8]
 800161e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001678 <cinematicaInversa+0xbf8>
 8001622:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001626:	ee37 7b07 	vadd.f64	d7, d7, d7
 800162a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800162e:	e051      	b.n	80016d4 <cinematicaInversa+0xc54>
 8001630:	e8584caa 	.word	0xe8584caa
 8001634:	3ffbb67a 	.word	0x3ffbb67a
 8001638:	e8584caa 	.word	0xe8584caa
 800163c:	bffbb67a 	.word	0xbffbb67a
 8001640:	1eb851ec 	.word	0x1eb851ec
 8001644:	3fb1eb85 	.word	0x3fb1eb85
 8001648:	24dd2f1b 	.word	0x24dd2f1b
 800164c:	3fc58106 	.word	0x3fc58106
 8001650:	70a3d70a 	.word	0x70a3d70a
 8001654:	3fd70a3d 	.word	0x3fd70a3d
 8001658:	93d96639 	.word	0x93d96639
 800165c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001660:	47ae147c 	.word	0x47ae147c
 8001664:	3fc47ae1 	.word	0x3fc47ae1
 8001668:	5625749b 	.word	0x5625749b
 800166c:	3faf09d1 	.word	0x3faf09d1
 8001670:	e8584caa 	.word	0xe8584caa
 8001674:	c00bb67a 	.word	0xc00bb67a
 8001678:	1eb851ec 	.word	0x1eb851ec
 800167c:	3fa1eb85 	.word	0x3fa1eb85
 8001680:	24dd2f1d 	.word	0x24dd2f1d
 8001684:	3fe58106 	.word	0x3fe58106
 8001688:	3532e7b5 	.word	0x3532e7b5
 800168c:	3fc0de09 	.word	0x3fc0de09
 8001690:	e8584caa 	.word	0xe8584caa
 8001694:	400bb67a 	.word	0x400bb67a
 8001698:	240002c8 	.word	0x240002c8
 800169c:	24000318 	.word	0x24000318
 80016a0:	24000308 	.word	0x24000308
 80016a4:	24000320 	.word	0x24000320
 80016a8:	24000310 	.word	0x24000310
 80016ac:	24000360 	.word	0x24000360
 80016b0:	24000350 	.word	0x24000350
 80016b4:	24000368 	.word	0x24000368
 80016b8:	24000358 	.word	0x24000358
 80016bc:	240002d0 	.word	0x240002d0
 80016c0:	240002e0 	.word	0x240002e0
 80016c4:	240002d8 	.word	0x240002d8
 80016c8:	240002e8 	.word	0x240002e8
 80016cc:	24000328 	.word	0x24000328
 80016d0:	24000330 	.word	0x24000330
 80016d4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001918 <cinematicaInversa+0xe98>
 80016d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016dc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001920 <cinematicaInversa+0xea0>
 80016e0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80016e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80016e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016ec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016f0:	4b9f      	ldr	r3, [pc, #636]	; (8001970 <cinematicaInversa+0xef0>)
 80016f2:	ed93 7b00 	vldr	d7, [r3]
 80016f6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80016fa:	ed97 7b00 	vldr	d7, [r7]
 80016fe:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001928 <cinematicaInversa+0xea8>
 8001702:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001706:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800170a:	eeb0 0b47 	vmov.f64	d0, d7
 800170e:	f010 faa7 	bl	8011c60 <pow>
 8001712:	eeb0 9b40 	vmov.f64	d9, d0
 8001716:	ed97 7b02 	vldr	d7, [r7, #8]
 800171a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8001930 <cinematicaInversa+0xeb0>
 800171e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001722:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001726:	eeb0 0b47 	vmov.f64	d0, d7
 800172a:	f010 fa99 	bl	8011c60 <pow>
 800172e:	eeb0 7b40 	vmov.f64	d7, d0
 8001732:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001736:	ed97 7b04 	vldr	d7, [r7, #16]
 800173a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800173e:	eeb0 0b47 	vmov.f64	d0, d7
 8001742:	f010 fa8d 	bl	8011c60 <pow>
 8001746:	eeb0 7b40 	vmov.f64	d7, d0
 800174a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800174e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001938 <cinematicaInversa+0xeb8>
 8001752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001756:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001940 <cinematicaInversa+0xec0>
 800175a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001948 <cinematicaInversa+0xec8>
 8001762:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001766:	ed97 7b04 	vldr	d7, [r7, #16]
 800176a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800176e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001772:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <cinematicaInversa+0xef4>)
 8001778:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800177c:	ed97 7b00 	vldr	d7, [r7]
 8001780:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001928 <cinematicaInversa+0xea8>
 8001784:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001788:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8001950 <cinematicaInversa+0xed0>
 800178c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001790:	ed97 7b02 	vldr	d7, [r7, #8]
 8001794:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001930 <cinematicaInversa+0xeb0>
 8001798:	ee37 7b05 	vadd.f64	d7, d7, d5
 800179c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017a4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001918 <cinematicaInversa+0xe98>
 80017a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ac:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001920 <cinematicaInversa+0xea0>
 80017b0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80017b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017c0:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <cinematicaInversa+0xef8>)
 80017c2:	ed93 7b00 	vldr	d7, [r3]
 80017c6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017ca:	ed97 7b00 	vldr	d7, [r7]
 80017ce:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001928 <cinematicaInversa+0xea8>
 80017d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017da:	eeb0 0b47 	vmov.f64	d0, d7
 80017de:	f010 fa3f 	bl	8011c60 <pow>
 80017e2:	eeb0 9b40 	vmov.f64	d9, d0
 80017e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80017ea:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001930 <cinematicaInversa+0xeb0>
 80017ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017f2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f6:	eeb0 0b47 	vmov.f64	d0, d7
 80017fa:	f010 fa31 	bl	8011c60 <pow>
 80017fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001802:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001806:	ed97 7b04 	vldr	d7, [r7, #16]
 800180a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800180e:	eeb0 0b47 	vmov.f64	d0, d7
 8001812:	f010 fa25 	bl	8011c60 <pow>
 8001816:	eeb0 7b40 	vmov.f64	d7, d0
 800181a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800181e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001938 <cinematicaInversa+0xeb8>
 8001822:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001826:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001940 <cinematicaInversa+0xec0>
 800182a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800182e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001948 <cinematicaInversa+0xec8>
 8001832:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001836:	ed97 7b04 	vldr	d7, [r7, #16]
 800183a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800183e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001842:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <cinematicaInversa+0xefc>)
 8001848:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <cinematicaInversa+0xf00>)
 800184e:	ed93 7b00 	vldr	d7, [r3]
 8001852:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001958 <cinematicaInversa+0xed8>
 8001856:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800185a:	eeb0 0b46 	vmov.f64	d0, d6
 800185e:	f010 fc51 	bl	8012104 <asin>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	eeb1 7b47 	vneg.f64	d7, d7
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <cinematicaInversa+0xf04>)
 800186c:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * RAD_TO_DEG;
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <cinematicaInversa+0xf04>)
 8001872:	ed93 7b00 	vldr	d7, [r3]
 8001876:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001960 <cinematicaInversa+0xee0>
 800187a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800187e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001968 <cinematicaInversa+0xee8>
 8001882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <cinematicaInversa+0xf04>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 800188c:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <cinematicaInversa+0xf08>)
 800188e:	ed93 7b00 	vldr	d7, [r3]
 8001892:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001958 <cinematicaInversa+0xed8>
 8001896:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800189a:	eeb0 0b46 	vmov.f64	d0, d6
 800189e:	f010 fc31 	bl	8012104 <asin>
 80018a2:	eeb0 7b40 	vmov.f64	d7, d0
 80018a6:	eeb1 7b47 	vneg.f64	d7, d7
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <cinematicaInversa+0xf0c>)
 80018ac:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * RAD_TO_DEG;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <cinematicaInversa+0xf0c>)
 80018b2:	ed93 7b00 	vldr	d7, [r3]
 80018b6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001960 <cinematicaInversa+0xee0>
 80018ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018be:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001968 <cinematicaInversa+0xee8>
 80018c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <cinematicaInversa+0xf0c>)
 80018c8:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <cinematicaInversa+0xef4>)
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001958 <cinematicaInversa+0xed8>
 80018d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80018da:	eeb0 0b46 	vmov.f64	d0, d6
 80018de:	f010 fc11 	bl	8012104 <asin>
 80018e2:	eeb0 7b40 	vmov.f64	d7, d0
 80018e6:	eeb1 7b47 	vneg.f64	d7, d7
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <cinematicaInversa+0xf10>)
 80018ec:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * RAD_TO_DEG;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <cinematicaInversa+0xf10>)
 80018f2:	ed93 7b00 	vldr	d7, [r3]
 80018f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001960 <cinematicaInversa+0xee0>
 80018fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018fe:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8001968 <cinematicaInversa+0xee8>
 8001902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <cinematicaInversa+0xf10>)
 8001908:	ed83 7b00 	vstr	d7, [r3]
}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	ecbd 8b04 	vpop	{d8-d9}
 8001916:	bd80      	pop	{r7, pc}
 8001918:	9ba5e356 	.word	0x9ba5e356
 800191c:	3fe020c4 	.word	0x3fe020c4
 8001920:	24dd2f1b 	.word	0x24dd2f1b
 8001924:	3fc58106 	.word	0x3fc58106
 8001928:	5625749b 	.word	0x5625749b
 800192c:	3faf09d1 	.word	0x3faf09d1
 8001930:	1eb851ec 	.word	0x1eb851ec
 8001934:	3fa1eb85 	.word	0x3fa1eb85
 8001938:	70a3d70a 	.word	0x70a3d70a
 800193c:	3fd70a3d 	.word	0x3fd70a3d
 8001940:	93d96639 	.word	0x93d96639
 8001944:	3f9ce6c0 	.word	0x3f9ce6c0
 8001948:	47ae147c 	.word	0x47ae147c
 800194c:	3fc47ae1 	.word	0x3fc47ae1
 8001950:	e8584caa 	.word	0xe8584caa
 8001954:	400bb67a 	.word	0x400bb67a
 8001958:	9999999a 	.word	0x9999999a
 800195c:	3fd99999 	.word	0x3fd99999
 8001960:	00000000 	.word	0x00000000
 8001964:	40668000 	.word	0x40668000
 8001968:	54442eea 	.word	0x54442eea
 800196c:	400921fb 	.word	0x400921fb
 8001970:	24000360 	.word	0x24000360
 8001974:	24000370 	.word	0x24000370
 8001978:	24000368 	.word	0x24000368
 800197c:	24000378 	.word	0x24000378
 8001980:	240002e0 	.word	0x240002e0
 8001984:	240003c0 	.word	0x240003c0
 8001988:	24000328 	.word	0x24000328
 800198c:	240003c8 	.word	0x240003c8
 8001990:	240003d0 	.word	0x240003d0

08001994 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a63      	ldr	r2, [pc, #396]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a04:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a5c      	ldr	r2, [pc, #368]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001a84:	f006 fb36 	bl	80080f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2170      	movs	r1, #112	; 0x70
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001a8e:	f006 fb31 	bl	80080f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8001a92:	233f      	movs	r3, #63	; 0x3f
 8001a94:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4838      	ldr	r0, [pc, #224]	; (8001b88 <MX_GPIO_Init+0x1f4>)
 8001aa8:	f006 f95c 	bl	8007d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	482f      	ldr	r0, [pc, #188]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ac4:	f006 f94e 	bl	8007d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8001ac8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4827      	ldr	r0, [pc, #156]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ae2:	f006 f93f 	bl	8007d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8001ae6:	2370      	movs	r3, #112	; 0x70
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001afe:	f006 f931 	bl	8007d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	2006      	movs	r0, #6
 8001b08:	f005 fb85 	bl	8007216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	f005 fb9c 	bl	800724a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	2007      	movs	r0, #7
 8001b18:	f005 fb7d 	bl	8007216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f005 fb94 	bl	800724a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	2008      	movs	r0, #8
 8001b28:	f005 fb75 	bl	8007216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f005 fb8c 	bl	800724a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2101      	movs	r1, #1
 8001b36:	2009      	movs	r0, #9
 8001b38:	f005 fb6d 	bl	8007216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b3c:	2009      	movs	r0, #9
 8001b3e:	f005 fb84 	bl	800724a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2101      	movs	r1, #1
 8001b46:	200a      	movs	r0, #10
 8001b48:	f005 fb65 	bl	8007216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f005 fb7c 	bl	800724a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	2017      	movs	r0, #23
 8001b58:	f005 fb5d 	bl	8007216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b5c:	2017      	movs	r0, #23
 8001b5e:	f005 fb74 	bl	800724a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	2028      	movs	r0, #40	; 0x28
 8001b68:	f005 fb55 	bl	8007216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b6c:	2028      	movs	r0, #40	; 0x28
 8001b6e:	f005 fb6c 	bl	800724a <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020800 	.word	0x58020800
 8001b84:	58020c00 	.word	0x58020c00
 8001b88:	58021000 	.word	0x58021000
 8001b8c:	00000000 	.word	0x00000000

08001b90 <homingAprox>:
//#define ES1s_PRESSED !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))
//#define ES2s_PRESSED !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop3_Sup_Pin))
//#define ES3s_PRESSED !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop2_Sup_Pin))


void homingAprox(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
	homeOk = 0;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <homingAprox+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4821      	ldr	r0, [pc, #132]	; (8001c24 <homingAprox+0x94>)
 8001ba0:	f009 fb86 	bl	800b2b0 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4820      	ldr	r0, [pc, #128]	; (8001c28 <homingAprox+0x98>)
 8001ba8:	f009 fb82 	bl	800b2b0 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8001bac:	2100      	movs	r1, #0
 8001bae:	481f      	ldr	r0, [pc, #124]	; (8001c2c <homingAprox+0x9c>)
 8001bb0:	f009 fb7e 	bl	800b2b0 <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8001bb4:	2006      	movs	r0, #6
 8001bb6:	f005 fb56 	bl	8007266 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f005 fb53 	bl	8007266 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001bc0:	2008      	movs	r0, #8
 8001bc2:	f005 fb50 	bl	8007266 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8001bc6:	2009      	movs	r0, #9
 8001bc8:	f005 fb4d 	bl	8007266 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f005 fb4a 	bl	8007266 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001bd2:	2017      	movs	r0, #23
 8001bd4:	f005 fb47 	bl	8007266 <HAL_NVIC_DisableIRQ>

	//Las tres piernas se mueven hacia arriba
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <homingAprox+0xa0>)
 8001be0:	f006 fa88 	bl	80080f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bea:	4811      	ldr	r0, [pc, #68]	; (8001c30 <homingAprox+0xa0>)
 8001bec:	f006 fa82 	bl	80080f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <homingAprox+0xa0>)
 8001bf8:	f006 fa7c 	bl	80080f4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001bfc:	2014      	movs	r0, #20
 8001bfe:	f005 f9db 	bl	8006fb8 <HAL_Delay>
	rpm = 0.1;
 8001c02:	490c      	ldr	r1, [pc, #48]	; (8001c34 <homingAprox+0xa4>)
 8001c04:	a304      	add	r3, pc, #16	; (adr r3, 8001c18 <homingAprox+0x88>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t hom = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]


	while (homeOk == 0) {
 8001c12:	e177      	b.n	8001f04 <homingAprox+0x374>
 8001c14:	f3af 8000 	nop.w
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3fb99999 	.word	0x3fb99999
 8001c20:	24000380 	.word	0x24000380
 8001c24:	240005d4 	.word	0x240005d4
 8001c28:	24000620 	.word	0x24000620
 8001c2c:	2400066c 	.word	0x2400066c
 8001c30:	58020800 	.word	0x58020800
 8001c34:	24000388 	.word	0x24000388
		if(rpm<=4){
 8001c38:	4bc1      	ldr	r3, [pc, #772]	; (8001f40 <homingAprox+0x3b0>)
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d809      	bhi.n	8001c60 <homingAprox+0xd0>
			rpm = rpm + 0.001;
 8001c4c:	4bbc      	ldr	r3, [pc, #752]	; (8001f40 <homingAprox+0x3b0>)
 8001c4e:	ed93 7b00 	vldr	d7, [r3]
 8001c52:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001f28 <homingAprox+0x398>
 8001c56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c5a:	4bb9      	ldr	r3, [pc, #740]	; (8001f40 <homingAprox+0x3b0>)
 8001c5c:	ed83 7b00 	vstr	d7, [r3]



		//TIM12->CNT=0;

		periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8001c60:	4bb8      	ldr	r3, [pc, #736]	; (8001f44 <homingAprox+0x3b4>)
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c70:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c74:	4bb2      	ldr	r3, [pc, #712]	; (8001f40 <homingAprox+0x3b0>)
 8001c76:	ed93 7b00 	vldr	d7, [r3]
 8001c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c7e:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8001f30 <homingAprox+0x3a0>
 8001c82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c86:	ed9f 5bac 	vldr	d5, [pc, #688]	; 8001f38 <homingAprox+0x3a8>
 8001c8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c8e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c9e:	4baa      	ldr	r3, [pc, #680]	; (8001f48 <homingAprox+0x3b8>)
 8001ca0:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8001ca4:	4ba9      	ldr	r3, [pc, #676]	; (8001f4c <homingAprox+0x3bc>)
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cb0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cb4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001cb8:	4ba1      	ldr	r3, [pc, #644]	; (8001f40 <homingAprox+0x3b0>)
 8001cba:	ed93 7b00 	vldr	d7, [r3]
 8001cbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cc2:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8001f30 <homingAprox+0x3a0>
 8001cc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cca:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 8001f38 <homingAprox+0x3a8>
 8001cce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cd2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cde:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ce2:	4b99      	ldr	r3, [pc, #612]	; (8001f48 <homingAprox+0x3b8>)
 8001ce4:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8001ce8:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <homingAprox+0x3c0>)
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cf4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cf8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001cfc:	4b90      	ldr	r3, [pc, #576]	; (8001f40 <homingAprox+0x3b0>)
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d06:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001f30 <homingAprox+0x3a0>
 8001d0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d0e:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8001f38 <homingAprox+0x3a8>
 8001d12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <homingAprox+0x3b8>)
 8001d28:	ed83 7b04 	vstr	d7, [r3, #16]

		//PREGUNTAR
		if (TIM12->CNT > periodoM[0]) {
 8001d2c:	4b85      	ldr	r3, [pc, #532]	; (8001f44 <homingAprox+0x3b4>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d38:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <homingAprox+0x3b8>)
 8001d3a:	ed93 7b00 	vldr	d7, [r3]
 8001d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	dd0c      	ble.n	8001d62 <homingAprox+0x1d2>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d48:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <homingAprox+0x3b8>)
 8001d4a:	ed93 7b00 	vldr	d7, [r3]
 8001d4e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d56:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <homingAprox+0x3b4>)
 8001d58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d5c:	ee17 2a90 	vmov	r2, s15
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 8001d62:	4b7a      	ldr	r3, [pc, #488]	; (8001f4c <homingAprox+0x3bc>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <homingAprox+0x3b8>)
 8001d70:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	dd0c      	ble.n	8001d98 <homingAprox+0x208>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d7e:	4b72      	ldr	r3, [pc, #456]	; (8001f48 <homingAprox+0x3b8>)
 8001d80:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <homingAprox+0x3bc>)
 8001d8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d92:	ee17 2a90 	vmov	r2, s15
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8001d98:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <homingAprox+0x3c0>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001da4:	4b68      	ldr	r3, [pc, #416]	; (8001f48 <homingAprox+0x3b8>)
 8001da6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001daa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	dd0c      	ble.n	8001dce <homingAprox+0x23e>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <homingAprox+0x3b8>)
 8001db6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001dba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001dbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <homingAprox+0x3c0>)
 8001dc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR =periodoM[0];
 8001dce:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <homingAprox+0x3b8>)
 8001dd0:	ed93 7b00 	vldr	d7, [r3]
 8001dd4:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <homingAprox+0x3b4>)
 8001dd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dda:	ee17 2a90 	vmov	r2, s15
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8001de0:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <homingAprox+0x3b4>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001dec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001df0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <homingAprox+0x3b4>)
 8001df6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dfa:	ee17 2a90 	vmov	r2, s15
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8001e00:	4b51      	ldr	r3, [pc, #324]	; (8001f48 <homingAprox+0x3b8>)
 8001e02:	ed93 7b02 	vldr	d7, [r3, #8]
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <homingAprox+0x3bc>)
 8001e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e0c:	ee17 2a90 	vmov	r2, s15
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8001e12:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <homingAprox+0x3bc>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <homingAprox+0x3bc>)
 8001e28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e2c:	ee17 2a90 	vmov	r2, s15
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8001e32:	4b45      	ldr	r3, [pc, #276]	; (8001f48 <homingAprox+0x3b8>)
 8001e34:	ed93 7b04 	vldr	d7, [r3, #16]
 8001e38:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <homingAprox+0x3c0>)
 8001e3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e3e:	ee17 2a90 	vmov	r2, s15
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8001e44:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <homingAprox+0x3c0>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e58:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <homingAprox+0x3c0>)
 8001e5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e5e:	ee17 2a90 	vmov	r2, s15
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34


		if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001e64:	2101      	movs	r1, #1
 8001e66:	483b      	ldr	r0, [pc, #236]	; (8001f54 <homingAprox+0x3c4>)
 8001e68:	f006 f92c 	bl	80080c4 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <homingAprox+0x2fe>
 8001e72:	2104      	movs	r1, #4
 8001e74:	4837      	ldr	r0, [pc, #220]	; (8001f54 <homingAprox+0x3c4>)
 8001e76:	f006 f925 	bl	80080c4 <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <homingAprox+0x2fe>
 8001e80:	2110      	movs	r1, #16
 8001e82:	4834      	ldr	r0, [pc, #208]	; (8001f54 <homingAprox+0x3c4>)
 8001e84:	f006 f91e 	bl	80080c4 <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d126      	bne.n	8001edc <homingAprox+0x34c>
			HAL_Delay(30);
 8001e8e:	201e      	movs	r0, #30
 8001e90:	f005 f892 	bl	8006fb8 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001e94:	2101      	movs	r1, #1
 8001e96:	482f      	ldr	r0, [pc, #188]	; (8001f54 <homingAprox+0x3c4>)
 8001e98:	f006 f914 	bl	80080c4 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <homingAprox+0x32e>
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	482b      	ldr	r0, [pc, #172]	; (8001f54 <homingAprox+0x3c4>)
 8001ea6:	f006 f90d 	bl	80080c4 <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <homingAprox+0x32e>
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	4828      	ldr	r0, [pc, #160]	; (8001f54 <homingAprox+0x3c4>)
 8001eb4:	f006 f906 	bl	80080c4 <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <homingAprox+0x34c>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4825      	ldr	r0, [pc, #148]	; (8001f58 <homingAprox+0x3c8>)
 8001ec2:	f008 ffad 	bl	800ae20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4824      	ldr	r0, [pc, #144]	; (8001f5c <homingAprox+0x3cc>)
 8001eca:	f008 ffa9 	bl	800ae20 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4823      	ldr	r0, [pc, #140]	; (8001f60 <homingAprox+0x3d0>)
 8001ed2:	f008 ffa5 	bl	800ae20 <HAL_TIM_PWM_Stop>
				//HAL_UART_Transmit(&huart3,homeOk, sizeof(homeOk), 100);
				homeOk = 1;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <homingAprox+0x3d4>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3,homeOk, sizeof(homeOk), 100);
			}
		}
		if(hom==0){
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <homingAprox+0x36e>
			hom=1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	607b      	str	r3, [r7, #4]
			//HAL_UART_Transmit(&huart3,(uint8_t *)"hola k ace\n\r", 12, 100);
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	481b      	ldr	r0, [pc, #108]	; (8001f58 <homingAprox+0x3c8>)
 8001eea:	f008 fe8b 	bl	800ac04 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	481a      	ldr	r0, [pc, #104]	; (8001f5c <homingAprox+0x3cc>)
 8001ef2:	f008 fe87 	bl	800ac04 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4819      	ldr	r0, [pc, #100]	; (8001f60 <homingAprox+0x3d0>)
 8001efa:	f008 fe83 	bl	800ac04 <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f005 f85a 	bl	8006fb8 <HAL_Delay>
	while (homeOk == 0) {
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <homingAprox+0x3d4>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f43f ae95 	beq.w	8001c38 <homingAprox+0xa8>
	}
	HAL_UART_Transmit(&huart3,(uint8_t *)"F\n", 3, 100);
 8001f0e:	2364      	movs	r3, #100	; 0x64
 8001f10:	2203      	movs	r2, #3
 8001f12:	4915      	ldr	r1, [pc, #84]	; (8001f68 <homingAprox+0x3d8>)
 8001f14:	4815      	ldr	r0, [pc, #84]	; (8001f6c <homingAprox+0x3dc>)
 8001f16:	f00a fcc9 	bl	800c8ac <HAL_UART_Transmit>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f2c:	3f50624d 	.word	0x3f50624d
 8001f30:	00000000 	.word	0x00000000
 8001f34:	40c2c000 	.word	0x40c2c000
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	41ec9c38 	.word	0x41ec9c38
 8001f40:	24000388 	.word	0x24000388
 8001f44:	40001800 	.word	0x40001800
 8001f48:	24000500 	.word	0x24000500
 8001f4c:	40001c00 	.word	0x40001c00
 8001f50:	40002000 	.word	0x40002000
 8001f54:	58021000 	.word	0x58021000
 8001f58:	24000704 	.word	0x24000704
 8001f5c:	24000750 	.word	0x24000750
 8001f60:	2400079c 	.word	0x2400079c
 8001f64:	24000380 	.word	0x24000380
 8001f68:	080124d8 	.word	0x080124d8
 8001f6c:	24000cf0 	.word	0x24000cf0

08001f70 <homingArm1>:

void homingArm1(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0

	double flagEndStop=0;
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);  //puede ser redundante
 8001f82:	2100      	movs	r1, #0
 8001f84:	4860      	ldr	r0, [pc, #384]	; (8002108 <homingArm1+0x198>)
 8001f86:	f008 ff4b 	bl	800ae20 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8001f8a:	4960      	ldr	r1, [pc, #384]	; (800210c <homingArm1+0x19c>)
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <homingArm1+0x1a0>)
 8001f92:	e9c1 2300 	strd	r2, r3, [r1]

	TIM12->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <homingArm1+0x1a4>)
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fa2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001fa6:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001faa:	4b58      	ldr	r3, [pc, #352]	; (800210c <homingArm1+0x19c>)
 8001fac:	ed93 7b00 	vldr	d7, [r3]
 8001fb0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001fb4:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80020f8 <homingArm1+0x188>
 8001fb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fbc:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8002100 <homingArm1+0x190>
 8001fc0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001fc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fcc:	4b51      	ldr	r3, [pc, #324]	; (8002114 <homingArm1+0x1a4>)
 8001fce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd2:	ee17 2a90 	vmov	r2, s15
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <homingArm1+0x1a4>)
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <homingArm1+0x1a4>)
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	6353      	str	r3, [r2, #52]	; 0x34

	if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {  //puede ser redundante
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	484c      	ldr	r0, [pc, #304]	; (8002118 <homingArm1+0x1a8>)
 8001fe6:	f006 f86d 	bl	80080c4 <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d114      	bne.n	800201a <homingArm1+0xaa>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8001ff0:	e00c      	b.n	800200c <homingArm1+0x9c>
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff8:	4848      	ldr	r0, [pc, #288]	; (800211c <homingArm1+0x1ac>)
 8001ffa:	f006 f87b 	bl	80080f4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ffe:	2100      	movs	r1, #0
 8002000:	4841      	ldr	r0, [pc, #260]	; (8002108 <homingArm1+0x198>)
 8002002:	f008 fdff 	bl	800ac04 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8002006:	201e      	movs	r0, #30
 8002008:	f004 ffd6 	bl	8006fb8 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800200c:	2101      	movs	r1, #1
 800200e:	4842      	ldr	r0, [pc, #264]	; (8002118 <homingArm1+0x1a8>)
 8002010:	f006 f858 	bl	80080c4 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0eb      	beq.n	8001ff2 <homingArm1+0x82>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002020:	483e      	ldr	r0, [pc, #248]	; (800211c <homingArm1+0x1ac>)
 8002022:	f006 f867 	bl	80080f4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002026:	2100      	movs	r1, #0
 8002028:	4837      	ldr	r0, [pc, #220]	; (8002108 <homingArm1+0x198>)
 800202a:	f008 fdeb 	bl	800ac04 <HAL_TIM_PWM_Start>
	homeOk = 0;
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <homingArm1+0x1b0>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]

	while (homeOk == 0) {
 8002034:	e056      	b.n	80020e4 <homingArm1+0x174>
		if (flagEndStop==0 && !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8002036:	ed97 7b00 	vldr	d7, [r7]
 800203a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	d121      	bne.n	8002088 <homingArm1+0x118>
 8002044:	2101      	movs	r1, #1
 8002046:	4834      	ldr	r0, [pc, #208]	; (8002118 <homingArm1+0x1a8>)
 8002048:	f006 f83c 	bl	80080c4 <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11a      	bne.n	8002088 <homingArm1+0x118>
			HAL_Delay(30);		//Para filtrar transitorio
 8002052:	201e      	movs	r0, #30
 8002054:	f004 ffb0 	bl	8006fb8 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin))) {
 8002058:	2101      	movs	r1, #1
 800205a:	482f      	ldr	r0, [pc, #188]	; (8002118 <homingArm1+0x1a8>)
 800205c:	f006 f832 	bl	80080c4 <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d110      	bne.n	8002088 <homingArm1+0x118>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ES1_Pressed\n", 13, 100);
 8002066:	2364      	movs	r3, #100	; 0x64
 8002068:	220d      	movs	r2, #13
 800206a:	492e      	ldr	r1, [pc, #184]	; (8002124 <homingArm1+0x1b4>)
 800206c:	482e      	ldr	r0, [pc, #184]	; (8002128 <homingArm1+0x1b8>)
 800206e:	f00a fc1d 	bl	800c8ac <HAL_UART_Transmit>
				HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002078:	4828      	ldr	r0, [pc, #160]	; (800211c <homingArm1+0x1ac>)
 800207a:	f006 f83b 	bl	80080f4 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <homingArm1+0x1bc>)
 8002084:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop==1 && HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 8002088:	ed97 7b00 	vldr	d7, [r7]
 800208c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002090:	eeb4 7b46 	vcmp.f64	d7, d6
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	d124      	bne.n	80020e4 <homingArm1+0x174>
 800209a:	2101      	movs	r1, #1
 800209c:	481e      	ldr	r0, [pc, #120]	; (8002118 <homingArm1+0x1a8>)
 800209e:	f006 f811 	bl	80080c4 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01d      	beq.n	80020e4 <homingArm1+0x174>
			HAL_Delay(30);		//Para filtrar transitorio
 80020a8:	201e      	movs	r0, #30
 80020aa:	f004 ff85 	bl	8006fb8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80020ae:	2101      	movs	r1, #1
 80020b0:	4819      	ldr	r0, [pc, #100]	; (8002118 <homingArm1+0x1a8>)
 80020b2:	f006 f807 	bl	80080c4 <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <homingArm1+0x174>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80020bc:	2100      	movs	r1, #0
 80020be:	4812      	ldr	r0, [pc, #72]	; (8002108 <homingArm1+0x198>)
 80020c0:	f008 feae 	bl	800ae20 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"endArm1\n", 9, 100);
 80020c4:	2364      	movs	r3, #100	; 0x64
 80020c6:	2209      	movs	r2, #9
 80020c8:	4919      	ldr	r1, [pc, #100]	; (8002130 <homingArm1+0x1c0>)
 80020ca:	4817      	ldr	r0, [pc, #92]	; (8002128 <homingArm1+0x1b8>)
 80020cc:	f00a fbee 	bl	800c8ac <HAL_UART_Transmit>
				titha1 = 0;
 80020d0:	4918      	ldr	r1, [pc, #96]	; (8002134 <homingArm1+0x1c4>)
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <homingArm1+0x1b0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <homingArm1+0x1b0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0a4      	beq.n	8002036 <homingArm1+0xc6>
			}
		}
	}
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40c2c000 	.word	0x40c2c000
 8002100:	00000000 	.word	0x00000000
 8002104:	41ec9c38 	.word	0x41ec9c38
 8002108:	24000704 	.word	0x24000704
 800210c:	24000388 	.word	0x24000388
 8002110:	3fe00000 	.word	0x3fe00000
 8002114:	40001800 	.word	0x40001800
 8002118:	58021000 	.word	0x58021000
 800211c:	58020800 	.word	0x58020800
 8002120:	24000380 	.word	0x24000380
 8002124:	080124dc 	.word	0x080124dc
 8002128:	24000cf0 	.word	0x24000cf0
 800212c:	3ff00000 	.word	0x3ff00000
 8002130:	080124ec 	.word	0x080124ec
 8002134:	240003c0 	.word	0x240003c0

08002138 <homingArm2>:

void homingArm2(void) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 800214a:	2100      	movs	r1, #0
 800214c:	4872      	ldr	r0, [pc, #456]	; (8002318 <homingArm2+0x1e0>)
 800214e:	f008 fe67 	bl	800ae20 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8002152:	4972      	ldr	r1, [pc, #456]	; (800231c <homingArm2+0x1e4>)
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	4b71      	ldr	r3, [pc, #452]	; (8002320 <homingArm2+0x1e8>)
 800215a:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 800215e:	4b71      	ldr	r3, [pc, #452]	; (8002324 <homingArm2+0x1ec>)
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800216a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800216e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <homingArm2+0x1e4>)
 8002174:	ed93 7b00 	vldr	d7, [r3]
 8002178:	ee26 7b07 	vmul.f64	d7, d6, d7
 800217c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002308 <homingArm2+0x1d0>
 8002180:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002184:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002310 <homingArm2+0x1d8>
 8002188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800218c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002190:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <homingArm2+0x1ec>)
 8002196:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800219a:	ee17 2a90 	vmov	r2, s15
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 80021a0:	4b60      	ldr	r3, [pc, #384]	; (8002324 <homingArm2+0x1ec>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	4a5f      	ldr	r2, [pc, #380]	; (8002324 <homingArm2+0x1ec>)
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	6353      	str	r3, [r2, #52]	; 0x34

	if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 80021aa:	2104      	movs	r1, #4
 80021ac:	485e      	ldr	r0, [pc, #376]	; (8002328 <homingArm2+0x1f0>)
 80021ae:	f005 ff89 	bl	80080c4 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d114      	bne.n	80021e2 <homingArm2+0xaa>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80021b8:	e00c      	b.n	80021d4 <homingArm2+0x9c>
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c0:	485a      	ldr	r0, [pc, #360]	; (800232c <homingArm2+0x1f4>)
 80021c2:	f005 ff97 	bl	80080f4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80021c6:	2100      	movs	r1, #0
 80021c8:	4853      	ldr	r0, [pc, #332]	; (8002318 <homingArm2+0x1e0>)
 80021ca:	f008 fd1b 	bl	800ac04 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80021ce:	201e      	movs	r0, #30
 80021d0:	f004 fef2 	bl	8006fb8 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80021d4:	2104      	movs	r1, #4
 80021d6:	4854      	ldr	r0, [pc, #336]	; (8002328 <homingArm2+0x1f0>)
 80021d8:	f005 ff74 	bl	80080c4 <HAL_GPIO_ReadPin>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0eb      	beq.n	80021ba <homingArm2+0x82>
		}

	}
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80021e2:	2100      	movs	r1, #0
 80021e4:	484c      	ldr	r0, [pc, #304]	; (8002318 <homingArm2+0x1e0>)
 80021e6:	f008 fe1b 	bl	800ae20 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80021ea:	494c      	ldr	r1, [pc, #304]	; (800231c <homingArm2+0x1e4>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <homingArm2+0x1e8>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 80021f6:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <homingArm2+0x1ec>)
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002202:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002206:	ee37 6b06 	vadd.f64	d6, d7, d6
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <homingArm2+0x1e4>)
 800220c:	ed93 7b00 	vldr	d7, [r3]
 8002210:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002214:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002308 <homingArm2+0x1d0>
 8002218:	ee27 6b06 	vmul.f64	d6, d7, d6
 800221c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002310 <homingArm2+0x1d8>
 8002220:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002224:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002228:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222c:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <homingArm2+0x1ec>)
 800222e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002232:	ee17 2a90 	vmov	r2, s15
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <homingArm2+0x1ec>)
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	4a39      	ldr	r2, [pc, #228]	; (8002324 <homingArm2+0x1ec>)
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002248:	4838      	ldr	r0, [pc, #224]	; (800232c <homingArm2+0x1f4>)
 800224a:	f005 ff53 	bl	80080f4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800224e:	2100      	movs	r1, #0
 8002250:	4831      	ldr	r0, [pc, #196]	; (8002318 <homingArm2+0x1e0>)
 8002252:	f008 fcd7 	bl	800ac04 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <homingArm2+0x1f8>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800225c:	e049      	b.n	80022f2 <homingArm2+0x1ba>
		if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 800225e:	2104      	movs	r1, #4
 8002260:	4831      	ldr	r0, [pc, #196]	; (8002328 <homingArm2+0x1f0>)
 8002262:	f005 ff2f 	bl	80080c4 <HAL_GPIO_ReadPin>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d114      	bne.n	8002296 <homingArm2+0x15e>
			HAL_Delay(30);		//Para filtrar transitorio
 800226c:	201e      	movs	r0, #30
 800226e:	f004 fea3 	bl	8006fb8 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin))) {
 8002272:	2104      	movs	r1, #4
 8002274:	482c      	ldr	r0, [pc, #176]	; (8002328 <homingArm2+0x1f0>)
 8002276:	f005 ff25 	bl	80080c4 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <homingArm2+0x15e>
				HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002286:	4829      	ldr	r0, [pc, #164]	; (800232c <homingArm2+0x1f4>)
 8002288:	f005 ff34 	bl	80080f4 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <homingArm2+0x1fc>)
 8002292:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 8002296:	ed97 7b00 	vldr	d7, [r7]
 800229a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800229e:	eeb4 7b46 	vcmp.f64	d7, d6
 80022a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a6:	d124      	bne.n	80022f2 <homingArm2+0x1ba>
 80022a8:	2104      	movs	r1, #4
 80022aa:	481f      	ldr	r0, [pc, #124]	; (8002328 <homingArm2+0x1f0>)
 80022ac:	f005 ff0a 	bl	80080c4 <HAL_GPIO_ReadPin>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01d      	beq.n	80022f2 <homingArm2+0x1ba>
			HAL_Delay(30);		//Para filtrar transitorio
 80022b6:	201e      	movs	r0, #30
 80022b8:	f004 fe7e 	bl	8006fb8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80022bc:	2104      	movs	r1, #4
 80022be:	481a      	ldr	r0, [pc, #104]	; (8002328 <homingArm2+0x1f0>)
 80022c0:	f005 ff00 	bl	80080c4 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d013      	beq.n	80022f2 <homingArm2+0x1ba>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80022ca:	2100      	movs	r1, #0
 80022cc:	4812      	ldr	r0, [pc, #72]	; (8002318 <homingArm2+0x1e0>)
 80022ce:	f008 fda7 	bl	800ae20 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm2\n\r", 9, 100);
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	2209      	movs	r2, #9
 80022d6:	4918      	ldr	r1, [pc, #96]	; (8002338 <homingArm2+0x200>)
 80022d8:	4818      	ldr	r0, [pc, #96]	; (800233c <homingArm2+0x204>)
 80022da:	f00a fae7 	bl	800c8ac <HAL_UART_Transmit>
				titha2 = 0;
 80022de:	4918      	ldr	r1, [pc, #96]	; (8002340 <homingArm2+0x208>)
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <homingArm2+0x1f8>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <homingArm2+0x1f8>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0b1      	beq.n	800225e <homingArm2+0x126>
			}
		}
	}
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	f3af 8000 	nop.w
 8002308:	00000000 	.word	0x00000000
 800230c:	40c2c000 	.word	0x40c2c000
 8002310:	00000000 	.word	0x00000000
 8002314:	41ec9c38 	.word	0x41ec9c38
 8002318:	24000750 	.word	0x24000750
 800231c:	24000388 	.word	0x24000388
 8002320:	3fe00000 	.word	0x3fe00000
 8002324:	40001c00 	.word	0x40001c00
 8002328:	58021000 	.word	0x58021000
 800232c:	58020800 	.word	0x58020800
 8002330:	24000380 	.word	0x24000380
 8002334:	3ff00000 	.word	0x3ff00000
 8002338:	080124f8 	.word	0x080124f8
 800233c:	24000cf0 	.word	0x24000cf0
 8002340:	240003c8 	.word	0x240003c8
 8002344:	00000000 	.word	0x00000000

08002348 <homingArm3>:

void homingArm3(void) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800235a:	2100      	movs	r1, #0
 800235c:	4860      	ldr	r0, [pc, #384]	; (80024e0 <homingArm3+0x198>)
 800235e:	f008 fd5f 	bl	800ae20 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8002362:	4960      	ldr	r1, [pc, #384]	; (80024e4 <homingArm3+0x19c>)
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <homingArm3+0x1a0>)
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
	TIM14->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM1->PSC) + 1.0) * 9600.0)) - 1.0);
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <homingArm3+0x1a4>)
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800237a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800237e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <homingArm3+0x19c>)
 8002384:	ed93 7b00 	vldr	d7, [r3]
 8002388:	ee26 7b07 	vmul.f64	d7, d6, d7
 800238c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80024d0 <homingArm3+0x188>
 8002390:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002394:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80024d8 <homingArm3+0x190>
 8002398:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800239c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80023a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023a4:	4b52      	ldr	r3, [pc, #328]	; (80024f0 <homingArm3+0x1a8>)
 80023a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023aa:	ee17 2a90 	vmov	r2, s15
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <homingArm3+0x1a8>)
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	4a4e      	ldr	r2, [pc, #312]	; (80024f0 <homingArm3+0x1a8>)
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80023ba:	2110      	movs	r1, #16
 80023bc:	484d      	ldr	r0, [pc, #308]	; (80024f4 <homingArm3+0x1ac>)
 80023be:	f005 fe81 	bl	80080c4 <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d114      	bne.n	80023f2 <homingArm3+0xaa>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 80023c8:	e00c      	b.n	80023e4 <homingArm3+0x9c>
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d0:	4849      	ldr	r0, [pc, #292]	; (80024f8 <homingArm3+0x1b0>)
 80023d2:	f005 fe8f 	bl	80080f4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023d6:	2100      	movs	r1, #0
 80023d8:	4841      	ldr	r0, [pc, #260]	; (80024e0 <homingArm3+0x198>)
 80023da:	f008 fc13 	bl	800ac04 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80023de:	201e      	movs	r0, #30
 80023e0:	f004 fdea 	bl	8006fb8 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 80023e4:	2110      	movs	r1, #16
 80023e6:	4843      	ldr	r0, [pc, #268]	; (80024f4 <homingArm3+0x1ac>)
 80023e8:	f005 fe6c 	bl	80080c4 <HAL_GPIO_ReadPin>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0eb      	beq.n	80023ca <homingArm3+0x82>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f8:	483f      	ldr	r0, [pc, #252]	; (80024f8 <homingArm3+0x1b0>)
 80023fa:	f005 fe7b 	bl	80080f4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023fe:	2100      	movs	r1, #0
 8002400:	4837      	ldr	r0, [pc, #220]	; (80024e0 <homingArm3+0x198>)
 8002402:	f008 fbff 	bl	800ac04 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <homingArm3+0x1b4>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800240c:	e049      	b.n	80024a2 <homingArm3+0x15a>
		if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 800240e:	2110      	movs	r1, #16
 8002410:	4838      	ldr	r0, [pc, #224]	; (80024f4 <homingArm3+0x1ac>)
 8002412:	f005 fe57 	bl	80080c4 <HAL_GPIO_ReadPin>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d114      	bne.n	8002446 <homingArm3+0xfe>
			HAL_Delay(30);		//Para filtrar transitorio
 800241c:	201e      	movs	r0, #30
 800241e:	f004 fdcb 	bl	8006fb8 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8002422:	2110      	movs	r1, #16
 8002424:	4833      	ldr	r0, [pc, #204]	; (80024f4 <homingArm3+0x1ac>)
 8002426:	f005 fe4d 	bl	80080c4 <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <homingArm3+0xfe>
				HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002436:	4830      	ldr	r0, [pc, #192]	; (80024f8 <homingArm3+0x1b0>)
 8002438:	f005 fe5c 	bl	80080f4 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <homingArm3+0x1b8>)
 8002442:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 8002446:	ed97 7b00 	vldr	d7, [r7]
 800244a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800244e:	eeb4 7b46 	vcmp.f64	d7, d6
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	d124      	bne.n	80024a2 <homingArm3+0x15a>
 8002458:	2110      	movs	r1, #16
 800245a:	4826      	ldr	r0, [pc, #152]	; (80024f4 <homingArm3+0x1ac>)
 800245c:	f005 fe32 	bl	80080c4 <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <homingArm3+0x15a>
			HAL_Delay(30);		//Para filtrar transitorio
 8002466:	201e      	movs	r0, #30
 8002468:	f004 fda6 	bl	8006fb8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 800246c:	2110      	movs	r1, #16
 800246e:	4821      	ldr	r0, [pc, #132]	; (80024f4 <homingArm3+0x1ac>)
 8002470:	f005 fe28 	bl	80080c4 <HAL_GPIO_ReadPin>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d013      	beq.n	80024a2 <homingArm3+0x15a>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800247a:	2100      	movs	r1, #0
 800247c:	4818      	ldr	r0, [pc, #96]	; (80024e0 <homingArm3+0x198>)
 800247e:	f008 fccf 	bl	800ae20 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm3\n\r", 9, 100);
 8002482:	2364      	movs	r3, #100	; 0x64
 8002484:	2209      	movs	r2, #9
 8002486:	491f      	ldr	r1, [pc, #124]	; (8002504 <homingArm3+0x1bc>)
 8002488:	481f      	ldr	r0, [pc, #124]	; (8002508 <homingArm3+0x1c0>)
 800248a:	f00a fa0f 	bl	800c8ac <HAL_UART_Transmit>
				titha3 = 0;
 800248e:	491f      	ldr	r1, [pc, #124]	; (800250c <homingArm3+0x1c4>)
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <homingArm3+0x1b4>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <homingArm3+0x1b4>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0b1      	beq.n	800240e <homingArm3+0xc6>
			}
		}
	}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 80024aa:	2100      	movs	r1, #0
 80024ac:	4818      	ldr	r0, [pc, #96]	; (8002510 <homingArm3+0x1c8>)
 80024ae:	f008 fdaf 	bl	800b010 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80024b2:	2100      	movs	r1, #0
 80024b4:	4817      	ldr	r0, [pc, #92]	; (8002514 <homingArm3+0x1cc>)
 80024b6:	f008 fdab 	bl	800b010 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80024ba:	2100      	movs	r1, #0
 80024bc:	4816      	ldr	r0, [pc, #88]	; (8002518 <homingArm3+0x1d0>)
 80024be:	f008 fda7 	bl	800b010 <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior*/
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	f3af 8000 	nop.w
 80024d0:	00000000 	.word	0x00000000
 80024d4:	40c2c000 	.word	0x40c2c000
 80024d8:	00000000 	.word	0x00000000
 80024dc:	41ec9c38 	.word	0x41ec9c38
 80024e0:	2400079c 	.word	0x2400079c
 80024e4:	24000388 	.word	0x24000388
 80024e8:	3fe00000 	.word	0x3fe00000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	40002000 	.word	0x40002000
 80024f4:	58021000 	.word	0x58021000
 80024f8:	58020800 	.word	0x58020800
 80024fc:	24000380 	.word	0x24000380
 8002500:	3ff00000 	.word	0x3ff00000
 8002504:	08012504 	.word	0x08012504
 8002508:	24000cf0 	.word	0x24000cf0
 800250c:	240003d0 	.word	0x240003d0
 8002510:	240005d4 	.word	0x240005d4
 8002514:	24000620 	.word	0x24000620
 8002518:	2400066c 	.word	0x2400066c
 800251c:	00000000 	.word	0x00000000

08002520 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8002526:	4bbf      	ldr	r3, [pc, #764]	; (8002824 <interpretaComando+0x304>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3b48      	subs	r3, #72	; 0x48
 800252c:	2b2e      	cmp	r3, #46	; 0x2e
 800252e:	f200 83e3 	bhi.w	8002cf8 <interpretaComando+0x7d8>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <interpretaComando+0x18>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002c89 	.word	0x08002c89
 800253c:	08002cf9 	.word	0x08002cf9
 8002540:	08002cf9 	.word	0x08002cf9
 8002544:	08002cf9 	.word	0x08002cf9
 8002548:	08002cf9 	.word	0x08002cf9
 800254c:	08002925 	.word	0x08002925
 8002550:	08002cf9 	.word	0x08002cf9
 8002554:	08002cf9 	.word	0x08002cf9
 8002558:	08002a41 	.word	0x08002a41
 800255c:	08002cf9 	.word	0x08002cf9
 8002560:	08002cf9 	.word	0x08002cf9
 8002564:	08002cf9 	.word	0x08002cf9
 8002568:	08002cf9 	.word	0x08002cf9
 800256c:	08002cf9 	.word	0x08002cf9
 8002570:	08002cf9 	.word	0x08002cf9
 8002574:	08002cf9 	.word	0x08002cf9
 8002578:	08002cf9 	.word	0x08002cf9
 800257c:	08002cf9 	.word	0x08002cf9
 8002580:	08002cf9 	.word	0x08002cf9
 8002584:	08002cf9 	.word	0x08002cf9
 8002588:	08002cf9 	.word	0x08002cf9
 800258c:	08002cf9 	.word	0x08002cf9
 8002590:	08002cf9 	.word	0x08002cf9
 8002594:	08002cf9 	.word	0x08002cf9
 8002598:	08002cf9 	.word	0x08002cf9
 800259c:	08002cf9 	.word	0x08002cf9
 80025a0:	08002cf9 	.word	0x08002cf9
 80025a4:	08002cf9 	.word	0x08002cf9
 80025a8:	08002cf9 	.word	0x08002cf9
 80025ac:	08002cf9 	.word	0x08002cf9
 80025b0:	08002cf9 	.word	0x08002cf9
 80025b4:	08002cf9 	.word	0x08002cf9
 80025b8:	08002c89 	.word	0x08002c89
 80025bc:	08002cf9 	.word	0x08002cf9
 80025c0:	08002cf9 	.word	0x08002cf9
 80025c4:	08002cf9 	.word	0x08002cf9
 80025c8:	08002cf9 	.word	0x08002cf9
 80025cc:	08002925 	.word	0x08002925
 80025d0:	08002cf9 	.word	0x08002cf9
 80025d4:	08002cf9 	.word	0x08002cf9
 80025d8:	08002a41 	.word	0x08002a41
 80025dc:	08002cf9 	.word	0x08002cf9
 80025e0:	08002cf9 	.word	0x08002cf9
 80025e4:	08002cf9 	.word	0x08002cf9
 80025e8:	08002cf9 	.word	0x08002cf9
 80025ec:	08002cf9 	.word	0x08002cf9
 80025f0:	080025f5 	.word	0x080025f5

	case 'v':
		HAL_UART_Transmit(&huart3, (uint8_t *)"params\n",8, 100);
 80025f4:	2364      	movs	r3, #100	; 0x64
 80025f6:	2208      	movs	r2, #8
 80025f8:	498b      	ldr	r1, [pc, #556]	; (8002828 <interpretaComando+0x308>)
 80025fa:	488c      	ldr	r0, [pc, #560]	; (800282c <interpretaComando+0x30c>)
 80025fc:	f00a f956 	bl	800c8ac <HAL_UART_Transmit>
		uint8_t i = 1;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t j = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(rx_buffer[i] != 0){
 800260c:	e182      	b.n	8002914 <interpretaComando+0x3f4>
			if(rx_buffer[i] == 'm'){
 800260e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002612:	4a84      	ldr	r2, [pc, #528]	; (8002824 <interpretaComando+0x304>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	2b6d      	cmp	r3, #109	; 0x6d
 8002618:	d13b      	bne.n	8002692 <interpretaComando+0x172>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800261a:	e012      	b.n	8002642 <interpretaComando+0x122>
					auxString[j] = rx_buffer[i+1];
 800261c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002626:	497f      	ldr	r1, [pc, #508]	; (8002824 <interpretaComando+0x304>)
 8002628:	5c89      	ldrb	r1, [r1, r2]
 800262a:	4a81      	ldr	r2, [pc, #516]	; (8002830 <interpretaComando+0x310>)
 800262c:	54d1      	strb	r1, [r2, r3]
					j++;
 800262e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002632:	3301      	adds	r3, #1
 8002634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800263c:	3301      	adds	r3, #1
 800263e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002646:	3301      	adds	r3, #1
 8002648:	4a76      	ldr	r2, [pc, #472]	; (8002824 <interpretaComando+0x304>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	2b20      	cmp	r3, #32
 800264e:	d1e5      	bne.n	800261c <interpretaComando+0xfc>
				}
				vmax = strtod(&auxString[0], NULL);
 8002650:	2100      	movs	r1, #0
 8002652:	4877      	ldr	r0, [pc, #476]	; (8002830 <interpretaComando+0x310>)
 8002654:	f00d fa4a 	bl	800faec <strtod>
 8002658:	eeb0 7b40 	vmov.f64	d7, d0
 800265c:	4b75      	ldr	r3, [pc, #468]	; (8002834 <interpretaComando+0x314>)
 800265e:	ed83 7b00 	vstr	d7, [r3]

				for (int k = 0; k <= 10; k++) {
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	e007      	b.n	8002678 <interpretaComando+0x158>
					auxString[k] = 0;
 8002668:	4a71      	ldr	r2, [pc, #452]	; (8002830 <interpretaComando+0x310>)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	4413      	add	r3, r2
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	3301      	adds	r3, #1
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b0a      	cmp	r3, #10
 800267c:	ddf4      	ble.n	8002668 <interpretaComando+0x148>
				}

				j=0;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3, (uint8_t *)"vm\n",4, 100);
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	2204      	movs	r2, #4
 8002688:	496b      	ldr	r1, [pc, #428]	; (8002838 <interpretaComando+0x318>)
 800268a:	4868      	ldr	r0, [pc, #416]	; (800282c <interpretaComando+0x30c>)
 800268c:	f00a f90e 	bl	800c8ac <HAL_UART_Transmit>
 8002690:	e13b      	b.n	800290a <interpretaComando+0x3ea>
			}
			else if(rx_buffer[i] == 'v'){
 8002692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002696:	4a63      	ldr	r2, [pc, #396]	; (8002824 <interpretaComando+0x304>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	2b76      	cmp	r3, #118	; 0x76
 800269c:	d143      	bne.n	8002726 <interpretaComando+0x206>
				 if(rx_buffer[i+1] == 'f'){
 800269e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a2:	3301      	adds	r3, #1
 80026a4:	4a5f      	ldr	r2, [pc, #380]	; (8002824 <interpretaComando+0x304>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	2b66      	cmp	r3, #102	; 0x66
 80026aa:	f040 812e 	bne.w	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80026ae:	e012      	b.n	80026d6 <interpretaComando+0x1b6>
						auxString[j] = rx_buffer[i+2];
 80026b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026ba:	495a      	ldr	r1, [pc, #360]	; (8002824 <interpretaComando+0x304>)
 80026bc:	5c89      	ldrb	r1, [r1, r2]
 80026be:	4a5c      	ldr	r2, [pc, #368]	; (8002830 <interpretaComando+0x310>)
 80026c0:	54d1      	strb	r1, [r2, r3]
						j++;
 80026c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80026cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d0:	3301      	adds	r3, #1
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80026d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026da:	3302      	adds	r3, #2
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <interpretaComando+0x304>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d1e5      	bne.n	80026b0 <interpretaComando+0x190>
					}
					vf = strtod(&auxString[0], NULL);
 80026e4:	2100      	movs	r1, #0
 80026e6:	4852      	ldr	r0, [pc, #328]	; (8002830 <interpretaComando+0x310>)
 80026e8:	f00d fa00 	bl	800faec <strtod>
 80026ec:	eeb0 7b40 	vmov.f64	d7, d0
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <interpretaComando+0x31c>)
 80026f2:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e007      	b.n	800270c <interpretaComando+0x1ec>
						auxString[k] = 0;
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <interpretaComando+0x310>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0a      	cmp	r3, #10
 8002710:	ddf4      	ble.n	80026fc <interpretaComando+0x1dc>
					}

					j=0;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"vf\n", 4, 100);
 8002718:	2364      	movs	r3, #100	; 0x64
 800271a:	2204      	movs	r2, #4
 800271c:	4948      	ldr	r1, [pc, #288]	; (8002840 <interpretaComando+0x320>)
 800271e:	4843      	ldr	r0, [pc, #268]	; (800282c <interpretaComando+0x30c>)
 8002720:	f00a f8c4 	bl	800c8ac <HAL_UART_Transmit>
 8002724:	e0f1      	b.n	800290a <interpretaComando+0x3ea>
				}
			}

			else if(rx_buffer[i] == 'v'){
 8002726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272a:	4a3e      	ldr	r2, [pc, #248]	; (8002824 <interpretaComando+0x304>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
 800272e:	2b76      	cmp	r3, #118	; 0x76
 8002730:	d143      	bne.n	80027ba <interpretaComando+0x29a>
				 if(rx_buffer[i+1] == 'i'){
 8002732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002736:	3301      	adds	r3, #1
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <interpretaComando+0x304>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	2b69      	cmp	r3, #105	; 0x69
 800273e:	f040 80e4 	bne.w	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002742:	e012      	b.n	800276a <interpretaComando+0x24a>
						auxString[j] = rx_buffer[i+2];
 8002744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002748:	1c9a      	adds	r2, r3, #2
 800274a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800274e:	4935      	ldr	r1, [pc, #212]	; (8002824 <interpretaComando+0x304>)
 8002750:	5c89      	ldrb	r1, [r1, r2]
 8002752:	4a37      	ldr	r2, [pc, #220]	; (8002830 <interpretaComando+0x310>)
 8002754:	54d1      	strb	r1, [r2, r3]
						j++;
 8002756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800275a:	3301      	adds	r3, #1
 800275c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 8002760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002764:	3301      	adds	r3, #1
 8002766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800276a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276e:	3302      	adds	r3, #2
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <interpretaComando+0x304>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	2b20      	cmp	r3, #32
 8002776:	d1e5      	bne.n	8002744 <interpretaComando+0x224>
					}
					vi = strtod(&auxString[0], NULL);
 8002778:	2100      	movs	r1, #0
 800277a:	482d      	ldr	r0, [pc, #180]	; (8002830 <interpretaComando+0x310>)
 800277c:	f00d f9b6 	bl	800faec <strtod>
 8002780:	eeb0 7b40 	vmov.f64	d7, d0
 8002784:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <interpretaComando+0x324>)
 8002786:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e007      	b.n	80027a0 <interpretaComando+0x280>
						auxString[k] = 0;
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <interpretaComando+0x310>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3301      	adds	r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b0a      	cmp	r3, #10
 80027a4:	ddf4      	ble.n	8002790 <interpretaComando+0x270>
					}

					j=0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"vi\n", 4, 100);
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	2204      	movs	r2, #4
 80027b0:	4925      	ldr	r1, [pc, #148]	; (8002848 <interpretaComando+0x328>)
 80027b2:	481e      	ldr	r0, [pc, #120]	; (800282c <interpretaComando+0x30c>)
 80027b4:	f00a f87a 	bl	800c8ac <HAL_UART_Transmit>
 80027b8:	e0a7      	b.n	800290a <interpretaComando+0x3ea>
				}
			}


			else if(rx_buffer[i] == 'a'){
 80027ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <interpretaComando+0x304>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	2b61      	cmp	r3, #97	; 0x61
 80027c4:	d159      	bne.n	800287a <interpretaComando+0x35a>
				 if(rx_buffer[i+1] == 'm'){
 80027c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <interpretaComando+0x304>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	2b6d      	cmp	r3, #109	; 0x6d
 80027d2:	f040 809a 	bne.w	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80027d6:	e012      	b.n	80027fe <interpretaComando+0x2de>
						auxString[j] = rx_buffer[i+2];
 80027d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027dc:	1c9a      	adds	r2, r3, #2
 80027de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027e2:	4910      	ldr	r1, [pc, #64]	; (8002824 <interpretaComando+0x304>)
 80027e4:	5c89      	ldrb	r1, [r1, r2]
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <interpretaComando+0x310>)
 80027e8:	54d1      	strb	r1, [r2, r3]
						j++;
 80027ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027ee:	3301      	adds	r3, #1
 80027f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80027f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f8:	3301      	adds	r3, #1
 80027fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80027fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002802:	3302      	adds	r3, #2
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <interpretaComando+0x304>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	2b20      	cmp	r3, #32
 800280a:	d1e5      	bne.n	80027d8 <interpretaComando+0x2b8>
					}
					amax = strtod(&auxString[0], NULL);
 800280c:	2100      	movs	r1, #0
 800280e:	4808      	ldr	r0, [pc, #32]	; (8002830 <interpretaComando+0x310>)
 8002810:	f00d f96c 	bl	800faec <strtod>
 8002814:	eeb0 7b40 	vmov.f64	d7, d0
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <interpretaComando+0x32c>)
 800281a:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e01d      	b.n	8002860 <interpretaComando+0x340>
 8002824:	24000494 	.word	0x24000494
 8002828:	08012510 	.word	0x08012510
 800282c:	24000cf0 	.word	0x24000cf0
 8002830:	24000398 	.word	0x24000398
 8002834:	240003d8 	.word	0x240003d8
 8002838:	08012518 	.word	0x08012518
 800283c:	240003f8 	.word	0x240003f8
 8002840:	0801251c 	.word	0x0801251c
 8002844:	240003f0 	.word	0x240003f0
 8002848:	08012520 	.word	0x08012520
 800284c:	240003e0 	.word	0x240003e0
						auxString[k] = 0;
 8002850:	4aad      	ldr	r2, [pc, #692]	; (8002b08 <interpretaComando+0x5e8>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4413      	add	r3, r2
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b0a      	cmp	r3, #10
 8002864:	ddf4      	ble.n	8002850 <interpretaComando+0x330>
					}

					j=0;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"am\n", 4, 100);
 800286c:	2364      	movs	r3, #100	; 0x64
 800286e:	2204      	movs	r2, #4
 8002870:	49a6      	ldr	r1, [pc, #664]	; (8002b0c <interpretaComando+0x5ec>)
 8002872:	48a7      	ldr	r0, [pc, #668]	; (8002b10 <interpretaComando+0x5f0>)
 8002874:	f00a f81a 	bl	800c8ac <HAL_UART_Transmit>
 8002878:	e047      	b.n	800290a <interpretaComando+0x3ea>
				}
			}
			else if(rx_buffer[i] == 'j'){
 800287a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800287e:	4aa5      	ldr	r2, [pc, #660]	; (8002b14 <interpretaComando+0x5f4>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	2b6a      	cmp	r3, #106	; 0x6a
 8002884:	d141      	bne.n	800290a <interpretaComando+0x3ea>
				 if(rx_buffer[i+1] == 'm'){
 8002886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288a:	3301      	adds	r3, #1
 800288c:	4aa1      	ldr	r2, [pc, #644]	; (8002b14 <interpretaComando+0x5f4>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	2b6d      	cmp	r3, #109	; 0x6d
 8002892:	d13a      	bne.n	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002894:	e012      	b.n	80028bc <interpretaComando+0x39c>
						auxString[j] = rx_buffer[i+2];
 8002896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800289a:	1c9a      	adds	r2, r3, #2
 800289c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028a0:	499c      	ldr	r1, [pc, #624]	; (8002b14 <interpretaComando+0x5f4>)
 80028a2:	5c89      	ldrb	r1, [r1, r2]
 80028a4:	4a98      	ldr	r2, [pc, #608]	; (8002b08 <interpretaComando+0x5e8>)
 80028a6:	54d1      	strb	r1, [r2, r3]
						j++;
 80028a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028ac:	3301      	adds	r3, #1
 80028ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80028b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b6:	3301      	adds	r3, #1
 80028b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80028bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c0:	3302      	adds	r3, #2
 80028c2:	4a94      	ldr	r2, [pc, #592]	; (8002b14 <interpretaComando+0x5f4>)
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d1e5      	bne.n	8002896 <interpretaComando+0x376>
					}
					jmax = strtod(&auxString[0], NULL);
 80028ca:	2100      	movs	r1, #0
 80028cc:	488e      	ldr	r0, [pc, #568]	; (8002b08 <interpretaComando+0x5e8>)
 80028ce:	f00d f90d 	bl	800faec <strtod>
 80028d2:	eeb0 7b40 	vmov.f64	d7, d0
 80028d6:	4b90      	ldr	r3, [pc, #576]	; (8002b18 <interpretaComando+0x5f8>)
 80028d8:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e007      	b.n	80028f2 <interpretaComando+0x3d2>
						auxString[k] = 0;
 80028e2:	4a89      	ldr	r2, [pc, #548]	; (8002b08 <interpretaComando+0x5e8>)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	3301      	adds	r3, #1
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b0a      	cmp	r3, #10
 80028f6:	ddf4      	ble.n	80028e2 <interpretaComando+0x3c2>
					}
					j=0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"jm\n", 4, 100);
 80028fe:	2364      	movs	r3, #100	; 0x64
 8002900:	2204      	movs	r2, #4
 8002902:	4986      	ldr	r1, [pc, #536]	; (8002b1c <interpretaComando+0x5fc>)
 8002904:	4882      	ldr	r0, [pc, #520]	; (8002b10 <interpretaComando+0x5f0>)
 8002906:	f009 ffd1 	bl	800c8ac <HAL_UART_Transmit>
				}
			}
			i++;
 800290a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290e:	3301      	adds	r3, #1
 8002910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rx_buffer[i] != 0){
 8002914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002918:	4a7e      	ldr	r2, [pc, #504]	; (8002b14 <interpretaComando+0x5f4>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f ae76 	bne.w	800260e <interpretaComando+0xee>
		}


		break;
 8002922:	e1e9      	b.n	8002cf8 <interpretaComando+0x7d8>



	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 8002924:	4b7b      	ldr	r3, [pc, #492]	; (8002b14 <interpretaComando+0x5f4>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	2b33      	cmp	r3, #51	; 0x33
 800292a:	d05b      	beq.n	80029e4 <interpretaComando+0x4c4>
 800292c:	2b33      	cmp	r3, #51	; 0x33
 800292e:	dc7f      	bgt.n	8002a30 <interpretaComando+0x510>
 8002930:	2b31      	cmp	r3, #49	; 0x31
 8002932:	d002      	beq.n	800293a <interpretaComando+0x41a>
 8002934:	2b32      	cmp	r3, #50	; 0x32
 8002936:	d02f      	beq.n	8002998 <interpretaComando+0x478>
 8002938:	e07a      	b.n	8002a30 <interpretaComando+0x510>
		case '1':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor1\n\r", 8, 100);
 800293a:	2364      	movs	r3, #100	; 0x64
 800293c:	2208      	movs	r2, #8
 800293e:	4978      	ldr	r1, [pc, #480]	; (8002b20 <interpretaComando+0x600>)
 8002940:	4873      	ldr	r0, [pc, #460]	; (8002b10 <interpretaComando+0x5f0>)
 8002942:	f009 ffb3 	bl	800c8ac <HAL_UART_Transmit>
			aux =  strtod(&rx_buffer[2], NULL);
 8002946:	2100      	movs	r1, #0
 8002948:	4876      	ldr	r0, [pc, #472]	; (8002b24 <interpretaComando+0x604>)
 800294a:	f00d f8cf 	bl	800faec <strtod>
 800294e:	eeb0 7b40 	vmov.f64	d7, d0
 8002952:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <interpretaComando+0x608>)
 8002954:	ed83 7b00 	vstr	d7, [r3]
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <interpretaComando+0x608>)
 800295a:	ed93 7b00 	vldr	d7, [r3]
 800295e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	db10      	blt.n	800298a <interpretaComando+0x46a>
 8002968:	4b6f      	ldr	r3, [pc, #444]	; (8002b28 <interpretaComando+0x608>)
 800296a:	ed93 7b00 	vldr	d7, [r3]
 800296e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8002b00 <interpretaComando+0x5e0>
 8002972:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297a:	d806      	bhi.n	800298a <interpretaComando+0x46a>
				titha1 = aux;
 800297c:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <interpretaComando+0x608>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	496a      	ldr	r1, [pc, #424]	; (8002b2c <interpretaComando+0x60c>)
 8002984:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002988:	e059      	b.n	8002a3e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 800298a:	2364      	movs	r3, #100	; 0x64
 800298c:	220a      	movs	r2, #10
 800298e:	4968      	ldr	r1, [pc, #416]	; (8002b30 <interpretaComando+0x610>)
 8002990:	485f      	ldr	r0, [pc, #380]	; (8002b10 <interpretaComando+0x5f0>)
 8002992:	f009 ff8b 	bl	800c8ac <HAL_UART_Transmit>
			break;
 8002996:	e052      	b.n	8002a3e <interpretaComando+0x51e>
		case '2':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor2\n\r", 8, 100);
 8002998:	2364      	movs	r3, #100	; 0x64
 800299a:	2208      	movs	r2, #8
 800299c:	4965      	ldr	r1, [pc, #404]	; (8002b34 <interpretaComando+0x614>)
 800299e:	485c      	ldr	r0, [pc, #368]	; (8002b10 <interpretaComando+0x5f0>)
 80029a0:	f009 ff84 	bl	800c8ac <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 80029a4:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <interpretaComando+0x608>)
 80029a6:	ed93 7b00 	vldr	d7, [r3]
 80029aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	db10      	blt.n	80029d6 <interpretaComando+0x4b6>
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <interpretaComando+0x608>)
 80029b6:	ed93 7b00 	vldr	d7, [r3]
 80029ba:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002b00 <interpretaComando+0x5e0>
 80029be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d806      	bhi.n	80029d6 <interpretaComando+0x4b6>
				titha2 = aux;
 80029c8:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <interpretaComando+0x608>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	495a      	ldr	r1, [pc, #360]	; (8002b38 <interpretaComando+0x618>)
 80029d0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 80029d4:	e033      	b.n	8002a3e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 80029d6:	2364      	movs	r3, #100	; 0x64
 80029d8:	220a      	movs	r2, #10
 80029da:	4955      	ldr	r1, [pc, #340]	; (8002b30 <interpretaComando+0x610>)
 80029dc:	484c      	ldr	r0, [pc, #304]	; (8002b10 <interpretaComando+0x5f0>)
 80029de:	f009 ff65 	bl	800c8ac <HAL_UART_Transmit>
			break;
 80029e2:	e02c      	b.n	8002a3e <interpretaComando+0x51e>
		case '3':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor3\n\r", 8, 100);
 80029e4:	2364      	movs	r3, #100	; 0x64
 80029e6:	2208      	movs	r2, #8
 80029e8:	4954      	ldr	r1, [pc, #336]	; (8002b3c <interpretaComando+0x61c>)
 80029ea:	4849      	ldr	r0, [pc, #292]	; (8002b10 <interpretaComando+0x5f0>)
 80029ec:	f009 ff5e 	bl	800c8ac <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){   // verificacion de limites articulares
 80029f0:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <interpretaComando+0x608>)
 80029f2:	ed93 7b00 	vldr	d7, [r3]
 80029f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80029fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fe:	db10      	blt.n	8002a22 <interpretaComando+0x502>
 8002a00:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <interpretaComando+0x608>)
 8002a02:	ed93 7b00 	vldr	d7, [r3]
 8002a06:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002b00 <interpretaComando+0x5e0>
 8002a0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d806      	bhi.n	8002a22 <interpretaComando+0x502>
				titha3 = aux;
 8002a14:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <interpretaComando+0x608>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	4949      	ldr	r1, [pc, #292]	; (8002b40 <interpretaComando+0x620>)
 8002a1c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002a20:	e00d      	b.n	8002a3e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 8002a22:	2364      	movs	r3, #100	; 0x64
 8002a24:	220a      	movs	r2, #10
 8002a26:	4942      	ldr	r1, [pc, #264]	; (8002b30 <interpretaComando+0x610>)
 8002a28:	4839      	ldr	r0, [pc, #228]	; (8002b10 <interpretaComando+0x5f0>)
 8002a2a:	f009 ff3f 	bl	800c8ac <HAL_UART_Transmit>
			break;
 8002a2e:	e006      	b.n	8002a3e <interpretaComando+0x51e>

		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorMotor\n\r", 12, 100);
 8002a30:	2364      	movs	r3, #100	; 0x64
 8002a32:	220c      	movs	r2, #12
 8002a34:	4943      	ldr	r1, [pc, #268]	; (8002b44 <interpretaComando+0x624>)
 8002a36:	4836      	ldr	r0, [pc, #216]	; (8002b10 <interpretaComando+0x5f0>)
 8002a38:	f009 ff38 	bl	800c8ac <HAL_UART_Transmit>
			break;
 8002a3c:	bf00      	nop
		}
		break;
 8002a3e:	e15b      	b.n	8002cf8 <interpretaComando+0x7d8>



	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Punto\n\r", 7, 100);
 8002a40:	2364      	movs	r3, #100	; 0x64
 8002a42:	2207      	movs	r2, #7
 8002a44:	4940      	ldr	r1, [pc, #256]	; (8002b48 <interpretaComando+0x628>)
 8002a46:	4832      	ldr	r0, [pc, #200]	; (8002b10 <interpretaComando+0x5f0>)
 8002a48:	f009 ff30 	bl	800c8ac <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 8002a4c:	493f      	ldr	r1, [pc, #252]	; (8002b4c <interpretaComando+0x62c>)
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9c1 2300 	strd	r2, r3, [r1]
		i = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		j = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(rx_buffer[i] != 0){
 8002a66:	e0f8      	b.n	8002c5a <interpretaComando+0x73a>
			if(rx_buffer[i] == 'x'){
 8002a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <interpretaComando+0x5f4>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	2b78      	cmp	r3, #120	; 0x78
 8002a72:	d13b      	bne.n	8002aec <interpretaComando+0x5cc>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002a74:	e012      	b.n	8002a9c <interpretaComando+0x57c>
					auxString[j] = rx_buffer[i+1];
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a80:	4924      	ldr	r1, [pc, #144]	; (8002b14 <interpretaComando+0x5f4>)
 8002a82:	5c89      	ldrb	r1, [r1, r2]
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <interpretaComando+0x5e8>)
 8002a86:	54d1      	strb	r1, [r2, r3]
					j++;
 8002a88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a96:	3301      	adds	r3, #1
 8002a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <interpretaComando+0x5f4>)
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d1e5      	bne.n	8002a76 <interpretaComando+0x556>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4816      	ldr	r0, [pc, #88]	; (8002b08 <interpretaComando+0x5e8>)
 8002aae:	f00d f81d 	bl	800faec <strtod>
 8002ab2:	eeb0 7b40 	vmov.f64	d7, d0
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <interpretaComando+0x630>)
 8002ab8:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e007      	b.n	8002ad2 <interpretaComando+0x5b2>
					auxString[k] = 0;
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <interpretaComando+0x5e8>)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b0a      	cmp	r3, #10
 8002ad6:	ddf4      	ble.n	8002ac2 <interpretaComando+0x5a2>
				}
				j=0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3, (uint8_t *)"PuntoX_ok\n\r", 11, 100);
 8002ade:	2364      	movs	r3, #100	; 0x64
 8002ae0:	220b      	movs	r2, #11
 8002ae2:	491c      	ldr	r1, [pc, #112]	; (8002b54 <interpretaComando+0x634>)
 8002ae4:	480a      	ldr	r0, [pc, #40]	; (8002b10 <interpretaComando+0x5f0>)
 8002ae6:	f009 fee1 	bl	800c8ac <HAL_UART_Transmit>
 8002aea:	e0b1      	b.n	8002c50 <interpretaComando+0x730>
			}
			else if(rx_buffer[i] == 'y'){
 8002aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002af0:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <interpretaComando+0x5f4>)
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	2b79      	cmp	r3, #121	; 0x79
 8002af6:	d16a      	bne.n	8002bce <interpretaComando+0x6ae>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002af8:	e041      	b.n	8002b7e <interpretaComando+0x65e>
 8002afa:	bf00      	nop
 8002afc:	f3af 8000 	nop.w
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40568000 	.word	0x40568000
 8002b08:	24000398 	.word	0x24000398
 8002b0c:	08012524 	.word	0x08012524
 8002b10:	24000cf0 	.word	0x24000cf0
 8002b14:	24000494 	.word	0x24000494
 8002b18:	240003e8 	.word	0x240003e8
 8002b1c:	08012528 	.word	0x08012528
 8002b20:	0801252c 	.word	0x0801252c
 8002b24:	24000496 	.word	0x24000496
 8002b28:	24000390 	.word	0x24000390
 8002b2c:	240003c0 	.word	0x240003c0
 8002b30:	08012538 	.word	0x08012538
 8002b34:	08012544 	.word	0x08012544
 8002b38:	240003c8 	.word	0x240003c8
 8002b3c:	08012550 	.word	0x08012550
 8002b40:	240003d0 	.word	0x240003d0
 8002b44:	0801255c 	.word	0x0801255c
 8002b48:	0801256c 	.word	0x0801256c
 8002b4c:	24000520 	.word	0x24000520
 8002b50:	24000418 	.word	0x24000418
 8002b54:	08012574 	.word	0x08012574
					auxString[j] = rx_buffer[i+1];
 8002b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b62:	4969      	ldr	r1, [pc, #420]	; (8002d08 <interpretaComando+0x7e8>)
 8002b64:	5c89      	ldrb	r1, [r1, r2]
 8002b66:	4a69      	ldr	r2, [pc, #420]	; (8002d0c <interpretaComando+0x7ec>)
 8002b68:	54d1      	strb	r1, [r2, r3]
					j++;
 8002b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a60      	ldr	r2, [pc, #384]	; (8002d08 <interpretaComando+0x7e8>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d1e5      	bne.n	8002b58 <interpretaComando+0x638>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	485f      	ldr	r0, [pc, #380]	; (8002d0c <interpretaComando+0x7ec>)
 8002b90:	f00c ffac 	bl	800faec <strtod>
 8002b94:	eeb0 7b40 	vmov.f64	d7, d0
 8002b98:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <interpretaComando+0x7f0>)
 8002b9a:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	e007      	b.n	8002bb4 <interpretaComando+0x694>
					auxString[k] = 0;
 8002ba4:	4a59      	ldr	r2, [pc, #356]	; (8002d0c <interpretaComando+0x7ec>)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4413      	add	r3, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b0a      	cmp	r3, #10
 8002bb8:	ddf4      	ble.n	8002ba4 <interpretaComando+0x684>
				}
				j=0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoY_ok\n\r", 11, 100);
 8002bc0:	2364      	movs	r3, #100	; 0x64
 8002bc2:	220b      	movs	r2, #11
 8002bc4:	4953      	ldr	r1, [pc, #332]	; (8002d14 <interpretaComando+0x7f4>)
 8002bc6:	4854      	ldr	r0, [pc, #336]	; (8002d18 <interpretaComando+0x7f8>)
 8002bc8:	f009 fe70 	bl	800c8ac <HAL_UART_Transmit>
 8002bcc:	e040      	b.n	8002c50 <interpretaComando+0x730>
			}
			else if(rx_buffer[i] == 'z'){
 8002bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd2:	4a4d      	ldr	r2, [pc, #308]	; (8002d08 <interpretaComando+0x7e8>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
 8002bd6:	2b7a      	cmp	r3, #122	; 0x7a
 8002bd8:	d13a      	bne.n	8002c50 <interpretaComando+0x730>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002bda:	e012      	b.n	8002c02 <interpretaComando+0x6e2>
					auxString[j] = rx_buffer[i+1];
 8002bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002be6:	4948      	ldr	r1, [pc, #288]	; (8002d08 <interpretaComando+0x7e8>)
 8002be8:	5c89      	ldrb	r1, [r1, r2]
 8002bea:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <interpretaComando+0x7ec>)
 8002bec:	54d1      	strb	r1, [r2, r3]
					j++;
 8002bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <interpretaComando+0x7e8>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d1e5      	bne.n	8002bdc <interpretaComando+0x6bc>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 8002c10:	2100      	movs	r1, #0
 8002c12:	483e      	ldr	r0, [pc, #248]	; (8002d0c <interpretaComando+0x7ec>)
 8002c14:	f00c ff6a 	bl	800faec <strtod>
 8002c18:	eeb0 7b40 	vmov.f64	d7, d0
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <interpretaComando+0x7f0>)
 8002c1e:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	e007      	b.n	8002c38 <interpretaComando+0x718>
					auxString[k] = 0;
 8002c28:	4a38      	ldr	r2, [pc, #224]	; (8002d0c <interpretaComando+0x7ec>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3301      	adds	r3, #1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b0a      	cmp	r3, #10
 8002c3c:	ddf4      	ble.n	8002c28 <interpretaComando+0x708>
				}
				j=0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoZ_ok\n\r", 11, 100);
 8002c44:	2364      	movs	r3, #100	; 0x64
 8002c46:	220b      	movs	r2, #11
 8002c48:	4934      	ldr	r1, [pc, #208]	; (8002d1c <interpretaComando+0x7fc>)
 8002c4a:	4833      	ldr	r0, [pc, #204]	; (8002d18 <interpretaComando+0x7f8>)
 8002c4c:	f009 fe2e 	bl	800c8ac <HAL_UART_Transmit>
			}
			i++;
 8002c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c54:	3301      	adds	r3, #1
 8002c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rx_buffer[i] != 0){
 8002c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5e:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <interpretaComando+0x7e8>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f af00 	bne.w	8002a68 <interpretaComando+0x548>
		}
		cinematicaInversa(Pfin);
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <interpretaComando+0x7f0>)
 8002c6a:	ed93 5b00 	vldr	d5, [r3]
 8002c6e:	ed93 6b02 	vldr	d6, [r3, #8]
 8002c72:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c76:	eeb0 0b45 	vmov.f64	d0, d5
 8002c7a:	eeb0 1b46 	vmov.f64	d1, d6
 8002c7e:	eeb0 2b47 	vmov.f64	d2, d7
 8002c82:	f7fd fefd 	bl	8000a80 <cinematicaInversa>
		break;
 8002c86:	e037      	b.n	8002cf8 <interpretaComando+0x7d8>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Homing\n\r", 8, 100);
 8002c88:	2364      	movs	r3, #100	; 0x64
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	4924      	ldr	r1, [pc, #144]	; (8002d20 <interpretaComando+0x800>)
 8002c8e:	4822      	ldr	r0, [pc, #136]	; (8002d18 <interpretaComando+0x7f8>)
 8002c90:	f009 fe0c 	bl	800c8ac <HAL_UART_Transmit>
		//PREGUNTA : se activan los enables en el homming para asegurarse de que el robot empiece a operar en una posicion segura  ?
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);  //activo Enable
 8002c94:	2200      	movs	r2, #0
 8002c96:	2110      	movs	r1, #16
 8002c98:	4822      	ldr	r0, [pc, #136]	; (8002d24 <interpretaComando+0x804>)
 8002c9a:	f005 fa2b 	bl	80080f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	4820      	ldr	r0, [pc, #128]	; (8002d24 <interpretaComando+0x804>)
 8002ca4:	f005 fa26 	bl	80080f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	481d      	ldr	r0, [pc, #116]	; (8002d24 <interpretaComando+0x804>)
 8002cae:	f005 fa21 	bl	80080f4 <HAL_GPIO_WritePin>
		homingAprox();
 8002cb2:	f7fe ff6d 	bl	8001b90 <homingAprox>
		homingArm1();
 8002cb6:	f7ff f95b 	bl	8001f70 <homingArm1>
		homingArm2();
 8002cba:	f7ff fa3d 	bl	8002138 <homingArm2>
		homingArm3();
 8002cbe:	f7ff fb43 	bl	8002348 <homingArm3>
		Pini.x=0;
 8002cc2:	4919      	ldr	r1, [pc, #100]	; (8002d28 <interpretaComando+0x808>)
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y=0;
 8002cd0:	4915      	ldr	r1, [pc, #84]	; (8002d28 <interpretaComando+0x808>)
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = -0.334658034417224;
 8002cde:	4912      	ldr	r1, [pc, #72]	; (8002d28 <interpretaComando+0x808>)
 8002ce0:	a307      	add	r3, pc, #28	; (adr r3, 8002d00 <interpretaComando+0x7e0>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		HAL_UART_Transmit(&huart3,(uint8_t *)"Fin_Homing\n\r", 12, 100);
 8002cea:	2364      	movs	r3, #100	; 0x64
 8002cec:	220c      	movs	r2, #12
 8002cee:	490f      	ldr	r1, [pc, #60]	; (8002d2c <interpretaComando+0x80c>)
 8002cf0:	4809      	ldr	r0, [pc, #36]	; (8002d18 <interpretaComando+0x7f8>)
 8002cf2:	f009 fddb 	bl	800c8ac <HAL_UART_Transmit>

	break;
 8002cf6:	bf00      	nop

	}

}
 8002cf8:	bf00      	nop
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	884a9983 	.word	0x884a9983
 8002d04:	bfd56b09 	.word	0xbfd56b09
 8002d08:	24000494 	.word	0x24000494
 8002d0c:	24000398 	.word	0x24000398
 8002d10:	24000418 	.word	0x24000418
 8002d14:	08012580 	.word	0x08012580
 8002d18:	24000cf0 	.word	0x24000cf0
 8002d1c:	0801258c 	.word	0x0801258c
 8002d20:	08012598 	.word	0x08012598
 8002d24:	58020c00 	.word	0x58020c00
 8002d28:	24000400 	.word	0x24000400
 8002d2c:	080125a4 	.word	0x080125a4

08002d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	ed2d 8b02 	vpush	{d8}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d38:	f004 f8ac 	bl	8006e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d3c:	f000 f96c 	bl	8003018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d40:	f7fe fe28 	bl	8001994 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002d44:	f001 faac 	bl	80042a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d48:	f001 fb1a 	bl	8004380 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d4c:	f001 fb8a 	bl	8004464 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8002d50:	f003 fefe 	bl	8006b50 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002d54:	f001 fc48 	bl	80045e8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002d58:	f001 fcaa 	bl	80046b0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002d5c:	f001 fcf8 	bl	8004750 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002d60:	f001 fbf2 	bl	8004548 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002d64:	f001 fd44 	bl	80047f0 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8002d68:	f003 fe5a 	bl	8006a20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d6c:	f003 fea4 	bl	8006ab8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100); //Enviamos el mensaje: Start
 8002d70:	2364      	movs	r3, #100	; 0x64
 8002d72:	2207      	movs	r2, #7
 8002d74:	498a      	ldr	r1, [pc, #552]	; (8002fa0 <main+0x270>)
 8002d76:	488b      	ldr	r0, [pc, #556]	; (8002fa4 <main+0x274>)
 8002d78:	f009 fd98 	bl	800c8ac <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	498a      	ldr	r1, [pc, #552]	; (8002fa8 <main+0x278>)
 8002d80:	4888      	ldr	r0, [pc, #544]	; (8002fa4 <main+0x274>)
 8002d82:	f009 fe29 	bl	800c9d8 <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 8002d86:	4889      	ldr	r0, [pc, #548]	; (8002fac <main+0x27c>)
 8002d88:	f007 fd9c 	bl	800a8c4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002d8c:	4888      	ldr	r0, [pc, #544]	; (8002fb0 <main+0x280>)
 8002d8e:	f007 fd99 	bl	800a8c4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002d92:	4888      	ldr	r0, [pc, #544]	; (8002fb4 <main+0x284>)
 8002d94:	f007 fd96 	bl	800a8c4 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4887      	ldr	r0, [pc, #540]	; (8002fb8 <main+0x288>)
 8002d9c:	f008 f938 	bl	800b010 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 8002da0:	2100      	movs	r1, #0
 8002da2:	4886      	ldr	r0, [pc, #536]	; (8002fbc <main+0x28c>)
 8002da4:	f008 f934 	bl	800b010 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8002da8:	2100      	movs	r1, #0
 8002daa:	4885      	ldr	r0, [pc, #532]	; (8002fc0 <main+0x290>)
 8002dac:	f008 f930 	bl	800b010 <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 8002db0:	2364      	movs	r3, #100	; 0x64
 8002db2:	2218      	movs	r2, #24
 8002db4:	4983      	ldr	r1, [pc, #524]	; (8002fc4 <main+0x294>)
 8002db6:	487b      	ldr	r0, [pc, #492]	; (8002fa4 <main+0x274>)
 8002db8:	f009 fd78 	bl	800c8ac <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8002dbc:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <main+0x298>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d1fb      	bne.n	8002dbc <main+0x8c>
			FlagButton = 0;
 8002dc4:	4b80      	ldr	r3, [pc, #512]	; (8002fc8 <main+0x298>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
			distancia = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 8002dca:	4b80      	ldr	r3, [pc, #512]	; (8002fcc <main+0x29c>)
 8002dcc:	ed93 6b00 	vldr	d6, [r3]
 8002dd0:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <main+0x2a0>)
 8002dd2:	ed93 7b00 	vldr	d7, [r3]
 8002dd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dda:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002dde:	eeb0 0b47 	vmov.f64	d0, d7
 8002de2:	f00e ff3d 	bl	8011c60 <pow>
 8002de6:	eeb0 8b40 	vmov.f64	d8, d0
 8002dea:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <main+0x29c>)
 8002dec:	ed93 6b02 	vldr	d6, [r3, #8]
 8002df0:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <main+0x2a0>)
 8002df2:	ed93 7b02 	vldr	d7, [r3, #8]
 8002df6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dfa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002dfe:	eeb0 0b47 	vmov.f64	d0, d7
 8002e02:	f00e ff2d 	bl	8011c60 <pow>
 8002e06:	eeb0 7b40 	vmov.f64	d7, d0
 8002e0a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002e0e:	4b6f      	ldr	r3, [pc, #444]	; (8002fcc <main+0x29c>)
 8002e10:	ed93 6b04 	vldr	d6, [r3, #16]
 8002e14:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <main+0x2a0>)
 8002e16:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e22:	eeb0 0b47 	vmov.f64	d0, d7
 8002e26:	f00e ff1b 	bl	8011c60 <pow>
 8002e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e2e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002e32:	eeb0 0b47 	vmov.f64	d0, d7
 8002e36:	f00f f993 	bl	8012160 <sqrt>
 8002e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e42:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <main+0x2a4>)
 8002e44:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pfin.x - Pini.x) / distancia;	//Vector director en X
 8002e48:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <main+0x29c>)
 8002e4a:	ed93 6b00 	vldr	d6, [r3]
 8002e4e:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <main+0x2a0>)
 8002e50:	ed93 7b00 	vldr	d7, [r3]
 8002e54:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002e58:	4b5e      	ldr	r3, [pc, #376]	; (8002fd4 <main+0x2a4>)
 8002e5a:	edd3 7a00 	vldr	s15, [r3]
 8002e5e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e62:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <main+0x2a8>)
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pfin.y - Pini.y) / distancia;	//Vector director en Y
 8002e70:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <main+0x29c>)
 8002e72:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <main+0x2a0>)
 8002e78:	ed93 7b02 	vldr	d7, [r3, #8]
 8002e7c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002e80:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <main+0x2a4>)
 8002e82:	edd3 7a00 	vldr	s15, [r3]
 8002e86:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e92:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <main+0x2a8>)
 8002e94:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pfin.z - Pini.z) / distancia;	//Vector director en Z
 8002e98:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <main+0x29c>)
 8002e9a:	ed93 6b04 	vldr	d6, [r3, #16]
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <main+0x2a0>)
 8002ea0:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ea4:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <main+0x2a4>)
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002eb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002eb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <main+0x2a8>)
 8002ebc:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8002ec0:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <main+0x2ac>)
 8002ec2:	ed93 7b00 	vldr	d7, [r3]
 8002ec6:	eeb0 0b47 	vmov.f64	d0, d7
 8002eca:	f000 fb91 	bl	80035f0 <configStepMotor1>
			configStepMotor2(titha2);
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <main+0x2b0>)
 8002ed0:	ed93 7b00 	vldr	d7, [r3]
 8002ed4:	eeb0 0b47 	vmov.f64	d0, d7
 8002ed8:	f000 fc4a 	bl	8003770 <configStepMotor2>
			configStepMotor3(titha3);
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <main+0x2b4>)
 8002ede:	ed93 7b00 	vldr	d7, [r3]
 8002ee2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ee6:	f000 fd03 	bl	80038f0 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <main+0x2a4>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ef4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002ef8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002efc:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8002f90 <main+0x260>
 8002f00:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8002f98 <main+0x268>
 8002f04:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8002f98 <main+0x268>
 8002f08:	eeb0 1b47 	vmov.f64	d1, d7
 8002f0c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002f98 <main+0x268>
 8002f10:	f001 fe9a 	bl	8004c48 <inicializarTrayectoria>
			FlagTiempo = 0;
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <main+0x2b8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <main+0x2bc>)
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 8002f28:	4931      	ldr	r1, [pc, #196]	; (8002ff0 <main+0x2c0>)
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 8002f36:	492f      	ldr	r1, [pc, #188]	; (8002ff4 <main+0x2c4>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 8002f44:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <main+0x2c8>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8002f4a:	492c      	ldr	r1, [pc, #176]	; (8002ffc <main+0x2cc>)
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8002f58:	4929      	ldr	r1, [pc, #164]	; (8003000 <main+0x2d0>)
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8002f66:	4927      	ldr	r1, [pc, #156]	; (8003004 <main+0x2d4>)
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9c1 2300 	strd	r2, r3, [r1]
			mandalemecha = 1;
 8002f74:	4924      	ldr	r1, [pc, #144]	; (8003008 <main+0x2d8>)
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <main+0x2dc>)
 8002f7c:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_TIM_Base_Start(&htim5);
 8002f80:	4823      	ldr	r0, [pc, #140]	; (8003010 <main+0x2e0>)
 8002f82:	f007 fc9f 	bl	800a8c4 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8002f86:	4823      	ldr	r0, [pc, #140]	; (8003014 <main+0x2e4>)
 8002f88:	f007 fd34 	bl	800a9f4 <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 8002f8c:	e716      	b.n	8002dbc <main+0x8c>
 8002f8e:	bf00      	nop
 8002f90:	9999999a 	.word	0x9999999a
 8002f94:	3fd99999 	.word	0x3fd99999
	...
 8002fa0:	24000000 	.word	0x24000000
 8002fa4:	24000cf0 	.word	0x24000cf0
 8002fa8:	240004b2 	.word	0x240004b2
 8002fac:	24000704 	.word	0x24000704
 8002fb0:	24000750 	.word	0x24000750
 8002fb4:	2400079c 	.word	0x2400079c
 8002fb8:	240005d4 	.word	0x240005d4
 8002fbc:	24000620 	.word	0x24000620
 8002fc0:	2400066c 	.word	0x2400066c
 8002fc4:	080125b4 	.word	0x080125b4
 8002fc8:	24000518 	.word	0x24000518
 8002fcc:	24000418 	.word	0x24000418
 8002fd0:	24000400 	.word	0x24000400
 8002fd4:	24000430 	.word	0x24000430
 8002fd8:	24000434 	.word	0x24000434
 8002fdc:	240003c0 	.word	0x240003c0
 8002fe0:	240003c8 	.word	0x240003c8
 8002fe4:	240003d0 	.word	0x240003d0
 8002fe8:	240004b4 	.word	0x240004b4
 8002fec:	240004d8 	.word	0x240004d8
 8002ff0:	240004e0 	.word	0x240004e0
 8002ff4:	24000008 	.word	0x24000008
 8002ff8:	24000570 	.word	0x24000570
 8002ffc:	24000528 	.word	0x24000528
 8003000:	24000530 	.word	0x24000530
 8003004:	24000538 	.word	0x24000538
 8003008:	24000578 	.word	0x24000578
 800300c:	3ff00000 	.word	0x3ff00000
 8003010:	240006b8 	.word	0x240006b8
 8003014:	240007e8 	.word	0x240007e8

08003018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b09c      	sub	sp, #112	; 0x70
 800301c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800301e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003022:	224c      	movs	r2, #76	; 0x4c
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f00b ff86 	bl	800ef38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2220      	movs	r2, #32
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f00b ff80 	bl	800ef38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003038:	2002      	movs	r0, #2
 800303a:	f005 f88f 	bl	800815c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4b32      	ldr	r3, [pc, #200]	; (800310c <SystemClock_Config+0xf4>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4a31      	ldr	r2, [pc, #196]	; (800310c <SystemClock_Config+0xf4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <SystemClock_Config+0xf4>)
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <SystemClock_Config+0xf8>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <SystemClock_Config+0xf8>)
 8003062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <SystemClock_Config+0xf8>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003074:	bf00      	nop
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <SystemClock_Config+0xf8>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	d1f8      	bne.n	8003076 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003084:	2302      	movs	r3, #2
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003088:	2301      	movs	r3, #1
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800308c:	2340      	movs	r3, #64	; 0x40
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003090:	2302      	movs	r3, #2
 8003092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003094:	2300      	movs	r3, #0
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003098:	2304      	movs	r3, #4
 800309a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800309c:	2310      	movs	r3, #16
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80030a0:	2302      	movs	r3, #2
 80030a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030a4:	2302      	movs	r3, #2
 80030a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030a8:	2302      	movs	r3, #2
 80030aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80030ac:	230c      	movs	r3, #12
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 f887 	bl	80081d0 <HAL_RCC_OscConfig>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80030c8:	f000 fa8a 	bl	80035e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030cc:	233f      	movs	r3, #63	; 0x3f
 80030ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030d0:	2303      	movs	r3, #3
 80030d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80030d8:	2308      	movs	r3, #8
 80030da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80030e0:	2340      	movs	r3, #64	; 0x40
 80030e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80030e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 fc9a 	bl	8008a2c <HAL_RCC_ClockConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80030fe:	f000 fa6f 	bl	80035e0 <Error_Handler>
  }
}
 8003102:	bf00      	nop
 8003104:	3770      	adds	r7, #112	; 0x70
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	58000400 	.word	0x58000400
 8003110:	58024800 	.word	0x58024800

08003114 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003124:	d103      	bne.n	800312e <HAL_GPIO_EXTI_Callback+0x1a>
	case BUTTON_Pin:
		FlagButton = 1;
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_GPIO_EXTI_Callback+0x28>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]
		break;
 800312c:	e000      	b.n	8003130 <HAL_GPIO_EXTI_Callback+0x1c>
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/
	default:

		break;
 800312e:	bf00      	nop
	}

}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	24000518 	.word	0x24000518

08003140 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_UART_RxCpltCallback+0xd0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d14d      	bne.n	80031ee <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <HAL_UART_RxCpltCallback+0xd4>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b3a      	cmp	r3, #58	; 0x3a
 800315c:	d006      	beq.n	800316c <HAL_UART_RxCpltCallback+0x2c>
 800315e:	2b3a      	cmp	r3, #58	; 0x3a
 8003160:	dc36      	bgt.n	80031d0 <HAL_UART_RxCpltCallback+0x90>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d009      	beq.n	800317a <HAL_UART_RxCpltCallback+0x3a>
 8003166:	2b0d      	cmp	r3, #13
 8003168:	d01e      	beq.n	80031a8 <HAL_UART_RxCpltCallback+0x68>
 800316a:	e031      	b.n	80031d0 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_UART_RxCpltCallback+0xdc>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
			break;
 8003178:	e040      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d037      	beq.n	80031f2 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	3b01      	subs	r3, #1
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800318c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800318e:	e030      	b.n	80031f2 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_UART_RxCpltCallback+0xe0>)
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]
				rx_index++;
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031a6:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b1e      	cmp	r3, #30
 80031ae:	d1ef      	bne.n	8003190 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_UART_RxCpltCallback+0xdc>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d11e      	bne.n	80031f6 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 80031b8:	4b17      	ldr	r3, [pc, #92]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_UART_RxCpltCallback+0xe0>)
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 80031c4:	f7ff f9ac 	bl	8002520 <interpretaComando>
				cm0 = 0;
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_UART_RxCpltCallback+0xdc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031ce:	e012      	b.n	80031f6 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b1d      	cmp	r3, #29
 80031d6:	d810      	bhi.n	80031fa <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	b2d1      	uxtb	r1, r2
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031e2:	7011      	strb	r1, [r2, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <HAL_UART_RxCpltCallback+0xe0>)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	5453      	strb	r3, [r2, r1]
			}
			break;
 80031ec:	e005      	b.n	80031fa <HAL_UART_RxCpltCallback+0xba>
		}
	}
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
			break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
			break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
			break;
 80031fa:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 80031fc:	2201      	movs	r2, #1
 80031fe:	4905      	ldr	r1, [pc, #20]	; (8003214 <HAL_UART_RxCpltCallback+0xd4>)
 8003200:	4808      	ldr	r0, [pc, #32]	; (8003224 <HAL_UART_RxCpltCallback+0xe4>)
 8003202:	f009 fbe9 	bl	800c9d8 <HAL_UART_Receive_IT>
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40004800 	.word	0x40004800
 8003214:	240004b2 	.word	0x240004b2
 8003218:	24000490 	.word	0x24000490
 800321c:	240004b3 	.word	0x240004b3
 8003220:	24000494 	.word	0x24000494
 8003224:	24000cf0 	.word	0x24000cf0

08003228 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	__NOP();
 8003230:	bf00      	nop
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d116      	bne.n	8003280 <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d10a      	bne.n	8003274 <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 800325e:	2100      	movs	r1, #0
 8003260:	4827      	ldr	r0, [pc, #156]	; (8003300 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003262:	f007 fddd 	bl	800ae20 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 8003266:	4927      	ldr	r1, [pc, #156]	; (8003304 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800326e:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 8003272:	e03c      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800327c:	6013      	str	r3, [r2, #0]
}
 800327e:	e036      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d116      	bne.n	80032b8 <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d10a      	bne.n	80032ac <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 8003296:	2100      	movs	r1, #0
 8003298:	481f      	ldr	r0, [pc, #124]	; (8003318 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800329a:	f007 fdc1 	bl	800ae20 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 800329e:	491f      	ldr	r1, [pc, #124]	; (800331c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80032a6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032aa:	e020      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80032b4:	6013      	str	r3, [r2, #0]
}
 80032b6:	e01a      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d115      	bne.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10a      	bne.n	80032e4 <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 80032ce:	2100      	movs	r1, #0
 80032d0:	4816      	ldr	r0, [pc, #88]	; (800332c <HAL_TIM_IC_CaptureCallback+0xec>)
 80032d2:	f007 fda5 	bl	800ae20 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 80032d6:	4916      	ldr	r1, [pc, #88]	; (8003330 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80032de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032e2:	e004      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80032ec:	6013      	str	r3, [r2, #0]
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	240003a4 	.word	0x240003a4
 80032fc:	240003b0 	.word	0x240003b0
 8003300:	24000704 	.word	0x24000704
 8003304:	240004d8 	.word	0x240004d8
 8003308:	3ff00000 	.word	0x3ff00000
 800330c:	40000400 	.word	0x40000400
 8003310:	240003a8 	.word	0x240003a8
 8003314:	240003b4 	.word	0x240003b4
 8003318:	24000750 	.word	0x24000750
 800331c:	240004e0 	.word	0x240004e0
 8003320:	40000800 	.word	0x40000800
 8003324:	240003ac 	.word	0x240003ac
 8003328:	240003b8 	.word	0x240003b8
 800332c:	2400079c 	.word	0x2400079c
 8003330:	24000008 	.word	0x24000008
 8003334:	00000000 	.word	0x00000000

08003338 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a91      	ldr	r2, [pc, #580]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003344:	4293      	cmp	r3, r2
 8003346:	f040 8110 	bne.w	800356a <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 800334a:	4b90      	ldr	r3, [pc, #576]	; (800358c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800334c:	ed93 7b00 	vldr	d7, [r3]
 8003350:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003354:	eeb4 7b46 	vcmp.f64	d7, d6
 8003358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335c:	d133      	bne.n	80033c6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 800335e:	4b8c      	ldr	r3, [pc, #560]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003360:	ed93 7b00 	vldr	d7, [r3]
 8003364:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003368:	eeb4 7b46 	vcmp.f64	d7, d6
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	d129      	bne.n	80033c6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003374:	ed93 7b00 	vldr	d7, [r3]
 8003378:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800337c:	eeb4 7b46 	vcmp.f64	d7, d6
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d11f      	bne.n	80033c6 <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_TIM_Base_Stop_IT(&htim15);
 8003386:	4880      	ldr	r0, [pc, #512]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003388:	f007 fbac 	bl	800aae4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 800338c:	4882      	ldr	r0, [pc, #520]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800338e:	f007 fb09 	bl	800a9a4 <HAL_TIM_Base_Stop>
			Pini.x = Pfin.x;
 8003392:	4b82      	ldr	r3, [pc, #520]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	4981      	ldr	r1, [pc, #516]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800339a:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 800339e:	4b7f      	ldr	r3, [pc, #508]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80033a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033a4:	497e      	ldr	r1, [pc, #504]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80033a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 80033aa:	4b7c      	ldr	r3, [pc, #496]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80033ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033b0:	497b      	ldr	r1, [pc, #492]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80033b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
			mandalemecha = 0;
 80033b6:	497b      	ldr	r1, [pc, #492]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 80033c4:	e0d1      	b.n	800356a <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 80033c6:	4b78      	ldr	r3, [pc, #480]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_TIM_PeriodElapsedCallback+0xa2>
				FlagTiempo = 1;
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 80033d4:	4b75      	ldr	r3, [pc, #468]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x274>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 80033da:	4b74      	ldr	r3, [pc, #464]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x274>)
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80033e6:	4b71      	ldr	r3, [pc, #452]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x274>)
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	3301      	adds	r3, #1
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80033f4:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x240>
 80033f8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80033fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003400:	4b6b      	ldr	r3, [pc, #428]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003402:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 8003406:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003408:	ed93 7b00 	vldr	d7, [r3]
 800340c:	eeb0 0b47 	vmov.f64	d0, d7
 8003410:	f002 f9c0 	bl	8005794 <obtenerVelCurva>
			Recta3D[0] = Pini.x + X * vDirector[0];
 8003414:	4b62      	ldr	r3, [pc, #392]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003416:	ed93 6b00 	vldr	d6, [r3]
 800341a:	4b66      	ldr	r3, [pc, #408]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003426:	ed93 7b00 	vldr	d7, [r3]
 800342a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800342e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003434:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pini.y + X * vDirector[1];
 8003438:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800343a:	ed93 6b02 	vldr	d6, [r3, #8]
 800343e:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003440:	edd3 7a01 	vldr	s15, [r3, #4]
 8003444:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003448:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800344a:	ed93 7b00 	vldr	d7, [r3]
 800344e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003452:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003458:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pini.z + X * vDirector[2];
 800345c:	4b50      	ldr	r3, [pc, #320]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800345e:	ed93 6b04 	vldr	d6, [r3, #16]
 8003462:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003464:	edd3 7a02 	vldr	s15, [r3, #8]
 8003468:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800346c:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800346e:	ed93 7b00 	vldr	d7, [r3]
 8003472:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003476:	ee36 7b07 	vadd.f64	d7, d6, d7
 800347a:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800347c:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800348a:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800348c:	ed93 7b00 	vldr	d7, [r3]
 8003490:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003494:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x248>
 8003498:	ee37 7b06 	vadd.f64	d7, d7, d6
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800349e:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 80034a2:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80034a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80034ae:	ed93 7b00 	vldr	d7, [r3]
 80034b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034b6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x248>
 80034ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034c0:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 80034c4:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80034c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80034d0:	ed93 7b00 	vldr	d7, [r3]
 80034d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034d8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x248>
 80034dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034e0:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034e2:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2];
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034ec:	4936      	ldr	r1, [pc, #216]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80034ee:	e9c1 2300 	strd	r2, r3, [r1]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034f4:	ed93 7b00 	vldr	d7, [r3]
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80034fe:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003500:	ed93 2b04 	vldr	d2, [r3, #16]
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003506:	ed93 3b00 	vldr	d3, [r3]
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800350c:	ed93 4b02 	vldr	d4, [r3, #8]
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003512:	ed93 5b04 	vldr	d5, [r3, #16]
 8003516:	eeb0 1b46 	vmov.f64	d1, d6
 800351a:	eeb0 0b47 	vmov.f64	d0, d7
 800351e:	f002 fccf 	bl	8005ec0 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003524:	ed93 7b00 	vldr	d7, [r3]
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800352a:	ed93 6b02 	vldr	d6, [r3, #8]
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003530:	ed93 5b04 	vldr	d5, [r3, #16]
 8003534:	eeb0 2b45 	vmov.f64	d2, d5
 8003538:	eeb0 1b46 	vmov.f64	d1, d6
 800353c:	eeb0 0b47 	vmov.f64	d0, d7
 8003540:	f002 ffe6 	bl	8006510 <SetPerfilTimers>
			if(Start==1){
 8003544:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d10e      	bne.n	800356a <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003552:	2100      	movs	r1, #0
 8003554:	481f      	ldr	r0, [pc, #124]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003556:	f007 fb55 	bl	800ac04 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 800355a:	2100      	movs	r1, #0
 800355c:	481e      	ldr	r0, [pc, #120]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800355e:	f007 fb51 	bl	800ac04 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003562:	2100      	movs	r1, #0
 8003564:	481d      	ldr	r0, [pc, #116]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003566:	f007 fb4d 	bl	800ac04 <HAL_TIM_PWM_Start>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	f3af 8000 	nop.w
 8003578:	00000000 	.word	0x00000000
 800357c:	418e8480 	.word	0x418e8480
	...
 8003588:	240007e8 	.word	0x240007e8
 800358c:	240004d8 	.word	0x240004d8
 8003590:	240004e0 	.word	0x240004e0
 8003594:	24000008 	.word	0x24000008
 8003598:	240006b8 	.word	0x240006b8
 800359c:	24000418 	.word	0x24000418
 80035a0:	24000400 	.word	0x24000400
 80035a4:	24000578 	.word	0x24000578
 80035a8:	240004b4 	.word	0x240004b4
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	240004b8 	.word	0x240004b8
 80035b4:	24000434 	.word	0x24000434
 80035b8:	240004c0 	.word	0x240004c0
 80035bc:	24000440 	.word	0x24000440
 80035c0:	240004c8 	.word	0x240004c8
 80035c4:	24000458 	.word	0x24000458
 80035c8:	24000580 	.word	0x24000580
 80035cc:	24000470 	.word	0x24000470
 80035d0:	24000570 	.word	0x24000570
 80035d4:	24000704 	.word	0x24000704
 80035d8:	24000750 	.word	0x24000750
 80035dc:	2400079c 	.word	0x2400079c

080035e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 80035fa:	4b53      	ldr	r3, [pc, #332]	; (8003748 <configStepMotor1+0x158>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8003600:	4b52      	ldr	r3, [pc, #328]	; (800374c <configStepMotor1+0x15c>)
 8003602:	ed93 7b00 	vldr	d7, [r3]
 8003606:	ed97 6b00 	vldr	d6, [r7]
 800360a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	db22      	blt.n	800365a <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 8003614:	2102      	movs	r1, #2
 8003616:	484e      	ldr	r0, [pc, #312]	; (8003750 <configStepMotor1+0x160>)
 8003618:	f004 fd54 	bl	80080c4 <HAL_GPIO_ReadPin>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 8003622:	494c      	ldr	r1, [pc, #304]	; (8003754 <configStepMotor1+0x164>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <configStepMotor1+0x168>)
 800362a:	e9c1 2300 	strd	r2, r3, [r1]
 800362e:	e036      	b.n	800369e <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 8003630:	4b46      	ldr	r3, [pc, #280]	; (800374c <configStepMotor1+0x15c>)
 8003632:	ed93 7b00 	vldr	d7, [r3]
 8003636:	ed97 6b00 	vldr	d6, [r7]
 800363a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800363e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003642:	4942      	ldr	r1, [pc, #264]	; (800374c <configStepMotor1+0x15c>)
 8003644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003648:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 800364c:	2201      	movs	r2, #1
 800364e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003652:	4842      	ldr	r0, [pc, #264]	; (800375c <configStepMotor1+0x16c>)
 8003654:	f004 fd4e 	bl	80080f4 <HAL_GPIO_WritePin>
 8003658:	e021      	b.n	800369e <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800365a:	2101      	movs	r1, #1
 800365c:	483c      	ldr	r0, [pc, #240]	; (8003750 <configStepMotor1+0x160>)
 800365e:	f004 fd31 	bl	80080c4 <HAL_GPIO_ReadPin>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 8003668:	493a      	ldr	r1, [pc, #232]	; (8003754 <configStepMotor1+0x164>)
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <configStepMotor1+0x168>)
 8003670:	e9c1 2300 	strd	r2, r3, [r1]
 8003674:	e013      	b.n	800369e <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003676:	4b35      	ldr	r3, [pc, #212]	; (800374c <configStepMotor1+0x15c>)
 8003678:	ed93 6b00 	vldr	d6, [r3]
 800367c:	ed97 7b00 	vldr	d7, [r7]
 8003680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003684:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003688:	4930      	ldr	r1, [pc, #192]	; (800374c <configStepMotor1+0x15c>)
 800368a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800368e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003698:	4830      	ldr	r0, [pc, #192]	; (800375c <configStepMotor1+0x16c>)
 800369a:	f004 fd2b 	bl	80080f4 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800369e:	ed97 7b02 	vldr	d7, [r7, #8]
 80036a2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003738 <configStepMotor1+0x148>
 80036a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036aa:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80036ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80036b2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003740 <configStepMotor1+0x150>
 80036b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <configStepMotor1+0x170>)
 80036bc:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <configStepMotor1+0x170>)
 80036c2:	ed93 7b00 	vldr	d7, [r3]
 80036c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036ca:	ee17 2a90 	vmov	r2, s15
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <configStepMotor1+0x174>)
 80036d0:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <configStepMotor1+0x170>)
 80036d4:	ed93 6b00 	vldr	d6, [r3]
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <configStepMotor1+0x174>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80036e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80036e8:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <configStepMotor1+0x178>)
 80036ea:	ed93 7b00 	vldr	d7, [r3]
 80036ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036f2:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <configStepMotor1+0x178>)
 80036f4:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <configStepMotor1+0x178>)
 80036fa:	ed93 7b00 	vldr	d7, [r3]
 80036fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003702:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	da00      	bge.n	800370e <configStepMotor1+0x11e>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 800370c:	e00e      	b.n	800372c <configStepMotor1+0x13c>
		remanente1 = remanente1 - 1;
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <configStepMotor1+0x178>)
 8003710:	ed93 7b00 	vldr	d7, [r3]
 8003714:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003718:	ee37 7b46 	vsub.f64	d7, d7, d6
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <configStepMotor1+0x178>)
 800371e:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <configStepMotor1+0x174>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <configStepMotor1+0x174>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	f3af 8000 	nop.w
 8003738:	00000000 	.word	0x00000000
 800373c:	40990000 	.word	0x40990000
 8003740:	00000000 	.word	0x00000000
 8003744:	40768000 	.word	0x40768000
 8003748:	240003a4 	.word	0x240003a4
 800374c:	24000588 	.word	0x24000588
 8003750:	58021000 	.word	0x58021000
 8003754:	24000520 	.word	0x24000520
 8003758:	3ff00000 	.word	0x3ff00000
 800375c:	58020800 	.word	0x58020800
 8003760:	240005a0 	.word	0x240005a0
 8003764:	240003b0 	.word	0x240003b0
 8003768:	240005b8 	.word	0x240005b8
 800376c:	00000000 	.word	0x00000000

08003770 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 800377a:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <configStepMotor2+0x158>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 8003780:	4b52      	ldr	r3, [pc, #328]	; (80038cc <configStepMotor2+0x15c>)
 8003782:	ed93 7b00 	vldr	d7, [r3]
 8003786:	ed97 6b00 	vldr	d6, [r7]
 800378a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	db22      	blt.n	80037da <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 8003794:	2108      	movs	r1, #8
 8003796:	484e      	ldr	r0, [pc, #312]	; (80038d0 <configStepMotor2+0x160>)
 8003798:	f004 fc94 	bl	80080c4 <HAL_GPIO_ReadPin>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 80037a2:	494c      	ldr	r1, [pc, #304]	; (80038d4 <configStepMotor2+0x164>)
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <configStepMotor2+0x168>)
 80037aa:	e9c1 2300 	strd	r2, r3, [r1]
 80037ae:	e036      	b.n	800381e <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 80037b0:	4b46      	ldr	r3, [pc, #280]	; (80038cc <configStepMotor2+0x15c>)
 80037b2:	ed93 7b00 	vldr	d7, [r3]
 80037b6:	ed97 6b00 	vldr	d6, [r7]
 80037ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037be:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 80037c2:	4942      	ldr	r1, [pc, #264]	; (80038cc <configStepMotor2+0x15c>)
 80037c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037c8:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 80037cc:	2201      	movs	r2, #1
 80037ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037d2:	4842      	ldr	r0, [pc, #264]	; (80038dc <configStepMotor2+0x16c>)
 80037d4:	f004 fc8e 	bl	80080f4 <HAL_GPIO_WritePin>
 80037d8:	e021      	b.n	800381e <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80037da:	2104      	movs	r1, #4
 80037dc:	483c      	ldr	r0, [pc, #240]	; (80038d0 <configStepMotor2+0x160>)
 80037de:	f004 fc71 	bl	80080c4 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 80037e8:	493a      	ldr	r1, [pc, #232]	; (80038d4 <configStepMotor2+0x164>)
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <configStepMotor2+0x168>)
 80037f0:	e9c1 2300 	strd	r2, r3, [r1]
 80037f4:	e013      	b.n	800381e <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 80037f6:	4b35      	ldr	r3, [pc, #212]	; (80038cc <configStepMotor2+0x15c>)
 80037f8:	ed93 6b00 	vldr	d6, [r3]
 80037fc:	ed97 7b00 	vldr	d7, [r7]
 8003800:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003804:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8003808:	4930      	ldr	r1, [pc, #192]	; (80038cc <configStepMotor2+0x15c>)
 800380a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003818:	4830      	ldr	r0, [pc, #192]	; (80038dc <configStepMotor2+0x16c>)
 800381a:	f004 fc6b 	bl	80080f4 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800381e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003822:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80038b8 <configStepMotor2+0x148>
 8003826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800382a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800382e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003832:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80038c0 <configStepMotor2+0x150>
 8003836:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <configStepMotor2+0x170>)
 800383c:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003840:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <configStepMotor2+0x170>)
 8003842:	ed93 7b00 	vldr	d7, [r3]
 8003846:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800384a:	ee17 2a90 	vmov	r2, s15
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <configStepMotor2+0x174>)
 8003850:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <configStepMotor2+0x170>)
 8003854:	ed93 6b00 	vldr	d6, [r3]
 8003858:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <configStepMotor2+0x174>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003864:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003868:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <configStepMotor2+0x178>)
 800386a:	ed93 7b00 	vldr	d7, [r3]
 800386e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <configStepMotor2+0x178>)
 8003874:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <configStepMotor2+0x178>)
 800387a:	ed93 7b00 	vldr	d7, [r3]
 800387e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003882:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388a:	da00      	bge.n	800388e <configStepMotor2+0x11e>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 800388c:	e00e      	b.n	80038ac <configStepMotor2+0x13c>
		remanente2 = remanente2 - 1;
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <configStepMotor2+0x178>)
 8003890:	ed93 7b00 	vldr	d7, [r3]
 8003894:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003898:	ee37 7b46 	vsub.f64	d7, d7, d6
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <configStepMotor2+0x178>)
 800389e:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <configStepMotor2+0x174>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <configStepMotor2+0x174>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	f3af 8000 	nop.w
 80038b8:	00000000 	.word	0x00000000
 80038bc:	40990000 	.word	0x40990000
 80038c0:	00000000 	.word	0x00000000
 80038c4:	40768000 	.word	0x40768000
 80038c8:	240003a8 	.word	0x240003a8
 80038cc:	24000590 	.word	0x24000590
 80038d0:	58021000 	.word	0x58021000
 80038d4:	24000520 	.word	0x24000520
 80038d8:	3ff00000 	.word	0x3ff00000
 80038dc:	58020800 	.word	0x58020800
 80038e0:	240005a8 	.word	0x240005a8
 80038e4:	240003b4 	.word	0x240003b4
 80038e8:	240005c0 	.word	0x240005c0
 80038ec:	00000000 	.word	0x00000000

080038f0 <configStepMotor3>:

void configStepMotor3(double angulo) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 80038fa:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <configStepMotor3+0x158>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 8003900:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <configStepMotor3+0x15c>)
 8003902:	ed93 7b00 	vldr	d7, [r3]
 8003906:	ed97 6b00 	vldr	d6, [r7]
 800390a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003912:	db22      	blt.n	800395a <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 8003914:	2120      	movs	r1, #32
 8003916:	484e      	ldr	r0, [pc, #312]	; (8003a50 <configStepMotor3+0x160>)
 8003918:	f004 fbd4 	bl	80080c4 <HAL_GPIO_ReadPin>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 8003922:	494c      	ldr	r1, [pc, #304]	; (8003a54 <configStepMotor3+0x164>)
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <configStepMotor3+0x168>)
 800392a:	e9c1 2300 	strd	r2, r3, [r1]
 800392e:	e036      	b.n	800399e <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 8003930:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <configStepMotor3+0x15c>)
 8003932:	ed93 7b00 	vldr	d7, [r3]
 8003936:	ed97 6b00 	vldr	d6, [r7]
 800393a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800393e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003942:	4942      	ldr	r1, [pc, #264]	; (8003a4c <configStepMotor3+0x15c>)
 8003944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003948:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 800394c:	2201      	movs	r2, #1
 800394e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003952:	4842      	ldr	r0, [pc, #264]	; (8003a5c <configStepMotor3+0x16c>)
 8003954:	f004 fbce 	bl	80080f4 <HAL_GPIO_WritePin>
 8003958:	e021      	b.n	800399e <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 800395a:	2120      	movs	r1, #32
 800395c:	483c      	ldr	r0, [pc, #240]	; (8003a50 <configStepMotor3+0x160>)
 800395e:	f004 fbb1 	bl	80080c4 <HAL_GPIO_ReadPin>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 8003968:	493a      	ldr	r1, [pc, #232]	; (8003a54 <configStepMotor3+0x164>)
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	4b3a      	ldr	r3, [pc, #232]	; (8003a58 <configStepMotor3+0x168>)
 8003970:	e9c1 2300 	strd	r2, r3, [r1]
 8003974:	e013      	b.n	800399e <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003976:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <configStepMotor3+0x15c>)
 8003978:	ed93 6b00 	vldr	d6, [r3]
 800397c:	ed97 7b00 	vldr	d7, [r7]
 8003980:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003984:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003988:	4930      	ldr	r1, [pc, #192]	; (8003a4c <configStepMotor3+0x15c>)
 800398a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800398e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 8003992:	2200      	movs	r2, #0
 8003994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003998:	4830      	ldr	r0, [pc, #192]	; (8003a5c <configStepMotor3+0x16c>)
 800399a:	f004 fbab 	bl	80080f4 <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800399e:	ed97 7b02 	vldr	d7, [r7, #8]
 80039a2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003a38 <configStepMotor3+0x148>
 80039a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80039aa:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80039ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80039b2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003a40 <configStepMotor3+0x150>
 80039b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80039ba:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <configStepMotor3+0x170>)
 80039bc:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <configStepMotor3+0x170>)
 80039c2:	ed93 7b00 	vldr	d7, [r3]
 80039c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039ca:	ee17 2a90 	vmov	r2, s15
 80039ce:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <configStepMotor3+0x174>)
 80039d0:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <configStepMotor3+0x170>)
 80039d4:	ed93 6b00 	vldr	d6, [r3]
 80039d8:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <configStepMotor3+0x174>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80039e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <configStepMotor3+0x178>)
 80039ea:	ed93 7b00 	vldr	d7, [r3]
 80039ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <configStepMotor3+0x178>)
 80039f4:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <configStepMotor3+0x178>)
 80039fa:	ed93 7b00 	vldr	d7, [r3]
 80039fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	da00      	bge.n	8003a0e <configStepMotor3+0x11e>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 8003a0c:	e00e      	b.n	8003a2c <configStepMotor3+0x13c>
		remanente3 = remanente3 - 1;
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <configStepMotor3+0x178>)
 8003a10:	ed93 7b00 	vldr	d7, [r3]
 8003a14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <configStepMotor3+0x178>)
 8003a1e:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <configStepMotor3+0x174>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <configStepMotor3+0x174>)
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	f3af 8000 	nop.w
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	40990000 	.word	0x40990000
 8003a40:	00000000 	.word	0x00000000
 8003a44:	40768000 	.word	0x40768000
 8003a48:	240003ac 	.word	0x240003ac
 8003a4c:	24000598 	.word	0x24000598
 8003a50:	58021000 	.word	0x58021000
 8003a54:	24000520 	.word	0x24000520
 8003a58:	3ff00000 	.word	0x3ff00000
 8003a5c:	58020800 	.word	0x58020800
 8003a60:	240005b0 	.word	0x240005b0
 8003a64:	240003b8 	.word	0x240003b8
 8003a68:	240005c8 	.word	0x240005c8

08003a6c <transpuesta>:
 *      Author: EliasC
 */

#include <operaciones.h>

array2D transpuesta(double Maux[3][3]) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b096      	sub	sp, #88	; 0x58
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 8003a76:	2300      	movs	r3, #0
 8003a78:	657b      	str	r3, [r7, #84]	; 0x54
 8003a7a:	e024      	b.n	8003ac6 <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a80:	e01b      	b.n	8003aba <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 8003a82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	441a      	add	r2, r3
 8003a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	3358      	adds	r3, #88	; 0x58
 8003aac:	443b      	add	r3, r7
 8003aae:	3b50      	subs	r3, #80	; 0x50
 8003ab0:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 8003ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8003aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	dde0      	ble.n	8003a82 <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	ddd7      	ble.n	8003a7c <transpuesta+0x10>
		}
	}
	return MTaux;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f107 0308 	add.w	r3, r7, #8
 8003ad4:	2248      	movs	r2, #72	; 0x48
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f00b fa20 	bl	800ef1c <memcpy>
}
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	3758      	adds	r7, #88	; 0x58
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <productDot>:

double productDot(double VectA[], double VectB[]) {
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e016      	b.n	8003b2e <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	ed93 6b00 	vldr	d6, [r3]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	ed93 7b00 	vldr	d7, [r3]
 8003b18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b1c:	ed97 6b04 	vldr	d6, [r7, #16]
 8003b20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b24:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	dde5      	ble.n	8003b00 <productDot+0x1c>
	}
	return dotaux;
 8003b34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b38:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b3c:	eeb0 0b47 	vmov.f64	d0, d7
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <determinante>:

double determinante(double Maux[3][3]) {
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	ed93 6b00 	vldr	d6, [r3]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003b60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3330      	adds	r3, #48	; 0x30
 8003b68:	ed93 7b04 	vldr	d7, [r3, #16]
 8003b6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b70:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8003b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b78:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <adjunta>:

array2D adjunta(double Maux[3][3]) {
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b094      	sub	sp, #80	; 0x50
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	3318      	adds	r3, #24
 8003b98:	ed93 6b02 	vldr	d6, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	3330      	adds	r3, #48	; 0x30
 8003ba0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ba4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	3330      	adds	r3, #48	; 0x30
 8003bac:	ed93 5b02 	vldr	d5, [r3, #8]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	3318      	adds	r3, #24
 8003bb4:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bc0:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	3318      	adds	r3, #24
 8003bc8:	ed93 6b00 	vldr	d6, [r3]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	3330      	adds	r3, #48	; 0x30
 8003bd0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bd4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	3330      	adds	r3, #48	; 0x30
 8003bdc:	ed93 5b00 	vldr	d5, [r3]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	3318      	adds	r3, #24
 8003be4:	ed93 7b04 	vldr	d7, [r3, #16]
 8003be8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bf0:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3318      	adds	r3, #24
 8003bf8:	ed93 6b00 	vldr	d6, [r3]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3330      	adds	r3, #48	; 0x30
 8003c00:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c04:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	3330      	adds	r3, #48	; 0x30
 8003c0c:	ed93 5b00 	vldr	d5, [r3]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	3318      	adds	r3, #24
 8003c14:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c20:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	ed93 6b02 	vldr	d6, [r3, #8]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3330      	adds	r3, #48	; 0x30
 8003c2e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c32:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	3330      	adds	r3, #48	; 0x30
 8003c3a:	ed93 5b02 	vldr	d5, [r3, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c4c:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	ed93 6b00 	vldr	d6, [r3]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	3330      	adds	r3, #48	; 0x30
 8003c5a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3330      	adds	r3, #48	; 0x30
 8003c66:	ed93 5b00 	vldr	d5, [r3]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c78:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	ed93 6b00 	vldr	d6, [r3]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3330      	adds	r3, #48	; 0x30
 8003c86:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c8a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	3330      	adds	r3, #48	; 0x30
 8003c92:	ed93 5b00 	vldr	d5, [r3]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ca0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ca4:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	ed93 6b02 	vldr	d6, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cb6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	ed93 5b02 	vldr	d5, [r3, #8]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cc8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ccc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003cd0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	ed93 6b00 	vldr	d6, [r3]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	3318      	adds	r3, #24
 8003cde:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ce2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	3318      	adds	r3, #24
 8003cea:	ed93 5b00 	vldr	d5, [r3]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cf4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cf8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003cfc:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	ed93 6b00 	vldr	d6, [r3]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	3318      	adds	r3, #24
 8003d0a:	ed93 7b02 	vldr	d7, [r3, #8]
 8003d0e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3318      	adds	r3, #24
 8003d16:	ed93 5b00 	vldr	d5, [r3]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003d20:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d28:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f107 0308 	add.w	r3, r7, #8
 8003d34:	2248      	movs	r2, #72	; 0x48
 8003d36:	4619      	mov	r1, r3
 8003d38:	f00b f8f0 	bl	800ef1c <memcpy>
}
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	3750      	adds	r7, #80	; 0x50
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <inversa>:

array2D inversa(double A[3][3]) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b0bc      	sub	sp, #240	; 0xf0
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003d4c:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8003d4e:	463b      	mov	r3, r7
 8003d50:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff19 	bl	8003b8a <adjunta>
 8003d58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d5c:	4639      	mov	r1, r7
 8003d5e:	2248      	movs	r2, #72	; 0x48
 8003d60:	4618      	mov	r0, r3
 8003d62:	f00b f8db 	bl	800ef1c <memcpy>
	Maux = transpuesta(Maux.m);
 8003d66:	463b      	mov	r3, r7
 8003d68:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fe7c 	bl	8003a6c <transpuesta>
 8003d74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d78:	4639      	mov	r1, r7
 8003d7a:	2248      	movs	r2, #72	; 0x48
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f00b f8cd 	bl	800ef1c <memcpy>
	det = determinante(A);
 8003d82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d84:	f7ff fee1 	bl	8003b4a <determinante>
 8003d88:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003d92:	e035      	b.n	8003e00 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d9a:	e028      	b.n	8003dee <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8003d9c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003da0:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003da4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003da8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	33f0      	adds	r3, #240	; 0xf0
 8003dbc:	443b      	add	r3, r7
 8003dbe:	3ba0      	subs	r3, #160	; 0xa0
 8003dc0:	ed93 7b00 	vldr	d7, [r3]
 8003dc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003dc8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	33f0      	adds	r3, #240	; 0xf0
 8003ddc:	443b      	add	r3, r7
 8003dde:	3b58      	subs	r3, #88	; 0x58
 8003de0:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8003de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003de8:	3301      	adds	r3, #1
 8003dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	ddd2      	ble.n	8003d9c <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8003df6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	ddc5      	ble.n	8003d94 <inversa+0x50>
		}
	}
	return Minv;
 8003e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e10:	2248      	movs	r2, #72	; 0x48
 8003e12:	4619      	mov	r1, r3
 8003e14:	f00b f882 	bl	800ef1c <memcpy>
}
 8003e18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003e1a:	37f0      	adds	r7, #240	; 0xf0
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b09c      	sub	sp, #112	; 0x70
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e30:	e04b      	b.n	8003eca <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8003e32:	2300      	movs	r3, #0
 8003e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e36:	e042      	b.n	8003ebe <productMatriz+0x9e>
			double suma = 0;
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003e44:	2300      	movs	r3, #0
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e48:	e024      	b.n	8003e94 <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8003e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	441a      	add	r2, r3
 8003e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	ed93 6b00 	vldr	d6, [r3]
 8003e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	441a      	add	r2, r3
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	ed93 7b00 	vldr	d7, [r3]
 8003e7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e82:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8003e86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e8a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e90:	3301      	adds	r3, #1
 8003e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	ddd7      	ble.n	8003e4a <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8003e9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ea4:	4413      	add	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	3370      	adds	r3, #112	; 0x70
 8003eaa:	443b      	add	r3, r7
 8003eac:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8003eb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003eb4:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8003eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eba:	3301      	adds	r3, #1
 8003ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	ddb9      	ble.n	8003e38 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	ddb0      	ble.n	8003e32 <productMatriz+0x12>
		}
	}
	return producto;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f107 0310 	add.w	r3, r7, #16
 8003ed8:	2248      	movs	r2, #72	; 0x48
 8003eda:	4619      	mov	r1, r3
 8003edc:	f00b f81e 	bl	800ef1c <memcpy>
}
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	3770      	adds	r7, #112	; 0x70
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <HAL_MspInit+0x44>)
 8003ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <HAL_MspInit+0x44>)
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_MspInit+0x44>)
 8003f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003f0c:	2005      	movs	r0, #5
 8003f0e:	f003 f977 	bl	8007200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2101      	movs	r1, #1
 8003f16:	2051      	movs	r0, #81	; 0x51
 8003f18:	f003 f97d 	bl	8007216 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003f1c:	2051      	movs	r0, #81	; 0x51
 8003f1e:	f003 f994 	bl	800724a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400

08003f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f42:	e7fe      	b.n	8003f42 <HardFault_Handler+0x4>

08003f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f48:	e7fe      	b.n	8003f48 <MemManage_Handler+0x4>

08003f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f4e:	e7fe      	b.n	8003f4e <BusFault_Handler+0x4>

08003f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f54:	e7fe      	b.n	8003f54 <UsageFault_Handler+0x4>

08003f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f84:	f002 fff8 	bl	8006f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003f90:	2001      	movs	r0, #1
 8003f92:	f004 f8c8 	bl	8008126 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003f9e:	2002      	movs	r0, #2
 8003fa0:	f004 f8c1 	bl	8008126 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003fa4:	bf00      	nop
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003fac:	2004      	movs	r0, #4
 8003fae:	f004 f8ba 	bl	8008126 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003fba:	2008      	movs	r0, #8
 8003fbc:	f004 f8b3 	bl	8008126 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003fc8:	2010      	movs	r0, #16
 8003fca:	f004 f8ac 	bl	8008126 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003fd6:	2020      	movs	r0, #32
 8003fd8:	f004 f8a5 	bl	8008126 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fe4:	4802      	ldr	r0, [pc, #8]	; (8003ff0 <TIM2_IRQHandler+0x10>)
 8003fe6:	f007 fa21 	bl	800b42c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	240005d4 	.word	0x240005d4

08003ff4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <TIM3_IRQHandler+0x10>)
 8003ffa:	f007 fa17 	bl	800b42c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	24000620 	.word	0x24000620

08004008 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800400c:	4802      	ldr	r0, [pc, #8]	; (8004018 <TIM4_IRQHandler+0x10>)
 800400e:	f007 fa0d 	bl	800b42c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2400066c 	.word	0x2400066c

0800401c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <USART3_IRQHandler+0x10>)
 8004022:	f008 fd2f 	bl	800ca84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	24000cf0 	.word	0x24000cf0

08004030 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004038:	f004 f875 	bl	8008126 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	bd80      	pop	{r7, pc}

08004040 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <TIM15_IRQHandler+0x10>)
 8004056:	f007 f9e9 	bl	800b42c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	240007e8 	.word	0x240007e8

08004064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	return 1;
 8004068:	2301      	movs	r3, #1
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <_kill>:

int _kill(int pid, int sig)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800407e:	f00a ff23 	bl	800eec8 <__errno>
 8004082:	4603      	mov	r3, r0
 8004084:	2216      	movs	r2, #22
 8004086:	601a      	str	r2, [r3, #0]
	return -1;
 8004088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <_exit>:

void _exit (int status)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800409c:	f04f 31ff 	mov.w	r1, #4294967295
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ffe7 	bl	8004074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040a6:	e7fe      	b.n	80040a6 <_exit+0x12>

080040a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e00a      	b.n	80040d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ba:	f3af 8000 	nop.w
 80040be:	4601      	mov	r1, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	60ba      	str	r2, [r7, #8]
 80040c6:	b2ca      	uxtb	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3301      	adds	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dbf0      	blt.n	80040ba <_read+0x12>
	}

return len;
 80040d8:	687b      	ldr	r3, [r7, #4]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e009      	b.n	8004108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	60ba      	str	r2, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3301      	adds	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	dbf1      	blt.n	80040f4 <_write+0x12>
	}
	return len;
 8004110:	687b      	ldr	r3, [r7, #4]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_close>:

int _close(int file)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
	return -1;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004142:	605a      	str	r2, [r3, #4]
	return 0;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <_isatty>:

int _isatty(int file)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
	return 1;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
	return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <_sbrk+0x50>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <_sbrk+0x16>
		heap_end = &end;
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <_sbrk+0x50>)
 8004196:	4a10      	ldr	r2, [pc, #64]	; (80041d8 <_sbrk+0x54>)
 8004198:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <_sbrk+0x50>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <_sbrk+0x50>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	466a      	mov	r2, sp
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d907      	bls.n	80041be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041ae:	f00a fe8b 	bl	800eec8 <__errno>
 80041b2:	4603      	mov	r3, r0
 80041b4:	220c      	movs	r2, #12
 80041b6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
 80041bc:	e006      	b.n	80041cc <_sbrk+0x48>
	}

	heap_end += incr;
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <_sbrk+0x50>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <_sbrk+0x50>)
 80041c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80041ca:	68fb      	ldr	r3, [r7, #12]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	240005d0 	.word	0x240005d0
 80041d8:	24000d98 	.word	0x24000d98

080041dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <SystemInit+0xac>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	4a28      	ldr	r2, [pc, #160]	; (8004288 <SystemInit+0xac>)
 80041e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80041f0:	4b26      	ldr	r3, [pc, #152]	; (800428c <SystemInit+0xb0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <SystemInit+0xb0>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041fc:	4b23      	ldr	r3, [pc, #140]	; (800428c <SystemInit+0xb0>)
 80041fe:	2200      	movs	r2, #0
 8004200:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <SystemInit+0xb0>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4921      	ldr	r1, [pc, #132]	; (800428c <SystemInit+0xb0>)
 8004208:	4b21      	ldr	r3, [pc, #132]	; (8004290 <SystemInit+0xb4>)
 800420a:	4013      	ands	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <SystemInit+0xb0>)
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <SystemInit+0xb0>)
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <SystemInit+0xb0>)
 800421c:	2200      	movs	r2, #0
 800421e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <SystemInit+0xb0>)
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8004226:	4b19      	ldr	r3, [pc, #100]	; (800428c <SystemInit+0xb0>)
 8004228:	2200      	movs	r2, #0
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800422c:	4b17      	ldr	r3, [pc, #92]	; (800428c <SystemInit+0xb0>)
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <SystemInit+0xb0>)
 8004234:	2200      	movs	r2, #0
 8004236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004238:	4b14      	ldr	r3, [pc, #80]	; (800428c <SystemInit+0xb0>)
 800423a:	2200      	movs	r2, #0
 800423c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <SystemInit+0xb0>)
 8004240:	2200      	movs	r2, #0
 8004242:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <SystemInit+0xb0>)
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <SystemInit+0xb0>)
 800424c:	2200      	movs	r2, #0
 800424e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <SystemInit+0xb0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <SystemInit+0xb0>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <SystemInit+0xb0>)
 800425e:	2200      	movs	r2, #0
 8004260:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <SystemInit+0xb8>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <SystemInit+0xbc>)
 8004268:	4013      	ands	r3, r2
 800426a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800426e:	d202      	bcs.n	8004276 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <SystemInit+0xc0>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004276:	4b04      	ldr	r3, [pc, #16]	; (8004288 <SystemInit+0xac>)
 8004278:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800427c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	e000ed00 	.word	0xe000ed00
 800428c:	58024400 	.word	0x58024400
 8004290:	eaf6ed7f 	.word	0xeaf6ed7f
 8004294:	5c001000 	.word	0x5c001000
 8004298:	ffff0000 	.word	0xffff0000
 800429c:	51008108 	.word	0x51008108

080042a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	; 0x30
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042a6:	f107 0320 	add.w	r3, r7, #32
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042cc:	4b2b      	ldr	r3, [pc, #172]	; (800437c <MX_TIM2_Init+0xdc>)
 80042ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <MX_TIM2_Init+0xdc>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042da:	4b28      	ldr	r3, [pc, #160]	; (800437c <MX_TIM2_Init+0xdc>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <MX_TIM2_Init+0xdc>)
 80042e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <MX_TIM2_Init+0xdc>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ee:	4b23      	ldr	r3, [pc, #140]	; (800437c <MX_TIM2_Init+0xdc>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042f4:	4821      	ldr	r0, [pc, #132]	; (800437c <MX_TIM2_Init+0xdc>)
 80042f6:	f006 fa8d 	bl	800a814 <HAL_TIM_Base_Init>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8004300:	f7ff f96e 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004308:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800430a:	f107 0320 	add.w	r3, r7, #32
 800430e:	4619      	mov	r1, r3
 8004310:	481a      	ldr	r0, [pc, #104]	; (800437c <MX_TIM2_Init+0xdc>)
 8004312:	f007 fb5b 	bl	800b9cc <HAL_TIM_ConfigClockSource>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800431c:	f7ff f960 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004320:	4816      	ldr	r0, [pc, #88]	; (800437c <MX_TIM2_Init+0xdc>)
 8004322:	f006 fe13 	bl	800af4c <HAL_TIM_IC_Init>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800432c:	f7ff f958 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004338:	f107 0314 	add.w	r3, r7, #20
 800433c:	4619      	mov	r1, r3
 800433e:	480f      	ldr	r0, [pc, #60]	; (800437c <MX_TIM2_Init+0xdc>)
 8004340:	f008 f9b8 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800434a:	f7ff f949 	bl	80035e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004352:	2301      	movs	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	2200      	movs	r2, #0
 8004362:	4619      	mov	r1, r3
 8004364:	4805      	ldr	r0, [pc, #20]	; (800437c <MX_TIM2_Init+0xdc>)
 8004366:	f007 f980 	bl	800b66a <HAL_TIM_IC_ConfigChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8004370:	f7ff f936 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004374:	bf00      	nop
 8004376:	3730      	adds	r7, #48	; 0x30
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	240005d4 	.word	0x240005d4

08004380 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08c      	sub	sp, #48	; 0x30
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004386:	f107 0320 	add.w	r3, r7, #32
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <MX_TIM3_Init+0xdc>)
 80043ae:	4a2c      	ldr	r2, [pc, #176]	; (8004460 <MX_TIM3_Init+0xe0>)
 80043b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <MX_TIM3_Init+0xdc>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b8:	4b28      	ldr	r3, [pc, #160]	; (800445c <MX_TIM3_Init+0xdc>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80043be:	4b27      	ldr	r3, [pc, #156]	; (800445c <MX_TIM3_Init+0xdc>)
 80043c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <MX_TIM3_Init+0xdc>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <MX_TIM3_Init+0xdc>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80043d2:	4822      	ldr	r0, [pc, #136]	; (800445c <MX_TIM3_Init+0xdc>)
 80043d4:	f006 fa1e 	bl	800a814 <HAL_TIM_Base_Init>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80043de:	f7ff f8ff 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80043e8:	f107 0320 	add.w	r3, r7, #32
 80043ec:	4619      	mov	r1, r3
 80043ee:	481b      	ldr	r0, [pc, #108]	; (800445c <MX_TIM3_Init+0xdc>)
 80043f0:	f007 faec 	bl	800b9cc <HAL_TIM_ConfigClockSource>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80043fa:	f7ff f8f1 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80043fe:	4817      	ldr	r0, [pc, #92]	; (800445c <MX_TIM3_Init+0xdc>)
 8004400:	f006 fda4 	bl	800af4c <HAL_TIM_IC_Init>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800440a:	f7ff f8e9 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	4619      	mov	r1, r3
 800441c:	480f      	ldr	r0, [pc, #60]	; (800445c <MX_TIM3_Init+0xdc>)
 800441e:	f008 f949 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8004428:	f7ff f8da 	bl	80035e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800442c:	2300      	movs	r3, #0
 800442e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004430:	2301      	movs	r3, #1
 8004432:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800443c:	1d3b      	adds	r3, r7, #4
 800443e:	2200      	movs	r2, #0
 8004440:	4619      	mov	r1, r3
 8004442:	4806      	ldr	r0, [pc, #24]	; (800445c <MX_TIM3_Init+0xdc>)
 8004444:	f007 f911 	bl	800b66a <HAL_TIM_IC_ConfigChannel>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800444e:	f7ff f8c7 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004452:	bf00      	nop
 8004454:	3730      	adds	r7, #48	; 0x30
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	24000620 	.word	0x24000620
 8004460:	40000400 	.word	0x40000400

08004464 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800446a:	f107 0320 	add.w	r3, r7, #32
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004484:	1d3b      	adds	r3, r7, #4
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <MX_TIM4_Init+0xdc>)
 8004492:	4a2c      	ldr	r2, [pc, #176]	; (8004544 <MX_TIM4_Init+0xe0>)
 8004494:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004496:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <MX_TIM4_Init+0xdc>)
 8004498:	2200      	movs	r2, #0
 800449a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <MX_TIM4_Init+0xdc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <MX_TIM4_Init+0xdc>)
 80044a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <MX_TIM4_Init+0xdc>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b0:	4b23      	ldr	r3, [pc, #140]	; (8004540 <MX_TIM4_Init+0xdc>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044b6:	4822      	ldr	r0, [pc, #136]	; (8004540 <MX_TIM4_Init+0xdc>)
 80044b8:	f006 f9ac 	bl	800a814 <HAL_TIM_Base_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80044c2:	f7ff f88d 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044cc:	f107 0320 	add.w	r3, r7, #32
 80044d0:	4619      	mov	r1, r3
 80044d2:	481b      	ldr	r0, [pc, #108]	; (8004540 <MX_TIM4_Init+0xdc>)
 80044d4:	f007 fa7a 	bl	800b9cc <HAL_TIM_ConfigClockSource>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80044de:	f7ff f87f 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80044e2:	4817      	ldr	r0, [pc, #92]	; (8004540 <MX_TIM4_Init+0xdc>)
 80044e4:	f006 fd32 	bl	800af4c <HAL_TIM_IC_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80044ee:	f7ff f877 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	4619      	mov	r1, r3
 8004500:	480f      	ldr	r0, [pc, #60]	; (8004540 <MX_TIM4_Init+0xdc>)
 8004502:	f008 f8d7 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800450c:	f7ff f868 	bl	80035e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004510:	2300      	movs	r3, #0
 8004512:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004514:	2301      	movs	r3, #1
 8004516:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	2200      	movs	r2, #0
 8004524:	4619      	mov	r1, r3
 8004526:	4806      	ldr	r0, [pc, #24]	; (8004540 <MX_TIM4_Init+0xdc>)
 8004528:	f007 f89f 	bl	800b66a <HAL_TIM_IC_ConfigChannel>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004532:	f7ff f855 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	3730      	adds	r7, #48	; 0x30
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	2400066c 	.word	0x2400066c
 8004544:	40000800 	.word	0x40000800

08004548 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800454e:	f107 0310 	add.w	r3, r7, #16
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004566:	4b1e      	ldr	r3, [pc, #120]	; (80045e0 <MX_TIM5_Init+0x98>)
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <MX_TIM5_Init+0x9c>)
 800456a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 800456c:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <MX_TIM5_Init+0x98>)
 800456e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8004572:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <MX_TIM5_Init+0x98>)
 8004576:	2200      	movs	r2, #0
 8004578:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800457a:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <MX_TIM5_Init+0x98>)
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004582:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <MX_TIM5_Init+0x98>)
 8004584:	2200      	movs	r2, #0
 8004586:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <MX_TIM5_Init+0x98>)
 800458a:	2200      	movs	r2, #0
 800458c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800458e:	4814      	ldr	r0, [pc, #80]	; (80045e0 <MX_TIM5_Init+0x98>)
 8004590:	f006 f940 	bl	800a814 <HAL_TIM_Base_Init>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800459a:	f7ff f821 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800459e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	4619      	mov	r1, r3
 80045aa:	480d      	ldr	r0, [pc, #52]	; (80045e0 <MX_TIM5_Init+0x98>)
 80045ac:	f007 fa0e 	bl	800b9cc <HAL_TIM_ConfigClockSource>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80045b6:	f7ff f813 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4806      	ldr	r0, [pc, #24]	; (80045e0 <MX_TIM5_Init+0x98>)
 80045c8:	f008 f874 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80045d2:	f7ff f805 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80045d6:	bf00      	nop
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	240006b8 	.word	0x240006b8
 80045e4:	40000c00 	.word	0x40000c00

080045e8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	; 0x30
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ee:	f107 0320 	add.w	r3, r7, #32
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	611a      	str	r2, [r3, #16]
 800460a:	615a      	str	r2, [r3, #20]
 800460c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <MX_TIM12_Init+0xc0>)
 8004610:	4a26      	ldr	r2, [pc, #152]	; (80046ac <MX_TIM12_Init+0xc4>)
 8004612:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <MX_TIM12_Init+0xc0>)
 8004616:	f240 12f3 	movw	r2, #499	; 0x1f3
 800461a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <MX_TIM12_Init+0xc0>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 8004622:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <MX_TIM12_Init+0xc0>)
 8004624:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004628:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <MX_TIM12_Init+0xc0>)
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <MX_TIM12_Init+0xc0>)
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004636:	481c      	ldr	r0, [pc, #112]	; (80046a8 <MX_TIM12_Init+0xc0>)
 8004638:	f006 f8ec 	bl	800a814 <HAL_TIM_Base_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8004642:	f7fe ffcd 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800464a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800464c:	f107 0320 	add.w	r3, r7, #32
 8004650:	4619      	mov	r1, r3
 8004652:	4815      	ldr	r0, [pc, #84]	; (80046a8 <MX_TIM12_Init+0xc0>)
 8004654:	f007 f9ba 	bl	800b9cc <HAL_TIM_ConfigClockSource>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800465e:	f7fe ffbf 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004662:	4811      	ldr	r0, [pc, #68]	; (80046a8 <MX_TIM12_Init+0xc0>)
 8004664:	f006 fa6d 	bl	800ab42 <HAL_TIM_PWM_Init>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800466e:	f7fe ffb7 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004672:	2360      	movs	r3, #96	; 0x60
 8004674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8004676:	f644 6320 	movw	r3, #20000	; 0x4e20
 800467a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	2200      	movs	r2, #0
 8004688:	4619      	mov	r1, r3
 800468a:	4807      	ldr	r0, [pc, #28]	; (80046a8 <MX_TIM12_Init+0xc0>)
 800468c:	f007 f88a 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8004696:	f7fe ffa3 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800469a:	4803      	ldr	r0, [pc, #12]	; (80046a8 <MX_TIM12_Init+0xc0>)
 800469c:	f000 fa44 	bl	8004b28 <HAL_TIM_MspPostInit>

}
 80046a0:	bf00      	nop
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	24000704 	.word	0x24000704
 80046ac:	40001800 	.word	0x40001800

080046b0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
 80046c4:	615a      	str	r2, [r3, #20]
 80046c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80046c8:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <MX_TIM13_Init+0x98>)
 80046ca:	4a20      	ldr	r2, [pc, #128]	; (800474c <MX_TIM13_Init+0x9c>)
 80046cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 80046ce:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <MX_TIM13_Init+0x98>)
 80046d0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80046d4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <MX_TIM13_Init+0x98>)
 80046d8:	2200      	movs	r2, #0
 80046da:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <MX_TIM13_Init+0x98>)
 80046de:	f649 4240 	movw	r2, #40000	; 0x9c40
 80046e2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <MX_TIM13_Init+0x98>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ea:	4b17      	ldr	r3, [pc, #92]	; (8004748 <MX_TIM13_Init+0x98>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80046f0:	4815      	ldr	r0, [pc, #84]	; (8004748 <MX_TIM13_Init+0x98>)
 80046f2:	f006 f88f 	bl	800a814 <HAL_TIM_Base_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80046fc:	f7fe ff70 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004700:	4811      	ldr	r0, [pc, #68]	; (8004748 <MX_TIM13_Init+0x98>)
 8004702:	f006 fa1e 	bl	800ab42 <HAL_TIM_PWM_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800470c:	f7fe ff68 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004710:	2360      	movs	r3, #96	; 0x60
 8004712:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8004714:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004718:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	2200      	movs	r2, #0
 8004726:	4619      	mov	r1, r3
 8004728:	4807      	ldr	r0, [pc, #28]	; (8004748 <MX_TIM13_Init+0x98>)
 800472a:	f007 f83b 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8004734:	f7fe ff54 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004738:	4803      	ldr	r0, [pc, #12]	; (8004748 <MX_TIM13_Init+0x98>)
 800473a:	f000 f9f5 	bl	8004b28 <HAL_TIM_MspPostInit>

}
 800473e:	bf00      	nop
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	24000750 	.word	0x24000750
 800474c:	40001c00 	.word	0x40001c00

08004750 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	611a      	str	r2, [r3, #16]
 8004764:	615a      	str	r2, [r3, #20]
 8004766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004768:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <MX_TIM14_Init+0x98>)
 800476a:	4a20      	ldr	r2, [pc, #128]	; (80047ec <MX_TIM14_Init+0x9c>)
 800476c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 800476e:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <MX_TIM14_Init+0x98>)
 8004770:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004774:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004776:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <MX_TIM14_Init+0x98>)
 8004778:	2200      	movs	r2, #0
 800477a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <MX_TIM14_Init+0x98>)
 800477e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004782:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004784:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <MX_TIM14_Init+0x98>)
 8004786:	2200      	movs	r2, #0
 8004788:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <MX_TIM14_Init+0x98>)
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004790:	4815      	ldr	r0, [pc, #84]	; (80047e8 <MX_TIM14_Init+0x98>)
 8004792:	f006 f83f 	bl	800a814 <HAL_TIM_Base_Init>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800479c:	f7fe ff20 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80047a0:	4811      	ldr	r0, [pc, #68]	; (80047e8 <MX_TIM14_Init+0x98>)
 80047a2:	f006 f9ce 	bl	800ab42 <HAL_TIM_PWM_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80047ac:	f7fe ff18 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047b0:	2360      	movs	r3, #96	; 0x60
 80047b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80047b4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80047b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	2200      	movs	r2, #0
 80047c6:	4619      	mov	r1, r3
 80047c8:	4807      	ldr	r0, [pc, #28]	; (80047e8 <MX_TIM14_Init+0x98>)
 80047ca:	f006 ffeb 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80047d4:	f7fe ff04 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80047d8:	4803      	ldr	r0, [pc, #12]	; (80047e8 <MX_TIM14_Init+0x98>)
 80047da:	f000 f9a5 	bl	8004b28 <HAL_TIM_MspPostInit>

}
 80047de:	bf00      	nop
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2400079c 	.word	0x2400079c
 80047ec:	40002000 	.word	0x40002000

080047f0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047f6:	f107 0310 	add.w	r3, r7, #16
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800480e:	4b1f      	ldr	r3, [pc, #124]	; (800488c <MX_TIM15_Init+0x9c>)
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <MX_TIM15_Init+0xa0>)
 8004812:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <MX_TIM15_Init+0x9c>)
 8004816:	2201      	movs	r2, #1
 8004818:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <MX_TIM15_Init+0x9c>)
 800481c:	2200      	movs	r2, #0
 800481e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004820:	4b1a      	ldr	r3, [pc, #104]	; (800488c <MX_TIM15_Init+0x9c>)
 8004822:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8004826:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004828:	4b18      	ldr	r3, [pc, #96]	; (800488c <MX_TIM15_Init+0x9c>)
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800482e:	4b17      	ldr	r3, [pc, #92]	; (800488c <MX_TIM15_Init+0x9c>)
 8004830:	2200      	movs	r2, #0
 8004832:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <MX_TIM15_Init+0x9c>)
 8004836:	2200      	movs	r2, #0
 8004838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800483a:	4814      	ldr	r0, [pc, #80]	; (800488c <MX_TIM15_Init+0x9c>)
 800483c:	f005 ffea 	bl	800a814 <HAL_TIM_Base_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004846:	f7fe fecb 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800484a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800484e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004850:	f107 0310 	add.w	r3, r7, #16
 8004854:	4619      	mov	r1, r3
 8004856:	480d      	ldr	r0, [pc, #52]	; (800488c <MX_TIM15_Init+0x9c>)
 8004858:	f007 f8b8 	bl	800b9cc <HAL_TIM_ConfigClockSource>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004862:	f7fe febd 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4806      	ldr	r0, [pc, #24]	; (800488c <MX_TIM15_Init+0x9c>)
 8004874:	f007 ff1e 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800487e:	f7fe feaf 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	240007e8 	.word	0x240007e8
 8004890:	40014000 	.word	0x40014000

08004894 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b092      	sub	sp, #72	; 0x48
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800489c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d136      	bne.n	8004924 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048b6:	4b92      	ldr	r3, [pc, #584]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80048b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048bc:	4a90      	ldr	r2, [pc, #576]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048c6:	4b8e      	ldr	r3, [pc, #568]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80048c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	633b      	str	r3, [r7, #48]	; 0x30
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d4:	4b8a      	ldr	r3, [pc, #552]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80048d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048da:	4a89      	ldr	r2, [pc, #548]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048e4:	4b86      	ldr	r3, [pc, #536]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80048e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 80048f2:	2320      	movs	r3, #32
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f6:	2302      	movs	r3, #2
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048fa:	2302      	movs	r3, #2
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fe:	2300      	movs	r3, #0
 8004900:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004902:	2301      	movs	r3, #1
 8004904:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 8004906:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800490a:	4619      	mov	r1, r3
 800490c:	487d      	ldr	r0, [pc, #500]	; (8004b04 <HAL_TIM_Base_MspInit+0x270>)
 800490e:	f003 fa29 	bl	8007d64 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004912:	2200      	movs	r2, #0
 8004914:	2101      	movs	r1, #1
 8004916:	201c      	movs	r0, #28
 8004918:	f002 fc7d 	bl	8007216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800491c:	201c      	movs	r0, #28
 800491e:	f002 fc94 	bl	800724a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004922:	e0e8      	b.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a77      	ldr	r2, [pc, #476]	; (8004b08 <HAL_TIM_Base_MspInit+0x274>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d136      	bne.n	800499c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800492e:	4b74      	ldr	r3, [pc, #464]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004934:	4a72      	ldr	r2, [pc, #456]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004936:	f043 0302 	orr.w	r3, r3, #2
 800493a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800493e:	4b70      	ldr	r3, [pc, #448]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494c:	4b6c      	ldr	r3, [pc, #432]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 800494e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004952:	4a6b      	ldr	r2, [pc, #428]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800495c:	4b68      	ldr	r3, [pc, #416]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 800495e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 800496a:	2340      	movs	r3, #64	; 0x40
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496e:	2302      	movs	r3, #2
 8004970:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004972:	2302      	movs	r3, #2
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004976:	2300      	movs	r3, #0
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800497a:	2302      	movs	r3, #2
 800497c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 800497e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004982:	4619      	mov	r1, r3
 8004984:	485f      	ldr	r0, [pc, #380]	; (8004b04 <HAL_TIM_Base_MspInit+0x270>)
 8004986:	f003 f9ed 	bl	8007d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800498a:	2200      	movs	r2, #0
 800498c:	2101      	movs	r1, #1
 800498e:	201d      	movs	r0, #29
 8004990:	f002 fc41 	bl	8007216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004994:	201d      	movs	r0, #29
 8004996:	f002 fc58 	bl	800724a <HAL_NVIC_EnableIRQ>
}
 800499a:	e0ac      	b.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <HAL_TIM_Base_MspInit+0x278>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d137      	bne.n	8004a16 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049a6:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80049a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049ac:	4a54      	ldr	r2, [pc, #336]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049b6:	4b52      	ldr	r3, [pc, #328]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80049b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80049c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ca:	4a4d      	ldr	r2, [pc, #308]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80049cc:	f043 0308 	orr.w	r3, r3, #8
 80049d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049d4:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 80049d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 80049e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e8:	2302      	movs	r3, #2
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049ec:	2302      	movs	r3, #2
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f0:	2300      	movs	r3, #0
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80049f4:	2302      	movs	r3, #2
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 80049f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049fc:	4619      	mov	r1, r3
 80049fe:	4844      	ldr	r0, [pc, #272]	; (8004b10 <HAL_TIM_Base_MspInit+0x27c>)
 8004a00:	f003 f9b0 	bl	8007d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004a04:	2200      	movs	r2, #0
 8004a06:	2101      	movs	r1, #1
 8004a08:	201e      	movs	r0, #30
 8004a0a:	f002 fc04 	bl	8007216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004a0e:	201e      	movs	r0, #30
 8004a10:	f002 fc1b 	bl	800724a <HAL_NVIC_EnableIRQ>
}
 8004a14:	e06f      	b.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <HAL_TIM_Base_MspInit+0x280>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10f      	bne.n	8004a40 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004a20:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a26:	4a36      	ldr	r2, [pc, #216]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a28:	f043 0308 	orr.w	r3, r3, #8
 8004a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a30:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
}
 8004a3e:	e05a      	b.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <HAL_TIM_Base_MspInit+0x284>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10f      	bne.n	8004a6a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004a4a:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a50:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a5a:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	697b      	ldr	r3, [r7, #20]
}
 8004a68:	e045      	b.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <HAL_TIM_Base_MspInit+0x288>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10f      	bne.n	8004a94 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004a86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	693b      	ldr	r3, [r7, #16]
}
 8004a92:	e030      	b.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <HAL_TIM_Base_MspInit+0x28c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10f      	bne.n	8004abe <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
}
 8004abc:	e01b      	b.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_TIM_Base_MspInit+0x290>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d116      	bne.n	8004af6 <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <HAL_TIM_Base_MspInit+0x26c>)
 8004ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2101      	movs	r1, #1
 8004aea:	2074      	movs	r0, #116	; 0x74
 8004aec:	f002 fb93 	bl	8007216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004af0:	2074      	movs	r0, #116	; 0x74
 8004af2:	f002 fbaa 	bl	800724a <HAL_NVIC_EnableIRQ>
}
 8004af6:	bf00      	nop
 8004af8:	3748      	adds	r7, #72	; 0x48
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
 8004b04:	58020000 	.word	0x58020000
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	58020c00 	.word	0x58020c00
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40001800 	.word	0x40001800
 8004b1c:	40001c00 	.word	0x40001c00
 8004b20:	40002000 	.word	0x40002000
 8004b24:	40014000 	.word	0x40014000

08004b28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <HAL_TIM_MspPostInit+0x104>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d120      	bne.n	8004b8c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b4a:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b50:	4a37      	ldr	r2, [pc, #220]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004b52:	f043 0302 	orr.w	r3, r3, #2
 8004b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b5a:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b72:	2302      	movs	r3, #2
 8004b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b76:	2300      	movs	r3, #0
 8004b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	482b      	ldr	r0, [pc, #172]	; (8004c34 <HAL_TIM_MspPostInit+0x10c>)
 8004b86:	f003 f8ed 	bl	8007d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004b8a:	e04a      	b.n	8004c22 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a29      	ldr	r2, [pc, #164]	; (8004c38 <HAL_TIM_MspPostInit+0x110>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d120      	bne.n	8004bd8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b96:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b9c:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004b9e:	f043 0320 	orr.w	r3, r3, #32
 8004ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004bc6:	2309      	movs	r3, #9
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004bca:	f107 0314 	add.w	r3, r7, #20
 8004bce:	4619      	mov	r1, r3
 8004bd0:	481a      	ldr	r0, [pc, #104]	; (8004c3c <HAL_TIM_MspPostInit+0x114>)
 8004bd2:	f003 f8c7 	bl	8007d64 <HAL_GPIO_Init>
}
 8004bd6:	e024      	b.n	8004c22 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <HAL_TIM_MspPostInit+0x118>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d11f      	bne.n	8004c22 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be8:	4a11      	ldr	r2, [pc, #68]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bf2:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <HAL_TIM_MspPostInit+0x108>)
 8004bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c06:	2302      	movs	r3, #2
 8004c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004c12:	2309      	movs	r3, #9
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8004c16:	f107 0314 	add.w	r3, r7, #20
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4807      	ldr	r0, [pc, #28]	; (8004c3c <HAL_TIM_MspPostInit+0x114>)
 8004c1e:	f003 f8a1 	bl	8007d64 <HAL_GPIO_Init>
}
 8004c22:	bf00      	nop
 8004c24:	3728      	adds	r7, #40	; 0x28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40001800 	.word	0x40001800
 8004c30:	58024400 	.word	0x58024400
 8004c34:	58020400 	.word	0x58020400
 8004c38:	40001c00 	.word	0x40001c00
 8004c3c:	58021400 	.word	0x58021400
 8004c40:	40002000 	.word	0x40002000
 8004c44:	00000000 	.word	0x00000000

08004c48 <inicializarTrayectoria>:

double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;

//(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)

void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	ed2d 8b04 	vpush	{d8-d9}
 8004c4e:	b090      	sub	sp, #64	; 0x40
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8004c56:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8004c5a:	ed87 2b08 	vstr	d2, [r7, #32]
 8004c5e:	ed87 3b06 	vstr	d3, [r7, #24]
 8004c62:	ed87 4b04 	vstr	d4, [r7, #16]
 8004c66:	ed87 5b02 	vstr	d5, [r7, #8]
 8004c6a:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 8004c6e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004c72:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004c76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7e:	d519      	bpl.n	8004cb4 <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 8004c80:	ed97 7b02 	vldr	d7, [r7, #8]
 8004c84:	eeb1 7b47 	vneg.f64	d7, d7
 8004c88:	4b7e      	ldr	r3, [pc, #504]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004c8a:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 8004c8e:	497e      	ldr	r1, [pc, #504]	; (8004e88 <inicializarTrayectoria+0x240>)
 8004c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c94:	e9c1 2300 	strd	r2, r3, [r1]
		Vm = -Vmax;
 8004c98:	ed97 7b04 	vldr	d7, [r7, #16]
 8004c9c:	eeb1 7b47 	vneg.f64	d7, d7
 8004ca0:	4b7a      	ldr	r3, [pc, #488]	; (8004e8c <inicializarTrayectoria+0x244>)
 8004ca2:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 8004ca6:	ed97 7b00 	vldr	d7, [r7]
 8004caa:	eeb1 7b47 	vneg.f64	d7, d7
 8004cae:	ed87 7b00 	vstr	d7, [r7]
 8004cb2:	e019      	b.n	8004ce8 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 8004cb4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004cb8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004cbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	dd10      	ble.n	8004ce8 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 8004cc6:	496f      	ldr	r1, [pc, #444]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ccc:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004cd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8004cd4:	eeb1 7b47 	vneg.f64	d7, d7
 8004cd8:	4b6b      	ldr	r3, [pc, #428]	; (8004e88 <inicializarTrayectoria+0x240>)
 8004cda:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 8004cde:	496b      	ldr	r1, [pc, #428]	; (8004e8c <inicializarTrayectoria+0x244>)
 8004ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ce4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (V0Hip > Vmax) {
 8004ce8:	ed97 6b08 	vldr	d6, [r7, #32]
 8004cec:	ed97 7b04 	vldr	d7, [r7, #16]
 8004cf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	dd0b      	ble.n	8004d12 <inicializarTrayectoria+0xca>
		Ai = -Amax;
 8004cfa:	ed97 7b02 	vldr	d7, [r7, #8]
 8004cfe:	eeb1 7b47 	vneg.f64	d7, d7
 8004d02:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004d04:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8004d08:	495f      	ldr	r1, [pc, #380]	; (8004e88 <inicializarTrayectoria+0x240>)
 8004d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d0e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (Vf > Vmax) {
 8004d12:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d16:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	dd0b      	ble.n	8004d3c <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8004d24:	4957      	ldr	r1, [pc, #348]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d2a:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004d2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d32:	eeb1 7b47 	vneg.f64	d7, d7
 8004d36:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <inicializarTrayectoria+0x240>)
 8004d38:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004d42:	f000 bd05 	b.w	8005750 <inicializarTrayectoria+0xb08>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8004d46:	4b4f      	ldr	r3, [pc, #316]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004d48:	ed93 6b00 	vldr	d6, [r3]
 8004d4c:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004d4e:	ed93 7b00 	vldr	d7, [r3]
 8004d52:	ee26 5b07 	vmul.f64	d5, d6, d7
 8004d56:	ed97 7b00 	vldr	d7, [r7]
 8004d5a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004d5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <inicializarTrayectoria+0x248>)
 8004d68:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 8004d6c:	4b48      	ldr	r3, [pc, #288]	; (8004e90 <inicializarTrayectoria+0x248>)
 8004d6e:	ed93 7b00 	vldr	d7, [r3]
 8004d72:	eeb0 6bc7 	vabs.f64	d6, d7
 8004d76:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <inicializarTrayectoria+0x244>)
 8004d78:	ed93 5b00 	vldr	d5, [r3]
 8004d7c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d80:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d84:	eeb0 7bc7 	vabs.f64	d7, d7
 8004d88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	dd35      	ble.n	8004dfe <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 8004d92:	4b3e      	ldr	r3, [pc, #248]	; (8004e8c <inicializarTrayectoria+0x244>)
 8004d94:	ed93 6b00 	vldr	d6, [r3]
 8004d98:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004da0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	d029      	beq.n	8004dfe <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 8004daa:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004dac:	ed93 6b00 	vldr	d6, [r3]
 8004db0:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004db2:	ed93 7b00 	vldr	d7, [r3]
 8004db6:	eeb0 7bc7 	vabs.f64	d7, d7
 8004dba:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004dbe:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <inicializarTrayectoria+0x244>)
 8004dc0:	ed93 6b00 	vldr	d6, [r3]
 8004dc4:	ed97 7b08 	vldr	d7, [r7, #32]
 8004dc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004dcc:	eeb0 6bc7 	vabs.f64	d6, d7
 8004dd0:	ed97 7b00 	vldr	d7, [r7]
 8004dd4:	eeb0 7bc7 	vabs.f64	d7, d7
 8004dd8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8004de0:	f00d f9be 	bl	8012160 <sqrt>
 8004de4:	eeb0 7b40 	vmov.f64	d7, d0
 8004de8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <inicializarTrayectoria+0x24c>)
 8004dee:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8004df2:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <inicializarTrayectoria+0x24c>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	4922      	ldr	r1, [pc, #136]	; (8004e84 <inicializarTrayectoria+0x23c>)
 8004dfa:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 8004dfe:	4b23      	ldr	r3, [pc, #140]	; (8004e8c <inicializarTrayectoria+0x244>)
 8004e00:	ed93 6b00 	vldr	d6, [r3]
 8004e04:	ed97 7b08 	vldr	d7, [r7, #32]
 8004e08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	d150      	bne.n	8004eb8 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8004e16:	4920      	ldr	r1, [pc, #128]	; (8004e98 <inicializarTrayectoria+0x250>)
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	e9c1 2300 	strd	r2, r3, [r1]
			a2Hip1 = 0;
 8004e24:	491d      	ldr	r1, [pc, #116]	; (8004e9c <inicializarTrayectoria+0x254>)
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9c1 2300 	strd	r2, r3, [r1]
			a1Hip1 = 0;
 8004e32:	491b      	ldr	r1, [pc, #108]	; (8004ea0 <inicializarTrayectoria+0x258>)
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip1 = 0;
 8004e40:	4918      	ldr	r1, [pc, #96]	; (8004ea4 <inicializarTrayectoria+0x25c>)
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = 0;
 8004e4e:	4916      	ldr	r1, [pc, #88]	; (8004ea8 <inicializarTrayectoria+0x260>)
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip2 = 0;
 8004e5c:	4913      	ldr	r1, [pc, #76]	; (8004eac <inicializarTrayectoria+0x264>)
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip2 = 0;
 8004e6a:	4911      	ldr	r1, [pc, #68]	; (8004eb0 <inicializarTrayectoria+0x268>)
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = XiHip1;
 8004e78:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <inicializarTrayectoria+0x26c>)
 8004e7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e7e:	e9c1 2300 	strd	r2, r3, [r1]
 8004e82:	e195      	b.n	80051b0 <inicializarTrayectoria+0x568>
 8004e84:	24000a90 	.word	0x24000a90
 8004e88:	24000a98 	.word	0x24000a98
 8004e8c:	24000b40 	.word	0x24000b40
 8004e90:	24000b98 	.word	0x24000b98
 8004e94:	24000ba0 	.word	0x24000ba0
 8004e98:	24000ab8 	.word	0x24000ab8
 8004e9c:	24000ab0 	.word	0x24000ab0
 8004ea0:	24000aa8 	.word	0x24000aa8
 8004ea4:	24000aa0 	.word	0x24000aa0
 8004ea8:	24000b58 	.word	0x24000b58
 8004eac:	24000b60 	.word	0x24000b60
 8004eb0:	24000b68 	.word	0x24000b68
 8004eb4:	24000b28 	.word	0x24000b28
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 8004eb8:	ed97 6b00 	vldr	d6, [r7]
 8004ebc:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004ec0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ec4:	4bcf      	ldr	r3, [pc, #828]	; (8005204 <inicializarTrayectoria+0x5bc>)
 8004ec6:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 8004eca:	49cf      	ldr	r1, [pc, #828]	; (8005208 <inicializarTrayectoria+0x5c0>)
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 8004ed8:	4bcc      	ldr	r3, [pc, #816]	; (800520c <inicializarTrayectoria+0x5c4>)
 8004eda:	ed93 5b00 	vldr	d5, [r3]
 8004ede:	4bc9      	ldr	r3, [pc, #804]	; (8005204 <inicializarTrayectoria+0x5bc>)
 8004ee0:	ed93 7b00 	vldr	d7, [r3]
 8004ee4:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004ee8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004eec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ef0:	4bc7      	ldr	r3, [pc, #796]	; (8005210 <inicializarTrayectoria+0x5c8>)
 8004ef2:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8004ef6:	49c7      	ldr	r1, [pc, #796]	; (8005214 <inicializarTrayectoria+0x5cc>)
 8004ef8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004efc:	e9c1 2300 	strd	r2, r3, [r1]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004f00:	4bc1      	ldr	r3, [pc, #772]	; (8005208 <inicializarTrayectoria+0x5c0>)
 8004f02:	ed93 7b00 	vldr	d7, [r3]
 8004f06:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f0a:	4bc1      	ldr	r3, [pc, #772]	; (8005210 <inicializarTrayectoria+0x5c8>)
 8004f0c:	ed93 7b00 	vldr	d7, [r3]
 8004f10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f14:	4bbf      	ldr	r3, [pc, #764]	; (8005214 <inicializarTrayectoria+0x5cc>)
 8004f16:	ed93 7b00 	vldr	d7, [r3]
 8004f1a:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 8004f1e:	4bb9      	ldr	r3, [pc, #740]	; (8005204 <inicializarTrayectoria+0x5bc>)
 8004f20:	ed93 7b00 	vldr	d7, [r3]
 8004f24:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004f28:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004f2c:	4bb8      	ldr	r3, [pc, #736]	; (8005210 <inicializarTrayectoria+0x5c8>)
 8004f2e:	ed93 7b00 	vldr	d7, [r3]
 8004f32:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f36:	eeb0 0b47 	vmov.f64	d0, d7
 8004f3a:	f00c fe91 	bl	8011c60 <pow>
 8004f3e:	eeb0 7b40 	vmov.f64	d7, d0
 8004f42:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004f46:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004f4a:	4bb3      	ldr	r3, [pc, #716]	; (8005218 <inicializarTrayectoria+0x5d0>)
 8004f4c:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8004f50:	49b2      	ldr	r1, [pc, #712]	; (800521c <inicializarTrayectoria+0x5d4>)
 8004f52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f56:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004f5a:	4bae      	ldr	r3, [pc, #696]	; (8005214 <inicializarTrayectoria+0x5cc>)
 8004f5c:	ed93 6b00 	vldr	d6, [r3]
 8004f60:	4bab      	ldr	r3, [pc, #684]	; (8005210 <inicializarTrayectoria+0x5c8>)
 8004f62:	ed93 7b00 	vldr	d7, [r3]
 8004f66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f6a:	4bac      	ldr	r3, [pc, #688]	; (800521c <inicializarTrayectoria+0x5d4>)
 8004f6c:	ed93 7b00 	vldr	d7, [r3]
 8004f70:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004f74:	4ba6      	ldr	r3, [pc, #664]	; (8005210 <inicializarTrayectoria+0x5c8>)
 8004f76:	ed93 7b00 	vldr	d7, [r3]
 8004f7a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f7e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f82:	f00c fe6d 	bl	8011c60 <pow>
 8004f86:	eeb0 6b40 	vmov.f64	d6, d0
 8004f8a:	4b9f      	ldr	r3, [pc, #636]	; (8005208 <inicializarTrayectoria+0x5c0>)
 8004f8c:	ed93 7b00 	vldr	d7, [r3]
 8004f90:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f94:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 8004f98:	4b9d      	ldr	r3, [pc, #628]	; (8005210 <inicializarTrayectoria+0x5c8>)
 8004f9a:	ed93 7b00 	vldr	d7, [r3]
 8004f9e:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004fa2:	eeb0 0b47 	vmov.f64	d0, d7
 8004fa6:	f00c fe5b 	bl	8011c60 <pow>
 8004faa:	eeb0 6b40 	vmov.f64	d6, d0
 8004fae:	4b95      	ldr	r3, [pc, #596]	; (8005204 <inicializarTrayectoria+0x5bc>)
 8004fb0:	ed93 7b00 	vldr	d7, [r3]
 8004fb4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fb8:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004fbc:	4b98      	ldr	r3, [pc, #608]	; (8005220 <inicializarTrayectoria+0x5d8>)
 8004fbe:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 8004fc2:	ed97 7b00 	vldr	d7, [r7]
 8004fc6:	eeb1 6b47 	vneg.f64	d6, d7
 8004fca:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004fce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fd2:	4b94      	ldr	r3, [pc, #592]	; (8005224 <inicializarTrayectoria+0x5dc>)
 8004fd4:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 8004fd8:	4b8c      	ldr	r3, [pc, #560]	; (800520c <inicializarTrayectoria+0x5c4>)
 8004fda:	ed93 6b00 	vldr	d6, [r3]
 8004fde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004fe2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fe6:	4b90      	ldr	r3, [pc, #576]	; (8005228 <inicializarTrayectoria+0x5e0>)
 8004fe8:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8004fec:	4b8f      	ldr	r3, [pc, #572]	; (800522c <inicializarTrayectoria+0x5e4>)
 8004fee:	ed93 6b00 	vldr	d6, [r3]
 8004ff2:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <inicializarTrayectoria+0x5e0>)
 8004ff4:	ed93 7b00 	vldr	d7, [r3]
 8004ff8:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004ffc:	4b83      	ldr	r3, [pc, #524]	; (800520c <inicializarTrayectoria+0x5c4>)
 8004ffe:	ed93 3b00 	vldr	d3, [r3]
 8005002:	ed97 4b00 	vldr	d4, [r7]
 8005006:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800500a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800500e:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 8005012:	4b84      	ldr	r3, [pc, #528]	; (8005224 <inicializarTrayectoria+0x5dc>)
 8005014:	ed93 7b00 	vldr	d7, [r3]
 8005018:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800501c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005020:	4b7a      	ldr	r3, [pc, #488]	; (800520c <inicializarTrayectoria+0x5c4>)
 8005022:	ed93 3b00 	vldr	d3, [r3]
 8005026:	ed97 4b00 	vldr	d4, [r7]
 800502a:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800502e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005032:	4b76      	ldr	r3, [pc, #472]	; (800520c <inicializarTrayectoria+0x5c4>)
 8005034:	ed93 3b00 	vldr	d3, [r3]
 8005038:	ed97 4b00 	vldr	d4, [r7]
 800503c:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005040:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005044:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8005048:	4b79      	ldr	r3, [pc, #484]	; (8005230 <inicializarTrayectoria+0x5e8>)
 800504a:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 800504e:	4b78      	ldr	r3, [pc, #480]	; (8005230 <inicializarTrayectoria+0x5e8>)
 8005050:	ed93 6b00 	vldr	d6, [r3]
 8005054:	4b70      	ldr	r3, [pc, #448]	; (8005218 <inicializarTrayectoria+0x5d0>)
 8005056:	ed93 7b00 	vldr	d7, [r3]
 800505a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800505e:	4b6b      	ldr	r3, [pc, #428]	; (800520c <inicializarTrayectoria+0x5c4>)
 8005060:	ed93 7b00 	vldr	d7, [r3]
 8005064:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005068:	4b69      	ldr	r3, [pc, #420]	; (8005210 <inicializarTrayectoria+0x5c8>)
 800506a:	ed93 7b00 	vldr	d7, [r3]
 800506e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005072:	4b70      	ldr	r3, [pc, #448]	; (8005234 <inicializarTrayectoria+0x5ec>)
 8005074:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8005078:	4b64      	ldr	r3, [pc, #400]	; (800520c <inicializarTrayectoria+0x5c4>)
 800507a:	ed93 7b00 	vldr	d7, [r3]
 800507e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005082:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8005086:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <inicializarTrayectoria+0x5e8>)
 8005088:	ed93 6b00 	vldr	d6, [r3]
 800508c:	4b62      	ldr	r3, [pc, #392]	; (8005218 <inicializarTrayectoria+0x5d0>)
 800508e:	ed93 7b00 	vldr	d7, [r3]
 8005092:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005096:	4b5d      	ldr	r3, [pc, #372]	; (800520c <inicializarTrayectoria+0x5c4>)
 8005098:	ed93 7b00 	vldr	d7, [r3]
 800509c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80050a0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80050a4:	eeb0 0b45 	vmov.f64	d0, d5
 80050a8:	f00c fdda 	bl	8011c60 <pow>
 80050ac:	eeb0 7b40 	vmov.f64	d7, d0
 80050b0:	ee28 6b07 	vmul.f64	d6, d8, d7
 80050b4:	4b5a      	ldr	r3, [pc, #360]	; (8005220 <inicializarTrayectoria+0x5d8>)
 80050b6:	ed93 7b00 	vldr	d7, [r3]
 80050ba:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 80050be:	4b5c      	ldr	r3, [pc, #368]	; (8005230 <inicializarTrayectoria+0x5e8>)
 80050c0:	ed93 5b00 	vldr	d5, [r3]
 80050c4:	4b54      	ldr	r3, [pc, #336]	; (8005218 <inicializarTrayectoria+0x5d0>)
 80050c6:	ed93 7b00 	vldr	d7, [r3]
 80050ca:	ee35 4b47 	vsub.f64	d4, d5, d7
 80050ce:	4b4f      	ldr	r3, [pc, #316]	; (800520c <inicializarTrayectoria+0x5c4>)
 80050d0:	ed93 7b00 	vldr	d7, [r3]
 80050d4:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80050d8:	4b4f      	ldr	r3, [pc, #316]	; (8005218 <inicializarTrayectoria+0x5d0>)
 80050da:	ed93 7b00 	vldr	d7, [r3]
 80050de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80050e2:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 80050e6:	4b54      	ldr	r3, [pc, #336]	; (8005238 <inicializarTrayectoria+0x5f0>)
 80050e8:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 80050ec:	4b47      	ldr	r3, [pc, #284]	; (800520c <inicializarTrayectoria+0x5c4>)
 80050ee:	ed93 7b00 	vldr	d7, [r3]
 80050f2:	eeb1 5b47 	vneg.f64	d5, d7
 80050f6:	ed97 6b00 	vldr	d6, [r7]
 80050fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050fe:	eeb0 6bc7 	vabs.f64	d6, d7
 8005102:	4b4c      	ldr	r3, [pc, #304]	; (8005234 <inicializarTrayectoria+0x5ec>)
 8005104:	ed93 7b00 	vldr	d7, [r3]
 8005108:	ee36 7b07 	vadd.f64	d7, d6, d7
 800510c:	4b4b      	ldr	r3, [pc, #300]	; (800523c <inicializarTrayectoria+0x5f4>)
 800510e:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 8005112:	4b47      	ldr	r3, [pc, #284]	; (8005230 <inicializarTrayectoria+0x5e8>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	4949      	ldr	r1, [pc, #292]	; (8005240 <inicializarTrayectoria+0x5f8>)
 800511a:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip2 = XiHip2;
 800511e:	4b46      	ldr	r3, [pc, #280]	; (8005238 <inicializarTrayectoria+0x5f0>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	4947      	ldr	r1, [pc, #284]	; (8005244 <inicializarTrayectoria+0x5fc>)
 8005126:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 800512a:	4b44      	ldr	r3, [pc, #272]	; (800523c <inicializarTrayectoria+0x5f4>)
 800512c:	ed93 6b00 	vldr	d6, [r3]
 8005130:	4b40      	ldr	r3, [pc, #256]	; (8005234 <inicializarTrayectoria+0x5ec>)
 8005132:	ed93 7b00 	vldr	d7, [r3]
 8005136:	ee36 6b47 	vsub.f64	d6, d6, d7
 800513a:	4b41      	ldr	r3, [pc, #260]	; (8005240 <inicializarTrayectoria+0x5f8>)
 800513c:	ed93 7b00 	vldr	d7, [r3]
 8005140:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005144:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <inicializarTrayectoria+0x5fc>)
 8005146:	ed93 7b00 	vldr	d7, [r3]
 800514a:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 800514e:	4b3b      	ldr	r3, [pc, #236]	; (800523c <inicializarTrayectoria+0x5f4>)
 8005150:	ed93 6b00 	vldr	d6, [r3]
 8005154:	4b37      	ldr	r3, [pc, #220]	; (8005234 <inicializarTrayectoria+0x5ec>)
 8005156:	ed93 7b00 	vldr	d7, [r3]
 800515a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800515e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005162:	eeb0 0b47 	vmov.f64	d0, d7
 8005166:	f00c fd7b 	bl	8011c60 <pow>
 800516a:	eeb0 6b40 	vmov.f64	d6, d0
 800516e:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <inicializarTrayectoria+0x5e0>)
 8005170:	ed93 7b00 	vldr	d7, [r3]
 8005174:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005178:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 800517c:	4b2f      	ldr	r3, [pc, #188]	; (800523c <inicializarTrayectoria+0x5f4>)
 800517e:	ed93 6b00 	vldr	d6, [r3]
 8005182:	4b2c      	ldr	r3, [pc, #176]	; (8005234 <inicializarTrayectoria+0x5ec>)
 8005184:	ed93 7b00 	vldr	d7, [r3]
 8005188:	ee36 7b47 	vsub.f64	d7, d6, d7
 800518c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005190:	eeb0 0b47 	vmov.f64	d0, d7
 8005194:	f00c fd64 	bl	8011c60 <pow>
 8005198:	eeb0 6b40 	vmov.f64	d6, d0
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <inicializarTrayectoria+0x5dc>)
 800519e:	ed93 7b00 	vldr	d7, [r3]
 80051a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051a6:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 80051aa:	4b27      	ldr	r3, [pc, #156]	; (8005248 <inicializarTrayectoria+0x600>)
 80051ac:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 80051b0:	4b26      	ldr	r3, [pc, #152]	; (800524c <inicializarTrayectoria+0x604>)
 80051b2:	ed93 7b00 	vldr	d7, [r3]
 80051b6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051ba:	eeb0 0b47 	vmov.f64	d0, d7
 80051be:	f00c fd4f 	bl	8011c60 <pow>
 80051c2:	eeb0 5b40 	vmov.f64	d5, d0
 80051c6:	ed97 7b00 	vldr	d7, [r7]
 80051ca:	ee37 6b07 	vadd.f64	d6, d7, d7
 80051ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051d6:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <inicializarTrayectoria+0x608>)
 80051d8:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <inicializarTrayectoria+0x608>)
 80051de:	ed93 7b00 	vldr	d7, [r3]
 80051e2:	eeb0 6bc7 	vabs.f64	d6, d7
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <inicializarTrayectoria+0x5e4>)
 80051e8:	ed93 5b00 	vldr	d5, [r3]
 80051ec:	ed97 7b06 	vldr	d7, [r7, #24]
 80051f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80051f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80051f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	dd5e      	ble.n	80052c0 <inicializarTrayectoria+0x678>
 8005202:	e027      	b.n	8005254 <inicializarTrayectoria+0x60c>
 8005204:	24000ab8 	.word	0x24000ab8
 8005208:	24000ab0 	.word	0x24000ab0
 800520c:	24000a90 	.word	0x24000a90
 8005210:	24000b58 	.word	0x24000b58
 8005214:	24000aa8 	.word	0x24000aa8
 8005218:	24000b48 	.word	0x24000b48
 800521c:	24000aa0 	.word	0x24000aa0
 8005220:	24000b20 	.word	0x24000b20
 8005224:	24000ad8 	.word	0x24000ad8
 8005228:	24000ad0 	.word	0x24000ad0
 800522c:	24000b40 	.word	0x24000b40
 8005230:	24000ba8 	.word	0x24000ba8
 8005234:	24000b60 	.word	0x24000b60
 8005238:	24000bb0 	.word	0x24000bb0
 800523c:	24000b68 	.word	0x24000b68
 8005240:	24000ac8 	.word	0x24000ac8
 8005244:	24000ac0 	.word	0x24000ac0
 8005248:	24000b28 	.word	0x24000b28
 800524c:	24000a98 	.word	0x24000a98
 8005250:	24000b98 	.word	0x24000b98
			if (fabs(Vm - Vf) != 0) {
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <inicializarTrayectoria+0x6e0>)
 8005256:	ed93 6b00 	vldr	d6, [r3]
 800525a:	ed97 7b06 	vldr	d7, [r7, #24]
 800525e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005262:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526a:	d029      	beq.n	80052c0 <inicializarTrayectoria+0x678>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 800526c:	4b2f      	ldr	r3, [pc, #188]	; (800532c <inicializarTrayectoria+0x6e4>)
 800526e:	ed93 6b00 	vldr	d6, [r3]
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <inicializarTrayectoria+0x6e4>)
 8005274:	ed93 7b00 	vldr	d7, [r3]
 8005278:	eeb0 7bc7 	vabs.f64	d7, d7
 800527c:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8005280:	4b29      	ldr	r3, [pc, #164]	; (8005328 <inicializarTrayectoria+0x6e0>)
 8005282:	ed93 6b00 	vldr	d6, [r3]
 8005286:	ed97 7b06 	vldr	d7, [r7, #24]
 800528a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800528e:	eeb0 6bc7 	vabs.f64	d6, d7
 8005292:	ed97 7b00 	vldr	d7, [r7]
 8005296:	eeb0 7bc7 	vabs.f64	d7, d7
 800529a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800529e:	eeb0 0b47 	vmov.f64	d0, d7
 80052a2:	f00c ff5d 	bl	8012160 <sqrt>
 80052a6:	eeb0 7b40 	vmov.f64	d7, d0
 80052aa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80052ae:	4b20      	ldr	r3, [pc, #128]	; (8005330 <inicializarTrayectoria+0x6e8>)
 80052b0:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 80052b4:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <inicializarTrayectoria+0x6e8>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	491c      	ldr	r1, [pc, #112]	; (800532c <inicializarTrayectoria+0x6e4>)
 80052bc:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 80052c0:	4b19      	ldr	r3, [pc, #100]	; (8005328 <inicializarTrayectoria+0x6e0>)
 80052c2:	ed93 6b00 	vldr	d6, [r3]
 80052c6:	ed97 7b06 	vldr	d7, [r7, #24]
 80052ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d6:	d139      	bne.n	800534c <inicializarTrayectoria+0x704>
			VfHip3 = Vf;
 80052d8:	4916      	ldr	r1, [pc, #88]	; (8005334 <inicializarTrayectoria+0x6ec>)
 80052da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052de:	e9c1 2300 	strd	r2, r3, [r1]
			XiHip3 = XfHip4;
 80052e2:	4915      	ldr	r1, [pc, #84]	; (8005338 <inicializarTrayectoria+0x6f0>)
 80052e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052e8:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 80052ec:	4b12      	ldr	r3, [pc, #72]	; (8005338 <inicializarTrayectoria+0x6f0>)
 80052ee:	ed93 6b00 	vldr	d6, [r3]
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <inicializarTrayectoria+0x6f4>)
 80052f4:	ed93 7b00 	vldr	d7, [r3]
 80052f8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <inicializarTrayectoria+0x6e0>)
 80052fe:	ed93 6b00 	vldr	d6, [r3]
 8005302:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005306:	eeb0 6bc7 	vabs.f64	d6, d7
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <inicializarTrayectoria+0x6f8>)
 800530c:	ed93 7b00 	vldr	d7, [r3]
 8005310:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <inicializarTrayectoria+0x6fc>)
 8005316:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <inicializarTrayectoria+0x6fc>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	4909      	ldr	r1, [pc, #36]	; (8005348 <inicializarTrayectoria+0x700>)
 8005322:	e9c1 2300 	strd	r2, r3, [r1]
 8005326:	e18b      	b.n	8005640 <inicializarTrayectoria+0x9f8>
 8005328:	24000b40 	.word	0x24000b40
 800532c:	24000a98 	.word	0x24000a98
 8005330:	24000bb8 	.word	0x24000bb8
 8005334:	24000b50 	.word	0x24000b50
 8005338:	24000b38 	.word	0x24000b38
 800533c:	24000b28 	.word	0x24000b28
 8005340:	24000b68 	.word	0x24000b68
 8005344:	24000b70 	.word	0x24000b70
 8005348:	24000b88 	.word	0x24000b88
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 800534c:	4bc7      	ldr	r3, [pc, #796]	; (800566c <inicializarTrayectoria+0xa24>)
 800534e:	ed93 7b00 	vldr	d7, [r3]
 8005352:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005356:	eeb0 0b47 	vmov.f64	d0, d7
 800535a:	f00c fc81 	bl	8011c60 <pow>
 800535e:	eeb0 5b40 	vmov.f64	d5, d0
 8005362:	ed97 7b00 	vldr	d7, [r7]
 8005366:	ee37 7b07 	vadd.f64	d7, d7, d7
 800536a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800536e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005372:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005376:	4bbe      	ldr	r3, [pc, #760]	; (8005670 <inicializarTrayectoria+0xa28>)
 8005378:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 800537c:	4bbb      	ldr	r3, [pc, #748]	; (800566c <inicializarTrayectoria+0xa24>)
 800537e:	ed93 7b00 	vldr	d7, [r3]
 8005382:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005386:	eeb0 0b47 	vmov.f64	d0, d7
 800538a:	f00c fc69 	bl	8011c60 <pow>
 800538e:	eeb0 8b40 	vmov.f64	d8, d0
 8005392:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005396:	ed97 0b00 	vldr	d0, [r7]
 800539a:	f00c fc61 	bl	8011c60 <pow>
 800539e:	eeb0 7b40 	vmov.f64	d7, d0
 80053a2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80053a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80053aa:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80053ae:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 80053b2:	4baf      	ldr	r3, [pc, #700]	; (8005670 <inicializarTrayectoria+0xa28>)
 80053b4:	ed93 4b00 	vldr	d4, [r3]
 80053b8:	4bad      	ldr	r3, [pc, #692]	; (8005670 <inicializarTrayectoria+0xa28>)
 80053ba:	ed93 7b00 	vldr	d7, [r3]
 80053be:	eeb0 5bc7 	vabs.f64	d5, d7
 80053c2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80053c6:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 80053ca:	4ba8      	ldr	r3, [pc, #672]	; (800566c <inicializarTrayectoria+0xa24>)
 80053cc:	ed93 4b00 	vldr	d4, [r3]
 80053d0:	ed97 5b00 	vldr	d5, [r7]
 80053d4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80053d8:	eeb0 5bc7 	vabs.f64	d5, d7
 80053dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80053e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80053e4:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 80053e8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80053ec:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 80053f0:	4ba0      	ldr	r3, [pc, #640]	; (8005674 <inicializarTrayectoria+0xa2c>)
 80053f2:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 80053f6:	4ba0      	ldr	r3, [pc, #640]	; (8005678 <inicializarTrayectoria+0xa30>)
 80053f8:	ed93 8b00 	vldr	d8, [r3]
 80053fc:	4b9b      	ldr	r3, [pc, #620]	; (800566c <inicializarTrayectoria+0xa24>)
 80053fe:	ed93 7b00 	vldr	d7, [r3]
 8005402:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005406:	eeb0 0b47 	vmov.f64	d0, d7
 800540a:	f00c fc29 	bl	8011c60 <pow>
 800540e:	eeb0 5b40 	vmov.f64	d5, d0
 8005412:	ed97 7b00 	vldr	d7, [r7]
 8005416:	ee37 6b07 	vadd.f64	d6, d7, d7
 800541a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800541e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005422:	4b96      	ldr	r3, [pc, #600]	; (800567c <inicializarTrayectoria+0xa34>)
 8005424:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 8005428:	4b92      	ldr	r3, [pc, #584]	; (8005674 <inicializarTrayectoria+0xa2c>)
 800542a:	ed93 8b00 	vldr	d8, [r3]
 800542e:	4b90      	ldr	r3, [pc, #576]	; (8005670 <inicializarTrayectoria+0xa28>)
 8005430:	ed93 5b00 	vldr	d5, [r3]
 8005434:	4b8e      	ldr	r3, [pc, #568]	; (8005670 <inicializarTrayectoria+0xa28>)
 8005436:	ed93 7b00 	vldr	d7, [r3]
 800543a:	eeb0 7bc7 	vabs.f64	d7, d7
 800543e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005442:	4b8a      	ldr	r3, [pc, #552]	; (800566c <inicializarTrayectoria+0xa24>)
 8005444:	ed93 7b00 	vldr	d7, [r3]
 8005448:	eeb0 5bc7 	vabs.f64	d5, d7
 800544c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005450:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8005454:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 8005458:	4b85      	ldr	r3, [pc, #532]	; (8005670 <inicializarTrayectoria+0xa28>)
 800545a:	ed93 6b00 	vldr	d6, [r3]
 800545e:	4b87      	ldr	r3, [pc, #540]	; (800567c <inicializarTrayectoria+0xa34>)
 8005460:	ed93 7b00 	vldr	d7, [r3]
 8005464:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005468:	4b80      	ldr	r3, [pc, #512]	; (800566c <inicializarTrayectoria+0xa24>)
 800546a:	ed93 7b00 	vldr	d7, [r3]
 800546e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005472:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005476:	eeb0 0b45 	vmov.f64	d0, d5
 800547a:	f00c fbf1 	bl	8011c60 <pow>
 800547e:	eeb0 7b40 	vmov.f64	d7, d0
 8005482:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 8005486:	4b7a      	ldr	r3, [pc, #488]	; (8005670 <inicializarTrayectoria+0xa28>)
 8005488:	ed93 5b00 	vldr	d5, [r3]
 800548c:	4b7b      	ldr	r3, [pc, #492]	; (800567c <inicializarTrayectoria+0xa34>)
 800548e:	ed93 7b00 	vldr	d7, [r3]
 8005492:	ee35 4b47 	vsub.f64	d4, d5, d7
 8005496:	4b75      	ldr	r3, [pc, #468]	; (800566c <inicializarTrayectoria+0xa24>)
 8005498:	ed93 7b00 	vldr	d7, [r3]
 800549c:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80054a0:	4b73      	ldr	r3, [pc, #460]	; (8005670 <inicializarTrayectoria+0xa28>)
 80054a2:	ed93 7b00 	vldr	d7, [r3]
 80054a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80054aa:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 80054ae:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 80054b2:	4b73      	ldr	r3, [pc, #460]	; (8005680 <inicializarTrayectoria+0xa38>)
 80054b4:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 80054b8:	4b6c      	ldr	r3, [pc, #432]	; (800566c <inicializarTrayectoria+0xa24>)
 80054ba:	ed93 5b00 	vldr	d5, [r3]
 80054be:	ed97 7b00 	vldr	d7, [r7]
 80054c2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054c6:	4b6c      	ldr	r3, [pc, #432]	; (8005678 <inicializarTrayectoria+0xa30>)
 80054c8:	ed93 7b00 	vldr	d7, [r3]
 80054cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80054d0:	4b6b      	ldr	r3, [pc, #428]	; (8005680 <inicializarTrayectoria+0xa38>)
 80054d2:	ed93 7b00 	vldr	d7, [r3]
 80054d6:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 80054da:	4b64      	ldr	r3, [pc, #400]	; (800566c <inicializarTrayectoria+0xa24>)
 80054dc:	ed93 7b00 	vldr	d7, [r3]
 80054e0:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80054e4:	eeb0 0b47 	vmov.f64	d0, d7
 80054e8:	f00c fbba 	bl	8011c60 <pow>
 80054ec:	eeb0 9b40 	vmov.f64	d9, d0
 80054f0:	ed97 7b00 	vldr	d7, [r7]
 80054f4:	eeb1 7b47 	vneg.f64	d7, d7
 80054f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054fc:	eeb0 0b47 	vmov.f64	d0, d7
 8005500:	f00c fbae 	bl	8011c60 <pow>
 8005504:	eeb0 7b40 	vmov.f64	d7, d0
 8005508:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800550c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005510:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8005514:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8005518:	4b5a      	ldr	r3, [pc, #360]	; (8005684 <inicializarTrayectoria+0xa3c>)
 800551a:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 800551e:	4b59      	ldr	r3, [pc, #356]	; (8005684 <inicializarTrayectoria+0xa3c>)
 8005520:	ed93 6b00 	vldr	d6, [r3]
 8005524:	4b58      	ldr	r3, [pc, #352]	; (8005688 <inicializarTrayectoria+0xa40>)
 8005526:	ed93 7b00 	vldr	d7, [r3]
 800552a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800552e:	4b52      	ldr	r3, [pc, #328]	; (8005678 <inicializarTrayectoria+0xa30>)
 8005530:	ed93 6b00 	vldr	d6, [r3]
 8005534:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005538:	eeb0 6bc7 	vabs.f64	d6, d7
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <inicializarTrayectoria+0xa44>)
 800553e:	ed93 7b00 	vldr	d7, [r3]
 8005542:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005546:	4b52      	ldr	r3, [pc, #328]	; (8005690 <inicializarTrayectoria+0xa48>)
 8005548:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 800554c:	ed97 7b00 	vldr	d7, [r7]
 8005550:	eeb1 6b47 	vneg.f64	d6, d7
 8005554:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005558:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800555c:	4b4d      	ldr	r3, [pc, #308]	; (8005694 <inicializarTrayectoria+0xa4c>)
 800555e:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 8005562:	494d      	ldr	r1, [pc, #308]	; (8005698 <inicializarTrayectoria+0xa50>)
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 8005570:	4b3e      	ldr	r3, [pc, #248]	; (800566c <inicializarTrayectoria+0xa24>)
 8005572:	ed93 7b00 	vldr	d7, [r3]
 8005576:	eeb1 5b47 	vneg.f64	d5, d7
 800557a:	ed97 7b00 	vldr	d7, [r7]
 800557e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005582:	4b43      	ldr	r3, [pc, #268]	; (8005690 <inicializarTrayectoria+0xa48>)
 8005584:	ed93 7b00 	vldr	d7, [r3]
 8005588:	ee36 7b07 	vadd.f64	d7, d6, d7
 800558c:	4b43      	ldr	r3, [pc, #268]	; (800569c <inicializarTrayectoria+0xa54>)
 800558e:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 8005592:	4b39      	ldr	r3, [pc, #228]	; (8005678 <inicializarTrayectoria+0xa30>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	4941      	ldr	r1, [pc, #260]	; (80056a0 <inicializarTrayectoria+0xa58>)
 800559a:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip3 = XiHip3;
 800559e:	4b39      	ldr	r3, [pc, #228]	; (8005684 <inicializarTrayectoria+0xa3c>)
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	493f      	ldr	r1, [pc, #252]	; (80056a4 <inicializarTrayectoria+0xa5c>)
 80055a6:	e9c1 2300 	strd	r2, r3, [r1]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 80055aa:	4b31      	ldr	r3, [pc, #196]	; (8005670 <inicializarTrayectoria+0xa28>)
 80055ac:	ed93 6b00 	vldr	d6, [r3]
 80055b0:	4b32      	ldr	r3, [pc, #200]	; (800567c <inicializarTrayectoria+0xa34>)
 80055b2:	ed93 7b00 	vldr	d7, [r3]
 80055b6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80055ba:	4b2c      	ldr	r3, [pc, #176]	; (800566c <inicializarTrayectoria+0xa24>)
 80055bc:	ed93 7b00 	vldr	d7, [r3]
 80055c0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <inicializarTrayectoria+0xa54>)
 80055c6:	ed93 7b00 	vldr	d7, [r3]
 80055ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055ce:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <inicializarTrayectoria+0xa60>)
 80055d0:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 80055d4:	ed97 6b00 	vldr	d6, [r7]
 80055d8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80055dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055e0:	4b32      	ldr	r3, [pc, #200]	; (80056ac <inicializarTrayectoria+0xa64>)
 80055e2:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 80055e6:	4b21      	ldr	r3, [pc, #132]	; (800566c <inicializarTrayectoria+0xa24>)
 80055e8:	ed93 6b00 	vldr	d6, [r3]
 80055ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80055f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <inicializarTrayectoria+0xa68>)
 80055f6:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 80055fa:	4b1c      	ldr	r3, [pc, #112]	; (800566c <inicializarTrayectoria+0xa24>)
 80055fc:	ed93 5b00 	vldr	d5, [r3]
 8005600:	ed97 6b00 	vldr	d6, [r7]
 8005604:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005608:	eeb0 6bc7 	vabs.f64	d6, d7
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <inicializarTrayectoria+0xa60>)
 800560e:	ed93 7b00 	vldr	d7, [r3]
 8005612:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005616:	4b27      	ldr	r3, [pc, #156]	; (80056b4 <inicializarTrayectoria+0xa6c>)
 8005618:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 800561c:	4b14      	ldr	r3, [pc, #80]	; (8005670 <inicializarTrayectoria+0xa28>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	4925      	ldr	r1, [pc, #148]	; (80056b8 <inicializarTrayectoria+0xa70>)
 8005624:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip4 = XiHip4;
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <inicializarTrayectoria+0xa2c>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	4923      	ldr	r1, [pc, #140]	; (80056bc <inicializarTrayectoria+0xa74>)
 8005630:	e9c1 2300 	strd	r2, r3, [r1]
			TiempoTotX = tfHip4;
 8005634:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <inicializarTrayectoria+0xa6c>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	4921      	ldr	r1, [pc, #132]	; (80056c0 <inicializarTrayectoria+0xa78>)
 800563c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 8005640:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8005644:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005648:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005650:	d553      	bpl.n	80056fa <inicializarTrayectoria+0xab2>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8005652:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <inicializarTrayectoria+0xa3c>)
 8005654:	ed93 6b00 	vldr	d6, [r3]
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <inicializarTrayectoria+0xa40>)
 800565a:	ed93 7b00 	vldr	d7, [r3]
 800565e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	d42d      	bmi.n	80056c4 <inicializarTrayectoria+0xa7c>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8005668:	e077      	b.n	800575a <inicializarTrayectoria+0xb12>
 800566a:	bf00      	nop
 800566c:	24000a98 	.word	0x24000a98
 8005670:	24000bc0 	.word	0x24000bc0
 8005674:	24000bc8 	.word	0x24000bc8
 8005678:	24000b40 	.word	0x24000b40
 800567c:	24000b50 	.word	0x24000b50
 8005680:	24000b30 	.word	0x24000b30
 8005684:	24000b38 	.word	0x24000b38
 8005688:	24000b28 	.word	0x24000b28
 800568c:	24000b68 	.word	0x24000b68
 8005690:	24000b70 	.word	0x24000b70
 8005694:	24000af8 	.word	0x24000af8
 8005698:	24000af0 	.word	0x24000af0
 800569c:	24000b78 	.word	0x24000b78
 80056a0:	24000ae8 	.word	0x24000ae8
 80056a4:	24000ae0 	.word	0x24000ae0
 80056a8:	24000b80 	.word	0x24000b80
 80056ac:	24000b18 	.word	0x24000b18
 80056b0:	24000b10 	.word	0x24000b10
 80056b4:	24000b90 	.word	0x24000b90
 80056b8:	24000b08 	.word	0x24000b08
 80056bc:	24000b00 	.word	0x24000b00
 80056c0:	24000b88 	.word	0x24000b88
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 80056c4:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <inicializarTrayectoria+0xb38>)
 80056c6:	ed93 6b00 	vldr	d6, [r3]
 80056ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80056ce:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005778 <inicializarTrayectoria+0xb30>
 80056d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80056d6:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <inicializarTrayectoria+0xb38>)
 80056d8:	ed93 3b00 	vldr	d3, [r3]
 80056dc:	4b28      	ldr	r3, [pc, #160]	; (8005780 <inicializarTrayectoria+0xb38>)
 80056de:	ed93 7b00 	vldr	d7, [r3]
 80056e2:	eeb0 4bc7 	vabs.f64	d4, d7
 80056e6:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80056ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80056ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056f2:	4b23      	ldr	r3, [pc, #140]	; (8005780 <inicializarTrayectoria+0xb38>)
 80056f4:	ed83 7b00 	vstr	d7, [r3]
 80056f8:	e025      	b.n	8005746 <inicializarTrayectoria+0xafe>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 80056fa:	4b22      	ldr	r3, [pc, #136]	; (8005784 <inicializarTrayectoria+0xb3c>)
 80056fc:	ed93 6b00 	vldr	d6, [r3]
 8005700:	4b21      	ldr	r3, [pc, #132]	; (8005788 <inicializarTrayectoria+0xb40>)
 8005702:	ed93 7b00 	vldr	d7, [r3]
 8005706:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	dc00      	bgt.n	8005712 <inicializarTrayectoria+0xaca>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8005710:	e023      	b.n	800575a <inicializarTrayectoria+0xb12>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 8005712:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <inicializarTrayectoria+0xb38>)
 8005714:	ed93 6b00 	vldr	d6, [r3]
 8005718:	ed97 7b04 	vldr	d7, [r7, #16]
 800571c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8005778 <inicializarTrayectoria+0xb30>
 8005720:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <inicializarTrayectoria+0xb38>)
 8005726:	ed93 3b00 	vldr	d3, [r3]
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <inicializarTrayectoria+0xb38>)
 800572c:	ed93 7b00 	vldr	d7, [r3]
 8005730:	eeb0 4bc7 	vabs.f64	d4, d7
 8005734:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005738:	ee25 7b07 	vmul.f64	d7, d5, d7
 800573c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <inicializarTrayectoria+0xb38>)
 8005742:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8005746:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800574a:	3301      	adds	r3, #1
 800574c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005754:	2b63      	cmp	r3, #99	; 0x63
 8005756:	f67f aaf6 	bls.w	8004d46 <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <inicializarTrayectoria+0xb44>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	490b      	ldr	r1, [pc, #44]	; (8005790 <inicializarTrayectoria+0xb48>)
 8005762:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005766:	bf00      	nop
 8005768:	3740      	adds	r7, #64	; 0x40
 800576a:	46bd      	mov	sp, r7
 800576c:	ecbd 8b04 	vpop	{d8-d9}
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	f3af 8000 	nop.w
 8005778:	47ae147b 	.word	0x47ae147b
 800577c:	3f847ae1 	.word	0x3f847ae1
 8005780:	24000b40 	.word	0x24000b40
 8005784:	24000b38 	.word	0x24000b38
 8005788:	24000b28 	.word	0x24000b28
 800578c:	24000b90 	.word	0x24000b90
 8005790:	24000488 	.word	0x24000488

08005794 <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 8005794:	b580      	push	{r7, lr}
 8005796:	ed2d 8b04 	vpush	{d8-d9}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 80057a2:	4bc3      	ldr	r3, [pc, #780]	; (8005ab0 <obtenerVelCurva+0x31c>)
 80057a4:	ed93 7b00 	vldr	d7, [r3]
 80057a8:	ed97 6b00 	vldr	d6, [r7]
 80057ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b4:	d866      	bhi.n	8005884 <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 80057b6:	4bbf      	ldr	r3, [pc, #764]	; (8005ab4 <obtenerVelCurva+0x320>)
 80057b8:	ed93 6b00 	vldr	d6, [r3]
 80057bc:	ed97 7b00 	vldr	d7, [r7]
 80057c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80057c4:	4bbc      	ldr	r3, [pc, #752]	; (8005ab8 <obtenerVelCurva+0x324>)
 80057c6:	ed93 7b00 	vldr	d7, [r3]
 80057ca:	ee36 8b07 	vadd.f64	d8, d6, d7
 80057ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057d2:	ed97 0b00 	vldr	d0, [r7]
 80057d6:	f00c fa43 	bl	8011c60 <pow>
 80057da:	eeb0 6b40 	vmov.f64	d6, d0
 80057de:	4bb7      	ldr	r3, [pc, #732]	; (8005abc <obtenerVelCurva+0x328>)
 80057e0:	ed93 7b00 	vldr	d7, [r3]
 80057e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80057e8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80057ec:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80057f0:	ed97 0b00 	vldr	d0, [r7]
 80057f4:	f00c fa34 	bl	8011c60 <pow>
 80057f8:	eeb0 6b40 	vmov.f64	d6, d0
 80057fc:	4bb0      	ldr	r3, [pc, #704]	; (8005ac0 <obtenerVelCurva+0x32c>)
 80057fe:	ed93 7b00 	vldr	d7, [r3]
 8005802:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005806:	ee38 7b07 	vadd.f64	d7, d8, d7
 800580a:	4bae      	ldr	r3, [pc, #696]	; (8005ac4 <obtenerVelCurva+0x330>)
 800580c:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 8005810:	4baa      	ldr	r3, [pc, #680]	; (8005abc <obtenerVelCurva+0x328>)
 8005812:	ed93 7b00 	vldr	d7, [r3]
 8005816:	ee37 6b07 	vadd.f64	d6, d7, d7
 800581a:	ed97 7b00 	vldr	d7, [r7]
 800581e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005822:	4ba4      	ldr	r3, [pc, #656]	; (8005ab4 <obtenerVelCurva+0x320>)
 8005824:	ed93 7b00 	vldr	d7, [r3]
 8005828:	ee36 8b07 	vadd.f64	d8, d6, d7
 800582c:	4ba4      	ldr	r3, [pc, #656]	; (8005ac0 <obtenerVelCurva+0x32c>)
 800582e:	ed93 7b00 	vldr	d7, [r3]
 8005832:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005836:	ee27 9b06 	vmul.f64	d9, d7, d6
 800583a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800583e:	ed97 0b00 	vldr	d0, [r7]
 8005842:	f00c fa0d 	bl	8011c60 <pow>
 8005846:	eeb0 7b40 	vmov.f64	d7, d0
 800584a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800584e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005852:	4b9d      	ldr	r3, [pc, #628]	; (8005ac8 <obtenerVelCurva+0x334>)
 8005854:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 8005858:	4b98      	ldr	r3, [pc, #608]	; (8005abc <obtenerVelCurva+0x328>)
 800585a:	ed93 7b00 	vldr	d7, [r3]
 800585e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005862:	4b97      	ldr	r3, [pc, #604]	; (8005ac0 <obtenerVelCurva+0x32c>)
 8005864:	ed93 7b00 	vldr	d7, [r3]
 8005868:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800586c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005870:	ed97 7b00 	vldr	d7, [r7]
 8005874:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005878:	ee36 7b07 	vadd.f64	d7, d6, d7
 800587c:	4b93      	ldr	r3, [pc, #588]	; (8005acc <obtenerVelCurva+0x338>)
 800587e:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 8005882:	e30e      	b.n	8005ea2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 8005884:	4b92      	ldr	r3, [pc, #584]	; (8005ad0 <obtenerVelCurva+0x33c>)
 8005886:	ed93 7b00 	vldr	d7, [r3]
 800588a:	ed97 6b00 	vldr	d6, [r7]
 800588e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005896:	d848      	bhi.n	800592a <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 8005898:	4b8e      	ldr	r3, [pc, #568]	; (8005ad4 <obtenerVelCurva+0x340>)
 800589a:	ed93 7b00 	vldr	d7, [r3]
 800589e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80058a2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80058a6:	4b82      	ldr	r3, [pc, #520]	; (8005ab0 <obtenerVelCurva+0x31c>)
 80058a8:	ed93 7b00 	vldr	d7, [r3]
 80058ac:	ed97 6b00 	vldr	d6, [r7]
 80058b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80058b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058b8:	eeb0 0b47 	vmov.f64	d0, d7
 80058bc:	f00c f9d0 	bl	8011c60 <pow>
 80058c0:	eeb0 7b40 	vmov.f64	d7, d0
 80058c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80058c8:	4b79      	ldr	r3, [pc, #484]	; (8005ab0 <obtenerVelCurva+0x31c>)
 80058ca:	ed93 7b00 	vldr	d7, [r3]
 80058ce:	ed97 5b00 	vldr	d5, [r7]
 80058d2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80058d6:	4b80      	ldr	r3, [pc, #512]	; (8005ad8 <obtenerVelCurva+0x344>)
 80058d8:	ed93 7b00 	vldr	d7, [r3]
 80058dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80058e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80058e4:	4b7d      	ldr	r3, [pc, #500]	; (8005adc <obtenerVelCurva+0x348>)
 80058e6:	ed93 7b00 	vldr	d7, [r3]
 80058ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058ee:	4b75      	ldr	r3, [pc, #468]	; (8005ac4 <obtenerVelCurva+0x330>)
 80058f0:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 80058f4:	4b6e      	ldr	r3, [pc, #440]	; (8005ab0 <obtenerVelCurva+0x31c>)
 80058f6:	ed93 7b00 	vldr	d7, [r3]
 80058fa:	ed97 6b00 	vldr	d6, [r7]
 80058fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005902:	4b74      	ldr	r3, [pc, #464]	; (8005ad4 <obtenerVelCurva+0x340>)
 8005904:	ed93 7b00 	vldr	d7, [r3]
 8005908:	ee26 6b07 	vmul.f64	d6, d6, d7
 800590c:	4b72      	ldr	r3, [pc, #456]	; (8005ad8 <obtenerVelCurva+0x344>)
 800590e:	ed93 7b00 	vldr	d7, [r3]
 8005912:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005916:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <obtenerVelCurva+0x334>)
 8005918:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 800591c:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <obtenerVelCurva+0x340>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	496a      	ldr	r1, [pc, #424]	; (8005acc <obtenerVelCurva+0x338>)
 8005924:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005928:	e2bb      	b.n	8005ea2 <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 800592a:	4b6d      	ldr	r3, [pc, #436]	; (8005ae0 <obtenerVelCurva+0x34c>)
 800592c:	ed93 7b00 	vldr	d7, [r3]
 8005930:	ed97 6b00 	vldr	d6, [r7]
 8005934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593c:	f200 808b 	bhi.w	8005a56 <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8005940:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <obtenerVelCurva+0x33c>)
 8005942:	ed93 7b00 	vldr	d7, [r3]
 8005946:	ed97 6b00 	vldr	d6, [r7]
 800594a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800594e:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <obtenerVelCurva+0x350>)
 8005950:	ed93 7b00 	vldr	d7, [r3]
 8005954:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005958:	4b63      	ldr	r3, [pc, #396]	; (8005ae8 <obtenerVelCurva+0x354>)
 800595a:	ed93 7b00 	vldr	d7, [r3]
 800595e:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005962:	4b5b      	ldr	r3, [pc, #364]	; (8005ad0 <obtenerVelCurva+0x33c>)
 8005964:	ed93 7b00 	vldr	d7, [r3]
 8005968:	ed97 6b00 	vldr	d6, [r7]
 800596c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005970:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005974:	eeb0 0b47 	vmov.f64	d0, d7
 8005978:	f00c f972 	bl	8011c60 <pow>
 800597c:	eeb0 6b40 	vmov.f64	d6, d0
 8005980:	4b5a      	ldr	r3, [pc, #360]	; (8005aec <obtenerVelCurva+0x358>)
 8005982:	ed93 7b00 	vldr	d7, [r3]
 8005986:	ee26 7b07 	vmul.f64	d7, d6, d7
 800598a:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 800598e:	4b50      	ldr	r3, [pc, #320]	; (8005ad0 <obtenerVelCurva+0x33c>)
 8005990:	ed93 7b00 	vldr	d7, [r3]
 8005994:	ed97 6b00 	vldr	d6, [r7]
 8005998:	ee36 7b47 	vsub.f64	d7, d6, d7
 800599c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80059a0:	eeb0 0b47 	vmov.f64	d0, d7
 80059a4:	f00c f95c 	bl	8011c60 <pow>
 80059a8:	eeb0 6b40 	vmov.f64	d6, d0
 80059ac:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <obtenerVelCurva+0x35c>)
 80059ae:	ed93 7b00 	vldr	d7, [r3]
 80059b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80059b6:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 80059ba:	4b42      	ldr	r3, [pc, #264]	; (8005ac4 <obtenerVelCurva+0x330>)
 80059bc:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 80059c0:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <obtenerVelCurva+0x358>)
 80059c2:	ed93 7b00 	vldr	d7, [r3]
 80059c6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059ca:	4b41      	ldr	r3, [pc, #260]	; (8005ad0 <obtenerVelCurva+0x33c>)
 80059cc:	ed93 7b00 	vldr	d7, [r3]
 80059d0:	ed97 5b00 	vldr	d5, [r7]
 80059d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80059d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80059dc:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <obtenerVelCurva+0x350>)
 80059de:	ed93 7b00 	vldr	d7, [r3]
 80059e2:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 80059e6:	4b42      	ldr	r3, [pc, #264]	; (8005af0 <obtenerVelCurva+0x35c>)
 80059e8:	ed93 7b00 	vldr	d7, [r3]
 80059ec:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80059f0:	ee27 9b06 	vmul.f64	d9, d7, d6
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <obtenerVelCurva+0x33c>)
 80059f6:	ed93 7b00 	vldr	d7, [r3]
 80059fa:	ed97 6b00 	vldr	d6, [r7]
 80059fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a06:	eeb0 0b47 	vmov.f64	d0, d7
 8005a0a:	f00c f929 	bl	8011c60 <pow>
 8005a0e:	eeb0 7b40 	vmov.f64	d7, d0
 8005a12:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005a16:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <obtenerVelCurva+0x334>)
 8005a1c:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 8005a20:	4b32      	ldr	r3, [pc, #200]	; (8005aec <obtenerVelCurva+0x358>)
 8005a22:	ed93 7b00 	vldr	d7, [r3]
 8005a26:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005a2a:	4b31      	ldr	r3, [pc, #196]	; (8005af0 <obtenerVelCurva+0x35c>)
 8005a2c:	ed93 7b00 	vldr	d7, [r3]
 8005a30:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005a34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a38:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <obtenerVelCurva+0x33c>)
 8005a3a:	ed93 7b00 	vldr	d7, [r3]
 8005a3e:	ed97 4b00 	vldr	d4, [r7]
 8005a42:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005a46:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <obtenerVelCurva+0x338>)
 8005a50:	ed83 7b00 	vstr	d7, [r3]
}
 8005a54:	e225      	b.n	8005ea2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 8005a56:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <obtenerVelCurva+0x360>)
 8005a58:	ed93 7b00 	vldr	d7, [r3]
 8005a5c:	ed97 6b00 	vldr	d6, [r7]
 8005a60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a68:	d84a      	bhi.n	8005b00 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <obtenerVelCurva+0x34c>)
 8005a6c:	ed93 7b00 	vldr	d7, [r3]
 8005a70:	ed97 6b00 	vldr	d6, [r7]
 8005a74:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a78:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <obtenerVelCurva+0x364>)
 8005a7a:	ed93 7b00 	vldr	d7, [r3]
 8005a7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a82:	4b1e      	ldr	r3, [pc, #120]	; (8005afc <obtenerVelCurva+0x368>)
 8005a84:	ed93 7b00 	vldr	d7, [r3]
 8005a88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <obtenerVelCurva+0x330>)
 8005a8e:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 8005a92:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <obtenerVelCurva+0x364>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	490b      	ldr	r1, [pc, #44]	; (8005ac8 <obtenerVelCurva+0x334>)
 8005a9a:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005a9e:	490b      	ldr	r1, [pc, #44]	; (8005acc <obtenerVelCurva+0x338>)
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005aac:	e1f9      	b.n	8005ea2 <obtenerVelCurva+0x70e>
 8005aae:	bf00      	nop
 8005ab0:	24000b58 	.word	0x24000b58
 8005ab4:	24000aa8 	.word	0x24000aa8
 8005ab8:	24000aa0 	.word	0x24000aa0
 8005abc:	24000ab0 	.word	0x24000ab0
 8005ac0:	24000ab8 	.word	0x24000ab8
 8005ac4:	240004c0 	.word	0x240004c0
 8005ac8:	240004c8 	.word	0x240004c8
 8005acc:	240004d0 	.word	0x240004d0
 8005ad0:	24000b60 	.word	0x24000b60
 8005ad4:	24000a90 	.word	0x24000a90
 8005ad8:	24000b48 	.word	0x24000b48
 8005adc:	24000b20 	.word	0x24000b20
 8005ae0:	24000b68 	.word	0x24000b68
 8005ae4:	24000ac8 	.word	0x24000ac8
 8005ae8:	24000ac0 	.word	0x24000ac0
 8005aec:	24000ad0 	.word	0x24000ad0
 8005af0:	24000ad8 	.word	0x24000ad8
 8005af4:	24000b70 	.word	0x24000b70
 8005af8:	24000b40 	.word	0x24000b40
 8005afc:	24000b28 	.word	0x24000b28
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 8005b00:	4bcb      	ldr	r3, [pc, #812]	; (8005e30 <obtenerVelCurva+0x69c>)
 8005b02:	ed93 7b00 	vldr	d7, [r3]
 8005b06:	ed97 6b00 	vldr	d6, [r7]
 8005b0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b12:	f200 808b 	bhi.w	8005c2c <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005b16:	4bc7      	ldr	r3, [pc, #796]	; (8005e34 <obtenerVelCurva+0x6a0>)
 8005b18:	ed93 7b00 	vldr	d7, [r3]
 8005b1c:	ed97 6b00 	vldr	d6, [r7]
 8005b20:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b24:	4bc4      	ldr	r3, [pc, #784]	; (8005e38 <obtenerVelCurva+0x6a4>)
 8005b26:	ed93 7b00 	vldr	d7, [r3]
 8005b2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b2e:	4bc3      	ldr	r3, [pc, #780]	; (8005e3c <obtenerVelCurva+0x6a8>)
 8005b30:	ed93 7b00 	vldr	d7, [r3]
 8005b34:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005b38:	4bbe      	ldr	r3, [pc, #760]	; (8005e34 <obtenerVelCurva+0x6a0>)
 8005b3a:	ed93 7b00 	vldr	d7, [r3]
 8005b3e:	ed97 6b00 	vldr	d6, [r7]
 8005b42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b46:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b4a:	eeb0 0b47 	vmov.f64	d0, d7
 8005b4e:	f00c f887 	bl	8011c60 <pow>
 8005b52:	eeb0 6b40 	vmov.f64	d6, d0
 8005b56:	4bba      	ldr	r3, [pc, #744]	; (8005e40 <obtenerVelCurva+0x6ac>)
 8005b58:	ed93 7b00 	vldr	d7, [r3]
 8005b5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b60:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 8005b64:	4bb3      	ldr	r3, [pc, #716]	; (8005e34 <obtenerVelCurva+0x6a0>)
 8005b66:	ed93 7b00 	vldr	d7, [r3]
 8005b6a:	ed97 6b00 	vldr	d6, [r7]
 8005b6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b72:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005b76:	eeb0 0b47 	vmov.f64	d0, d7
 8005b7a:	f00c f871 	bl	8011c60 <pow>
 8005b7e:	eeb0 6b40 	vmov.f64	d6, d0
 8005b82:	4bb0      	ldr	r3, [pc, #704]	; (8005e44 <obtenerVelCurva+0x6b0>)
 8005b84:	ed93 7b00 	vldr	d7, [r3]
 8005b88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b8c:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005b90:	4bad      	ldr	r3, [pc, #692]	; (8005e48 <obtenerVelCurva+0x6b4>)
 8005b92:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005b96:	4baa      	ldr	r3, [pc, #680]	; (8005e40 <obtenerVelCurva+0x6ac>)
 8005b98:	ed93 7b00 	vldr	d7, [r3]
 8005b9c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005ba0:	4ba4      	ldr	r3, [pc, #656]	; (8005e34 <obtenerVelCurva+0x6a0>)
 8005ba2:	ed93 7b00 	vldr	d7, [r3]
 8005ba6:	ed97 5b00 	vldr	d5, [r7]
 8005baa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005bae:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005bb2:	4ba1      	ldr	r3, [pc, #644]	; (8005e38 <obtenerVelCurva+0x6a4>)
 8005bb4:	ed93 7b00 	vldr	d7, [r3]
 8005bb8:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 8005bbc:	4ba1      	ldr	r3, [pc, #644]	; (8005e44 <obtenerVelCurva+0x6b0>)
 8005bbe:	ed93 7b00 	vldr	d7, [r3]
 8005bc2:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005bc6:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005bca:	4b9a      	ldr	r3, [pc, #616]	; (8005e34 <obtenerVelCurva+0x6a0>)
 8005bcc:	ed93 7b00 	vldr	d7, [r3]
 8005bd0:	ed97 6b00 	vldr	d6, [r7]
 8005bd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005bd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bdc:	eeb0 0b47 	vmov.f64	d0, d7
 8005be0:	f00c f83e 	bl	8011c60 <pow>
 8005be4:	eeb0 7b40 	vmov.f64	d7, d0
 8005be8:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005bec:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005bf0:	4b96      	ldr	r3, [pc, #600]	; (8005e4c <obtenerVelCurva+0x6b8>)
 8005bf2:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 8005bf6:	4b92      	ldr	r3, [pc, #584]	; (8005e40 <obtenerVelCurva+0x6ac>)
 8005bf8:	ed93 7b00 	vldr	d7, [r3]
 8005bfc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005c00:	4b90      	ldr	r3, [pc, #576]	; (8005e44 <obtenerVelCurva+0x6b0>)
 8005c02:	ed93 7b00 	vldr	d7, [r3]
 8005c06:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005c0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005c0e:	4b89      	ldr	r3, [pc, #548]	; (8005e34 <obtenerVelCurva+0x6a0>)
 8005c10:	ed93 7b00 	vldr	d7, [r3]
 8005c14:	ed97 4b00 	vldr	d4, [r7]
 8005c18:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005c1c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005c20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c24:	4b8a      	ldr	r3, [pc, #552]	; (8005e50 <obtenerVelCurva+0x6bc>)
 8005c26:	ed83 7b00 	vstr	d7, [r3]
}
 8005c2a:	e13a      	b.n	8005ea2 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 8005c2c:	4b89      	ldr	r3, [pc, #548]	; (8005e54 <obtenerVelCurva+0x6c0>)
 8005c2e:	ed93 7b00 	vldr	d7, [r3]
 8005c32:	ed97 6b00 	vldr	d6, [r7]
 8005c36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3e:	d848      	bhi.n	8005cd2 <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 8005c40:	4b85      	ldr	r3, [pc, #532]	; (8005e58 <obtenerVelCurva+0x6c4>)
 8005c42:	ed93 7b00 	vldr	d7, [r3]
 8005c46:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005c4a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8005c4e:	4b78      	ldr	r3, [pc, #480]	; (8005e30 <obtenerVelCurva+0x69c>)
 8005c50:	ed93 7b00 	vldr	d7, [r3]
 8005c54:	ed97 6b00 	vldr	d6, [r7]
 8005c58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c5c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c60:	eeb0 0b47 	vmov.f64	d0, d7
 8005c64:	f00b fffc 	bl	8011c60 <pow>
 8005c68:	eeb0 7b40 	vmov.f64	d7, d0
 8005c6c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8005c70:	4b6f      	ldr	r3, [pc, #444]	; (8005e30 <obtenerVelCurva+0x69c>)
 8005c72:	ed93 7b00 	vldr	d7, [r3]
 8005c76:	ed97 5b00 	vldr	d5, [r7]
 8005c7a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005c7e:	4b77      	ldr	r3, [pc, #476]	; (8005e5c <obtenerVelCurva+0x6c8>)
 8005c80:	ed93 7b00 	vldr	d7, [r3]
 8005c84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005c88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c8c:	4b74      	ldr	r3, [pc, #464]	; (8005e60 <obtenerVelCurva+0x6cc>)
 8005c8e:	ed93 7b00 	vldr	d7, [r3]
 8005c92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c96:	4b6c      	ldr	r3, [pc, #432]	; (8005e48 <obtenerVelCurva+0x6b4>)
 8005c98:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 8005c9c:	4b64      	ldr	r3, [pc, #400]	; (8005e30 <obtenerVelCurva+0x69c>)
 8005c9e:	ed93 7b00 	vldr	d7, [r3]
 8005ca2:	ed97 6b00 	vldr	d6, [r7]
 8005ca6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005caa:	4b6b      	ldr	r3, [pc, #428]	; (8005e58 <obtenerVelCurva+0x6c4>)
 8005cac:	ed93 7b00 	vldr	d7, [r3]
 8005cb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005cb4:	4b69      	ldr	r3, [pc, #420]	; (8005e5c <obtenerVelCurva+0x6c8>)
 8005cb6:	ed93 7b00 	vldr	d7, [r3]
 8005cba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cbe:	4b63      	ldr	r3, [pc, #396]	; (8005e4c <obtenerVelCurva+0x6b8>)
 8005cc0:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 8005cc4:	4b64      	ldr	r3, [pc, #400]	; (8005e58 <obtenerVelCurva+0x6c4>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	4961      	ldr	r1, [pc, #388]	; (8005e50 <obtenerVelCurva+0x6bc>)
 8005ccc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005cd0:	e0e7      	b.n	8005ea2 <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 8005cd2:	4b64      	ldr	r3, [pc, #400]	; (8005e64 <obtenerVelCurva+0x6d0>)
 8005cd4:	ed93 7b00 	vldr	d7, [r3]
 8005cd8:	ed97 6b00 	vldr	d6, [r7]
 8005cdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	f200 808b 	bhi.w	8005dfe <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005ce8:	4b5a      	ldr	r3, [pc, #360]	; (8005e54 <obtenerVelCurva+0x6c0>)
 8005cea:	ed93 7b00 	vldr	d7, [r3]
 8005cee:	ed97 6b00 	vldr	d6, [r7]
 8005cf2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005cf6:	4b5c      	ldr	r3, [pc, #368]	; (8005e68 <obtenerVelCurva+0x6d4>)
 8005cf8:	ed93 7b00 	vldr	d7, [r3]
 8005cfc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d00:	4b5a      	ldr	r3, [pc, #360]	; (8005e6c <obtenerVelCurva+0x6d8>)
 8005d02:	ed93 7b00 	vldr	d7, [r3]
 8005d06:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005d0a:	4b52      	ldr	r3, [pc, #328]	; (8005e54 <obtenerVelCurva+0x6c0>)
 8005d0c:	ed93 7b00 	vldr	d7, [r3]
 8005d10:	ed97 6b00 	vldr	d6, [r7]
 8005d14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8005d20:	f00b ff9e 	bl	8011c60 <pow>
 8005d24:	eeb0 6b40 	vmov.f64	d6, d0
 8005d28:	4b51      	ldr	r3, [pc, #324]	; (8005e70 <obtenerVelCurva+0x6dc>)
 8005d2a:	ed93 7b00 	vldr	d7, [r3]
 8005d2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d32:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8005d36:	4b47      	ldr	r3, [pc, #284]	; (8005e54 <obtenerVelCurva+0x6c0>)
 8005d38:	ed93 7b00 	vldr	d7, [r3]
 8005d3c:	ed97 6b00 	vldr	d6, [r7]
 8005d40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d44:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005d48:	eeb0 0b47 	vmov.f64	d0, d7
 8005d4c:	f00b ff88 	bl	8011c60 <pow>
 8005d50:	eeb0 6b40 	vmov.f64	d6, d0
 8005d54:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <obtenerVelCurva+0x6e0>)
 8005d56:	ed93 7b00 	vldr	d7, [r3]
 8005d5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d5e:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005d62:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <obtenerVelCurva+0x6b4>)
 8005d64:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005d68:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <obtenerVelCurva+0x6dc>)
 8005d6a:	ed93 7b00 	vldr	d7, [r3]
 8005d6e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d72:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <obtenerVelCurva+0x6c0>)
 8005d74:	ed93 7b00 	vldr	d7, [r3]
 8005d78:	ed97 5b00 	vldr	d5, [r7]
 8005d7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005d80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d84:	4b38      	ldr	r3, [pc, #224]	; (8005e68 <obtenerVelCurva+0x6d4>)
 8005d86:	ed93 7b00 	vldr	d7, [r3]
 8005d8a:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 8005d8e:	4b39      	ldr	r3, [pc, #228]	; (8005e74 <obtenerVelCurva+0x6e0>)
 8005d90:	ed93 7b00 	vldr	d7, [r3]
 8005d94:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005d98:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <obtenerVelCurva+0x6c0>)
 8005d9e:	ed93 7b00 	vldr	d7, [r3]
 8005da2:	ed97 6b00 	vldr	d6, [r7]
 8005da6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005daa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005dae:	eeb0 0b47 	vmov.f64	d0, d7
 8005db2:	f00b ff55 	bl	8011c60 <pow>
 8005db6:	eeb0 7b40 	vmov.f64	d7, d0
 8005dba:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005dbe:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005dc2:	4b22      	ldr	r3, [pc, #136]	; (8005e4c <obtenerVelCurva+0x6b8>)
 8005dc4:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <obtenerVelCurva+0x6dc>)
 8005dca:	ed93 7b00 	vldr	d7, [r3]
 8005dce:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005dd2:	4b28      	ldr	r3, [pc, #160]	; (8005e74 <obtenerVelCurva+0x6e0>)
 8005dd4:	ed93 7b00 	vldr	d7, [r3]
 8005dd8:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005ddc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005de0:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <obtenerVelCurva+0x6c0>)
 8005de2:	ed93 7b00 	vldr	d7, [r3]
 8005de6:	ed97 4b00 	vldr	d4, [r7]
 8005dea:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005dee:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005df2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <obtenerVelCurva+0x6bc>)
 8005df8:	ed83 7b00 	vstr	d7, [r3]
}
 8005dfc:	e051      	b.n	8005ea2 <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 8005dfe:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <obtenerVelCurva+0x6d0>)
 8005e00:	ed93 7b00 	vldr	d7, [r3]
 8005e04:	ed97 6b00 	vldr	d6, [r7]
 8005e08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e10:	dd32      	ble.n	8005e78 <obtenerVelCurva+0x6e4>
		DX = 0;
 8005e12:	490e      	ldr	r1, [pc, #56]	; (8005e4c <obtenerVelCurva+0x6b8>)
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005e20:	490b      	ldr	r1, [pc, #44]	; (8005e50 <obtenerVelCurva+0x6bc>)
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005e2e:	e038      	b.n	8005ea2 <obtenerVelCurva+0x70e>
 8005e30:	24000b78 	.word	0x24000b78
 8005e34:	24000b70 	.word	0x24000b70
 8005e38:	24000ae8 	.word	0x24000ae8
 8005e3c:	24000ae0 	.word	0x24000ae0
 8005e40:	24000af0 	.word	0x24000af0
 8005e44:	24000af8 	.word	0x24000af8
 8005e48:	240004c0 	.word	0x240004c0
 8005e4c:	240004c8 	.word	0x240004c8
 8005e50:	240004d0 	.word	0x240004d0
 8005e54:	24000b80 	.word	0x24000b80
 8005e58:	24000a98 	.word	0x24000a98
 8005e5c:	24000b50 	.word	0x24000b50
 8005e60:	24000b30 	.word	0x24000b30
 8005e64:	24000b88 	.word	0x24000b88
 8005e68:	24000b08 	.word	0x24000b08
 8005e6c:	24000b00 	.word	0x24000b00
 8005e70:	24000b10 	.word	0x24000b10
 8005e74:	24000b18 	.word	0x24000b18
		X = 0;
 8005e78:	490d      	ldr	r1, [pc, #52]	; (8005eb0 <obtenerVelCurva+0x71c>)
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9c1 2300 	strd	r2, r3, [r1]
		DX = 0;
 8005e86:	490b      	ldr	r1, [pc, #44]	; (8005eb4 <obtenerVelCurva+0x720>)
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005e94:	4908      	ldr	r1, [pc, #32]	; (8005eb8 <obtenerVelCurva+0x724>)
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	ecbd 8b04 	vpop	{d8-d9}
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	240004c0 	.word	0x240004c0
 8005eb4:	240004c8 	.word	0x240004c8
 8005eb8:	240004d0 	.word	0x240004d0
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <jacobianoInverso>:



void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b0ad      	sub	sp, #180	; 0xb4
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8005eca:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8005ece:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8005ed2:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8005ed6:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8005eda:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8005ede:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005ee2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005ee6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005eea:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8005eee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005ef2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8005ef6:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005efa:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8006208 <jacobianoInverso+0x348>
 8005efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f02:	4bc9      	ldr	r3, [pc, #804]	; (8006228 <jacobianoInverso+0x368>)
 8005f04:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8005f08:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f0c:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8006210 <jacobianoInverso+0x350>
 8005f10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f14:	4bc4      	ldr	r3, [pc, #784]	; (8006228 <jacobianoInverso+0x368>)
 8005f16:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8005f1a:	49c3      	ldr	r1, [pc, #780]	; (8006228 <jacobianoInverso+0x368>)
 8005f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f20:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E2[0] = Pxaux + 0.060621778264911;
 8005f24:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005f28:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8006218 <jacobianoInverso+0x358>
 8005f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f30:	4bbe      	ldr	r3, [pc, #760]	; (800622c <jacobianoInverso+0x36c>)
 8005f32:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8005f36:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f3a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8006220 <jacobianoInverso+0x360>
 8005f3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f42:	4bba      	ldr	r3, [pc, #744]	; (800622c <jacobianoInverso+0x36c>)
 8005f44:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8005f48:	49b8      	ldr	r1, [pc, #736]	; (800622c <jacobianoInverso+0x36c>)
 8005f4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E3[0] = Pxaux - 0.060621778264911;
 8005f52:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005f56:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8006218 <jacobianoInverso+0x358>
 8005f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f5e:	4bb4      	ldr	r3, [pc, #720]	; (8006230 <jacobianoInverso+0x370>)
 8005f60:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8005f64:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f68:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8006220 <jacobianoInverso+0x360>
 8005f6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f70:	4baf      	ldr	r3, [pc, #700]	; (8006230 <jacobianoInverso+0x370>)
 8005f72:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8005f76:	49ae      	ldr	r1, [pc, #696]	; (8006230 <jacobianoInverso+0x370>)
 8005f78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f7c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8005f80:	4bac      	ldr	r3, [pc, #688]	; (8006234 <jacobianoInverso+0x374>)
 8005f82:	ed93 6b00 	vldr	d6, [r3]
 8005f86:	4bac      	ldr	r3, [pc, #688]	; (8006238 <jacobianoInverso+0x378>)
 8005f88:	ed93 7b00 	vldr	d7, [r3]
 8005f8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f90:	4baa      	ldr	r3, [pc, #680]	; (800623c <jacobianoInverso+0x37c>)
 8005f92:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8005f96:	4baa      	ldr	r3, [pc, #680]	; (8006240 <jacobianoInverso+0x380>)
 8005f98:	ed93 6b00 	vldr	d6, [r3]
 8005f9c:	4ba6      	ldr	r3, [pc, #664]	; (8006238 <jacobianoInverso+0x378>)
 8005f9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005fa2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fa6:	4ba5      	ldr	r3, [pc, #660]	; (800623c <jacobianoInverso+0x37c>)
 8005fa8:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8005fac:	4ba5      	ldr	r3, [pc, #660]	; (8006244 <jacobianoInverso+0x384>)
 8005fae:	ed93 6b00 	vldr	d6, [r3]
 8005fb2:	4ba1      	ldr	r3, [pc, #644]	; (8006238 <jacobianoInverso+0x378>)
 8005fb4:	ed93 7b04 	vldr	d7, [r3, #16]
 8005fb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fbc:	4b9f      	ldr	r3, [pc, #636]	; (800623c <jacobianoInverso+0x37c>)
 8005fbe:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8005fc2:	4ba1      	ldr	r3, [pc, #644]	; (8006248 <jacobianoInverso+0x388>)
 8005fc4:	ed93 6b00 	vldr	d6, [r3]
 8005fc8:	4ba0      	ldr	r3, [pc, #640]	; (800624c <jacobianoInverso+0x38c>)
 8005fca:	ed93 7b00 	vldr	d7, [r3]
 8005fce:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fd2:	4b9a      	ldr	r3, [pc, #616]	; (800623c <jacobianoInverso+0x37c>)
 8005fd4:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8005fd8:	4b9d      	ldr	r3, [pc, #628]	; (8006250 <jacobianoInverso+0x390>)
 8005fda:	ed93 6b00 	vldr	d6, [r3]
 8005fde:	4b9b      	ldr	r3, [pc, #620]	; (800624c <jacobianoInverso+0x38c>)
 8005fe0:	ed93 7b02 	vldr	d7, [r3, #8]
 8005fe4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fe8:	4b94      	ldr	r3, [pc, #592]	; (800623c <jacobianoInverso+0x37c>)
 8005fea:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8005fee:	4b99      	ldr	r3, [pc, #612]	; (8006254 <jacobianoInverso+0x394>)
 8005ff0:	ed93 6b00 	vldr	d6, [r3]
 8005ff4:	4b95      	ldr	r3, [pc, #596]	; (800624c <jacobianoInverso+0x38c>)
 8005ff6:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ffa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ffe:	4b8f      	ldr	r3, [pc, #572]	; (800623c <jacobianoInverso+0x37c>)
 8006000:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8006004:	4b94      	ldr	r3, [pc, #592]	; (8006258 <jacobianoInverso+0x398>)
 8006006:	ed93 6b00 	vldr	d6, [r3]
 800600a:	4b94      	ldr	r3, [pc, #592]	; (800625c <jacobianoInverso+0x39c>)
 800600c:	ed93 7b00 	vldr	d7, [r3]
 8006010:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006014:	4b89      	ldr	r3, [pc, #548]	; (800623c <jacobianoInverso+0x37c>)
 8006016:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 800601a:	4b91      	ldr	r3, [pc, #580]	; (8006260 <jacobianoInverso+0x3a0>)
 800601c:	ed93 6b00 	vldr	d6, [r3]
 8006020:	4b8e      	ldr	r3, [pc, #568]	; (800625c <jacobianoInverso+0x39c>)
 8006022:	ed93 7b02 	vldr	d7, [r3, #8]
 8006026:	ee36 7b47 	vsub.f64	d7, d6, d7
 800602a:	4b84      	ldr	r3, [pc, #528]	; (800623c <jacobianoInverso+0x37c>)
 800602c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8006030:	4b8c      	ldr	r3, [pc, #560]	; (8006264 <jacobianoInverso+0x3a4>)
 8006032:	ed93 6b00 	vldr	d6, [r3]
 8006036:	4b89      	ldr	r3, [pc, #548]	; (800625c <jacobianoInverso+0x39c>)
 8006038:	ed93 7b04 	vldr	d7, [r3, #16]
 800603c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006040:	4b7e      	ldr	r3, [pc, #504]	; (800623c <jacobianoInverso+0x37c>)
 8006042:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 8006046:	4b78      	ldr	r3, [pc, #480]	; (8006228 <jacobianoInverso+0x368>)
 8006048:	ed93 6b00 	vldr	d6, [r3]
 800604c:	4b79      	ldr	r3, [pc, #484]	; (8006234 <jacobianoInverso+0x374>)
 800604e:	ed93 7b00 	vldr	d7, [r3]
 8006052:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006056:	4b84      	ldr	r3, [pc, #528]	; (8006268 <jacobianoInverso+0x3a8>)
 8006058:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 800605c:	4b72      	ldr	r3, [pc, #456]	; (8006228 <jacobianoInverso+0x368>)
 800605e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006062:	4b77      	ldr	r3, [pc, #476]	; (8006240 <jacobianoInverso+0x380>)
 8006064:	ed93 7b00 	vldr	d7, [r3]
 8006068:	ee36 7b47 	vsub.f64	d7, d6, d7
 800606c:	4b7e      	ldr	r3, [pc, #504]	; (8006268 <jacobianoInverso+0x3a8>)
 800606e:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 8006072:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <jacobianoInverso+0x368>)
 8006074:	ed93 6b04 	vldr	d6, [r3, #16]
 8006078:	4b72      	ldr	r3, [pc, #456]	; (8006244 <jacobianoInverso+0x384>)
 800607a:	ed93 7b00 	vldr	d7, [r3]
 800607e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006082:	4b79      	ldr	r3, [pc, #484]	; (8006268 <jacobianoInverso+0x3a8>)
 8006084:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8006088:	4b68      	ldr	r3, [pc, #416]	; (800622c <jacobianoInverso+0x36c>)
 800608a:	ed93 6b00 	vldr	d6, [r3]
 800608e:	4b6e      	ldr	r3, [pc, #440]	; (8006248 <jacobianoInverso+0x388>)
 8006090:	ed93 7b00 	vldr	d7, [r3]
 8006094:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006098:	4b73      	ldr	r3, [pc, #460]	; (8006268 <jacobianoInverso+0x3a8>)
 800609a:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 800609e:	4b63      	ldr	r3, [pc, #396]	; (800622c <jacobianoInverso+0x36c>)
 80060a0:	ed93 6b02 	vldr	d6, [r3, #8]
 80060a4:	4b6a      	ldr	r3, [pc, #424]	; (8006250 <jacobianoInverso+0x390>)
 80060a6:	ed93 7b00 	vldr	d7, [r3]
 80060aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060ae:	4b6e      	ldr	r3, [pc, #440]	; (8006268 <jacobianoInverso+0x3a8>)
 80060b0:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 80060b4:	4b5d      	ldr	r3, [pc, #372]	; (800622c <jacobianoInverso+0x36c>)
 80060b6:	ed93 6b04 	vldr	d6, [r3, #16]
 80060ba:	4b66      	ldr	r3, [pc, #408]	; (8006254 <jacobianoInverso+0x394>)
 80060bc:	ed93 7b00 	vldr	d7, [r3]
 80060c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060c4:	4b68      	ldr	r3, [pc, #416]	; (8006268 <jacobianoInverso+0x3a8>)
 80060c6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 80060ca:	4b59      	ldr	r3, [pc, #356]	; (8006230 <jacobianoInverso+0x370>)
 80060cc:	ed93 6b00 	vldr	d6, [r3]
 80060d0:	4b61      	ldr	r3, [pc, #388]	; (8006258 <jacobianoInverso+0x398>)
 80060d2:	ed93 7b00 	vldr	d7, [r3]
 80060d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060da:	4b63      	ldr	r3, [pc, #396]	; (8006268 <jacobianoInverso+0x3a8>)
 80060dc:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 80060e0:	4b53      	ldr	r3, [pc, #332]	; (8006230 <jacobianoInverso+0x370>)
 80060e2:	ed93 6b02 	vldr	d6, [r3, #8]
 80060e6:	4b5e      	ldr	r3, [pc, #376]	; (8006260 <jacobianoInverso+0x3a0>)
 80060e8:	ed93 7b00 	vldr	d7, [r3]
 80060ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060f0:	4b5d      	ldr	r3, [pc, #372]	; (8006268 <jacobianoInverso+0x3a8>)
 80060f2:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 80060f6:	4b4e      	ldr	r3, [pc, #312]	; (8006230 <jacobianoInverso+0x370>)
 80060f8:	ed93 6b04 	vldr	d6, [r3, #16]
 80060fc:	4b59      	ldr	r3, [pc, #356]	; (8006264 <jacobianoInverso+0x3a4>)
 80060fe:	ed93 7b00 	vldr	d7, [r3]
 8006102:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006106:	4b58      	ldr	r3, [pc, #352]	; (8006268 <jacobianoInverso+0x3a8>)
 8006108:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 800610c:	4c57      	ldr	r4, [pc, #348]	; (800626c <jacobianoInverso+0x3ac>)
 800610e:	463b      	mov	r3, r7
 8006110:	4955      	ldr	r1, [pc, #340]	; (8006268 <jacobianoInverso+0x3a8>)
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd fcaa 	bl	8003a6c <transpuesta>
 8006118:	4620      	mov	r0, r4
 800611a:	463b      	mov	r3, r7
 800611c:	2248      	movs	r2, #72	; 0x48
 800611e:	4619      	mov	r1, r3
 8006120:	f008 fefc 	bl	800ef1c <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8006124:	4b52      	ldr	r3, [pc, #328]	; (8006270 <jacobianoInverso+0x3b0>)
 8006126:	ed93 6b02 	vldr	d6, [r3, #8]
 800612a:	4b44      	ldr	r3, [pc, #272]	; (800623c <jacobianoInverso+0x37c>)
 800612c:	ed93 7b04 	vldr	d7, [r3, #16]
 8006130:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006134:	4b4e      	ldr	r3, [pc, #312]	; (8006270 <jacobianoInverso+0x3b0>)
 8006136:	ed93 5b04 	vldr	d5, [r3, #16]
 800613a:	4b40      	ldr	r3, [pc, #256]	; (800623c <jacobianoInverso+0x37c>)
 800613c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006140:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006144:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006148:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <jacobianoInverso+0x3b4>)
 800614a:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 800614e:	4b48      	ldr	r3, [pc, #288]	; (8006270 <jacobianoInverso+0x3b0>)
 8006150:	ed93 6b04 	vldr	d6, [r3, #16]
 8006154:	4b39      	ldr	r3, [pc, #228]	; (800623c <jacobianoInverso+0x37c>)
 8006156:	ed93 7b00 	vldr	d7, [r3]
 800615a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800615e:	4b44      	ldr	r3, [pc, #272]	; (8006270 <jacobianoInverso+0x3b0>)
 8006160:	ed93 5b00 	vldr	d5, [r3]
 8006164:	4b35      	ldr	r3, [pc, #212]	; (800623c <jacobianoInverso+0x37c>)
 8006166:	ed93 7b04 	vldr	d7, [r3, #16]
 800616a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800616e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006172:	4b40      	ldr	r3, [pc, #256]	; (8006274 <jacobianoInverso+0x3b4>)
 8006174:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8006178:	4b3d      	ldr	r3, [pc, #244]	; (8006270 <jacobianoInverso+0x3b0>)
 800617a:	ed93 6b00 	vldr	d6, [r3]
 800617e:	4b2f      	ldr	r3, [pc, #188]	; (800623c <jacobianoInverso+0x37c>)
 8006180:	ed93 7b02 	vldr	d7, [r3, #8]
 8006184:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006188:	4b39      	ldr	r3, [pc, #228]	; (8006270 <jacobianoInverso+0x3b0>)
 800618a:	ed93 5b02 	vldr	d5, [r3, #8]
 800618e:	4b2b      	ldr	r3, [pc, #172]	; (800623c <jacobianoInverso+0x37c>)
 8006190:	ed93 7b00 	vldr	d7, [r3]
 8006194:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006198:	ee36 7b47 	vsub.f64	d7, d6, d7
 800619c:	4b35      	ldr	r3, [pc, #212]	; (8006274 <jacobianoInverso+0x3b4>)
 800619e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 80061a2:	4b35      	ldr	r3, [pc, #212]	; (8006278 <jacobianoInverso+0x3b8>)
 80061a4:	ed93 6b02 	vldr	d6, [r3, #8]
 80061a8:	4b24      	ldr	r3, [pc, #144]	; (800623c <jacobianoInverso+0x37c>)
 80061aa:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80061ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061b2:	4b31      	ldr	r3, [pc, #196]	; (8006278 <jacobianoInverso+0x3b8>)
 80061b4:	ed93 5b04 	vldr	d5, [r3, #16]
 80061b8:	4b20      	ldr	r3, [pc, #128]	; (800623c <jacobianoInverso+0x37c>)
 80061ba:	ed93 7b08 	vldr	d7, [r3, #32]
 80061be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80061c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80061c6:	4b2d      	ldr	r3, [pc, #180]	; (800627c <jacobianoInverso+0x3bc>)
 80061c8:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 80061cc:	4b2a      	ldr	r3, [pc, #168]	; (8006278 <jacobianoInverso+0x3b8>)
 80061ce:	ed93 6b04 	vldr	d6, [r3, #16]
 80061d2:	4b1a      	ldr	r3, [pc, #104]	; (800623c <jacobianoInverso+0x37c>)
 80061d4:	ed93 7b06 	vldr	d7, [r3, #24]
 80061d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <jacobianoInverso+0x3b8>)
 80061de:	ed93 5b00 	vldr	d5, [r3]
 80061e2:	4b16      	ldr	r3, [pc, #88]	; (800623c <jacobianoInverso+0x37c>)
 80061e4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80061e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80061ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80061f0:	4b22      	ldr	r3, [pc, #136]	; (800627c <jacobianoInverso+0x3bc>)
 80061f2:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <jacobianoInverso+0x3b8>)
 80061f8:	ed93 6b00 	vldr	d6, [r3]
 80061fc:	4b0f      	ldr	r3, [pc, #60]	; (800623c <jacobianoInverso+0x37c>)
 80061fe:	ed93 7b08 	vldr	d7, [r3, #32]
 8006202:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006206:	e03b      	b.n	8006280 <jacobianoInverso+0x3c0>
	...
 8006210:	1eb851ec 	.word	0x1eb851ec
 8006214:	3fb1eb85 	.word	0x3fb1eb85
 8006218:	562574c0 	.word	0x562574c0
 800621c:	3faf09d1 	.word	0x3faf09d1
 8006220:	1eb851ec 	.word	0x1eb851ec
 8006224:	3fa1eb85 	.word	0x3fa1eb85
 8006228:	24000838 	.word	0x24000838
 800622c:	24000850 	.word	0x24000850
 8006230:	24000868 	.word	0x24000868
 8006234:	240002c0 	.word	0x240002c0
 8006238:	24000018 	.word	0x24000018
 800623c:	24000880 	.word	0x24000880
 8006240:	240002d0 	.word	0x240002d0
 8006244:	240002e0 	.word	0x240002e0
 8006248:	24000308 	.word	0x24000308
 800624c:	24000030 	.word	0x24000030
 8006250:	24000318 	.word	0x24000318
 8006254:	24000328 	.word	0x24000328
 8006258:	24000350 	.word	0x24000350
 800625c:	24000048 	.word	0x24000048
 8006260:	24000360 	.word	0x24000360
 8006264:	24000370 	.word	0x24000370
 8006268:	240008c8 	.word	0x240008c8
 800626c:	24000910 	.word	0x24000910
 8006270:	24000060 	.word	0x24000060
 8006274:	24000a30 	.word	0x24000a30
 8006278:	24000078 	.word	0x24000078
 800627c:	24000a48 	.word	0x24000a48
 8006280:	4b92      	ldr	r3, [pc, #584]	; (80064cc <jacobianoInverso+0x60c>)
 8006282:	ed93 5b02 	vldr	d5, [r3, #8]
 8006286:	4b92      	ldr	r3, [pc, #584]	; (80064d0 <jacobianoInverso+0x610>)
 8006288:	ed93 7b06 	vldr	d7, [r3, #24]
 800628c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006290:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006294:	4b8f      	ldr	r3, [pc, #572]	; (80064d4 <jacobianoInverso+0x614>)
 8006296:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 800629a:	4b8f      	ldr	r3, [pc, #572]	; (80064d8 <jacobianoInverso+0x618>)
 800629c:	ed93 6b02 	vldr	d6, [r3, #8]
 80062a0:	4b8b      	ldr	r3, [pc, #556]	; (80064d0 <jacobianoInverso+0x610>)
 80062a2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80062a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062aa:	4b8b      	ldr	r3, [pc, #556]	; (80064d8 <jacobianoInverso+0x618>)
 80062ac:	ed93 5b04 	vldr	d5, [r3, #16]
 80062b0:	4b87      	ldr	r3, [pc, #540]	; (80064d0 <jacobianoInverso+0x610>)
 80062b2:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80062b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062be:	4b87      	ldr	r3, [pc, #540]	; (80064dc <jacobianoInverso+0x61c>)
 80062c0:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 80062c4:	4b84      	ldr	r3, [pc, #528]	; (80064d8 <jacobianoInverso+0x618>)
 80062c6:	ed93 6b04 	vldr	d6, [r3, #16]
 80062ca:	4b81      	ldr	r3, [pc, #516]	; (80064d0 <jacobianoInverso+0x610>)
 80062cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80062d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062d4:	4b80      	ldr	r3, [pc, #512]	; (80064d8 <jacobianoInverso+0x618>)
 80062d6:	ed93 5b00 	vldr	d5, [r3]
 80062da:	4b7d      	ldr	r3, [pc, #500]	; (80064d0 <jacobianoInverso+0x610>)
 80062dc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80062e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062e8:	4b7c      	ldr	r3, [pc, #496]	; (80064dc <jacobianoInverso+0x61c>)
 80062ea:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 80062ee:	4b7a      	ldr	r3, [pc, #488]	; (80064d8 <jacobianoInverso+0x618>)
 80062f0:	ed93 6b00 	vldr	d6, [r3]
 80062f4:	4b76      	ldr	r3, [pc, #472]	; (80064d0 <jacobianoInverso+0x610>)
 80062f6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80062fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062fe:	4b76      	ldr	r3, [pc, #472]	; (80064d8 <jacobianoInverso+0x618>)
 8006300:	ed93 5b02 	vldr	d5, [r3, #8]
 8006304:	4b72      	ldr	r3, [pc, #456]	; (80064d0 <jacobianoInverso+0x610>)
 8006306:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800630a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800630e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006312:	4b72      	ldr	r3, [pc, #456]	; (80064dc <jacobianoInverso+0x61c>)
 8006314:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 8006318:	4971      	ldr	r1, [pc, #452]	; (80064e0 <jacobianoInverso+0x620>)
 800631a:	4872      	ldr	r0, [pc, #456]	; (80064e4 <jacobianoInverso+0x624>)
 800631c:	f7fd fbe2 	bl	8003ae4 <productDot>
 8006320:	eeb0 7b40 	vmov.f64	d7, d0
 8006324:	4b70      	ldr	r3, [pc, #448]	; (80064e8 <jacobianoInverso+0x628>)
 8006326:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 800632a:	4970      	ldr	r1, [pc, #448]	; (80064ec <jacobianoInverso+0x62c>)
 800632c:	4869      	ldr	r0, [pc, #420]	; (80064d4 <jacobianoInverso+0x614>)
 800632e:	f7fd fbd9 	bl	8003ae4 <productDot>
 8006332:	eeb0 7b40 	vmov.f64	d7, d0
 8006336:	4b6c      	ldr	r3, [pc, #432]	; (80064e8 <jacobianoInverso+0x628>)
 8006338:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 800633c:	496c      	ldr	r1, [pc, #432]	; (80064f0 <jacobianoInverso+0x630>)
 800633e:	4867      	ldr	r0, [pc, #412]	; (80064dc <jacobianoInverso+0x61c>)
 8006340:	f7fd fbd0 	bl	8003ae4 <productDot>
 8006344:	eeb0 7b40 	vmov.f64	d7, d0
 8006348:	4b67      	ldr	r3, [pc, #412]	; (80064e8 <jacobianoInverso+0x628>)
 800634a:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006354:	e03d      	b.n	80063d2 <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800635c:	e030      	b.n	80063c0 <jacobianoInverso+0x500>
			if (i == j) {
 800635e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006366:	429a      	cmp	r2, r3
 8006368:	d114      	bne.n	8006394 <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 800636a:	4a5f      	ldr	r2, [pc, #380]	; (80064e8 <jacobianoInverso+0x628>)
 800636c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006378:	4c5e      	ldr	r4, [pc, #376]	; (80064f4 <jacobianoInverso+0x634>)
 800637a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800637e:	4613      	mov	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	4413      	add	r3, r2
 8006384:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006388:	4413      	add	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4423      	add	r3, r4
 800638e:	e9c3 0100 	strd	r0, r1, [r3]
 8006392:	e010      	b.n	80063b6 <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 8006394:	4957      	ldr	r1, [pc, #348]	; (80064f4 <jacobianoInverso+0x634>)
 8006396:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800639a:	4613      	mov	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	4413      	add	r3, r2
 80063a0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4419      	add	r1, r3
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 80063b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063ba:	3301      	adds	r3, #1
 80063bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	ddca      	ble.n	800635e <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 80063c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063cc:	3301      	adds	r3, #1
 80063ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	ddbd      	ble.n	8006356 <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 80063da:	4c47      	ldr	r4, [pc, #284]	; (80064f8 <jacobianoInverso+0x638>)
 80063dc:	463b      	mov	r3, r7
 80063de:	4945      	ldr	r1, [pc, #276]	; (80064f4 <jacobianoInverso+0x634>)
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fd fcaf 	bl	8003d44 <inversa>
 80063e6:	4620      	mov	r0, r4
 80063e8:	463b      	mov	r3, r7
 80063ea:	2248      	movs	r2, #72	; 0x48
 80063ec:	4619      	mov	r1, r3
 80063ee:	f008 fd95 	bl	800ef1c <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 80063f2:	4c42      	ldr	r4, [pc, #264]	; (80064fc <jacobianoInverso+0x63c>)
 80063f4:	463b      	mov	r3, r7
 80063f6:	4a40      	ldr	r2, [pc, #256]	; (80064f8 <jacobianoInverso+0x638>)
 80063f8:	4939      	ldr	r1, [pc, #228]	; (80064e0 <jacobianoInverso+0x620>)
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd fd10 	bl	8003e20 <productMatriz>
 8006400:	4620      	mov	r0, r4
 8006402:	463b      	mov	r3, r7
 8006404:	2248      	movs	r2, #72	; 0x48
 8006406:	4619      	mov	r1, r3
 8006408:	f008 fd88 	bl	800ef1c <memcpy>

	for (int i = 0; i < 3; ++i) {
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006412:	e041      	b.n	8006498 <jacobianoInverso+0x5d8>
		double sum = 0;
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8006420:	2300      	movs	r3, #0
 8006422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006426:	e025      	b.n	8006474 <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 8006428:	4934      	ldr	r1, [pc, #208]	; (80064fc <jacobianoInverso+0x63c>)
 800642a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800642e:	4613      	mov	r3, r2
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4413      	add	r3, r2
 8006434:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006438:	4413      	add	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	440b      	add	r3, r1
 800643e:	ed93 6b00 	vldr	d6, [r3]
 8006442:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	33b0      	adds	r3, #176	; 0xb0
 800644a:	443b      	add	r3, r7
 800644c:	3b38      	subs	r3, #56	; 0x38
 800644e:	ed93 7b00 	vldr	d7, [r3]
 8006452:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006456:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800645a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800645e:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 8006462:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006466:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 800646a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800646e:	3301      	adds	r3, #1
 8006470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006478:	2b02      	cmp	r3, #2
 800647a:	ddd5      	ble.n	8006428 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 800647c:	4a20      	ldr	r2, [pc, #128]	; (8006500 <jacobianoInverso+0x640>)
 800647e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	18d1      	adds	r1, r2, r3
 8006486:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800648a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 800648e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006492:	3301      	adds	r3, #1
 8006494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800649c:	2b02      	cmp	r3, #2
 800649e:	ddb9      	ble.n	8006414 <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <jacobianoInverso+0x640>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	4917      	ldr	r1, [pc, #92]	; (8006504 <jacobianoInverso+0x644>)
 80064a8:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 80064ac:	4b14      	ldr	r3, [pc, #80]	; (8006500 <jacobianoInverso+0x640>)
 80064ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064b2:	4915      	ldr	r1, [pc, #84]	; (8006508 <jacobianoInverso+0x648>)
 80064b4:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 80064b8:	4b11      	ldr	r3, [pc, #68]	; (8006500 <jacobianoInverso+0x640>)
 80064ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80064be:	4913      	ldr	r1, [pc, #76]	; (800650c <jacobianoInverso+0x64c>)
 80064c0:	e9c1 2300 	strd	r2, r3, [r1]

}
 80064c4:	bf00      	nop
 80064c6:	37b4      	adds	r7, #180	; 0xb4
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}
 80064cc:	24000078 	.word	0x24000078
 80064d0:	24000880 	.word	0x24000880
 80064d4:	24000a48 	.word	0x24000a48
 80064d8:	24000090 	.word	0x24000090
 80064dc:	24000a60 	.word	0x24000a60
 80064e0:	24000910 	.word	0x24000910
 80064e4:	24000a30 	.word	0x24000a30
 80064e8:	24000a78 	.word	0x24000a78
 80064ec:	24000928 	.word	0x24000928
 80064f0:	24000940 	.word	0x24000940
 80064f4:	24000958 	.word	0x24000958
 80064f8:	240009a0 	.word	0x240009a0
 80064fc:	240009e8 	.word	0x240009e8
 8006500:	24000470 	.word	0x24000470
 8006504:	240004e8 	.word	0x240004e8
 8006508:	240004f0 	.word	0x240004f0
 800650c:	240004f8 	.word	0x240004f8

08006510 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 8006510:	b480      	push	{r7}
 8006512:	b089      	sub	sp, #36	; 0x24
 8006514:	af00      	add	r7, sp, #0
 8006516:	ed87 0b04 	vstr	d0, [r7, #16]
 800651a:	ed87 1b02 	vstr	d1, [r7, #8]
 800651e:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 8006522:	ed97 7b04 	vldr	d7, [r7, #16]
 8006526:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8006758 <SetPerfilTimers+0x248>
 800652a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800652e:	4b92      	ldr	r3, [pc, #584]	; (8006778 <SetPerfilTimers+0x268>)
 8006530:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 8006534:	ed97 7b02 	vldr	d7, [r7, #8]
 8006538:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8006758 <SetPerfilTimers+0x248>
 800653c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006540:	4b8e      	ldr	r3, [pc, #568]	; (800677c <SetPerfilTimers+0x26c>)
 8006542:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 8006546:	ed97 7b00 	vldr	d7, [r7]
 800654a:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8006758 <SetPerfilTimers+0x248>
 800654e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006552:	4b8b      	ldr	r3, [pc, #556]	; (8006780 <SetPerfilTimers+0x270>)
 8006554:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 8006558:	4b87      	ldr	r3, [pc, #540]	; (8006778 <SetPerfilTimers+0x268>)
 800655a:	ed93 7b00 	vldr	d7, [r3]
 800655e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8006760 <SetPerfilTimers+0x250>
 8006562:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656a:	d805      	bhi.n	8006578 <SetPerfilTimers+0x68>
			rpm1=0.1;
 800656c:	4982      	ldr	r1, [pc, #520]	; (8006778 <SetPerfilTimers+0x268>)
 800656e:	a37c      	add	r3, pc, #496	; (adr r3, 8006760 <SetPerfilTimers+0x250>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 8006578:	4b80      	ldr	r3, [pc, #512]	; (800677c <SetPerfilTimers+0x26c>)
 800657a:	ed93 7b00 	vldr	d7, [r3]
 800657e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006760 <SetPerfilTimers+0x250>
 8006582:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658a:	d805      	bhi.n	8006598 <SetPerfilTimers+0x88>
			rpm2=0.1;
 800658c:	497b      	ldr	r1, [pc, #492]	; (800677c <SetPerfilTimers+0x26c>)
 800658e:	a374      	add	r3, pc, #464	; (adr r3, 8006760 <SetPerfilTimers+0x250>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 8006598:	4b79      	ldr	r3, [pc, #484]	; (8006780 <SetPerfilTimers+0x270>)
 800659a:	ed93 7b00 	vldr	d7, [r3]
 800659e:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8006760 <SetPerfilTimers+0x250>
 80065a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	d805      	bhi.n	80065b8 <SetPerfilTimers+0xa8>
			rpm3=0.1;
 80065ac:	4974      	ldr	r1, [pc, #464]	; (8006780 <SetPerfilTimers+0x270>)
 80065ae:	a36c      	add	r3, pc, #432	; (adr r3, 8006760 <SetPerfilTimers+0x250>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	e9c1 2300 	strd	r2, r3, [r1]
		}


		periodoM[0] = (((FCL * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 80065b8:	4b72      	ldr	r3, [pc, #456]	; (8006784 <SetPerfilTimers+0x274>)
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	ee07 3a90 	vmov	s15, r3
 80065c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065c8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065cc:	4b6a      	ldr	r3, [pc, #424]	; (8006778 <SetPerfilTimers+0x268>)
 80065ce:	ed93 7b00 	vldr	d7, [r3]
 80065d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065d6:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006768 <SetPerfilTimers+0x258>
 80065da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065de:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8006770 <SetPerfilTimers+0x260>
 80065e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065ee:	4b66      	ldr	r3, [pc, #408]	; (8006788 <SetPerfilTimers+0x278>)
 80065f0:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((FCL * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 80065f4:	4b65      	ldr	r3, [pc, #404]	; (800678c <SetPerfilTimers+0x27c>)
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	ee07 3a90 	vmov	s15, r3
 80065fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006600:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006604:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006608:	4b5c      	ldr	r3, [pc, #368]	; (800677c <SetPerfilTimers+0x26c>)
 800660a:	ed93 7b00 	vldr	d7, [r3]
 800660e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006612:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006768 <SetPerfilTimers+0x258>
 8006616:	ee27 6b06 	vmul.f64	d6, d7, d6
 800661a:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8006770 <SetPerfilTimers+0x260>
 800661e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006622:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006626:	ee37 7b46 	vsub.f64	d7, d7, d6
 800662a:	4b57      	ldr	r3, [pc, #348]	; (8006788 <SetPerfilTimers+0x278>)
 800662c:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((FCL * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 8006630:	4b57      	ldr	r3, [pc, #348]	; (8006790 <SetPerfilTimers+0x280>)
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800663c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006640:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006644:	4b4e      	ldr	r3, [pc, #312]	; (8006780 <SetPerfilTimers+0x270>)
 8006646:	ed93 7b00 	vldr	d7, [r3]
 800664a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800664e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8006768 <SetPerfilTimers+0x258>
 8006652:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006656:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8006770 <SetPerfilTimers+0x260>
 800665a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800665e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006662:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006666:	4b48      	ldr	r3, [pc, #288]	; (8006788 <SetPerfilTimers+0x278>)
 8006668:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e0ad      	b.n	80067ce <SetPerfilTimers+0x2be>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 8006672:	4a45      	ldr	r2, [pc, #276]	; (8006788 <SetPerfilTimers+0x278>)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4413      	add	r3, r2
 800667a:	ed93 6b00 	vldr	d6, [r3]
 800667e:	4a42      	ldr	r2, [pc, #264]	; (8006788 <SetPerfilTimers+0x278>)
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4413      	add	r3, r2
 8006686:	ed93 7b00 	vldr	d7, [r3]
 800668a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800668e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006692:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006696:	4a3f      	ldr	r2, [pc, #252]	; (8006794 <SetPerfilTimers+0x284>)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 80066a2:	4a3d      	ldr	r2, [pc, #244]	; (8006798 <SetPerfilTimers+0x288>)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4413      	add	r3, r2
 80066aa:	ed93 6b00 	vldr	d6, [r3]
 80066ae:	4a39      	ldr	r2, [pc, #228]	; (8006794 <SetPerfilTimers+0x284>)
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4413      	add	r3, r2
 80066b6:	ed93 7b00 	vldr	d7, [r3]
 80066ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80066be:	4a36      	ldr	r2, [pc, #216]	; (8006798 <SetPerfilTimers+0x288>)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4413      	add	r3, r2
 80066c6:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 80066ca:	4a33      	ldr	r2, [pc, #204]	; (8006798 <SetPerfilTimers+0x288>)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	4413      	add	r3, r2
 80066d2:	ed93 7b00 	vldr	d7, [r3]
 80066d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e2:	dd1f      	ble.n	8006724 <SetPerfilTimers+0x214>
				periodoM[i] = periodoM[i] + 1;
 80066e4:	4a28      	ldr	r2, [pc, #160]	; (8006788 <SetPerfilTimers+0x278>)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	4413      	add	r3, r2
 80066ec:	ed93 7b00 	vldr	d7, [r3]
 80066f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066f8:	4a23      	ldr	r2, [pc, #140]	; (8006788 <SetPerfilTimers+0x278>)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 8006704:	4a24      	ldr	r2, [pc, #144]	; (8006798 <SetPerfilTimers+0x288>)
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	ed93 7b00 	vldr	d7, [r3]
 8006710:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006714:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <SetPerfilTimers+0x288>)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4413      	add	r3, r2
 8006720:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <SetPerfilTimers+0x278>)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	ed93 7b00 	vldr	d7, [r3]
 8006730:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8006734:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673c:	d52e      	bpl.n	800679c <SetPerfilTimers+0x28c>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 800673e:	4a12      	ldr	r2, [pc, #72]	; (8006788 <SetPerfilTimers+0x278>)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	18d1      	adds	r1, r2, r3
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9c1 2300 	strd	r2, r3, [r1]
 8006752:	e039      	b.n	80067c8 <SetPerfilTimers+0x2b8>
 8006754:	f3af 8000 	nop.w
 8006758:	66ed2a99 	.word	0x66ed2a99
 800675c:	4023193d 	.word	0x4023193d
 8006760:	9999999a 	.word	0x9999999a
 8006764:	3fb99999 	.word	0x3fb99999
 8006768:	00000000 	.word	0x00000000
 800676c:	40c2c000 	.word	0x40c2c000
 8006770:	00000000 	.word	0x00000000
 8006774:	41ec9c38 	.word	0x41ec9c38
 8006778:	24000528 	.word	0x24000528
 800677c:	24000530 	.word	0x24000530
 8006780:	24000538 	.word	0x24000538
 8006784:	40001800 	.word	0x40001800
 8006788:	24000500 	.word	0x24000500
 800678c:	40001c00 	.word	0x40001c00
 8006790:	40002000 	.word	0x40002000
 8006794:	24000540 	.word	0x24000540
 8006798:	24000558 	.word	0x24000558
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 800679c:	4a98      	ldr	r2, [pc, #608]	; (8006a00 <SetPerfilTimers+0x4f0>)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	4413      	add	r3, r2
 80067a4:	ed93 7b00 	vldr	d7, [r3]
 80067a8:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80069e8 <SetPerfilTimers+0x4d8>
 80067ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80067b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b4:	dd08      	ble.n	80067c8 <SetPerfilTimers+0x2b8>
				periodoM[i] = pow(2, 16);
 80067b6:	4a92      	ldr	r2, [pc, #584]	; (8006a00 <SetPerfilTimers+0x4f0>)
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	18d1      	adds	r1, r2, r3
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	4b90      	ldr	r3, [pc, #576]	; (8006a04 <SetPerfilTimers+0x4f4>)
 80067c4:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3301      	adds	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f77f af4e 	ble.w	8006672 <SetPerfilTimers+0x162>
			}
		}

			periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 80067d6:	4b8c      	ldr	r3, [pc, #560]	; (8006a08 <SetPerfilTimers+0x4f8>)
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80067e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80067e6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80067ea:	4b88      	ldr	r3, [pc, #544]	; (8006a0c <SetPerfilTimers+0x4fc>)
 80067ec:	ed93 7b00 	vldr	d7, [r3]
 80067f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80067f4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80069f0 <SetPerfilTimers+0x4e0>
 80067f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80067fc:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 80069f8 <SetPerfilTimers+0x4e8>
 8006800:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006804:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800680c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006810:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006814:	4b7a      	ldr	r3, [pc, #488]	; (8006a00 <SetPerfilTimers+0x4f0>)
 8006816:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 800681a:	4b7d      	ldr	r3, [pc, #500]	; (8006a10 <SetPerfilTimers+0x500>)
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006826:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800682a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800682e:	4b79      	ldr	r3, [pc, #484]	; (8006a14 <SetPerfilTimers+0x504>)
 8006830:	ed93 7b00 	vldr	d7, [r3]
 8006834:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006838:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80069f0 <SetPerfilTimers+0x4e0>
 800683c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006840:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 80069f8 <SetPerfilTimers+0x4e8>
 8006844:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006848:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800684c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006850:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006854:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006858:	4b69      	ldr	r3, [pc, #420]	; (8006a00 <SetPerfilTimers+0x4f0>)
 800685a:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 800685e:	4b6e      	ldr	r3, [pc, #440]	; (8006a18 <SetPerfilTimers+0x508>)
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800686a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800686e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006872:	4b6a      	ldr	r3, [pc, #424]	; (8006a1c <SetPerfilTimers+0x50c>)
 8006874:	ed93 7b00 	vldr	d7, [r3]
 8006878:	ee26 7b07 	vmul.f64	d7, d6, d7
 800687c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80069f0 <SetPerfilTimers+0x4e0>
 8006880:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006884:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80069f8 <SetPerfilTimers+0x4e8>
 8006888:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800688c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006890:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006894:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006898:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800689c:	4b58      	ldr	r3, [pc, #352]	; (8006a00 <SetPerfilTimers+0x4f0>)
 800689e:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 80068a2:	4b59      	ldr	r3, [pc, #356]	; (8006a08 <SetPerfilTimers+0x4f8>)
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80068ae:	4b54      	ldr	r3, [pc, #336]	; (8006a00 <SetPerfilTimers+0x4f0>)
 80068b0:	ed93 7b00 	vldr	d7, [r3]
 80068b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068bc:	dd0c      	ble.n	80068d8 <SetPerfilTimers+0x3c8>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80068be:	4b50      	ldr	r3, [pc, #320]	; (8006a00 <SetPerfilTimers+0x4f0>)
 80068c0:	ed93 7b00 	vldr	d7, [r3]
 80068c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068cc:	4b4e      	ldr	r3, [pc, #312]	; (8006a08 <SetPerfilTimers+0x4f8>)
 80068ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068d2:	ee17 2a90 	vmov	r2, s15
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 80068d8:	4b4d      	ldr	r3, [pc, #308]	; (8006a10 <SetPerfilTimers+0x500>)
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80068e4:	4b46      	ldr	r3, [pc, #280]	; (8006a00 <SetPerfilTimers+0x4f0>)
 80068e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80068ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f2:	dd0c      	ble.n	800690e <SetPerfilTimers+0x3fe>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80068f4:	4b42      	ldr	r3, [pc, #264]	; (8006a00 <SetPerfilTimers+0x4f0>)
 80068f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80068fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006902:	4b43      	ldr	r3, [pc, #268]	; (8006a10 <SetPerfilTimers+0x500>)
 8006904:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006908:	ee17 2a90 	vmov	r2, s15
 800690c:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 800690e:	4b42      	ldr	r3, [pc, #264]	; (8006a18 <SetPerfilTimers+0x508>)
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800691a:	4b39      	ldr	r3, [pc, #228]	; (8006a00 <SetPerfilTimers+0x4f0>)
 800691c:	ed93 7b04 	vldr	d7, [r3, #16]
 8006920:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006928:	dd0c      	ble.n	8006944 <SetPerfilTimers+0x434>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 800692a:	4b35      	ldr	r3, [pc, #212]	; (8006a00 <SetPerfilTimers+0x4f0>)
 800692c:	ed93 7b04 	vldr	d7, [r3, #16]
 8006930:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006934:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006938:	4b37      	ldr	r3, [pc, #220]	; (8006a18 <SetPerfilTimers+0x508>)
 800693a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800693e:	ee17 2a90 	vmov	r2, s15
 8006942:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 8006944:	4b2e      	ldr	r3, [pc, #184]	; (8006a00 <SetPerfilTimers+0x4f0>)
 8006946:	ed93 7b00 	vldr	d7, [r3]
 800694a:	4b2f      	ldr	r3, [pc, #188]	; (8006a08 <SetPerfilTimers+0x4f8>)
 800694c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006950:	ee17 2a90 	vmov	r2, s15
 8006954:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006956:	4b2c      	ldr	r3, [pc, #176]	; (8006a08 <SetPerfilTimers+0x4f8>)
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006962:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006966:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800696a:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <SetPerfilTimers+0x4f8>)
 800696c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006970:	ee17 2a90 	vmov	r2, s15
 8006974:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <SetPerfilTimers+0x4f0>)
 8006978:	ed93 7b02 	vldr	d7, [r3, #8]
 800697c:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <SetPerfilTimers+0x500>)
 800697e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006982:	ee17 2a90 	vmov	r2, s15
 8006986:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006988:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <SetPerfilTimers+0x500>)
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	ee07 3a90 	vmov	s15, r3
 8006990:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006994:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006998:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800699c:	4b1c      	ldr	r3, [pc, #112]	; (8006a10 <SetPerfilTimers+0x500>)
 800699e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069a2:	ee17 2a90 	vmov	r2, s15
 80069a6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 80069a8:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <SetPerfilTimers+0x4f0>)
 80069aa:	ed93 7b04 	vldr	d7, [r3, #16]
 80069ae:	4b1a      	ldr	r3, [pc, #104]	; (8006a18 <SetPerfilTimers+0x508>)
 80069b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069b4:	ee17 2a90 	vmov	r2, s15
 80069b8:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80069ba:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <SetPerfilTimers+0x508>)
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80069c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <SetPerfilTimers+0x508>)
 80069d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069d4:	ee17 2a90 	vmov	r2, s15
 80069d8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 80069da:	bf00      	nop
 80069dc:	3724      	adds	r7, #36	; 0x24
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	00000000 	.word	0x00000000
 80069ec:	40f00000 	.word	0x40f00000
 80069f0:	00000000 	.word	0x00000000
 80069f4:	40c2c000 	.word	0x40c2c000
 80069f8:	00000000 	.word	0x00000000
 80069fc:	41ec9c38 	.word	0x41ec9c38
 8006a00:	24000500 	.word	0x24000500
 8006a04:	40f00000 	.word	0x40f00000
 8006a08:	40001800 	.word	0x40001800
 8006a0c:	24000528 	.word	0x24000528
 8006a10:	40001c00 	.word	0x40001c00
 8006a14:	24000530 	.word	0x24000530
 8006a18:	40002000 	.word	0x40002000
 8006a1c:	24000538 	.word	0x24000538

08006a20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006a24:	4b22      	ldr	r3, [pc, #136]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a26:	4a23      	ldr	r2, [pc, #140]	; (8006ab4 <MX_USART1_UART_Init+0x94>)
 8006a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006a2a:	4b21      	ldr	r3, [pc, #132]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006a32:	4b1f      	ldr	r3, [pc, #124]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006a38:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006a3e:	4b1c      	ldr	r3, [pc, #112]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a46:	220c      	movs	r2, #12
 8006a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a4a:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a50:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006a5c:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a68:	4811      	ldr	r0, [pc, #68]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a6a:	f005 fecf 	bl	800c80c <HAL_UART_Init>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006a74:	f7fc fdb4 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a78:	2100      	movs	r1, #0
 8006a7a:	480d      	ldr	r0, [pc, #52]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a7c:	f008 f959 	bl	800ed32 <HAL_UARTEx_SetTxFifoThreshold>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006a86:	f7fc fdab 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4808      	ldr	r0, [pc, #32]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a8e:	f008 f98e 	bl	800edae <HAL_UARTEx_SetRxFifoThreshold>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006a98:	f7fc fda2 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006a9c:	4804      	ldr	r0, [pc, #16]	; (8006ab0 <MX_USART1_UART_Init+0x90>)
 8006a9e:	f008 f90f 	bl	800ecc0 <HAL_UARTEx_DisableFifoMode>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006aa8:	f7fc fd9a 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006aac:	bf00      	nop
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	24000bd0 	.word	0x24000bd0
 8006ab4:	40011000 	.word	0x40011000

08006ab8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006abc:	4b22      	ldr	r3, [pc, #136]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006abe:	4a23      	ldr	r2, [pc, #140]	; (8006b4c <MX_USART2_UART_Init+0x94>)
 8006ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006ac2:	4b21      	ldr	r3, [pc, #132]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006ac4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006aca:	4b1f      	ldr	r3, [pc, #124]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ad0:	4b1d      	ldr	r3, [pc, #116]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006ad6:	4b1c      	ldr	r3, [pc, #112]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006ade:	220c      	movs	r2, #12
 8006ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ae2:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ae8:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006aee:	4b16      	ldr	r3, [pc, #88]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006af4:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006afa:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b00:	4811      	ldr	r0, [pc, #68]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006b02:	f005 fe83 	bl	800c80c <HAL_UART_Init>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006b0c:	f7fc fd68 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b10:	2100      	movs	r1, #0
 8006b12:	480d      	ldr	r0, [pc, #52]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006b14:	f008 f90d 	bl	800ed32 <HAL_UARTEx_SetTxFifoThreshold>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006b1e:	f7fc fd5f 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b22:	2100      	movs	r1, #0
 8006b24:	4808      	ldr	r0, [pc, #32]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006b26:	f008 f942 	bl	800edae <HAL_UARTEx_SetRxFifoThreshold>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006b30:	f7fc fd56 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006b34:	4804      	ldr	r0, [pc, #16]	; (8006b48 <MX_USART2_UART_Init+0x90>)
 8006b36:	f008 f8c3 	bl	800ecc0 <HAL_UARTEx_DisableFifoMode>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006b40:	f7fc fd4e 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b44:	bf00      	nop
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	24000c60 	.word	0x24000c60
 8006b4c:	40004400 	.word	0x40004400

08006b50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006b54:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <MX_USART3_UART_Init+0x94>)
 8006b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006b5a:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b76:	220c      	movs	r2, #12
 8006b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b7a:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b86:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006b98:	4811      	ldr	r0, [pc, #68]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006b9a:	f005 fe37 	bl	800c80c <HAL_UART_Init>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006ba4:	f7fc fd1c 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ba8:	2100      	movs	r1, #0
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006bac:	f008 f8c1 	bl	800ed32 <HAL_UARTEx_SetTxFifoThreshold>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006bb6:	f7fc fd13 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4808      	ldr	r0, [pc, #32]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006bbe:	f008 f8f6 	bl	800edae <HAL_UARTEx_SetRxFifoThreshold>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006bc8:	f7fc fd0a 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006bcc:	4804      	ldr	r0, [pc, #16]	; (8006be0 <MX_USART3_UART_Init+0x90>)
 8006bce:	f008 f877 	bl	800ecc0 <HAL_UARTEx_DisableFifoMode>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006bd8:	f7fc fd02 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	24000cf0 	.word	0x24000cf0
 8006be4:	40004800 	.word	0x40004800

08006be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b0be      	sub	sp, #248	; 0xf8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c04:	22bc      	movs	r2, #188	; 0xbc
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f008 f995 	bl	800ef38 <memset>
  if(uartHandle->Instance==USART1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a84      	ldr	r2, [pc, #528]	; (8006e24 <HAL_UART_MspInit+0x23c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d168      	bne.n	8006cea <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 fa8c 	bl	8009144 <HAL_RCCEx_PeriphCLKConfig>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006c32:	f7fc fcd5 	bl	80035e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c36:	4b7c      	ldr	r3, [pc, #496]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c3c:	4a7a      	ldr	r2, [pc, #488]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c3e:	f043 0310 	orr.w	r3, r3, #16
 8006c42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c46:	4b78      	ldr	r3, [pc, #480]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c54:	4b74      	ldr	r3, [pc, #464]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c5a:	4a73      	ldr	r2, [pc, #460]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c5c:	f043 0302 	orr.w	r3, r3, #2
 8006c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c64:	4b70      	ldr	r3, [pc, #448]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	623b      	str	r3, [r7, #32]
 8006c70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c72:	4b6d      	ldr	r3, [pc, #436]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c78:	4a6b      	ldr	r2, [pc, #428]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c82:	4b69      	ldr	r3, [pc, #420]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006caa:	2304      	movs	r3, #4
 8006cac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006cb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	485d      	ldr	r0, [pc, #372]	; (8006e2c <HAL_UART_MspInit+0x244>)
 8006cb8:	f001 f854 	bl	8007d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006cd6:	2307      	movs	r3, #7
 8006cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006cdc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4853      	ldr	r0, [pc, #332]	; (8006e30 <HAL_UART_MspInit+0x248>)
 8006ce4:	f001 f83e 	bl	8007d64 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006ce8:	e097      	b.n	8006e1a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a51      	ldr	r2, [pc, #324]	; (8006e34 <HAL_UART_MspInit+0x24c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d142      	bne.n	8006d7a <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d02:	4618      	mov	r0, r3
 8006d04:	f002 fa1e 	bl	8009144 <HAL_RCCEx_PeriphCLKConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006d0e:	f7fc fc67 	bl	80035e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006d12:	4b45      	ldr	r3, [pc, #276]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d18:	4a43      	ldr	r2, [pc, #268]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d22:	4b41      	ldr	r3, [pc, #260]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d30:	4b3d      	ldr	r3, [pc, #244]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d36:	4a3c      	ldr	r2, [pc, #240]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d40:	4b39      	ldr	r3, [pc, #228]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006d4e:	230c      	movs	r3, #12
 8006d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d54:	2302      	movs	r3, #2
 8006d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d60:	2300      	movs	r3, #0
 8006d62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d66:	2307      	movs	r3, #7
 8006d68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006d70:	4619      	mov	r1, r3
 8006d72:	482f      	ldr	r0, [pc, #188]	; (8006e30 <HAL_UART_MspInit+0x248>)
 8006d74:	f000 fff6 	bl	8007d64 <HAL_GPIO_Init>
}
 8006d78:	e04f      	b.n	8006e1a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a2e      	ldr	r2, [pc, #184]	; (8006e38 <HAL_UART_MspInit+0x250>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d14a      	bne.n	8006e1a <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d84:	2302      	movs	r3, #2
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d92:	4618      	mov	r0, r3
 8006d94:	f002 f9d6 	bl	8009144 <HAL_RCCEx_PeriphCLKConfig>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006d9e:	f7fc fc1f 	bl	80035e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006da2:	4b21      	ldr	r3, [pc, #132]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006da8:	4a1f      	ldr	r2, [pc, #124]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006daa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006db2:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dc0:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006dc8:	f043 0308 	orr.w	r3, r3, #8
 8006dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dd0:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <HAL_UART_MspInit+0x240>)
 8006dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de6:	2302      	movs	r3, #2
 8006de8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006df8:	2307      	movs	r3, #7
 8006dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dfe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006e02:	4619      	mov	r1, r3
 8006e04:	480d      	ldr	r0, [pc, #52]	; (8006e3c <HAL_UART_MspInit+0x254>)
 8006e06:	f000 ffad 	bl	8007d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	2027      	movs	r0, #39	; 0x27
 8006e10:	f000 fa01 	bl	8007216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006e14:	2027      	movs	r0, #39	; 0x27
 8006e16:	f000 fa18 	bl	800724a <HAL_NVIC_EnableIRQ>
}
 8006e1a:	bf00      	nop
 8006e1c:	37f8      	adds	r7, #248	; 0xf8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40011000 	.word	0x40011000
 8006e28:	58024400 	.word	0x58024400
 8006e2c:	58020400 	.word	0x58020400
 8006e30:	58020000 	.word	0x58020000
 8006e34:	40004400 	.word	0x40004400
 8006e38:	40004800 	.word	0x40004800
 8006e3c:	58020c00 	.word	0x58020c00

08006e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e46:	e003      	b.n	8006e50 <LoopCopyDataInit>

08006e48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e48:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e4e:	3104      	adds	r1, #4

08006e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e50:	480b      	ldr	r0, [pc, #44]	; (8006e80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e58:	d3f6      	bcc.n	8006e48 <CopyDataInit>
  ldr  r2, =_sbss
 8006e5a:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e5c:	e002      	b.n	8006e64 <LoopFillZerobss>

08006e5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e60:	f842 3b04 	str.w	r3, [r2], #4

08006e64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e64:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e68:	d3f9      	bcc.n	8006e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e6a:	f7fd f9b7 	bl	80041dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e6e:	f008 f831 	bl	800eed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e72:	f7fb ff5d 	bl	8002d30 <main>
  bx  lr    
 8006e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e78:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006e7c:	08014300 	.word	0x08014300
  ldr  r0, =_sdata
 8006e80:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006e84:	24000284 	.word	0x24000284
  ldr  r2, =_sbss
 8006e88:	24000288 	.word	0x24000288
  ldr  r3, = _ebss
 8006e8c:	24000d94 	.word	0x24000d94

08006e90 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e90:	e7fe      	b.n	8006e90 <ADC3_IRQHandler>
	...

08006e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e9a:	2003      	movs	r0, #3
 8006e9c:	f000 f9b0 	bl	8007200 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ea0:	f001 ff7a 	bl	8008d98 <HAL_RCC_GetSysClockFreq>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	4b15      	ldr	r3, [pc, #84]	; (8006efc <HAL_Init+0x68>)
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	4913      	ldr	r1, [pc, #76]	; (8006f00 <HAL_Init+0x6c>)
 8006eb2:	5ccb      	ldrb	r3, [r1, r3]
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ebe:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <HAL_Init+0x68>)
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	4a0e      	ldr	r2, [pc, #56]	; (8006f00 <HAL_Init+0x6c>)
 8006ec8:	5cd3      	ldrb	r3, [r2, r3]
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed4:	4a0b      	ldr	r2, [pc, #44]	; (8006f04 <HAL_Init+0x70>)
 8006ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ed8:	4a0b      	ldr	r2, [pc, #44]	; (8006f08 <HAL_Init+0x74>)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f000 f814 	bl	8006f0c <HAL_InitTick>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e002      	b.n	8006ef4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006eee:	f7fc fffb 	bl	8003ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	58024400 	.word	0x58024400
 8006f00:	080125d0 	.word	0x080125d0
 8006f04:	24000014 	.word	0x24000014
 8006f08:	24000010 	.word	0x24000010

08006f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006f14:	4b15      	ldr	r3, [pc, #84]	; (8006f6c <HAL_InitTick+0x60>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e021      	b.n	8006f64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <HAL_InitTick+0x64>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <HAL_InitTick+0x60>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f9a3 	bl	8007282 <HAL_SYSTICK_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e00e      	b.n	8006f64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b0f      	cmp	r3, #15
 8006f4a:	d80a      	bhi.n	8006f62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	f000 f95f 	bl	8007216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f58:	4a06      	ldr	r2, [pc, #24]	; (8006f74 <HAL_InitTick+0x68>)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e000      	b.n	8006f64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	240000ac 	.word	0x240000ac
 8006f70:	24000010 	.word	0x24000010
 8006f74:	240000a8 	.word	0x240000a8

08006f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_IncTick+0x20>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_IncTick+0x24>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4413      	add	r3, r2
 8006f88:	4a04      	ldr	r2, [pc, #16]	; (8006f9c <HAL_IncTick+0x24>)
 8006f8a:	6013      	str	r3, [r2, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	240000ac 	.word	0x240000ac
 8006f9c:	24000d80 	.word	0x24000d80

08006fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8006fa4:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <HAL_GetTick+0x14>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	24000d80 	.word	0x24000d80

08006fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fc0:	f7ff ffee 	bl	8006fa0 <HAL_GetTick>
 8006fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d005      	beq.n	8006fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <HAL_Delay+0x44>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fde:	bf00      	nop
 8006fe0:	f7ff ffde 	bl	8006fa0 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d8f7      	bhi.n	8006fe0 <HAL_Delay+0x28>
  {
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	240000ac 	.word	0x240000ac

08007000 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <HAL_GetREVID+0x14>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	0c1b      	lsrs	r3, r3, #16
}
 800700a:	4618      	mov	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	5c001000 	.word	0x5c001000

08007018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <__NVIC_SetPriorityGrouping+0x40>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007034:	4013      	ands	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <__NVIC_SetPriorityGrouping+0x44>)
 8007042:	4313      	orrs	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007046:	4a04      	ldr	r2, [pc, #16]	; (8007058 <__NVIC_SetPriorityGrouping+0x40>)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	60d3      	str	r3, [r2, #12]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	e000ed00 	.word	0xe000ed00
 800705c:	05fa0000 	.word	0x05fa0000

08007060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <__NVIC_GetPriorityGrouping+0x18>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	f003 0307 	and.w	r3, r3, #7
}
 800706e:	4618      	mov	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	e000ed00 	.word	0xe000ed00

0800707c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708a:	2b00      	cmp	r3, #0
 800708c:	db0b      	blt.n	80070a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	f003 021f 	and.w	r2, r3, #31
 8007094:	4907      	ldr	r1, [pc, #28]	; (80070b4 <__NVIC_EnableIRQ+0x38>)
 8007096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	2001      	movs	r0, #1
 800709e:	fa00 f202 	lsl.w	r2, r0, r2
 80070a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	e000e100 	.word	0xe000e100

080070b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	db12      	blt.n	80070f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	f003 021f 	and.w	r2, r3, #31
 80070d0:	490a      	ldr	r1, [pc, #40]	; (80070fc <__NVIC_DisableIRQ+0x44>)
 80070d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	2001      	movs	r0, #1
 80070da:	fa00 f202 	lsl.w	r2, r0, r2
 80070de:	3320      	adds	r3, #32
 80070e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80070e4:	f3bf 8f4f 	dsb	sy
}
 80070e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80070ea:	f3bf 8f6f 	isb	sy
}
 80070ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	e000e100 	.word	0xe000e100

08007100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800710c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007110:	2b00      	cmp	r3, #0
 8007112:	db0a      	blt.n	800712a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	b2da      	uxtb	r2, r3
 8007118:	490c      	ldr	r1, [pc, #48]	; (800714c <__NVIC_SetPriority+0x4c>)
 800711a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800711e:	0112      	lsls	r2, r2, #4
 8007120:	b2d2      	uxtb	r2, r2
 8007122:	440b      	add	r3, r1
 8007124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007128:	e00a      	b.n	8007140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	b2da      	uxtb	r2, r3
 800712e:	4908      	ldr	r1, [pc, #32]	; (8007150 <__NVIC_SetPriority+0x50>)
 8007130:	88fb      	ldrh	r3, [r7, #6]
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	3b04      	subs	r3, #4
 8007138:	0112      	lsls	r2, r2, #4
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	440b      	add	r3, r1
 800713e:	761a      	strb	r2, [r3, #24]
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	e000e100 	.word	0xe000e100
 8007150:	e000ed00 	.word	0xe000ed00

08007154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007154:	b480      	push	{r7}
 8007156:	b089      	sub	sp, #36	; 0x24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f1c3 0307 	rsb	r3, r3, #7
 800716e:	2b04      	cmp	r3, #4
 8007170:	bf28      	it	cs
 8007172:	2304      	movcs	r3, #4
 8007174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3304      	adds	r3, #4
 800717a:	2b06      	cmp	r3, #6
 800717c:	d902      	bls.n	8007184 <NVIC_EncodePriority+0x30>
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	3b03      	subs	r3, #3
 8007182:	e000      	b.n	8007186 <NVIC_EncodePriority+0x32>
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007188:	f04f 32ff 	mov.w	r2, #4294967295
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	43da      	mvns	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	401a      	ands	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800719c:	f04f 31ff 	mov.w	r1, #4294967295
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	fa01 f303 	lsl.w	r3, r1, r3
 80071a6:	43d9      	mvns	r1, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071ac:	4313      	orrs	r3, r2
         );
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3724      	adds	r7, #36	; 0x24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071cc:	d301      	bcc.n	80071d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071ce:	2301      	movs	r3, #1
 80071d0:	e00f      	b.n	80071f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071d2:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <SysTick_Config+0x40>)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071da:	210f      	movs	r1, #15
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295
 80071e0:	f7ff ff8e 	bl	8007100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <SysTick_Config+0x40>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <SysTick_Config+0x40>)
 80071ec:	2207      	movs	r2, #7
 80071ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	e000e010 	.word	0xe000e010

08007200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff ff05 	bl	8007018 <__NVIC_SetPriorityGrouping>
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b086      	sub	sp, #24
 800721a:	af00      	add	r7, sp, #0
 800721c:	4603      	mov	r3, r0
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
 8007222:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007224:	f7ff ff1c 	bl	8007060 <__NVIC_GetPriorityGrouping>
 8007228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	6978      	ldr	r0, [r7, #20]
 8007230:	f7ff ff90 	bl	8007154 <NVIC_EncodePriority>
 8007234:	4602      	mov	r2, r0
 8007236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800723a:	4611      	mov	r1, r2
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff ff5f 	bl	8007100 <__NVIC_SetPriority>
}
 8007242:	bf00      	nop
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	4603      	mov	r3, r0
 8007252:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff ff0f 	bl	800707c <__NVIC_EnableIRQ>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	4603      	mov	r3, r0
 800726e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff ff1f 	bl	80070b8 <__NVIC_DisableIRQ>
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff ff96 	bl	80071bc <SysTick_Config>
 8007290:	4603      	mov	r3, r0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80072a4:	f7ff fe7c 	bl	8006fa0 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e2dc      	b.n	800786e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d008      	beq.n	80072d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2280      	movs	r2, #128	; 0x80
 80072c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e2cd      	b.n	800786e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a76      	ldr	r2, [pc, #472]	; (80074b0 <HAL_DMA_Abort+0x214>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d04a      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a74      	ldr	r2, [pc, #464]	; (80074b4 <HAL_DMA_Abort+0x218>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d045      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a73      	ldr	r2, [pc, #460]	; (80074b8 <HAL_DMA_Abort+0x21c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d040      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a71      	ldr	r2, [pc, #452]	; (80074bc <HAL_DMA_Abort+0x220>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d03b      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a70      	ldr	r2, [pc, #448]	; (80074c0 <HAL_DMA_Abort+0x224>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d036      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a6e      	ldr	r2, [pc, #440]	; (80074c4 <HAL_DMA_Abort+0x228>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d031      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a6d      	ldr	r2, [pc, #436]	; (80074c8 <HAL_DMA_Abort+0x22c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d02c      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a6b      	ldr	r2, [pc, #428]	; (80074cc <HAL_DMA_Abort+0x230>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d027      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a6a      	ldr	r2, [pc, #424]	; (80074d0 <HAL_DMA_Abort+0x234>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d022      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a68      	ldr	r2, [pc, #416]	; (80074d4 <HAL_DMA_Abort+0x238>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d01d      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a67      	ldr	r2, [pc, #412]	; (80074d8 <HAL_DMA_Abort+0x23c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d018      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a65      	ldr	r2, [pc, #404]	; (80074dc <HAL_DMA_Abort+0x240>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a64      	ldr	r2, [pc, #400]	; (80074e0 <HAL_DMA_Abort+0x244>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00e      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a62      	ldr	r2, [pc, #392]	; (80074e4 <HAL_DMA_Abort+0x248>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d009      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a61      	ldr	r2, [pc, #388]	; (80074e8 <HAL_DMA_Abort+0x24c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d004      	beq.n	8007372 <HAL_DMA_Abort+0xd6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a5f      	ldr	r2, [pc, #380]	; (80074ec <HAL_DMA_Abort+0x250>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d101      	bne.n	8007376 <HAL_DMA_Abort+0xda>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <HAL_DMA_Abort+0xdc>
 8007376:	2300      	movs	r3, #0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d013      	beq.n	80073a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 021e 	bic.w	r2, r2, #30
 800738a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695a      	ldr	r2, [r3, #20]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800739a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	e00a      	b.n	80073ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 020e 	bic.w	r2, r2, #14
 80073b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a3c      	ldr	r2, [pc, #240]	; (80074b0 <HAL_DMA_Abort+0x214>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d072      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a3a      	ldr	r2, [pc, #232]	; (80074b4 <HAL_DMA_Abort+0x218>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d06d      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a39      	ldr	r2, [pc, #228]	; (80074b8 <HAL_DMA_Abort+0x21c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d068      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a37      	ldr	r2, [pc, #220]	; (80074bc <HAL_DMA_Abort+0x220>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d063      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a36      	ldr	r2, [pc, #216]	; (80074c0 <HAL_DMA_Abort+0x224>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d05e      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a34      	ldr	r2, [pc, #208]	; (80074c4 <HAL_DMA_Abort+0x228>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d059      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a33      	ldr	r2, [pc, #204]	; (80074c8 <HAL_DMA_Abort+0x22c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d054      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a31      	ldr	r2, [pc, #196]	; (80074cc <HAL_DMA_Abort+0x230>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d04f      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a30      	ldr	r2, [pc, #192]	; (80074d0 <HAL_DMA_Abort+0x234>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d04a      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a2e      	ldr	r2, [pc, #184]	; (80074d4 <HAL_DMA_Abort+0x238>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d045      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a2d      	ldr	r2, [pc, #180]	; (80074d8 <HAL_DMA_Abort+0x23c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d040      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2b      	ldr	r2, [pc, #172]	; (80074dc <HAL_DMA_Abort+0x240>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d03b      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a2a      	ldr	r2, [pc, #168]	; (80074e0 <HAL_DMA_Abort+0x244>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d036      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a28      	ldr	r2, [pc, #160]	; (80074e4 <HAL_DMA_Abort+0x248>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d031      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a27      	ldr	r2, [pc, #156]	; (80074e8 <HAL_DMA_Abort+0x24c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d02c      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a25      	ldr	r2, [pc, #148]	; (80074ec <HAL_DMA_Abort+0x250>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d027      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a24      	ldr	r2, [pc, #144]	; (80074f0 <HAL_DMA_Abort+0x254>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d022      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a22      	ldr	r2, [pc, #136]	; (80074f4 <HAL_DMA_Abort+0x258>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01d      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a21      	ldr	r2, [pc, #132]	; (80074f8 <HAL_DMA_Abort+0x25c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d018      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1f      	ldr	r2, [pc, #124]	; (80074fc <HAL_DMA_Abort+0x260>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <HAL_DMA_Abort+0x264>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00e      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1c      	ldr	r2, [pc, #112]	; (8007504 <HAL_DMA_Abort+0x268>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d009      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1b      	ldr	r2, [pc, #108]	; (8007508 <HAL_DMA_Abort+0x26c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d004      	beq.n	80074aa <HAL_DMA_Abort+0x20e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a19      	ldr	r2, [pc, #100]	; (800750c <HAL_DMA_Abort+0x270>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d132      	bne.n	8007510 <HAL_DMA_Abort+0x274>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e031      	b.n	8007512 <HAL_DMA_Abort+0x276>
 80074ae:	bf00      	nop
 80074b0:	40020010 	.word	0x40020010
 80074b4:	40020028 	.word	0x40020028
 80074b8:	40020040 	.word	0x40020040
 80074bc:	40020058 	.word	0x40020058
 80074c0:	40020070 	.word	0x40020070
 80074c4:	40020088 	.word	0x40020088
 80074c8:	400200a0 	.word	0x400200a0
 80074cc:	400200b8 	.word	0x400200b8
 80074d0:	40020410 	.word	0x40020410
 80074d4:	40020428 	.word	0x40020428
 80074d8:	40020440 	.word	0x40020440
 80074dc:	40020458 	.word	0x40020458
 80074e0:	40020470 	.word	0x40020470
 80074e4:	40020488 	.word	0x40020488
 80074e8:	400204a0 	.word	0x400204a0
 80074ec:	400204b8 	.word	0x400204b8
 80074f0:	58025408 	.word	0x58025408
 80074f4:	5802541c 	.word	0x5802541c
 80074f8:	58025430 	.word	0x58025430
 80074fc:	58025444 	.word	0x58025444
 8007500:	58025458 	.word	0x58025458
 8007504:	5802546c 	.word	0x5802546c
 8007508:	58025480 	.word	0x58025480
 800750c:	58025494 	.word	0x58025494
 8007510:	2300      	movs	r3, #0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d007      	beq.n	8007526 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007524:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a6d      	ldr	r2, [pc, #436]	; (80076e0 <HAL_DMA_Abort+0x444>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d04a      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a6b      	ldr	r2, [pc, #428]	; (80076e4 <HAL_DMA_Abort+0x448>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d045      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a6a      	ldr	r2, [pc, #424]	; (80076e8 <HAL_DMA_Abort+0x44c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d040      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a68      	ldr	r2, [pc, #416]	; (80076ec <HAL_DMA_Abort+0x450>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d03b      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a67      	ldr	r2, [pc, #412]	; (80076f0 <HAL_DMA_Abort+0x454>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d036      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a65      	ldr	r2, [pc, #404]	; (80076f4 <HAL_DMA_Abort+0x458>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d031      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a64      	ldr	r2, [pc, #400]	; (80076f8 <HAL_DMA_Abort+0x45c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d02c      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a62      	ldr	r2, [pc, #392]	; (80076fc <HAL_DMA_Abort+0x460>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d027      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a61      	ldr	r2, [pc, #388]	; (8007700 <HAL_DMA_Abort+0x464>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a5f      	ldr	r2, [pc, #380]	; (8007704 <HAL_DMA_Abort+0x468>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d01d      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a5e      	ldr	r2, [pc, #376]	; (8007708 <HAL_DMA_Abort+0x46c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a5c      	ldr	r2, [pc, #368]	; (800770c <HAL_DMA_Abort+0x470>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a5b      	ldr	r2, [pc, #364]	; (8007710 <HAL_DMA_Abort+0x474>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a59      	ldr	r2, [pc, #356]	; (8007714 <HAL_DMA_Abort+0x478>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a58      	ldr	r2, [pc, #352]	; (8007718 <HAL_DMA_Abort+0x47c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_DMA_Abort+0x32a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a56      	ldr	r2, [pc, #344]	; (800771c <HAL_DMA_Abort+0x480>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d108      	bne.n	80075d8 <HAL_DMA_Abort+0x33c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0201 	bic.w	r2, r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e007      	b.n	80075e8 <HAL_DMA_Abort+0x34c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80075e8:	e013      	b.n	8007612 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075ea:	f7ff fcd9 	bl	8006fa0 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d90c      	bls.n	8007612 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2203      	movs	r2, #3
 8007602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e12d      	b.n	800786e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e5      	bne.n	80075ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2f      	ldr	r2, [pc, #188]	; (80076e0 <HAL_DMA_Abort+0x444>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d04a      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a2d      	ldr	r2, [pc, #180]	; (80076e4 <HAL_DMA_Abort+0x448>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d045      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a2c      	ldr	r2, [pc, #176]	; (80076e8 <HAL_DMA_Abort+0x44c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d040      	beq.n	80076be <HAL_DMA_Abort+0x422>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <HAL_DMA_Abort+0x450>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d03b      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a29      	ldr	r2, [pc, #164]	; (80076f0 <HAL_DMA_Abort+0x454>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d036      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <HAL_DMA_Abort+0x458>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d031      	beq.n	80076be <HAL_DMA_Abort+0x422>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <HAL_DMA_Abort+0x45c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d02c      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a24      	ldr	r2, [pc, #144]	; (80076fc <HAL_DMA_Abort+0x460>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d027      	beq.n	80076be <HAL_DMA_Abort+0x422>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a23      	ldr	r2, [pc, #140]	; (8007700 <HAL_DMA_Abort+0x464>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d022      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a21      	ldr	r2, [pc, #132]	; (8007704 <HAL_DMA_Abort+0x468>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01d      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a20      	ldr	r2, [pc, #128]	; (8007708 <HAL_DMA_Abort+0x46c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <HAL_DMA_Abort+0x422>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1e      	ldr	r2, [pc, #120]	; (800770c <HAL_DMA_Abort+0x470>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <HAL_DMA_Abort+0x422>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <HAL_DMA_Abort+0x474>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_DMA_Abort+0x422>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	; (8007714 <HAL_DMA_Abort+0x478>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_DMA_Abort+0x422>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1a      	ldr	r2, [pc, #104]	; (8007718 <HAL_DMA_Abort+0x47c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_DMA_Abort+0x422>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a18      	ldr	r2, [pc, #96]	; (800771c <HAL_DMA_Abort+0x480>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d101      	bne.n	80076c2 <HAL_DMA_Abort+0x426>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <HAL_DMA_Abort+0x428>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d02b      	beq.n	8007720 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	223f      	movs	r2, #63	; 0x3f
 80076d8:	409a      	lsls	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	609a      	str	r2, [r3, #8]
 80076de:	e02a      	b.n	8007736 <HAL_DMA_Abort+0x49a>
 80076e0:	40020010 	.word	0x40020010
 80076e4:	40020028 	.word	0x40020028
 80076e8:	40020040 	.word	0x40020040
 80076ec:	40020058 	.word	0x40020058
 80076f0:	40020070 	.word	0x40020070
 80076f4:	40020088 	.word	0x40020088
 80076f8:	400200a0 	.word	0x400200a0
 80076fc:	400200b8 	.word	0x400200b8
 8007700:	40020410 	.word	0x40020410
 8007704:	40020428 	.word	0x40020428
 8007708:	40020440 	.word	0x40020440
 800770c:	40020458 	.word	0x40020458
 8007710:	40020470 	.word	0x40020470
 8007714:	40020488 	.word	0x40020488
 8007718:	400204a0 	.word	0x400204a0
 800771c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007724:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2201      	movs	r2, #1
 8007730:	409a      	lsls	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a4f      	ldr	r2, [pc, #316]	; (8007878 <HAL_DMA_Abort+0x5dc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d072      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a4d      	ldr	r2, [pc, #308]	; (800787c <HAL_DMA_Abort+0x5e0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d06d      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a4c      	ldr	r2, [pc, #304]	; (8007880 <HAL_DMA_Abort+0x5e4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d068      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a4a      	ldr	r2, [pc, #296]	; (8007884 <HAL_DMA_Abort+0x5e8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d063      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a49      	ldr	r2, [pc, #292]	; (8007888 <HAL_DMA_Abort+0x5ec>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d05e      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a47      	ldr	r2, [pc, #284]	; (800788c <HAL_DMA_Abort+0x5f0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d059      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a46      	ldr	r2, [pc, #280]	; (8007890 <HAL_DMA_Abort+0x5f4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d054      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a44      	ldr	r2, [pc, #272]	; (8007894 <HAL_DMA_Abort+0x5f8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d04f      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a43      	ldr	r2, [pc, #268]	; (8007898 <HAL_DMA_Abort+0x5fc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d04a      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a41      	ldr	r2, [pc, #260]	; (800789c <HAL_DMA_Abort+0x600>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d045      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a40      	ldr	r2, [pc, #256]	; (80078a0 <HAL_DMA_Abort+0x604>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d040      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a3e      	ldr	r2, [pc, #248]	; (80078a4 <HAL_DMA_Abort+0x608>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d03b      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3d      	ldr	r2, [pc, #244]	; (80078a8 <HAL_DMA_Abort+0x60c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d036      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a3b      	ldr	r2, [pc, #236]	; (80078ac <HAL_DMA_Abort+0x610>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d031      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a3a      	ldr	r2, [pc, #232]	; (80078b0 <HAL_DMA_Abort+0x614>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d02c      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a38      	ldr	r2, [pc, #224]	; (80078b4 <HAL_DMA_Abort+0x618>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d027      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a37      	ldr	r2, [pc, #220]	; (80078b8 <HAL_DMA_Abort+0x61c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d022      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a35      	ldr	r2, [pc, #212]	; (80078bc <HAL_DMA_Abort+0x620>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01d      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a34      	ldr	r2, [pc, #208]	; (80078c0 <HAL_DMA_Abort+0x624>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d018      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a32      	ldr	r2, [pc, #200]	; (80078c4 <HAL_DMA_Abort+0x628>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d013      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a31      	ldr	r2, [pc, #196]	; (80078c8 <HAL_DMA_Abort+0x62c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00e      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a2f      	ldr	r2, [pc, #188]	; (80078cc <HAL_DMA_Abort+0x630>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d009      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a2e      	ldr	r2, [pc, #184]	; (80078d0 <HAL_DMA_Abort+0x634>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d004      	beq.n	8007826 <HAL_DMA_Abort+0x58a>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a2c      	ldr	r2, [pc, #176]	; (80078d4 <HAL_DMA_Abort+0x638>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d101      	bne.n	800782a <HAL_DMA_Abort+0x58e>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <HAL_DMA_Abort+0x590>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d015      	beq.n	800785c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007838:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00c      	beq.n	800785c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007850:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800785a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40020010 	.word	0x40020010
 800787c:	40020028 	.word	0x40020028
 8007880:	40020040 	.word	0x40020040
 8007884:	40020058 	.word	0x40020058
 8007888:	40020070 	.word	0x40020070
 800788c:	40020088 	.word	0x40020088
 8007890:	400200a0 	.word	0x400200a0
 8007894:	400200b8 	.word	0x400200b8
 8007898:	40020410 	.word	0x40020410
 800789c:	40020428 	.word	0x40020428
 80078a0:	40020440 	.word	0x40020440
 80078a4:	40020458 	.word	0x40020458
 80078a8:	40020470 	.word	0x40020470
 80078ac:	40020488 	.word	0x40020488
 80078b0:	400204a0 	.word	0x400204a0
 80078b4:	400204b8 	.word	0x400204b8
 80078b8:	58025408 	.word	0x58025408
 80078bc:	5802541c 	.word	0x5802541c
 80078c0:	58025430 	.word	0x58025430
 80078c4:	58025444 	.word	0x58025444
 80078c8:	58025458 	.word	0x58025458
 80078cc:	5802546c 	.word	0x5802546c
 80078d0:	58025480 	.word	0x58025480
 80078d4:	58025494 	.word	0x58025494

080078d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e237      	b.n	8007d5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d004      	beq.n	8007900 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2280      	movs	r2, #128	; 0x80
 80078fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e22c      	b.n	8007d5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a5c      	ldr	r2, [pc, #368]	; (8007a78 <HAL_DMA_Abort_IT+0x1a0>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d04a      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a5b      	ldr	r2, [pc, #364]	; (8007a7c <HAL_DMA_Abort_IT+0x1a4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d045      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a59      	ldr	r2, [pc, #356]	; (8007a80 <HAL_DMA_Abort_IT+0x1a8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d040      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a58      	ldr	r2, [pc, #352]	; (8007a84 <HAL_DMA_Abort_IT+0x1ac>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d03b      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a56      	ldr	r2, [pc, #344]	; (8007a88 <HAL_DMA_Abort_IT+0x1b0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d036      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a55      	ldr	r2, [pc, #340]	; (8007a8c <HAL_DMA_Abort_IT+0x1b4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d031      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a53      	ldr	r2, [pc, #332]	; (8007a90 <HAL_DMA_Abort_IT+0x1b8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d02c      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a52      	ldr	r2, [pc, #328]	; (8007a94 <HAL_DMA_Abort_IT+0x1bc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d027      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a50      	ldr	r2, [pc, #320]	; (8007a98 <HAL_DMA_Abort_IT+0x1c0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d022      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a4f      	ldr	r2, [pc, #316]	; (8007a9c <HAL_DMA_Abort_IT+0x1c4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d01d      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a4d      	ldr	r2, [pc, #308]	; (8007aa0 <HAL_DMA_Abort_IT+0x1c8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d018      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a4c      	ldr	r2, [pc, #304]	; (8007aa4 <HAL_DMA_Abort_IT+0x1cc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d013      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a4a      	ldr	r2, [pc, #296]	; (8007aa8 <HAL_DMA_Abort_IT+0x1d0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00e      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a49      	ldr	r2, [pc, #292]	; (8007aac <HAL_DMA_Abort_IT+0x1d4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d009      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a47      	ldr	r2, [pc, #284]	; (8007ab0 <HAL_DMA_Abort_IT+0x1d8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <HAL_DMA_Abort_IT+0xc8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a46      	ldr	r2, [pc, #280]	; (8007ab4 <HAL_DMA_Abort_IT+0x1dc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d101      	bne.n	80079a4 <HAL_DMA_Abort_IT+0xcc>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e000      	b.n	80079a6 <HAL_DMA_Abort_IT+0xce>
 80079a4:	2300      	movs	r3, #0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8086 	beq.w	8007ab8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2204      	movs	r2, #4
 80079b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a2f      	ldr	r2, [pc, #188]	; (8007a78 <HAL_DMA_Abort_IT+0x1a0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d04a      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a2e      	ldr	r2, [pc, #184]	; (8007a7c <HAL_DMA_Abort_IT+0x1a4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d045      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a2c      	ldr	r2, [pc, #176]	; (8007a80 <HAL_DMA_Abort_IT+0x1a8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d040      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a2b      	ldr	r2, [pc, #172]	; (8007a84 <HAL_DMA_Abort_IT+0x1ac>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d03b      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a29      	ldr	r2, [pc, #164]	; (8007a88 <HAL_DMA_Abort_IT+0x1b0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d036      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a28      	ldr	r2, [pc, #160]	; (8007a8c <HAL_DMA_Abort_IT+0x1b4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d031      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <HAL_DMA_Abort_IT+0x1b8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d02c      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a25      	ldr	r2, [pc, #148]	; (8007a94 <HAL_DMA_Abort_IT+0x1bc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d027      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a23      	ldr	r2, [pc, #140]	; (8007a98 <HAL_DMA_Abort_IT+0x1c0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d022      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a22      	ldr	r2, [pc, #136]	; (8007a9c <HAL_DMA_Abort_IT+0x1c4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01d      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a20      	ldr	r2, [pc, #128]	; (8007aa0 <HAL_DMA_Abort_IT+0x1c8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d018      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <HAL_DMA_Abort_IT+0x1cc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a1d      	ldr	r2, [pc, #116]	; (8007aa8 <HAL_DMA_Abort_IT+0x1d0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1c      	ldr	r2, [pc, #112]	; (8007aac <HAL_DMA_Abort_IT+0x1d4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <HAL_DMA_Abort_IT+0x1d8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_DMA_Abort_IT+0x17c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <HAL_DMA_Abort_IT+0x1dc>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d108      	bne.n	8007a66 <HAL_DMA_Abort_IT+0x18e>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e178      	b.n	8007d58 <HAL_DMA_Abort_IT+0x480>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0201 	bic.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	e16f      	b.n	8007d58 <HAL_DMA_Abort_IT+0x480>
 8007a78:	40020010 	.word	0x40020010
 8007a7c:	40020028 	.word	0x40020028
 8007a80:	40020040 	.word	0x40020040
 8007a84:	40020058 	.word	0x40020058
 8007a88:	40020070 	.word	0x40020070
 8007a8c:	40020088 	.word	0x40020088
 8007a90:	400200a0 	.word	0x400200a0
 8007a94:	400200b8 	.word	0x400200b8
 8007a98:	40020410 	.word	0x40020410
 8007a9c:	40020428 	.word	0x40020428
 8007aa0:	40020440 	.word	0x40020440
 8007aa4:	40020458 	.word	0x40020458
 8007aa8:	40020470 	.word	0x40020470
 8007aac:	40020488 	.word	0x40020488
 8007ab0:	400204a0 	.word	0x400204a0
 8007ab4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 020e 	bic.w	r2, r2, #14
 8007ac6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a6c      	ldr	r2, [pc, #432]	; (8007c80 <HAL_DMA_Abort_IT+0x3a8>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d04a      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a6b      	ldr	r2, [pc, #428]	; (8007c84 <HAL_DMA_Abort_IT+0x3ac>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d045      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a69      	ldr	r2, [pc, #420]	; (8007c88 <HAL_DMA_Abort_IT+0x3b0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d040      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a68      	ldr	r2, [pc, #416]	; (8007c8c <HAL_DMA_Abort_IT+0x3b4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d03b      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a66      	ldr	r2, [pc, #408]	; (8007c90 <HAL_DMA_Abort_IT+0x3b8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d036      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a65      	ldr	r2, [pc, #404]	; (8007c94 <HAL_DMA_Abort_IT+0x3bc>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d031      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a63      	ldr	r2, [pc, #396]	; (8007c98 <HAL_DMA_Abort_IT+0x3c0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d02c      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a62      	ldr	r2, [pc, #392]	; (8007c9c <HAL_DMA_Abort_IT+0x3c4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d027      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a60      	ldr	r2, [pc, #384]	; (8007ca0 <HAL_DMA_Abort_IT+0x3c8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d022      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a5f      	ldr	r2, [pc, #380]	; (8007ca4 <HAL_DMA_Abort_IT+0x3cc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d01d      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a5d      	ldr	r2, [pc, #372]	; (8007ca8 <HAL_DMA_Abort_IT+0x3d0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d018      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a5c      	ldr	r2, [pc, #368]	; (8007cac <HAL_DMA_Abort_IT+0x3d4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a5a      	ldr	r2, [pc, #360]	; (8007cb0 <HAL_DMA_Abort_IT+0x3d8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00e      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a59      	ldr	r2, [pc, #356]	; (8007cb4 <HAL_DMA_Abort_IT+0x3dc>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d009      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a57      	ldr	r2, [pc, #348]	; (8007cb8 <HAL_DMA_Abort_IT+0x3e0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <HAL_DMA_Abort_IT+0x290>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a56      	ldr	r2, [pc, #344]	; (8007cbc <HAL_DMA_Abort_IT+0x3e4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d108      	bne.n	8007b7a <HAL_DMA_Abort_IT+0x2a2>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e007      	b.n	8007b8a <HAL_DMA_Abort_IT+0x2b2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0201 	bic.w	r2, r2, #1
 8007b88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a3c      	ldr	r2, [pc, #240]	; (8007c80 <HAL_DMA_Abort_IT+0x3a8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d072      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a3a      	ldr	r2, [pc, #232]	; (8007c84 <HAL_DMA_Abort_IT+0x3ac>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d06d      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a39      	ldr	r2, [pc, #228]	; (8007c88 <HAL_DMA_Abort_IT+0x3b0>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d068      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a37      	ldr	r2, [pc, #220]	; (8007c8c <HAL_DMA_Abort_IT+0x3b4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d063      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a36      	ldr	r2, [pc, #216]	; (8007c90 <HAL_DMA_Abort_IT+0x3b8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d05e      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a34      	ldr	r2, [pc, #208]	; (8007c94 <HAL_DMA_Abort_IT+0x3bc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d059      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a33      	ldr	r2, [pc, #204]	; (8007c98 <HAL_DMA_Abort_IT+0x3c0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d054      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a31      	ldr	r2, [pc, #196]	; (8007c9c <HAL_DMA_Abort_IT+0x3c4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d04f      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a30      	ldr	r2, [pc, #192]	; (8007ca0 <HAL_DMA_Abort_IT+0x3c8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d04a      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a2e      	ldr	r2, [pc, #184]	; (8007ca4 <HAL_DMA_Abort_IT+0x3cc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d045      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a2d      	ldr	r2, [pc, #180]	; (8007ca8 <HAL_DMA_Abort_IT+0x3d0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d040      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a2b      	ldr	r2, [pc, #172]	; (8007cac <HAL_DMA_Abort_IT+0x3d4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d03b      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <HAL_DMA_Abort_IT+0x3d8>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d036      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a28      	ldr	r2, [pc, #160]	; (8007cb4 <HAL_DMA_Abort_IT+0x3dc>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d031      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <HAL_DMA_Abort_IT+0x3e0>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d02c      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a25      	ldr	r2, [pc, #148]	; (8007cbc <HAL_DMA_Abort_IT+0x3e4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d027      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a24      	ldr	r2, [pc, #144]	; (8007cc0 <HAL_DMA_Abort_IT+0x3e8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d022      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a22      	ldr	r2, [pc, #136]	; (8007cc4 <HAL_DMA_Abort_IT+0x3ec>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01d      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a21      	ldr	r2, [pc, #132]	; (8007cc8 <HAL_DMA_Abort_IT+0x3f0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d018      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1f      	ldr	r2, [pc, #124]	; (8007ccc <HAL_DMA_Abort_IT+0x3f4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d013      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1e      	ldr	r2, [pc, #120]	; (8007cd0 <HAL_DMA_Abort_IT+0x3f8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00e      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <HAL_DMA_Abort_IT+0x3fc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d009      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <HAL_DMA_Abort_IT+0x400>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d004      	beq.n	8007c7a <HAL_DMA_Abort_IT+0x3a2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <HAL_DMA_Abort_IT+0x404>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d132      	bne.n	8007ce0 <HAL_DMA_Abort_IT+0x408>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e031      	b.n	8007ce2 <HAL_DMA_Abort_IT+0x40a>
 8007c7e:	bf00      	nop
 8007c80:	40020010 	.word	0x40020010
 8007c84:	40020028 	.word	0x40020028
 8007c88:	40020040 	.word	0x40020040
 8007c8c:	40020058 	.word	0x40020058
 8007c90:	40020070 	.word	0x40020070
 8007c94:	40020088 	.word	0x40020088
 8007c98:	400200a0 	.word	0x400200a0
 8007c9c:	400200b8 	.word	0x400200b8
 8007ca0:	40020410 	.word	0x40020410
 8007ca4:	40020428 	.word	0x40020428
 8007ca8:	40020440 	.word	0x40020440
 8007cac:	40020458 	.word	0x40020458
 8007cb0:	40020470 	.word	0x40020470
 8007cb4:	40020488 	.word	0x40020488
 8007cb8:	400204a0 	.word	0x400204a0
 8007cbc:	400204b8 	.word	0x400204b8
 8007cc0:	58025408 	.word	0x58025408
 8007cc4:	5802541c 	.word	0x5802541c
 8007cc8:	58025430 	.word	0x58025430
 8007ccc:	58025444 	.word	0x58025444
 8007cd0:	58025458 	.word	0x58025458
 8007cd4:	5802546c 	.word	0x5802546c
 8007cd8:	58025480 	.word	0x58025480
 8007cdc:	58025494 	.word	0x58025494
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d028      	beq.n	8007d38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cf4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	2201      	movs	r2, #1
 8007d06:	409a      	lsls	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00c      	beq.n	8007d38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b089      	sub	sp, #36	; 0x24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d72:	4b89      	ldr	r3, [pc, #548]	; (8007f98 <HAL_GPIO_Init+0x234>)
 8007d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d76:	e194      	b.n	80080a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	fa01 f303 	lsl.w	r3, r1, r3
 8007d84:	4013      	ands	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 8186 	beq.w	800809c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 0303 	and.w	r3, r3, #3
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d005      	beq.n	8007da8 <HAL_GPIO_Init+0x44>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d130      	bne.n	8007e0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	2203      	movs	r2, #3
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	43db      	mvns	r3, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dde:	2201      	movs	r2, #1
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	091b      	lsrs	r3, r3, #4
 8007df4:	f003 0201 	and.w	r2, r3, #1
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d017      	beq.n	8007e46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	2203      	movs	r2, #3
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	43db      	mvns	r3, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d123      	bne.n	8007e9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	08da      	lsrs	r2, r3, #3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3208      	adds	r2, #8
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	220f      	movs	r2, #15
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	691a      	ldr	r2, [r3, #16]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	fa02 f303 	lsl.w	r3, r2, r3
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	08da      	lsrs	r2, r3, #3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3208      	adds	r2, #8
 8007e94:	69b9      	ldr	r1, [r7, #24]
 8007e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	2203      	movs	r2, #3
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	43db      	mvns	r3, r3
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f003 0203 	and.w	r2, r3, #3
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 80e0 	beq.w	800809c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007edc:	4b2f      	ldr	r3, [pc, #188]	; (8007f9c <HAL_GPIO_Init+0x238>)
 8007ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ee2:	4a2e      	ldr	r2, [pc, #184]	; (8007f9c <HAL_GPIO_Init+0x238>)
 8007ee4:	f043 0302 	orr.w	r3, r3, #2
 8007ee8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007eec:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <HAL_GPIO_Init+0x238>)
 8007eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007efa:	4a29      	ldr	r2, [pc, #164]	; (8007fa0 <HAL_GPIO_Init+0x23c>)
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	3302      	adds	r3, #2
 8007f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	220f      	movs	r2, #15
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43db      	mvns	r3, r3
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <HAL_GPIO_Init+0x240>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d052      	beq.n	8007fcc <HAL_GPIO_Init+0x268>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1f      	ldr	r2, [pc, #124]	; (8007fa8 <HAL_GPIO_Init+0x244>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d031      	beq.n	8007f92 <HAL_GPIO_Init+0x22e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1e      	ldr	r2, [pc, #120]	; (8007fac <HAL_GPIO_Init+0x248>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d02b      	beq.n	8007f8e <HAL_GPIO_Init+0x22a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1d      	ldr	r2, [pc, #116]	; (8007fb0 <HAL_GPIO_Init+0x24c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d025      	beq.n	8007f8a <HAL_GPIO_Init+0x226>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	; (8007fb4 <HAL_GPIO_Init+0x250>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01f      	beq.n	8007f86 <HAL_GPIO_Init+0x222>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1b      	ldr	r2, [pc, #108]	; (8007fb8 <HAL_GPIO_Init+0x254>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d019      	beq.n	8007f82 <HAL_GPIO_Init+0x21e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1a      	ldr	r2, [pc, #104]	; (8007fbc <HAL_GPIO_Init+0x258>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <HAL_GPIO_Init+0x21a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <HAL_GPIO_Init+0x25c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00d      	beq.n	8007f7a <HAL_GPIO_Init+0x216>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a18      	ldr	r2, [pc, #96]	; (8007fc4 <HAL_GPIO_Init+0x260>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <HAL_GPIO_Init+0x212>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a17      	ldr	r2, [pc, #92]	; (8007fc8 <HAL_GPIO_Init+0x264>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d101      	bne.n	8007f72 <HAL_GPIO_Init+0x20e>
 8007f6e:	2309      	movs	r3, #9
 8007f70:	e02d      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f72:	230a      	movs	r3, #10
 8007f74:	e02b      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f76:	2308      	movs	r3, #8
 8007f78:	e029      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f7a:	2307      	movs	r3, #7
 8007f7c:	e027      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f7e:	2306      	movs	r3, #6
 8007f80:	e025      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f82:	2305      	movs	r3, #5
 8007f84:	e023      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f86:	2304      	movs	r3, #4
 8007f88:	e021      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e01f      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e01d      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e01b      	b.n	8007fce <HAL_GPIO_Init+0x26a>
 8007f96:	bf00      	nop
 8007f98:	58000080 	.word	0x58000080
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	58000400 	.word	0x58000400
 8007fa4:	58020000 	.word	0x58020000
 8007fa8:	58020400 	.word	0x58020400
 8007fac:	58020800 	.word	0x58020800
 8007fb0:	58020c00 	.word	0x58020c00
 8007fb4:	58021000 	.word	0x58021000
 8007fb8:	58021400 	.word	0x58021400
 8007fbc:	58021800 	.word	0x58021800
 8007fc0:	58021c00 	.word	0x58021c00
 8007fc4:	58022000 	.word	0x58022000
 8007fc8:	58022400 	.word	0x58022400
 8007fcc:	2300      	movs	r3, #0
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	f002 0203 	and.w	r2, r2, #3
 8007fd4:	0092      	lsls	r2, r2, #2
 8007fd6:	4093      	lsls	r3, r2
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fde:	4938      	ldr	r1, [pc, #224]	; (80080c0 <HAL_GPIO_Init+0x35c>)
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	089b      	lsrs	r3, r3, #2
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4313      	orrs	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800801a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	43db      	mvns	r3, r3
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	4013      	ands	r3, r2
 800802a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	43db      	mvns	r3, r3
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4013      	ands	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	43db      	mvns	r3, r3
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	4013      	ands	r3, r2
 8008080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	4313      	orrs	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3301      	adds	r3, #1
 80080a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f47f ae63 	bne.w	8007d78 <HAL_GPIO_Init+0x14>
  }
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	3724      	adds	r7, #36	; 0x24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	58000400 	.word	0x58000400

080080c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	887b      	ldrh	r3, [r7, #2]
 80080d6:	4013      	ands	r3, r2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080dc:	2301      	movs	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
 80080e0:	e001      	b.n	80080e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	807b      	strh	r3, [r7, #2]
 8008100:	4613      	mov	r3, r2
 8008102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008104:	787b      	ldrb	r3, [r7, #1]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800810a:	887a      	ldrh	r2, [r7, #2]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008110:	e003      	b.n	800811a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008112:	887b      	ldrh	r3, [r7, #2]
 8008114:	041a      	lsls	r2, r3, #16
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	619a      	str	r2, [r3, #24]
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	4603      	mov	r3, r0
 800812e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008134:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	4013      	ands	r3, r2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d008      	beq.n	8008152 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	4618      	mov	r0, r3
 800814e:	f7fa ffe1 	bl	8003114 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008164:	4b19      	ldr	r3, [pc, #100]	; (80081cc <HAL_PWREx_ConfigSupply+0x70>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b04      	cmp	r3, #4
 800816e:	d00a      	beq.n	8008186 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008170:	4b16      	ldr	r3, [pc, #88]	; (80081cc <HAL_PWREx_ConfigSupply+0x70>)
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	429a      	cmp	r2, r3
 800817c:	d001      	beq.n	8008182 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e01f      	b.n	80081c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	e01d      	b.n	80081c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <HAL_PWREx_ConfigSupply+0x70>)
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f023 0207 	bic.w	r2, r3, #7
 800818e:	490f      	ldr	r1, [pc, #60]	; (80081cc <HAL_PWREx_ConfigSupply+0x70>)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4313      	orrs	r3, r2
 8008194:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008196:	f7fe ff03 	bl	8006fa0 <HAL_GetTick>
 800819a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800819c:	e009      	b.n	80081b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800819e:	f7fe feff 	bl	8006fa0 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081ac:	d901      	bls.n	80081b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e007      	b.n	80081c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <HAL_PWREx_ConfigSupply+0x70>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081be:	d1ee      	bne.n	800819e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	58024800 	.word	0x58024800

080081d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08c      	sub	sp, #48	; 0x30
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d102      	bne.n	80081e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	f000 bc1d 	b.w	8008a1e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8087 	beq.w	8008300 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081f2:	4b99      	ldr	r3, [pc, #612]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081fc:	4b96      	ldr	r3, [pc, #600]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	2b10      	cmp	r3, #16
 8008206:	d007      	beq.n	8008218 <HAL_RCC_OscConfig+0x48>
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	2b18      	cmp	r3, #24
 800820c:	d110      	bne.n	8008230 <HAL_RCC_OscConfig+0x60>
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	2b02      	cmp	r3, #2
 8008216:	d10b      	bne.n	8008230 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008218:	4b8f      	ldr	r3, [pc, #572]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d06c      	beq.n	80082fe <HAL_RCC_OscConfig+0x12e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d168      	bne.n	80082fe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e3f6      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008238:	d106      	bne.n	8008248 <HAL_RCC_OscConfig+0x78>
 800823a:	4b87      	ldr	r3, [pc, #540]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a86      	ldr	r2, [pc, #536]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e02e      	b.n	80082a6 <HAL_RCC_OscConfig+0xd6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10c      	bne.n	800826a <HAL_RCC_OscConfig+0x9a>
 8008250:	4b81      	ldr	r3, [pc, #516]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a80      	ldr	r2, [pc, #512]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	4b7e      	ldr	r3, [pc, #504]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a7d      	ldr	r2, [pc, #500]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	e01d      	b.n	80082a6 <HAL_RCC_OscConfig+0xd6>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008272:	d10c      	bne.n	800828e <HAL_RCC_OscConfig+0xbe>
 8008274:	4b78      	ldr	r3, [pc, #480]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a77      	ldr	r2, [pc, #476]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800827a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	4b75      	ldr	r3, [pc, #468]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a74      	ldr	r2, [pc, #464]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e00b      	b.n	80082a6 <HAL_RCC_OscConfig+0xd6>
 800828e:	4b72      	ldr	r3, [pc, #456]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a71      	ldr	r2, [pc, #452]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	4b6f      	ldr	r3, [pc, #444]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a6e      	ldr	r2, [pc, #440]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80082a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d013      	beq.n	80082d6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ae:	f7fe fe77 	bl	8006fa0 <HAL_GetTick>
 80082b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082b6:	f7fe fe73 	bl	8006fa0 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b64      	cmp	r3, #100	; 0x64
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e3aa      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082c8:	4b63      	ldr	r3, [pc, #396]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0f0      	beq.n	80082b6 <HAL_RCC_OscConfig+0xe6>
 80082d4:	e014      	b.n	8008300 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d6:	f7fe fe63 	bl	8006fa0 <HAL_GetTick>
 80082da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082de:	f7fe fe5f 	bl	8006fa0 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b64      	cmp	r3, #100	; 0x64
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e396      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082f0:	4b59      	ldr	r3, [pc, #356]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f0      	bne.n	80082de <HAL_RCC_OscConfig+0x10e>
 80082fc:	e000      	b.n	8008300 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80cb 	beq.w	80084a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800830e:	4b52      	ldr	r3, [pc, #328]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008316:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008318:	4b4f      	ldr	r3, [pc, #316]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d007      	beq.n	8008334 <HAL_RCC_OscConfig+0x164>
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	2b18      	cmp	r3, #24
 8008328:	d156      	bne.n	80083d8 <HAL_RCC_OscConfig+0x208>
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d151      	bne.n	80083d8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008334:	4b48      	ldr	r3, [pc, #288]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_RCC_OscConfig+0x17c>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e368      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800834c:	4b42      	ldr	r3, [pc, #264]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f023 0219 	bic.w	r2, r3, #25
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	493f      	ldr	r1, [pc, #252]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800835a:	4313      	orrs	r3, r2
 800835c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800835e:	f7fe fe1f 	bl	8006fa0 <HAL_GetTick>
 8008362:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008364:	e008      	b.n	8008378 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008366:	f7fe fe1b 	bl	8006fa0 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e352      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008378:	4b37      	ldr	r3, [pc, #220]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0f0      	beq.n	8008366 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008384:	f7fe fe3c 	bl	8007000 <HAL_GetREVID>
 8008388:	4603      	mov	r3, r0
 800838a:	f241 0203 	movw	r2, #4099	; 0x1003
 800838e:	4293      	cmp	r3, r2
 8008390:	d817      	bhi.n	80083c2 <HAL_RCC_OscConfig+0x1f2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d108      	bne.n	80083ac <HAL_RCC_OscConfig+0x1dc>
 800839a:	4b2f      	ldr	r3, [pc, #188]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80083a2:	4a2d      	ldr	r2, [pc, #180]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80083a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083aa:	e07b      	b.n	80084a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ac:	4b2a      	ldr	r3, [pc, #168]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	031b      	lsls	r3, r3, #12
 80083ba:	4927      	ldr	r1, [pc, #156]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083c0:	e070      	b.n	80084a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c2:	4b25      	ldr	r3, [pc, #148]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	061b      	lsls	r3, r3, #24
 80083d0:	4921      	ldr	r1, [pc, #132]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d6:	e065      	b.n	80084a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d048      	beq.n	8008472 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083e0:	4b1d      	ldr	r3, [pc, #116]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f023 0219 	bic.w	r2, r3, #25
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	491a      	ldr	r1, [pc, #104]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f2:	f7fe fdd5 	bl	8006fa0 <HAL_GetTick>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083fa:	f7fe fdd1 	bl	8006fa0 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e308      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f0      	beq.n	80083fa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008418:	f7fe fdf2 	bl	8007000 <HAL_GetREVID>
 800841c:	4603      	mov	r3, r0
 800841e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008422:	4293      	cmp	r3, r2
 8008424:	d81a      	bhi.n	800845c <HAL_RCC_OscConfig+0x28c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d108      	bne.n	8008440 <HAL_RCC_OscConfig+0x270>
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008436:	4a08      	ldr	r2, [pc, #32]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843c:	6053      	str	r3, [r2, #4]
 800843e:	e031      	b.n	80084a4 <HAL_RCC_OscConfig+0x2d4>
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	031b      	lsls	r3, r3, #12
 800844e:	4902      	ldr	r1, [pc, #8]	; (8008458 <HAL_RCC_OscConfig+0x288>)
 8008450:	4313      	orrs	r3, r2
 8008452:	604b      	str	r3, [r1, #4]
 8008454:	e026      	b.n	80084a4 <HAL_RCC_OscConfig+0x2d4>
 8008456:	bf00      	nop
 8008458:	58024400 	.word	0x58024400
 800845c:	4b9a      	ldr	r3, [pc, #616]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	061b      	lsls	r3, r3, #24
 800846a:	4997      	ldr	r1, [pc, #604]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800846c:	4313      	orrs	r3, r2
 800846e:	604b      	str	r3, [r1, #4]
 8008470:	e018      	b.n	80084a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008472:	4b95      	ldr	r3, [pc, #596]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a94      	ldr	r2, [pc, #592]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7fe fd8f 	bl	8006fa0 <HAL_GetTick>
 8008482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008486:	f7fe fd8b 	bl	8006fa0 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e2c2      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008498:	4b8b      	ldr	r3, [pc, #556]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0310 	and.w	r3, r3, #16
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80a9 	beq.w	8008604 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084b2:	4b85      	ldr	r3, [pc, #532]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084bc:	4b82      	ldr	r3, [pc, #520]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d007      	beq.n	80084d8 <HAL_RCC_OscConfig+0x308>
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b18      	cmp	r3, #24
 80084cc:	d13a      	bne.n	8008544 <HAL_RCC_OscConfig+0x374>
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d135      	bne.n	8008544 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084d8:	4b7b      	ldr	r3, [pc, #492]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <HAL_RCC_OscConfig+0x320>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	2b80      	cmp	r3, #128	; 0x80
 80084ea:	d001      	beq.n	80084f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e296      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084f0:	f7fe fd86 	bl	8007000 <HAL_GetREVID>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d817      	bhi.n	800852e <HAL_RCC_OscConfig+0x35e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	2b20      	cmp	r3, #32
 8008504:	d108      	bne.n	8008518 <HAL_RCC_OscConfig+0x348>
 8008506:	4b70      	ldr	r3, [pc, #448]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800850e:	4a6e      	ldr	r2, [pc, #440]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008514:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008516:	e075      	b.n	8008604 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008518:	4b6b      	ldr	r3, [pc, #428]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	069b      	lsls	r3, r3, #26
 8008526:	4968      	ldr	r1, [pc, #416]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008528:	4313      	orrs	r3, r2
 800852a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800852c:	e06a      	b.n	8008604 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800852e:	4b66      	ldr	r3, [pc, #408]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	061b      	lsls	r3, r3, #24
 800853c:	4962      	ldr	r1, [pc, #392]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800853e:	4313      	orrs	r3, r2
 8008540:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008542:	e05f      	b.n	8008604 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d042      	beq.n	80085d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800854c:	4b5e      	ldr	r3, [pc, #376]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a5d      	ldr	r2, [pc, #372]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008558:	f7fe fd22 	bl	8006fa0 <HAL_GetTick>
 800855c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008560:	f7fe fd1e 	bl	8006fa0 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e255      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008572:	4b55      	ldr	r3, [pc, #340]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800857e:	f7fe fd3f 	bl	8007000 <HAL_GetREVID>
 8008582:	4603      	mov	r3, r0
 8008584:	f241 0203 	movw	r2, #4099	; 0x1003
 8008588:	4293      	cmp	r3, r2
 800858a:	d817      	bhi.n	80085bc <HAL_RCC_OscConfig+0x3ec>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	2b20      	cmp	r3, #32
 8008592:	d108      	bne.n	80085a6 <HAL_RCC_OscConfig+0x3d6>
 8008594:	4b4c      	ldr	r3, [pc, #304]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800859c:	4a4a      	ldr	r2, [pc, #296]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800859e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085a2:	6053      	str	r3, [r2, #4]
 80085a4:	e02e      	b.n	8008604 <HAL_RCC_OscConfig+0x434>
 80085a6:	4b48      	ldr	r3, [pc, #288]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	069b      	lsls	r3, r3, #26
 80085b4:	4944      	ldr	r1, [pc, #272]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	604b      	str	r3, [r1, #4]
 80085ba:	e023      	b.n	8008604 <HAL_RCC_OscConfig+0x434>
 80085bc:	4b42      	ldr	r3, [pc, #264]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	061b      	lsls	r3, r3, #24
 80085ca:	493f      	ldr	r1, [pc, #252]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60cb      	str	r3, [r1, #12]
 80085d0:	e018      	b.n	8008604 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80085d2:	4b3d      	ldr	r3, [pc, #244]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a3c      	ldr	r2, [pc, #240]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80085d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085de:	f7fe fcdf 	bl	8006fa0 <HAL_GetTick>
 80085e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085e4:	e008      	b.n	80085f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085e6:	f7fe fcdb 	bl	8006fa0 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d901      	bls.n	80085f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e212      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085f8:	4b33      	ldr	r3, [pc, #204]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f0      	bne.n	80085e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d036      	beq.n	800867e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d019      	beq.n	800864c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008618:	4b2b      	ldr	r3, [pc, #172]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800861a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800861c:	4a2a      	ldr	r2, [pc, #168]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800861e:	f043 0301 	orr.w	r3, r3, #1
 8008622:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008624:	f7fe fcbc 	bl	8006fa0 <HAL_GetTick>
 8008628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800862a:	e008      	b.n	800863e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800862c:	f7fe fcb8 	bl	8006fa0 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e1ef      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800863e:	4b22      	ldr	r3, [pc, #136]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0f0      	beq.n	800862c <HAL_RCC_OscConfig+0x45c>
 800864a:	e018      	b.n	800867e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800864c:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 800864e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008650:	4a1d      	ldr	r2, [pc, #116]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008652:	f023 0301 	bic.w	r3, r3, #1
 8008656:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008658:	f7fe fca2 	bl	8006fa0 <HAL_GetTick>
 800865c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008660:	f7fe fc9e 	bl	8006fa0 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e1d5      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b00      	cmp	r3, #0
 8008688:	d039      	beq.n	80086fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d01c      	beq.n	80086cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008692:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a0c      	ldr	r2, [pc, #48]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 8008698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800869c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800869e:	f7fe fc7f 	bl	8006fa0 <HAL_GetTick>
 80086a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086a4:	e008      	b.n	80086b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086a6:	f7fe fc7b 	bl	8006fa0 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d901      	bls.n	80086b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e1b2      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086b8:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <HAL_RCC_OscConfig+0x4f8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0f0      	beq.n	80086a6 <HAL_RCC_OscConfig+0x4d6>
 80086c4:	e01b      	b.n	80086fe <HAL_RCC_OscConfig+0x52e>
 80086c6:	bf00      	nop
 80086c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086cc:	4b9b      	ldr	r3, [pc, #620]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a9a      	ldr	r2, [pc, #616]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80086d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086d8:	f7fe fc62 	bl	8006fa0 <HAL_GetTick>
 80086dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086e0:	f7fe fc5e 	bl	8006fa0 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e195      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086f2:	4b92      	ldr	r3, [pc, #584]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1f0      	bne.n	80086e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 8081 	beq.w	800880e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800870c:	4b8c      	ldr	r3, [pc, #560]	; (8008940 <HAL_RCC_OscConfig+0x770>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a8b      	ldr	r2, [pc, #556]	; (8008940 <HAL_RCC_OscConfig+0x770>)
 8008712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008718:	f7fe fc42 	bl	8006fa0 <HAL_GetTick>
 800871c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008720:	f7fe fc3e 	bl	8006fa0 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b64      	cmp	r3, #100	; 0x64
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e175      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008732:	4b83      	ldr	r3, [pc, #524]	; (8008940 <HAL_RCC_OscConfig+0x770>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0f0      	beq.n	8008720 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d106      	bne.n	8008754 <HAL_RCC_OscConfig+0x584>
 8008746:	4b7d      	ldr	r3, [pc, #500]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	4a7c      	ldr	r2, [pc, #496]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800874c:	f043 0301 	orr.w	r3, r3, #1
 8008750:	6713      	str	r3, [r2, #112]	; 0x70
 8008752:	e02d      	b.n	80087b0 <HAL_RCC_OscConfig+0x5e0>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10c      	bne.n	8008776 <HAL_RCC_OscConfig+0x5a6>
 800875c:	4b77      	ldr	r3, [pc, #476]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800875e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008760:	4a76      	ldr	r2, [pc, #472]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008762:	f023 0301 	bic.w	r3, r3, #1
 8008766:	6713      	str	r3, [r2, #112]	; 0x70
 8008768:	4b74      	ldr	r3, [pc, #464]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800876a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876c:	4a73      	ldr	r2, [pc, #460]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800876e:	f023 0304 	bic.w	r3, r3, #4
 8008772:	6713      	str	r3, [r2, #112]	; 0x70
 8008774:	e01c      	b.n	80087b0 <HAL_RCC_OscConfig+0x5e0>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	2b05      	cmp	r3, #5
 800877c:	d10c      	bne.n	8008798 <HAL_RCC_OscConfig+0x5c8>
 800877e:	4b6f      	ldr	r3, [pc, #444]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008782:	4a6e      	ldr	r2, [pc, #440]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008784:	f043 0304 	orr.w	r3, r3, #4
 8008788:	6713      	str	r3, [r2, #112]	; 0x70
 800878a:	4b6c      	ldr	r3, [pc, #432]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800878c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878e:	4a6b      	ldr	r2, [pc, #428]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	6713      	str	r3, [r2, #112]	; 0x70
 8008796:	e00b      	b.n	80087b0 <HAL_RCC_OscConfig+0x5e0>
 8008798:	4b68      	ldr	r3, [pc, #416]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800879a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879c:	4a67      	ldr	r2, [pc, #412]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	6713      	str	r3, [r2, #112]	; 0x70
 80087a4:	4b65      	ldr	r3, [pc, #404]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80087a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a8:	4a64      	ldr	r2, [pc, #400]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80087aa:	f023 0304 	bic.w	r3, r3, #4
 80087ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d015      	beq.n	80087e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b8:	f7fe fbf2 	bl	8006fa0 <HAL_GetTick>
 80087bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087be:	e00a      	b.n	80087d6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087c0:	f7fe fbee 	bl	8006fa0 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e123      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087d6:	4b59      	ldr	r3, [pc, #356]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80087d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0ee      	beq.n	80087c0 <HAL_RCC_OscConfig+0x5f0>
 80087e2:	e014      	b.n	800880e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e4:	f7fe fbdc 	bl	8006fa0 <HAL_GetTick>
 80087e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087ea:	e00a      	b.n	8008802 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087ec:	f7fe fbd8 	bl	8006fa0 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e10d      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008802:	4b4e      	ldr	r3, [pc, #312]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1ee      	bne.n	80087ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 8102 	beq.w	8008a1c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008818:	4b48      	ldr	r3, [pc, #288]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008820:	2b18      	cmp	r3, #24
 8008822:	f000 80bd 	beq.w	80089a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	2b02      	cmp	r3, #2
 800882c:	f040 809e 	bne.w	800896c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008830:	4b42      	ldr	r3, [pc, #264]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a41      	ldr	r2, [pc, #260]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800883a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7fe fbb0 	bl	8006fa0 <HAL_GetTick>
 8008840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008844:	f7fe fbac 	bl	8006fa0 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e0e3      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008856:	4b39      	ldr	r3, [pc, #228]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008862:	4b36      	ldr	r3, [pc, #216]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008866:	4b37      	ldr	r3, [pc, #220]	; (8008944 <HAL_RCC_OscConfig+0x774>)
 8008868:	4013      	ands	r3, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008872:	0112      	lsls	r2, r2, #4
 8008874:	430a      	orrs	r2, r1
 8008876:	4931      	ldr	r1, [pc, #196]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008878:	4313      	orrs	r3, r2
 800887a:	628b      	str	r3, [r1, #40]	; 0x28
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	3b01      	subs	r3, #1
 8008882:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888a:	3b01      	subs	r3, #1
 800888c:	025b      	lsls	r3, r3, #9
 800888e:	b29b      	uxth	r3, r3
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	3b01      	subs	r3, #1
 8008898:	041b      	lsls	r3, r3, #16
 800889a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a4:	3b01      	subs	r3, #1
 80088a6:	061b      	lsls	r3, r3, #24
 80088a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088ac:	4923      	ldr	r1, [pc, #140]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80088b2:	4b22      	ldr	r3, [pc, #136]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	4a21      	ldr	r2, [pc, #132]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088b8:	f023 0301 	bic.w	r3, r3, #1
 80088bc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088be:	4b1f      	ldr	r3, [pc, #124]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c2:	4b21      	ldr	r3, [pc, #132]	; (8008948 <HAL_RCC_OscConfig+0x778>)
 80088c4:	4013      	ands	r3, r2
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088ca:	00d2      	lsls	r2, r2, #3
 80088cc:	491b      	ldr	r1, [pc, #108]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80088d2:	4b1a      	ldr	r3, [pc, #104]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	f023 020c 	bic.w	r2, r3, #12
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	4917      	ldr	r1, [pc, #92]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80088e4:	4b15      	ldr	r3, [pc, #84]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	f023 0202 	bic.w	r2, r3, #2
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f0:	4912      	ldr	r1, [pc, #72]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80088f6:	4b11      	ldr	r3, [pc, #68]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 80088fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	4a0d      	ldr	r2, [pc, #52]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	4a0a      	ldr	r2, [pc, #40]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800891a:	4b08      	ldr	r3, [pc, #32]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	4a07      	ldr	r2, [pc, #28]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008926:	4b05      	ldr	r3, [pc, #20]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a04      	ldr	r2, [pc, #16]	; (800893c <HAL_RCC_OscConfig+0x76c>)
 800892c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008932:	f7fe fb35 	bl	8006fa0 <HAL_GetTick>
 8008936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008938:	e011      	b.n	800895e <HAL_RCC_OscConfig+0x78e>
 800893a:	bf00      	nop
 800893c:	58024400 	.word	0x58024400
 8008940:	58024800 	.word	0x58024800
 8008944:	fffffc0c 	.word	0xfffffc0c
 8008948:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800894c:	f7fe fb28 	bl	8006fa0 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e05f      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800895e:	4b32      	ldr	r3, [pc, #200]	; (8008a28 <HAL_RCC_OscConfig+0x858>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0x77c>
 800896a:	e057      	b.n	8008a1c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800896c:	4b2e      	ldr	r3, [pc, #184]	; (8008a28 <HAL_RCC_OscConfig+0x858>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2d      	ldr	r2, [pc, #180]	; (8008a28 <HAL_RCC_OscConfig+0x858>)
 8008972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008978:	f7fe fb12 	bl	8006fa0 <HAL_GetTick>
 800897c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800897e:	e008      	b.n	8008992 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008980:	f7fe fb0e 	bl	8006fa0 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e045      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008992:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <HAL_RCC_OscConfig+0x858>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f0      	bne.n	8008980 <HAL_RCC_OscConfig+0x7b0>
 800899e:	e03d      	b.n	8008a1c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80089a0:	4b21      	ldr	r3, [pc, #132]	; (8008a28 <HAL_RCC_OscConfig+0x858>)
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80089a6:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <HAL_RCC_OscConfig+0x858>)
 80089a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d031      	beq.n	8008a18 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f003 0203 	and.w	r2, r3, #3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089be:	429a      	cmp	r2, r3
 80089c0:	d12a      	bne.n	8008a18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	091b      	lsrs	r3, r3, #4
 80089c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d122      	bne.n	8008a18 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089de:	429a      	cmp	r2, r3
 80089e0:	d11a      	bne.n	8008a18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	0a5b      	lsrs	r3, r3, #9
 80089e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d111      	bne.n	8008a18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d108      	bne.n	8008a18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	0e1b      	lsrs	r3, r3, #24
 8008a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d001      	beq.n	8008a1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e000      	b.n	8008a1e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3730      	adds	r7, #48	; 0x30
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	58024400 	.word	0x58024400

08008a2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e19c      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a40:	4b8a      	ldr	r3, [pc, #552]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d910      	bls.n	8008a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a4e:	4b87      	ldr	r3, [pc, #540]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f023 020f 	bic.w	r2, r3, #15
 8008a56:	4985      	ldr	r1, [pc, #532]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a5e:	4b83      	ldr	r3, [pc, #524]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d001      	beq.n	8008a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e184      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d010      	beq.n	8008a9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	4b7b      	ldr	r3, [pc, #492]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d908      	bls.n	8008a9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a8c:	4b78      	ldr	r3, [pc, #480]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	4975      	ldr	r1, [pc, #468]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d010      	beq.n	8008acc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695a      	ldr	r2, [r3, #20]
 8008aae:	4b70      	ldr	r3, [pc, #448]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d908      	bls.n	8008acc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008aba:	4b6d      	ldr	r3, [pc, #436]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	496a      	ldr	r1, [pc, #424]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d010      	beq.n	8008afa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699a      	ldr	r2, [r3, #24]
 8008adc:	4b64      	ldr	r3, [pc, #400]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d908      	bls.n	8008afa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ae8:	4b61      	ldr	r3, [pc, #388]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	495e      	ldr	r1, [pc, #376]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d010      	beq.n	8008b28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69da      	ldr	r2, [r3, #28]
 8008b0a:	4b59      	ldr	r3, [pc, #356]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d908      	bls.n	8008b28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b16:	4b56      	ldr	r3, [pc, #344]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	4953      	ldr	r1, [pc, #332]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d010      	beq.n	8008b56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	4b4d      	ldr	r3, [pc, #308]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f003 030f 	and.w	r3, r3, #15
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d908      	bls.n	8008b56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b44:	4b4a      	ldr	r3, [pc, #296]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	f023 020f 	bic.w	r2, r3, #15
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	4947      	ldr	r1, [pc, #284]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d055      	beq.n	8008c0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b62:	4b43      	ldr	r3, [pc, #268]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	4940      	ldr	r1, [pc, #256]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d107      	bne.n	8008b8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b7c:	4b3c      	ldr	r3, [pc, #240]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d121      	bne.n	8008bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e0f6      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d107      	bne.n	8008ba4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b94:	4b36      	ldr	r3, [pc, #216]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d115      	bne.n	8008bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0ea      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d107      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bac:	4b30      	ldr	r3, [pc, #192]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d109      	bne.n	8008bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0de      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bbc:	4b2c      	ldr	r3, [pc, #176]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0d6      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bcc:	4b28      	ldr	r3, [pc, #160]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f023 0207 	bic.w	r2, r3, #7
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	4925      	ldr	r1, [pc, #148]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bde:	f7fe f9df 	bl	8006fa0 <HAL_GetTick>
 8008be2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be4:	e00a      	b.n	8008bfc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008be6:	f7fe f9db 	bl	8006fa0 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e0be      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bfc:	4b1c      	ldr	r3, [pc, #112]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d1eb      	bne.n	8008be6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d010      	beq.n	8008c3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	4b14      	ldr	r3, [pc, #80]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	f003 030f 	and.w	r3, r3, #15
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d208      	bcs.n	8008c3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c2a:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f023 020f 	bic.w	r2, r3, #15
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	490e      	ldr	r1, [pc, #56]	; (8008c70 <HAL_RCC_ClockConfig+0x244>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c3c:	4b0b      	ldr	r3, [pc, #44]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 030f 	and.w	r3, r3, #15
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d214      	bcs.n	8008c74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4a:	4b08      	ldr	r3, [pc, #32]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f023 020f 	bic.w	r2, r3, #15
 8008c52:	4906      	ldr	r1, [pc, #24]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c5a:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <HAL_RCC_ClockConfig+0x240>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d005      	beq.n	8008c74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e086      	b.n	8008d7a <HAL_RCC_ClockConfig+0x34e>
 8008c6c:	52002000 	.word	0x52002000
 8008c70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	691a      	ldr	r2, [r3, #16]
 8008c84:	4b3f      	ldr	r3, [pc, #252]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d208      	bcs.n	8008ca2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c90:	4b3c      	ldr	r3, [pc, #240]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	4939      	ldr	r1, [pc, #228]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0308 	and.w	r3, r3, #8
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d010      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695a      	ldr	r2, [r3, #20]
 8008cb2:	4b34      	ldr	r3, [pc, #208]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d208      	bcs.n	8008cd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cbe:	4b31      	ldr	r3, [pc, #196]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	492e      	ldr	r1, [pc, #184]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d010      	beq.n	8008cfe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	699a      	ldr	r2, [r3, #24]
 8008ce0:	4b28      	ldr	r3, [pc, #160]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d208      	bcs.n	8008cfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cec:	4b25      	ldr	r3, [pc, #148]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	4922      	ldr	r1, [pc, #136]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d010      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69da      	ldr	r2, [r3, #28]
 8008d0e:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d208      	bcs.n	8008d2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d1a:	4b1a      	ldr	r3, [pc, #104]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	4917      	ldr	r1, [pc, #92]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d2c:	f000 f834 	bl	8008d98 <HAL_RCC_GetSysClockFreq>
 8008d30:	4602      	mov	r2, r0
 8008d32:	4b14      	ldr	r3, [pc, #80]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	0a1b      	lsrs	r3, r3, #8
 8008d38:	f003 030f 	and.w	r3, r3, #15
 8008d3c:	4912      	ldr	r1, [pc, #72]	; (8008d88 <HAL_RCC_ClockConfig+0x35c>)
 8008d3e:	5ccb      	ldrb	r3, [r1, r3]
 8008d40:	f003 031f 	and.w	r3, r3, #31
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <HAL_RCC_ClockConfig+0x358>)
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	4a0d      	ldr	r2, [pc, #52]	; (8008d88 <HAL_RCC_ClockConfig+0x35c>)
 8008d54:	5cd3      	ldrb	r3, [r2, r3]
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d60:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <HAL_RCC_ClockConfig+0x360>)
 8008d62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d64:	4a0a      	ldr	r2, [pc, #40]	; (8008d90 <HAL_RCC_ClockConfig+0x364>)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <HAL_RCC_ClockConfig+0x368>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe f8cc 	bl	8006f0c <HAL_InitTick>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400
 8008d88:	080125d0 	.word	0x080125d0
 8008d8c:	24000014 	.word	0x24000014
 8008d90:	24000010 	.word	0x24000010
 8008d94:	240000a8 	.word	0x240000a8

08008d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b089      	sub	sp, #36	; 0x24
 8008d9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d9e:	4bb3      	ldr	r3, [pc, #716]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008da6:	2b18      	cmp	r3, #24
 8008da8:	f200 8155 	bhi.w	8009056 <HAL_RCC_GetSysClockFreq+0x2be>
 8008dac:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008e19 	.word	0x08008e19
 8008db8:	08009057 	.word	0x08009057
 8008dbc:	08009057 	.word	0x08009057
 8008dc0:	08009057 	.word	0x08009057
 8008dc4:	08009057 	.word	0x08009057
 8008dc8:	08009057 	.word	0x08009057
 8008dcc:	08009057 	.word	0x08009057
 8008dd0:	08009057 	.word	0x08009057
 8008dd4:	08008e3f 	.word	0x08008e3f
 8008dd8:	08009057 	.word	0x08009057
 8008ddc:	08009057 	.word	0x08009057
 8008de0:	08009057 	.word	0x08009057
 8008de4:	08009057 	.word	0x08009057
 8008de8:	08009057 	.word	0x08009057
 8008dec:	08009057 	.word	0x08009057
 8008df0:	08009057 	.word	0x08009057
 8008df4:	08008e45 	.word	0x08008e45
 8008df8:	08009057 	.word	0x08009057
 8008dfc:	08009057 	.word	0x08009057
 8008e00:	08009057 	.word	0x08009057
 8008e04:	08009057 	.word	0x08009057
 8008e08:	08009057 	.word	0x08009057
 8008e0c:	08009057 	.word	0x08009057
 8008e10:	08009057 	.word	0x08009057
 8008e14:	08008e4b 	.word	0x08008e4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e18:	4b94      	ldr	r3, [pc, #592]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0320 	and.w	r3, r3, #32
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d009      	beq.n	8008e38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e24:	4b91      	ldr	r3, [pc, #580]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	4a90      	ldr	r2, [pc, #576]	; (8009070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008e36:	e111      	b.n	800905c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e38:	4b8d      	ldr	r3, [pc, #564]	; (8009070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e3a:	61bb      	str	r3, [r7, #24]
    break;
 8008e3c:	e10e      	b.n	800905c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008e3e:	4b8d      	ldr	r3, [pc, #564]	; (8009074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e40:	61bb      	str	r3, [r7, #24]
    break;
 8008e42:	e10b      	b.n	800905c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008e44:	4b8c      	ldr	r3, [pc, #560]	; (8009078 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e46:	61bb      	str	r3, [r7, #24]
    break;
 8008e48:	e108      	b.n	800905c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e4a:	4b88      	ldr	r3, [pc, #544]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008e54:	4b85      	ldr	r3, [pc, #532]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	091b      	lsrs	r3, r3, #4
 8008e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e60:	4b82      	ldr	r3, [pc, #520]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e6a:	4b80      	ldr	r3, [pc, #512]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	08db      	lsrs	r3, r3, #3
 8008e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 80e1 	beq.w	8009050 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	f000 8083 	beq.w	8008f9c <HAL_RCC_GetSysClockFreq+0x204>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	f200 80a1 	bhi.w	8008fe0 <HAL_RCC_GetSysClockFreq+0x248>
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <HAL_RCC_GetSysClockFreq+0x114>
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d056      	beq.n	8008f58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008eaa:	e099      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eac:	4b6f      	ldr	r3, [pc, #444]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d02d      	beq.n	8008f14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb8:	4b6c      	ldr	r3, [pc, #432]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	08db      	lsrs	r3, r3, #3
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	4a6b      	ldr	r2, [pc, #428]	; (8009070 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	ee07 3a90 	vmov	s15, r3
 8008ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee2:	4b62      	ldr	r3, [pc, #392]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ef6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800907c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008f12:	e087      	b.n	8009024 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009080 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f26:	4b51      	ldr	r3, [pc, #324]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800907c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f56:	e065      	b.n	8009024 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6a:	4b40      	ldr	r3, [pc, #256]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800907c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f9a:	e043      	b.n	8009024 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009088 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fae:	4b2f      	ldr	r3, [pc, #188]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800907c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fde:	e021      	b.n	8009024 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	ee07 3a90 	vmov	s15, r3
 8008fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009084 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff2:	4b1e      	ldr	r3, [pc, #120]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009002:	ed97 6a02 	vldr	s12, [r7, #8]
 8009006:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800907c <HAL_RCC_GetSysClockFreq+0x2e4>
 800900a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009022:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009024:	4b11      	ldr	r3, [pc, #68]	; (800906c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009028:	0a5b      	lsrs	r3, r3, #9
 800902a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902e:	3301      	adds	r3, #1
 8009030:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	ee07 3a90 	vmov	s15, r3
 8009038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800903c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009048:	ee17 3a90 	vmov	r3, s15
 800904c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800904e:	e005      	b.n	800905c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	61bb      	str	r3, [r7, #24]
    break;
 8009054:	e002      	b.n	800905c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009056:	4b07      	ldr	r3, [pc, #28]	; (8009074 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009058:	61bb      	str	r3, [r7, #24]
    break;
 800905a:	bf00      	nop
  }

  return sysclockfreq;
 800905c:	69bb      	ldr	r3, [r7, #24]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3724      	adds	r7, #36	; 0x24
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	58024400 	.word	0x58024400
 8009070:	03d09000 	.word	0x03d09000
 8009074:	003d0900 	.word	0x003d0900
 8009078:	017d7840 	.word	0x017d7840
 800907c:	46000000 	.word	0x46000000
 8009080:	4c742400 	.word	0x4c742400
 8009084:	4a742400 	.word	0x4a742400
 8009088:	4bbebc20 	.word	0x4bbebc20

0800908c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009092:	f7ff fe81 	bl	8008d98 <HAL_RCC_GetSysClockFreq>
 8009096:	4602      	mov	r2, r0
 8009098:	4b10      	ldr	r3, [pc, #64]	; (80090dc <HAL_RCC_GetHCLKFreq+0x50>)
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	0a1b      	lsrs	r3, r3, #8
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	490f      	ldr	r1, [pc, #60]	; (80090e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80090a4:	5ccb      	ldrb	r3, [r1, r3]
 80090a6:	f003 031f 	and.w	r3, r3, #31
 80090aa:	fa22 f303 	lsr.w	r3, r2, r3
 80090ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <HAL_RCC_GetHCLKFreq+0x50>)
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	4a09      	ldr	r2, [pc, #36]	; (80090e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80090ba:	5cd3      	ldrb	r3, [r2, r3]
 80090bc:	f003 031f 	and.w	r3, r3, #31
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	4a07      	ldr	r2, [pc, #28]	; (80090e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80090c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090ca:	4a07      	ldr	r2, [pc, #28]	; (80090e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090d0:	4b04      	ldr	r3, [pc, #16]	; (80090e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80090d2:	681b      	ldr	r3, [r3, #0]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	58024400 	.word	0x58024400
 80090e0:	080125d0 	.word	0x080125d0
 80090e4:	24000014 	.word	0x24000014
 80090e8:	24000010 	.word	0x24000010

080090ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80090f0:	f7ff ffcc 	bl	800908c <HAL_RCC_GetHCLKFreq>
 80090f4:	4602      	mov	r2, r0
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	091b      	lsrs	r3, r3, #4
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	4904      	ldr	r1, [pc, #16]	; (8009114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009102:	5ccb      	ldrb	r3, [r1, r3]
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800910c:	4618      	mov	r0, r3
 800910e:	bd80      	pop	{r7, pc}
 8009110:	58024400 	.word	0x58024400
 8009114:	080125d0 	.word	0x080125d0

08009118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800911c:	f7ff ffb6 	bl	800908c <HAL_RCC_GetHCLKFreq>
 8009120:	4602      	mov	r2, r0
 8009122:	4b06      	ldr	r3, [pc, #24]	; (800913c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	0a1b      	lsrs	r3, r3, #8
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	4904      	ldr	r1, [pc, #16]	; (8009140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800912e:	5ccb      	ldrb	r3, [r1, r3]
 8009130:	f003 031f 	and.w	r3, r3, #31
 8009134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009138:	4618      	mov	r0, r3
 800913a:	bd80      	pop	{r7, pc}
 800913c:	58024400 	.word	0x58024400
 8009140:	080125d0 	.word	0x080125d0

08009144 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800914c:	2300      	movs	r3, #0
 800914e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009150:	2300      	movs	r3, #0
 8009152:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d03f      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009168:	d02a      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800916a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800916e:	d824      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009170:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009174:	d018      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800917a:	d81e      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009184:	d007      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009186:	e018      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009188:	4ba3      	ldr	r3, [pc, #652]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	4aa2      	ldr	r2, [pc, #648]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800918e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009194:	e015      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3304      	adds	r3, #4
 800919a:	2102      	movs	r1, #2
 800919c:	4618      	mov	r0, r3
 800919e:	f001 f9d5 	bl	800a54c <RCCEx_PLL2_Config>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091a6:	e00c      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3324      	adds	r3, #36	; 0x24
 80091ac:	2102      	movs	r1, #2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 fa7e 	bl	800a6b0 <RCCEx_PLL3_Config>
 80091b4:	4603      	mov	r3, r0
 80091b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091b8:	e003      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	75fb      	strb	r3, [r7, #23]
      break;
 80091be:	e000      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80091c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d109      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80091c8:	4b93      	ldr	r3, [pc, #588]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d4:	4990      	ldr	r1, [pc, #576]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	650b      	str	r3, [r1, #80]	; 0x50
 80091da:	e001      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d03d      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d826      	bhi.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009211 	.word	0x08009211
 8009200:	0800921f 	.word	0x0800921f
 8009204:	08009231 	.word	0x08009231
 8009208:	08009249 	.word	0x08009249
 800920c:	08009249 	.word	0x08009249
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009210:	4b81      	ldr	r3, [pc, #516]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	4a80      	ldr	r2, [pc, #512]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800921a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800921c:	e015      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3304      	adds	r3, #4
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f001 f991 	bl	800a54c <RCCEx_PLL2_Config>
 800922a:	4603      	mov	r3, r0
 800922c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800922e:	e00c      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3324      	adds	r3, #36	; 0x24
 8009234:	2100      	movs	r1, #0
 8009236:	4618      	mov	r0, r3
 8009238:	f001 fa3a 	bl	800a6b0 <RCCEx_PLL3_Config>
 800923c:	4603      	mov	r3, r0
 800923e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009240:	e003      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]
      break;
 8009246:	e000      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009250:	4b71      	ldr	r3, [pc, #452]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009254:	f023 0207 	bic.w	r2, r3, #7
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925c:	496e      	ldr	r1, [pc, #440]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800925e:	4313      	orrs	r3, r2
 8009260:	650b      	str	r3, [r1, #80]	; 0x50
 8009262:	e001      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009270:	2b00      	cmp	r3, #0
 8009272:	d042      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927c:	d02b      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800927e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009282:	d825      	bhi.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009284:	2bc0      	cmp	r3, #192	; 0xc0
 8009286:	d028      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009288:	2bc0      	cmp	r3, #192	; 0xc0
 800928a:	d821      	bhi.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800928c:	2b80      	cmp	r3, #128	; 0x80
 800928e:	d016      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009290:	2b80      	cmp	r3, #128	; 0x80
 8009292:	d81d      	bhi.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d007      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800929c:	e018      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929e:	4b5e      	ldr	r3, [pc, #376]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	4a5d      	ldr	r2, [pc, #372]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092aa:	e017      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 f94a 	bl	800a54c <RCCEx_PLL2_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092bc:	e00e      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3324      	adds	r3, #36	; 0x24
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 f9f3 	bl	800a6b0 <RCCEx_PLL3_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092ce:	e005      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	75fb      	strb	r3, [r7, #23]
      break;
 80092d4:	e002      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80092d6:	bf00      	nop
 80092d8:	e000      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80092da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80092e2:	4b4d      	ldr	r3, [pc, #308]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ee:	494a      	ldr	r1, [pc, #296]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	650b      	str	r3, [r1, #80]	; 0x50
 80092f4:	e001      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009302:	2b00      	cmp	r3, #0
 8009304:	d049      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800930c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009310:	d030      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009316:	d82a      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009318:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800931c:	d02c      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800931e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009322:	d824      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009328:	d018      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800932a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800932e:	d81e      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009338:	d007      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800933a:	e018      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800933c:	4b36      	ldr	r3, [pc, #216]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	4a35      	ldr	r2, [pc, #212]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009348:	e017      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3304      	adds	r3, #4
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f001 f8fb 	bl	800a54c <RCCEx_PLL2_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800935a:	e00e      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3324      	adds	r3, #36	; 0x24
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f001 f9a4 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800936c:	e005      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	75fb      	strb	r3, [r7, #23]
      break;
 8009372:	e002      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009374:	bf00      	nop
 8009376:	e000      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009380:	4b25      	ldr	r3, [pc, #148]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009384:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800938e:	4922      	ldr	r1, [pc, #136]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009390:	4313      	orrs	r3, r2
 8009392:	658b      	str	r3, [r1, #88]	; 0x58
 8009394:	e001      	b.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
 8009398:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d04b      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093b0:	d030      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80093b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093b6:	d82a      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093bc:	d02e      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80093be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093c2:	d824      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093c8:	d018      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80093ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ce:	d81e      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80093d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093d8:	d007      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80093da:	e018      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093dc:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	4a0d      	ldr	r2, [pc, #52]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093e8:	e019      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3304      	adds	r3, #4
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 f8ab 	bl	800a54c <RCCEx_PLL2_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093fa:	e010      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3324      	adds	r3, #36	; 0x24
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f001 f954 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009408:	4603      	mov	r3, r0
 800940a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800940c:	e007      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]
      break;
 8009412:	e004      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009414:	bf00      	nop
 8009416:	e002      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009418:	58024400 	.word	0x58024400
      break;
 800941c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009424:	4b99      	ldr	r3, [pc, #612]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009428:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009432:	4996      	ldr	r1, [pc, #600]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009434:	4313      	orrs	r3, r2
 8009436:	658b      	str	r3, [r1, #88]	; 0x58
 8009438:	e001      	b.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d032      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800944e:	2b30      	cmp	r3, #48	; 0x30
 8009450:	d01c      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009452:	2b30      	cmp	r3, #48	; 0x30
 8009454:	d817      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009456:	2b20      	cmp	r3, #32
 8009458:	d00c      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800945a:	2b20      	cmp	r3, #32
 800945c:	d813      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d016      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009462:	2b10      	cmp	r3, #16
 8009464:	d10f      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009466:	4b89      	ldr	r3, [pc, #548]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	4a88      	ldr	r2, [pc, #544]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800946c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009472:	e00e      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3304      	adds	r3, #4
 8009478:	2102      	movs	r1, #2
 800947a:	4618      	mov	r0, r3
 800947c:	f001 f866 	bl	800a54c <RCCEx_PLL2_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009484:	e005      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	75fb      	strb	r3, [r7, #23]
      break;
 800948a:	e002      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800948c:	bf00      	nop
 800948e:	e000      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d109      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009498:	4b7c      	ldr	r3, [pc, #496]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800949a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	4979      	ldr	r1, [pc, #484]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094aa:	e001      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d047      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094c4:	d030      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80094c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ca:	d82a      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094d0:	d02c      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80094d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094d6:	d824      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094dc:	d018      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80094de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094e2:	d81e      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d003      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80094e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ec:	d007      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80094ee:	e018      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f0:	4b66      	ldr	r3, [pc, #408]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	4a65      	ldr	r2, [pc, #404]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80094fc:	e017      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	3304      	adds	r3, #4
 8009502:	2100      	movs	r1, #0
 8009504:	4618      	mov	r0, r3
 8009506:	f001 f821 	bl	800a54c <RCCEx_PLL2_Config>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800950e:	e00e      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3324      	adds	r3, #36	; 0x24
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f001 f8ca 	bl	800a6b0 <RCCEx_PLL3_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009520:	e005      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	75fb      	strb	r3, [r7, #23]
      break;
 8009526:	e002      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009528:	bf00      	nop
 800952a:	e000      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800952c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d109      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009534:	4b55      	ldr	r3, [pc, #340]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009538:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009540:	4952      	ldr	r1, [pc, #328]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009542:	4313      	orrs	r3, r2
 8009544:	650b      	str	r3, [r1, #80]	; 0x50
 8009546:	e001      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d049      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800955c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009560:	d02e      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009562:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009566:	d828      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800956c:	d02a      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800956e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009572:	d822      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009574:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009578:	d026      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800957a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800957e:	d81c      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009584:	d010      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800958a:	d816      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01d      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009594:	d111      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3304      	adds	r3, #4
 800959a:	2101      	movs	r1, #1
 800959c:	4618      	mov	r0, r3
 800959e:	f000 ffd5 	bl	800a54c <RCCEx_PLL2_Config>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095a6:	e012      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3324      	adds	r3, #36	; 0x24
 80095ac:	2101      	movs	r1, #1
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 f87e 	bl	800a6b0 <RCCEx_PLL3_Config>
 80095b4:	4603      	mov	r3, r0
 80095b6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095b8:	e009      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	75fb      	strb	r3, [r7, #23]
      break;
 80095be:	e006      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095c0:	bf00      	nop
 80095c2:	e004      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095c4:	bf00      	nop
 80095c6:	e002      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095c8:	bf00      	nop
 80095ca:	e000      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d109      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095d4:	4b2d      	ldr	r3, [pc, #180]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e0:	492a      	ldr	r1, [pc, #168]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	650b      	str	r3, [r1, #80]	; 0x50
 80095e6:	e001      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d04d      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009602:	d02e      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009608:	d828      	bhi.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800960a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960e:	d02a      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009614:	d822      	bhi.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009616:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800961a:	d026      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800961c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009620:	d81c      	bhi.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009626:	d010      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800962c:	d816      	bhi.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01d      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009636:	d111      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	2101      	movs	r1, #1
 800963e:	4618      	mov	r0, r3
 8009640:	f000 ff84 	bl	800a54c <RCCEx_PLL2_Config>
 8009644:	4603      	mov	r3, r0
 8009646:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009648:	e012      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3324      	adds	r3, #36	; 0x24
 800964e:	2101      	movs	r1, #1
 8009650:	4618      	mov	r0, r3
 8009652:	f001 f82d 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800965a:	e009      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	75fb      	strb	r3, [r7, #23]
      break;
 8009660:	e006      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009662:	bf00      	nop
 8009664:	e004      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009666:	bf00      	nop
 8009668:	e002      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800966e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10c      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009684:	4901      	ldr	r1, [pc, #4]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009686:	4313      	orrs	r3, r2
 8009688:	658b      	str	r3, [r1, #88]	; 0x58
 800968a:	e003      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800968c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d02f      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a8:	d00e      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80096aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ae:	d814      	bhi.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x596>
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d015      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80096b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096b8:	d10f      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ba:	4baf      	ldr	r3, [pc, #700]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096be:	4aae      	ldr	r2, [pc, #696]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80096c6:	e00c      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3304      	adds	r3, #4
 80096cc:	2101      	movs	r1, #1
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 ff3c 	bl	800a54c <RCCEx_PLL2_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80096d8:	e003      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	75fb      	strb	r3, [r7, #23]
      break;
 80096de:	e000      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80096e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d109      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096e8:	4ba3      	ldr	r3, [pc, #652]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f4:	49a0      	ldr	r1, [pc, #640]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	650b      	str	r3, [r1, #80]	; 0x50
 80096fa:	e001      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d032      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009710:	2b03      	cmp	r3, #3
 8009712:	d81b      	bhi.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009714:	a201      	add	r2, pc, #4	; (adr r2, 800971c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	08009753 	.word	0x08009753
 8009720:	0800972d 	.word	0x0800972d
 8009724:	0800973b 	.word	0x0800973b
 8009728:	08009753 	.word	0x08009753
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972c:	4b92      	ldr	r3, [pc, #584]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	4a91      	ldr	r2, [pc, #580]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009738:	e00c      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3304      	adds	r3, #4
 800973e:	2102      	movs	r1, #2
 8009740:	4618      	mov	r0, r3
 8009742:	f000 ff03 	bl	800a54c <RCCEx_PLL2_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800974a:	e003      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
      break;
 8009750:	e000      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800975a:	4b87      	ldr	r3, [pc, #540]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800975c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975e:	f023 0203 	bic.w	r2, r3, #3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009766:	4984      	ldr	r1, [pc, #528]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009768:	4313      	orrs	r3, r2
 800976a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800976c:	e001      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 8086 	beq.w	800988c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009780:	4b7e      	ldr	r3, [pc, #504]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a7d      	ldr	r2, [pc, #500]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800978a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800978c:	f7fd fc08 	bl	8006fa0 <HAL_GetTick>
 8009790:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009792:	e009      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009794:	f7fd fc04 	bl	8006fa0 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b64      	cmp	r3, #100	; 0x64
 80097a0:	d902      	bls.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	75fb      	strb	r3, [r7, #23]
        break;
 80097a6:	e005      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097a8:	4b74      	ldr	r3, [pc, #464]	; (800997c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0ef      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d166      	bne.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097ba:	4b6f      	ldr	r3, [pc, #444]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097c4:	4053      	eors	r3, r2
 80097c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d013      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097ce:	4b6a      	ldr	r3, [pc, #424]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097d8:	4b67      	ldr	r3, [pc, #412]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097dc:	4a66      	ldr	r2, [pc, #408]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097e4:	4b64      	ldr	r3, [pc, #400]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e8:	4a63      	ldr	r2, [pc, #396]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80097f0:	4a61      	ldr	r2, [pc, #388]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009800:	d115      	bne.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009802:	f7fd fbcd 	bl	8006fa0 <HAL_GetTick>
 8009806:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009808:	e00b      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800980a:	f7fd fbc9 	bl	8006fa0 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	f241 3288 	movw	r2, #5000	; 0x1388
 8009818:	4293      	cmp	r3, r2
 800981a:	d902      	bls.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	75fb      	strb	r3, [r7, #23]
            break;
 8009820:	e005      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009822:	4b55      	ldr	r3, [pc, #340]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0ed      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d126      	bne.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800983a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800983e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009842:	d10d      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009844:	4b4c      	ldr	r3, [pc, #304]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009852:	0919      	lsrs	r1, r3, #4
 8009854:	4b4a      	ldr	r3, [pc, #296]	; (8009980 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009856:	400b      	ands	r3, r1
 8009858:	4947      	ldr	r1, [pc, #284]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800985a:	4313      	orrs	r3, r2
 800985c:	610b      	str	r3, [r1, #16]
 800985e:	e005      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009860:	4b45      	ldr	r3, [pc, #276]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	4a44      	ldr	r2, [pc, #272]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009866:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800986a:	6113      	str	r3, [r2, #16]
 800986c:	4b42      	ldr	r3, [pc, #264]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800986e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800987a:	493f      	ldr	r1, [pc, #252]	; (8009978 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800987c:	4313      	orrs	r3, r2
 800987e:	670b      	str	r3, [r1, #112]	; 0x70
 8009880:	e004      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	75bb      	strb	r3, [r7, #22]
 8009886:	e001      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 8085 	beq.w	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800989e:	2b28      	cmp	r3, #40	; 0x28
 80098a0:	d866      	bhi.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	08009985 	.word	0x08009985
 80098ac:	08009971 	.word	0x08009971
 80098b0:	08009971 	.word	0x08009971
 80098b4:	08009971 	.word	0x08009971
 80098b8:	08009971 	.word	0x08009971
 80098bc:	08009971 	.word	0x08009971
 80098c0:	08009971 	.word	0x08009971
 80098c4:	08009971 	.word	0x08009971
 80098c8:	0800994d 	.word	0x0800994d
 80098cc:	08009971 	.word	0x08009971
 80098d0:	08009971 	.word	0x08009971
 80098d4:	08009971 	.word	0x08009971
 80098d8:	08009971 	.word	0x08009971
 80098dc:	08009971 	.word	0x08009971
 80098e0:	08009971 	.word	0x08009971
 80098e4:	08009971 	.word	0x08009971
 80098e8:	0800995f 	.word	0x0800995f
 80098ec:	08009971 	.word	0x08009971
 80098f0:	08009971 	.word	0x08009971
 80098f4:	08009971 	.word	0x08009971
 80098f8:	08009971 	.word	0x08009971
 80098fc:	08009971 	.word	0x08009971
 8009900:	08009971 	.word	0x08009971
 8009904:	08009971 	.word	0x08009971
 8009908:	08009985 	.word	0x08009985
 800990c:	08009971 	.word	0x08009971
 8009910:	08009971 	.word	0x08009971
 8009914:	08009971 	.word	0x08009971
 8009918:	08009971 	.word	0x08009971
 800991c:	08009971 	.word	0x08009971
 8009920:	08009971 	.word	0x08009971
 8009924:	08009971 	.word	0x08009971
 8009928:	08009985 	.word	0x08009985
 800992c:	08009971 	.word	0x08009971
 8009930:	08009971 	.word	0x08009971
 8009934:	08009971 	.word	0x08009971
 8009938:	08009971 	.word	0x08009971
 800993c:	08009971 	.word	0x08009971
 8009940:	08009971 	.word	0x08009971
 8009944:	08009971 	.word	0x08009971
 8009948:	08009985 	.word	0x08009985
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3304      	adds	r3, #4
 8009950:	2101      	movs	r1, #1
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fdfa 	bl	800a54c <RCCEx_PLL2_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800995c:	e013      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	3324      	adds	r3, #36	; 0x24
 8009962:	2101      	movs	r1, #1
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fea3 	bl	800a6b0 <RCCEx_PLL3_Config>
 800996a:	4603      	mov	r3, r0
 800996c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800996e:	e00a      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	75fb      	strb	r3, [r7, #23]
      break;
 8009974:	e007      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009976:	bf00      	nop
 8009978:	58024400 	.word	0x58024400
 800997c:	58024800 	.word	0x58024800
 8009980:	00ffffcf 	.word	0x00ffffcf
      break;
 8009984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d109      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800998c:	4b96      	ldr	r3, [pc, #600]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800998e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009990:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009998:	4993      	ldr	r1, [pc, #588]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800999a:	4313      	orrs	r3, r2
 800999c:	654b      	str	r3, [r1, #84]	; 0x54
 800999e:	e001      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d038      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b4:	2b05      	cmp	r3, #5
 80099b6:	d821      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80099b8:	a201      	add	r2, pc, #4	; (adr r2, 80099c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80099ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099be:	bf00      	nop
 80099c0:	08009a03 	.word	0x08009a03
 80099c4:	080099d9 	.word	0x080099d9
 80099c8:	080099eb 	.word	0x080099eb
 80099cc:	08009a03 	.word	0x08009a03
 80099d0:	08009a03 	.word	0x08009a03
 80099d4:	08009a03 	.word	0x08009a03
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3304      	adds	r3, #4
 80099dc:	2101      	movs	r1, #1
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 fdb4 	bl	800a54c <RCCEx_PLL2_Config>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80099e8:	e00c      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3324      	adds	r3, #36	; 0x24
 80099ee:	2101      	movs	r1, #1
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fe5d 	bl	800a6b0 <RCCEx_PLL3_Config>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80099fa:	e003      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009a00:	e000      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8009a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d109      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a0a:	4b77      	ldr	r3, [pc, #476]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0e:	f023 0207 	bic.w	r2, r3, #7
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a16:	4974      	ldr	r1, [pc, #464]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8009a1c:	e001      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d03a      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a34:	2b05      	cmp	r3, #5
 8009a36:	d821      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009a83 	.word	0x08009a83
 8009a44:	08009a59 	.word	0x08009a59
 8009a48:	08009a6b 	.word	0x08009a6b
 8009a4c:	08009a83 	.word	0x08009a83
 8009a50:	08009a83 	.word	0x08009a83
 8009a54:	08009a83 	.word	0x08009a83
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fd74 	bl	800a54c <RCCEx_PLL2_Config>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a68:	e00c      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3324      	adds	r3, #36	; 0x24
 8009a6e:	2101      	movs	r1, #1
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fe1d 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a7a:	e003      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a80:	e000      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a8a:	4b57      	ldr	r3, [pc, #348]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8e:	f023 0207 	bic.w	r2, r3, #7
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a98:	4953      	ldr	r1, [pc, #332]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8009a9e:	e001      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d04b      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aba:	d02e      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ac0:	d828      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac6:	d02a      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009acc:	d822      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ace:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ad2:	d026      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ad8:	d81c      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ade:	d010      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ae4:	d816      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01d      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aee:	d111      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fd28 	bl	800a54c <RCCEx_PLL2_Config>
 8009afc:	4603      	mov	r3, r0
 8009afe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b00:	e012      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3324      	adds	r3, #36	; 0x24
 8009b06:	2102      	movs	r1, #2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fdd1 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b12:	e009      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	75fb      	strb	r3, [r7, #23]
      break;
 8009b18:	e006      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b1a:	bf00      	nop
 8009b1c:	e004      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b1e:	bf00      	nop
 8009b20:	e002      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b22:	bf00      	nop
 8009b24:	e000      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10a      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b2e:	4b2e      	ldr	r3, [pc, #184]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3c:	492a      	ldr	r1, [pc, #168]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	654b      	str	r3, [r1, #84]	; 0x54
 8009b42:	e001      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d04d      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b5e:	d02e      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009b60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b64:	d828      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b6a:	d02a      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b70:	d822      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b76:	d026      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b7c:	d81c      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b82:	d010      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b88:	d816      	bhi.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01d      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b92:	d111      	bne.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	3304      	adds	r3, #4
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 fcd6 	bl	800a54c <RCCEx_PLL2_Config>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009ba4:	e012      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3324      	adds	r3, #36	; 0x24
 8009baa:	2102      	movs	r1, #2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fd7f 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009bb6:	e009      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
      break;
 8009bbc:	e006      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bbe:	bf00      	nop
 8009bc0:	e004      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bc2:	bf00      	nop
 8009bc4:	e002      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bc6:	bf00      	nop
 8009bc8:	e000      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10c      	bne.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bd2:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009be0:	4901      	ldr	r1, [pc, #4]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	658b      	str	r3, [r1, #88]	; 0x58
 8009be6:	e003      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d04b      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c06:	d02e      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009c08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c0c:	d828      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c12:	d02a      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c18:	d822      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c1e:	d026      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009c20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c24:	d81c      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c2a:	d010      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c30:	d816      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d01d      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c3a:	d111      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fc82 	bl	800a54c <RCCEx_PLL2_Config>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c4c:	e012      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3324      	adds	r3, #36	; 0x24
 8009c52:	2102      	movs	r1, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fd2b 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c5e:	e009      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	75fb      	strb	r3, [r7, #23]
      break;
 8009c64:	e006      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c66:	bf00      	nop
 8009c68:	e004      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c6a:	bf00      	nop
 8009c6c:	e002      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c6e:	bf00      	nop
 8009c70:	e000      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10a      	bne.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c7a:	4b9d      	ldr	r3, [pc, #628]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c88:	4999      	ldr	r1, [pc, #612]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8009c8e:	e001      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
 8009c92:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01a      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009caa:	d10a      	bne.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3324      	adds	r3, #36	; 0x24
 8009cb0:	2102      	movs	r1, #2
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 fcfc 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cc2:	4b8b      	ldr	r3, [pc, #556]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cd0:	4987      	ldr	r1, [pc, #540]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0310 	and.w	r3, r3, #16
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01a      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cec:	d10a      	bne.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3324      	adds	r3, #36	; 0x24
 8009cf2:	2102      	movs	r1, #2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 fcdb 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d04:	4b7a      	ldr	r3, [pc, #488]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d12:	4977      	ldr	r1, [pc, #476]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d034      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d2e:	d01d      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d34:	d817      	bhi.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d3e:	d009      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009d40:	e011      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3304      	adds	r3, #4
 8009d46:	2100      	movs	r1, #0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fbff 	bl	800a54c <RCCEx_PLL2_Config>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d52:	e00c      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3324      	adds	r3, #36	; 0x24
 8009d58:	2102      	movs	r1, #2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fca8 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d64:	e003      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
      break;
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d74:	4b5e      	ldr	r3, [pc, #376]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d82:	495b      	ldr	r1, [pc, #364]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	658b      	str	r3, [r1, #88]	; 0x58
 8009d88:	e001      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d033      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009da0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009da4:	d01c      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009da6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009daa:	d816      	bhi.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009db0:	d003      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009db6:	d007      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009db8:	e00f      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dba:	4b4d      	ldr	r3, [pc, #308]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	4a4c      	ldr	r2, [pc, #304]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009dc6:	e00c      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3324      	adds	r3, #36	; 0x24
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fc6e 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009dd8:	e003      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8009dde:	e000      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009de8:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009df6:	493e      	ldr	r1, [pc, #248]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	654b      	str	r3, [r1, #84]	; 0x54
 8009dfc:	e001      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
 8009e00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d029      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e1a:	d007      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009e1c:	e00f      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e1e:	4b34      	ldr	r3, [pc, #208]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	4a33      	ldr	r2, [pc, #204]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e2a:	e00b      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	2102      	movs	r1, #2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fb8a 	bl	800a54c <RCCEx_PLL2_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e3c:	e002      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
      break;
 8009e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d109      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e4a:	4b29      	ldr	r3, [pc, #164]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e56:	4926      	ldr	r1, [pc, #152]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e5c:	e001      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	3324      	adds	r3, #36	; 0x24
 8009e72:	2102      	movs	r1, #2
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fc1b 	bl	800a6b0 <RCCEx_PLL3_Config>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d033      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e98:	d017      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e9e:	d811      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea4:	d013      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eaa:	d80b      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d010      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb4:	d106      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb6:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	4a0d      	ldr	r2, [pc, #52]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009ec2:	e007      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec8:	e004      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009eca:	bf00      	nop
 8009ecc:	e002      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009ece:	bf00      	nop
 8009ed0:	e000      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10c      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009eda:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee6:	4902      	ldr	r1, [pc, #8]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	654b      	str	r3, [r1, #84]	; 0x54
 8009eec:	e004      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009eee:	bf00      	nop
 8009ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f04:	4b31      	ldr	r3, [pc, #196]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f10:	492e      	ldr	r1, [pc, #184]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d009      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f22:	4b2a      	ldr	r3, [pc, #168]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f30:	4926      	ldr	r1, [pc, #152]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f32:	4313      	orrs	r3, r2
 8009f34:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f42:	4b22      	ldr	r3, [pc, #136]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f4e:	491f      	ldr	r1, [pc, #124]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00d      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f60:	4b1a      	ldr	r3, [pc, #104]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	4a19      	ldr	r2, [pc, #100]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f6a:	6113      	str	r3, [r2, #16]
 8009f6c:	4b17      	ldr	r3, [pc, #92]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f6e:	691a      	ldr	r2, [r3, #16]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009f76:	4915      	ldr	r1, [pc, #84]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	da08      	bge.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f84:	4b11      	ldr	r3, [pc, #68]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f90:	490e      	ldr	r1, [pc, #56]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009fa2:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb0:	4906      	ldr	r1, [pc, #24]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009fb6:	7dbb      	ldrb	r3, [r7, #22]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e000      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	58024400 	.word	0x58024400

08009fd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009fd4:	f7ff f85a 	bl	800908c <HAL_RCC_GetHCLKFreq>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	091b      	lsrs	r3, r3, #4
 8009fe0:	f003 0307 	and.w	r3, r3, #7
 8009fe4:	4904      	ldr	r1, [pc, #16]	; (8009ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009fe6:	5ccb      	ldrb	r3, [r1, r3]
 8009fe8:	f003 031f 	and.w	r3, r3, #31
 8009fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	58024400 	.word	0x58024400
 8009ff8:	080125d0 	.word	0x080125d0

08009ffc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b089      	sub	sp, #36	; 0x24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a004:	4ba1      	ldr	r3, [pc, #644]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	f003 0303 	and.w	r3, r3, #3
 800a00c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a00e:	4b9f      	ldr	r3, [pc, #636]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a012:	0b1b      	lsrs	r3, r3, #12
 800a014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a018:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a01a:	4b9c      	ldr	r3, [pc, #624]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01e:	091b      	lsrs	r3, r3, #4
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a026:	4b99      	ldr	r3, [pc, #612]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02a:	08db      	lsrs	r3, r3, #3
 800a02c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	fb02 f303 	mul.w	r3, r2, r3
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 8111 	beq.w	800a26c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	f000 8083 	beq.w	800a158 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	2b02      	cmp	r3, #2
 800a056:	f200 80a1 	bhi.w	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d056      	beq.n	800a114 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a066:	e099      	b.n	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a068:	4b88      	ldr	r3, [pc, #544]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b00      	cmp	r3, #0
 800a072:	d02d      	beq.n	800a0d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a074:	4b85      	ldr	r3, [pc, #532]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	08db      	lsrs	r3, r3, #3
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	4a84      	ldr	r2, [pc, #528]	; (800a290 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a080:	fa22 f303 	lsr.w	r3, r2, r3
 800a084:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09e:	4b7b      	ldr	r3, [pc, #492]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a6:	ee07 3a90 	vmov	s15, r3
 800a0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0ce:	e087      	b.n	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a298 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e2:	4b6a      	ldr	r3, [pc, #424]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a10e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a112:	e065      	b.n	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a11e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a29c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a126:	4b59      	ldr	r3, [pc, #356]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a136:	ed97 6a03 	vldr	s12, [r7, #12]
 800a13a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a152:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a156:	e043      	b.n	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a162:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16a:	4b48      	ldr	r3, [pc, #288]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a17e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a19a:	e021      	b.n	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a29c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ae:	4b37      	ldr	r3, [pc, #220]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a1e0:	4b2a      	ldr	r3, [pc, #168]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e4:	0a5b      	lsrs	r3, r3, #9
 800a1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a206:	ee17 2a90 	vmov	r2, s15
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a20e:	4b1f      	ldr	r3, [pc, #124]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	0c1b      	lsrs	r3, r3, #16
 800a214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a224:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a228:	edd7 6a07 	vldr	s13, [r7, #28]
 800a22c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a234:	ee17 2a90 	vmov	r2, s15
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a23c:	4b13      	ldr	r3, [pc, #76]	; (800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	0e1b      	lsrs	r3, r3, #24
 800a242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a256:	edd7 6a07 	vldr	s13, [r7, #28]
 800a25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a262:	ee17 2a90 	vmov	r2, s15
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a26a:	e008      	b.n	800a27e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	609a      	str	r2, [r3, #8]
}
 800a27e:	bf00      	nop
 800a280:	3724      	adds	r7, #36	; 0x24
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	58024400 	.word	0x58024400
 800a290:	03d09000 	.word	0x03d09000
 800a294:	46000000 	.word	0x46000000
 800a298:	4c742400 	.word	0x4c742400
 800a29c:	4a742400 	.word	0x4a742400
 800a2a0:	4bbebc20 	.word	0x4bbebc20

0800a2a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b089      	sub	sp, #36	; 0x24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2ac:	4ba1      	ldr	r3, [pc, #644]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b0:	f003 0303 	and.w	r3, r3, #3
 800a2b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a2b6:	4b9f      	ldr	r3, [pc, #636]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ba:	0d1b      	lsrs	r3, r3, #20
 800a2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a2c2:	4b9c      	ldr	r3, [pc, #624]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	0a1b      	lsrs	r3, r3, #8
 800a2c8:	f003 0301 	and.w	r3, r3, #1
 800a2cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a2ce:	4b99      	ldr	r3, [pc, #612]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d2:	08db      	lsrs	r3, r3, #3
 800a2d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	ee07 3a90 	vmov	s15, r3
 800a2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 8111 	beq.w	800a514 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	f000 8083 	beq.w	800a400 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	f200 80a1 	bhi.w	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d056      	beq.n	800a3bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a30e:	e099      	b.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a310:	4b88      	ldr	r3, [pc, #544]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0320 	and.w	r3, r3, #32
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d02d      	beq.n	800a378 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a31c:	4b85      	ldr	r3, [pc, #532]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	08db      	lsrs	r3, r3, #3
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	4a84      	ldr	r2, [pc, #528]	; (800a538 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a328:	fa22 f303 	lsr.w	r3, r2, r3
 800a32c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	ee07 3a90 	vmov	s15, r3
 800a334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a346:	4b7b      	ldr	r3, [pc, #492]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34e:	ee07 3a90 	vmov	s15, r3
 800a352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a356:	ed97 6a03 	vldr	s12, [r7, #12]
 800a35a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a372:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a376:	e087      	b.n	800a488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a382:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a540 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a38a:	4b6a      	ldr	r3, [pc, #424]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a392:	ee07 3a90 	vmov	s15, r3
 800a396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a39e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3ba:	e065      	b.n	800a488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ce:	4b59      	ldr	r3, [pc, #356]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d6:	ee07 3a90 	vmov	s15, r3
 800a3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3fe:	e043      	b.n	800a488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a412:	4b48      	ldr	r3, [pc, #288]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a422:	ed97 6a03 	vldr	s12, [r7, #12]
 800a426:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a442:	e021      	b.n	800a488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a456:	4b37      	ldr	r3, [pc, #220]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a466:	ed97 6a03 	vldr	s12, [r7, #12]
 800a46a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a486:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a488:	4b2a      	ldr	r3, [pc, #168]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	0a5b      	lsrs	r3, r3, #9
 800a48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a49e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ae:	ee17 2a90 	vmov	r2, s15
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a4b6:	4b1f      	ldr	r3, [pc, #124]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ba:	0c1b      	lsrs	r3, r3, #16
 800a4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4c0:	ee07 3a90 	vmov	s15, r3
 800a4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4dc:	ee17 2a90 	vmov	r2, s15
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a4e4:	4b13      	ldr	r3, [pc, #76]	; (800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e8:	0e1b      	lsrs	r3, r3, #24
 800a4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a50a:	ee17 2a90 	vmov	r2, s15
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a512:	e008      	b.n	800a526 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	609a      	str	r2, [r3, #8]
}
 800a526:	bf00      	nop
 800a528:	3724      	adds	r7, #36	; 0x24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	58024400 	.word	0x58024400
 800a538:	03d09000 	.word	0x03d09000
 800a53c:	46000000 	.word	0x46000000
 800a540:	4c742400 	.word	0x4c742400
 800a544:	4a742400 	.word	0x4a742400
 800a548:	4bbebc20 	.word	0x4bbebc20

0800a54c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a55a:	4b53      	ldr	r3, [pc, #332]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	f003 0303 	and.w	r3, r3, #3
 800a562:	2b03      	cmp	r3, #3
 800a564:	d101      	bne.n	800a56a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e099      	b.n	800a69e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a56a:	4b4f      	ldr	r3, [pc, #316]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a4e      	ldr	r2, [pc, #312]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a570:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a576:	f7fc fd13 	bl	8006fa0 <HAL_GetTick>
 800a57a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a57c:	e008      	b.n	800a590 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a57e:	f7fc fd0f 	bl	8006fa0 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d901      	bls.n	800a590 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e086      	b.n	800a69e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a590:	4b45      	ldr	r3, [pc, #276]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f0      	bne.n	800a57e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a59c:	4b42      	ldr	r3, [pc, #264]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	031b      	lsls	r3, r3, #12
 800a5aa:	493f      	ldr	r1, [pc, #252]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	628b      	str	r3, [r1, #40]	; 0x28
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	025b      	lsls	r3, r3, #9
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	041b      	lsls	r3, r3, #16
 800a5ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	061b      	lsls	r3, r3, #24
 800a5dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5e0:	4931      	ldr	r1, [pc, #196]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a5e6:	4b30      	ldr	r3, [pc, #192]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	492d      	ldr	r1, [pc, #180]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a5f8:	4b2b      	ldr	r3, [pc, #172]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	f023 0220 	bic.w	r2, r3, #32
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	4928      	ldr	r1, [pc, #160]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a606:	4313      	orrs	r3, r2
 800a608:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a60a:	4b27      	ldr	r3, [pc, #156]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60e:	4a26      	ldr	r2, [pc, #152]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a610:	f023 0310 	bic.w	r3, r3, #16
 800a614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a616:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a61a:	4b24      	ldr	r3, [pc, #144]	; (800a6ac <RCCEx_PLL2_Config+0x160>)
 800a61c:	4013      	ands	r3, r2
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	69d2      	ldr	r2, [r2, #28]
 800a622:	00d2      	lsls	r2, r2, #3
 800a624:	4920      	ldr	r1, [pc, #128]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a626:	4313      	orrs	r3, r2
 800a628:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a62a:	4b1f      	ldr	r3, [pc, #124]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	4a1e      	ldr	r2, [pc, #120]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a630:	f043 0310 	orr.w	r3, r3, #16
 800a634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a63c:	4b1a      	ldr	r3, [pc, #104]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	4a19      	ldr	r2, [pc, #100]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a646:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a648:	e00f      	b.n	800a66a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d106      	bne.n	800a65e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a650:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	4a14      	ldr	r2, [pc, #80]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a65a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a65c:	e005      	b.n	800a66a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a65e:	4b12      	ldr	r3, [pc, #72]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a662:	4a11      	ldr	r2, [pc, #68]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a668:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a66a:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a0e      	ldr	r2, [pc, #56]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a676:	f7fc fc93 	bl	8006fa0 <HAL_GetTick>
 800a67a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a67c:	e008      	b.n	800a690 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a67e:	f7fc fc8f 	bl	8006fa0 <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d901      	bls.n	800a690 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e006      	b.n	800a69e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <RCCEx_PLL2_Config+0x15c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0f0      	beq.n	800a67e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	58024400 	.word	0x58024400
 800a6ac:	ffff0007 	.word	0xffff0007

0800a6b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6be:	4b53      	ldr	r3, [pc, #332]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d101      	bne.n	800a6ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e099      	b.n	800a802 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6ce:	4b4f      	ldr	r3, [pc, #316]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a4e      	ldr	r2, [pc, #312]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a6d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6da:	f7fc fc61 	bl	8006fa0 <HAL_GetTick>
 800a6de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6e0:	e008      	b.n	800a6f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a6e2:	f7fc fc5d 	bl	8006fa0 <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d901      	bls.n	800a6f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e086      	b.n	800a802 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6f4:	4b45      	ldr	r3, [pc, #276]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1f0      	bne.n	800a6e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a700:	4b42      	ldr	r3, [pc, #264]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a704:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	051b      	lsls	r3, r3, #20
 800a70e:	493f      	ldr	r1, [pc, #252]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a710:	4313      	orrs	r3, r2
 800a712:	628b      	str	r3, [r1, #40]	; 0x28
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	3b01      	subs	r3, #1
 800a71a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	3b01      	subs	r3, #1
 800a724:	025b      	lsls	r3, r3, #9
 800a726:	b29b      	uxth	r3, r3
 800a728:	431a      	orrs	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	3b01      	subs	r3, #1
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	061b      	lsls	r3, r3, #24
 800a740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a744:	4931      	ldr	r1, [pc, #196]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a746:	4313      	orrs	r3, r2
 800a748:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a74a:	4b30      	ldr	r3, [pc, #192]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	492d      	ldr	r1, [pc, #180]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a75c:	4b2b      	ldr	r3, [pc, #172]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	4928      	ldr	r1, [pc, #160]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a76e:	4b27      	ldr	r3, [pc, #156]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a772:	4a26      	ldr	r2, [pc, #152]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a77a:	4b24      	ldr	r3, [pc, #144]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a77e:	4b24      	ldr	r3, [pc, #144]	; (800a810 <RCCEx_PLL3_Config+0x160>)
 800a780:	4013      	ands	r3, r2
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	69d2      	ldr	r2, [r2, #28]
 800a786:	00d2      	lsls	r2, r2, #3
 800a788:	4920      	ldr	r1, [pc, #128]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a78e:	4b1f      	ldr	r3, [pc, #124]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a792:	4a1e      	ldr	r2, [pc, #120]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7a0:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	4a19      	ldr	r2, [pc, #100]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7ac:	e00f      	b.n	800a7ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d106      	bne.n	800a7c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7b4:	4b15      	ldr	r3, [pc, #84]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	4a14      	ldr	r2, [pc, #80]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7c0:	e005      	b.n	800a7ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7c2:	4b12      	ldr	r3, [pc, #72]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	4a11      	ldr	r2, [pc, #68]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7ce:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a0e      	ldr	r2, [pc, #56]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7da:	f7fc fbe1 	bl	8006fa0 <HAL_GetTick>
 800a7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7e0:	e008      	b.n	800a7f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a7e2:	f7fc fbdd 	bl	8006fa0 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d901      	bls.n	800a7f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e006      	b.n	800a802 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7f4:	4b05      	ldr	r3, [pc, #20]	; (800a80c <RCCEx_PLL3_Config+0x15c>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0f0      	beq.n	800a7e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	58024400 	.word	0x58024400
 800a810:	ffff0007 	.word	0xffff0007

0800a814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e049      	b.n	800a8ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d106      	bne.n	800a840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7fa f82a 	bl	8004894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3304      	adds	r3, #4
 800a850:	4619      	mov	r1, r3
 800a852:	4610      	mov	r0, r2
 800a854:	f001 f9d0 	bl	800bbf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d001      	beq.n	800a8dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e04c      	b.n	800a976 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a26      	ldr	r2, [pc, #152]	; (800a984 <HAL_TIM_Base_Start+0xc0>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d022      	beq.n	800a934 <HAL_TIM_Base_Start+0x70>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f6:	d01d      	beq.n	800a934 <HAL_TIM_Base_Start+0x70>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a22      	ldr	r2, [pc, #136]	; (800a988 <HAL_TIM_Base_Start+0xc4>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d018      	beq.n	800a934 <HAL_TIM_Base_Start+0x70>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a21      	ldr	r2, [pc, #132]	; (800a98c <HAL_TIM_Base_Start+0xc8>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d013      	beq.n	800a934 <HAL_TIM_Base_Start+0x70>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a1f      	ldr	r2, [pc, #124]	; (800a990 <HAL_TIM_Base_Start+0xcc>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00e      	beq.n	800a934 <HAL_TIM_Base_Start+0x70>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <HAL_TIM_Base_Start+0xd0>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d009      	beq.n	800a934 <HAL_TIM_Base_Start+0x70>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a1c      	ldr	r2, [pc, #112]	; (800a998 <HAL_TIM_Base_Start+0xd4>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d004      	beq.n	800a934 <HAL_TIM_Base_Start+0x70>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a1b      	ldr	r2, [pc, #108]	; (800a99c <HAL_TIM_Base_Start+0xd8>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d115      	bne.n	800a960 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	4b19      	ldr	r3, [pc, #100]	; (800a9a0 <HAL_TIM_Base_Start+0xdc>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b06      	cmp	r3, #6
 800a944:	d015      	beq.n	800a972 <HAL_TIM_Base_Start+0xae>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94c:	d011      	beq.n	800a972 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f042 0201 	orr.w	r2, r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95e:	e008      	b.n	800a972 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e000      	b.n	800a974 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a972:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40010000 	.word	0x40010000
 800a988:	40000400 	.word	0x40000400
 800a98c:	40000800 	.word	0x40000800
 800a990:	40000c00 	.word	0x40000c00
 800a994:	40010400 	.word	0x40010400
 800a998:	40001800 	.word	0x40001800
 800a99c:	40014000 	.word	0x40014000
 800a9a0:	00010007 	.word	0x00010007

0800a9a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a1a      	ldr	r2, [r3, #32]
 800a9b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10f      	bne.n	800a9dc <HAL_TIM_Base_Stop+0x38>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6a1a      	ldr	r2, [r3, #32]
 800a9c2:	f240 4344 	movw	r3, #1092	; 0x444
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d107      	bne.n	800a9dc <HAL_TIM_Base_Stop+0x38>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0201 	bic.w	r2, r2, #1
 800a9da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d001      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e054      	b.n	800aab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0201 	orr.w	r2, r2, #1
 800aa22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a26      	ldr	r2, [pc, #152]	; (800aac4 <HAL_TIM_Base_Start_IT+0xd0>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d022      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x80>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa36:	d01d      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x80>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a22      	ldr	r2, [pc, #136]	; (800aac8 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d018      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x80>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a21      	ldr	r2, [pc, #132]	; (800aacc <HAL_TIM_Base_Start_IT+0xd8>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d013      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x80>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1f      	ldr	r2, [pc, #124]	; (800aad0 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00e      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x80>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <HAL_TIM_Base_Start_IT+0xe0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d009      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x80>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a1c      	ldr	r2, [pc, #112]	; (800aad8 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d004      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x80>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a1b      	ldr	r2, [pc, #108]	; (800aadc <HAL_TIM_Base_Start_IT+0xe8>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d115      	bne.n	800aaa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	4b19      	ldr	r3, [pc, #100]	; (800aae0 <HAL_TIM_Base_Start_IT+0xec>)
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b06      	cmp	r3, #6
 800aa84:	d015      	beq.n	800aab2 <HAL_TIM_Base_Start_IT+0xbe>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa8c:	d011      	beq.n	800aab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f042 0201 	orr.w	r2, r2, #1
 800aa9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa9e:	e008      	b.n	800aab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f042 0201 	orr.w	r2, r2, #1
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e000      	b.n	800aab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	40010000 	.word	0x40010000
 800aac8:	40000400 	.word	0x40000400
 800aacc:	40000800 	.word	0x40000800
 800aad0:	40000c00 	.word	0x40000c00
 800aad4:	40010400 	.word	0x40010400
 800aad8:	40001800 	.word	0x40001800
 800aadc:	40014000 	.word	0x40014000
 800aae0:	00010007 	.word	0x00010007

0800aae4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f022 0201 	bic.w	r2, r2, #1
 800aafa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6a1a      	ldr	r2, [r3, #32]
 800ab02:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab06:	4013      	ands	r3, r2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10f      	bne.n	800ab2c <HAL_TIM_Base_Stop_IT+0x48>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6a1a      	ldr	r2, [r3, #32]
 800ab12:	f240 4344 	movw	r3, #1092	; 0x444
 800ab16:	4013      	ands	r3, r2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d107      	bne.n	800ab2c <HAL_TIM_Base_Stop_IT+0x48>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0201 	bic.w	r2, r2, #1
 800ab2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e049      	b.n	800abe8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f841 	bl	800abf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2202      	movs	r2, #2
 800ab72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f001 f839 	bl	800bbf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2201      	movs	r2, #1
 800abe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d109      	bne.n	800ac28 <HAL_TIM_PWM_Start+0x24>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	bf14      	ite	ne
 800ac20:	2301      	movne	r3, #1
 800ac22:	2300      	moveq	r3, #0
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	e03c      	b.n	800aca2 <HAL_TIM_PWM_Start+0x9e>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d109      	bne.n	800ac42 <HAL_TIM_PWM_Start+0x3e>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	bf14      	ite	ne
 800ac3a:	2301      	movne	r3, #1
 800ac3c:	2300      	moveq	r3, #0
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	e02f      	b.n	800aca2 <HAL_TIM_PWM_Start+0x9e>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d109      	bne.n	800ac5c <HAL_TIM_PWM_Start+0x58>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	bf14      	ite	ne
 800ac54:	2301      	movne	r3, #1
 800ac56:	2300      	moveq	r3, #0
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	e022      	b.n	800aca2 <HAL_TIM_PWM_Start+0x9e>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b0c      	cmp	r3, #12
 800ac60:	d109      	bne.n	800ac76 <HAL_TIM_PWM_Start+0x72>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	bf14      	ite	ne
 800ac6e:	2301      	movne	r3, #1
 800ac70:	2300      	moveq	r3, #0
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	e015      	b.n	800aca2 <HAL_TIM_PWM_Start+0x9e>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b10      	cmp	r3, #16
 800ac7a:	d109      	bne.n	800ac90 <HAL_TIM_PWM_Start+0x8c>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	bf14      	ite	ne
 800ac88:	2301      	movne	r3, #1
 800ac8a:	2300      	moveq	r3, #0
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	e008      	b.n	800aca2 <HAL_TIM_PWM_Start+0x9e>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	bf14      	ite	ne
 800ac9c:	2301      	movne	r3, #1
 800ac9e:	2300      	moveq	r3, #0
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e0a1      	b.n	800adee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d104      	bne.n	800acba <HAL_TIM_PWM_Start+0xb6>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2202      	movs	r2, #2
 800acb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acb8:	e023      	b.n	800ad02 <HAL_TIM_PWM_Start+0xfe>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	2b04      	cmp	r3, #4
 800acbe:	d104      	bne.n	800acca <HAL_TIM_PWM_Start+0xc6>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acc8:	e01b      	b.n	800ad02 <HAL_TIM_PWM_Start+0xfe>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b08      	cmp	r3, #8
 800acce:	d104      	bne.n	800acda <HAL_TIM_PWM_Start+0xd6>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acd8:	e013      	b.n	800ad02 <HAL_TIM_PWM_Start+0xfe>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b0c      	cmp	r3, #12
 800acde:	d104      	bne.n	800acea <HAL_TIM_PWM_Start+0xe6>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ace8:	e00b      	b.n	800ad02 <HAL_TIM_PWM_Start+0xfe>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2b10      	cmp	r3, #16
 800acee:	d104      	bne.n	800acfa <HAL_TIM_PWM_Start+0xf6>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2202      	movs	r2, #2
 800acf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acf8:	e003      	b.n	800ad02 <HAL_TIM_PWM_Start+0xfe>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2202      	movs	r2, #2
 800acfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2201      	movs	r2, #1
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 fcac 	bl	800c668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a38      	ldr	r2, [pc, #224]	; (800adf8 <HAL_TIM_PWM_Start+0x1f4>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d013      	beq.n	800ad42 <HAL_TIM_PWM_Start+0x13e>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a37      	ldr	r2, [pc, #220]	; (800adfc <HAL_TIM_PWM_Start+0x1f8>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00e      	beq.n	800ad42 <HAL_TIM_PWM_Start+0x13e>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a35      	ldr	r2, [pc, #212]	; (800ae00 <HAL_TIM_PWM_Start+0x1fc>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d009      	beq.n	800ad42 <HAL_TIM_PWM_Start+0x13e>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a34      	ldr	r2, [pc, #208]	; (800ae04 <HAL_TIM_PWM_Start+0x200>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d004      	beq.n	800ad42 <HAL_TIM_PWM_Start+0x13e>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a32      	ldr	r2, [pc, #200]	; (800ae08 <HAL_TIM_PWM_Start+0x204>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d101      	bne.n	800ad46 <HAL_TIM_PWM_Start+0x142>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <HAL_TIM_PWM_Start+0x144>
 800ad46:	2300      	movs	r3, #0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d007      	beq.n	800ad5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a25      	ldr	r2, [pc, #148]	; (800adf8 <HAL_TIM_PWM_Start+0x1f4>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d022      	beq.n	800adac <HAL_TIM_PWM_Start+0x1a8>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad6e:	d01d      	beq.n	800adac <HAL_TIM_PWM_Start+0x1a8>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a25      	ldr	r2, [pc, #148]	; (800ae0c <HAL_TIM_PWM_Start+0x208>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d018      	beq.n	800adac <HAL_TIM_PWM_Start+0x1a8>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a24      	ldr	r2, [pc, #144]	; (800ae10 <HAL_TIM_PWM_Start+0x20c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d013      	beq.n	800adac <HAL_TIM_PWM_Start+0x1a8>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a22      	ldr	r2, [pc, #136]	; (800ae14 <HAL_TIM_PWM_Start+0x210>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00e      	beq.n	800adac <HAL_TIM_PWM_Start+0x1a8>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a1a      	ldr	r2, [pc, #104]	; (800adfc <HAL_TIM_PWM_Start+0x1f8>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d009      	beq.n	800adac <HAL_TIM_PWM_Start+0x1a8>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a1e      	ldr	r2, [pc, #120]	; (800ae18 <HAL_TIM_PWM_Start+0x214>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d004      	beq.n	800adac <HAL_TIM_PWM_Start+0x1a8>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a16      	ldr	r2, [pc, #88]	; (800ae00 <HAL_TIM_PWM_Start+0x1fc>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d115      	bne.n	800add8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	4b1a      	ldr	r3, [pc, #104]	; (800ae1c <HAL_TIM_PWM_Start+0x218>)
 800adb4:	4013      	ands	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b06      	cmp	r3, #6
 800adbc:	d015      	beq.n	800adea <HAL_TIM_PWM_Start+0x1e6>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc4:	d011      	beq.n	800adea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f042 0201 	orr.w	r2, r2, #1
 800add4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add6:	e008      	b.n	800adea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0201 	orr.w	r2, r2, #1
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	e000      	b.n	800adec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	40010000 	.word	0x40010000
 800adfc:	40010400 	.word	0x40010400
 800ae00:	40014000 	.word	0x40014000
 800ae04:	40014400 	.word	0x40014400
 800ae08:	40014800 	.word	0x40014800
 800ae0c:	40000400 	.word	0x40000400
 800ae10:	40000800 	.word	0x40000800
 800ae14:	40000c00 	.word	0x40000c00
 800ae18:	40001800 	.word	0x40001800
 800ae1c:	00010007 	.word	0x00010007

0800ae20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f001 fc18 	bl	800c668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a3e      	ldr	r2, [pc, #248]	; (800af38 <HAL_TIM_PWM_Stop+0x118>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d013      	beq.n	800ae6a <HAL_TIM_PWM_Stop+0x4a>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a3d      	ldr	r2, [pc, #244]	; (800af3c <HAL_TIM_PWM_Stop+0x11c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00e      	beq.n	800ae6a <HAL_TIM_PWM_Stop+0x4a>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a3b      	ldr	r2, [pc, #236]	; (800af40 <HAL_TIM_PWM_Stop+0x120>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d009      	beq.n	800ae6a <HAL_TIM_PWM_Stop+0x4a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a3a      	ldr	r2, [pc, #232]	; (800af44 <HAL_TIM_PWM_Stop+0x124>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d004      	beq.n	800ae6a <HAL_TIM_PWM_Stop+0x4a>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a38      	ldr	r2, [pc, #224]	; (800af48 <HAL_TIM_PWM_Stop+0x128>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d101      	bne.n	800ae6e <HAL_TIM_PWM_Stop+0x4e>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e000      	b.n	800ae70 <HAL_TIM_PWM_Stop+0x50>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d017      	beq.n	800aea4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6a1a      	ldr	r2, [r3, #32]
 800ae7a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae7e:	4013      	ands	r3, r2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10f      	bne.n	800aea4 <HAL_TIM_PWM_Stop+0x84>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6a1a      	ldr	r2, [r3, #32]
 800ae8a:	f240 4344 	movw	r3, #1092	; 0x444
 800ae8e:	4013      	ands	r3, r2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d107      	bne.n	800aea4 <HAL_TIM_PWM_Stop+0x84>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aea2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6a1a      	ldr	r2, [r3, #32]
 800aeaa:	f241 1311 	movw	r3, #4369	; 0x1111
 800aeae:	4013      	ands	r3, r2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10f      	bne.n	800aed4 <HAL_TIM_PWM_Stop+0xb4>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6a1a      	ldr	r2, [r3, #32]
 800aeba:	f240 4344 	movw	r3, #1092	; 0x444
 800aebe:	4013      	ands	r3, r2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d107      	bne.n	800aed4 <HAL_TIM_PWM_Stop+0xb4>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0201 	bic.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d104      	bne.n	800aee4 <HAL_TIM_PWM_Stop+0xc4>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aee2:	e023      	b.n	800af2c <HAL_TIM_PWM_Stop+0x10c>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d104      	bne.n	800aef4 <HAL_TIM_PWM_Stop+0xd4>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aef2:	e01b      	b.n	800af2c <HAL_TIM_PWM_Stop+0x10c>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b08      	cmp	r3, #8
 800aef8:	d104      	bne.n	800af04 <HAL_TIM_PWM_Stop+0xe4>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af02:	e013      	b.n	800af2c <HAL_TIM_PWM_Stop+0x10c>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2b0c      	cmp	r3, #12
 800af08:	d104      	bne.n	800af14 <HAL_TIM_PWM_Stop+0xf4>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af12:	e00b      	b.n	800af2c <HAL_TIM_PWM_Stop+0x10c>
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b10      	cmp	r3, #16
 800af18:	d104      	bne.n	800af24 <HAL_TIM_PWM_Stop+0x104>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af22:	e003      	b.n	800af2c <HAL_TIM_PWM_Stop+0x10c>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	40010000 	.word	0x40010000
 800af3c:	40010400 	.word	0x40010400
 800af40:	40014000 	.word	0x40014000
 800af44:	40014400 	.word	0x40014400
 800af48:	40014800 	.word	0x40014800

0800af4c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e049      	b.n	800aff2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f841 	bl	800affa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3304      	adds	r3, #4
 800af88:	4619      	mov	r1, r3
 800af8a:	4610      	mov	r0, r2
 800af8c:	f000 fe34 	bl	800bbf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b002:	bf00      	nop
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
	...

0800b010 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d104      	bne.n	800b02e <HAL_TIM_IC_Start_IT+0x1e>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	e023      	b.n	800b076 <HAL_TIM_IC_Start_IT+0x66>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	2b04      	cmp	r3, #4
 800b032:	d104      	bne.n	800b03e <HAL_TIM_IC_Start_IT+0x2e>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	e01b      	b.n	800b076 <HAL_TIM_IC_Start_IT+0x66>
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b08      	cmp	r3, #8
 800b042:	d104      	bne.n	800b04e <HAL_TIM_IC_Start_IT+0x3e>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	e013      	b.n	800b076 <HAL_TIM_IC_Start_IT+0x66>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b0c      	cmp	r3, #12
 800b052:	d104      	bne.n	800b05e <HAL_TIM_IC_Start_IT+0x4e>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	e00b      	b.n	800b076 <HAL_TIM_IC_Start_IT+0x66>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b10      	cmp	r3, #16
 800b062:	d104      	bne.n	800b06e <HAL_TIM_IC_Start_IT+0x5e>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	e003      	b.n	800b076 <HAL_TIM_IC_Start_IT+0x66>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b074:	b2db      	uxtb	r3, r3
 800b076:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <HAL_TIM_IC_Start_IT+0x78>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b084:	b2db      	uxtb	r3, r3
 800b086:	e013      	b.n	800b0b0 <HAL_TIM_IC_Start_IT+0xa0>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d104      	bne.n	800b098 <HAL_TIM_IC_Start_IT+0x88>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b094:	b2db      	uxtb	r3, r3
 800b096:	e00b      	b.n	800b0b0 <HAL_TIM_IC_Start_IT+0xa0>
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2b08      	cmp	r3, #8
 800b09c:	d104      	bne.n	800b0a8 <HAL_TIM_IC_Start_IT+0x98>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	e003      	b.n	800b0b0 <HAL_TIM_IC_Start_IT+0xa0>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d102      	bne.n	800b0be <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0b8:	7b7b      	ldrb	r3, [r7, #13]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d001      	beq.n	800b0c2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e0e2      	b.n	800b288 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d104      	bne.n	800b0d2 <HAL_TIM_IC_Start_IT+0xc2>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0d0:	e023      	b.n	800b11a <HAL_TIM_IC_Start_IT+0x10a>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d104      	bne.n	800b0e2 <HAL_TIM_IC_Start_IT+0xd2>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2202      	movs	r2, #2
 800b0dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0e0:	e01b      	b.n	800b11a <HAL_TIM_IC_Start_IT+0x10a>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d104      	bne.n	800b0f2 <HAL_TIM_IC_Start_IT+0xe2>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0f0:	e013      	b.n	800b11a <HAL_TIM_IC_Start_IT+0x10a>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b0c      	cmp	r3, #12
 800b0f6:	d104      	bne.n	800b102 <HAL_TIM_IC_Start_IT+0xf2>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b100:	e00b      	b.n	800b11a <HAL_TIM_IC_Start_IT+0x10a>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b10      	cmp	r3, #16
 800b106:	d104      	bne.n	800b112 <HAL_TIM_IC_Start_IT+0x102>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b110:	e003      	b.n	800b11a <HAL_TIM_IC_Start_IT+0x10a>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2202      	movs	r2, #2
 800b116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d104      	bne.n	800b12a <HAL_TIM_IC_Start_IT+0x11a>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b128:	e013      	b.n	800b152 <HAL_TIM_IC_Start_IT+0x142>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b04      	cmp	r3, #4
 800b12e:	d104      	bne.n	800b13a <HAL_TIM_IC_Start_IT+0x12a>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b138:	e00b      	b.n	800b152 <HAL_TIM_IC_Start_IT+0x142>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d104      	bne.n	800b14a <HAL_TIM_IC_Start_IT+0x13a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2202      	movs	r2, #2
 800b144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b148:	e003      	b.n	800b152 <HAL_TIM_IC_Start_IT+0x142>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2202      	movs	r2, #2
 800b14e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b0c      	cmp	r3, #12
 800b156:	d841      	bhi.n	800b1dc <HAL_TIM_IC_Start_IT+0x1cc>
 800b158:	a201      	add	r2, pc, #4	; (adr r2, 800b160 <HAL_TIM_IC_Start_IT+0x150>)
 800b15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15e:	bf00      	nop
 800b160:	0800b195 	.word	0x0800b195
 800b164:	0800b1dd 	.word	0x0800b1dd
 800b168:	0800b1dd 	.word	0x0800b1dd
 800b16c:	0800b1dd 	.word	0x0800b1dd
 800b170:	0800b1a7 	.word	0x0800b1a7
 800b174:	0800b1dd 	.word	0x0800b1dd
 800b178:	0800b1dd 	.word	0x0800b1dd
 800b17c:	0800b1dd 	.word	0x0800b1dd
 800b180:	0800b1b9 	.word	0x0800b1b9
 800b184:	0800b1dd 	.word	0x0800b1dd
 800b188:	0800b1dd 	.word	0x0800b1dd
 800b18c:	0800b1dd 	.word	0x0800b1dd
 800b190:	0800b1cb 	.word	0x0800b1cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f042 0202 	orr.w	r2, r2, #2
 800b1a2:	60da      	str	r2, [r3, #12]
      break;
 800b1a4:	e01d      	b.n	800b1e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68da      	ldr	r2, [r3, #12]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f042 0204 	orr.w	r2, r2, #4
 800b1b4:	60da      	str	r2, [r3, #12]
      break;
 800b1b6:	e014      	b.n	800b1e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f042 0208 	orr.w	r2, r2, #8
 800b1c6:	60da      	str	r2, [r3, #12]
      break;
 800b1c8:	e00b      	b.n	800b1e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f042 0210 	orr.w	r2, r2, #16
 800b1d8:	60da      	str	r2, [r3, #12]
      break;
 800b1da:	e002      	b.n	800b1e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e0:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d14e      	bne.n	800b286 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f001 fa39 	bl	800c668 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a25      	ldr	r2, [pc, #148]	; (800b290 <HAL_TIM_IC_Start_IT+0x280>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d022      	beq.n	800b246 <HAL_TIM_IC_Start_IT+0x236>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b208:	d01d      	beq.n	800b246 <HAL_TIM_IC_Start_IT+0x236>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a21      	ldr	r2, [pc, #132]	; (800b294 <HAL_TIM_IC_Start_IT+0x284>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d018      	beq.n	800b246 <HAL_TIM_IC_Start_IT+0x236>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a1f      	ldr	r2, [pc, #124]	; (800b298 <HAL_TIM_IC_Start_IT+0x288>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d013      	beq.n	800b246 <HAL_TIM_IC_Start_IT+0x236>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a1e      	ldr	r2, [pc, #120]	; (800b29c <HAL_TIM_IC_Start_IT+0x28c>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00e      	beq.n	800b246 <HAL_TIM_IC_Start_IT+0x236>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a1c      	ldr	r2, [pc, #112]	; (800b2a0 <HAL_TIM_IC_Start_IT+0x290>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d009      	beq.n	800b246 <HAL_TIM_IC_Start_IT+0x236>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a1b      	ldr	r2, [pc, #108]	; (800b2a4 <HAL_TIM_IC_Start_IT+0x294>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d004      	beq.n	800b246 <HAL_TIM_IC_Start_IT+0x236>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a19      	ldr	r2, [pc, #100]	; (800b2a8 <HAL_TIM_IC_Start_IT+0x298>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d115      	bne.n	800b272 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	4b17      	ldr	r3, [pc, #92]	; (800b2ac <HAL_TIM_IC_Start_IT+0x29c>)
 800b24e:	4013      	ands	r3, r2
 800b250:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b06      	cmp	r3, #6
 800b256:	d015      	beq.n	800b284 <HAL_TIM_IC_Start_IT+0x274>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b25e:	d011      	beq.n	800b284 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f042 0201 	orr.w	r2, r2, #1
 800b26e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b270:	e008      	b.n	800b284 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0201 	orr.w	r2, r2, #1
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	e000      	b.n	800b286 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b284:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b286:	7bfb      	ldrb	r3, [r7, #15]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	40010000 	.word	0x40010000
 800b294:	40000400 	.word	0x40000400
 800b298:	40000800 	.word	0x40000800
 800b29c:	40000c00 	.word	0x40000c00
 800b2a0:	40010400 	.word	0x40010400
 800b2a4:	40001800 	.word	0x40001800
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	00010007 	.word	0x00010007

0800b2b0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b0c      	cmp	r3, #12
 800b2c2:	d841      	bhi.n	800b348 <HAL_TIM_IC_Stop_IT+0x98>
 800b2c4:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <HAL_TIM_IC_Stop_IT+0x1c>)
 800b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ca:	bf00      	nop
 800b2cc:	0800b301 	.word	0x0800b301
 800b2d0:	0800b349 	.word	0x0800b349
 800b2d4:	0800b349 	.word	0x0800b349
 800b2d8:	0800b349 	.word	0x0800b349
 800b2dc:	0800b313 	.word	0x0800b313
 800b2e0:	0800b349 	.word	0x0800b349
 800b2e4:	0800b349 	.word	0x0800b349
 800b2e8:	0800b349 	.word	0x0800b349
 800b2ec:	0800b325 	.word	0x0800b325
 800b2f0:	0800b349 	.word	0x0800b349
 800b2f4:	0800b349 	.word	0x0800b349
 800b2f8:	0800b349 	.word	0x0800b349
 800b2fc:	0800b337 	.word	0x0800b337
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f022 0202 	bic.w	r2, r2, #2
 800b30e:	60da      	str	r2, [r3, #12]
      break;
 800b310:	e01d      	b.n	800b34e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f022 0204 	bic.w	r2, r2, #4
 800b320:	60da      	str	r2, [r3, #12]
      break;
 800b322:	e014      	b.n	800b34e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0208 	bic.w	r2, r2, #8
 800b332:	60da      	str	r2, [r3, #12]
      break;
 800b334:	e00b      	b.n	800b34e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f022 0210 	bic.w	r2, r2, #16
 800b344:	60da      	str	r2, [r3, #12]
      break;
 800b346:	e002      	b.n	800b34e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
      break;
 800b34c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d166      	bne.n	800b422 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2200      	movs	r2, #0
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f001 f983 	bl	800c668 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6a1a      	ldr	r2, [r3, #32]
 800b368:	f241 1311 	movw	r3, #4369	; 0x1111
 800b36c:	4013      	ands	r3, r2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10f      	bne.n	800b392 <HAL_TIM_IC_Stop_IT+0xe2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6a1a      	ldr	r2, [r3, #32]
 800b378:	f240 4344 	movw	r3, #1092	; 0x444
 800b37c:	4013      	ands	r3, r2
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d107      	bne.n	800b392 <HAL_TIM_IC_Stop_IT+0xe2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f022 0201 	bic.w	r2, r2, #1
 800b390:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d104      	bne.n	800b3a2 <HAL_TIM_IC_Stop_IT+0xf2>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3a0:	e023      	b.n	800b3ea <HAL_TIM_IC_Stop_IT+0x13a>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d104      	bne.n	800b3b2 <HAL_TIM_IC_Stop_IT+0x102>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3b0:	e01b      	b.n	800b3ea <HAL_TIM_IC_Stop_IT+0x13a>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b08      	cmp	r3, #8
 800b3b6:	d104      	bne.n	800b3c2 <HAL_TIM_IC_Stop_IT+0x112>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3c0:	e013      	b.n	800b3ea <HAL_TIM_IC_Stop_IT+0x13a>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b0c      	cmp	r3, #12
 800b3c6:	d104      	bne.n	800b3d2 <HAL_TIM_IC_Stop_IT+0x122>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3d0:	e00b      	b.n	800b3ea <HAL_TIM_IC_Stop_IT+0x13a>
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b10      	cmp	r3, #16
 800b3d6:	d104      	bne.n	800b3e2 <HAL_TIM_IC_Stop_IT+0x132>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3e0:	e003      	b.n	800b3ea <HAL_TIM_IC_Stop_IT+0x13a>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d104      	bne.n	800b3fa <HAL_TIM_IC_Stop_IT+0x14a>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3f8:	e013      	b.n	800b422 <HAL_TIM_IC_Stop_IT+0x172>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d104      	bne.n	800b40a <HAL_TIM_IC_Stop_IT+0x15a>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b408:	e00b      	b.n	800b422 <HAL_TIM_IC_Stop_IT+0x172>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d104      	bne.n	800b41a <HAL_TIM_IC_Stop_IT+0x16a>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b418:	e003      	b.n	800b422 <HAL_TIM_IC_Stop_IT+0x172>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d122      	bne.n	800b488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d11b      	bne.n	800b488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f06f 0202 	mvn.w	r2, #2
 800b458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	f003 0303 	and.w	r3, r3, #3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7f7 fee6 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b474:	e005      	b.n	800b482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fba0 	bl	800bbbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fba7 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	f003 0304 	and.w	r3, r3, #4
 800b492:	2b04      	cmp	r3, #4
 800b494:	d122      	bne.n	800b4dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f003 0304 	and.w	r3, r3, #4
 800b4a0:	2b04      	cmp	r3, #4
 800b4a2:	d11b      	bne.n	800b4dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f06f 0204 	mvn.w	r2, #4
 800b4ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7f7 febc 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b4c8:	e005      	b.n	800b4d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fb76 	bl	800bbbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fb7d 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f003 0308 	and.w	r3, r3, #8
 800b4e6:	2b08      	cmp	r3, #8
 800b4e8:	d122      	bne.n	800b530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f003 0308 	and.w	r3, r3, #8
 800b4f4:	2b08      	cmp	r3, #8
 800b4f6:	d11b      	bne.n	800b530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f06f 0208 	mvn.w	r2, #8
 800b500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2204      	movs	r2, #4
 800b506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	f003 0303 	and.w	r3, r3, #3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d003      	beq.n	800b51e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7f7 fe92 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b51c:	e005      	b.n	800b52a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fb4c 	bl	800bbbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fb53 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	f003 0310 	and.w	r3, r3, #16
 800b53a:	2b10      	cmp	r3, #16
 800b53c:	d122      	bne.n	800b584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f003 0310 	and.w	r3, r3, #16
 800b548:	2b10      	cmp	r3, #16
 800b54a:	d11b      	bne.n	800b584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f06f 0210 	mvn.w	r2, #16
 800b554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2208      	movs	r2, #8
 800b55a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7f7 fe68 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b570:	e005      	b.n	800b57e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fb22 	bl	800bbbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fb29 	bl	800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d10e      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d107      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f06f 0201 	mvn.w	r2, #1
 800b5a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7f7 fec4 	bl	8003338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ba:	2b80      	cmp	r3, #128	; 0x80
 800b5bc:	d10e      	bne.n	800b5dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c8:	2b80      	cmp	r3, #128	; 0x80
 800b5ca:	d107      	bne.n	800b5dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 f904 	bl	800c7e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ea:	d10e      	bne.n	800b60a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f6:	2b80      	cmp	r3, #128	; 0x80
 800b5f8:	d107      	bne.n	800b60a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 f8f7 	bl	800c7f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b614:	2b40      	cmp	r3, #64	; 0x40
 800b616:	d10e      	bne.n	800b636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b622:	2b40      	cmp	r3, #64	; 0x40
 800b624:	d107      	bne.n	800b636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fad7 	bl	800bbe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	f003 0320 	and.w	r3, r3, #32
 800b640:	2b20      	cmp	r3, #32
 800b642:	d10e      	bne.n	800b662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	f003 0320 	and.w	r3, r3, #32
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d107      	bne.n	800b662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f06f 0220 	mvn.w	r2, #32
 800b65a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 f8b7 	bl	800c7d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b662:	bf00      	nop
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b086      	sub	sp, #24
 800b66e:	af00      	add	r7, sp, #0
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b684:	2302      	movs	r3, #2
 800b686:	e088      	b.n	800b79a <HAL_TIM_IC_ConfigChannel+0x130>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d11b      	bne.n	800b6ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6819      	ldr	r1, [r3, #0]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	f000 fe17 	bl	800c2d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	699a      	ldr	r2, [r3, #24]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f022 020c 	bic.w	r2, r2, #12
 800b6b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6999      	ldr	r1, [r3, #24]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	619a      	str	r2, [r3, #24]
 800b6cc:	e060      	b.n	800b790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b04      	cmp	r3, #4
 800b6d2:	d11c      	bne.n	800b70e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	6819      	ldr	r1, [r3, #0]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	f000 fe9b 	bl	800c41e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	699a      	ldr	r2, [r3, #24]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b6f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6999      	ldr	r1, [r3, #24]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	021a      	lsls	r2, r3, #8
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	430a      	orrs	r2, r1
 800b70a:	619a      	str	r2, [r3, #24]
 800b70c:	e040      	b.n	800b790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b08      	cmp	r3, #8
 800b712:	d11b      	bne.n	800b74c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	6819      	ldr	r1, [r3, #0]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	f000 fee8 	bl	800c4f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	69da      	ldr	r2, [r3, #28]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f022 020c 	bic.w	r2, r2, #12
 800b736:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	69d9      	ldr	r1, [r3, #28]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	689a      	ldr	r2, [r3, #8]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	430a      	orrs	r2, r1
 800b748:	61da      	str	r2, [r3, #28]
 800b74a:	e021      	b.n	800b790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b0c      	cmp	r3, #12
 800b750:	d11c      	bne.n	800b78c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6818      	ldr	r0, [r3, #0]
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6819      	ldr	r1, [r3, #0]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f000 ff05 	bl	800c570 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69da      	ldr	r2, [r3, #28]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b774:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	69d9      	ldr	r1, [r3, #28]
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	021a      	lsls	r2, r3, #8
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	61da      	str	r2, [r3, #28]
 800b78a:	e001      	b.n	800b790 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b798:	7dfb      	ldrb	r3, [r7, #23]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
	...

0800b7a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d101      	bne.n	800b7c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e0ff      	b.n	800b9c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b14      	cmp	r3, #20
 800b7ce:	f200 80f0 	bhi.w	800b9b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b7d2:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b82d 	.word	0x0800b82d
 800b7dc:	0800b9b3 	.word	0x0800b9b3
 800b7e0:	0800b9b3 	.word	0x0800b9b3
 800b7e4:	0800b9b3 	.word	0x0800b9b3
 800b7e8:	0800b86d 	.word	0x0800b86d
 800b7ec:	0800b9b3 	.word	0x0800b9b3
 800b7f0:	0800b9b3 	.word	0x0800b9b3
 800b7f4:	0800b9b3 	.word	0x0800b9b3
 800b7f8:	0800b8af 	.word	0x0800b8af
 800b7fc:	0800b9b3 	.word	0x0800b9b3
 800b800:	0800b9b3 	.word	0x0800b9b3
 800b804:	0800b9b3 	.word	0x0800b9b3
 800b808:	0800b8ef 	.word	0x0800b8ef
 800b80c:	0800b9b3 	.word	0x0800b9b3
 800b810:	0800b9b3 	.word	0x0800b9b3
 800b814:	0800b9b3 	.word	0x0800b9b3
 800b818:	0800b931 	.word	0x0800b931
 800b81c:	0800b9b3 	.word	0x0800b9b3
 800b820:	0800b9b3 	.word	0x0800b9b3
 800b824:	0800b9b3 	.word	0x0800b9b3
 800b828:	0800b971 	.word	0x0800b971
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 fa7a 	bl	800bd2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	699a      	ldr	r2, [r3, #24]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f042 0208 	orr.w	r2, r2, #8
 800b846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	699a      	ldr	r2, [r3, #24]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f022 0204 	bic.w	r2, r2, #4
 800b856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6999      	ldr	r1, [r3, #24]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	691a      	ldr	r2, [r3, #16]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	619a      	str	r2, [r3, #24]
      break;
 800b86a:	e0a5      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 faea 	bl	800be4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6999      	ldr	r1, [r3, #24]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	021a      	lsls	r2, r3, #8
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	619a      	str	r2, [r3, #24]
      break;
 800b8ac:	e084      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 fb53 	bl	800bf60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	69da      	ldr	r2, [r3, #28]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f042 0208 	orr.w	r2, r2, #8
 800b8c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69da      	ldr	r2, [r3, #28]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0204 	bic.w	r2, r2, #4
 800b8d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	69d9      	ldr	r1, [r3, #28]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	691a      	ldr	r2, [r3, #16]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	61da      	str	r2, [r3, #28]
      break;
 800b8ec:	e064      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fbbb 	bl	800c070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69da      	ldr	r2, [r3, #28]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69d9      	ldr	r1, [r3, #28]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	021a      	lsls	r2, r3, #8
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	61da      	str	r2, [r3, #28]
      break;
 800b92e:	e043      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 fc04 	bl	800c144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0208 	orr.w	r2, r2, #8
 800b94a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0204 	bic.w	r2, r2, #4
 800b95a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	691a      	ldr	r2, [r3, #16]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b96e:	e023      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fc48 	bl	800c20c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b98a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b99a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	021a      	lsls	r2, r3, #8
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9b0:	e002      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop

0800b9cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d101      	bne.n	800b9e8 <HAL_TIM_ConfigClockSource+0x1c>
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	e0dc      	b.n	800bba2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	4b6a      	ldr	r3, [pc, #424]	; (800bbac <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a64      	ldr	r2, [pc, #400]	; (800bbb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	f000 80a9 	beq.w	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba24:	4a62      	ldr	r2, [pc, #392]	; (800bbb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	f200 80ae 	bhi.w	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba2c:	4a61      	ldr	r2, [pc, #388]	; (800bbb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	f000 80a1 	beq.w	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba34:	4a5f      	ldr	r2, [pc, #380]	; (800bbb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	f200 80a6 	bhi.w	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba3c:	4a5e      	ldr	r2, [pc, #376]	; (800bbb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	f000 8099 	beq.w	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba44:	4a5c      	ldr	r2, [pc, #368]	; (800bbb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	f200 809e 	bhi.w	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba50:	f000 8091 	beq.w	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba58:	f200 8096 	bhi.w	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba60:	f000 8089 	beq.w	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba68:	f200 808e 	bhi.w	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba70:	d03e      	beq.n	800baf0 <HAL_TIM_ConfigClockSource+0x124>
 800ba72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba76:	f200 8087 	bhi.w	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba7e:	f000 8086 	beq.w	800bb8e <HAL_TIM_ConfigClockSource+0x1c2>
 800ba82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba86:	d87f      	bhi.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba88:	2b70      	cmp	r3, #112	; 0x70
 800ba8a:	d01a      	beq.n	800bac2 <HAL_TIM_ConfigClockSource+0xf6>
 800ba8c:	2b70      	cmp	r3, #112	; 0x70
 800ba8e:	d87b      	bhi.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba90:	2b60      	cmp	r3, #96	; 0x60
 800ba92:	d050      	beq.n	800bb36 <HAL_TIM_ConfigClockSource+0x16a>
 800ba94:	2b60      	cmp	r3, #96	; 0x60
 800ba96:	d877      	bhi.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba98:	2b50      	cmp	r3, #80	; 0x50
 800ba9a:	d03c      	beq.n	800bb16 <HAL_TIM_ConfigClockSource+0x14a>
 800ba9c:	2b50      	cmp	r3, #80	; 0x50
 800ba9e:	d873      	bhi.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800baa0:	2b40      	cmp	r3, #64	; 0x40
 800baa2:	d058      	beq.n	800bb56 <HAL_TIM_ConfigClockSource+0x18a>
 800baa4:	2b40      	cmp	r3, #64	; 0x40
 800baa6:	d86f      	bhi.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800baa8:	2b30      	cmp	r3, #48	; 0x30
 800baaa:	d064      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800baac:	2b30      	cmp	r3, #48	; 0x30
 800baae:	d86b      	bhi.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800bab0:	2b20      	cmp	r3, #32
 800bab2:	d060      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d867      	bhi.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d05c      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800babc:	2b10      	cmp	r3, #16
 800babe:	d05a      	beq.n	800bb76 <HAL_TIM_ConfigClockSource+0x1aa>
 800bac0:	e062      	b.n	800bb88 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	6899      	ldr	r1, [r3, #8]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f000 fda9 	bl	800c628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	609a      	str	r2, [r3, #8]
      break;
 800baee:	e04f      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6818      	ldr	r0, [r3, #0]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	6899      	ldr	r1, [r3, #8]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	f000 fd92 	bl	800c628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689a      	ldr	r2, [r3, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb12:	609a      	str	r2, [r3, #8]
      break;
 800bb14:	e03c      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6818      	ldr	r0, [r3, #0]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	6859      	ldr	r1, [r3, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f000 fc4c 	bl	800c3c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2150      	movs	r1, #80	; 0x50
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 fd5c 	bl	800c5ec <TIM_ITRx_SetConfig>
      break;
 800bb34:	e02c      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6818      	ldr	r0, [r3, #0]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	6859      	ldr	r1, [r3, #4]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f000 fca8 	bl	800c498 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2160      	movs	r1, #96	; 0x60
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 fd4c 	bl	800c5ec <TIM_ITRx_SetConfig>
      break;
 800bb54:	e01c      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	6859      	ldr	r1, [r3, #4]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f000 fc2c 	bl	800c3c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2140      	movs	r1, #64	; 0x40
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 fd3c 	bl	800c5ec <TIM_ITRx_SetConfig>
      break;
 800bb74:	e00c      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4610      	mov	r0, r2
 800bb82:	f000 fd33 	bl	800c5ec <TIM_ITRx_SetConfig>
      break;
 800bb86:	e003      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8c:	e000      	b.n	800bb90 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bb8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	ffceff88 	.word	0xffceff88
 800bbb0:	00100040 	.word	0x00100040
 800bbb4:	00100030 	.word	0x00100030
 800bbb8:	00100020 	.word	0x00100020

0800bbbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a40      	ldr	r2, [pc, #256]	; (800bd0c <TIM_Base_SetConfig+0x114>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d013      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc16:	d00f      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a3d      	ldr	r2, [pc, #244]	; (800bd10 <TIM_Base_SetConfig+0x118>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d00b      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a3c      	ldr	r2, [pc, #240]	; (800bd14 <TIM_Base_SetConfig+0x11c>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d007      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a3b      	ldr	r2, [pc, #236]	; (800bd18 <TIM_Base_SetConfig+0x120>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d003      	beq.n	800bc38 <TIM_Base_SetConfig+0x40>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a3a      	ldr	r2, [pc, #232]	; (800bd1c <TIM_Base_SetConfig+0x124>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d108      	bne.n	800bc4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a2f      	ldr	r2, [pc, #188]	; (800bd0c <TIM_Base_SetConfig+0x114>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d01f      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc58:	d01b      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a2c      	ldr	r2, [pc, #176]	; (800bd10 <TIM_Base_SetConfig+0x118>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d017      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a2b      	ldr	r2, [pc, #172]	; (800bd14 <TIM_Base_SetConfig+0x11c>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d013      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a2a      	ldr	r2, [pc, #168]	; (800bd18 <TIM_Base_SetConfig+0x120>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00f      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a29      	ldr	r2, [pc, #164]	; (800bd1c <TIM_Base_SetConfig+0x124>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00b      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a28      	ldr	r2, [pc, #160]	; (800bd20 <TIM_Base_SetConfig+0x128>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d007      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a27      	ldr	r2, [pc, #156]	; (800bd24 <TIM_Base_SetConfig+0x12c>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d003      	beq.n	800bc92 <TIM_Base_SetConfig+0x9a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a26      	ldr	r2, [pc, #152]	; (800bd28 <TIM_Base_SetConfig+0x130>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d108      	bne.n	800bca4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a10      	ldr	r2, [pc, #64]	; (800bd0c <TIM_Base_SetConfig+0x114>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00f      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a12      	ldr	r2, [pc, #72]	; (800bd1c <TIM_Base_SetConfig+0x124>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00b      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a11      	ldr	r2, [pc, #68]	; (800bd20 <TIM_Base_SetConfig+0x128>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d007      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a10      	ldr	r2, [pc, #64]	; (800bd24 <TIM_Base_SetConfig+0x12c>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d003      	beq.n	800bcf0 <TIM_Base_SetConfig+0xf8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a0f      	ldr	r2, [pc, #60]	; (800bd28 <TIM_Base_SetConfig+0x130>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d103      	bne.n	800bcf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	691a      	ldr	r2, [r3, #16]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	615a      	str	r2, [r3, #20]
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	40010000 	.word	0x40010000
 800bd10:	40000400 	.word	0x40000400
 800bd14:	40000800 	.word	0x40000800
 800bd18:	40000c00 	.word	0x40000c00
 800bd1c:	40010400 	.word	0x40010400
 800bd20:	40014000 	.word	0x40014000
 800bd24:	40014400 	.word	0x40014400
 800bd28:	40014800 	.word	0x40014800

0800bd2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	f023 0201 	bic.w	r2, r3, #1
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	699b      	ldr	r3, [r3, #24]
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4b37      	ldr	r3, [pc, #220]	; (800be34 <TIM_OC1_SetConfig+0x108>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 0303 	bic.w	r3, r3, #3
 800bd62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f023 0302 	bic.w	r3, r3, #2
 800bd74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a2d      	ldr	r2, [pc, #180]	; (800be38 <TIM_OC1_SetConfig+0x10c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d00f      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a2c      	ldr	r2, [pc, #176]	; (800be3c <TIM_OC1_SetConfig+0x110>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00b      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a2b      	ldr	r2, [pc, #172]	; (800be40 <TIM_OC1_SetConfig+0x114>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d007      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a2a      	ldr	r2, [pc, #168]	; (800be44 <TIM_OC1_SetConfig+0x118>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d003      	beq.n	800bda8 <TIM_OC1_SetConfig+0x7c>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a29      	ldr	r2, [pc, #164]	; (800be48 <TIM_OC1_SetConfig+0x11c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d10c      	bne.n	800bdc2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f023 0308 	bic.w	r3, r3, #8
 800bdae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f023 0304 	bic.w	r3, r3, #4
 800bdc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a1c      	ldr	r2, [pc, #112]	; (800be38 <TIM_OC1_SetConfig+0x10c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d00f      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a1b      	ldr	r2, [pc, #108]	; (800be3c <TIM_OC1_SetConfig+0x110>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d00b      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a1a      	ldr	r2, [pc, #104]	; (800be40 <TIM_OC1_SetConfig+0x114>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d007      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a19      	ldr	r2, [pc, #100]	; (800be44 <TIM_OC1_SetConfig+0x118>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d003      	beq.n	800bdea <TIM_OC1_SetConfig+0xbe>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a18      	ldr	r2, [pc, #96]	; (800be48 <TIM_OC1_SetConfig+0x11c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d111      	bne.n	800be0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4313      	orrs	r3, r2
 800be02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	621a      	str	r2, [r3, #32]
}
 800be28:	bf00      	nop
 800be2a:	371c      	adds	r7, #28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	fffeff8f 	.word	0xfffeff8f
 800be38:	40010000 	.word	0x40010000
 800be3c:	40010400 	.word	0x40010400
 800be40:	40014000 	.word	0x40014000
 800be44:	40014400 	.word	0x40014400
 800be48:	40014800 	.word	0x40014800

0800be4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	f023 0210 	bic.w	r2, r3, #16
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	4b34      	ldr	r3, [pc, #208]	; (800bf48 <TIM_OC2_SetConfig+0xfc>)
 800be78:	4013      	ands	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	021b      	lsls	r3, r3, #8
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f023 0320 	bic.w	r3, r3, #32
 800be96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	011b      	lsls	r3, r3, #4
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a29      	ldr	r2, [pc, #164]	; (800bf4c <TIM_OC2_SetConfig+0x100>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d003      	beq.n	800beb4 <TIM_OC2_SetConfig+0x68>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a28      	ldr	r2, [pc, #160]	; (800bf50 <TIM_OC2_SetConfig+0x104>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d10d      	bne.n	800bed0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	011b      	lsls	r3, r3, #4
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a1e      	ldr	r2, [pc, #120]	; (800bf4c <TIM_OC2_SetConfig+0x100>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d00f      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a1d      	ldr	r2, [pc, #116]	; (800bf50 <TIM_OC2_SetConfig+0x104>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d00b      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a1c      	ldr	r2, [pc, #112]	; (800bf54 <TIM_OC2_SetConfig+0x108>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d007      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a1b      	ldr	r2, [pc, #108]	; (800bf58 <TIM_OC2_SetConfig+0x10c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d003      	beq.n	800bef8 <TIM_OC2_SetConfig+0xac>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a1a      	ldr	r2, [pc, #104]	; (800bf5c <TIM_OC2_SetConfig+0x110>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d113      	bne.n	800bf20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800befe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	621a      	str	r2, [r3, #32]
}
 800bf3a:	bf00      	nop
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	feff8fff 	.word	0xfeff8fff
 800bf4c:	40010000 	.word	0x40010000
 800bf50:	40010400 	.word	0x40010400
 800bf54:	40014000 	.word	0x40014000
 800bf58:	40014400 	.word	0x40014400
 800bf5c:	40014800 	.word	0x40014800

0800bf60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	69db      	ldr	r3, [r3, #28]
 800bf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	4b33      	ldr	r3, [pc, #204]	; (800c058 <TIM_OC3_SetConfig+0xf8>)
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f023 0303 	bic.w	r3, r3, #3
 800bf96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	021b      	lsls	r3, r3, #8
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a28      	ldr	r2, [pc, #160]	; (800c05c <TIM_OC3_SetConfig+0xfc>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d003      	beq.n	800bfc6 <TIM_OC3_SetConfig+0x66>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a27      	ldr	r2, [pc, #156]	; (800c060 <TIM_OC3_SetConfig+0x100>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d10d      	bne.n	800bfe2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a1d      	ldr	r2, [pc, #116]	; (800c05c <TIM_OC3_SetConfig+0xfc>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d00f      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a1c      	ldr	r2, [pc, #112]	; (800c060 <TIM_OC3_SetConfig+0x100>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d00b      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a1b      	ldr	r2, [pc, #108]	; (800c064 <TIM_OC3_SetConfig+0x104>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d007      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a1a      	ldr	r2, [pc, #104]	; (800c068 <TIM_OC3_SetConfig+0x108>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d003      	beq.n	800c00a <TIM_OC3_SetConfig+0xaa>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a19      	ldr	r2, [pc, #100]	; (800c06c <TIM_OC3_SetConfig+0x10c>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d113      	bne.n	800c032 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	4313      	orrs	r3, r2
 800c024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	011b      	lsls	r3, r3, #4
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4313      	orrs	r3, r2
 800c030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	621a      	str	r2, [r3, #32]
}
 800c04c:	bf00      	nop
 800c04e:	371c      	adds	r7, #28
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	fffeff8f 	.word	0xfffeff8f
 800c05c:	40010000 	.word	0x40010000
 800c060:	40010400 	.word	0x40010400
 800c064:	40014000 	.word	0x40014000
 800c068:	40014400 	.word	0x40014400
 800c06c:	40014800 	.word	0x40014800

0800c070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c070:	b480      	push	{r7}
 800c072:	b087      	sub	sp, #28
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4b24      	ldr	r3, [pc, #144]	; (800c12c <TIM_OC4_SetConfig+0xbc>)
 800c09c:	4013      	ands	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	021b      	lsls	r3, r3, #8
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	031b      	lsls	r3, r3, #12
 800c0c2:	693a      	ldr	r2, [r7, #16]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a19      	ldr	r2, [pc, #100]	; (800c130 <TIM_OC4_SetConfig+0xc0>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d00f      	beq.n	800c0f0 <TIM_OC4_SetConfig+0x80>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a18      	ldr	r2, [pc, #96]	; (800c134 <TIM_OC4_SetConfig+0xc4>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d00b      	beq.n	800c0f0 <TIM_OC4_SetConfig+0x80>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a17      	ldr	r2, [pc, #92]	; (800c138 <TIM_OC4_SetConfig+0xc8>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d007      	beq.n	800c0f0 <TIM_OC4_SetConfig+0x80>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a16      	ldr	r2, [pc, #88]	; (800c13c <TIM_OC4_SetConfig+0xcc>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d003      	beq.n	800c0f0 <TIM_OC4_SetConfig+0x80>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a15      	ldr	r2, [pc, #84]	; (800c140 <TIM_OC4_SetConfig+0xd0>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d109      	bne.n	800c104 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	695b      	ldr	r3, [r3, #20]
 800c0fc:	019b      	lsls	r3, r3, #6
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	4313      	orrs	r3, r2
 800c102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	693a      	ldr	r2, [r7, #16]
 800c11c:	621a      	str	r2, [r3, #32]
}
 800c11e:	bf00      	nop
 800c120:	371c      	adds	r7, #28
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	feff8fff 	.word	0xfeff8fff
 800c130:	40010000 	.word	0x40010000
 800c134:	40010400 	.word	0x40010400
 800c138:	40014000 	.word	0x40014000
 800c13c:	40014400 	.word	0x40014400
 800c140:	40014800 	.word	0x40014800

0800c144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4b21      	ldr	r3, [pc, #132]	; (800c1f4 <TIM_OC5_SetConfig+0xb0>)
 800c170:	4013      	ands	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	041b      	lsls	r3, r3, #16
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4313      	orrs	r3, r2
 800c190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a18      	ldr	r2, [pc, #96]	; (800c1f8 <TIM_OC5_SetConfig+0xb4>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d00f      	beq.n	800c1ba <TIM_OC5_SetConfig+0x76>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a17      	ldr	r2, [pc, #92]	; (800c1fc <TIM_OC5_SetConfig+0xb8>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d00b      	beq.n	800c1ba <TIM_OC5_SetConfig+0x76>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a16      	ldr	r2, [pc, #88]	; (800c200 <TIM_OC5_SetConfig+0xbc>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d007      	beq.n	800c1ba <TIM_OC5_SetConfig+0x76>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a15      	ldr	r2, [pc, #84]	; (800c204 <TIM_OC5_SetConfig+0xc0>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d003      	beq.n	800c1ba <TIM_OC5_SetConfig+0x76>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a14      	ldr	r2, [pc, #80]	; (800c208 <TIM_OC5_SetConfig+0xc4>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d109      	bne.n	800c1ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	021b      	lsls	r3, r3, #8
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	685a      	ldr	r2, [r3, #4]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	621a      	str	r2, [r3, #32]
}
 800c1e8:	bf00      	nop
 800c1ea:	371c      	adds	r7, #28
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	fffeff8f 	.word	0xfffeff8f
 800c1f8:	40010000 	.word	0x40010000
 800c1fc:	40010400 	.word	0x40010400
 800c200:	40014000 	.word	0x40014000
 800c204:	40014400 	.word	0x40014400
 800c208:	40014800 	.word	0x40014800

0800c20c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a1b      	ldr	r3, [r3, #32]
 800c21a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	4b22      	ldr	r3, [pc, #136]	; (800c2c0 <TIM_OC6_SetConfig+0xb4>)
 800c238:	4013      	ands	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	021b      	lsls	r3, r3, #8
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c24e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	051b      	lsls	r3, r3, #20
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	4313      	orrs	r3, r2
 800c25a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a19      	ldr	r2, [pc, #100]	; (800c2c4 <TIM_OC6_SetConfig+0xb8>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d00f      	beq.n	800c284 <TIM_OC6_SetConfig+0x78>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a18      	ldr	r2, [pc, #96]	; (800c2c8 <TIM_OC6_SetConfig+0xbc>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d00b      	beq.n	800c284 <TIM_OC6_SetConfig+0x78>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a17      	ldr	r2, [pc, #92]	; (800c2cc <TIM_OC6_SetConfig+0xc0>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d007      	beq.n	800c284 <TIM_OC6_SetConfig+0x78>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a16      	ldr	r2, [pc, #88]	; (800c2d0 <TIM_OC6_SetConfig+0xc4>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d003      	beq.n	800c284 <TIM_OC6_SetConfig+0x78>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a15      	ldr	r2, [pc, #84]	; (800c2d4 <TIM_OC6_SetConfig+0xc8>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d109      	bne.n	800c298 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c28a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	695b      	ldr	r3, [r3, #20]
 800c290:	029b      	lsls	r3, r3, #10
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	4313      	orrs	r3, r2
 800c296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	621a      	str	r2, [r3, #32]
}
 800c2b2:	bf00      	nop
 800c2b4:	371c      	adds	r7, #28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	feff8fff 	.word	0xfeff8fff
 800c2c4:	40010000 	.word	0x40010000
 800c2c8:	40010400 	.word	0x40010400
 800c2cc:	40014000 	.word	0x40014000
 800c2d0:	40014400 	.word	0x40014400
 800c2d4:	40014800 	.word	0x40014800

0800c2d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	f023 0201 	bic.w	r2, r3, #1
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4a28      	ldr	r2, [pc, #160]	; (800c3a4 <TIM_TI1_SetConfig+0xcc>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d01b      	beq.n	800c33e <TIM_TI1_SetConfig+0x66>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c30c:	d017      	beq.n	800c33e <TIM_TI1_SetConfig+0x66>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4a25      	ldr	r2, [pc, #148]	; (800c3a8 <TIM_TI1_SetConfig+0xd0>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d013      	beq.n	800c33e <TIM_TI1_SetConfig+0x66>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4a24      	ldr	r2, [pc, #144]	; (800c3ac <TIM_TI1_SetConfig+0xd4>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d00f      	beq.n	800c33e <TIM_TI1_SetConfig+0x66>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4a23      	ldr	r2, [pc, #140]	; (800c3b0 <TIM_TI1_SetConfig+0xd8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d00b      	beq.n	800c33e <TIM_TI1_SetConfig+0x66>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4a22      	ldr	r2, [pc, #136]	; (800c3b4 <TIM_TI1_SetConfig+0xdc>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d007      	beq.n	800c33e <TIM_TI1_SetConfig+0x66>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4a21      	ldr	r2, [pc, #132]	; (800c3b8 <TIM_TI1_SetConfig+0xe0>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d003      	beq.n	800c33e <TIM_TI1_SetConfig+0x66>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4a20      	ldr	r2, [pc, #128]	; (800c3bc <TIM_TI1_SetConfig+0xe4>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d101      	bne.n	800c342 <TIM_TI1_SetConfig+0x6a>
 800c33e:	2301      	movs	r3, #1
 800c340:	e000      	b.n	800c344 <TIM_TI1_SetConfig+0x6c>
 800c342:	2300      	movs	r3, #0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d008      	beq.n	800c35a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f023 0303 	bic.w	r3, r3, #3
 800c34e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c350:	697a      	ldr	r2, [r7, #20]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4313      	orrs	r3, r2
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	e003      	b.n	800c362 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f043 0301 	orr.w	r3, r3, #1
 800c360:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	011b      	lsls	r3, r3, #4
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4313      	orrs	r3, r2
 800c374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f023 030a 	bic.w	r3, r3, #10
 800c37c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	f003 030a 	and.w	r3, r3, #10
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	4313      	orrs	r3, r2
 800c388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	621a      	str	r2, [r3, #32]
}
 800c396:	bf00      	nop
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	40010000 	.word	0x40010000
 800c3a8:	40000400 	.word	0x40000400
 800c3ac:	40000800 	.word	0x40000800
 800c3b0:	40000c00 	.word	0x40000c00
 800c3b4:	40010400 	.word	0x40010400
 800c3b8:	40001800 	.word	0x40001800
 800c3bc:	40014000 	.word	0x40014000

0800c3c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
 800c3d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	f023 0201 	bic.w	r2, r3, #1
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	011b      	lsls	r3, r3, #4
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f023 030a 	bic.w	r3, r3, #10
 800c3fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	4313      	orrs	r3, r2
 800c404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	621a      	str	r2, [r3, #32]
}
 800c412:	bf00      	nop
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c41e:	b480      	push	{r7}
 800c420:	b087      	sub	sp, #28
 800c422:	af00      	add	r7, sp, #0
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	60b9      	str	r1, [r7, #8]
 800c428:	607a      	str	r2, [r7, #4]
 800c42a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6a1b      	ldr	r3, [r3, #32]
 800c430:	f023 0210 	bic.w	r2, r3, #16
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c44a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	021b      	lsls	r3, r3, #8
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	4313      	orrs	r3, r2
 800c454:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c45c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	031b      	lsls	r3, r3, #12
 800c462:	b29b      	uxth	r3, r3
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	4313      	orrs	r3, r2
 800c468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c470:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	011b      	lsls	r3, r3, #4
 800c476:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	621a      	str	r2, [r3, #32]
}
 800c48c:	bf00      	nop
 800c48e:	371c      	adds	r7, #28
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c498:	b480      	push	{r7}
 800c49a:	b087      	sub	sp, #28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	f023 0210 	bic.w	r2, r3, #16
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	031b      	lsls	r3, r3, #12
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	011b      	lsls	r3, r3, #4
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	697a      	ldr	r2, [r7, #20]
 800c4e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	621a      	str	r2, [r3, #32]
}
 800c4ec:	bf00      	nop
 800c4ee:	371c      	adds	r7, #28
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	69db      	ldr	r3, [r3, #28]
 800c516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6a1b      	ldr	r3, [r3, #32]
 800c51c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f023 0303 	bic.w	r3, r3, #3
 800c524:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	011b      	lsls	r3, r3, #4
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	4313      	orrs	r3, r2
 800c540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c548:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	021b      	lsls	r3, r3, #8
 800c54e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	4313      	orrs	r3, r2
 800c556:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	693a      	ldr	r2, [r7, #16]
 800c562:	621a      	str	r2, [r3, #32]
}
 800c564:	bf00      	nop
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
 800c57c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6a1b      	ldr	r3, [r3, #32]
 800c594:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c59c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	021b      	lsls	r3, r3, #8
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	031b      	lsls	r3, r3, #12
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c5c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	031b      	lsls	r3, r3, #12
 800c5c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	621a      	str	r2, [r3, #32]
}
 800c5de:	bf00      	nop
 800c5e0:	371c      	adds	r7, #28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
	...

0800c5ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	4b09      	ldr	r3, [pc, #36]	; (800c624 <TIM_ITRx_SetConfig+0x38>)
 800c600:	4013      	ands	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4313      	orrs	r3, r2
 800c60a:	f043 0307 	orr.w	r3, r3, #7
 800c60e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	609a      	str	r2, [r3, #8]
}
 800c616:	bf00      	nop
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	ffcfff8f 	.word	0xffcfff8f

0800c628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c628:	b480      	push	{r7}
 800c62a:	b087      	sub	sp, #28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
 800c634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	021a      	lsls	r2, r3, #8
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	431a      	orrs	r2, r3
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	4313      	orrs	r3, r2
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	4313      	orrs	r3, r2
 800c654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	609a      	str	r2, [r3, #8]
}
 800c65c:	bf00      	nop
 800c65e:	371c      	adds	r7, #28
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	f003 031f 	and.w	r3, r3, #31
 800c67a:	2201      	movs	r2, #1
 800c67c:	fa02 f303 	lsl.w	r3, r2, r3
 800c680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6a1a      	ldr	r2, [r3, #32]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	43db      	mvns	r3, r3
 800c68a:	401a      	ands	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6a1a      	ldr	r2, [r3, #32]
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f003 031f 	and.w	r3, r3, #31
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	fa01 f303 	lsl.w	r3, r1, r3
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	621a      	str	r2, [r3, #32]
}
 800c6a6:	bf00      	nop
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
	...

0800c6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d101      	bne.n	800c6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	e06d      	b.n	800c7a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a30      	ldr	r2, [pc, #192]	; (800c7b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d004      	beq.n	800c700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a2f      	ldr	r2, [pc, #188]	; (800c7b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d108      	bne.n	800c712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	4313      	orrs	r3, r2
 800c710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	4313      	orrs	r3, r2
 800c722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a20      	ldr	r2, [pc, #128]	; (800c7b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d022      	beq.n	800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c73e:	d01d      	beq.n	800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a1d      	ldr	r2, [pc, #116]	; (800c7bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d018      	beq.n	800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a1c      	ldr	r2, [pc, #112]	; (800c7c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d013      	beq.n	800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a1a      	ldr	r2, [pc, #104]	; (800c7c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00e      	beq.n	800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a15      	ldr	r2, [pc, #84]	; (800c7b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d009      	beq.n	800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a16      	ldr	r2, [pc, #88]	; (800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d004      	beq.n	800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a15      	ldr	r2, [pc, #84]	; (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d10c      	bne.n	800c796 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr
 800c7b4:	40010000 	.word	0x40010000
 800c7b8:	40010400 	.word	0x40010400
 800c7bc:	40000400 	.word	0x40000400
 800c7c0:	40000800 	.word	0x40000800
 800c7c4:	40000c00 	.word	0x40000c00
 800c7c8:	40001800 	.word	0x40001800
 800c7cc:	40014000 	.word	0x40014000

0800c7d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d101      	bne.n	800c81e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
 800c81c:	e042      	b.n	800c8a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c824:	2b00      	cmp	r3, #0
 800c826:	d106      	bne.n	800c836 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7fa f9d9 	bl	8006be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2224      	movs	r2, #36	; 0x24
 800c83a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 0201 	bic.w	r2, r2, #1
 800c84c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fccc 	bl	800d1ec <UART_SetConfig>
 800c854:	4603      	mov	r3, r0
 800c856:	2b01      	cmp	r3, #1
 800c858:	d101      	bne.n	800c85e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e022      	b.n	800c8a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f001 fa28 	bl	800dcbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c87a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	689a      	ldr	r2, [r3, #8]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c88a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f042 0201 	orr.w	r2, r2, #1
 800c89a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f001 faaf 	bl	800de00 <UART_CheckIdleState>
 800c8a2:	4603      	mov	r3, r0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08a      	sub	sp, #40	; 0x28
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	603b      	str	r3, [r7, #0]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8c2:	2b20      	cmp	r3, #32
 800c8c4:	f040 8083 	bne.w	800c9ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d002      	beq.n	800c8d4 <HAL_UART_Transmit+0x28>
 800c8ce:	88fb      	ldrh	r3, [r7, #6]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e07b      	b.n	800c9d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d101      	bne.n	800c8e6 <HAL_UART_Transmit+0x3a>
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	e074      	b.n	800c9d0 <HAL_UART_Transmit+0x124>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2221      	movs	r2, #33	; 0x21
 800c8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c8fe:	f7fa fb4f 	bl	8006fa0 <HAL_GetTick>
 800c902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	88fa      	ldrh	r2, [r7, #6]
 800c908:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	88fa      	ldrh	r2, [r7, #6]
 800c910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c91c:	d108      	bne.n	800c930 <HAL_UART_Transmit+0x84>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d104      	bne.n	800c930 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c926:	2300      	movs	r3, #0
 800c928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	61bb      	str	r3, [r7, #24]
 800c92e:	e003      	b.n	800c938 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c940:	e02c      	b.n	800c99c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2200      	movs	r2, #0
 800c94a:	2180      	movs	r1, #128	; 0x80
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f001 faa2 	bl	800de96 <UART_WaitOnFlagUntilTimeout>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	e039      	b.n	800c9d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	461a      	mov	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c970:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	3302      	adds	r3, #2
 800c976:	61bb      	str	r3, [r7, #24]
 800c978:	e007      	b.n	800c98a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	781a      	ldrb	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	3301      	adds	r3, #1
 800c988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c990:	b29b      	uxth	r3, r3
 800c992:	3b01      	subs	r3, #1
 800c994:	b29a      	uxth	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1cc      	bne.n	800c942 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	2140      	movs	r1, #64	; 0x40
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f001 fa6f 	bl	800de96 <UART_WaitOnFlagUntilTimeout>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e006      	b.n	800c9d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e000      	b.n	800c9d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c9ce:	2302      	movs	r3, #2
  }
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b08a      	sub	sp, #40	; 0x28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ec:	2b20      	cmp	r3, #32
 800c9ee:	d142      	bne.n	800ca76 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <HAL_UART_Receive_IT+0x24>
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e03b      	b.n	800ca78 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d101      	bne.n	800ca0e <HAL_UART_Receive_IT+0x36>
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	e034      	b.n	800ca78 <HAL_UART_Receive_IT+0xa0>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a17      	ldr	r2, [pc, #92]	; (800ca80 <HAL_UART_Receive_IT+0xa8>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d01f      	beq.n	800ca66 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d018      	beq.n	800ca66 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
 800ca40:	613b      	str	r3, [r7, #16]
   return(result);
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca48:	627b      	str	r3, [r7, #36]	; 0x24
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	623b      	str	r3, [r7, #32]
 800ca54:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca56:	69f9      	ldr	r1, [r7, #28]
 800ca58:	6a3a      	ldr	r2, [r7, #32]
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e6      	bne.n	800ca34 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	68b9      	ldr	r1, [r7, #8]
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f001 fadb 	bl	800e028 <UART_Start_Receive_IT>
 800ca72:	4603      	mov	r3, r0
 800ca74:	e000      	b.n	800ca78 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ca76:	2302      	movs	r3, #2
  }
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3728      	adds	r7, #40	; 0x28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	58000c00 	.word	0x58000c00

0800ca84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b0ba      	sub	sp, #232	; 0xe8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800caaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800caae:	f640 030f 	movw	r3, #2063	; 0x80f
 800cab2:	4013      	ands	r3, r2
 800cab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d11b      	bne.n	800caf8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cac4:	f003 0320 	and.w	r3, r3, #32
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d015      	beq.n	800caf8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cacc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cad0:	f003 0320 	and.w	r3, r3, #32
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d105      	bne.n	800cae4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cadc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d009      	beq.n	800caf8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 835a 	beq.w	800d1a2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	4798      	blx	r3
      }
      return;
 800caf6:	e354      	b.n	800d1a2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800caf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 811f 	beq.w	800cd40 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cb06:	4b8b      	ldr	r3, [pc, #556]	; (800cd34 <HAL_UART_IRQHandler+0x2b0>)
 800cb08:	4013      	ands	r3, r2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d106      	bne.n	800cb1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb12:	4b89      	ldr	r3, [pc, #548]	; (800cd38 <HAL_UART_IRQHandler+0x2b4>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 8112 	beq.w	800cd40 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d011      	beq.n	800cb4c <HAL_UART_IRQHandler+0xc8>
 800cb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00b      	beq.n	800cb4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb42:	f043 0201 	orr.w	r2, r3, #1
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb50:	f003 0302 	and.w	r3, r3, #2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d011      	beq.n	800cb7c <HAL_UART_IRQHandler+0xf8>
 800cb58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb5c:	f003 0301 	and.w	r3, r3, #1
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00b      	beq.n	800cb7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2202      	movs	r2, #2
 800cb6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb72:	f043 0204 	orr.w	r2, r3, #4
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d011      	beq.n	800cbac <HAL_UART_IRQHandler+0x128>
 800cb88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00b      	beq.n	800cbac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2204      	movs	r2, #4
 800cb9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cba2:	f043 0202 	orr.w	r2, r3, #2
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cbac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbb0:	f003 0308 	and.w	r3, r3, #8
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d017      	beq.n	800cbe8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cbb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbbc:	f003 0320 	and.w	r3, r3, #32
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d105      	bne.n	800cbd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cbc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbc8:	4b5a      	ldr	r3, [pc, #360]	; (800cd34 <HAL_UART_IRQHandler+0x2b0>)
 800cbca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00b      	beq.n	800cbe8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2208      	movs	r2, #8
 800cbd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbde:	f043 0208 	orr.w	r2, r3, #8
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cbe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d012      	beq.n	800cc1a <HAL_UART_IRQHandler+0x196>
 800cbf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00c      	beq.n	800cc1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc10:	f043 0220 	orr.w	r2, r3, #32
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 82c0 	beq.w	800d1a6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc2a:	f003 0320 	and.w	r3, r3, #32
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d013      	beq.n	800cc5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc36:	f003 0320 	and.w	r3, r3, #32
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d105      	bne.n	800cc4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d007      	beq.n	800cc5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d003      	beq.n	800cc5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	689b      	ldr	r3, [r3, #8]
 800cc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6e:	2b40      	cmp	r3, #64	; 0x40
 800cc70:	d005      	beq.n	800cc7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d04f      	beq.n	800cd1e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f001 fafc 	bl	800e27c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc8e:	2b40      	cmp	r3, #64	; 0x40
 800cc90:	d141      	bne.n	800cd16 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3308      	adds	r3, #8
 800cc98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cca0:	e853 3f00 	ldrex	r3, [r3]
 800cca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ccac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3308      	adds	r3, #8
 800ccba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ccbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ccc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ccca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ccce:	e841 2300 	strex	r3, r2, [r1]
 800ccd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ccd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1d9      	bne.n	800cc92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d013      	beq.n	800cd0e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccea:	4a14      	ldr	r2, [pc, #80]	; (800cd3c <HAL_UART_IRQHandler+0x2b8>)
 800ccec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fa fdf0 	bl	80078d8 <HAL_DMA_Abort_IT>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d017      	beq.n	800cd2e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cd08:	4610      	mov	r0, r2
 800cd0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd0c:	e00f      	b.n	800cd2e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fa56 	bl	800d1c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd14:	e00b      	b.n	800cd2e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fa52 	bl	800d1c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd1c:	e007      	b.n	800cd2e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa4e 	bl	800d1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cd2c:	e23b      	b.n	800d1a6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd2e:	bf00      	nop
    return;
 800cd30:	e239      	b.n	800d1a6 <HAL_UART_IRQHandler+0x722>
 800cd32:	bf00      	nop
 800cd34:	10000001 	.word	0x10000001
 800cd38:	04000120 	.word	0x04000120
 800cd3c:	0800e349 	.word	0x0800e349

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	f040 81ce 	bne.w	800d0e6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd4e:	f003 0310 	and.w	r3, r3, #16
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 81c7 	beq.w	800d0e6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd5c:	f003 0310 	and.w	r3, r3, #16
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f000 81c0 	beq.w	800d0e6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2210      	movs	r2, #16
 800cd6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd78:	2b40      	cmp	r3, #64	; 0x40
 800cd7a:	f040 813b 	bne.w	800cff4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a8b      	ldr	r2, [pc, #556]	; (800cfb4 <HAL_UART_IRQHandler+0x530>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d059      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a89      	ldr	r2, [pc, #548]	; (800cfb8 <HAL_UART_IRQHandler+0x534>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d053      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a87      	ldr	r2, [pc, #540]	; (800cfbc <HAL_UART_IRQHandler+0x538>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d04d      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a85      	ldr	r2, [pc, #532]	; (800cfc0 <HAL_UART_IRQHandler+0x53c>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d047      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a83      	ldr	r2, [pc, #524]	; (800cfc4 <HAL_UART_IRQHandler+0x540>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d041      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a81      	ldr	r2, [pc, #516]	; (800cfc8 <HAL_UART_IRQHandler+0x544>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d03b      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a7f      	ldr	r2, [pc, #508]	; (800cfcc <HAL_UART_IRQHandler+0x548>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d035      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a7d      	ldr	r2, [pc, #500]	; (800cfd0 <HAL_UART_IRQHandler+0x54c>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d02f      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a7b      	ldr	r2, [pc, #492]	; (800cfd4 <HAL_UART_IRQHandler+0x550>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d029      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a79      	ldr	r2, [pc, #484]	; (800cfd8 <HAL_UART_IRQHandler+0x554>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d023      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a77      	ldr	r2, [pc, #476]	; (800cfdc <HAL_UART_IRQHandler+0x558>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d01d      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a75      	ldr	r2, [pc, #468]	; (800cfe0 <HAL_UART_IRQHandler+0x55c>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d017      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a73      	ldr	r2, [pc, #460]	; (800cfe4 <HAL_UART_IRQHandler+0x560>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d011      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a71      	ldr	r2, [pc, #452]	; (800cfe8 <HAL_UART_IRQHandler+0x564>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d00b      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a6f      	ldr	r2, [pc, #444]	; (800cfec <HAL_UART_IRQHandler+0x568>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d005      	beq.n	800ce3e <HAL_UART_IRQHandler+0x3ba>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a6d      	ldr	r2, [pc, #436]	; (800cff0 <HAL_UART_IRQHandler+0x56c>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d105      	bne.n	800ce4a <HAL_UART_IRQHandler+0x3c6>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	e004      	b.n	800ce54 <HAL_UART_IRQHandler+0x3d0>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 81a4 	beq.w	800d1aa <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	f080 819c 	bcs.w	800d1aa <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ce78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce86:	f000 8086 	beq.w	800cf96 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce96:	e853 3f00 	ldrex	r3, [r3]
 800ce9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ce9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cea6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ceb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ceb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cebc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cec0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cec4:	e841 2300 	strex	r3, r2, [r1]
 800cec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1da      	bne.n	800ce8a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	3308      	adds	r3, #8
 800ceda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cedc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cede:	e853 3f00 	ldrex	r3, [r3]
 800cee2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cee6:	f023 0301 	bic.w	r3, r3, #1
 800ceea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3308      	adds	r3, #8
 800cef4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cef8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cefc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e1      	bne.n	800ced4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	3308      	adds	r3, #8
 800cf16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf1a:	e853 3f00 	ldrex	r3, [r3]
 800cf1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3308      	adds	r3, #8
 800cf30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cf34:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf3c:	e841 2300 	strex	r3, r2, [r1]
 800cf40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cf42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1e3      	bne.n	800cf10 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2220      	movs	r2, #32
 800cf4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf5e:	e853 3f00 	ldrex	r3, [r3]
 800cf62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf66:	f023 0310 	bic.w	r3, r3, #16
 800cf6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf78:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf80:	e841 2300 	strex	r3, r2, [r1]
 800cf84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1e4      	bne.n	800cf56 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fa f983 	bl	800729c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f912 	bl	800d1d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfb0:	e0fb      	b.n	800d1aa <HAL_UART_IRQHandler+0x726>
 800cfb2:	bf00      	nop
 800cfb4:	40020010 	.word	0x40020010
 800cfb8:	40020028 	.word	0x40020028
 800cfbc:	40020040 	.word	0x40020040
 800cfc0:	40020058 	.word	0x40020058
 800cfc4:	40020070 	.word	0x40020070
 800cfc8:	40020088 	.word	0x40020088
 800cfcc:	400200a0 	.word	0x400200a0
 800cfd0:	400200b8 	.word	0x400200b8
 800cfd4:	40020410 	.word	0x40020410
 800cfd8:	40020428 	.word	0x40020428
 800cfdc:	40020440 	.word	0x40020440
 800cfe0:	40020458 	.word	0x40020458
 800cfe4:	40020470 	.word	0x40020470
 800cfe8:	40020488 	.word	0x40020488
 800cfec:	400204a0 	.word	0x400204a0
 800cff0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d000:	b29b      	uxth	r3, r3
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d00e:	b29b      	uxth	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 80cc 	beq.w	800d1ae <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d016:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 80c7 	beq.w	800d1ae <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d028:	e853 3f00 	ldrex	r3, [r3]
 800d02c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	461a      	mov	r2, r3
 800d03e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d042:	647b      	str	r3, [r7, #68]	; 0x44
 800d044:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d04a:	e841 2300 	strex	r3, r2, [r1]
 800d04e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1e4      	bne.n	800d020 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	e853 3f00 	ldrex	r3, [r3]
 800d064:	623b      	str	r3, [r7, #32]
   return(result);
 800d066:	6a3a      	ldr	r2, [r7, #32]
 800d068:	4b54      	ldr	r3, [pc, #336]	; (800d1bc <HAL_UART_IRQHandler+0x738>)
 800d06a:	4013      	ands	r3, r2
 800d06c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3308      	adds	r3, #8
 800d076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d07a:	633a      	str	r2, [r7, #48]	; 0x30
 800d07c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1e3      	bne.n	800d056 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2220      	movs	r2, #32
 800d092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	e853 3f00 	ldrex	r3, [r3]
 800d0ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f023 0310 	bic.w	r3, r3, #16
 800d0b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d0c4:	61fb      	str	r3, [r7, #28]
 800d0c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c8:	69b9      	ldr	r1, [r7, #24]
 800d0ca:	69fa      	ldr	r2, [r7, #28]
 800d0cc:	e841 2300 	strex	r3, r2, [r1]
 800d0d0:	617b      	str	r3, [r7, #20]
   return(result);
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d1e4      	bne.n	800d0a2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f878 	bl	800d1d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0e4:	e063      	b.n	800d1ae <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00e      	beq.n	800d110 <HAL_UART_IRQHandler+0x68c>
 800d0f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d008      	beq.n	800d110 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d106:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f001 fdbb 	bl	800ec84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d10e:	e051      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d014      	beq.n	800d146 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d124:	2b00      	cmp	r3, #0
 800d126:	d105      	bne.n	800d134 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d12c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d008      	beq.n	800d146 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d03a      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	4798      	blx	r3
    }
    return;
 800d144:	e035      	b.n	800d1b2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d009      	beq.n	800d166 <HAL_UART_IRQHandler+0x6e2>
 800d152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d003      	beq.n	800d166 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f001 f908 	bl	800e374 <UART_EndTransmit_IT>
    return;
 800d164:	e026      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d16a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <HAL_UART_IRQHandler+0x702>
 800d172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d176:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 fd94 	bl	800ecac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d184:	e016      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d18a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d010      	beq.n	800d1b4 <HAL_UART_IRQHandler+0x730>
 800d192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d196:	2b00      	cmp	r3, #0
 800d198:	da0c      	bge.n	800d1b4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f001 fd7c 	bl	800ec98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1a0:	e008      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
      return;
 800d1a2:	bf00      	nop
 800d1a4:	e006      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
    return;
 800d1a6:	bf00      	nop
 800d1a8:	e004      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
      return;
 800d1aa:	bf00      	nop
 800d1ac:	e002      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
      return;
 800d1ae:	bf00      	nop
 800d1b0:	e000      	b.n	800d1b4 <HAL_UART_IRQHandler+0x730>
    return;
 800d1b2:	bf00      	nop
  }
}
 800d1b4:	37e8      	adds	r7, #232	; 0xe8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	effffffe 	.word	0xeffffffe

0800d1c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1f0:	b092      	sub	sp, #72	; 0x48
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	689a      	ldr	r2, [r3, #8]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	431a      	orrs	r2, r3
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	431a      	orrs	r2, r3
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	69db      	ldr	r3, [r3, #28]
 800d210:	4313      	orrs	r3, r2
 800d212:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	4bbe      	ldr	r3, [pc, #760]	; (800d514 <UART_SetConfig+0x328>)
 800d21c:	4013      	ands	r3, r2
 800d21e:	697a      	ldr	r2, [r7, #20]
 800d220:	6812      	ldr	r2, [r2, #0]
 800d222:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d224:	430b      	orrs	r3, r1
 800d226:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	68da      	ldr	r2, [r3, #12]
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	430a      	orrs	r2, r1
 800d23c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4ab3      	ldr	r2, [pc, #716]	; (800d518 <UART_SetConfig+0x32c>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d004      	beq.n	800d258 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d254:	4313      	orrs	r3, r2
 800d256:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	689a      	ldr	r2, [r3, #8]
 800d25e:	4baf      	ldr	r3, [pc, #700]	; (800d51c <UART_SetConfig+0x330>)
 800d260:	4013      	ands	r3, r2
 800d262:	697a      	ldr	r2, [r7, #20]
 800d264:	6812      	ldr	r2, [r2, #0]
 800d266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d268:	430b      	orrs	r3, r1
 800d26a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d272:	f023 010f 	bic.w	r1, r3, #15
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	430a      	orrs	r2, r1
 800d280:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4aa6      	ldr	r2, [pc, #664]	; (800d520 <UART_SetConfig+0x334>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d177      	bne.n	800d37c <UART_SetConfig+0x190>
 800d28c:	4ba5      	ldr	r3, [pc, #660]	; (800d524 <UART_SetConfig+0x338>)
 800d28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d294:	2b28      	cmp	r3, #40	; 0x28
 800d296:	d86d      	bhi.n	800d374 <UART_SetConfig+0x188>
 800d298:	a201      	add	r2, pc, #4	; (adr r2, 800d2a0 <UART_SetConfig+0xb4>)
 800d29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29e:	bf00      	nop
 800d2a0:	0800d345 	.word	0x0800d345
 800d2a4:	0800d375 	.word	0x0800d375
 800d2a8:	0800d375 	.word	0x0800d375
 800d2ac:	0800d375 	.word	0x0800d375
 800d2b0:	0800d375 	.word	0x0800d375
 800d2b4:	0800d375 	.word	0x0800d375
 800d2b8:	0800d375 	.word	0x0800d375
 800d2bc:	0800d375 	.word	0x0800d375
 800d2c0:	0800d34d 	.word	0x0800d34d
 800d2c4:	0800d375 	.word	0x0800d375
 800d2c8:	0800d375 	.word	0x0800d375
 800d2cc:	0800d375 	.word	0x0800d375
 800d2d0:	0800d375 	.word	0x0800d375
 800d2d4:	0800d375 	.word	0x0800d375
 800d2d8:	0800d375 	.word	0x0800d375
 800d2dc:	0800d375 	.word	0x0800d375
 800d2e0:	0800d355 	.word	0x0800d355
 800d2e4:	0800d375 	.word	0x0800d375
 800d2e8:	0800d375 	.word	0x0800d375
 800d2ec:	0800d375 	.word	0x0800d375
 800d2f0:	0800d375 	.word	0x0800d375
 800d2f4:	0800d375 	.word	0x0800d375
 800d2f8:	0800d375 	.word	0x0800d375
 800d2fc:	0800d375 	.word	0x0800d375
 800d300:	0800d35d 	.word	0x0800d35d
 800d304:	0800d375 	.word	0x0800d375
 800d308:	0800d375 	.word	0x0800d375
 800d30c:	0800d375 	.word	0x0800d375
 800d310:	0800d375 	.word	0x0800d375
 800d314:	0800d375 	.word	0x0800d375
 800d318:	0800d375 	.word	0x0800d375
 800d31c:	0800d375 	.word	0x0800d375
 800d320:	0800d365 	.word	0x0800d365
 800d324:	0800d375 	.word	0x0800d375
 800d328:	0800d375 	.word	0x0800d375
 800d32c:	0800d375 	.word	0x0800d375
 800d330:	0800d375 	.word	0x0800d375
 800d334:	0800d375 	.word	0x0800d375
 800d338:	0800d375 	.word	0x0800d375
 800d33c:	0800d375 	.word	0x0800d375
 800d340:	0800d36d 	.word	0x0800d36d
 800d344:	2301      	movs	r3, #1
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e222      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d34c:	2304      	movs	r3, #4
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e21e      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d354:	2308      	movs	r3, #8
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35a:	e21a      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d35c:	2310      	movs	r3, #16
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d362:	e216      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d364:	2320      	movs	r3, #32
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d36a:	e212      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d36c:	2340      	movs	r3, #64	; 0x40
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d372:	e20e      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d374:	2380      	movs	r3, #128	; 0x80
 800d376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37a:	e20a      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a69      	ldr	r2, [pc, #420]	; (800d528 <UART_SetConfig+0x33c>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d130      	bne.n	800d3e8 <UART_SetConfig+0x1fc>
 800d386:	4b67      	ldr	r3, [pc, #412]	; (800d524 <UART_SetConfig+0x338>)
 800d388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	2b05      	cmp	r3, #5
 800d390:	d826      	bhi.n	800d3e0 <UART_SetConfig+0x1f4>
 800d392:	a201      	add	r2, pc, #4	; (adr r2, 800d398 <UART_SetConfig+0x1ac>)
 800d394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d398:	0800d3b1 	.word	0x0800d3b1
 800d39c:	0800d3b9 	.word	0x0800d3b9
 800d3a0:	0800d3c1 	.word	0x0800d3c1
 800d3a4:	0800d3c9 	.word	0x0800d3c9
 800d3a8:	0800d3d1 	.word	0x0800d3d1
 800d3ac:	0800d3d9 	.word	0x0800d3d9
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e1ec      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d3b8:	2304      	movs	r3, #4
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e1e8      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d3c0:	2308      	movs	r3, #8
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c6:	e1e4      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d3c8:	2310      	movs	r3, #16
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e1e0      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d3d0:	2320      	movs	r3, #32
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e1dc      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d3d8:	2340      	movs	r3, #64	; 0x40
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e1d8      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d3e0:	2380      	movs	r3, #128	; 0x80
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e1d4      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a4f      	ldr	r2, [pc, #316]	; (800d52c <UART_SetConfig+0x340>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d130      	bne.n	800d454 <UART_SetConfig+0x268>
 800d3f2:	4b4c      	ldr	r3, [pc, #304]	; (800d524 <UART_SetConfig+0x338>)
 800d3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f6:	f003 0307 	and.w	r3, r3, #7
 800d3fa:	2b05      	cmp	r3, #5
 800d3fc:	d826      	bhi.n	800d44c <UART_SetConfig+0x260>
 800d3fe:	a201      	add	r2, pc, #4	; (adr r2, 800d404 <UART_SetConfig+0x218>)
 800d400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d404:	0800d41d 	.word	0x0800d41d
 800d408:	0800d425 	.word	0x0800d425
 800d40c:	0800d42d 	.word	0x0800d42d
 800d410:	0800d435 	.word	0x0800d435
 800d414:	0800d43d 	.word	0x0800d43d
 800d418:	0800d445 	.word	0x0800d445
 800d41c:	2300      	movs	r3, #0
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d422:	e1b6      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d424:	2304      	movs	r3, #4
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42a:	e1b2      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d42c:	2308      	movs	r3, #8
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d432:	e1ae      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d434:	2310      	movs	r3, #16
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43a:	e1aa      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d43c:	2320      	movs	r3, #32
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d442:	e1a6      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d444:	2340      	movs	r3, #64	; 0x40
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e1a2      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d44c:	2380      	movs	r3, #128	; 0x80
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e19e      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a35      	ldr	r2, [pc, #212]	; (800d530 <UART_SetConfig+0x344>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d130      	bne.n	800d4c0 <UART_SetConfig+0x2d4>
 800d45e:	4b31      	ldr	r3, [pc, #196]	; (800d524 <UART_SetConfig+0x338>)
 800d460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	2b05      	cmp	r3, #5
 800d468:	d826      	bhi.n	800d4b8 <UART_SetConfig+0x2cc>
 800d46a:	a201      	add	r2, pc, #4	; (adr r2, 800d470 <UART_SetConfig+0x284>)
 800d46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d470:	0800d489 	.word	0x0800d489
 800d474:	0800d491 	.word	0x0800d491
 800d478:	0800d499 	.word	0x0800d499
 800d47c:	0800d4a1 	.word	0x0800d4a1
 800d480:	0800d4a9 	.word	0x0800d4a9
 800d484:	0800d4b1 	.word	0x0800d4b1
 800d488:	2300      	movs	r3, #0
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d48e:	e180      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d490:	2304      	movs	r3, #4
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d496:	e17c      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d498:	2308      	movs	r3, #8
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49e:	e178      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d4a0:	2310      	movs	r3, #16
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a6:	e174      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d4a8:	2320      	movs	r3, #32
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ae:	e170      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d4b0:	2340      	movs	r3, #64	; 0x40
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b6:	e16c      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d4b8:	2380      	movs	r3, #128	; 0x80
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4be:	e168      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a1b      	ldr	r2, [pc, #108]	; (800d534 <UART_SetConfig+0x348>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d142      	bne.n	800d550 <UART_SetConfig+0x364>
 800d4ca:	4b16      	ldr	r3, [pc, #88]	; (800d524 <UART_SetConfig+0x338>)
 800d4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ce:	f003 0307 	and.w	r3, r3, #7
 800d4d2:	2b05      	cmp	r3, #5
 800d4d4:	d838      	bhi.n	800d548 <UART_SetConfig+0x35c>
 800d4d6:	a201      	add	r2, pc, #4	; (adr r2, 800d4dc <UART_SetConfig+0x2f0>)
 800d4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4dc:	0800d4f5 	.word	0x0800d4f5
 800d4e0:	0800d4fd 	.word	0x0800d4fd
 800d4e4:	0800d505 	.word	0x0800d505
 800d4e8:	0800d50d 	.word	0x0800d50d
 800d4ec:	0800d539 	.word	0x0800d539
 800d4f0:	0800d541 	.word	0x0800d541
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4fa:	e14a      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d502:	e146      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d504:	2308      	movs	r3, #8
 800d506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50a:	e142      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d50c:	2310      	movs	r3, #16
 800d50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d512:	e13e      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d514:	cfff69f3 	.word	0xcfff69f3
 800d518:	58000c00 	.word	0x58000c00
 800d51c:	11fff4ff 	.word	0x11fff4ff
 800d520:	40011000 	.word	0x40011000
 800d524:	58024400 	.word	0x58024400
 800d528:	40004400 	.word	0x40004400
 800d52c:	40004800 	.word	0x40004800
 800d530:	40004c00 	.word	0x40004c00
 800d534:	40005000 	.word	0x40005000
 800d538:	2320      	movs	r3, #32
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53e:	e128      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d540:	2340      	movs	r3, #64	; 0x40
 800d542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d546:	e124      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d548:	2380      	movs	r3, #128	; 0x80
 800d54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d54e:	e120      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4acb      	ldr	r2, [pc, #812]	; (800d884 <UART_SetConfig+0x698>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d176      	bne.n	800d648 <UART_SetConfig+0x45c>
 800d55a:	4bcb      	ldr	r3, [pc, #812]	; (800d888 <UART_SetConfig+0x69c>)
 800d55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d55e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d562:	2b28      	cmp	r3, #40	; 0x28
 800d564:	d86c      	bhi.n	800d640 <UART_SetConfig+0x454>
 800d566:	a201      	add	r2, pc, #4	; (adr r2, 800d56c <UART_SetConfig+0x380>)
 800d568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56c:	0800d611 	.word	0x0800d611
 800d570:	0800d641 	.word	0x0800d641
 800d574:	0800d641 	.word	0x0800d641
 800d578:	0800d641 	.word	0x0800d641
 800d57c:	0800d641 	.word	0x0800d641
 800d580:	0800d641 	.word	0x0800d641
 800d584:	0800d641 	.word	0x0800d641
 800d588:	0800d641 	.word	0x0800d641
 800d58c:	0800d619 	.word	0x0800d619
 800d590:	0800d641 	.word	0x0800d641
 800d594:	0800d641 	.word	0x0800d641
 800d598:	0800d641 	.word	0x0800d641
 800d59c:	0800d641 	.word	0x0800d641
 800d5a0:	0800d641 	.word	0x0800d641
 800d5a4:	0800d641 	.word	0x0800d641
 800d5a8:	0800d641 	.word	0x0800d641
 800d5ac:	0800d621 	.word	0x0800d621
 800d5b0:	0800d641 	.word	0x0800d641
 800d5b4:	0800d641 	.word	0x0800d641
 800d5b8:	0800d641 	.word	0x0800d641
 800d5bc:	0800d641 	.word	0x0800d641
 800d5c0:	0800d641 	.word	0x0800d641
 800d5c4:	0800d641 	.word	0x0800d641
 800d5c8:	0800d641 	.word	0x0800d641
 800d5cc:	0800d629 	.word	0x0800d629
 800d5d0:	0800d641 	.word	0x0800d641
 800d5d4:	0800d641 	.word	0x0800d641
 800d5d8:	0800d641 	.word	0x0800d641
 800d5dc:	0800d641 	.word	0x0800d641
 800d5e0:	0800d641 	.word	0x0800d641
 800d5e4:	0800d641 	.word	0x0800d641
 800d5e8:	0800d641 	.word	0x0800d641
 800d5ec:	0800d631 	.word	0x0800d631
 800d5f0:	0800d641 	.word	0x0800d641
 800d5f4:	0800d641 	.word	0x0800d641
 800d5f8:	0800d641 	.word	0x0800d641
 800d5fc:	0800d641 	.word	0x0800d641
 800d600:	0800d641 	.word	0x0800d641
 800d604:	0800d641 	.word	0x0800d641
 800d608:	0800d641 	.word	0x0800d641
 800d60c:	0800d639 	.word	0x0800d639
 800d610:	2301      	movs	r3, #1
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d616:	e0bc      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d618:	2304      	movs	r3, #4
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61e:	e0b8      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d620:	2308      	movs	r3, #8
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d626:	e0b4      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d628:	2310      	movs	r3, #16
 800d62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62e:	e0b0      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d630:	2320      	movs	r3, #32
 800d632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d636:	e0ac      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d638:	2340      	movs	r3, #64	; 0x40
 800d63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63e:	e0a8      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d640:	2380      	movs	r3, #128	; 0x80
 800d642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d646:	e0a4      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a8f      	ldr	r2, [pc, #572]	; (800d88c <UART_SetConfig+0x6a0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d130      	bne.n	800d6b4 <UART_SetConfig+0x4c8>
 800d652:	4b8d      	ldr	r3, [pc, #564]	; (800d888 <UART_SetConfig+0x69c>)
 800d654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d656:	f003 0307 	and.w	r3, r3, #7
 800d65a:	2b05      	cmp	r3, #5
 800d65c:	d826      	bhi.n	800d6ac <UART_SetConfig+0x4c0>
 800d65e:	a201      	add	r2, pc, #4	; (adr r2, 800d664 <UART_SetConfig+0x478>)
 800d660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d664:	0800d67d 	.word	0x0800d67d
 800d668:	0800d685 	.word	0x0800d685
 800d66c:	0800d68d 	.word	0x0800d68d
 800d670:	0800d695 	.word	0x0800d695
 800d674:	0800d69d 	.word	0x0800d69d
 800d678:	0800d6a5 	.word	0x0800d6a5
 800d67c:	2300      	movs	r3, #0
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e086      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d684:	2304      	movs	r3, #4
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e082      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d68c:	2308      	movs	r3, #8
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d692:	e07e      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d694:	2310      	movs	r3, #16
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69a:	e07a      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d69c:	2320      	movs	r3, #32
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a2:	e076      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d6a4:	2340      	movs	r3, #64	; 0x40
 800d6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6aa:	e072      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d6ac:	2380      	movs	r3, #128	; 0x80
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b2:	e06e      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a75      	ldr	r2, [pc, #468]	; (800d890 <UART_SetConfig+0x6a4>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d130      	bne.n	800d720 <UART_SetConfig+0x534>
 800d6be:	4b72      	ldr	r3, [pc, #456]	; (800d888 <UART_SetConfig+0x69c>)
 800d6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b05      	cmp	r3, #5
 800d6c8:	d826      	bhi.n	800d718 <UART_SetConfig+0x52c>
 800d6ca:	a201      	add	r2, pc, #4	; (adr r2, 800d6d0 <UART_SetConfig+0x4e4>)
 800d6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d0:	0800d6e9 	.word	0x0800d6e9
 800d6d4:	0800d6f1 	.word	0x0800d6f1
 800d6d8:	0800d6f9 	.word	0x0800d6f9
 800d6dc:	0800d701 	.word	0x0800d701
 800d6e0:	0800d709 	.word	0x0800d709
 800d6e4:	0800d711 	.word	0x0800d711
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ee:	e050      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d6f0:	2304      	movs	r3, #4
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f6:	e04c      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d6f8:	2308      	movs	r3, #8
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6fe:	e048      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d700:	2310      	movs	r3, #16
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d706:	e044      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d708:	2320      	movs	r3, #32
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70e:	e040      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d710:	2340      	movs	r3, #64	; 0x40
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d716:	e03c      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d718:	2380      	movs	r3, #128	; 0x80
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71e:	e038      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a5b      	ldr	r2, [pc, #364]	; (800d894 <UART_SetConfig+0x6a8>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d130      	bne.n	800d78c <UART_SetConfig+0x5a0>
 800d72a:	4b57      	ldr	r3, [pc, #348]	; (800d888 <UART_SetConfig+0x69c>)
 800d72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d72e:	f003 0307 	and.w	r3, r3, #7
 800d732:	2b05      	cmp	r3, #5
 800d734:	d826      	bhi.n	800d784 <UART_SetConfig+0x598>
 800d736:	a201      	add	r2, pc, #4	; (adr r2, 800d73c <UART_SetConfig+0x550>)
 800d738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d73c:	0800d755 	.word	0x0800d755
 800d740:	0800d75d 	.word	0x0800d75d
 800d744:	0800d765 	.word	0x0800d765
 800d748:	0800d76d 	.word	0x0800d76d
 800d74c:	0800d775 	.word	0x0800d775
 800d750:	0800d77d 	.word	0x0800d77d
 800d754:	2302      	movs	r3, #2
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75a:	e01a      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d75c:	2304      	movs	r3, #4
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d762:	e016      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d764:	2308      	movs	r3, #8
 800d766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76a:	e012      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d76c:	2310      	movs	r3, #16
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d772:	e00e      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d774:	2320      	movs	r3, #32
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77a:	e00a      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d77c:	2340      	movs	r3, #64	; 0x40
 800d77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d782:	e006      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d784:	2380      	movs	r3, #128	; 0x80
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e002      	b.n	800d792 <UART_SetConfig+0x5a6>
 800d78c:	2380      	movs	r3, #128	; 0x80
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a3f      	ldr	r2, [pc, #252]	; (800d894 <UART_SetConfig+0x6a8>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	f040 80f8 	bne.w	800d98e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d79e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d7a2:	2b20      	cmp	r3, #32
 800d7a4:	dc46      	bgt.n	800d834 <UART_SetConfig+0x648>
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	f2c0 8082 	blt.w	800d8b0 <UART_SetConfig+0x6c4>
 800d7ac:	3b02      	subs	r3, #2
 800d7ae:	2b1e      	cmp	r3, #30
 800d7b0:	d87e      	bhi.n	800d8b0 <UART_SetConfig+0x6c4>
 800d7b2:	a201      	add	r2, pc, #4	; (adr r2, 800d7b8 <UART_SetConfig+0x5cc>)
 800d7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b8:	0800d83b 	.word	0x0800d83b
 800d7bc:	0800d8b1 	.word	0x0800d8b1
 800d7c0:	0800d843 	.word	0x0800d843
 800d7c4:	0800d8b1 	.word	0x0800d8b1
 800d7c8:	0800d8b1 	.word	0x0800d8b1
 800d7cc:	0800d8b1 	.word	0x0800d8b1
 800d7d0:	0800d853 	.word	0x0800d853
 800d7d4:	0800d8b1 	.word	0x0800d8b1
 800d7d8:	0800d8b1 	.word	0x0800d8b1
 800d7dc:	0800d8b1 	.word	0x0800d8b1
 800d7e0:	0800d8b1 	.word	0x0800d8b1
 800d7e4:	0800d8b1 	.word	0x0800d8b1
 800d7e8:	0800d8b1 	.word	0x0800d8b1
 800d7ec:	0800d8b1 	.word	0x0800d8b1
 800d7f0:	0800d863 	.word	0x0800d863
 800d7f4:	0800d8b1 	.word	0x0800d8b1
 800d7f8:	0800d8b1 	.word	0x0800d8b1
 800d7fc:	0800d8b1 	.word	0x0800d8b1
 800d800:	0800d8b1 	.word	0x0800d8b1
 800d804:	0800d8b1 	.word	0x0800d8b1
 800d808:	0800d8b1 	.word	0x0800d8b1
 800d80c:	0800d8b1 	.word	0x0800d8b1
 800d810:	0800d8b1 	.word	0x0800d8b1
 800d814:	0800d8b1 	.word	0x0800d8b1
 800d818:	0800d8b1 	.word	0x0800d8b1
 800d81c:	0800d8b1 	.word	0x0800d8b1
 800d820:	0800d8b1 	.word	0x0800d8b1
 800d824:	0800d8b1 	.word	0x0800d8b1
 800d828:	0800d8b1 	.word	0x0800d8b1
 800d82c:	0800d8b1 	.word	0x0800d8b1
 800d830:	0800d8a3 	.word	0x0800d8a3
 800d834:	2b40      	cmp	r3, #64	; 0x40
 800d836:	d037      	beq.n	800d8a8 <UART_SetConfig+0x6bc>
 800d838:	e03a      	b.n	800d8b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d83a:	f7fc fbc9 	bl	8009fd0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d83e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d840:	e03c      	b.n	800d8bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d846:	4618      	mov	r0, r3
 800d848:	f7fc fbd8 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d850:	e034      	b.n	800d8bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d852:	f107 0318 	add.w	r3, r7, #24
 800d856:	4618      	mov	r0, r3
 800d858:	f7fc fd24 	bl	800a2a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d860:	e02c      	b.n	800d8bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d862:	4b09      	ldr	r3, [pc, #36]	; (800d888 <UART_SetConfig+0x69c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0320 	and.w	r3, r3, #32
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d016      	beq.n	800d89c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d86e:	4b06      	ldr	r3, [pc, #24]	; (800d888 <UART_SetConfig+0x69c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	08db      	lsrs	r3, r3, #3
 800d874:	f003 0303 	and.w	r3, r3, #3
 800d878:	4a07      	ldr	r2, [pc, #28]	; (800d898 <UART_SetConfig+0x6ac>)
 800d87a:	fa22 f303 	lsr.w	r3, r2, r3
 800d87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d880:	e01c      	b.n	800d8bc <UART_SetConfig+0x6d0>
 800d882:	bf00      	nop
 800d884:	40011400 	.word	0x40011400
 800d888:	58024400 	.word	0x58024400
 800d88c:	40007800 	.word	0x40007800
 800d890:	40007c00 	.word	0x40007c00
 800d894:	58000c00 	.word	0x58000c00
 800d898:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d89c:	4b9d      	ldr	r3, [pc, #628]	; (800db14 <UART_SetConfig+0x928>)
 800d89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8a0:	e00c      	b.n	800d8bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d8a2:	4b9d      	ldr	r3, [pc, #628]	; (800db18 <UART_SetConfig+0x92c>)
 800d8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8a6:	e009      	b.n	800d8bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8ae:	e005      	b.n	800d8bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d8ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f000 81de 	beq.w	800dc80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	4a94      	ldr	r2, [pc, #592]	; (800db1c <UART_SetConfig+0x930>)
 800d8ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d305      	bcc.n	800d8f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d903      	bls.n	800d8fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8fa:	e1c1      	b.n	800dc80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fe:	2200      	movs	r2, #0
 800d900:	60bb      	str	r3, [r7, #8]
 800d902:	60fa      	str	r2, [r7, #12]
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d908:	4a84      	ldr	r2, [pc, #528]	; (800db1c <UART_SetConfig+0x930>)
 800d90a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d90e:	b29b      	uxth	r3, r3
 800d910:	2200      	movs	r2, #0
 800d912:	603b      	str	r3, [r7, #0]
 800d914:	607a      	str	r2, [r7, #4]
 800d916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d91a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d91e:	f7f2 fef3 	bl	8000708 <__aeabi_uldivmod>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	4610      	mov	r0, r2
 800d928:	4619      	mov	r1, r3
 800d92a:	f04f 0200 	mov.w	r2, #0
 800d92e:	f04f 0300 	mov.w	r3, #0
 800d932:	020b      	lsls	r3, r1, #8
 800d934:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d938:	0202      	lsls	r2, r0, #8
 800d93a:	6979      	ldr	r1, [r7, #20]
 800d93c:	6849      	ldr	r1, [r1, #4]
 800d93e:	0849      	lsrs	r1, r1, #1
 800d940:	2000      	movs	r0, #0
 800d942:	460c      	mov	r4, r1
 800d944:	4605      	mov	r5, r0
 800d946:	eb12 0804 	adds.w	r8, r2, r4
 800d94a:	eb43 0905 	adc.w	r9, r3, r5
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	469a      	mov	sl, r3
 800d956:	4693      	mov	fp, r2
 800d958:	4652      	mov	r2, sl
 800d95a:	465b      	mov	r3, fp
 800d95c:	4640      	mov	r0, r8
 800d95e:	4649      	mov	r1, r9
 800d960:	f7f2 fed2 	bl	8000708 <__aeabi_uldivmod>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	4613      	mov	r3, r2
 800d96a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d972:	d308      	bcc.n	800d986 <UART_SetConfig+0x79a>
 800d974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d97a:	d204      	bcs.n	800d986 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d982:	60da      	str	r2, [r3, #12]
 800d984:	e17c      	b.n	800dc80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d98c:	e178      	b.n	800dc80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	69db      	ldr	r3, [r3, #28]
 800d992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d996:	f040 80c5 	bne.w	800db24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d99a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d99e:	2b20      	cmp	r3, #32
 800d9a0:	dc48      	bgt.n	800da34 <UART_SetConfig+0x848>
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	db7b      	blt.n	800da9e <UART_SetConfig+0x8b2>
 800d9a6:	2b20      	cmp	r3, #32
 800d9a8:	d879      	bhi.n	800da9e <UART_SetConfig+0x8b2>
 800d9aa:	a201      	add	r2, pc, #4	; (adr r2, 800d9b0 <UART_SetConfig+0x7c4>)
 800d9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b0:	0800da3b 	.word	0x0800da3b
 800d9b4:	0800da43 	.word	0x0800da43
 800d9b8:	0800da9f 	.word	0x0800da9f
 800d9bc:	0800da9f 	.word	0x0800da9f
 800d9c0:	0800da4b 	.word	0x0800da4b
 800d9c4:	0800da9f 	.word	0x0800da9f
 800d9c8:	0800da9f 	.word	0x0800da9f
 800d9cc:	0800da9f 	.word	0x0800da9f
 800d9d0:	0800da5b 	.word	0x0800da5b
 800d9d4:	0800da9f 	.word	0x0800da9f
 800d9d8:	0800da9f 	.word	0x0800da9f
 800d9dc:	0800da9f 	.word	0x0800da9f
 800d9e0:	0800da9f 	.word	0x0800da9f
 800d9e4:	0800da9f 	.word	0x0800da9f
 800d9e8:	0800da9f 	.word	0x0800da9f
 800d9ec:	0800da9f 	.word	0x0800da9f
 800d9f0:	0800da6b 	.word	0x0800da6b
 800d9f4:	0800da9f 	.word	0x0800da9f
 800d9f8:	0800da9f 	.word	0x0800da9f
 800d9fc:	0800da9f 	.word	0x0800da9f
 800da00:	0800da9f 	.word	0x0800da9f
 800da04:	0800da9f 	.word	0x0800da9f
 800da08:	0800da9f 	.word	0x0800da9f
 800da0c:	0800da9f 	.word	0x0800da9f
 800da10:	0800da9f 	.word	0x0800da9f
 800da14:	0800da9f 	.word	0x0800da9f
 800da18:	0800da9f 	.word	0x0800da9f
 800da1c:	0800da9f 	.word	0x0800da9f
 800da20:	0800da9f 	.word	0x0800da9f
 800da24:	0800da9f 	.word	0x0800da9f
 800da28:	0800da9f 	.word	0x0800da9f
 800da2c:	0800da9f 	.word	0x0800da9f
 800da30:	0800da91 	.word	0x0800da91
 800da34:	2b40      	cmp	r3, #64	; 0x40
 800da36:	d02e      	beq.n	800da96 <UART_SetConfig+0x8aa>
 800da38:	e031      	b.n	800da9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da3a:	f7fb fb57 	bl	80090ec <HAL_RCC_GetPCLK1Freq>
 800da3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da40:	e033      	b.n	800daaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da42:	f7fb fb69 	bl	8009118 <HAL_RCC_GetPCLK2Freq>
 800da46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da48:	e02f      	b.n	800daaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fc fad4 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da58:	e027      	b.n	800daaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da5a:	f107 0318 	add.w	r3, r7, #24
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fc fc20 	bl	800a2a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da68:	e01f      	b.n	800daaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da6a:	4b2d      	ldr	r3, [pc, #180]	; (800db20 <UART_SetConfig+0x934>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f003 0320 	and.w	r3, r3, #32
 800da72:	2b00      	cmp	r3, #0
 800da74:	d009      	beq.n	800da8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da76:	4b2a      	ldr	r3, [pc, #168]	; (800db20 <UART_SetConfig+0x934>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	08db      	lsrs	r3, r3, #3
 800da7c:	f003 0303 	and.w	r3, r3, #3
 800da80:	4a24      	ldr	r2, [pc, #144]	; (800db14 <UART_SetConfig+0x928>)
 800da82:	fa22 f303 	lsr.w	r3, r2, r3
 800da86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da88:	e00f      	b.n	800daaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800da8a:	4b22      	ldr	r3, [pc, #136]	; (800db14 <UART_SetConfig+0x928>)
 800da8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da8e:	e00c      	b.n	800daaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da90:	4b21      	ldr	r3, [pc, #132]	; (800db18 <UART_SetConfig+0x92c>)
 800da92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da94:	e009      	b.n	800daaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da9c:	e005      	b.n	800daaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800da9e:	2300      	movs	r3, #0
 800daa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800daa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 80e7 	beq.w	800dc80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab6:	4a19      	ldr	r2, [pc, #100]	; (800db1c <UART_SetConfig+0x930>)
 800dab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dabc:	461a      	mov	r2, r3
 800dabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dac4:	005a      	lsls	r2, r3, #1
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	085b      	lsrs	r3, r3, #1
 800dacc:	441a      	add	r2, r3
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	2b0f      	cmp	r3, #15
 800dadc:	d916      	bls.n	800db0c <UART_SetConfig+0x920>
 800dade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dae4:	d212      	bcs.n	800db0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae8:	b29b      	uxth	r3, r3
 800daea:	f023 030f 	bic.w	r3, r3, #15
 800daee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800daf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf2:	085b      	lsrs	r3, r3, #1
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	f003 0307 	and.w	r3, r3, #7
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dafe:	4313      	orrs	r3, r2
 800db00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800db08:	60da      	str	r2, [r3, #12]
 800db0a:	e0b9      	b.n	800dc80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800db0c:	2301      	movs	r3, #1
 800db0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800db12:	e0b5      	b.n	800dc80 <UART_SetConfig+0xa94>
 800db14:	03d09000 	.word	0x03d09000
 800db18:	003d0900 	.word	0x003d0900
 800db1c:	080125e0 	.word	0x080125e0
 800db20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800db24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db28:	2b20      	cmp	r3, #32
 800db2a:	dc49      	bgt.n	800dbc0 <UART_SetConfig+0x9d4>
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	db7c      	blt.n	800dc2a <UART_SetConfig+0xa3e>
 800db30:	2b20      	cmp	r3, #32
 800db32:	d87a      	bhi.n	800dc2a <UART_SetConfig+0xa3e>
 800db34:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <UART_SetConfig+0x950>)
 800db36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3a:	bf00      	nop
 800db3c:	0800dbc7 	.word	0x0800dbc7
 800db40:	0800dbcf 	.word	0x0800dbcf
 800db44:	0800dc2b 	.word	0x0800dc2b
 800db48:	0800dc2b 	.word	0x0800dc2b
 800db4c:	0800dbd7 	.word	0x0800dbd7
 800db50:	0800dc2b 	.word	0x0800dc2b
 800db54:	0800dc2b 	.word	0x0800dc2b
 800db58:	0800dc2b 	.word	0x0800dc2b
 800db5c:	0800dbe7 	.word	0x0800dbe7
 800db60:	0800dc2b 	.word	0x0800dc2b
 800db64:	0800dc2b 	.word	0x0800dc2b
 800db68:	0800dc2b 	.word	0x0800dc2b
 800db6c:	0800dc2b 	.word	0x0800dc2b
 800db70:	0800dc2b 	.word	0x0800dc2b
 800db74:	0800dc2b 	.word	0x0800dc2b
 800db78:	0800dc2b 	.word	0x0800dc2b
 800db7c:	0800dbf7 	.word	0x0800dbf7
 800db80:	0800dc2b 	.word	0x0800dc2b
 800db84:	0800dc2b 	.word	0x0800dc2b
 800db88:	0800dc2b 	.word	0x0800dc2b
 800db8c:	0800dc2b 	.word	0x0800dc2b
 800db90:	0800dc2b 	.word	0x0800dc2b
 800db94:	0800dc2b 	.word	0x0800dc2b
 800db98:	0800dc2b 	.word	0x0800dc2b
 800db9c:	0800dc2b 	.word	0x0800dc2b
 800dba0:	0800dc2b 	.word	0x0800dc2b
 800dba4:	0800dc2b 	.word	0x0800dc2b
 800dba8:	0800dc2b 	.word	0x0800dc2b
 800dbac:	0800dc2b 	.word	0x0800dc2b
 800dbb0:	0800dc2b 	.word	0x0800dc2b
 800dbb4:	0800dc2b 	.word	0x0800dc2b
 800dbb8:	0800dc2b 	.word	0x0800dc2b
 800dbbc:	0800dc1d 	.word	0x0800dc1d
 800dbc0:	2b40      	cmp	r3, #64	; 0x40
 800dbc2:	d02e      	beq.n	800dc22 <UART_SetConfig+0xa36>
 800dbc4:	e031      	b.n	800dc2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbc6:	f7fb fa91 	bl	80090ec <HAL_RCC_GetPCLK1Freq>
 800dbca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbcc:	e033      	b.n	800dc36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dbce:	f7fb faa3 	bl	8009118 <HAL_RCC_GetPCLK2Freq>
 800dbd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbd4:	e02f      	b.n	800dc36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fc fa0e 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbe4:	e027      	b.n	800dc36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbe6:	f107 0318 	add.w	r3, r7, #24
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fc fb5a 	bl	800a2a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbf4:	e01f      	b.n	800dc36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbf6:	4b2d      	ldr	r3, [pc, #180]	; (800dcac <UART_SetConfig+0xac0>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 0320 	and.w	r3, r3, #32
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d009      	beq.n	800dc16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc02:	4b2a      	ldr	r3, [pc, #168]	; (800dcac <UART_SetConfig+0xac0>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	08db      	lsrs	r3, r3, #3
 800dc08:	f003 0303 	and.w	r3, r3, #3
 800dc0c:	4a28      	ldr	r2, [pc, #160]	; (800dcb0 <UART_SetConfig+0xac4>)
 800dc0e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc14:	e00f      	b.n	800dc36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dc16:	4b26      	ldr	r3, [pc, #152]	; (800dcb0 <UART_SetConfig+0xac4>)
 800dc18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc1a:	e00c      	b.n	800dc36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc1c:	4b25      	ldr	r3, [pc, #148]	; (800dcb4 <UART_SetConfig+0xac8>)
 800dc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc20:	e009      	b.n	800dc36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc28:	e005      	b.n	800dc36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc34:	bf00      	nop
    }

    if (pclk != 0U)
 800dc36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d021      	beq.n	800dc80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc40:	4a1d      	ldr	r2, [pc, #116]	; (800dcb8 <UART_SetConfig+0xacc>)
 800dc42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc46:	461a      	mov	r2, r3
 800dc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	085b      	lsrs	r3, r3, #1
 800dc54:	441a      	add	r2, r3
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	2b0f      	cmp	r3, #15
 800dc64:	d909      	bls.n	800dc7a <UART_SetConfig+0xa8e>
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc6c:	d205      	bcs.n	800dc7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	60da      	str	r2, [r3, #12]
 800dc78:	e002      	b.n	800dc80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	2200      	movs	r2, #0
 800dc94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dc9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3748      	adds	r7, #72	; 0x48
 800dca4:	46bd      	mov	sp, r7
 800dca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcaa:	bf00      	nop
 800dcac:	58024400 	.word	0x58024400
 800dcb0:	03d09000 	.word	0x03d09000
 800dcb4:	003d0900 	.word	0x003d0900
 800dcb8:	080125e0 	.word	0x080125e0

0800dcbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00a      	beq.n	800dce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	430a      	orrs	r2, r1
 800dce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00a      	beq.n	800dd08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	430a      	orrs	r2, r1
 800dd06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00a      	beq.n	800dd2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	430a      	orrs	r2, r1
 800dd28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2e:	f003 0308 	and.w	r3, r3, #8
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00a      	beq.n	800dd4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	430a      	orrs	r2, r1
 800dd4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd50:	f003 0310 	and.w	r3, r3, #16
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00a      	beq.n	800dd6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	430a      	orrs	r2, r1
 800dd6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd72:	f003 0320 	and.w	r3, r3, #32
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00a      	beq.n	800dd90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	430a      	orrs	r2, r1
 800dd8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01a      	beq.n	800ddd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	430a      	orrs	r2, r1
 800ddb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddba:	d10a      	bne.n	800ddd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00a      	beq.n	800ddf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	430a      	orrs	r2, r1
 800ddf2:	605a      	str	r2, [r3, #4]
  }
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b086      	sub	sp, #24
 800de04:	af02      	add	r7, sp, #8
 800de06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de10:	f7f9 f8c6 	bl	8006fa0 <HAL_GetTick>
 800de14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f003 0308 	and.w	r3, r3, #8
 800de20:	2b08      	cmp	r3, #8
 800de22:	d10e      	bne.n	800de42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 f82f 	bl	800de96 <UART_WaitOnFlagUntilTimeout>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de3e:	2303      	movs	r3, #3
 800de40:	e025      	b.n	800de8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 0304 	and.w	r3, r3, #4
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	d10e      	bne.n	800de6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 f819 	bl	800de96 <UART_WaitOnFlagUntilTimeout>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e00f      	b.n	800de8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2220      	movs	r2, #32
 800de72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2220      	movs	r2, #32
 800de7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b09c      	sub	sp, #112	; 0x70
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	60f8      	str	r0, [r7, #12]
 800de9e:	60b9      	str	r1, [r7, #8]
 800dea0:	603b      	str	r3, [r7, #0]
 800dea2:	4613      	mov	r3, r2
 800dea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dea6:	e0a9      	b.n	800dffc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deae:	f000 80a5 	beq.w	800dffc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800deb2:	f7f9 f875 	bl	8006fa0 <HAL_GetTick>
 800deb6:	4602      	mov	r2, r0
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800debe:	429a      	cmp	r2, r3
 800dec0:	d302      	bcc.n	800dec8 <UART_WaitOnFlagUntilTimeout+0x32>
 800dec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d140      	bne.n	800df4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded0:	e853 3f00 	ldrex	r3, [r3]
 800ded4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ded6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dedc:	667b      	str	r3, [r7, #100]	; 0x64
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	461a      	mov	r2, r3
 800dee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dee8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800deec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800deee:	e841 2300 	strex	r3, r2, [r1]
 800def2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800def4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1e6      	bne.n	800dec8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3308      	adds	r3, #8
 800df00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df04:	e853 3f00 	ldrex	r3, [r3]
 800df08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0c:	f023 0301 	bic.w	r3, r3, #1
 800df10:	663b      	str	r3, [r7, #96]	; 0x60
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3308      	adds	r3, #8
 800df18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df1a:	64ba      	str	r2, [r7, #72]	; 0x48
 800df1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df22:	e841 2300 	strex	r3, r2, [r1]
 800df26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800df28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1e5      	bne.n	800defa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2220      	movs	r2, #32
 800df32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2220      	movs	r2, #32
 800df3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800df46:	2303      	movs	r3, #3
 800df48:	e069      	b.n	800e01e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 0304 	and.w	r3, r3, #4
 800df54:	2b00      	cmp	r3, #0
 800df56:	d051      	beq.n	800dffc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	69db      	ldr	r3, [r3, #28]
 800df5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df66:	d149      	bne.n	800dffc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	e853 3f00 	ldrex	r3, [r3]
 800df7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df86:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	461a      	mov	r2, r3
 800df8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df90:	637b      	str	r3, [r7, #52]	; 0x34
 800df92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df98:	e841 2300 	strex	r3, r2, [r1]
 800df9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1e6      	bne.n	800df72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	e853 3f00 	ldrex	r3, [r3]
 800dfb2:	613b      	str	r3, [r7, #16]
   return(result);
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	f023 0301 	bic.w	r3, r3, #1
 800dfba:	66bb      	str	r3, [r7, #104]	; 0x68
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dfc4:	623a      	str	r2, [r7, #32]
 800dfc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc8:	69f9      	ldr	r1, [r7, #28]
 800dfca:	6a3a      	ldr	r2, [r7, #32]
 800dfcc:	e841 2300 	strex	r3, r2, [r1]
 800dfd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1e5      	bne.n	800dfa4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2220      	movs	r2, #32
 800dfdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2220      	movs	r2, #32
 800dfe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2220      	movs	r2, #32
 800dfec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dff8:	2303      	movs	r3, #3
 800dffa:	e010      	b.n	800e01e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	69da      	ldr	r2, [r3, #28]
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	4013      	ands	r3, r2
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	429a      	cmp	r2, r3
 800e00a:	bf0c      	ite	eq
 800e00c:	2301      	moveq	r3, #1
 800e00e:	2300      	movne	r3, #0
 800e010:	b2db      	uxtb	r3, r3
 800e012:	461a      	mov	r2, r3
 800e014:	79fb      	ldrb	r3, [r7, #7]
 800e016:	429a      	cmp	r2, r3
 800e018:	f43f af46 	beq.w	800dea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3770      	adds	r7, #112	; 0x70
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e028:	b480      	push	{r7}
 800e02a:	b0a3      	sub	sp, #140	; 0x8c
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	88fa      	ldrh	r2, [r7, #6]
 800e040:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	88fa      	ldrh	r2, [r7, #6]
 800e048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e05a:	d10e      	bne.n	800e07a <UART_Start_Receive_IT+0x52>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	691b      	ldr	r3, [r3, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d105      	bne.n	800e070 <UART_Start_Receive_IT+0x48>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e06a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e06e:	e02d      	b.n	800e0cc <UART_Start_Receive_IT+0xa4>
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	22ff      	movs	r2, #255	; 0xff
 800e074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e078:	e028      	b.n	800e0cc <UART_Start_Receive_IT+0xa4>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10d      	bne.n	800e09e <UART_Start_Receive_IT+0x76>
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d104      	bne.n	800e094 <UART_Start_Receive_IT+0x6c>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	22ff      	movs	r2, #255	; 0xff
 800e08e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e092:	e01b      	b.n	800e0cc <UART_Start_Receive_IT+0xa4>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	227f      	movs	r2, #127	; 0x7f
 800e098:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e09c:	e016      	b.n	800e0cc <UART_Start_Receive_IT+0xa4>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e0a6:	d10d      	bne.n	800e0c4 <UART_Start_Receive_IT+0x9c>
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d104      	bne.n	800e0ba <UART_Start_Receive_IT+0x92>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	227f      	movs	r2, #127	; 0x7f
 800e0b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0b8:	e008      	b.n	800e0cc <UART_Start_Receive_IT+0xa4>
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	223f      	movs	r2, #63	; 0x3f
 800e0be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0c2:	e003      	b.n	800e0cc <UART_Start_Receive_IT+0xa4>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2222      	movs	r2, #34	; 0x22
 800e0d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3308      	adds	r3, #8
 800e0e2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0e6:	e853 3f00 	ldrex	r3, [r3]
 800e0ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e0ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ee:	f043 0301 	orr.w	r3, r3, #1
 800e0f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e100:	673a      	str	r2, [r7, #112]	; 0x70
 800e102:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e104:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e106:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e108:	e841 2300 	strex	r3, r2, [r1]
 800e10c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e10e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1e3      	bne.n	800e0dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e11c:	d153      	bne.n	800e1c6 <UART_Start_Receive_IT+0x19e>
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e124:	88fa      	ldrh	r2, [r7, #6]
 800e126:	429a      	cmp	r2, r3
 800e128:	d34d      	bcc.n	800e1c6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e132:	d107      	bne.n	800e144 <UART_Start_Receive_IT+0x11c>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d103      	bne.n	800e144 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4a4b      	ldr	r2, [pc, #300]	; (800e26c <UART_Start_Receive_IT+0x244>)
 800e140:	671a      	str	r2, [r3, #112]	; 0x70
 800e142:	e002      	b.n	800e14a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	4a4a      	ldr	r2, [pc, #296]	; (800e270 <UART_Start_Receive_IT+0x248>)
 800e148:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d01a      	beq.n	800e190 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e162:	e853 3f00 	ldrex	r3, [r3]
 800e166:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e16a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e16e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e17c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e17e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e180:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e182:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e184:	e841 2300 	strex	r3, r2, [r1]
 800e188:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1e4      	bne.n	800e15a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3308      	adds	r3, #8
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19a:	e853 3f00 	ldrex	r3, [r3]
 800e19e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3308      	adds	r3, #8
 800e1ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e1b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800e1b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1b8:	e841 2300 	strex	r3, r2, [r1]
 800e1bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1e5      	bne.n	800e190 <UART_Start_Receive_IT+0x168>
 800e1c4:	e04a      	b.n	800e25c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1ce:	d107      	bne.n	800e1e0 <UART_Start_Receive_IT+0x1b8>
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d103      	bne.n	800e1e0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	4a26      	ldr	r2, [pc, #152]	; (800e274 <UART_Start_Receive_IT+0x24c>)
 800e1dc:	671a      	str	r2, [r3, #112]	; 0x70
 800e1de:	e002      	b.n	800e1e6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	4a25      	ldr	r2, [pc, #148]	; (800e278 <UART_Start_Receive_IT+0x250>)
 800e1e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d019      	beq.n	800e22a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fe:	e853 3f00 	ldrex	r3, [r3]
 800e202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e20a:	677b      	str	r3, [r7, #116]	; 0x74
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	461a      	mov	r2, r3
 800e212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e214:	637b      	str	r3, [r7, #52]	; 0x34
 800e216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e21a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e21c:	e841 2300 	strex	r3, r2, [r1]
 800e220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	2b00      	cmp	r3, #0
 800e226:	d1e6      	bne.n	800e1f6 <UART_Start_Receive_IT+0x1ce>
 800e228:	e018      	b.n	800e25c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	e853 3f00 	ldrex	r3, [r3]
 800e236:	613b      	str	r3, [r7, #16]
   return(result);
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	f043 0320 	orr.w	r3, r3, #32
 800e23e:	67bb      	str	r3, [r7, #120]	; 0x78
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	461a      	mov	r2, r3
 800e246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e248:	623b      	str	r3, [r7, #32]
 800e24a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24c:	69f9      	ldr	r1, [r7, #28]
 800e24e:	6a3a      	ldr	r2, [r7, #32]
 800e250:	e841 2300 	strex	r3, r2, [r1]
 800e254:	61bb      	str	r3, [r7, #24]
   return(result);
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e6      	bne.n	800e22a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	378c      	adds	r7, #140	; 0x8c
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop
 800e26c:	0800e985 	.word	0x0800e985
 800e270:	0800e68d 	.word	0x0800e68d
 800e274:	0800e52b 	.word	0x0800e52b
 800e278:	0800e3cb 	.word	0x0800e3cb

0800e27c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b095      	sub	sp, #84	; 0x54
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e28c:	e853 3f00 	ldrex	r3, [r3]
 800e290:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a2:	643b      	str	r3, [r7, #64]	; 0x40
 800e2a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2aa:	e841 2300 	strex	r3, r2, [r1]
 800e2ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1e6      	bne.n	800e284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3308      	adds	r3, #8
 800e2bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	e853 3f00 	ldrex	r3, [r3]
 800e2c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2c6:	69fa      	ldr	r2, [r7, #28]
 800e2c8:	4b1e      	ldr	r3, [pc, #120]	; (800e344 <UART_EndRxTransfer+0xc8>)
 800e2ca:	4013      	ands	r3, r2
 800e2cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3308      	adds	r3, #8
 800e2d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e2d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2de:	e841 2300 	strex	r3, r2, [r1]
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1e5      	bne.n	800e2b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d118      	bne.n	800e324 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	e853 3f00 	ldrex	r3, [r3]
 800e2fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	f023 0310 	bic.w	r3, r3, #16
 800e306:	647b      	str	r3, [r7, #68]	; 0x44
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	461a      	mov	r2, r3
 800e30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e310:	61bb      	str	r3, [r7, #24]
 800e312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e314:	6979      	ldr	r1, [r7, #20]
 800e316:	69ba      	ldr	r2, [r7, #24]
 800e318:	e841 2300 	strex	r3, r2, [r1]
 800e31c:	613b      	str	r3, [r7, #16]
   return(result);
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1e6      	bne.n	800e2f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2220      	movs	r2, #32
 800e328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e338:	bf00      	nop
 800e33a:	3754      	adds	r7, #84	; 0x54
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	effffffe 	.word	0xeffffffe

0800e348 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e354:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f7fe ff2a 	bl	800d1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e36c:	bf00      	nop
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	e853 3f00 	ldrex	r3, [r3]
 800e388:	60bb      	str	r3, [r7, #8]
   return(result);
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e390:	61fb      	str	r3, [r7, #28]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	61bb      	str	r3, [r7, #24]
 800e39c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39e:	6979      	ldr	r1, [r7, #20]
 800e3a0:	69ba      	ldr	r2, [r7, #24]
 800e3a2:	e841 2300 	strex	r3, r2, [r1]
 800e3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1e6      	bne.n	800e37c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2220      	movs	r2, #32
 800e3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7f4 ff33 	bl	8003228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3c2:	bf00      	nop
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b096      	sub	sp, #88	; 0x58
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3e2:	2b22      	cmp	r3, #34	; 0x22
 800e3e4:	f040 8095 	bne.w	800e512 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e3f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e3f6:	b2d9      	uxtb	r1, r3
 800e3f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e402:	400a      	ands	r2, r1
 800e404:	b2d2      	uxtb	r2, r2
 800e406:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e40c:	1c5a      	adds	r2, r3, #1
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e418:	b29b      	uxth	r3, r3
 800e41a:	3b01      	subs	r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d178      	bne.n	800e522 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e438:	e853 3f00 	ldrex	r3, [r3]
 800e43c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e444:	653b      	str	r3, [r7, #80]	; 0x50
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e44e:	647b      	str	r3, [r7, #68]	; 0x44
 800e450:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e456:	e841 2300 	strex	r3, r2, [r1]
 800e45a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1e6      	bne.n	800e430 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3308      	adds	r3, #8
 800e468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	e853 3f00 	ldrex	r3, [r3]
 800e470:	623b      	str	r3, [r7, #32]
   return(result);
 800e472:	6a3b      	ldr	r3, [r7, #32]
 800e474:	f023 0301 	bic.w	r3, r3, #1
 800e478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3308      	adds	r3, #8
 800e480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e482:	633a      	str	r2, [r7, #48]	; 0x30
 800e484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e48a:	e841 2300 	strex	r3, r2, [r1]
 800e48e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1e5      	bne.n	800e462 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2220      	movs	r2, #32
 800e49a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d12e      	bne.n	800e50a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	e853 3f00 	ldrex	r3, [r3]
 800e4be:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f023 0310 	bic.w	r3, r3, #16
 800e4c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4d0:	61fb      	str	r3, [r7, #28]
 800e4d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d4:	69b9      	ldr	r1, [r7, #24]
 800e4d6:	69fa      	ldr	r2, [r7, #28]
 800e4d8:	e841 2300 	strex	r3, r2, [r1]
 800e4dc:	617b      	str	r3, [r7, #20]
   return(result);
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1e6      	bne.n	800e4b2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	69db      	ldr	r3, [r3, #28]
 800e4ea:	f003 0310 	and.w	r3, r3, #16
 800e4ee:	2b10      	cmp	r3, #16
 800e4f0:	d103      	bne.n	800e4fa <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2210      	movs	r2, #16
 800e4f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e500:	4619      	mov	r1, r3
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7fe fe66 	bl	800d1d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e508:	e00b      	b.n	800e522 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7f4 fe18 	bl	8003140 <HAL_UART_RxCpltCallback>
}
 800e510:	e007      	b.n	800e522 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	699a      	ldr	r2, [r3, #24]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f042 0208 	orr.w	r2, r2, #8
 800e520:	619a      	str	r2, [r3, #24]
}
 800e522:	bf00      	nop
 800e524:	3758      	adds	r7, #88	; 0x58
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b096      	sub	sp, #88	; 0x58
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e538:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e542:	2b22      	cmp	r3, #34	; 0x22
 800e544:	f040 8095 	bne.w	800e672 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e556:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e558:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e55c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e560:	4013      	ands	r3, r2
 800e562:	b29a      	uxth	r2, r3
 800e564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e566:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e56c:	1c9a      	adds	r2, r3, #2
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e578:	b29b      	uxth	r3, r3
 800e57a:	3b01      	subs	r3, #1
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d178      	bne.n	800e682 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e598:	e853 3f00 	ldrex	r3, [r3]
 800e59c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ae:	643b      	str	r3, [r7, #64]	; 0x40
 800e5b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5b6:	e841 2300 	strex	r3, r2, [r1]
 800e5ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1e6      	bne.n	800e590 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	e853 3f00 	ldrex	r3, [r3]
 800e5d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	f023 0301 	bic.w	r3, r3, #1
 800e5d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	3308      	adds	r3, #8
 800e5e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e5e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5ea:	e841 2300 	strex	r3, r2, [r1]
 800e5ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1e5      	bne.n	800e5c2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2220      	movs	r2, #32
 800e5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d12e      	bne.n	800e66a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	e853 3f00 	ldrex	r3, [r3]
 800e61e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	f023 0310 	bic.w	r3, r3, #16
 800e626:	647b      	str	r3, [r7, #68]	; 0x44
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	461a      	mov	r2, r3
 800e62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e630:	61bb      	str	r3, [r7, #24]
 800e632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e634:	6979      	ldr	r1, [r7, #20]
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	e841 2300 	strex	r3, r2, [r1]
 800e63c:	613b      	str	r3, [r7, #16]
   return(result);
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1e6      	bne.n	800e612 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	69db      	ldr	r3, [r3, #28]
 800e64a:	f003 0310 	and.w	r3, r3, #16
 800e64e:	2b10      	cmp	r3, #16
 800e650:	d103      	bne.n	800e65a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2210      	movs	r2, #16
 800e658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e660:	4619      	mov	r1, r3
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7fe fdb6 	bl	800d1d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e668:	e00b      	b.n	800e682 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7f4 fd68 	bl	8003140 <HAL_UART_RxCpltCallback>
}
 800e670:	e007      	b.n	800e682 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	699a      	ldr	r2, [r3, #24]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f042 0208 	orr.w	r2, r2, #8
 800e680:	619a      	str	r2, [r3, #24]
}
 800e682:	bf00      	nop
 800e684:	3758      	adds	r7, #88	; 0x58
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
	...

0800e68c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b0a6      	sub	sp, #152	; 0x98
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e69a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	69db      	ldr	r3, [r3, #28]
 800e6a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6c2:	2b22      	cmp	r3, #34	; 0x22
 800e6c4:	f040 814d 	bne.w	800e962 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6d2:	e0f4      	b.n	800e8be <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6da:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e6de:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e6e2:	b2d9      	uxtb	r1, r3
 800e6e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6ee:	400a      	ands	r2, r1
 800e6f0:	b2d2      	uxtb	r2, r2
 800e6f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e704:	b29b      	uxth	r3, r3
 800e706:	3b01      	subs	r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e71a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e71e:	f003 0307 	and.w	r3, r3, #7
 800e722:	2b00      	cmp	r3, #0
 800e724:	d053      	beq.n	800e7ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e72a:	f003 0301 	and.w	r3, r3, #1
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d011      	beq.n	800e756 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00b      	beq.n	800e756 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2201      	movs	r2, #1
 800e744:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e74c:	f043 0201 	orr.w	r2, r3, #1
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e75a:	f003 0302 	and.w	r3, r3, #2
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d011      	beq.n	800e786 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00b      	beq.n	800e786 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2202      	movs	r2, #2
 800e774:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e77c:	f043 0204 	orr.w	r2, r3, #4
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e78a:	f003 0304 	and.w	r3, r3, #4
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d011      	beq.n	800e7b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e796:	f003 0301 	and.w	r3, r3, #1
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00b      	beq.n	800e7b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2204      	movs	r2, #4
 800e7a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7ac:	f043 0202 	orr.w	r2, r3, #2
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d006      	beq.n	800e7ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7fe fcfd 	bl	800d1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d171      	bne.n	800e8be <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7e2:	e853 3f00 	ldrex	r3, [r3]
 800e7e6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e7e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7fc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7fe:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e800:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e804:	e841 2300 	strex	r3, r2, [r1]
 800e808:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e80a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1e4      	bne.n	800e7da <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	3308      	adds	r3, #8
 800e816:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e81a:	e853 3f00 	ldrex	r3, [r3]
 800e81e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e822:	4b56      	ldr	r3, [pc, #344]	; (800e97c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e824:	4013      	ands	r3, r2
 800e826:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3308      	adds	r3, #8
 800e82e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e830:	657a      	str	r2, [r7, #84]	; 0x54
 800e832:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e834:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e836:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e838:	e841 2300 	strex	r3, r2, [r1]
 800e83c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1e5      	bne.n	800e810 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2220      	movs	r2, #32
 800e848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e856:	2b01      	cmp	r3, #1
 800e858:	d12e      	bne.n	800e8b8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e868:	e853 3f00 	ldrex	r3, [r3]
 800e86c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	f023 0310 	bic.w	r3, r3, #16
 800e874:	67bb      	str	r3, [r7, #120]	; 0x78
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e87e:	643b      	str	r3, [r7, #64]	; 0x40
 800e880:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e882:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e886:	e841 2300 	strex	r3, r2, [r1]
 800e88a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1e6      	bne.n	800e860 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	69db      	ldr	r3, [r3, #28]
 800e898:	f003 0310 	and.w	r3, r3, #16
 800e89c:	2b10      	cmp	r3, #16
 800e89e:	d103      	bne.n	800e8a8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2210      	movs	r2, #16
 800e8a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7fe fc8f 	bl	800d1d4 <HAL_UARTEx_RxEventCallback>
 800e8b6:	e002      	b.n	800e8be <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7f4 fc41 	bl	8003140 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d006      	beq.n	800e8d4 <UART_RxISR_8BIT_FIFOEN+0x248>
 800e8c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e8ca:	f003 0320 	and.w	r3, r3, #32
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f47f af00 	bne.w	800e6d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e8de:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d045      	beq.n	800e972 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d23e      	bcs.n	800e972 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	e853 3f00 	ldrex	r3, [r3]
 800e902:	61fb      	str	r3, [r7, #28]
   return(result);
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e90a:	673b      	str	r3, [r7, #112]	; 0x70
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	3308      	adds	r3, #8
 800e912:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e914:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e91a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e91c:	e841 2300 	strex	r3, r2, [r1]
 800e920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e5      	bne.n	800e8f4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a15      	ldr	r2, [pc, #84]	; (800e980 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e92c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	e853 3f00 	ldrex	r3, [r3]
 800e93a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	f043 0320 	orr.w	r3, r3, #32
 800e942:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	461a      	mov	r2, r3
 800e94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e94c:	61bb      	str	r3, [r7, #24]
 800e94e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e950:	6979      	ldr	r1, [r7, #20]
 800e952:	69ba      	ldr	r2, [r7, #24]
 800e954:	e841 2300 	strex	r3, r2, [r1]
 800e958:	613b      	str	r3, [r7, #16]
   return(result);
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1e6      	bne.n	800e92e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e960:	e007      	b.n	800e972 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	699a      	ldr	r2, [r3, #24]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f042 0208 	orr.w	r2, r2, #8
 800e970:	619a      	str	r2, [r3, #24]
}
 800e972:	bf00      	nop
 800e974:	3798      	adds	r7, #152	; 0x98
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	effffffe 	.word	0xeffffffe
 800e980:	0800e3cb 	.word	0x0800e3cb

0800e984 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b0a8      	sub	sp, #160	; 0xa0
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e992:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	69db      	ldr	r3, [r3, #28]
 800e99c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ba:	2b22      	cmp	r3, #34	; 0x22
 800e9bc:	f040 8151 	bne.w	800ec62 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e9ca:	e0f8      	b.n	800ebbe <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e9de:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e9e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e9ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9f4:	1c9a      	adds	r2, r3, #2
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	3b01      	subs	r3, #1
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	69db      	ldr	r3, [r3, #28]
 800ea12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ea16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d053      	beq.n	800eaca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d011      	beq.n	800ea52 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ea2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00b      	beq.n	800ea52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea48:	f043 0201 	orr.w	r2, r3, #1
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d011      	beq.n	800ea82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ea5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00b      	beq.n	800ea82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2202      	movs	r2, #2
 800ea70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea78:	f043 0204 	orr.w	r2, r3, #4
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea86:	f003 0304 	and.w	r3, r3, #4
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d011      	beq.n	800eab2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ea8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00b      	beq.n	800eab2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2204      	movs	r2, #4
 800eaa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaa8:	f043 0202 	orr.w	r2, r3, #2
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d006      	beq.n	800eaca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7fe fb7f 	bl	800d1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d173      	bne.n	800ebbe <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eadc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eade:	e853 3f00 	ldrex	r3, [r3]
 800eae2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eaea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eaf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eafa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eafe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb00:	e841 2300 	strex	r3, r2, [r1]
 800eb04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eb06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1e4      	bne.n	800ead6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	3308      	adds	r3, #8
 800eb12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb16:	e853 3f00 	ldrex	r3, [r3]
 800eb1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb1e:	4b57      	ldr	r3, [pc, #348]	; (800ec7c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800eb20:	4013      	ands	r3, r2
 800eb22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	3308      	adds	r3, #8
 800eb2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eb30:	65ba      	str	r2, [r7, #88]	; 0x58
 800eb32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb38:	e841 2300 	strex	r3, r2, [r1]
 800eb3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1e3      	bne.n	800eb0c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2220      	movs	r2, #32
 800eb48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d12e      	bne.n	800ebb8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	e853 3f00 	ldrex	r3, [r3]
 800eb6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb70:	f023 0310 	bic.w	r3, r3, #16
 800eb74:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb7e:	647b      	str	r3, [r7, #68]	; 0x44
 800eb80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb86:	e841 2300 	strex	r3, r2, [r1]
 800eb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1e6      	bne.n	800eb60 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	69db      	ldr	r3, [r3, #28]
 800eb98:	f003 0310 	and.w	r3, r3, #16
 800eb9c:	2b10      	cmp	r3, #16
 800eb9e:	d103      	bne.n	800eba8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2210      	movs	r2, #16
 800eba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebae:	4619      	mov	r1, r3
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7fe fb0f 	bl	800d1d4 <HAL_UARTEx_RxEventCallback>
 800ebb6:	e002      	b.n	800ebbe <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7f4 fac1 	bl	8003140 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ebbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d006      	beq.n	800ebd4 <UART_RxISR_16BIT_FIFOEN+0x250>
 800ebc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ebca:	f003 0320 	and.w	r3, r3, #32
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f47f aefc 	bne.w	800e9cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebda:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ebde:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d045      	beq.n	800ec72 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ebec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d23e      	bcs.n	800ec72 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfe:	e853 3f00 	ldrex	r3, [r3]
 800ec02:	623b      	str	r3, [r7, #32]
   return(result);
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ec0a:	677b      	str	r3, [r7, #116]	; 0x74
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3308      	adds	r3, #8
 800ec12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec14:	633a      	str	r2, [r7, #48]	; 0x30
 800ec16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1c:	e841 2300 	strex	r3, r2, [r1]
 800ec20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1e5      	bne.n	800ebf4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4a15      	ldr	r2, [pc, #84]	; (800ec80 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ec2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	e853 3f00 	ldrex	r3, [r3]
 800ec3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f043 0320 	orr.w	r3, r3, #32
 800ec42:	673b      	str	r3, [r7, #112]	; 0x70
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	461a      	mov	r2, r3
 800ec4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec4c:	61fb      	str	r3, [r7, #28]
 800ec4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec50:	69b9      	ldr	r1, [r7, #24]
 800ec52:	69fa      	ldr	r2, [r7, #28]
 800ec54:	e841 2300 	strex	r3, r2, [r1]
 800ec58:	617b      	str	r3, [r7, #20]
   return(result);
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1e6      	bne.n	800ec2e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec60:	e007      	b.n	800ec72 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	699a      	ldr	r2, [r3, #24]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f042 0208 	orr.w	r2, r2, #8
 800ec70:	619a      	str	r2, [r3, #24]
}
 800ec72:	bf00      	nop
 800ec74:	37a0      	adds	r7, #160	; 0xa0
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	effffffe 	.word	0xeffffffe
 800ec80:	0800e52b 	.word	0x0800e52b

0800ec84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec8c:	bf00      	nop
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d101      	bne.n	800ecd6 <HAL_UARTEx_DisableFifoMode+0x16>
 800ecd2:	2302      	movs	r3, #2
 800ecd4:	e027      	b.n	800ed26 <HAL_UARTEx_DisableFifoMode+0x66>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2224      	movs	r2, #36	; 0x24
 800ece2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f022 0201 	bic.w	r2, r2, #1
 800ecfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ed04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2220      	movs	r2, #32
 800ed18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b084      	sub	sp, #16
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d101      	bne.n	800ed4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed46:	2302      	movs	r3, #2
 800ed48:	e02d      	b.n	800eda6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2224      	movs	r2, #36	; 0x24
 800ed56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f022 0201 	bic.w	r2, r2, #1
 800ed70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	430a      	orrs	r2, r1
 800ed84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 f850 	bl	800ee2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2220      	movs	r2, #32
 800ed98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3710      	adds	r7, #16
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d101      	bne.n	800edc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800edc2:	2302      	movs	r3, #2
 800edc4:	e02d      	b.n	800ee22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2201      	movs	r2, #1
 800edca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2224      	movs	r2, #36	; 0x24
 800edd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f022 0201 	bic.w	r2, r2, #1
 800edec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	430a      	orrs	r2, r1
 800ee00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f812 	bl	800ee2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2220      	movs	r2, #32
 800ee14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3710      	adds	r7, #16
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
	...

0800ee2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d108      	bne.n	800ee4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2201      	movs	r2, #1
 800ee48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee4c:	e031      	b.n	800eeb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee4e:	2310      	movs	r3, #16
 800ee50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee52:	2310      	movs	r3, #16
 800ee54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	0e5b      	lsrs	r3, r3, #25
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	f003 0307 	and.w	r3, r3, #7
 800ee64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	689b      	ldr	r3, [r3, #8]
 800ee6c:	0f5b      	lsrs	r3, r3, #29
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	f003 0307 	and.w	r3, r3, #7
 800ee74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee76:	7bbb      	ldrb	r3, [r7, #14]
 800ee78:	7b3a      	ldrb	r2, [r7, #12]
 800ee7a:	4911      	ldr	r1, [pc, #68]	; (800eec0 <UARTEx_SetNbDataToProcess+0x94>)
 800ee7c:	5c8a      	ldrb	r2, [r1, r2]
 800ee7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee82:	7b3a      	ldrb	r2, [r7, #12]
 800ee84:	490f      	ldr	r1, [pc, #60]	; (800eec4 <UARTEx_SetNbDataToProcess+0x98>)
 800ee86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee94:	7bfb      	ldrb	r3, [r7, #15]
 800ee96:	7b7a      	ldrb	r2, [r7, #13]
 800ee98:	4909      	ldr	r1, [pc, #36]	; (800eec0 <UARTEx_SetNbDataToProcess+0x94>)
 800ee9a:	5c8a      	ldrb	r2, [r1, r2]
 800ee9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eea0:	7b7a      	ldrb	r2, [r7, #13]
 800eea2:	4908      	ldr	r1, [pc, #32]	; (800eec4 <UARTEx_SetNbDataToProcess+0x98>)
 800eea4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eea6:	fb93 f3f2 	sdiv	r3, r3, r2
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eeb2:	bf00      	nop
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	080125f8 	.word	0x080125f8
 800eec4:	08012600 	.word	0x08012600

0800eec8 <__errno>:
 800eec8:	4b01      	ldr	r3, [pc, #4]	; (800eed0 <__errno+0x8>)
 800eeca:	6818      	ldr	r0, [r3, #0]
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	240000b0 	.word	0x240000b0

0800eed4 <__libc_init_array>:
 800eed4:	b570      	push	{r4, r5, r6, lr}
 800eed6:	4d0d      	ldr	r5, [pc, #52]	; (800ef0c <__libc_init_array+0x38>)
 800eed8:	4c0d      	ldr	r4, [pc, #52]	; (800ef10 <__libc_init_array+0x3c>)
 800eeda:	1b64      	subs	r4, r4, r5
 800eedc:	10a4      	asrs	r4, r4, #2
 800eede:	2600      	movs	r6, #0
 800eee0:	42a6      	cmp	r6, r4
 800eee2:	d109      	bne.n	800eef8 <__libc_init_array+0x24>
 800eee4:	4d0b      	ldr	r5, [pc, #44]	; (800ef14 <__libc_init_array+0x40>)
 800eee6:	4c0c      	ldr	r4, [pc, #48]	; (800ef18 <__libc_init_array+0x44>)
 800eee8:	f003 fae8 	bl	80124bc <_init>
 800eeec:	1b64      	subs	r4, r4, r5
 800eeee:	10a4      	asrs	r4, r4, #2
 800eef0:	2600      	movs	r6, #0
 800eef2:	42a6      	cmp	r6, r4
 800eef4:	d105      	bne.n	800ef02 <__libc_init_array+0x2e>
 800eef6:	bd70      	pop	{r4, r5, r6, pc}
 800eef8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eefc:	4798      	blx	r3
 800eefe:	3601      	adds	r6, #1
 800ef00:	e7ee      	b.n	800eee0 <__libc_init_array+0xc>
 800ef02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef06:	4798      	blx	r3
 800ef08:	3601      	adds	r6, #1
 800ef0a:	e7f2      	b.n	800eef2 <__libc_init_array+0x1e>
 800ef0c:	080142f8 	.word	0x080142f8
 800ef10:	080142f8 	.word	0x080142f8
 800ef14:	080142f8 	.word	0x080142f8
 800ef18:	080142fc 	.word	0x080142fc

0800ef1c <memcpy>:
 800ef1c:	440a      	add	r2, r1
 800ef1e:	4291      	cmp	r1, r2
 800ef20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef24:	d100      	bne.n	800ef28 <memcpy+0xc>
 800ef26:	4770      	bx	lr
 800ef28:	b510      	push	{r4, lr}
 800ef2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef32:	4291      	cmp	r1, r2
 800ef34:	d1f9      	bne.n	800ef2a <memcpy+0xe>
 800ef36:	bd10      	pop	{r4, pc}

0800ef38 <memset>:
 800ef38:	4402      	add	r2, r0
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d100      	bne.n	800ef42 <memset+0xa>
 800ef40:	4770      	bx	lr
 800ef42:	f803 1b01 	strb.w	r1, [r3], #1
 800ef46:	e7f9      	b.n	800ef3c <memset+0x4>

0800ef48 <sulp>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	460d      	mov	r5, r1
 800ef4e:	4616      	mov	r6, r2
 800ef50:	ec45 4b10 	vmov	d0, r4, r5
 800ef54:	f001 fcca 	bl	80108ec <__ulp>
 800ef58:	b17e      	cbz	r6, 800ef7a <sulp+0x32>
 800ef5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	dd09      	ble.n	800ef7a <sulp+0x32>
 800ef66:	051b      	lsls	r3, r3, #20
 800ef68:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ef72:	ec41 0b17 	vmov	d7, r0, r1
 800ef76:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	0000      	movs	r0, r0
	...

0800ef80 <_strtod_l>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ed2d 8b0e 	vpush	{d8-d14}
 800ef88:	b097      	sub	sp, #92	; 0x5c
 800ef8a:	461f      	mov	r7, r3
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	9312      	str	r3, [sp, #72]	; 0x48
 800ef90:	4ba1      	ldr	r3, [pc, #644]	; (800f218 <_strtod_l+0x298>)
 800ef92:	920d      	str	r2, [sp, #52]	; 0x34
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	9307      	str	r3, [sp, #28]
 800ef98:	4604      	mov	r4, r0
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	468b      	mov	fp, r1
 800ef9e:	f7f1 f99f 	bl	80002e0 <strlen>
 800efa2:	f04f 0800 	mov.w	r8, #0
 800efa6:	4605      	mov	r5, r0
 800efa8:	f04f 0900 	mov.w	r9, #0
 800efac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800efb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efb2:	7813      	ldrb	r3, [r2, #0]
 800efb4:	2b2b      	cmp	r3, #43	; 0x2b
 800efb6:	d04d      	beq.n	800f054 <_strtod_l+0xd4>
 800efb8:	d83a      	bhi.n	800f030 <_strtod_l+0xb0>
 800efba:	2b0d      	cmp	r3, #13
 800efbc:	d833      	bhi.n	800f026 <_strtod_l+0xa6>
 800efbe:	2b08      	cmp	r3, #8
 800efc0:	d833      	bhi.n	800f02a <_strtod_l+0xaa>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d03d      	beq.n	800f042 <_strtod_l+0xc2>
 800efc6:	2300      	movs	r3, #0
 800efc8:	9308      	str	r3, [sp, #32]
 800efca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800efcc:	7833      	ldrb	r3, [r6, #0]
 800efce:	2b30      	cmp	r3, #48	; 0x30
 800efd0:	f040 80b0 	bne.w	800f134 <_strtod_l+0x1b4>
 800efd4:	7873      	ldrb	r3, [r6, #1]
 800efd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800efda:	2b58      	cmp	r3, #88	; 0x58
 800efdc:	d167      	bne.n	800f0ae <_strtod_l+0x12e>
 800efde:	9b08      	ldr	r3, [sp, #32]
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	ab12      	add	r3, sp, #72	; 0x48
 800efe4:	9702      	str	r7, [sp, #8]
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	4a8c      	ldr	r2, [pc, #560]	; (800f21c <_strtod_l+0x29c>)
 800efea:	ab13      	add	r3, sp, #76	; 0x4c
 800efec:	a911      	add	r1, sp, #68	; 0x44
 800efee:	4620      	mov	r0, r4
 800eff0:	f000 fdf0 	bl	800fbd4 <__gethex>
 800eff4:	f010 0507 	ands.w	r5, r0, #7
 800eff8:	4607      	mov	r7, r0
 800effa:	d005      	beq.n	800f008 <_strtod_l+0x88>
 800effc:	2d06      	cmp	r5, #6
 800effe:	d12b      	bne.n	800f058 <_strtod_l+0xd8>
 800f000:	3601      	adds	r6, #1
 800f002:	2300      	movs	r3, #0
 800f004:	9611      	str	r6, [sp, #68]	; 0x44
 800f006:	9308      	str	r3, [sp, #32]
 800f008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f040 854e 	bne.w	800faac <_strtod_l+0xb2c>
 800f010:	9b08      	ldr	r3, [sp, #32]
 800f012:	b1e3      	cbz	r3, 800f04e <_strtod_l+0xce>
 800f014:	ec49 8b17 	vmov	d7, r8, r9
 800f018:	eeb1 0b47 	vneg.f64	d0, d7
 800f01c:	b017      	add	sp, #92	; 0x5c
 800f01e:	ecbd 8b0e 	vpop	{d8-d14}
 800f022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f026:	2b20      	cmp	r3, #32
 800f028:	d1cd      	bne.n	800efc6 <_strtod_l+0x46>
 800f02a:	3201      	adds	r2, #1
 800f02c:	9211      	str	r2, [sp, #68]	; 0x44
 800f02e:	e7bf      	b.n	800efb0 <_strtod_l+0x30>
 800f030:	2b2d      	cmp	r3, #45	; 0x2d
 800f032:	d1c8      	bne.n	800efc6 <_strtod_l+0x46>
 800f034:	2301      	movs	r3, #1
 800f036:	9308      	str	r3, [sp, #32]
 800f038:	1c53      	adds	r3, r2, #1
 800f03a:	9311      	str	r3, [sp, #68]	; 0x44
 800f03c:	7853      	ldrb	r3, [r2, #1]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1c3      	bne.n	800efca <_strtod_l+0x4a>
 800f042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f044:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f040 852d 	bne.w	800faa8 <_strtod_l+0xb28>
 800f04e:	ec49 8b10 	vmov	d0, r8, r9
 800f052:	e7e3      	b.n	800f01c <_strtod_l+0x9c>
 800f054:	2300      	movs	r3, #0
 800f056:	e7ee      	b.n	800f036 <_strtod_l+0xb6>
 800f058:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f05a:	b13a      	cbz	r2, 800f06c <_strtod_l+0xec>
 800f05c:	2135      	movs	r1, #53	; 0x35
 800f05e:	a814      	add	r0, sp, #80	; 0x50
 800f060:	f001 fd4c 	bl	8010afc <__copybits>
 800f064:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f066:	4620      	mov	r0, r4
 800f068:	f001 f90e 	bl	8010288 <_Bfree>
 800f06c:	3d01      	subs	r5, #1
 800f06e:	2d04      	cmp	r5, #4
 800f070:	d806      	bhi.n	800f080 <_strtod_l+0x100>
 800f072:	e8df f005 	tbb	[pc, r5]
 800f076:	030a      	.short	0x030a
 800f078:	1714      	.short	0x1714
 800f07a:	0a          	.byte	0x0a
 800f07b:	00          	.byte	0x00
 800f07c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f080:	073f      	lsls	r7, r7, #28
 800f082:	d5c1      	bpl.n	800f008 <_strtod_l+0x88>
 800f084:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f088:	e7be      	b.n	800f008 <_strtod_l+0x88>
 800f08a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f08e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f090:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f094:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f098:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f09c:	e7f0      	b.n	800f080 <_strtod_l+0x100>
 800f09e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f220 <_strtod_l+0x2a0>
 800f0a2:	e7ed      	b.n	800f080 <_strtod_l+0x100>
 800f0a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f0a8:	f04f 38ff 	mov.w	r8, #4294967295
 800f0ac:	e7e8      	b.n	800f080 <_strtod_l+0x100>
 800f0ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	9211      	str	r2, [sp, #68]	; 0x44
 800f0b4:	785b      	ldrb	r3, [r3, #1]
 800f0b6:	2b30      	cmp	r3, #48	; 0x30
 800f0b8:	d0f9      	beq.n	800f0ae <_strtod_l+0x12e>
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d0a4      	beq.n	800f008 <_strtod_l+0x88>
 800f0be:	2301      	movs	r3, #1
 800f0c0:	f04f 0a00 	mov.w	sl, #0
 800f0c4:	9304      	str	r3, [sp, #16]
 800f0c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0c8:	930a      	str	r3, [sp, #40]	; 0x28
 800f0ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f0ce:	f8cd a018 	str.w	sl, [sp, #24]
 800f0d2:	220a      	movs	r2, #10
 800f0d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f0d6:	7807      	ldrb	r7, [r0, #0]
 800f0d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f0dc:	b2d9      	uxtb	r1, r3
 800f0de:	2909      	cmp	r1, #9
 800f0e0:	d92a      	bls.n	800f138 <_strtod_l+0x1b8>
 800f0e2:	9907      	ldr	r1, [sp, #28]
 800f0e4:	462a      	mov	r2, r5
 800f0e6:	f001 fe0f 	bl	8010d08 <strncmp>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d033      	beq.n	800f156 <_strtod_l+0x1d6>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	9b06      	ldr	r3, [sp, #24]
 800f0f2:	463a      	mov	r2, r7
 800f0f4:	4601      	mov	r1, r0
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	2a65      	cmp	r2, #101	; 0x65
 800f0fa:	d001      	beq.n	800f100 <_strtod_l+0x180>
 800f0fc:	2a45      	cmp	r2, #69	; 0x45
 800f0fe:	d117      	bne.n	800f130 <_strtod_l+0x1b0>
 800f100:	b91b      	cbnz	r3, 800f10a <_strtod_l+0x18a>
 800f102:	9b04      	ldr	r3, [sp, #16]
 800f104:	4303      	orrs	r3, r0
 800f106:	d09c      	beq.n	800f042 <_strtod_l+0xc2>
 800f108:	2300      	movs	r3, #0
 800f10a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f10e:	f10b 0201 	add.w	r2, fp, #1
 800f112:	9211      	str	r2, [sp, #68]	; 0x44
 800f114:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f118:	2a2b      	cmp	r2, #43	; 0x2b
 800f11a:	d071      	beq.n	800f200 <_strtod_l+0x280>
 800f11c:	2a2d      	cmp	r2, #45	; 0x2d
 800f11e:	d077      	beq.n	800f210 <_strtod_l+0x290>
 800f120:	f04f 0e00 	mov.w	lr, #0
 800f124:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f128:	2d09      	cmp	r5, #9
 800f12a:	d97f      	bls.n	800f22c <_strtod_l+0x2ac>
 800f12c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f130:	2500      	movs	r5, #0
 800f132:	e09b      	b.n	800f26c <_strtod_l+0x2ec>
 800f134:	2300      	movs	r3, #0
 800f136:	e7c3      	b.n	800f0c0 <_strtod_l+0x140>
 800f138:	9906      	ldr	r1, [sp, #24]
 800f13a:	2908      	cmp	r1, #8
 800f13c:	bfdd      	ittte	le
 800f13e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f140:	fb02 3301 	mlale	r3, r2, r1, r3
 800f144:	9309      	strle	r3, [sp, #36]	; 0x24
 800f146:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f14a:	9b06      	ldr	r3, [sp, #24]
 800f14c:	3001      	adds	r0, #1
 800f14e:	3301      	adds	r3, #1
 800f150:	9306      	str	r3, [sp, #24]
 800f152:	9011      	str	r0, [sp, #68]	; 0x44
 800f154:	e7be      	b.n	800f0d4 <_strtod_l+0x154>
 800f156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f158:	195a      	adds	r2, r3, r5
 800f15a:	9211      	str	r2, [sp, #68]	; 0x44
 800f15c:	5d5a      	ldrb	r2, [r3, r5]
 800f15e:	9b06      	ldr	r3, [sp, #24]
 800f160:	b3a3      	cbz	r3, 800f1cc <_strtod_l+0x24c>
 800f162:	4607      	mov	r7, r0
 800f164:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f168:	2909      	cmp	r1, #9
 800f16a:	d912      	bls.n	800f192 <_strtod_l+0x212>
 800f16c:	2101      	movs	r1, #1
 800f16e:	e7c3      	b.n	800f0f8 <_strtod_l+0x178>
 800f170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f172:	1c5a      	adds	r2, r3, #1
 800f174:	9211      	str	r2, [sp, #68]	; 0x44
 800f176:	785a      	ldrb	r2, [r3, #1]
 800f178:	3001      	adds	r0, #1
 800f17a:	2a30      	cmp	r2, #48	; 0x30
 800f17c:	d0f8      	beq.n	800f170 <_strtod_l+0x1f0>
 800f17e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f182:	2b08      	cmp	r3, #8
 800f184:	f200 8497 	bhi.w	800fab6 <_strtod_l+0xb36>
 800f188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f18a:	930a      	str	r3, [sp, #40]	; 0x28
 800f18c:	4607      	mov	r7, r0
 800f18e:	2000      	movs	r0, #0
 800f190:	4603      	mov	r3, r0
 800f192:	3a30      	subs	r2, #48	; 0x30
 800f194:	f100 0101 	add.w	r1, r0, #1
 800f198:	d012      	beq.n	800f1c0 <_strtod_l+0x240>
 800f19a:	440f      	add	r7, r1
 800f19c:	eb00 0c03 	add.w	ip, r0, r3
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	250a      	movs	r5, #10
 800f1a4:	4561      	cmp	r1, ip
 800f1a6:	d113      	bne.n	800f1d0 <_strtod_l+0x250>
 800f1a8:	1819      	adds	r1, r3, r0
 800f1aa:	2908      	cmp	r1, #8
 800f1ac:	f103 0301 	add.w	r3, r3, #1
 800f1b0:	4403      	add	r3, r0
 800f1b2:	dc1c      	bgt.n	800f1ee <_strtod_l+0x26e>
 800f1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1b6:	210a      	movs	r1, #10
 800f1b8:	fb01 2200 	mla	r2, r1, r0, r2
 800f1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f1be:	2100      	movs	r1, #0
 800f1c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1c2:	1c50      	adds	r0, r2, #1
 800f1c4:	9011      	str	r0, [sp, #68]	; 0x44
 800f1c6:	7852      	ldrb	r2, [r2, #1]
 800f1c8:	4608      	mov	r0, r1
 800f1ca:	e7cb      	b.n	800f164 <_strtod_l+0x1e4>
 800f1cc:	9806      	ldr	r0, [sp, #24]
 800f1ce:	e7d4      	b.n	800f17a <_strtod_l+0x1fa>
 800f1d0:	2908      	cmp	r1, #8
 800f1d2:	dc04      	bgt.n	800f1de <_strtod_l+0x25e>
 800f1d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f1d6:	436e      	muls	r6, r5
 800f1d8:	9609      	str	r6, [sp, #36]	; 0x24
 800f1da:	3101      	adds	r1, #1
 800f1dc:	e7e2      	b.n	800f1a4 <_strtod_l+0x224>
 800f1de:	f101 0e01 	add.w	lr, r1, #1
 800f1e2:	f1be 0f10 	cmp.w	lr, #16
 800f1e6:	bfd8      	it	le
 800f1e8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f1ec:	e7f5      	b.n	800f1da <_strtod_l+0x25a>
 800f1ee:	2b10      	cmp	r3, #16
 800f1f0:	bfdc      	itt	le
 800f1f2:	210a      	movle	r1, #10
 800f1f4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f1f8:	e7e1      	b.n	800f1be <_strtod_l+0x23e>
 800f1fa:	2700      	movs	r7, #0
 800f1fc:	2101      	movs	r1, #1
 800f1fe:	e780      	b.n	800f102 <_strtod_l+0x182>
 800f200:	f04f 0e00 	mov.w	lr, #0
 800f204:	f10b 0202 	add.w	r2, fp, #2
 800f208:	9211      	str	r2, [sp, #68]	; 0x44
 800f20a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f20e:	e789      	b.n	800f124 <_strtod_l+0x1a4>
 800f210:	f04f 0e01 	mov.w	lr, #1
 800f214:	e7f6      	b.n	800f204 <_strtod_l+0x284>
 800f216:	bf00      	nop
 800f218:	080126e0 	.word	0x080126e0
 800f21c:	08012618 	.word	0x08012618
 800f220:	7ff00000 	.word	0x7ff00000
 800f224:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f226:	1c55      	adds	r5, r2, #1
 800f228:	9511      	str	r5, [sp, #68]	; 0x44
 800f22a:	7852      	ldrb	r2, [r2, #1]
 800f22c:	2a30      	cmp	r2, #48	; 0x30
 800f22e:	d0f9      	beq.n	800f224 <_strtod_l+0x2a4>
 800f230:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f234:	2d08      	cmp	r5, #8
 800f236:	f63f af7b 	bhi.w	800f130 <_strtod_l+0x1b0>
 800f23a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f23e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f240:	9207      	str	r2, [sp, #28]
 800f242:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f244:	1c55      	adds	r5, r2, #1
 800f246:	9511      	str	r5, [sp, #68]	; 0x44
 800f248:	7852      	ldrb	r2, [r2, #1]
 800f24a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f24e:	2e09      	cmp	r6, #9
 800f250:	d937      	bls.n	800f2c2 <_strtod_l+0x342>
 800f252:	9e07      	ldr	r6, [sp, #28]
 800f254:	1bad      	subs	r5, r5, r6
 800f256:	2d08      	cmp	r5, #8
 800f258:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f25c:	dc02      	bgt.n	800f264 <_strtod_l+0x2e4>
 800f25e:	4565      	cmp	r5, ip
 800f260:	bfa8      	it	ge
 800f262:	4665      	movge	r5, ip
 800f264:	f1be 0f00 	cmp.w	lr, #0
 800f268:	d000      	beq.n	800f26c <_strtod_l+0x2ec>
 800f26a:	426d      	negs	r5, r5
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d14d      	bne.n	800f30c <_strtod_l+0x38c>
 800f270:	9b04      	ldr	r3, [sp, #16]
 800f272:	4303      	orrs	r3, r0
 800f274:	f47f aec8 	bne.w	800f008 <_strtod_l+0x88>
 800f278:	2900      	cmp	r1, #0
 800f27a:	f47f aee2 	bne.w	800f042 <_strtod_l+0xc2>
 800f27e:	2a69      	cmp	r2, #105	; 0x69
 800f280:	d027      	beq.n	800f2d2 <_strtod_l+0x352>
 800f282:	dc24      	bgt.n	800f2ce <_strtod_l+0x34e>
 800f284:	2a49      	cmp	r2, #73	; 0x49
 800f286:	d024      	beq.n	800f2d2 <_strtod_l+0x352>
 800f288:	2a4e      	cmp	r2, #78	; 0x4e
 800f28a:	f47f aeda 	bne.w	800f042 <_strtod_l+0xc2>
 800f28e:	4996      	ldr	r1, [pc, #600]	; (800f4e8 <_strtod_l+0x568>)
 800f290:	a811      	add	r0, sp, #68	; 0x44
 800f292:	f000 fef7 	bl	8010084 <__match>
 800f296:	2800      	cmp	r0, #0
 800f298:	f43f aed3 	beq.w	800f042 <_strtod_l+0xc2>
 800f29c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2b28      	cmp	r3, #40	; 0x28
 800f2a2:	d12d      	bne.n	800f300 <_strtod_l+0x380>
 800f2a4:	4991      	ldr	r1, [pc, #580]	; (800f4ec <_strtod_l+0x56c>)
 800f2a6:	aa14      	add	r2, sp, #80	; 0x50
 800f2a8:	a811      	add	r0, sp, #68	; 0x44
 800f2aa:	f000 feff 	bl	80100ac <__hexnan>
 800f2ae:	2805      	cmp	r0, #5
 800f2b0:	d126      	bne.n	800f300 <_strtod_l+0x380>
 800f2b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2b4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f2b8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f2bc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f2c0:	e6a2      	b.n	800f008 <_strtod_l+0x88>
 800f2c2:	250a      	movs	r5, #10
 800f2c4:	fb05 250c 	mla	r5, r5, ip, r2
 800f2c8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f2cc:	e7b9      	b.n	800f242 <_strtod_l+0x2c2>
 800f2ce:	2a6e      	cmp	r2, #110	; 0x6e
 800f2d0:	e7db      	b.n	800f28a <_strtod_l+0x30a>
 800f2d2:	4987      	ldr	r1, [pc, #540]	; (800f4f0 <_strtod_l+0x570>)
 800f2d4:	a811      	add	r0, sp, #68	; 0x44
 800f2d6:	f000 fed5 	bl	8010084 <__match>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	f43f aeb1 	beq.w	800f042 <_strtod_l+0xc2>
 800f2e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2e2:	4984      	ldr	r1, [pc, #528]	; (800f4f4 <_strtod_l+0x574>)
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	a811      	add	r0, sp, #68	; 0x44
 800f2e8:	9311      	str	r3, [sp, #68]	; 0x44
 800f2ea:	f000 fecb 	bl	8010084 <__match>
 800f2ee:	b910      	cbnz	r0, 800f2f6 <_strtod_l+0x376>
 800f2f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	9311      	str	r3, [sp, #68]	; 0x44
 800f2f6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f508 <_strtod_l+0x588>
 800f2fa:	f04f 0800 	mov.w	r8, #0
 800f2fe:	e683      	b.n	800f008 <_strtod_l+0x88>
 800f300:	487d      	ldr	r0, [pc, #500]	; (800f4f8 <_strtod_l+0x578>)
 800f302:	f001 fce9 	bl	8010cd8 <nan>
 800f306:	ec59 8b10 	vmov	r8, r9, d0
 800f30a:	e67d      	b.n	800f008 <_strtod_l+0x88>
 800f30c:	1bea      	subs	r2, r5, r7
 800f30e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f312:	9207      	str	r2, [sp, #28]
 800f314:	9a06      	ldr	r2, [sp, #24]
 800f316:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f31a:	2a00      	cmp	r2, #0
 800f31c:	bf08      	it	eq
 800f31e:	461a      	moveq	r2, r3
 800f320:	2b10      	cmp	r3, #16
 800f322:	9206      	str	r2, [sp, #24]
 800f324:	461a      	mov	r2, r3
 800f326:	bfa8      	it	ge
 800f328:	2210      	movge	r2, #16
 800f32a:	2b09      	cmp	r3, #9
 800f32c:	ec59 8b17 	vmov	r8, r9, d7
 800f330:	dd0c      	ble.n	800f34c <_strtod_l+0x3cc>
 800f332:	4972      	ldr	r1, [pc, #456]	; (800f4fc <_strtod_l+0x57c>)
 800f334:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f338:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f33c:	ee06 aa90 	vmov	s13, sl
 800f340:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f344:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f348:	ec59 8b16 	vmov	r8, r9, d6
 800f34c:	2b0f      	cmp	r3, #15
 800f34e:	dc36      	bgt.n	800f3be <_strtod_l+0x43e>
 800f350:	9907      	ldr	r1, [sp, #28]
 800f352:	2900      	cmp	r1, #0
 800f354:	f43f ae58 	beq.w	800f008 <_strtod_l+0x88>
 800f358:	dd23      	ble.n	800f3a2 <_strtod_l+0x422>
 800f35a:	2916      	cmp	r1, #22
 800f35c:	dc0b      	bgt.n	800f376 <_strtod_l+0x3f6>
 800f35e:	4b67      	ldr	r3, [pc, #412]	; (800f4fc <_strtod_l+0x57c>)
 800f360:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f364:	ed93 7b00 	vldr	d7, [r3]
 800f368:	ec49 8b16 	vmov	d6, r8, r9
 800f36c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f370:	ec59 8b17 	vmov	r8, r9, d7
 800f374:	e648      	b.n	800f008 <_strtod_l+0x88>
 800f376:	9807      	ldr	r0, [sp, #28]
 800f378:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f37c:	4281      	cmp	r1, r0
 800f37e:	db1e      	blt.n	800f3be <_strtod_l+0x43e>
 800f380:	4a5e      	ldr	r2, [pc, #376]	; (800f4fc <_strtod_l+0x57c>)
 800f382:	f1c3 030f 	rsb	r3, r3, #15
 800f386:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f38a:	ed91 7b00 	vldr	d7, [r1]
 800f38e:	ec49 8b16 	vmov	d6, r8, r9
 800f392:	1ac3      	subs	r3, r0, r3
 800f394:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f398:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f39c:	ed92 6b00 	vldr	d6, [r2]
 800f3a0:	e7e4      	b.n	800f36c <_strtod_l+0x3ec>
 800f3a2:	9907      	ldr	r1, [sp, #28]
 800f3a4:	3116      	adds	r1, #22
 800f3a6:	db0a      	blt.n	800f3be <_strtod_l+0x43e>
 800f3a8:	4b54      	ldr	r3, [pc, #336]	; (800f4fc <_strtod_l+0x57c>)
 800f3aa:	1b7d      	subs	r5, r7, r5
 800f3ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f3b0:	ed95 7b00 	vldr	d7, [r5]
 800f3b4:	ec49 8b16 	vmov	d6, r8, r9
 800f3b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f3bc:	e7d8      	b.n	800f370 <_strtod_l+0x3f0>
 800f3be:	9907      	ldr	r1, [sp, #28]
 800f3c0:	1a9a      	subs	r2, r3, r2
 800f3c2:	440a      	add	r2, r1
 800f3c4:	2a00      	cmp	r2, #0
 800f3c6:	dd6f      	ble.n	800f4a8 <_strtod_l+0x528>
 800f3c8:	f012 000f 	ands.w	r0, r2, #15
 800f3cc:	d00a      	beq.n	800f3e4 <_strtod_l+0x464>
 800f3ce:	494b      	ldr	r1, [pc, #300]	; (800f4fc <_strtod_l+0x57c>)
 800f3d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f3d4:	ed91 7b00 	vldr	d7, [r1]
 800f3d8:	ec49 8b16 	vmov	d6, r8, r9
 800f3dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3e0:	ec59 8b17 	vmov	r8, r9, d7
 800f3e4:	f032 020f 	bics.w	r2, r2, #15
 800f3e8:	d04f      	beq.n	800f48a <_strtod_l+0x50a>
 800f3ea:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f3ee:	dd22      	ble.n	800f436 <_strtod_l+0x4b6>
 800f3f0:	2500      	movs	r5, #0
 800f3f2:	462e      	mov	r6, r5
 800f3f4:	9506      	str	r5, [sp, #24]
 800f3f6:	462f      	mov	r7, r5
 800f3f8:	2322      	movs	r3, #34	; 0x22
 800f3fa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f508 <_strtod_l+0x588>
 800f3fe:	6023      	str	r3, [r4, #0]
 800f400:	f04f 0800 	mov.w	r8, #0
 800f404:	9b06      	ldr	r3, [sp, #24]
 800f406:	2b00      	cmp	r3, #0
 800f408:	f43f adfe 	beq.w	800f008 <_strtod_l+0x88>
 800f40c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 ff3a 	bl	8010288 <_Bfree>
 800f414:	4639      	mov	r1, r7
 800f416:	4620      	mov	r0, r4
 800f418:	f000 ff36 	bl	8010288 <_Bfree>
 800f41c:	4631      	mov	r1, r6
 800f41e:	4620      	mov	r0, r4
 800f420:	f000 ff32 	bl	8010288 <_Bfree>
 800f424:	9906      	ldr	r1, [sp, #24]
 800f426:	4620      	mov	r0, r4
 800f428:	f000 ff2e 	bl	8010288 <_Bfree>
 800f42c:	4629      	mov	r1, r5
 800f42e:	4620      	mov	r0, r4
 800f430:	f000 ff2a 	bl	8010288 <_Bfree>
 800f434:	e5e8      	b.n	800f008 <_strtod_l+0x88>
 800f436:	2000      	movs	r0, #0
 800f438:	ec49 8b17 	vmov	d7, r8, r9
 800f43c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f500 <_strtod_l+0x580>
 800f440:	1112      	asrs	r2, r2, #4
 800f442:	4601      	mov	r1, r0
 800f444:	2a01      	cmp	r2, #1
 800f446:	dc23      	bgt.n	800f490 <_strtod_l+0x510>
 800f448:	b108      	cbz	r0, 800f44e <_strtod_l+0x4ce>
 800f44a:	ec59 8b17 	vmov	r8, r9, d7
 800f44e:	4a2c      	ldr	r2, [pc, #176]	; (800f500 <_strtod_l+0x580>)
 800f450:	482c      	ldr	r0, [pc, #176]	; (800f504 <_strtod_l+0x584>)
 800f452:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f456:	ed92 7b00 	vldr	d7, [r2]
 800f45a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f45e:	ec49 8b16 	vmov	d6, r8, r9
 800f462:	4a29      	ldr	r2, [pc, #164]	; (800f508 <_strtod_l+0x588>)
 800f464:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f468:	ee17 1a90 	vmov	r1, s15
 800f46c:	400a      	ands	r2, r1
 800f46e:	4282      	cmp	r2, r0
 800f470:	ec59 8b17 	vmov	r8, r9, d7
 800f474:	d8bc      	bhi.n	800f3f0 <_strtod_l+0x470>
 800f476:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f47a:	4282      	cmp	r2, r0
 800f47c:	bf86      	itte	hi
 800f47e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f50c <_strtod_l+0x58c>
 800f482:	f04f 38ff 	movhi.w	r8, #4294967295
 800f486:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f48a:	2200      	movs	r2, #0
 800f48c:	9204      	str	r2, [sp, #16]
 800f48e:	e078      	b.n	800f582 <_strtod_l+0x602>
 800f490:	07d6      	lsls	r6, r2, #31
 800f492:	d504      	bpl.n	800f49e <_strtod_l+0x51e>
 800f494:	ed9c 6b00 	vldr	d6, [ip]
 800f498:	2001      	movs	r0, #1
 800f49a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f49e:	3101      	adds	r1, #1
 800f4a0:	1052      	asrs	r2, r2, #1
 800f4a2:	f10c 0c08 	add.w	ip, ip, #8
 800f4a6:	e7cd      	b.n	800f444 <_strtod_l+0x4c4>
 800f4a8:	d0ef      	beq.n	800f48a <_strtod_l+0x50a>
 800f4aa:	4252      	negs	r2, r2
 800f4ac:	f012 000f 	ands.w	r0, r2, #15
 800f4b0:	d00a      	beq.n	800f4c8 <_strtod_l+0x548>
 800f4b2:	4912      	ldr	r1, [pc, #72]	; (800f4fc <_strtod_l+0x57c>)
 800f4b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f4b8:	ed91 7b00 	vldr	d7, [r1]
 800f4bc:	ec49 8b16 	vmov	d6, r8, r9
 800f4c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f4c4:	ec59 8b17 	vmov	r8, r9, d7
 800f4c8:	1112      	asrs	r2, r2, #4
 800f4ca:	d0de      	beq.n	800f48a <_strtod_l+0x50a>
 800f4cc:	2a1f      	cmp	r2, #31
 800f4ce:	dd1f      	ble.n	800f510 <_strtod_l+0x590>
 800f4d0:	2500      	movs	r5, #0
 800f4d2:	462e      	mov	r6, r5
 800f4d4:	9506      	str	r5, [sp, #24]
 800f4d6:	462f      	mov	r7, r5
 800f4d8:	2322      	movs	r3, #34	; 0x22
 800f4da:	f04f 0800 	mov.w	r8, #0
 800f4de:	f04f 0900 	mov.w	r9, #0
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	e78e      	b.n	800f404 <_strtod_l+0x484>
 800f4e6:	bf00      	nop
 800f4e8:	08012615 	.word	0x08012615
 800f4ec:	0801262c 	.word	0x0801262c
 800f4f0:	0801260c 	.word	0x0801260c
 800f4f4:	0801260f 	.word	0x0801260f
 800f4f8:	0801289f 	.word	0x0801289f
 800f4fc:	08012790 	.word	0x08012790
 800f500:	08012768 	.word	0x08012768
 800f504:	7ca00000 	.word	0x7ca00000
 800f508:	7ff00000 	.word	0x7ff00000
 800f50c:	7fefffff 	.word	0x7fefffff
 800f510:	f012 0110 	ands.w	r1, r2, #16
 800f514:	bf18      	it	ne
 800f516:	216a      	movne	r1, #106	; 0x6a
 800f518:	9104      	str	r1, [sp, #16]
 800f51a:	ec49 8b17 	vmov	d7, r8, r9
 800f51e:	49be      	ldr	r1, [pc, #760]	; (800f818 <_strtod_l+0x898>)
 800f520:	2000      	movs	r0, #0
 800f522:	07d6      	lsls	r6, r2, #31
 800f524:	d504      	bpl.n	800f530 <_strtod_l+0x5b0>
 800f526:	ed91 6b00 	vldr	d6, [r1]
 800f52a:	2001      	movs	r0, #1
 800f52c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f530:	1052      	asrs	r2, r2, #1
 800f532:	f101 0108 	add.w	r1, r1, #8
 800f536:	d1f4      	bne.n	800f522 <_strtod_l+0x5a2>
 800f538:	b108      	cbz	r0, 800f53e <_strtod_l+0x5be>
 800f53a:	ec59 8b17 	vmov	r8, r9, d7
 800f53e:	9a04      	ldr	r2, [sp, #16]
 800f540:	b1c2      	cbz	r2, 800f574 <_strtod_l+0x5f4>
 800f542:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f546:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f54a:	2a00      	cmp	r2, #0
 800f54c:	4648      	mov	r0, r9
 800f54e:	dd11      	ble.n	800f574 <_strtod_l+0x5f4>
 800f550:	2a1f      	cmp	r2, #31
 800f552:	f340 812e 	ble.w	800f7b2 <_strtod_l+0x832>
 800f556:	2a34      	cmp	r2, #52	; 0x34
 800f558:	bfde      	ittt	le
 800f55a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f55e:	f04f 32ff 	movle.w	r2, #4294967295
 800f562:	fa02 f101 	lslle.w	r1, r2, r1
 800f566:	f04f 0800 	mov.w	r8, #0
 800f56a:	bfcc      	ite	gt
 800f56c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f570:	ea01 0900 	andle.w	r9, r1, r0
 800f574:	ec49 8b17 	vmov	d7, r8, r9
 800f578:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f580:	d0a6      	beq.n	800f4d0 <_strtod_l+0x550>
 800f582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f584:	9200      	str	r2, [sp, #0]
 800f586:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f588:	9a06      	ldr	r2, [sp, #24]
 800f58a:	4620      	mov	r0, r4
 800f58c:	f000 fee4 	bl	8010358 <__s2b>
 800f590:	9006      	str	r0, [sp, #24]
 800f592:	2800      	cmp	r0, #0
 800f594:	f43f af2c 	beq.w	800f3f0 <_strtod_l+0x470>
 800f598:	9b07      	ldr	r3, [sp, #28]
 800f59a:	1b7d      	subs	r5, r7, r5
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	bfb4      	ite	lt
 800f5a0:	462b      	movlt	r3, r5
 800f5a2:	2300      	movge	r3, #0
 800f5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a6:	9b07      	ldr	r3, [sp, #28]
 800f5a8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f7f8 <_strtod_l+0x878>
 800f5ac:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f800 <_strtod_l+0x880>
 800f5b0:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f808 <_strtod_l+0x888>
 800f5b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5b8:	2500      	movs	r5, #0
 800f5ba:	930c      	str	r3, [sp, #48]	; 0x30
 800f5bc:	462e      	mov	r6, r5
 800f5be:	9b06      	ldr	r3, [sp, #24]
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	6859      	ldr	r1, [r3, #4]
 800f5c4:	f000 fe20 	bl	8010208 <_Balloc>
 800f5c8:	4607      	mov	r7, r0
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	f43f af14 	beq.w	800f3f8 <_strtod_l+0x478>
 800f5d0:	9b06      	ldr	r3, [sp, #24]
 800f5d2:	691a      	ldr	r2, [r3, #16]
 800f5d4:	3202      	adds	r2, #2
 800f5d6:	f103 010c 	add.w	r1, r3, #12
 800f5da:	0092      	lsls	r2, r2, #2
 800f5dc:	300c      	adds	r0, #12
 800f5de:	f7ff fc9d 	bl	800ef1c <memcpy>
 800f5e2:	ec49 8b10 	vmov	d0, r8, r9
 800f5e6:	aa14      	add	r2, sp, #80	; 0x50
 800f5e8:	a913      	add	r1, sp, #76	; 0x4c
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f001 f9fa 	bl	80109e4 <__d2b>
 800f5f0:	ec49 8b18 	vmov	d8, r8, r9
 800f5f4:	9012      	str	r0, [sp, #72]	; 0x48
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f43f aefe 	beq.w	800f3f8 <_strtod_l+0x478>
 800f5fc:	2101      	movs	r1, #1
 800f5fe:	4620      	mov	r0, r4
 800f600:	f000 ff44 	bl	801048c <__i2b>
 800f604:	4606      	mov	r6, r0
 800f606:	2800      	cmp	r0, #0
 800f608:	f43f aef6 	beq.w	800f3f8 <_strtod_l+0x478>
 800f60c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f60e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f610:	2b00      	cmp	r3, #0
 800f612:	bfab      	itete	ge
 800f614:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f616:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f618:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f61c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f620:	bfac      	ite	ge
 800f622:	eb03 0b02 	addge.w	fp, r3, r2
 800f626:	eba2 0a03 	sublt.w	sl, r2, r3
 800f62a:	9a04      	ldr	r2, [sp, #16]
 800f62c:	1a9b      	subs	r3, r3, r2
 800f62e:	440b      	add	r3, r1
 800f630:	4a7a      	ldr	r2, [pc, #488]	; (800f81c <_strtod_l+0x89c>)
 800f632:	3b01      	subs	r3, #1
 800f634:	4293      	cmp	r3, r2
 800f636:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f63a:	f280 80cd 	bge.w	800f7d8 <_strtod_l+0x858>
 800f63e:	1ad2      	subs	r2, r2, r3
 800f640:	2a1f      	cmp	r2, #31
 800f642:	eba1 0102 	sub.w	r1, r1, r2
 800f646:	f04f 0001 	mov.w	r0, #1
 800f64a:	f300 80b9 	bgt.w	800f7c0 <_strtod_l+0x840>
 800f64e:	fa00 f302 	lsl.w	r3, r0, r2
 800f652:	930b      	str	r3, [sp, #44]	; 0x2c
 800f654:	2300      	movs	r3, #0
 800f656:	930a      	str	r3, [sp, #40]	; 0x28
 800f658:	eb0b 0301 	add.w	r3, fp, r1
 800f65c:	9a04      	ldr	r2, [sp, #16]
 800f65e:	459b      	cmp	fp, r3
 800f660:	448a      	add	sl, r1
 800f662:	4492      	add	sl, r2
 800f664:	465a      	mov	r2, fp
 800f666:	bfa8      	it	ge
 800f668:	461a      	movge	r2, r3
 800f66a:	4552      	cmp	r2, sl
 800f66c:	bfa8      	it	ge
 800f66e:	4652      	movge	r2, sl
 800f670:	2a00      	cmp	r2, #0
 800f672:	bfc2      	ittt	gt
 800f674:	1a9b      	subgt	r3, r3, r2
 800f676:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f67a:	ebab 0b02 	subgt.w	fp, fp, r2
 800f67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f680:	2a00      	cmp	r2, #0
 800f682:	dd18      	ble.n	800f6b6 <_strtod_l+0x736>
 800f684:	4631      	mov	r1, r6
 800f686:	4620      	mov	r0, r4
 800f688:	930f      	str	r3, [sp, #60]	; 0x3c
 800f68a:	f000 ffbf 	bl	801060c <__pow5mult>
 800f68e:	4606      	mov	r6, r0
 800f690:	2800      	cmp	r0, #0
 800f692:	f43f aeb1 	beq.w	800f3f8 <_strtod_l+0x478>
 800f696:	4601      	mov	r1, r0
 800f698:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f69a:	4620      	mov	r0, r4
 800f69c:	f000 ff0c 	bl	80104b8 <__multiply>
 800f6a0:	900e      	str	r0, [sp, #56]	; 0x38
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	f43f aea8 	beq.w	800f3f8 <_strtod_l+0x478>
 800f6a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	f000 fdec 	bl	8010288 <_Bfree>
 800f6b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6b4:	9212      	str	r2, [sp, #72]	; 0x48
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f300 8093 	bgt.w	800f7e2 <_strtod_l+0x862>
 800f6bc:	9b07      	ldr	r3, [sp, #28]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	dd08      	ble.n	800f6d4 <_strtod_l+0x754>
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 ffa0 	bl	801060c <__pow5mult>
 800f6cc:	4607      	mov	r7, r0
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	f43f ae92 	beq.w	800f3f8 <_strtod_l+0x478>
 800f6d4:	f1ba 0f00 	cmp.w	sl, #0
 800f6d8:	dd08      	ble.n	800f6ec <_strtod_l+0x76c>
 800f6da:	4639      	mov	r1, r7
 800f6dc:	4652      	mov	r2, sl
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 ffee 	bl	80106c0 <__lshift>
 800f6e4:	4607      	mov	r7, r0
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	f43f ae86 	beq.w	800f3f8 <_strtod_l+0x478>
 800f6ec:	f1bb 0f00 	cmp.w	fp, #0
 800f6f0:	dd08      	ble.n	800f704 <_strtod_l+0x784>
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	465a      	mov	r2, fp
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 ffe2 	bl	80106c0 <__lshift>
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	2800      	cmp	r0, #0
 800f700:	f43f ae7a 	beq.w	800f3f8 <_strtod_l+0x478>
 800f704:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f706:	463a      	mov	r2, r7
 800f708:	4620      	mov	r0, r4
 800f70a:	f001 f865 	bl	80107d8 <__mdiff>
 800f70e:	4605      	mov	r5, r0
 800f710:	2800      	cmp	r0, #0
 800f712:	f43f ae71 	beq.w	800f3f8 <_strtod_l+0x478>
 800f716:	2300      	movs	r3, #0
 800f718:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f71c:	60c3      	str	r3, [r0, #12]
 800f71e:	4631      	mov	r1, r6
 800f720:	f001 f83e 	bl	80107a0 <__mcmp>
 800f724:	2800      	cmp	r0, #0
 800f726:	da7d      	bge.n	800f824 <_strtod_l+0x8a4>
 800f728:	ea5a 0308 	orrs.w	r3, sl, r8
 800f72c:	f040 80a3 	bne.w	800f876 <_strtod_l+0x8f6>
 800f730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f734:	2b00      	cmp	r3, #0
 800f736:	f040 809e 	bne.w	800f876 <_strtod_l+0x8f6>
 800f73a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f73e:	0d1b      	lsrs	r3, r3, #20
 800f740:	051b      	lsls	r3, r3, #20
 800f742:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f746:	f240 8096 	bls.w	800f876 <_strtod_l+0x8f6>
 800f74a:	696b      	ldr	r3, [r5, #20]
 800f74c:	b91b      	cbnz	r3, 800f756 <_strtod_l+0x7d6>
 800f74e:	692b      	ldr	r3, [r5, #16]
 800f750:	2b01      	cmp	r3, #1
 800f752:	f340 8090 	ble.w	800f876 <_strtod_l+0x8f6>
 800f756:	4629      	mov	r1, r5
 800f758:	2201      	movs	r2, #1
 800f75a:	4620      	mov	r0, r4
 800f75c:	f000 ffb0 	bl	80106c0 <__lshift>
 800f760:	4631      	mov	r1, r6
 800f762:	4605      	mov	r5, r0
 800f764:	f001 f81c 	bl	80107a0 <__mcmp>
 800f768:	2800      	cmp	r0, #0
 800f76a:	f340 8084 	ble.w	800f876 <_strtod_l+0x8f6>
 800f76e:	9904      	ldr	r1, [sp, #16]
 800f770:	4a2b      	ldr	r2, [pc, #172]	; (800f820 <_strtod_l+0x8a0>)
 800f772:	464b      	mov	r3, r9
 800f774:	2900      	cmp	r1, #0
 800f776:	f000 809d 	beq.w	800f8b4 <_strtod_l+0x934>
 800f77a:	ea02 0109 	and.w	r1, r2, r9
 800f77e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f782:	f300 8097 	bgt.w	800f8b4 <_strtod_l+0x934>
 800f786:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f78a:	f77f aea5 	ble.w	800f4d8 <_strtod_l+0x558>
 800f78e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f810 <_strtod_l+0x890>
 800f792:	ec49 8b16 	vmov	d6, r8, r9
 800f796:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f79a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f79e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	bf08      	it	eq
 800f7a6:	2322      	moveq	r3, #34	; 0x22
 800f7a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f7ac:	bf08      	it	eq
 800f7ae:	6023      	streq	r3, [r4, #0]
 800f7b0:	e62c      	b.n	800f40c <_strtod_l+0x48c>
 800f7b2:	f04f 31ff 	mov.w	r1, #4294967295
 800f7b6:	fa01 f202 	lsl.w	r2, r1, r2
 800f7ba:	ea02 0808 	and.w	r8, r2, r8
 800f7be:	e6d9      	b.n	800f574 <_strtod_l+0x5f4>
 800f7c0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f7c4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f7c8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f7cc:	33e2      	adds	r3, #226	; 0xe2
 800f7ce:	fa00 f303 	lsl.w	r3, r0, r3
 800f7d2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f7d6:	e73f      	b.n	800f658 <_strtod_l+0x6d8>
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f7e0:	e73a      	b.n	800f658 <_strtod_l+0x6d8>
 800f7e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f000 ff6a 	bl	80106c0 <__lshift>
 800f7ec:	9012      	str	r0, [sp, #72]	; 0x48
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	f47f af64 	bne.w	800f6bc <_strtod_l+0x73c>
 800f7f4:	e600      	b.n	800f3f8 <_strtod_l+0x478>
 800f7f6:	bf00      	nop
 800f7f8:	94a03595 	.word	0x94a03595
 800f7fc:	3fcfffff 	.word	0x3fcfffff
 800f800:	94a03595 	.word	0x94a03595
 800f804:	3fdfffff 	.word	0x3fdfffff
 800f808:	35afe535 	.word	0x35afe535
 800f80c:	3fe00000 	.word	0x3fe00000
 800f810:	00000000 	.word	0x00000000
 800f814:	39500000 	.word	0x39500000
 800f818:	08012640 	.word	0x08012640
 800f81c:	fffffc02 	.word	0xfffffc02
 800f820:	7ff00000 	.word	0x7ff00000
 800f824:	46cb      	mov	fp, r9
 800f826:	d15f      	bne.n	800f8e8 <_strtod_l+0x968>
 800f828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f82c:	f1ba 0f00 	cmp.w	sl, #0
 800f830:	d02a      	beq.n	800f888 <_strtod_l+0x908>
 800f832:	4aa7      	ldr	r2, [pc, #668]	; (800fad0 <_strtod_l+0xb50>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d12b      	bne.n	800f890 <_strtod_l+0x910>
 800f838:	9b04      	ldr	r3, [sp, #16]
 800f83a:	4642      	mov	r2, r8
 800f83c:	b1fb      	cbz	r3, 800f87e <_strtod_l+0x8fe>
 800f83e:	4ba5      	ldr	r3, [pc, #660]	; (800fad4 <_strtod_l+0xb54>)
 800f840:	ea09 0303 	and.w	r3, r9, r3
 800f844:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f848:	f04f 31ff 	mov.w	r1, #4294967295
 800f84c:	d81a      	bhi.n	800f884 <_strtod_l+0x904>
 800f84e:	0d1b      	lsrs	r3, r3, #20
 800f850:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f854:	fa01 f303 	lsl.w	r3, r1, r3
 800f858:	429a      	cmp	r2, r3
 800f85a:	d119      	bne.n	800f890 <_strtod_l+0x910>
 800f85c:	4b9e      	ldr	r3, [pc, #632]	; (800fad8 <_strtod_l+0xb58>)
 800f85e:	459b      	cmp	fp, r3
 800f860:	d102      	bne.n	800f868 <_strtod_l+0x8e8>
 800f862:	3201      	adds	r2, #1
 800f864:	f43f adc8 	beq.w	800f3f8 <_strtod_l+0x478>
 800f868:	4b9a      	ldr	r3, [pc, #616]	; (800fad4 <_strtod_l+0xb54>)
 800f86a:	ea0b 0303 	and.w	r3, fp, r3
 800f86e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f872:	f04f 0800 	mov.w	r8, #0
 800f876:	9b04      	ldr	r3, [sp, #16]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d188      	bne.n	800f78e <_strtod_l+0x80e>
 800f87c:	e5c6      	b.n	800f40c <_strtod_l+0x48c>
 800f87e:	f04f 33ff 	mov.w	r3, #4294967295
 800f882:	e7e9      	b.n	800f858 <_strtod_l+0x8d8>
 800f884:	460b      	mov	r3, r1
 800f886:	e7e7      	b.n	800f858 <_strtod_l+0x8d8>
 800f888:	ea53 0308 	orrs.w	r3, r3, r8
 800f88c:	f43f af6f 	beq.w	800f76e <_strtod_l+0x7ee>
 800f890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f892:	b1cb      	cbz	r3, 800f8c8 <_strtod_l+0x948>
 800f894:	ea13 0f0b 	tst.w	r3, fp
 800f898:	d0ed      	beq.n	800f876 <_strtod_l+0x8f6>
 800f89a:	9a04      	ldr	r2, [sp, #16]
 800f89c:	4640      	mov	r0, r8
 800f89e:	4649      	mov	r1, r9
 800f8a0:	f1ba 0f00 	cmp.w	sl, #0
 800f8a4:	d014      	beq.n	800f8d0 <_strtod_l+0x950>
 800f8a6:	f7ff fb4f 	bl	800ef48 <sulp>
 800f8aa:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f8ae:	ec59 8b17 	vmov	r8, r9, d7
 800f8b2:	e7e0      	b.n	800f876 <_strtod_l+0x8f6>
 800f8b4:	4013      	ands	r3, r2
 800f8b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f8ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f8be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f8c2:	f04f 38ff 	mov.w	r8, #4294967295
 800f8c6:	e7d6      	b.n	800f876 <_strtod_l+0x8f6>
 800f8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8ca:	ea13 0f08 	tst.w	r3, r8
 800f8ce:	e7e3      	b.n	800f898 <_strtod_l+0x918>
 800f8d0:	f7ff fb3a 	bl	800ef48 <sulp>
 800f8d4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f8d8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e0:	ec59 8b10 	vmov	r8, r9, d0
 800f8e4:	d1c7      	bne.n	800f876 <_strtod_l+0x8f6>
 800f8e6:	e5f7      	b.n	800f4d8 <_strtod_l+0x558>
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f001 f8d6 	bl	8010a9c <__ratio>
 800f8f0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f8f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fc:	d865      	bhi.n	800f9ca <_strtod_l+0xa4a>
 800f8fe:	f1ba 0f00 	cmp.w	sl, #0
 800f902:	d042      	beq.n	800f98a <_strtod_l+0xa0a>
 800f904:	4b75      	ldr	r3, [pc, #468]	; (800fadc <_strtod_l+0xb5c>)
 800f906:	2200      	movs	r2, #0
 800f908:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f90c:	4871      	ldr	r0, [pc, #452]	; (800fad4 <_strtod_l+0xb54>)
 800f90e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fae8 <_strtod_l+0xb68>
 800f912:	ea0b 0100 	and.w	r1, fp, r0
 800f916:	4561      	cmp	r1, ip
 800f918:	f040 808e 	bne.w	800fa38 <_strtod_l+0xab8>
 800f91c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f920:	ec49 8b10 	vmov	d0, r8, r9
 800f924:	ec43 2b1c 	vmov	d12, r2, r3
 800f928:	910a      	str	r1, [sp, #40]	; 0x28
 800f92a:	f000 ffdf 	bl	80108ec <__ulp>
 800f92e:	ec49 8b1e 	vmov	d14, r8, r9
 800f932:	4868      	ldr	r0, [pc, #416]	; (800fad4 <_strtod_l+0xb54>)
 800f934:	eeac eb00 	vfma.f64	d14, d12, d0
 800f938:	ee1e 3a90 	vmov	r3, s29
 800f93c:	4a68      	ldr	r2, [pc, #416]	; (800fae0 <_strtod_l+0xb60>)
 800f93e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f940:	4018      	ands	r0, r3
 800f942:	4290      	cmp	r0, r2
 800f944:	ec59 8b1e 	vmov	r8, r9, d14
 800f948:	d94e      	bls.n	800f9e8 <_strtod_l+0xa68>
 800f94a:	ee18 3a90 	vmov	r3, s17
 800f94e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f952:	4293      	cmp	r3, r2
 800f954:	d104      	bne.n	800f960 <_strtod_l+0x9e0>
 800f956:	ee18 3a10 	vmov	r3, s16
 800f95a:	3301      	adds	r3, #1
 800f95c:	f43f ad4c 	beq.w	800f3f8 <_strtod_l+0x478>
 800f960:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fad8 <_strtod_l+0xb58>
 800f964:	f04f 38ff 	mov.w	r8, #4294967295
 800f968:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 fc8c 	bl	8010288 <_Bfree>
 800f970:	4639      	mov	r1, r7
 800f972:	4620      	mov	r0, r4
 800f974:	f000 fc88 	bl	8010288 <_Bfree>
 800f978:	4631      	mov	r1, r6
 800f97a:	4620      	mov	r0, r4
 800f97c:	f000 fc84 	bl	8010288 <_Bfree>
 800f980:	4629      	mov	r1, r5
 800f982:	4620      	mov	r0, r4
 800f984:	f000 fc80 	bl	8010288 <_Bfree>
 800f988:	e619      	b.n	800f5be <_strtod_l+0x63e>
 800f98a:	f1b8 0f00 	cmp.w	r8, #0
 800f98e:	d112      	bne.n	800f9b6 <_strtod_l+0xa36>
 800f990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f994:	b9b3      	cbnz	r3, 800f9c4 <_strtod_l+0xa44>
 800f996:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f99a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f9a6:	bf58      	it	pl
 800f9a8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f9ac:	eeb1 7b4d 	vneg.f64	d7, d13
 800f9b0:	ec53 2b17 	vmov	r2, r3, d7
 800f9b4:	e7aa      	b.n	800f90c <_strtod_l+0x98c>
 800f9b6:	f1b8 0f01 	cmp.w	r8, #1
 800f9ba:	d103      	bne.n	800f9c4 <_strtod_l+0xa44>
 800f9bc:	f1b9 0f00 	cmp.w	r9, #0
 800f9c0:	f43f ad8a 	beq.w	800f4d8 <_strtod_l+0x558>
 800f9c4:	4b47      	ldr	r3, [pc, #284]	; (800fae4 <_strtod_l+0xb64>)
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	e79e      	b.n	800f908 <_strtod_l+0x988>
 800f9ca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f9ce:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f9d2:	f1ba 0f00 	cmp.w	sl, #0
 800f9d6:	d104      	bne.n	800f9e2 <_strtod_l+0xa62>
 800f9d8:	eeb1 7b4d 	vneg.f64	d7, d13
 800f9dc:	ec53 2b17 	vmov	r2, r3, d7
 800f9e0:	e794      	b.n	800f90c <_strtod_l+0x98c>
 800f9e2:	eeb0 7b4d 	vmov.f64	d7, d13
 800f9e6:	e7f9      	b.n	800f9dc <_strtod_l+0xa5c>
 800f9e8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f9ec:	9b04      	ldr	r3, [sp, #16]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1ba      	bne.n	800f968 <_strtod_l+0x9e8>
 800f9f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f9f6:	0d1b      	lsrs	r3, r3, #20
 800f9f8:	051b      	lsls	r3, r3, #20
 800f9fa:	4299      	cmp	r1, r3
 800f9fc:	d1b4      	bne.n	800f968 <_strtod_l+0x9e8>
 800f9fe:	ec51 0b1d 	vmov	r0, r1, d13
 800fa02:	f7f0 fe99 	bl	8000738 <__aeabi_d2lz>
 800fa06:	f7f0 fe51 	bl	80006ac <__aeabi_l2d>
 800fa0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa0e:	ec41 0b17 	vmov	d7, r0, r1
 800fa12:	ea43 0308 	orr.w	r3, r3, r8
 800fa16:	ea53 030a 	orrs.w	r3, r3, sl
 800fa1a:	ee3d db47 	vsub.f64	d13, d13, d7
 800fa1e:	d03c      	beq.n	800fa9a <_strtod_l+0xb1a>
 800fa20:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa28:	f53f acf0 	bmi.w	800f40c <_strtod_l+0x48c>
 800fa2c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fa30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa34:	dd98      	ble.n	800f968 <_strtod_l+0x9e8>
 800fa36:	e4e9      	b.n	800f40c <_strtod_l+0x48c>
 800fa38:	9804      	ldr	r0, [sp, #16]
 800fa3a:	b1f0      	cbz	r0, 800fa7a <_strtod_l+0xafa>
 800fa3c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fa40:	d81b      	bhi.n	800fa7a <_strtod_l+0xafa>
 800fa42:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fac8 <_strtod_l+0xb48>
 800fa46:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fa4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4e:	d811      	bhi.n	800fa74 <_strtod_l+0xaf4>
 800fa50:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fa54:	ee1d 3a10 	vmov	r3, s26
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	bf38      	it	cc
 800fa5c:	2301      	movcc	r3, #1
 800fa5e:	ee0d 3a10 	vmov	s26, r3
 800fa62:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fa66:	f1ba 0f00 	cmp.w	sl, #0
 800fa6a:	d113      	bne.n	800fa94 <_strtod_l+0xb14>
 800fa6c:	eeb1 7b4d 	vneg.f64	d7, d13
 800fa70:	ec53 2b17 	vmov	r2, r3, d7
 800fa74:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fa78:	1a43      	subs	r3, r0, r1
 800fa7a:	eeb0 0b48 	vmov.f64	d0, d8
 800fa7e:	ec43 2b1c 	vmov	d12, r2, r3
 800fa82:	910a      	str	r1, [sp, #40]	; 0x28
 800fa84:	f000 ff32 	bl	80108ec <__ulp>
 800fa88:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fa8a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fa8e:	ec59 8b18 	vmov	r8, r9, d8
 800fa92:	e7ab      	b.n	800f9ec <_strtod_l+0xa6c>
 800fa94:	eeb0 7b4d 	vmov.f64	d7, d13
 800fa98:	e7ea      	b.n	800fa70 <_strtod_l+0xaf0>
 800fa9a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa2:	f57f af61 	bpl.w	800f968 <_strtod_l+0x9e8>
 800faa6:	e4b1      	b.n	800f40c <_strtod_l+0x48c>
 800faa8:	2300      	movs	r3, #0
 800faaa:	9308      	str	r3, [sp, #32]
 800faac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800faae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fab0:	6013      	str	r3, [r2, #0]
 800fab2:	f7ff baad 	b.w	800f010 <_strtod_l+0x90>
 800fab6:	2a65      	cmp	r2, #101	; 0x65
 800fab8:	f43f ab9f 	beq.w	800f1fa <_strtod_l+0x27a>
 800fabc:	2a45      	cmp	r2, #69	; 0x45
 800fabe:	f43f ab9c 	beq.w	800f1fa <_strtod_l+0x27a>
 800fac2:	2101      	movs	r1, #1
 800fac4:	f7ff bbd4 	b.w	800f270 <_strtod_l+0x2f0>
 800fac8:	ffc00000 	.word	0xffc00000
 800facc:	41dfffff 	.word	0x41dfffff
 800fad0:	000fffff 	.word	0x000fffff
 800fad4:	7ff00000 	.word	0x7ff00000
 800fad8:	7fefffff 	.word	0x7fefffff
 800fadc:	3ff00000 	.word	0x3ff00000
 800fae0:	7c9fffff 	.word	0x7c9fffff
 800fae4:	bff00000 	.word	0xbff00000
 800fae8:	7fe00000 	.word	0x7fe00000

0800faec <strtod>:
 800faec:	460a      	mov	r2, r1
 800faee:	4601      	mov	r1, r0
 800faf0:	4802      	ldr	r0, [pc, #8]	; (800fafc <strtod+0x10>)
 800faf2:	4b03      	ldr	r3, [pc, #12]	; (800fb00 <strtod+0x14>)
 800faf4:	6800      	ldr	r0, [r0, #0]
 800faf6:	f7ff ba43 	b.w	800ef80 <_strtod_l>
 800fafa:	bf00      	nop
 800fafc:	240000b0 	.word	0x240000b0
 800fb00:	24000118 	.word	0x24000118

0800fb04 <rshift>:
 800fb04:	6903      	ldr	r3, [r0, #16]
 800fb06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fb0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fb12:	f100 0414 	add.w	r4, r0, #20
 800fb16:	dd45      	ble.n	800fba4 <rshift+0xa0>
 800fb18:	f011 011f 	ands.w	r1, r1, #31
 800fb1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb24:	d10c      	bne.n	800fb40 <rshift+0x3c>
 800fb26:	f100 0710 	add.w	r7, r0, #16
 800fb2a:	4629      	mov	r1, r5
 800fb2c:	42b1      	cmp	r1, r6
 800fb2e:	d334      	bcc.n	800fb9a <rshift+0x96>
 800fb30:	1a9b      	subs	r3, r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	1eea      	subs	r2, r5, #3
 800fb36:	4296      	cmp	r6, r2
 800fb38:	bf38      	it	cc
 800fb3a:	2300      	movcc	r3, #0
 800fb3c:	4423      	add	r3, r4
 800fb3e:	e015      	b.n	800fb6c <rshift+0x68>
 800fb40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb44:	f1c1 0820 	rsb	r8, r1, #32
 800fb48:	40cf      	lsrs	r7, r1
 800fb4a:	f105 0e04 	add.w	lr, r5, #4
 800fb4e:	46a1      	mov	r9, r4
 800fb50:	4576      	cmp	r6, lr
 800fb52:	46f4      	mov	ip, lr
 800fb54:	d815      	bhi.n	800fb82 <rshift+0x7e>
 800fb56:	1a9a      	subs	r2, r3, r2
 800fb58:	0092      	lsls	r2, r2, #2
 800fb5a:	3a04      	subs	r2, #4
 800fb5c:	3501      	adds	r5, #1
 800fb5e:	42ae      	cmp	r6, r5
 800fb60:	bf38      	it	cc
 800fb62:	2200      	movcc	r2, #0
 800fb64:	18a3      	adds	r3, r4, r2
 800fb66:	50a7      	str	r7, [r4, r2]
 800fb68:	b107      	cbz	r7, 800fb6c <rshift+0x68>
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	1b1a      	subs	r2, r3, r4
 800fb6e:	42a3      	cmp	r3, r4
 800fb70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb74:	bf08      	it	eq
 800fb76:	2300      	moveq	r3, #0
 800fb78:	6102      	str	r2, [r0, #16]
 800fb7a:	bf08      	it	eq
 800fb7c:	6143      	streq	r3, [r0, #20]
 800fb7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb82:	f8dc c000 	ldr.w	ip, [ip]
 800fb86:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb8a:	ea4c 0707 	orr.w	r7, ip, r7
 800fb8e:	f849 7b04 	str.w	r7, [r9], #4
 800fb92:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb96:	40cf      	lsrs	r7, r1
 800fb98:	e7da      	b.n	800fb50 <rshift+0x4c>
 800fb9a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb9e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fba2:	e7c3      	b.n	800fb2c <rshift+0x28>
 800fba4:	4623      	mov	r3, r4
 800fba6:	e7e1      	b.n	800fb6c <rshift+0x68>

0800fba8 <__hexdig_fun>:
 800fba8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fbac:	2b09      	cmp	r3, #9
 800fbae:	d802      	bhi.n	800fbb6 <__hexdig_fun+0xe>
 800fbb0:	3820      	subs	r0, #32
 800fbb2:	b2c0      	uxtb	r0, r0
 800fbb4:	4770      	bx	lr
 800fbb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fbba:	2b05      	cmp	r3, #5
 800fbbc:	d801      	bhi.n	800fbc2 <__hexdig_fun+0x1a>
 800fbbe:	3847      	subs	r0, #71	; 0x47
 800fbc0:	e7f7      	b.n	800fbb2 <__hexdig_fun+0xa>
 800fbc2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fbc6:	2b05      	cmp	r3, #5
 800fbc8:	d801      	bhi.n	800fbce <__hexdig_fun+0x26>
 800fbca:	3827      	subs	r0, #39	; 0x27
 800fbcc:	e7f1      	b.n	800fbb2 <__hexdig_fun+0xa>
 800fbce:	2000      	movs	r0, #0
 800fbd0:	4770      	bx	lr
	...

0800fbd4 <__gethex>:
 800fbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd8:	ed2d 8b02 	vpush	{d8}
 800fbdc:	b089      	sub	sp, #36	; 0x24
 800fbde:	ee08 0a10 	vmov	s16, r0
 800fbe2:	9304      	str	r3, [sp, #16]
 800fbe4:	4bb4      	ldr	r3, [pc, #720]	; (800feb8 <__gethex+0x2e4>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	9301      	str	r3, [sp, #4]
 800fbea:	4618      	mov	r0, r3
 800fbec:	468b      	mov	fp, r1
 800fbee:	4690      	mov	r8, r2
 800fbf0:	f7f0 fb76 	bl	80002e0 <strlen>
 800fbf4:	9b01      	ldr	r3, [sp, #4]
 800fbf6:	f8db 2000 	ldr.w	r2, [fp]
 800fbfa:	4403      	add	r3, r0
 800fbfc:	4682      	mov	sl, r0
 800fbfe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fc02:	9305      	str	r3, [sp, #20]
 800fc04:	1c93      	adds	r3, r2, #2
 800fc06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fc0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fc0e:	32fe      	adds	r2, #254	; 0xfe
 800fc10:	18d1      	adds	r1, r2, r3
 800fc12:	461f      	mov	r7, r3
 800fc14:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fc18:	9100      	str	r1, [sp, #0]
 800fc1a:	2830      	cmp	r0, #48	; 0x30
 800fc1c:	d0f8      	beq.n	800fc10 <__gethex+0x3c>
 800fc1e:	f7ff ffc3 	bl	800fba8 <__hexdig_fun>
 800fc22:	4604      	mov	r4, r0
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d13a      	bne.n	800fc9e <__gethex+0xca>
 800fc28:	9901      	ldr	r1, [sp, #4]
 800fc2a:	4652      	mov	r2, sl
 800fc2c:	4638      	mov	r0, r7
 800fc2e:	f001 f86b 	bl	8010d08 <strncmp>
 800fc32:	4605      	mov	r5, r0
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d168      	bne.n	800fd0a <__gethex+0x136>
 800fc38:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fc3c:	eb07 060a 	add.w	r6, r7, sl
 800fc40:	f7ff ffb2 	bl	800fba8 <__hexdig_fun>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d062      	beq.n	800fd0e <__gethex+0x13a>
 800fc48:	4633      	mov	r3, r6
 800fc4a:	7818      	ldrb	r0, [r3, #0]
 800fc4c:	2830      	cmp	r0, #48	; 0x30
 800fc4e:	461f      	mov	r7, r3
 800fc50:	f103 0301 	add.w	r3, r3, #1
 800fc54:	d0f9      	beq.n	800fc4a <__gethex+0x76>
 800fc56:	f7ff ffa7 	bl	800fba8 <__hexdig_fun>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	fab0 f480 	clz	r4, r0
 800fc60:	0964      	lsrs	r4, r4, #5
 800fc62:	4635      	mov	r5, r6
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	463a      	mov	r2, r7
 800fc68:	4616      	mov	r6, r2
 800fc6a:	3201      	adds	r2, #1
 800fc6c:	7830      	ldrb	r0, [r6, #0]
 800fc6e:	f7ff ff9b 	bl	800fba8 <__hexdig_fun>
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d1f8      	bne.n	800fc68 <__gethex+0x94>
 800fc76:	9901      	ldr	r1, [sp, #4]
 800fc78:	4652      	mov	r2, sl
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f001 f844 	bl	8010d08 <strncmp>
 800fc80:	b980      	cbnz	r0, 800fca4 <__gethex+0xd0>
 800fc82:	b94d      	cbnz	r5, 800fc98 <__gethex+0xc4>
 800fc84:	eb06 050a 	add.w	r5, r6, sl
 800fc88:	462a      	mov	r2, r5
 800fc8a:	4616      	mov	r6, r2
 800fc8c:	3201      	adds	r2, #1
 800fc8e:	7830      	ldrb	r0, [r6, #0]
 800fc90:	f7ff ff8a 	bl	800fba8 <__hexdig_fun>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d1f8      	bne.n	800fc8a <__gethex+0xb6>
 800fc98:	1bad      	subs	r5, r5, r6
 800fc9a:	00ad      	lsls	r5, r5, #2
 800fc9c:	e004      	b.n	800fca8 <__gethex+0xd4>
 800fc9e:	2400      	movs	r4, #0
 800fca0:	4625      	mov	r5, r4
 800fca2:	e7e0      	b.n	800fc66 <__gethex+0x92>
 800fca4:	2d00      	cmp	r5, #0
 800fca6:	d1f7      	bne.n	800fc98 <__gethex+0xc4>
 800fca8:	7833      	ldrb	r3, [r6, #0]
 800fcaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fcae:	2b50      	cmp	r3, #80	; 0x50
 800fcb0:	d13b      	bne.n	800fd2a <__gethex+0x156>
 800fcb2:	7873      	ldrb	r3, [r6, #1]
 800fcb4:	2b2b      	cmp	r3, #43	; 0x2b
 800fcb6:	d02c      	beq.n	800fd12 <__gethex+0x13e>
 800fcb8:	2b2d      	cmp	r3, #45	; 0x2d
 800fcba:	d02e      	beq.n	800fd1a <__gethex+0x146>
 800fcbc:	1c71      	adds	r1, r6, #1
 800fcbe:	f04f 0900 	mov.w	r9, #0
 800fcc2:	7808      	ldrb	r0, [r1, #0]
 800fcc4:	f7ff ff70 	bl	800fba8 <__hexdig_fun>
 800fcc8:	1e43      	subs	r3, r0, #1
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	2b18      	cmp	r3, #24
 800fcce:	d82c      	bhi.n	800fd2a <__gethex+0x156>
 800fcd0:	f1a0 0210 	sub.w	r2, r0, #16
 800fcd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fcd8:	f7ff ff66 	bl	800fba8 <__hexdig_fun>
 800fcdc:	1e43      	subs	r3, r0, #1
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	2b18      	cmp	r3, #24
 800fce2:	d91d      	bls.n	800fd20 <__gethex+0x14c>
 800fce4:	f1b9 0f00 	cmp.w	r9, #0
 800fce8:	d000      	beq.n	800fcec <__gethex+0x118>
 800fcea:	4252      	negs	r2, r2
 800fcec:	4415      	add	r5, r2
 800fcee:	f8cb 1000 	str.w	r1, [fp]
 800fcf2:	b1e4      	cbz	r4, 800fd2e <__gethex+0x15a>
 800fcf4:	9b00      	ldr	r3, [sp, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	bf14      	ite	ne
 800fcfa:	2700      	movne	r7, #0
 800fcfc:	2706      	moveq	r7, #6
 800fcfe:	4638      	mov	r0, r7
 800fd00:	b009      	add	sp, #36	; 0x24
 800fd02:	ecbd 8b02 	vpop	{d8}
 800fd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0a:	463e      	mov	r6, r7
 800fd0c:	4625      	mov	r5, r4
 800fd0e:	2401      	movs	r4, #1
 800fd10:	e7ca      	b.n	800fca8 <__gethex+0xd4>
 800fd12:	f04f 0900 	mov.w	r9, #0
 800fd16:	1cb1      	adds	r1, r6, #2
 800fd18:	e7d3      	b.n	800fcc2 <__gethex+0xee>
 800fd1a:	f04f 0901 	mov.w	r9, #1
 800fd1e:	e7fa      	b.n	800fd16 <__gethex+0x142>
 800fd20:	230a      	movs	r3, #10
 800fd22:	fb03 0202 	mla	r2, r3, r2, r0
 800fd26:	3a10      	subs	r2, #16
 800fd28:	e7d4      	b.n	800fcd4 <__gethex+0x100>
 800fd2a:	4631      	mov	r1, r6
 800fd2c:	e7df      	b.n	800fcee <__gethex+0x11a>
 800fd2e:	1bf3      	subs	r3, r6, r7
 800fd30:	3b01      	subs	r3, #1
 800fd32:	4621      	mov	r1, r4
 800fd34:	2b07      	cmp	r3, #7
 800fd36:	dc0b      	bgt.n	800fd50 <__gethex+0x17c>
 800fd38:	ee18 0a10 	vmov	r0, s16
 800fd3c:	f000 fa64 	bl	8010208 <_Balloc>
 800fd40:	4604      	mov	r4, r0
 800fd42:	b940      	cbnz	r0, 800fd56 <__gethex+0x182>
 800fd44:	4b5d      	ldr	r3, [pc, #372]	; (800febc <__gethex+0x2e8>)
 800fd46:	4602      	mov	r2, r0
 800fd48:	21de      	movs	r1, #222	; 0xde
 800fd4a:	485d      	ldr	r0, [pc, #372]	; (800fec0 <__gethex+0x2ec>)
 800fd4c:	f000 fffe 	bl	8010d4c <__assert_func>
 800fd50:	3101      	adds	r1, #1
 800fd52:	105b      	asrs	r3, r3, #1
 800fd54:	e7ee      	b.n	800fd34 <__gethex+0x160>
 800fd56:	f100 0914 	add.w	r9, r0, #20
 800fd5a:	f04f 0b00 	mov.w	fp, #0
 800fd5e:	f1ca 0301 	rsb	r3, sl, #1
 800fd62:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd66:	f8cd b000 	str.w	fp, [sp]
 800fd6a:	9306      	str	r3, [sp, #24]
 800fd6c:	42b7      	cmp	r7, r6
 800fd6e:	d340      	bcc.n	800fdf2 <__gethex+0x21e>
 800fd70:	9802      	ldr	r0, [sp, #8]
 800fd72:	9b00      	ldr	r3, [sp, #0]
 800fd74:	f840 3b04 	str.w	r3, [r0], #4
 800fd78:	eba0 0009 	sub.w	r0, r0, r9
 800fd7c:	1080      	asrs	r0, r0, #2
 800fd7e:	0146      	lsls	r6, r0, #5
 800fd80:	6120      	str	r0, [r4, #16]
 800fd82:	4618      	mov	r0, r3
 800fd84:	f000 fb32 	bl	80103ec <__hi0bits>
 800fd88:	1a30      	subs	r0, r6, r0
 800fd8a:	f8d8 6000 	ldr.w	r6, [r8]
 800fd8e:	42b0      	cmp	r0, r6
 800fd90:	dd63      	ble.n	800fe5a <__gethex+0x286>
 800fd92:	1b87      	subs	r7, r0, r6
 800fd94:	4639      	mov	r1, r7
 800fd96:	4620      	mov	r0, r4
 800fd98:	f000 fed3 	bl	8010b42 <__any_on>
 800fd9c:	4682      	mov	sl, r0
 800fd9e:	b1a8      	cbz	r0, 800fdcc <__gethex+0x1f8>
 800fda0:	1e7b      	subs	r3, r7, #1
 800fda2:	1159      	asrs	r1, r3, #5
 800fda4:	f003 021f 	and.w	r2, r3, #31
 800fda8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fdac:	f04f 0a01 	mov.w	sl, #1
 800fdb0:	fa0a f202 	lsl.w	r2, sl, r2
 800fdb4:	420a      	tst	r2, r1
 800fdb6:	d009      	beq.n	800fdcc <__gethex+0x1f8>
 800fdb8:	4553      	cmp	r3, sl
 800fdba:	dd05      	ble.n	800fdc8 <__gethex+0x1f4>
 800fdbc:	1eb9      	subs	r1, r7, #2
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f000 febf 	bl	8010b42 <__any_on>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d145      	bne.n	800fe54 <__gethex+0x280>
 800fdc8:	f04f 0a02 	mov.w	sl, #2
 800fdcc:	4639      	mov	r1, r7
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7ff fe98 	bl	800fb04 <rshift>
 800fdd4:	443d      	add	r5, r7
 800fdd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdda:	42ab      	cmp	r3, r5
 800fddc:	da4c      	bge.n	800fe78 <__gethex+0x2a4>
 800fdde:	ee18 0a10 	vmov	r0, s16
 800fde2:	4621      	mov	r1, r4
 800fde4:	f000 fa50 	bl	8010288 <_Bfree>
 800fde8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fdea:	2300      	movs	r3, #0
 800fdec:	6013      	str	r3, [r2, #0]
 800fdee:	27a3      	movs	r7, #163	; 0xa3
 800fdf0:	e785      	b.n	800fcfe <__gethex+0x12a>
 800fdf2:	1e73      	subs	r3, r6, #1
 800fdf4:	9a05      	ldr	r2, [sp, #20]
 800fdf6:	9303      	str	r3, [sp, #12]
 800fdf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d019      	beq.n	800fe34 <__gethex+0x260>
 800fe00:	f1bb 0f20 	cmp.w	fp, #32
 800fe04:	d107      	bne.n	800fe16 <__gethex+0x242>
 800fe06:	9b02      	ldr	r3, [sp, #8]
 800fe08:	9a00      	ldr	r2, [sp, #0]
 800fe0a:	f843 2b04 	str.w	r2, [r3], #4
 800fe0e:	9302      	str	r3, [sp, #8]
 800fe10:	2300      	movs	r3, #0
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	469b      	mov	fp, r3
 800fe16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fe1a:	f7ff fec5 	bl	800fba8 <__hexdig_fun>
 800fe1e:	9b00      	ldr	r3, [sp, #0]
 800fe20:	f000 000f 	and.w	r0, r0, #15
 800fe24:	fa00 f00b 	lsl.w	r0, r0, fp
 800fe28:	4303      	orrs	r3, r0
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	f10b 0b04 	add.w	fp, fp, #4
 800fe30:	9b03      	ldr	r3, [sp, #12]
 800fe32:	e00d      	b.n	800fe50 <__gethex+0x27c>
 800fe34:	9b03      	ldr	r3, [sp, #12]
 800fe36:	9a06      	ldr	r2, [sp, #24]
 800fe38:	4413      	add	r3, r2
 800fe3a:	42bb      	cmp	r3, r7
 800fe3c:	d3e0      	bcc.n	800fe00 <__gethex+0x22c>
 800fe3e:	4618      	mov	r0, r3
 800fe40:	9901      	ldr	r1, [sp, #4]
 800fe42:	9307      	str	r3, [sp, #28]
 800fe44:	4652      	mov	r2, sl
 800fe46:	f000 ff5f 	bl	8010d08 <strncmp>
 800fe4a:	9b07      	ldr	r3, [sp, #28]
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d1d7      	bne.n	800fe00 <__gethex+0x22c>
 800fe50:	461e      	mov	r6, r3
 800fe52:	e78b      	b.n	800fd6c <__gethex+0x198>
 800fe54:	f04f 0a03 	mov.w	sl, #3
 800fe58:	e7b8      	b.n	800fdcc <__gethex+0x1f8>
 800fe5a:	da0a      	bge.n	800fe72 <__gethex+0x29e>
 800fe5c:	1a37      	subs	r7, r6, r0
 800fe5e:	4621      	mov	r1, r4
 800fe60:	ee18 0a10 	vmov	r0, s16
 800fe64:	463a      	mov	r2, r7
 800fe66:	f000 fc2b 	bl	80106c0 <__lshift>
 800fe6a:	1bed      	subs	r5, r5, r7
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	f100 0914 	add.w	r9, r0, #20
 800fe72:	f04f 0a00 	mov.w	sl, #0
 800fe76:	e7ae      	b.n	800fdd6 <__gethex+0x202>
 800fe78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fe7c:	42a8      	cmp	r0, r5
 800fe7e:	dd72      	ble.n	800ff66 <__gethex+0x392>
 800fe80:	1b45      	subs	r5, r0, r5
 800fe82:	42ae      	cmp	r6, r5
 800fe84:	dc36      	bgt.n	800fef4 <__gethex+0x320>
 800fe86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d02a      	beq.n	800fee4 <__gethex+0x310>
 800fe8e:	2b03      	cmp	r3, #3
 800fe90:	d02c      	beq.n	800feec <__gethex+0x318>
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d11c      	bne.n	800fed0 <__gethex+0x2fc>
 800fe96:	42ae      	cmp	r6, r5
 800fe98:	d11a      	bne.n	800fed0 <__gethex+0x2fc>
 800fe9a:	2e01      	cmp	r6, #1
 800fe9c:	d112      	bne.n	800fec4 <__gethex+0x2f0>
 800fe9e:	9a04      	ldr	r2, [sp, #16]
 800fea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fea4:	6013      	str	r3, [r2, #0]
 800fea6:	2301      	movs	r3, #1
 800fea8:	6123      	str	r3, [r4, #16]
 800feaa:	f8c9 3000 	str.w	r3, [r9]
 800feae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800feb0:	2762      	movs	r7, #98	; 0x62
 800feb2:	601c      	str	r4, [r3, #0]
 800feb4:	e723      	b.n	800fcfe <__gethex+0x12a>
 800feb6:	bf00      	nop
 800feb8:	080126e0 	.word	0x080126e0
 800febc:	08012668 	.word	0x08012668
 800fec0:	08012679 	.word	0x08012679
 800fec4:	1e71      	subs	r1, r6, #1
 800fec6:	4620      	mov	r0, r4
 800fec8:	f000 fe3b 	bl	8010b42 <__any_on>
 800fecc:	2800      	cmp	r0, #0
 800fece:	d1e6      	bne.n	800fe9e <__gethex+0x2ca>
 800fed0:	ee18 0a10 	vmov	r0, s16
 800fed4:	4621      	mov	r1, r4
 800fed6:	f000 f9d7 	bl	8010288 <_Bfree>
 800feda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fedc:	2300      	movs	r3, #0
 800fede:	6013      	str	r3, [r2, #0]
 800fee0:	2750      	movs	r7, #80	; 0x50
 800fee2:	e70c      	b.n	800fcfe <__gethex+0x12a>
 800fee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d1f2      	bne.n	800fed0 <__gethex+0x2fc>
 800feea:	e7d8      	b.n	800fe9e <__gethex+0x2ca>
 800feec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1d5      	bne.n	800fe9e <__gethex+0x2ca>
 800fef2:	e7ed      	b.n	800fed0 <__gethex+0x2fc>
 800fef4:	1e6f      	subs	r7, r5, #1
 800fef6:	f1ba 0f00 	cmp.w	sl, #0
 800fefa:	d131      	bne.n	800ff60 <__gethex+0x38c>
 800fefc:	b127      	cbz	r7, 800ff08 <__gethex+0x334>
 800fefe:	4639      	mov	r1, r7
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 fe1e 	bl	8010b42 <__any_on>
 800ff06:	4682      	mov	sl, r0
 800ff08:	117b      	asrs	r3, r7, #5
 800ff0a:	2101      	movs	r1, #1
 800ff0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ff10:	f007 071f 	and.w	r7, r7, #31
 800ff14:	fa01 f707 	lsl.w	r7, r1, r7
 800ff18:	421f      	tst	r7, r3
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	bf18      	it	ne
 800ff20:	f04a 0a02 	orrne.w	sl, sl, #2
 800ff24:	1b76      	subs	r6, r6, r5
 800ff26:	f7ff fded 	bl	800fb04 <rshift>
 800ff2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff2e:	2702      	movs	r7, #2
 800ff30:	f1ba 0f00 	cmp.w	sl, #0
 800ff34:	d048      	beq.n	800ffc8 <__gethex+0x3f4>
 800ff36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff3a:	2b02      	cmp	r3, #2
 800ff3c:	d015      	beq.n	800ff6a <__gethex+0x396>
 800ff3e:	2b03      	cmp	r3, #3
 800ff40:	d017      	beq.n	800ff72 <__gethex+0x39e>
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	d109      	bne.n	800ff5a <__gethex+0x386>
 800ff46:	f01a 0f02 	tst.w	sl, #2
 800ff4a:	d006      	beq.n	800ff5a <__gethex+0x386>
 800ff4c:	f8d9 0000 	ldr.w	r0, [r9]
 800ff50:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff54:	f01a 0f01 	tst.w	sl, #1
 800ff58:	d10e      	bne.n	800ff78 <__gethex+0x3a4>
 800ff5a:	f047 0710 	orr.w	r7, r7, #16
 800ff5e:	e033      	b.n	800ffc8 <__gethex+0x3f4>
 800ff60:	f04f 0a01 	mov.w	sl, #1
 800ff64:	e7d0      	b.n	800ff08 <__gethex+0x334>
 800ff66:	2701      	movs	r7, #1
 800ff68:	e7e2      	b.n	800ff30 <__gethex+0x35c>
 800ff6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff6c:	f1c3 0301 	rsb	r3, r3, #1
 800ff70:	9315      	str	r3, [sp, #84]	; 0x54
 800ff72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d0f0      	beq.n	800ff5a <__gethex+0x386>
 800ff78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff7c:	f104 0314 	add.w	r3, r4, #20
 800ff80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff88:	f04f 0c00 	mov.w	ip, #0
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff92:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff96:	d01c      	beq.n	800ffd2 <__gethex+0x3fe>
 800ff98:	3201      	adds	r2, #1
 800ff9a:	6002      	str	r2, [r0, #0]
 800ff9c:	2f02      	cmp	r7, #2
 800ff9e:	f104 0314 	add.w	r3, r4, #20
 800ffa2:	d13f      	bne.n	8010024 <__gethex+0x450>
 800ffa4:	f8d8 2000 	ldr.w	r2, [r8]
 800ffa8:	3a01      	subs	r2, #1
 800ffaa:	42b2      	cmp	r2, r6
 800ffac:	d10a      	bne.n	800ffc4 <__gethex+0x3f0>
 800ffae:	1171      	asrs	r1, r6, #5
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ffb6:	f006 061f 	and.w	r6, r6, #31
 800ffba:	fa02 f606 	lsl.w	r6, r2, r6
 800ffbe:	421e      	tst	r6, r3
 800ffc0:	bf18      	it	ne
 800ffc2:	4617      	movne	r7, r2
 800ffc4:	f047 0720 	orr.w	r7, r7, #32
 800ffc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffca:	601c      	str	r4, [r3, #0]
 800ffcc:	9b04      	ldr	r3, [sp, #16]
 800ffce:	601d      	str	r5, [r3, #0]
 800ffd0:	e695      	b.n	800fcfe <__gethex+0x12a>
 800ffd2:	4299      	cmp	r1, r3
 800ffd4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ffd8:	d8d8      	bhi.n	800ff8c <__gethex+0x3b8>
 800ffda:	68a3      	ldr	r3, [r4, #8]
 800ffdc:	459b      	cmp	fp, r3
 800ffde:	db19      	blt.n	8010014 <__gethex+0x440>
 800ffe0:	6861      	ldr	r1, [r4, #4]
 800ffe2:	ee18 0a10 	vmov	r0, s16
 800ffe6:	3101      	adds	r1, #1
 800ffe8:	f000 f90e 	bl	8010208 <_Balloc>
 800ffec:	4681      	mov	r9, r0
 800ffee:	b918      	cbnz	r0, 800fff8 <__gethex+0x424>
 800fff0:	4b1a      	ldr	r3, [pc, #104]	; (801005c <__gethex+0x488>)
 800fff2:	4602      	mov	r2, r0
 800fff4:	2184      	movs	r1, #132	; 0x84
 800fff6:	e6a8      	b.n	800fd4a <__gethex+0x176>
 800fff8:	6922      	ldr	r2, [r4, #16]
 800fffa:	3202      	adds	r2, #2
 800fffc:	f104 010c 	add.w	r1, r4, #12
 8010000:	0092      	lsls	r2, r2, #2
 8010002:	300c      	adds	r0, #12
 8010004:	f7fe ff8a 	bl	800ef1c <memcpy>
 8010008:	4621      	mov	r1, r4
 801000a:	ee18 0a10 	vmov	r0, s16
 801000e:	f000 f93b 	bl	8010288 <_Bfree>
 8010012:	464c      	mov	r4, r9
 8010014:	6923      	ldr	r3, [r4, #16]
 8010016:	1c5a      	adds	r2, r3, #1
 8010018:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801001c:	6122      	str	r2, [r4, #16]
 801001e:	2201      	movs	r2, #1
 8010020:	615a      	str	r2, [r3, #20]
 8010022:	e7bb      	b.n	800ff9c <__gethex+0x3c8>
 8010024:	6922      	ldr	r2, [r4, #16]
 8010026:	455a      	cmp	r2, fp
 8010028:	dd0b      	ble.n	8010042 <__gethex+0x46e>
 801002a:	2101      	movs	r1, #1
 801002c:	4620      	mov	r0, r4
 801002e:	f7ff fd69 	bl	800fb04 <rshift>
 8010032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010036:	3501      	adds	r5, #1
 8010038:	42ab      	cmp	r3, r5
 801003a:	f6ff aed0 	blt.w	800fdde <__gethex+0x20a>
 801003e:	2701      	movs	r7, #1
 8010040:	e7c0      	b.n	800ffc4 <__gethex+0x3f0>
 8010042:	f016 061f 	ands.w	r6, r6, #31
 8010046:	d0fa      	beq.n	801003e <__gethex+0x46a>
 8010048:	4453      	add	r3, sl
 801004a:	f1c6 0620 	rsb	r6, r6, #32
 801004e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010052:	f000 f9cb 	bl	80103ec <__hi0bits>
 8010056:	42b0      	cmp	r0, r6
 8010058:	dbe7      	blt.n	801002a <__gethex+0x456>
 801005a:	e7f0      	b.n	801003e <__gethex+0x46a>
 801005c:	08012668 	.word	0x08012668

08010060 <L_shift>:
 8010060:	f1c2 0208 	rsb	r2, r2, #8
 8010064:	0092      	lsls	r2, r2, #2
 8010066:	b570      	push	{r4, r5, r6, lr}
 8010068:	f1c2 0620 	rsb	r6, r2, #32
 801006c:	6843      	ldr	r3, [r0, #4]
 801006e:	6804      	ldr	r4, [r0, #0]
 8010070:	fa03 f506 	lsl.w	r5, r3, r6
 8010074:	432c      	orrs	r4, r5
 8010076:	40d3      	lsrs	r3, r2
 8010078:	6004      	str	r4, [r0, #0]
 801007a:	f840 3f04 	str.w	r3, [r0, #4]!
 801007e:	4288      	cmp	r0, r1
 8010080:	d3f4      	bcc.n	801006c <L_shift+0xc>
 8010082:	bd70      	pop	{r4, r5, r6, pc}

08010084 <__match>:
 8010084:	b530      	push	{r4, r5, lr}
 8010086:	6803      	ldr	r3, [r0, #0]
 8010088:	3301      	adds	r3, #1
 801008a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801008e:	b914      	cbnz	r4, 8010096 <__match+0x12>
 8010090:	6003      	str	r3, [r0, #0]
 8010092:	2001      	movs	r0, #1
 8010094:	bd30      	pop	{r4, r5, pc}
 8010096:	f813 2b01 	ldrb.w	r2, [r3], #1
 801009a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801009e:	2d19      	cmp	r5, #25
 80100a0:	bf98      	it	ls
 80100a2:	3220      	addls	r2, #32
 80100a4:	42a2      	cmp	r2, r4
 80100a6:	d0f0      	beq.n	801008a <__match+0x6>
 80100a8:	2000      	movs	r0, #0
 80100aa:	e7f3      	b.n	8010094 <__match+0x10>

080100ac <__hexnan>:
 80100ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b0:	680b      	ldr	r3, [r1, #0]
 80100b2:	115e      	asrs	r6, r3, #5
 80100b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80100b8:	f013 031f 	ands.w	r3, r3, #31
 80100bc:	b087      	sub	sp, #28
 80100be:	bf18      	it	ne
 80100c0:	3604      	addne	r6, #4
 80100c2:	2500      	movs	r5, #0
 80100c4:	1f37      	subs	r7, r6, #4
 80100c6:	4690      	mov	r8, r2
 80100c8:	6802      	ldr	r2, [r0, #0]
 80100ca:	9301      	str	r3, [sp, #4]
 80100cc:	4682      	mov	sl, r0
 80100ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80100d2:	46b9      	mov	r9, r7
 80100d4:	463c      	mov	r4, r7
 80100d6:	9502      	str	r5, [sp, #8]
 80100d8:	46ab      	mov	fp, r5
 80100da:	7851      	ldrb	r1, [r2, #1]
 80100dc:	1c53      	adds	r3, r2, #1
 80100de:	9303      	str	r3, [sp, #12]
 80100e0:	b341      	cbz	r1, 8010134 <__hexnan+0x88>
 80100e2:	4608      	mov	r0, r1
 80100e4:	9205      	str	r2, [sp, #20]
 80100e6:	9104      	str	r1, [sp, #16]
 80100e8:	f7ff fd5e 	bl	800fba8 <__hexdig_fun>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	d14f      	bne.n	8010190 <__hexnan+0xe4>
 80100f0:	9904      	ldr	r1, [sp, #16]
 80100f2:	9a05      	ldr	r2, [sp, #20]
 80100f4:	2920      	cmp	r1, #32
 80100f6:	d818      	bhi.n	801012a <__hexnan+0x7e>
 80100f8:	9b02      	ldr	r3, [sp, #8]
 80100fa:	459b      	cmp	fp, r3
 80100fc:	dd13      	ble.n	8010126 <__hexnan+0x7a>
 80100fe:	454c      	cmp	r4, r9
 8010100:	d206      	bcs.n	8010110 <__hexnan+0x64>
 8010102:	2d07      	cmp	r5, #7
 8010104:	dc04      	bgt.n	8010110 <__hexnan+0x64>
 8010106:	462a      	mov	r2, r5
 8010108:	4649      	mov	r1, r9
 801010a:	4620      	mov	r0, r4
 801010c:	f7ff ffa8 	bl	8010060 <L_shift>
 8010110:	4544      	cmp	r4, r8
 8010112:	d950      	bls.n	80101b6 <__hexnan+0x10a>
 8010114:	2300      	movs	r3, #0
 8010116:	f1a4 0904 	sub.w	r9, r4, #4
 801011a:	f844 3c04 	str.w	r3, [r4, #-4]
 801011e:	f8cd b008 	str.w	fp, [sp, #8]
 8010122:	464c      	mov	r4, r9
 8010124:	461d      	mov	r5, r3
 8010126:	9a03      	ldr	r2, [sp, #12]
 8010128:	e7d7      	b.n	80100da <__hexnan+0x2e>
 801012a:	2929      	cmp	r1, #41	; 0x29
 801012c:	d156      	bne.n	80101dc <__hexnan+0x130>
 801012e:	3202      	adds	r2, #2
 8010130:	f8ca 2000 	str.w	r2, [sl]
 8010134:	f1bb 0f00 	cmp.w	fp, #0
 8010138:	d050      	beq.n	80101dc <__hexnan+0x130>
 801013a:	454c      	cmp	r4, r9
 801013c:	d206      	bcs.n	801014c <__hexnan+0xa0>
 801013e:	2d07      	cmp	r5, #7
 8010140:	dc04      	bgt.n	801014c <__hexnan+0xa0>
 8010142:	462a      	mov	r2, r5
 8010144:	4649      	mov	r1, r9
 8010146:	4620      	mov	r0, r4
 8010148:	f7ff ff8a 	bl	8010060 <L_shift>
 801014c:	4544      	cmp	r4, r8
 801014e:	d934      	bls.n	80101ba <__hexnan+0x10e>
 8010150:	f1a8 0204 	sub.w	r2, r8, #4
 8010154:	4623      	mov	r3, r4
 8010156:	f853 1b04 	ldr.w	r1, [r3], #4
 801015a:	f842 1f04 	str.w	r1, [r2, #4]!
 801015e:	429f      	cmp	r7, r3
 8010160:	d2f9      	bcs.n	8010156 <__hexnan+0xaa>
 8010162:	1b3b      	subs	r3, r7, r4
 8010164:	f023 0303 	bic.w	r3, r3, #3
 8010168:	3304      	adds	r3, #4
 801016a:	3401      	adds	r4, #1
 801016c:	3e03      	subs	r6, #3
 801016e:	42b4      	cmp	r4, r6
 8010170:	bf88      	it	hi
 8010172:	2304      	movhi	r3, #4
 8010174:	4443      	add	r3, r8
 8010176:	2200      	movs	r2, #0
 8010178:	f843 2b04 	str.w	r2, [r3], #4
 801017c:	429f      	cmp	r7, r3
 801017e:	d2fb      	bcs.n	8010178 <__hexnan+0xcc>
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	b91b      	cbnz	r3, 801018c <__hexnan+0xe0>
 8010184:	4547      	cmp	r7, r8
 8010186:	d127      	bne.n	80101d8 <__hexnan+0x12c>
 8010188:	2301      	movs	r3, #1
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	2005      	movs	r0, #5
 801018e:	e026      	b.n	80101de <__hexnan+0x132>
 8010190:	3501      	adds	r5, #1
 8010192:	2d08      	cmp	r5, #8
 8010194:	f10b 0b01 	add.w	fp, fp, #1
 8010198:	dd06      	ble.n	80101a8 <__hexnan+0xfc>
 801019a:	4544      	cmp	r4, r8
 801019c:	d9c3      	bls.n	8010126 <__hexnan+0x7a>
 801019e:	2300      	movs	r3, #0
 80101a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80101a4:	2501      	movs	r5, #1
 80101a6:	3c04      	subs	r4, #4
 80101a8:	6822      	ldr	r2, [r4, #0]
 80101aa:	f000 000f 	and.w	r0, r0, #15
 80101ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80101b2:	6022      	str	r2, [r4, #0]
 80101b4:	e7b7      	b.n	8010126 <__hexnan+0x7a>
 80101b6:	2508      	movs	r5, #8
 80101b8:	e7b5      	b.n	8010126 <__hexnan+0x7a>
 80101ba:	9b01      	ldr	r3, [sp, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d0df      	beq.n	8010180 <__hexnan+0xd4>
 80101c0:	f04f 32ff 	mov.w	r2, #4294967295
 80101c4:	f1c3 0320 	rsb	r3, r3, #32
 80101c8:	fa22 f303 	lsr.w	r3, r2, r3
 80101cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101d0:	401a      	ands	r2, r3
 80101d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80101d6:	e7d3      	b.n	8010180 <__hexnan+0xd4>
 80101d8:	3f04      	subs	r7, #4
 80101da:	e7d1      	b.n	8010180 <__hexnan+0xd4>
 80101dc:	2004      	movs	r0, #4
 80101de:	b007      	add	sp, #28
 80101e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101e4 <__ascii_mbtowc>:
 80101e4:	b082      	sub	sp, #8
 80101e6:	b901      	cbnz	r1, 80101ea <__ascii_mbtowc+0x6>
 80101e8:	a901      	add	r1, sp, #4
 80101ea:	b142      	cbz	r2, 80101fe <__ascii_mbtowc+0x1a>
 80101ec:	b14b      	cbz	r3, 8010202 <__ascii_mbtowc+0x1e>
 80101ee:	7813      	ldrb	r3, [r2, #0]
 80101f0:	600b      	str	r3, [r1, #0]
 80101f2:	7812      	ldrb	r2, [r2, #0]
 80101f4:	1e10      	subs	r0, r2, #0
 80101f6:	bf18      	it	ne
 80101f8:	2001      	movne	r0, #1
 80101fa:	b002      	add	sp, #8
 80101fc:	4770      	bx	lr
 80101fe:	4610      	mov	r0, r2
 8010200:	e7fb      	b.n	80101fa <__ascii_mbtowc+0x16>
 8010202:	f06f 0001 	mvn.w	r0, #1
 8010206:	e7f8      	b.n	80101fa <__ascii_mbtowc+0x16>

08010208 <_Balloc>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801020c:	4604      	mov	r4, r0
 801020e:	460d      	mov	r5, r1
 8010210:	b976      	cbnz	r6, 8010230 <_Balloc+0x28>
 8010212:	2010      	movs	r0, #16
 8010214:	f000 fdca 	bl	8010dac <malloc>
 8010218:	4602      	mov	r2, r0
 801021a:	6260      	str	r0, [r4, #36]	; 0x24
 801021c:	b920      	cbnz	r0, 8010228 <_Balloc+0x20>
 801021e:	4b18      	ldr	r3, [pc, #96]	; (8010280 <_Balloc+0x78>)
 8010220:	4818      	ldr	r0, [pc, #96]	; (8010284 <_Balloc+0x7c>)
 8010222:	2166      	movs	r1, #102	; 0x66
 8010224:	f000 fd92 	bl	8010d4c <__assert_func>
 8010228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801022c:	6006      	str	r6, [r0, #0]
 801022e:	60c6      	str	r6, [r0, #12]
 8010230:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010232:	68f3      	ldr	r3, [r6, #12]
 8010234:	b183      	cbz	r3, 8010258 <_Balloc+0x50>
 8010236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801023e:	b9b8      	cbnz	r0, 8010270 <_Balloc+0x68>
 8010240:	2101      	movs	r1, #1
 8010242:	fa01 f605 	lsl.w	r6, r1, r5
 8010246:	1d72      	adds	r2, r6, #5
 8010248:	0092      	lsls	r2, r2, #2
 801024a:	4620      	mov	r0, r4
 801024c:	f000 fc9a 	bl	8010b84 <_calloc_r>
 8010250:	b160      	cbz	r0, 801026c <_Balloc+0x64>
 8010252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010256:	e00e      	b.n	8010276 <_Balloc+0x6e>
 8010258:	2221      	movs	r2, #33	; 0x21
 801025a:	2104      	movs	r1, #4
 801025c:	4620      	mov	r0, r4
 801025e:	f000 fc91 	bl	8010b84 <_calloc_r>
 8010262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010264:	60f0      	str	r0, [r6, #12]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d1e4      	bne.n	8010236 <_Balloc+0x2e>
 801026c:	2000      	movs	r0, #0
 801026e:	bd70      	pop	{r4, r5, r6, pc}
 8010270:	6802      	ldr	r2, [r0, #0]
 8010272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010276:	2300      	movs	r3, #0
 8010278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801027c:	e7f7      	b.n	801026e <_Balloc+0x66>
 801027e:	bf00      	nop
 8010280:	080126f4 	.word	0x080126f4
 8010284:	0801270b 	.word	0x0801270b

08010288 <_Bfree>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801028c:	4605      	mov	r5, r0
 801028e:	460c      	mov	r4, r1
 8010290:	b976      	cbnz	r6, 80102b0 <_Bfree+0x28>
 8010292:	2010      	movs	r0, #16
 8010294:	f000 fd8a 	bl	8010dac <malloc>
 8010298:	4602      	mov	r2, r0
 801029a:	6268      	str	r0, [r5, #36]	; 0x24
 801029c:	b920      	cbnz	r0, 80102a8 <_Bfree+0x20>
 801029e:	4b09      	ldr	r3, [pc, #36]	; (80102c4 <_Bfree+0x3c>)
 80102a0:	4809      	ldr	r0, [pc, #36]	; (80102c8 <_Bfree+0x40>)
 80102a2:	218a      	movs	r1, #138	; 0x8a
 80102a4:	f000 fd52 	bl	8010d4c <__assert_func>
 80102a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102ac:	6006      	str	r6, [r0, #0]
 80102ae:	60c6      	str	r6, [r0, #12]
 80102b0:	b13c      	cbz	r4, 80102c2 <_Bfree+0x3a>
 80102b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80102b4:	6862      	ldr	r2, [r4, #4]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102bc:	6021      	str	r1, [r4, #0]
 80102be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102c2:	bd70      	pop	{r4, r5, r6, pc}
 80102c4:	080126f4 	.word	0x080126f4
 80102c8:	0801270b 	.word	0x0801270b

080102cc <__multadd>:
 80102cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d0:	690d      	ldr	r5, [r1, #16]
 80102d2:	4607      	mov	r7, r0
 80102d4:	460c      	mov	r4, r1
 80102d6:	461e      	mov	r6, r3
 80102d8:	f101 0c14 	add.w	ip, r1, #20
 80102dc:	2000      	movs	r0, #0
 80102de:	f8dc 3000 	ldr.w	r3, [ip]
 80102e2:	b299      	uxth	r1, r3
 80102e4:	fb02 6101 	mla	r1, r2, r1, r6
 80102e8:	0c1e      	lsrs	r6, r3, #16
 80102ea:	0c0b      	lsrs	r3, r1, #16
 80102ec:	fb02 3306 	mla	r3, r2, r6, r3
 80102f0:	b289      	uxth	r1, r1
 80102f2:	3001      	adds	r0, #1
 80102f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102f8:	4285      	cmp	r5, r0
 80102fa:	f84c 1b04 	str.w	r1, [ip], #4
 80102fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010302:	dcec      	bgt.n	80102de <__multadd+0x12>
 8010304:	b30e      	cbz	r6, 801034a <__multadd+0x7e>
 8010306:	68a3      	ldr	r3, [r4, #8]
 8010308:	42ab      	cmp	r3, r5
 801030a:	dc19      	bgt.n	8010340 <__multadd+0x74>
 801030c:	6861      	ldr	r1, [r4, #4]
 801030e:	4638      	mov	r0, r7
 8010310:	3101      	adds	r1, #1
 8010312:	f7ff ff79 	bl	8010208 <_Balloc>
 8010316:	4680      	mov	r8, r0
 8010318:	b928      	cbnz	r0, 8010326 <__multadd+0x5a>
 801031a:	4602      	mov	r2, r0
 801031c:	4b0c      	ldr	r3, [pc, #48]	; (8010350 <__multadd+0x84>)
 801031e:	480d      	ldr	r0, [pc, #52]	; (8010354 <__multadd+0x88>)
 8010320:	21b5      	movs	r1, #181	; 0xb5
 8010322:	f000 fd13 	bl	8010d4c <__assert_func>
 8010326:	6922      	ldr	r2, [r4, #16]
 8010328:	3202      	adds	r2, #2
 801032a:	f104 010c 	add.w	r1, r4, #12
 801032e:	0092      	lsls	r2, r2, #2
 8010330:	300c      	adds	r0, #12
 8010332:	f7fe fdf3 	bl	800ef1c <memcpy>
 8010336:	4621      	mov	r1, r4
 8010338:	4638      	mov	r0, r7
 801033a:	f7ff ffa5 	bl	8010288 <_Bfree>
 801033e:	4644      	mov	r4, r8
 8010340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010344:	3501      	adds	r5, #1
 8010346:	615e      	str	r6, [r3, #20]
 8010348:	6125      	str	r5, [r4, #16]
 801034a:	4620      	mov	r0, r4
 801034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010350:	08012668 	.word	0x08012668
 8010354:	0801270b 	.word	0x0801270b

08010358 <__s2b>:
 8010358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801035c:	460c      	mov	r4, r1
 801035e:	4615      	mov	r5, r2
 8010360:	461f      	mov	r7, r3
 8010362:	2209      	movs	r2, #9
 8010364:	3308      	adds	r3, #8
 8010366:	4606      	mov	r6, r0
 8010368:	fb93 f3f2 	sdiv	r3, r3, r2
 801036c:	2100      	movs	r1, #0
 801036e:	2201      	movs	r2, #1
 8010370:	429a      	cmp	r2, r3
 8010372:	db09      	blt.n	8010388 <__s2b+0x30>
 8010374:	4630      	mov	r0, r6
 8010376:	f7ff ff47 	bl	8010208 <_Balloc>
 801037a:	b940      	cbnz	r0, 801038e <__s2b+0x36>
 801037c:	4602      	mov	r2, r0
 801037e:	4b19      	ldr	r3, [pc, #100]	; (80103e4 <__s2b+0x8c>)
 8010380:	4819      	ldr	r0, [pc, #100]	; (80103e8 <__s2b+0x90>)
 8010382:	21ce      	movs	r1, #206	; 0xce
 8010384:	f000 fce2 	bl	8010d4c <__assert_func>
 8010388:	0052      	lsls	r2, r2, #1
 801038a:	3101      	adds	r1, #1
 801038c:	e7f0      	b.n	8010370 <__s2b+0x18>
 801038e:	9b08      	ldr	r3, [sp, #32]
 8010390:	6143      	str	r3, [r0, #20]
 8010392:	2d09      	cmp	r5, #9
 8010394:	f04f 0301 	mov.w	r3, #1
 8010398:	6103      	str	r3, [r0, #16]
 801039a:	dd16      	ble.n	80103ca <__s2b+0x72>
 801039c:	f104 0909 	add.w	r9, r4, #9
 80103a0:	46c8      	mov	r8, r9
 80103a2:	442c      	add	r4, r5
 80103a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80103a8:	4601      	mov	r1, r0
 80103aa:	3b30      	subs	r3, #48	; 0x30
 80103ac:	220a      	movs	r2, #10
 80103ae:	4630      	mov	r0, r6
 80103b0:	f7ff ff8c 	bl	80102cc <__multadd>
 80103b4:	45a0      	cmp	r8, r4
 80103b6:	d1f5      	bne.n	80103a4 <__s2b+0x4c>
 80103b8:	f1a5 0408 	sub.w	r4, r5, #8
 80103bc:	444c      	add	r4, r9
 80103be:	1b2d      	subs	r5, r5, r4
 80103c0:	1963      	adds	r3, r4, r5
 80103c2:	42bb      	cmp	r3, r7
 80103c4:	db04      	blt.n	80103d0 <__s2b+0x78>
 80103c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ca:	340a      	adds	r4, #10
 80103cc:	2509      	movs	r5, #9
 80103ce:	e7f6      	b.n	80103be <__s2b+0x66>
 80103d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80103d4:	4601      	mov	r1, r0
 80103d6:	3b30      	subs	r3, #48	; 0x30
 80103d8:	220a      	movs	r2, #10
 80103da:	4630      	mov	r0, r6
 80103dc:	f7ff ff76 	bl	80102cc <__multadd>
 80103e0:	e7ee      	b.n	80103c0 <__s2b+0x68>
 80103e2:	bf00      	nop
 80103e4:	08012668 	.word	0x08012668
 80103e8:	0801270b 	.word	0x0801270b

080103ec <__hi0bits>:
 80103ec:	0c03      	lsrs	r3, r0, #16
 80103ee:	041b      	lsls	r3, r3, #16
 80103f0:	b9d3      	cbnz	r3, 8010428 <__hi0bits+0x3c>
 80103f2:	0400      	lsls	r0, r0, #16
 80103f4:	2310      	movs	r3, #16
 80103f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80103fa:	bf04      	itt	eq
 80103fc:	0200      	lsleq	r0, r0, #8
 80103fe:	3308      	addeq	r3, #8
 8010400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010404:	bf04      	itt	eq
 8010406:	0100      	lsleq	r0, r0, #4
 8010408:	3304      	addeq	r3, #4
 801040a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801040e:	bf04      	itt	eq
 8010410:	0080      	lsleq	r0, r0, #2
 8010412:	3302      	addeq	r3, #2
 8010414:	2800      	cmp	r0, #0
 8010416:	db05      	blt.n	8010424 <__hi0bits+0x38>
 8010418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801041c:	f103 0301 	add.w	r3, r3, #1
 8010420:	bf08      	it	eq
 8010422:	2320      	moveq	r3, #32
 8010424:	4618      	mov	r0, r3
 8010426:	4770      	bx	lr
 8010428:	2300      	movs	r3, #0
 801042a:	e7e4      	b.n	80103f6 <__hi0bits+0xa>

0801042c <__lo0bits>:
 801042c:	6803      	ldr	r3, [r0, #0]
 801042e:	f013 0207 	ands.w	r2, r3, #7
 8010432:	4601      	mov	r1, r0
 8010434:	d00b      	beq.n	801044e <__lo0bits+0x22>
 8010436:	07da      	lsls	r2, r3, #31
 8010438:	d423      	bmi.n	8010482 <__lo0bits+0x56>
 801043a:	0798      	lsls	r0, r3, #30
 801043c:	bf49      	itett	mi
 801043e:	085b      	lsrmi	r3, r3, #1
 8010440:	089b      	lsrpl	r3, r3, #2
 8010442:	2001      	movmi	r0, #1
 8010444:	600b      	strmi	r3, [r1, #0]
 8010446:	bf5c      	itt	pl
 8010448:	600b      	strpl	r3, [r1, #0]
 801044a:	2002      	movpl	r0, #2
 801044c:	4770      	bx	lr
 801044e:	b298      	uxth	r0, r3
 8010450:	b9a8      	cbnz	r0, 801047e <__lo0bits+0x52>
 8010452:	0c1b      	lsrs	r3, r3, #16
 8010454:	2010      	movs	r0, #16
 8010456:	b2da      	uxtb	r2, r3
 8010458:	b90a      	cbnz	r2, 801045e <__lo0bits+0x32>
 801045a:	3008      	adds	r0, #8
 801045c:	0a1b      	lsrs	r3, r3, #8
 801045e:	071a      	lsls	r2, r3, #28
 8010460:	bf04      	itt	eq
 8010462:	091b      	lsreq	r3, r3, #4
 8010464:	3004      	addeq	r0, #4
 8010466:	079a      	lsls	r2, r3, #30
 8010468:	bf04      	itt	eq
 801046a:	089b      	lsreq	r3, r3, #2
 801046c:	3002      	addeq	r0, #2
 801046e:	07da      	lsls	r2, r3, #31
 8010470:	d403      	bmi.n	801047a <__lo0bits+0x4e>
 8010472:	085b      	lsrs	r3, r3, #1
 8010474:	f100 0001 	add.w	r0, r0, #1
 8010478:	d005      	beq.n	8010486 <__lo0bits+0x5a>
 801047a:	600b      	str	r3, [r1, #0]
 801047c:	4770      	bx	lr
 801047e:	4610      	mov	r0, r2
 8010480:	e7e9      	b.n	8010456 <__lo0bits+0x2a>
 8010482:	2000      	movs	r0, #0
 8010484:	4770      	bx	lr
 8010486:	2020      	movs	r0, #32
 8010488:	4770      	bx	lr
	...

0801048c <__i2b>:
 801048c:	b510      	push	{r4, lr}
 801048e:	460c      	mov	r4, r1
 8010490:	2101      	movs	r1, #1
 8010492:	f7ff feb9 	bl	8010208 <_Balloc>
 8010496:	4602      	mov	r2, r0
 8010498:	b928      	cbnz	r0, 80104a6 <__i2b+0x1a>
 801049a:	4b05      	ldr	r3, [pc, #20]	; (80104b0 <__i2b+0x24>)
 801049c:	4805      	ldr	r0, [pc, #20]	; (80104b4 <__i2b+0x28>)
 801049e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80104a2:	f000 fc53 	bl	8010d4c <__assert_func>
 80104a6:	2301      	movs	r3, #1
 80104a8:	6144      	str	r4, [r0, #20]
 80104aa:	6103      	str	r3, [r0, #16]
 80104ac:	bd10      	pop	{r4, pc}
 80104ae:	bf00      	nop
 80104b0:	08012668 	.word	0x08012668
 80104b4:	0801270b 	.word	0x0801270b

080104b8 <__multiply>:
 80104b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104bc:	4691      	mov	r9, r2
 80104be:	690a      	ldr	r2, [r1, #16]
 80104c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	bfb8      	it	lt
 80104c8:	460b      	movlt	r3, r1
 80104ca:	460c      	mov	r4, r1
 80104cc:	bfbc      	itt	lt
 80104ce:	464c      	movlt	r4, r9
 80104d0:	4699      	movlt	r9, r3
 80104d2:	6927      	ldr	r7, [r4, #16]
 80104d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104d8:	68a3      	ldr	r3, [r4, #8]
 80104da:	6861      	ldr	r1, [r4, #4]
 80104dc:	eb07 060a 	add.w	r6, r7, sl
 80104e0:	42b3      	cmp	r3, r6
 80104e2:	b085      	sub	sp, #20
 80104e4:	bfb8      	it	lt
 80104e6:	3101      	addlt	r1, #1
 80104e8:	f7ff fe8e 	bl	8010208 <_Balloc>
 80104ec:	b930      	cbnz	r0, 80104fc <__multiply+0x44>
 80104ee:	4602      	mov	r2, r0
 80104f0:	4b44      	ldr	r3, [pc, #272]	; (8010604 <__multiply+0x14c>)
 80104f2:	4845      	ldr	r0, [pc, #276]	; (8010608 <__multiply+0x150>)
 80104f4:	f240 115d 	movw	r1, #349	; 0x15d
 80104f8:	f000 fc28 	bl	8010d4c <__assert_func>
 80104fc:	f100 0514 	add.w	r5, r0, #20
 8010500:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010504:	462b      	mov	r3, r5
 8010506:	2200      	movs	r2, #0
 8010508:	4543      	cmp	r3, r8
 801050a:	d321      	bcc.n	8010550 <__multiply+0x98>
 801050c:	f104 0314 	add.w	r3, r4, #20
 8010510:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010514:	f109 0314 	add.w	r3, r9, #20
 8010518:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801051c:	9202      	str	r2, [sp, #8]
 801051e:	1b3a      	subs	r2, r7, r4
 8010520:	3a15      	subs	r2, #21
 8010522:	f022 0203 	bic.w	r2, r2, #3
 8010526:	3204      	adds	r2, #4
 8010528:	f104 0115 	add.w	r1, r4, #21
 801052c:	428f      	cmp	r7, r1
 801052e:	bf38      	it	cc
 8010530:	2204      	movcc	r2, #4
 8010532:	9201      	str	r2, [sp, #4]
 8010534:	9a02      	ldr	r2, [sp, #8]
 8010536:	9303      	str	r3, [sp, #12]
 8010538:	429a      	cmp	r2, r3
 801053a:	d80c      	bhi.n	8010556 <__multiply+0x9e>
 801053c:	2e00      	cmp	r6, #0
 801053e:	dd03      	ble.n	8010548 <__multiply+0x90>
 8010540:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010544:	2b00      	cmp	r3, #0
 8010546:	d05a      	beq.n	80105fe <__multiply+0x146>
 8010548:	6106      	str	r6, [r0, #16]
 801054a:	b005      	add	sp, #20
 801054c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010550:	f843 2b04 	str.w	r2, [r3], #4
 8010554:	e7d8      	b.n	8010508 <__multiply+0x50>
 8010556:	f8b3 a000 	ldrh.w	sl, [r3]
 801055a:	f1ba 0f00 	cmp.w	sl, #0
 801055e:	d024      	beq.n	80105aa <__multiply+0xf2>
 8010560:	f104 0e14 	add.w	lr, r4, #20
 8010564:	46a9      	mov	r9, r5
 8010566:	f04f 0c00 	mov.w	ip, #0
 801056a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801056e:	f8d9 1000 	ldr.w	r1, [r9]
 8010572:	fa1f fb82 	uxth.w	fp, r2
 8010576:	b289      	uxth	r1, r1
 8010578:	fb0a 110b 	mla	r1, sl, fp, r1
 801057c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010580:	f8d9 2000 	ldr.w	r2, [r9]
 8010584:	4461      	add	r1, ip
 8010586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801058a:	fb0a c20b 	mla	r2, sl, fp, ip
 801058e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010592:	b289      	uxth	r1, r1
 8010594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010598:	4577      	cmp	r7, lr
 801059a:	f849 1b04 	str.w	r1, [r9], #4
 801059e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105a2:	d8e2      	bhi.n	801056a <__multiply+0xb2>
 80105a4:	9a01      	ldr	r2, [sp, #4]
 80105a6:	f845 c002 	str.w	ip, [r5, r2]
 80105aa:	9a03      	ldr	r2, [sp, #12]
 80105ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80105b0:	3304      	adds	r3, #4
 80105b2:	f1b9 0f00 	cmp.w	r9, #0
 80105b6:	d020      	beq.n	80105fa <__multiply+0x142>
 80105b8:	6829      	ldr	r1, [r5, #0]
 80105ba:	f104 0c14 	add.w	ip, r4, #20
 80105be:	46ae      	mov	lr, r5
 80105c0:	f04f 0a00 	mov.w	sl, #0
 80105c4:	f8bc b000 	ldrh.w	fp, [ip]
 80105c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80105cc:	fb09 220b 	mla	r2, r9, fp, r2
 80105d0:	4492      	add	sl, r2
 80105d2:	b289      	uxth	r1, r1
 80105d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80105d8:	f84e 1b04 	str.w	r1, [lr], #4
 80105dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80105e0:	f8be 1000 	ldrh.w	r1, [lr]
 80105e4:	0c12      	lsrs	r2, r2, #16
 80105e6:	fb09 1102 	mla	r1, r9, r2, r1
 80105ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80105ee:	4567      	cmp	r7, ip
 80105f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80105f4:	d8e6      	bhi.n	80105c4 <__multiply+0x10c>
 80105f6:	9a01      	ldr	r2, [sp, #4]
 80105f8:	50a9      	str	r1, [r5, r2]
 80105fa:	3504      	adds	r5, #4
 80105fc:	e79a      	b.n	8010534 <__multiply+0x7c>
 80105fe:	3e01      	subs	r6, #1
 8010600:	e79c      	b.n	801053c <__multiply+0x84>
 8010602:	bf00      	nop
 8010604:	08012668 	.word	0x08012668
 8010608:	0801270b 	.word	0x0801270b

0801060c <__pow5mult>:
 801060c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010610:	4615      	mov	r5, r2
 8010612:	f012 0203 	ands.w	r2, r2, #3
 8010616:	4606      	mov	r6, r0
 8010618:	460f      	mov	r7, r1
 801061a:	d007      	beq.n	801062c <__pow5mult+0x20>
 801061c:	4c25      	ldr	r4, [pc, #148]	; (80106b4 <__pow5mult+0xa8>)
 801061e:	3a01      	subs	r2, #1
 8010620:	2300      	movs	r3, #0
 8010622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010626:	f7ff fe51 	bl	80102cc <__multadd>
 801062a:	4607      	mov	r7, r0
 801062c:	10ad      	asrs	r5, r5, #2
 801062e:	d03d      	beq.n	80106ac <__pow5mult+0xa0>
 8010630:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010632:	b97c      	cbnz	r4, 8010654 <__pow5mult+0x48>
 8010634:	2010      	movs	r0, #16
 8010636:	f000 fbb9 	bl	8010dac <malloc>
 801063a:	4602      	mov	r2, r0
 801063c:	6270      	str	r0, [r6, #36]	; 0x24
 801063e:	b928      	cbnz	r0, 801064c <__pow5mult+0x40>
 8010640:	4b1d      	ldr	r3, [pc, #116]	; (80106b8 <__pow5mult+0xac>)
 8010642:	481e      	ldr	r0, [pc, #120]	; (80106bc <__pow5mult+0xb0>)
 8010644:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010648:	f000 fb80 	bl	8010d4c <__assert_func>
 801064c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010650:	6004      	str	r4, [r0, #0]
 8010652:	60c4      	str	r4, [r0, #12]
 8010654:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801065c:	b94c      	cbnz	r4, 8010672 <__pow5mult+0x66>
 801065e:	f240 2171 	movw	r1, #625	; 0x271
 8010662:	4630      	mov	r0, r6
 8010664:	f7ff ff12 	bl	801048c <__i2b>
 8010668:	2300      	movs	r3, #0
 801066a:	f8c8 0008 	str.w	r0, [r8, #8]
 801066e:	4604      	mov	r4, r0
 8010670:	6003      	str	r3, [r0, #0]
 8010672:	f04f 0900 	mov.w	r9, #0
 8010676:	07eb      	lsls	r3, r5, #31
 8010678:	d50a      	bpl.n	8010690 <__pow5mult+0x84>
 801067a:	4639      	mov	r1, r7
 801067c:	4622      	mov	r2, r4
 801067e:	4630      	mov	r0, r6
 8010680:	f7ff ff1a 	bl	80104b8 <__multiply>
 8010684:	4639      	mov	r1, r7
 8010686:	4680      	mov	r8, r0
 8010688:	4630      	mov	r0, r6
 801068a:	f7ff fdfd 	bl	8010288 <_Bfree>
 801068e:	4647      	mov	r7, r8
 8010690:	106d      	asrs	r5, r5, #1
 8010692:	d00b      	beq.n	80106ac <__pow5mult+0xa0>
 8010694:	6820      	ldr	r0, [r4, #0]
 8010696:	b938      	cbnz	r0, 80106a8 <__pow5mult+0x9c>
 8010698:	4622      	mov	r2, r4
 801069a:	4621      	mov	r1, r4
 801069c:	4630      	mov	r0, r6
 801069e:	f7ff ff0b 	bl	80104b8 <__multiply>
 80106a2:	6020      	str	r0, [r4, #0]
 80106a4:	f8c0 9000 	str.w	r9, [r0]
 80106a8:	4604      	mov	r4, r0
 80106aa:	e7e4      	b.n	8010676 <__pow5mult+0x6a>
 80106ac:	4638      	mov	r0, r7
 80106ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106b2:	bf00      	nop
 80106b4:	08012858 	.word	0x08012858
 80106b8:	080126f4 	.word	0x080126f4
 80106bc:	0801270b 	.word	0x0801270b

080106c0 <__lshift>:
 80106c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106c4:	460c      	mov	r4, r1
 80106c6:	6849      	ldr	r1, [r1, #4]
 80106c8:	6923      	ldr	r3, [r4, #16]
 80106ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106ce:	68a3      	ldr	r3, [r4, #8]
 80106d0:	4607      	mov	r7, r0
 80106d2:	4691      	mov	r9, r2
 80106d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106d8:	f108 0601 	add.w	r6, r8, #1
 80106dc:	42b3      	cmp	r3, r6
 80106de:	db0b      	blt.n	80106f8 <__lshift+0x38>
 80106e0:	4638      	mov	r0, r7
 80106e2:	f7ff fd91 	bl	8010208 <_Balloc>
 80106e6:	4605      	mov	r5, r0
 80106e8:	b948      	cbnz	r0, 80106fe <__lshift+0x3e>
 80106ea:	4602      	mov	r2, r0
 80106ec:	4b2a      	ldr	r3, [pc, #168]	; (8010798 <__lshift+0xd8>)
 80106ee:	482b      	ldr	r0, [pc, #172]	; (801079c <__lshift+0xdc>)
 80106f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80106f4:	f000 fb2a 	bl	8010d4c <__assert_func>
 80106f8:	3101      	adds	r1, #1
 80106fa:	005b      	lsls	r3, r3, #1
 80106fc:	e7ee      	b.n	80106dc <__lshift+0x1c>
 80106fe:	2300      	movs	r3, #0
 8010700:	f100 0114 	add.w	r1, r0, #20
 8010704:	f100 0210 	add.w	r2, r0, #16
 8010708:	4618      	mov	r0, r3
 801070a:	4553      	cmp	r3, sl
 801070c:	db37      	blt.n	801077e <__lshift+0xbe>
 801070e:	6920      	ldr	r0, [r4, #16]
 8010710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010714:	f104 0314 	add.w	r3, r4, #20
 8010718:	f019 091f 	ands.w	r9, r9, #31
 801071c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010720:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010724:	d02f      	beq.n	8010786 <__lshift+0xc6>
 8010726:	f1c9 0e20 	rsb	lr, r9, #32
 801072a:	468a      	mov	sl, r1
 801072c:	f04f 0c00 	mov.w	ip, #0
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	fa02 f209 	lsl.w	r2, r2, r9
 8010736:	ea42 020c 	orr.w	r2, r2, ip
 801073a:	f84a 2b04 	str.w	r2, [sl], #4
 801073e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010742:	4298      	cmp	r0, r3
 8010744:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010748:	d8f2      	bhi.n	8010730 <__lshift+0x70>
 801074a:	1b03      	subs	r3, r0, r4
 801074c:	3b15      	subs	r3, #21
 801074e:	f023 0303 	bic.w	r3, r3, #3
 8010752:	3304      	adds	r3, #4
 8010754:	f104 0215 	add.w	r2, r4, #21
 8010758:	4290      	cmp	r0, r2
 801075a:	bf38      	it	cc
 801075c:	2304      	movcc	r3, #4
 801075e:	f841 c003 	str.w	ip, [r1, r3]
 8010762:	f1bc 0f00 	cmp.w	ip, #0
 8010766:	d001      	beq.n	801076c <__lshift+0xac>
 8010768:	f108 0602 	add.w	r6, r8, #2
 801076c:	3e01      	subs	r6, #1
 801076e:	4638      	mov	r0, r7
 8010770:	612e      	str	r6, [r5, #16]
 8010772:	4621      	mov	r1, r4
 8010774:	f7ff fd88 	bl	8010288 <_Bfree>
 8010778:	4628      	mov	r0, r5
 801077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801077e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010782:	3301      	adds	r3, #1
 8010784:	e7c1      	b.n	801070a <__lshift+0x4a>
 8010786:	3904      	subs	r1, #4
 8010788:	f853 2b04 	ldr.w	r2, [r3], #4
 801078c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010790:	4298      	cmp	r0, r3
 8010792:	d8f9      	bhi.n	8010788 <__lshift+0xc8>
 8010794:	e7ea      	b.n	801076c <__lshift+0xac>
 8010796:	bf00      	nop
 8010798:	08012668 	.word	0x08012668
 801079c:	0801270b 	.word	0x0801270b

080107a0 <__mcmp>:
 80107a0:	b530      	push	{r4, r5, lr}
 80107a2:	6902      	ldr	r2, [r0, #16]
 80107a4:	690c      	ldr	r4, [r1, #16]
 80107a6:	1b12      	subs	r2, r2, r4
 80107a8:	d10e      	bne.n	80107c8 <__mcmp+0x28>
 80107aa:	f100 0314 	add.w	r3, r0, #20
 80107ae:	3114      	adds	r1, #20
 80107b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107c0:	42a5      	cmp	r5, r4
 80107c2:	d003      	beq.n	80107cc <__mcmp+0x2c>
 80107c4:	d305      	bcc.n	80107d2 <__mcmp+0x32>
 80107c6:	2201      	movs	r2, #1
 80107c8:	4610      	mov	r0, r2
 80107ca:	bd30      	pop	{r4, r5, pc}
 80107cc:	4283      	cmp	r3, r0
 80107ce:	d3f3      	bcc.n	80107b8 <__mcmp+0x18>
 80107d0:	e7fa      	b.n	80107c8 <__mcmp+0x28>
 80107d2:	f04f 32ff 	mov.w	r2, #4294967295
 80107d6:	e7f7      	b.n	80107c8 <__mcmp+0x28>

080107d8 <__mdiff>:
 80107d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107dc:	460c      	mov	r4, r1
 80107de:	4606      	mov	r6, r0
 80107e0:	4611      	mov	r1, r2
 80107e2:	4620      	mov	r0, r4
 80107e4:	4690      	mov	r8, r2
 80107e6:	f7ff ffdb 	bl	80107a0 <__mcmp>
 80107ea:	1e05      	subs	r5, r0, #0
 80107ec:	d110      	bne.n	8010810 <__mdiff+0x38>
 80107ee:	4629      	mov	r1, r5
 80107f0:	4630      	mov	r0, r6
 80107f2:	f7ff fd09 	bl	8010208 <_Balloc>
 80107f6:	b930      	cbnz	r0, 8010806 <__mdiff+0x2e>
 80107f8:	4b3a      	ldr	r3, [pc, #232]	; (80108e4 <__mdiff+0x10c>)
 80107fa:	4602      	mov	r2, r0
 80107fc:	f240 2132 	movw	r1, #562	; 0x232
 8010800:	4839      	ldr	r0, [pc, #228]	; (80108e8 <__mdiff+0x110>)
 8010802:	f000 faa3 	bl	8010d4c <__assert_func>
 8010806:	2301      	movs	r3, #1
 8010808:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801080c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010810:	bfa4      	itt	ge
 8010812:	4643      	movge	r3, r8
 8010814:	46a0      	movge	r8, r4
 8010816:	4630      	mov	r0, r6
 8010818:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801081c:	bfa6      	itte	ge
 801081e:	461c      	movge	r4, r3
 8010820:	2500      	movge	r5, #0
 8010822:	2501      	movlt	r5, #1
 8010824:	f7ff fcf0 	bl	8010208 <_Balloc>
 8010828:	b920      	cbnz	r0, 8010834 <__mdiff+0x5c>
 801082a:	4b2e      	ldr	r3, [pc, #184]	; (80108e4 <__mdiff+0x10c>)
 801082c:	4602      	mov	r2, r0
 801082e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010832:	e7e5      	b.n	8010800 <__mdiff+0x28>
 8010834:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010838:	6926      	ldr	r6, [r4, #16]
 801083a:	60c5      	str	r5, [r0, #12]
 801083c:	f104 0914 	add.w	r9, r4, #20
 8010840:	f108 0514 	add.w	r5, r8, #20
 8010844:	f100 0e14 	add.w	lr, r0, #20
 8010848:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801084c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010850:	f108 0210 	add.w	r2, r8, #16
 8010854:	46f2      	mov	sl, lr
 8010856:	2100      	movs	r1, #0
 8010858:	f859 3b04 	ldr.w	r3, [r9], #4
 801085c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010860:	fa1f f883 	uxth.w	r8, r3
 8010864:	fa11 f18b 	uxtah	r1, r1, fp
 8010868:	0c1b      	lsrs	r3, r3, #16
 801086a:	eba1 0808 	sub.w	r8, r1, r8
 801086e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010872:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010876:	fa1f f888 	uxth.w	r8, r8
 801087a:	1419      	asrs	r1, r3, #16
 801087c:	454e      	cmp	r6, r9
 801087e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010882:	f84a 3b04 	str.w	r3, [sl], #4
 8010886:	d8e7      	bhi.n	8010858 <__mdiff+0x80>
 8010888:	1b33      	subs	r3, r6, r4
 801088a:	3b15      	subs	r3, #21
 801088c:	f023 0303 	bic.w	r3, r3, #3
 8010890:	3304      	adds	r3, #4
 8010892:	3415      	adds	r4, #21
 8010894:	42a6      	cmp	r6, r4
 8010896:	bf38      	it	cc
 8010898:	2304      	movcc	r3, #4
 801089a:	441d      	add	r5, r3
 801089c:	4473      	add	r3, lr
 801089e:	469e      	mov	lr, r3
 80108a0:	462e      	mov	r6, r5
 80108a2:	4566      	cmp	r6, ip
 80108a4:	d30e      	bcc.n	80108c4 <__mdiff+0xec>
 80108a6:	f10c 0203 	add.w	r2, ip, #3
 80108aa:	1b52      	subs	r2, r2, r5
 80108ac:	f022 0203 	bic.w	r2, r2, #3
 80108b0:	3d03      	subs	r5, #3
 80108b2:	45ac      	cmp	ip, r5
 80108b4:	bf38      	it	cc
 80108b6:	2200      	movcc	r2, #0
 80108b8:	441a      	add	r2, r3
 80108ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80108be:	b17b      	cbz	r3, 80108e0 <__mdiff+0x108>
 80108c0:	6107      	str	r7, [r0, #16]
 80108c2:	e7a3      	b.n	801080c <__mdiff+0x34>
 80108c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80108c8:	fa11 f288 	uxtah	r2, r1, r8
 80108cc:	1414      	asrs	r4, r2, #16
 80108ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80108d2:	b292      	uxth	r2, r2
 80108d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80108d8:	f84e 2b04 	str.w	r2, [lr], #4
 80108dc:	1421      	asrs	r1, r4, #16
 80108de:	e7e0      	b.n	80108a2 <__mdiff+0xca>
 80108e0:	3f01      	subs	r7, #1
 80108e2:	e7ea      	b.n	80108ba <__mdiff+0xe2>
 80108e4:	08012668 	.word	0x08012668
 80108e8:	0801270b 	.word	0x0801270b

080108ec <__ulp>:
 80108ec:	b082      	sub	sp, #8
 80108ee:	ed8d 0b00 	vstr	d0, [sp]
 80108f2:	9b01      	ldr	r3, [sp, #4]
 80108f4:	4912      	ldr	r1, [pc, #72]	; (8010940 <__ulp+0x54>)
 80108f6:	4019      	ands	r1, r3
 80108f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80108fc:	2900      	cmp	r1, #0
 80108fe:	dd05      	ble.n	801090c <__ulp+0x20>
 8010900:	2200      	movs	r2, #0
 8010902:	460b      	mov	r3, r1
 8010904:	ec43 2b10 	vmov	d0, r2, r3
 8010908:	b002      	add	sp, #8
 801090a:	4770      	bx	lr
 801090c:	4249      	negs	r1, r1
 801090e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010912:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010916:	f04f 0200 	mov.w	r2, #0
 801091a:	f04f 0300 	mov.w	r3, #0
 801091e:	da04      	bge.n	801092a <__ulp+0x3e>
 8010920:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010924:	fa41 f300 	asr.w	r3, r1, r0
 8010928:	e7ec      	b.n	8010904 <__ulp+0x18>
 801092a:	f1a0 0114 	sub.w	r1, r0, #20
 801092e:	291e      	cmp	r1, #30
 8010930:	bfda      	itte	le
 8010932:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010936:	fa20 f101 	lsrle.w	r1, r0, r1
 801093a:	2101      	movgt	r1, #1
 801093c:	460a      	mov	r2, r1
 801093e:	e7e1      	b.n	8010904 <__ulp+0x18>
 8010940:	7ff00000 	.word	0x7ff00000

08010944 <__b2d>:
 8010944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010946:	6905      	ldr	r5, [r0, #16]
 8010948:	f100 0714 	add.w	r7, r0, #20
 801094c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010950:	1f2e      	subs	r6, r5, #4
 8010952:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010956:	4620      	mov	r0, r4
 8010958:	f7ff fd48 	bl	80103ec <__hi0bits>
 801095c:	f1c0 0320 	rsb	r3, r0, #32
 8010960:	280a      	cmp	r0, #10
 8010962:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80109e0 <__b2d+0x9c>
 8010966:	600b      	str	r3, [r1, #0]
 8010968:	dc14      	bgt.n	8010994 <__b2d+0x50>
 801096a:	f1c0 0e0b 	rsb	lr, r0, #11
 801096e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010972:	42b7      	cmp	r7, r6
 8010974:	ea41 030c 	orr.w	r3, r1, ip
 8010978:	bf34      	ite	cc
 801097a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801097e:	2100      	movcs	r1, #0
 8010980:	3015      	adds	r0, #21
 8010982:	fa04 f000 	lsl.w	r0, r4, r0
 8010986:	fa21 f10e 	lsr.w	r1, r1, lr
 801098a:	ea40 0201 	orr.w	r2, r0, r1
 801098e:	ec43 2b10 	vmov	d0, r2, r3
 8010992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010994:	42b7      	cmp	r7, r6
 8010996:	bf3a      	itte	cc
 8010998:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801099c:	f1a5 0608 	subcc.w	r6, r5, #8
 80109a0:	2100      	movcs	r1, #0
 80109a2:	380b      	subs	r0, #11
 80109a4:	d017      	beq.n	80109d6 <__b2d+0x92>
 80109a6:	f1c0 0c20 	rsb	ip, r0, #32
 80109aa:	fa04 f500 	lsl.w	r5, r4, r0
 80109ae:	42be      	cmp	r6, r7
 80109b0:	fa21 f40c 	lsr.w	r4, r1, ip
 80109b4:	ea45 0504 	orr.w	r5, r5, r4
 80109b8:	bf8c      	ite	hi
 80109ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80109be:	2400      	movls	r4, #0
 80109c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80109c4:	fa01 f000 	lsl.w	r0, r1, r0
 80109c8:	fa24 f40c 	lsr.w	r4, r4, ip
 80109cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109d0:	ea40 0204 	orr.w	r2, r0, r4
 80109d4:	e7db      	b.n	801098e <__b2d+0x4a>
 80109d6:	ea44 030c 	orr.w	r3, r4, ip
 80109da:	460a      	mov	r2, r1
 80109dc:	e7d7      	b.n	801098e <__b2d+0x4a>
 80109de:	bf00      	nop
 80109e0:	3ff00000 	.word	0x3ff00000

080109e4 <__d2b>:
 80109e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109e8:	4689      	mov	r9, r1
 80109ea:	2101      	movs	r1, #1
 80109ec:	ec57 6b10 	vmov	r6, r7, d0
 80109f0:	4690      	mov	r8, r2
 80109f2:	f7ff fc09 	bl	8010208 <_Balloc>
 80109f6:	4604      	mov	r4, r0
 80109f8:	b930      	cbnz	r0, 8010a08 <__d2b+0x24>
 80109fa:	4602      	mov	r2, r0
 80109fc:	4b25      	ldr	r3, [pc, #148]	; (8010a94 <__d2b+0xb0>)
 80109fe:	4826      	ldr	r0, [pc, #152]	; (8010a98 <__d2b+0xb4>)
 8010a00:	f240 310a 	movw	r1, #778	; 0x30a
 8010a04:	f000 f9a2 	bl	8010d4c <__assert_func>
 8010a08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010a0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a10:	bb35      	cbnz	r5, 8010a60 <__d2b+0x7c>
 8010a12:	2e00      	cmp	r6, #0
 8010a14:	9301      	str	r3, [sp, #4]
 8010a16:	d028      	beq.n	8010a6a <__d2b+0x86>
 8010a18:	4668      	mov	r0, sp
 8010a1a:	9600      	str	r6, [sp, #0]
 8010a1c:	f7ff fd06 	bl	801042c <__lo0bits>
 8010a20:	9900      	ldr	r1, [sp, #0]
 8010a22:	b300      	cbz	r0, 8010a66 <__d2b+0x82>
 8010a24:	9a01      	ldr	r2, [sp, #4]
 8010a26:	f1c0 0320 	rsb	r3, r0, #32
 8010a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a2e:	430b      	orrs	r3, r1
 8010a30:	40c2      	lsrs	r2, r0
 8010a32:	6163      	str	r3, [r4, #20]
 8010a34:	9201      	str	r2, [sp, #4]
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	61a3      	str	r3, [r4, #24]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	bf14      	ite	ne
 8010a3e:	2202      	movne	r2, #2
 8010a40:	2201      	moveq	r2, #1
 8010a42:	6122      	str	r2, [r4, #16]
 8010a44:	b1d5      	cbz	r5, 8010a7c <__d2b+0x98>
 8010a46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010a4a:	4405      	add	r5, r0
 8010a4c:	f8c9 5000 	str.w	r5, [r9]
 8010a50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a54:	f8c8 0000 	str.w	r0, [r8]
 8010a58:	4620      	mov	r0, r4
 8010a5a:	b003      	add	sp, #12
 8010a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a64:	e7d5      	b.n	8010a12 <__d2b+0x2e>
 8010a66:	6161      	str	r1, [r4, #20]
 8010a68:	e7e5      	b.n	8010a36 <__d2b+0x52>
 8010a6a:	a801      	add	r0, sp, #4
 8010a6c:	f7ff fcde 	bl	801042c <__lo0bits>
 8010a70:	9b01      	ldr	r3, [sp, #4]
 8010a72:	6163      	str	r3, [r4, #20]
 8010a74:	2201      	movs	r2, #1
 8010a76:	6122      	str	r2, [r4, #16]
 8010a78:	3020      	adds	r0, #32
 8010a7a:	e7e3      	b.n	8010a44 <__d2b+0x60>
 8010a7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a84:	f8c9 0000 	str.w	r0, [r9]
 8010a88:	6918      	ldr	r0, [r3, #16]
 8010a8a:	f7ff fcaf 	bl	80103ec <__hi0bits>
 8010a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a92:	e7df      	b.n	8010a54 <__d2b+0x70>
 8010a94:	08012668 	.word	0x08012668
 8010a98:	0801270b 	.word	0x0801270b

08010a9c <__ratio>:
 8010a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa0:	4688      	mov	r8, r1
 8010aa2:	4669      	mov	r1, sp
 8010aa4:	4681      	mov	r9, r0
 8010aa6:	f7ff ff4d 	bl	8010944 <__b2d>
 8010aaa:	a901      	add	r1, sp, #4
 8010aac:	4640      	mov	r0, r8
 8010aae:	ec55 4b10 	vmov	r4, r5, d0
 8010ab2:	ee10 aa10 	vmov	sl, s0
 8010ab6:	f7ff ff45 	bl	8010944 <__b2d>
 8010aba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010abe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010ac2:	1a59      	subs	r1, r3, r1
 8010ac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010ace:	ec57 6b10 	vmov	r6, r7, d0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	bfd6      	itet	le
 8010ad6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ada:	462a      	movgt	r2, r5
 8010adc:	463a      	movle	r2, r7
 8010ade:	46ab      	mov	fp, r5
 8010ae0:	bfd6      	itet	le
 8010ae2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010ae6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010aea:	ee00 3a90 	vmovle	s1, r3
 8010aee:	ec4b ab17 	vmov	d7, sl, fp
 8010af2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010af6:	b003      	add	sp, #12
 8010af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010afc <__copybits>:
 8010afc:	3901      	subs	r1, #1
 8010afe:	b570      	push	{r4, r5, r6, lr}
 8010b00:	1149      	asrs	r1, r1, #5
 8010b02:	6914      	ldr	r4, [r2, #16]
 8010b04:	3101      	adds	r1, #1
 8010b06:	f102 0314 	add.w	r3, r2, #20
 8010b0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010b0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010b12:	1f05      	subs	r5, r0, #4
 8010b14:	42a3      	cmp	r3, r4
 8010b16:	d30c      	bcc.n	8010b32 <__copybits+0x36>
 8010b18:	1aa3      	subs	r3, r4, r2
 8010b1a:	3b11      	subs	r3, #17
 8010b1c:	f023 0303 	bic.w	r3, r3, #3
 8010b20:	3211      	adds	r2, #17
 8010b22:	42a2      	cmp	r2, r4
 8010b24:	bf88      	it	hi
 8010b26:	2300      	movhi	r3, #0
 8010b28:	4418      	add	r0, r3
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	4288      	cmp	r0, r1
 8010b2e:	d305      	bcc.n	8010b3c <__copybits+0x40>
 8010b30:	bd70      	pop	{r4, r5, r6, pc}
 8010b32:	f853 6b04 	ldr.w	r6, [r3], #4
 8010b36:	f845 6f04 	str.w	r6, [r5, #4]!
 8010b3a:	e7eb      	b.n	8010b14 <__copybits+0x18>
 8010b3c:	f840 3b04 	str.w	r3, [r0], #4
 8010b40:	e7f4      	b.n	8010b2c <__copybits+0x30>

08010b42 <__any_on>:
 8010b42:	f100 0214 	add.w	r2, r0, #20
 8010b46:	6900      	ldr	r0, [r0, #16]
 8010b48:	114b      	asrs	r3, r1, #5
 8010b4a:	4298      	cmp	r0, r3
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	db11      	blt.n	8010b74 <__any_on+0x32>
 8010b50:	dd0a      	ble.n	8010b68 <__any_on+0x26>
 8010b52:	f011 011f 	ands.w	r1, r1, #31
 8010b56:	d007      	beq.n	8010b68 <__any_on+0x26>
 8010b58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b5c:	fa24 f001 	lsr.w	r0, r4, r1
 8010b60:	fa00 f101 	lsl.w	r1, r0, r1
 8010b64:	428c      	cmp	r4, r1
 8010b66:	d10b      	bne.n	8010b80 <__any_on+0x3e>
 8010b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d803      	bhi.n	8010b78 <__any_on+0x36>
 8010b70:	2000      	movs	r0, #0
 8010b72:	bd10      	pop	{r4, pc}
 8010b74:	4603      	mov	r3, r0
 8010b76:	e7f7      	b.n	8010b68 <__any_on+0x26>
 8010b78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b7c:	2900      	cmp	r1, #0
 8010b7e:	d0f5      	beq.n	8010b6c <__any_on+0x2a>
 8010b80:	2001      	movs	r0, #1
 8010b82:	e7f6      	b.n	8010b72 <__any_on+0x30>

08010b84 <_calloc_r>:
 8010b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b86:	fba1 2402 	umull	r2, r4, r1, r2
 8010b8a:	b94c      	cbnz	r4, 8010ba0 <_calloc_r+0x1c>
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	9201      	str	r2, [sp, #4]
 8010b90:	f000 f82e 	bl	8010bf0 <_malloc_r>
 8010b94:	9a01      	ldr	r2, [sp, #4]
 8010b96:	4605      	mov	r5, r0
 8010b98:	b930      	cbnz	r0, 8010ba8 <_calloc_r+0x24>
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	b003      	add	sp, #12
 8010b9e:	bd30      	pop	{r4, r5, pc}
 8010ba0:	220c      	movs	r2, #12
 8010ba2:	6002      	str	r2, [r0, #0]
 8010ba4:	2500      	movs	r5, #0
 8010ba6:	e7f8      	b.n	8010b9a <_calloc_r+0x16>
 8010ba8:	4621      	mov	r1, r4
 8010baa:	f7fe f9c5 	bl	800ef38 <memset>
 8010bae:	e7f4      	b.n	8010b9a <_calloc_r+0x16>

08010bb0 <sbrk_aligned>:
 8010bb0:	b570      	push	{r4, r5, r6, lr}
 8010bb2:	4e0e      	ldr	r6, [pc, #56]	; (8010bec <sbrk_aligned+0x3c>)
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	6831      	ldr	r1, [r6, #0]
 8010bb8:	4605      	mov	r5, r0
 8010bba:	b911      	cbnz	r1, 8010bc2 <sbrk_aligned+0x12>
 8010bbc:	f000 f894 	bl	8010ce8 <_sbrk_r>
 8010bc0:	6030      	str	r0, [r6, #0]
 8010bc2:	4621      	mov	r1, r4
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	f000 f88f 	bl	8010ce8 <_sbrk_r>
 8010bca:	1c43      	adds	r3, r0, #1
 8010bcc:	d00a      	beq.n	8010be4 <sbrk_aligned+0x34>
 8010bce:	1cc4      	adds	r4, r0, #3
 8010bd0:	f024 0403 	bic.w	r4, r4, #3
 8010bd4:	42a0      	cmp	r0, r4
 8010bd6:	d007      	beq.n	8010be8 <sbrk_aligned+0x38>
 8010bd8:	1a21      	subs	r1, r4, r0
 8010bda:	4628      	mov	r0, r5
 8010bdc:	f000 f884 	bl	8010ce8 <_sbrk_r>
 8010be0:	3001      	adds	r0, #1
 8010be2:	d101      	bne.n	8010be8 <sbrk_aligned+0x38>
 8010be4:	f04f 34ff 	mov.w	r4, #4294967295
 8010be8:	4620      	mov	r0, r4
 8010bea:	bd70      	pop	{r4, r5, r6, pc}
 8010bec:	24000d88 	.word	0x24000d88

08010bf0 <_malloc_r>:
 8010bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf4:	1ccd      	adds	r5, r1, #3
 8010bf6:	f025 0503 	bic.w	r5, r5, #3
 8010bfa:	3508      	adds	r5, #8
 8010bfc:	2d0c      	cmp	r5, #12
 8010bfe:	bf38      	it	cc
 8010c00:	250c      	movcc	r5, #12
 8010c02:	2d00      	cmp	r5, #0
 8010c04:	4607      	mov	r7, r0
 8010c06:	db01      	blt.n	8010c0c <_malloc_r+0x1c>
 8010c08:	42a9      	cmp	r1, r5
 8010c0a:	d905      	bls.n	8010c18 <_malloc_r+0x28>
 8010c0c:	230c      	movs	r3, #12
 8010c0e:	603b      	str	r3, [r7, #0]
 8010c10:	2600      	movs	r6, #0
 8010c12:	4630      	mov	r0, r6
 8010c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c18:	4e2e      	ldr	r6, [pc, #184]	; (8010cd4 <_malloc_r+0xe4>)
 8010c1a:	f000 f8cf 	bl	8010dbc <__malloc_lock>
 8010c1e:	6833      	ldr	r3, [r6, #0]
 8010c20:	461c      	mov	r4, r3
 8010c22:	bb34      	cbnz	r4, 8010c72 <_malloc_r+0x82>
 8010c24:	4629      	mov	r1, r5
 8010c26:	4638      	mov	r0, r7
 8010c28:	f7ff ffc2 	bl	8010bb0 <sbrk_aligned>
 8010c2c:	1c43      	adds	r3, r0, #1
 8010c2e:	4604      	mov	r4, r0
 8010c30:	d14d      	bne.n	8010cce <_malloc_r+0xde>
 8010c32:	6834      	ldr	r4, [r6, #0]
 8010c34:	4626      	mov	r6, r4
 8010c36:	2e00      	cmp	r6, #0
 8010c38:	d140      	bne.n	8010cbc <_malloc_r+0xcc>
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	4631      	mov	r1, r6
 8010c3e:	4638      	mov	r0, r7
 8010c40:	eb04 0803 	add.w	r8, r4, r3
 8010c44:	f000 f850 	bl	8010ce8 <_sbrk_r>
 8010c48:	4580      	cmp	r8, r0
 8010c4a:	d13a      	bne.n	8010cc2 <_malloc_r+0xd2>
 8010c4c:	6821      	ldr	r1, [r4, #0]
 8010c4e:	3503      	adds	r5, #3
 8010c50:	1a6d      	subs	r5, r5, r1
 8010c52:	f025 0503 	bic.w	r5, r5, #3
 8010c56:	3508      	adds	r5, #8
 8010c58:	2d0c      	cmp	r5, #12
 8010c5a:	bf38      	it	cc
 8010c5c:	250c      	movcc	r5, #12
 8010c5e:	4629      	mov	r1, r5
 8010c60:	4638      	mov	r0, r7
 8010c62:	f7ff ffa5 	bl	8010bb0 <sbrk_aligned>
 8010c66:	3001      	adds	r0, #1
 8010c68:	d02b      	beq.n	8010cc2 <_malloc_r+0xd2>
 8010c6a:	6823      	ldr	r3, [r4, #0]
 8010c6c:	442b      	add	r3, r5
 8010c6e:	6023      	str	r3, [r4, #0]
 8010c70:	e00e      	b.n	8010c90 <_malloc_r+0xa0>
 8010c72:	6822      	ldr	r2, [r4, #0]
 8010c74:	1b52      	subs	r2, r2, r5
 8010c76:	d41e      	bmi.n	8010cb6 <_malloc_r+0xc6>
 8010c78:	2a0b      	cmp	r2, #11
 8010c7a:	d916      	bls.n	8010caa <_malloc_r+0xba>
 8010c7c:	1961      	adds	r1, r4, r5
 8010c7e:	42a3      	cmp	r3, r4
 8010c80:	6025      	str	r5, [r4, #0]
 8010c82:	bf18      	it	ne
 8010c84:	6059      	strne	r1, [r3, #4]
 8010c86:	6863      	ldr	r3, [r4, #4]
 8010c88:	bf08      	it	eq
 8010c8a:	6031      	streq	r1, [r6, #0]
 8010c8c:	5162      	str	r2, [r4, r5]
 8010c8e:	604b      	str	r3, [r1, #4]
 8010c90:	4638      	mov	r0, r7
 8010c92:	f104 060b 	add.w	r6, r4, #11
 8010c96:	f000 f897 	bl	8010dc8 <__malloc_unlock>
 8010c9a:	f026 0607 	bic.w	r6, r6, #7
 8010c9e:	1d23      	adds	r3, r4, #4
 8010ca0:	1af2      	subs	r2, r6, r3
 8010ca2:	d0b6      	beq.n	8010c12 <_malloc_r+0x22>
 8010ca4:	1b9b      	subs	r3, r3, r6
 8010ca6:	50a3      	str	r3, [r4, r2]
 8010ca8:	e7b3      	b.n	8010c12 <_malloc_r+0x22>
 8010caa:	6862      	ldr	r2, [r4, #4]
 8010cac:	42a3      	cmp	r3, r4
 8010cae:	bf0c      	ite	eq
 8010cb0:	6032      	streq	r2, [r6, #0]
 8010cb2:	605a      	strne	r2, [r3, #4]
 8010cb4:	e7ec      	b.n	8010c90 <_malloc_r+0xa0>
 8010cb6:	4623      	mov	r3, r4
 8010cb8:	6864      	ldr	r4, [r4, #4]
 8010cba:	e7b2      	b.n	8010c22 <_malloc_r+0x32>
 8010cbc:	4634      	mov	r4, r6
 8010cbe:	6876      	ldr	r6, [r6, #4]
 8010cc0:	e7b9      	b.n	8010c36 <_malloc_r+0x46>
 8010cc2:	230c      	movs	r3, #12
 8010cc4:	603b      	str	r3, [r7, #0]
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	f000 f87e 	bl	8010dc8 <__malloc_unlock>
 8010ccc:	e7a1      	b.n	8010c12 <_malloc_r+0x22>
 8010cce:	6025      	str	r5, [r4, #0]
 8010cd0:	e7de      	b.n	8010c90 <_malloc_r+0xa0>
 8010cd2:	bf00      	nop
 8010cd4:	24000d84 	.word	0x24000d84

08010cd8 <nan>:
 8010cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010ce0 <nan+0x8>
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	00000000 	.word	0x00000000
 8010ce4:	7ff80000 	.word	0x7ff80000

08010ce8 <_sbrk_r>:
 8010ce8:	b538      	push	{r3, r4, r5, lr}
 8010cea:	4d06      	ldr	r5, [pc, #24]	; (8010d04 <_sbrk_r+0x1c>)
 8010cec:	2300      	movs	r3, #0
 8010cee:	4604      	mov	r4, r0
 8010cf0:	4608      	mov	r0, r1
 8010cf2:	602b      	str	r3, [r5, #0]
 8010cf4:	f7f3 fa46 	bl	8004184 <_sbrk>
 8010cf8:	1c43      	adds	r3, r0, #1
 8010cfa:	d102      	bne.n	8010d02 <_sbrk_r+0x1a>
 8010cfc:	682b      	ldr	r3, [r5, #0]
 8010cfe:	b103      	cbz	r3, 8010d02 <_sbrk_r+0x1a>
 8010d00:	6023      	str	r3, [r4, #0]
 8010d02:	bd38      	pop	{r3, r4, r5, pc}
 8010d04:	24000d8c 	.word	0x24000d8c

08010d08 <strncmp>:
 8010d08:	b510      	push	{r4, lr}
 8010d0a:	b17a      	cbz	r2, 8010d2c <strncmp+0x24>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	3901      	subs	r1, #1
 8010d10:	1884      	adds	r4, r0, r2
 8010d12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d1a:	4290      	cmp	r0, r2
 8010d1c:	d101      	bne.n	8010d22 <strncmp+0x1a>
 8010d1e:	42a3      	cmp	r3, r4
 8010d20:	d101      	bne.n	8010d26 <strncmp+0x1e>
 8010d22:	1a80      	subs	r0, r0, r2
 8010d24:	bd10      	pop	{r4, pc}
 8010d26:	2800      	cmp	r0, #0
 8010d28:	d1f3      	bne.n	8010d12 <strncmp+0xa>
 8010d2a:	e7fa      	b.n	8010d22 <strncmp+0x1a>
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	e7f9      	b.n	8010d24 <strncmp+0x1c>

08010d30 <__ascii_wctomb>:
 8010d30:	b149      	cbz	r1, 8010d46 <__ascii_wctomb+0x16>
 8010d32:	2aff      	cmp	r2, #255	; 0xff
 8010d34:	bf85      	ittet	hi
 8010d36:	238a      	movhi	r3, #138	; 0x8a
 8010d38:	6003      	strhi	r3, [r0, #0]
 8010d3a:	700a      	strbls	r2, [r1, #0]
 8010d3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d40:	bf98      	it	ls
 8010d42:	2001      	movls	r0, #1
 8010d44:	4770      	bx	lr
 8010d46:	4608      	mov	r0, r1
 8010d48:	4770      	bx	lr
	...

08010d4c <__assert_func>:
 8010d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d4e:	4614      	mov	r4, r2
 8010d50:	461a      	mov	r2, r3
 8010d52:	4b09      	ldr	r3, [pc, #36]	; (8010d78 <__assert_func+0x2c>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4605      	mov	r5, r0
 8010d58:	68d8      	ldr	r0, [r3, #12]
 8010d5a:	b14c      	cbz	r4, 8010d70 <__assert_func+0x24>
 8010d5c:	4b07      	ldr	r3, [pc, #28]	; (8010d7c <__assert_func+0x30>)
 8010d5e:	9100      	str	r1, [sp, #0]
 8010d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d64:	4906      	ldr	r1, [pc, #24]	; (8010d80 <__assert_func+0x34>)
 8010d66:	462b      	mov	r3, r5
 8010d68:	f000 f80e 	bl	8010d88 <fiprintf>
 8010d6c:	f000 fc2c 	bl	80115c8 <abort>
 8010d70:	4b04      	ldr	r3, [pc, #16]	; (8010d84 <__assert_func+0x38>)
 8010d72:	461c      	mov	r4, r3
 8010d74:	e7f3      	b.n	8010d5e <__assert_func+0x12>
 8010d76:	bf00      	nop
 8010d78:	240000b0 	.word	0x240000b0
 8010d7c:	08012864 	.word	0x08012864
 8010d80:	08012871 	.word	0x08012871
 8010d84:	0801289f 	.word	0x0801289f

08010d88 <fiprintf>:
 8010d88:	b40e      	push	{r1, r2, r3}
 8010d8a:	b503      	push	{r0, r1, lr}
 8010d8c:	4601      	mov	r1, r0
 8010d8e:	ab03      	add	r3, sp, #12
 8010d90:	4805      	ldr	r0, [pc, #20]	; (8010da8 <fiprintf+0x20>)
 8010d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d96:	6800      	ldr	r0, [r0, #0]
 8010d98:	9301      	str	r3, [sp, #4]
 8010d9a:	f000 f891 	bl	8010ec0 <_vfiprintf_r>
 8010d9e:	b002      	add	sp, #8
 8010da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010da4:	b003      	add	sp, #12
 8010da6:	4770      	bx	lr
 8010da8:	240000b0 	.word	0x240000b0

08010dac <malloc>:
 8010dac:	4b02      	ldr	r3, [pc, #8]	; (8010db8 <malloc+0xc>)
 8010dae:	4601      	mov	r1, r0
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	f7ff bf1d 	b.w	8010bf0 <_malloc_r>
 8010db6:	bf00      	nop
 8010db8:	240000b0 	.word	0x240000b0

08010dbc <__malloc_lock>:
 8010dbc:	4801      	ldr	r0, [pc, #4]	; (8010dc4 <__malloc_lock+0x8>)
 8010dbe:	f000 bdc3 	b.w	8011948 <__retarget_lock_acquire_recursive>
 8010dc2:	bf00      	nop
 8010dc4:	24000d90 	.word	0x24000d90

08010dc8 <__malloc_unlock>:
 8010dc8:	4801      	ldr	r0, [pc, #4]	; (8010dd0 <__malloc_unlock+0x8>)
 8010dca:	f000 bdbe 	b.w	801194a <__retarget_lock_release_recursive>
 8010dce:	bf00      	nop
 8010dd0:	24000d90 	.word	0x24000d90

08010dd4 <_free_r>:
 8010dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dd6:	2900      	cmp	r1, #0
 8010dd8:	d044      	beq.n	8010e64 <_free_r+0x90>
 8010dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dde:	9001      	str	r0, [sp, #4]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f1a1 0404 	sub.w	r4, r1, #4
 8010de6:	bfb8      	it	lt
 8010de8:	18e4      	addlt	r4, r4, r3
 8010dea:	f7ff ffe7 	bl	8010dbc <__malloc_lock>
 8010dee:	4a1e      	ldr	r2, [pc, #120]	; (8010e68 <_free_r+0x94>)
 8010df0:	9801      	ldr	r0, [sp, #4]
 8010df2:	6813      	ldr	r3, [r2, #0]
 8010df4:	b933      	cbnz	r3, 8010e04 <_free_r+0x30>
 8010df6:	6063      	str	r3, [r4, #4]
 8010df8:	6014      	str	r4, [r2, #0]
 8010dfa:	b003      	add	sp, #12
 8010dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e00:	f7ff bfe2 	b.w	8010dc8 <__malloc_unlock>
 8010e04:	42a3      	cmp	r3, r4
 8010e06:	d908      	bls.n	8010e1a <_free_r+0x46>
 8010e08:	6825      	ldr	r5, [r4, #0]
 8010e0a:	1961      	adds	r1, r4, r5
 8010e0c:	428b      	cmp	r3, r1
 8010e0e:	bf01      	itttt	eq
 8010e10:	6819      	ldreq	r1, [r3, #0]
 8010e12:	685b      	ldreq	r3, [r3, #4]
 8010e14:	1949      	addeq	r1, r1, r5
 8010e16:	6021      	streq	r1, [r4, #0]
 8010e18:	e7ed      	b.n	8010df6 <_free_r+0x22>
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	b10b      	cbz	r3, 8010e24 <_free_r+0x50>
 8010e20:	42a3      	cmp	r3, r4
 8010e22:	d9fa      	bls.n	8010e1a <_free_r+0x46>
 8010e24:	6811      	ldr	r1, [r2, #0]
 8010e26:	1855      	adds	r5, r2, r1
 8010e28:	42a5      	cmp	r5, r4
 8010e2a:	d10b      	bne.n	8010e44 <_free_r+0x70>
 8010e2c:	6824      	ldr	r4, [r4, #0]
 8010e2e:	4421      	add	r1, r4
 8010e30:	1854      	adds	r4, r2, r1
 8010e32:	42a3      	cmp	r3, r4
 8010e34:	6011      	str	r1, [r2, #0]
 8010e36:	d1e0      	bne.n	8010dfa <_free_r+0x26>
 8010e38:	681c      	ldr	r4, [r3, #0]
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	6053      	str	r3, [r2, #4]
 8010e3e:	4421      	add	r1, r4
 8010e40:	6011      	str	r1, [r2, #0]
 8010e42:	e7da      	b.n	8010dfa <_free_r+0x26>
 8010e44:	d902      	bls.n	8010e4c <_free_r+0x78>
 8010e46:	230c      	movs	r3, #12
 8010e48:	6003      	str	r3, [r0, #0]
 8010e4a:	e7d6      	b.n	8010dfa <_free_r+0x26>
 8010e4c:	6825      	ldr	r5, [r4, #0]
 8010e4e:	1961      	adds	r1, r4, r5
 8010e50:	428b      	cmp	r3, r1
 8010e52:	bf04      	itt	eq
 8010e54:	6819      	ldreq	r1, [r3, #0]
 8010e56:	685b      	ldreq	r3, [r3, #4]
 8010e58:	6063      	str	r3, [r4, #4]
 8010e5a:	bf04      	itt	eq
 8010e5c:	1949      	addeq	r1, r1, r5
 8010e5e:	6021      	streq	r1, [r4, #0]
 8010e60:	6054      	str	r4, [r2, #4]
 8010e62:	e7ca      	b.n	8010dfa <_free_r+0x26>
 8010e64:	b003      	add	sp, #12
 8010e66:	bd30      	pop	{r4, r5, pc}
 8010e68:	24000d84 	.word	0x24000d84

08010e6c <__sfputc_r>:
 8010e6c:	6893      	ldr	r3, [r2, #8]
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	b410      	push	{r4}
 8010e74:	6093      	str	r3, [r2, #8]
 8010e76:	da08      	bge.n	8010e8a <__sfputc_r+0x1e>
 8010e78:	6994      	ldr	r4, [r2, #24]
 8010e7a:	42a3      	cmp	r3, r4
 8010e7c:	db01      	blt.n	8010e82 <__sfputc_r+0x16>
 8010e7e:	290a      	cmp	r1, #10
 8010e80:	d103      	bne.n	8010e8a <__sfputc_r+0x1e>
 8010e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e86:	f000 badf 	b.w	8011448 <__swbuf_r>
 8010e8a:	6813      	ldr	r3, [r2, #0]
 8010e8c:	1c58      	adds	r0, r3, #1
 8010e8e:	6010      	str	r0, [r2, #0]
 8010e90:	7019      	strb	r1, [r3, #0]
 8010e92:	4608      	mov	r0, r1
 8010e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e98:	4770      	bx	lr

08010e9a <__sfputs_r>:
 8010e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e9c:	4606      	mov	r6, r0
 8010e9e:	460f      	mov	r7, r1
 8010ea0:	4614      	mov	r4, r2
 8010ea2:	18d5      	adds	r5, r2, r3
 8010ea4:	42ac      	cmp	r4, r5
 8010ea6:	d101      	bne.n	8010eac <__sfputs_r+0x12>
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	e007      	b.n	8010ebc <__sfputs_r+0x22>
 8010eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eb0:	463a      	mov	r2, r7
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7ff ffda 	bl	8010e6c <__sfputc_r>
 8010eb8:	1c43      	adds	r3, r0, #1
 8010eba:	d1f3      	bne.n	8010ea4 <__sfputs_r+0xa>
 8010ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ec0 <_vfiprintf_r>:
 8010ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec4:	460d      	mov	r5, r1
 8010ec6:	b09d      	sub	sp, #116	; 0x74
 8010ec8:	4614      	mov	r4, r2
 8010eca:	4698      	mov	r8, r3
 8010ecc:	4606      	mov	r6, r0
 8010ece:	b118      	cbz	r0, 8010ed8 <_vfiprintf_r+0x18>
 8010ed0:	6983      	ldr	r3, [r0, #24]
 8010ed2:	b90b      	cbnz	r3, 8010ed8 <_vfiprintf_r+0x18>
 8010ed4:	f000 fc9a 	bl	801180c <__sinit>
 8010ed8:	4b89      	ldr	r3, [pc, #548]	; (8011100 <_vfiprintf_r+0x240>)
 8010eda:	429d      	cmp	r5, r3
 8010edc:	d11b      	bne.n	8010f16 <_vfiprintf_r+0x56>
 8010ede:	6875      	ldr	r5, [r6, #4]
 8010ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ee2:	07d9      	lsls	r1, r3, #31
 8010ee4:	d405      	bmi.n	8010ef2 <_vfiprintf_r+0x32>
 8010ee6:	89ab      	ldrh	r3, [r5, #12]
 8010ee8:	059a      	lsls	r2, r3, #22
 8010eea:	d402      	bmi.n	8010ef2 <_vfiprintf_r+0x32>
 8010eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010eee:	f000 fd2b 	bl	8011948 <__retarget_lock_acquire_recursive>
 8010ef2:	89ab      	ldrh	r3, [r5, #12]
 8010ef4:	071b      	lsls	r3, r3, #28
 8010ef6:	d501      	bpl.n	8010efc <_vfiprintf_r+0x3c>
 8010ef8:	692b      	ldr	r3, [r5, #16]
 8010efa:	b9eb      	cbnz	r3, 8010f38 <_vfiprintf_r+0x78>
 8010efc:	4629      	mov	r1, r5
 8010efe:	4630      	mov	r0, r6
 8010f00:	f000 faf4 	bl	80114ec <__swsetup_r>
 8010f04:	b1c0      	cbz	r0, 8010f38 <_vfiprintf_r+0x78>
 8010f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f08:	07dc      	lsls	r4, r3, #31
 8010f0a:	d50e      	bpl.n	8010f2a <_vfiprintf_r+0x6a>
 8010f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f10:	b01d      	add	sp, #116	; 0x74
 8010f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f16:	4b7b      	ldr	r3, [pc, #492]	; (8011104 <_vfiprintf_r+0x244>)
 8010f18:	429d      	cmp	r5, r3
 8010f1a:	d101      	bne.n	8010f20 <_vfiprintf_r+0x60>
 8010f1c:	68b5      	ldr	r5, [r6, #8]
 8010f1e:	e7df      	b.n	8010ee0 <_vfiprintf_r+0x20>
 8010f20:	4b79      	ldr	r3, [pc, #484]	; (8011108 <_vfiprintf_r+0x248>)
 8010f22:	429d      	cmp	r5, r3
 8010f24:	bf08      	it	eq
 8010f26:	68f5      	ldreq	r5, [r6, #12]
 8010f28:	e7da      	b.n	8010ee0 <_vfiprintf_r+0x20>
 8010f2a:	89ab      	ldrh	r3, [r5, #12]
 8010f2c:	0598      	lsls	r0, r3, #22
 8010f2e:	d4ed      	bmi.n	8010f0c <_vfiprintf_r+0x4c>
 8010f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f32:	f000 fd0a 	bl	801194a <__retarget_lock_release_recursive>
 8010f36:	e7e9      	b.n	8010f0c <_vfiprintf_r+0x4c>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f3c:	2320      	movs	r3, #32
 8010f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f46:	2330      	movs	r3, #48	; 0x30
 8010f48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801110c <_vfiprintf_r+0x24c>
 8010f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f50:	f04f 0901 	mov.w	r9, #1
 8010f54:	4623      	mov	r3, r4
 8010f56:	469a      	mov	sl, r3
 8010f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f5c:	b10a      	cbz	r2, 8010f62 <_vfiprintf_r+0xa2>
 8010f5e:	2a25      	cmp	r2, #37	; 0x25
 8010f60:	d1f9      	bne.n	8010f56 <_vfiprintf_r+0x96>
 8010f62:	ebba 0b04 	subs.w	fp, sl, r4
 8010f66:	d00b      	beq.n	8010f80 <_vfiprintf_r+0xc0>
 8010f68:	465b      	mov	r3, fp
 8010f6a:	4622      	mov	r2, r4
 8010f6c:	4629      	mov	r1, r5
 8010f6e:	4630      	mov	r0, r6
 8010f70:	f7ff ff93 	bl	8010e9a <__sfputs_r>
 8010f74:	3001      	adds	r0, #1
 8010f76:	f000 80aa 	beq.w	80110ce <_vfiprintf_r+0x20e>
 8010f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f7c:	445a      	add	r2, fp
 8010f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8010f80:	f89a 3000 	ldrb.w	r3, [sl]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f000 80a2 	beq.w	80110ce <_vfiprintf_r+0x20e>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f94:	f10a 0a01 	add.w	sl, sl, #1
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	9307      	str	r3, [sp, #28]
 8010f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8010fa2:	4654      	mov	r4, sl
 8010fa4:	2205      	movs	r2, #5
 8010fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010faa:	4858      	ldr	r0, [pc, #352]	; (801110c <_vfiprintf_r+0x24c>)
 8010fac:	f7ef f9a0 	bl	80002f0 <memchr>
 8010fb0:	9a04      	ldr	r2, [sp, #16]
 8010fb2:	b9d8      	cbnz	r0, 8010fec <_vfiprintf_r+0x12c>
 8010fb4:	06d1      	lsls	r1, r2, #27
 8010fb6:	bf44      	itt	mi
 8010fb8:	2320      	movmi	r3, #32
 8010fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fbe:	0713      	lsls	r3, r2, #28
 8010fc0:	bf44      	itt	mi
 8010fc2:	232b      	movmi	r3, #43	; 0x2b
 8010fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8010fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8010fce:	d015      	beq.n	8010ffc <_vfiprintf_r+0x13c>
 8010fd0:	9a07      	ldr	r2, [sp, #28]
 8010fd2:	4654      	mov	r4, sl
 8010fd4:	2000      	movs	r0, #0
 8010fd6:	f04f 0c0a 	mov.w	ip, #10
 8010fda:	4621      	mov	r1, r4
 8010fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fe0:	3b30      	subs	r3, #48	; 0x30
 8010fe2:	2b09      	cmp	r3, #9
 8010fe4:	d94e      	bls.n	8011084 <_vfiprintf_r+0x1c4>
 8010fe6:	b1b0      	cbz	r0, 8011016 <_vfiprintf_r+0x156>
 8010fe8:	9207      	str	r2, [sp, #28]
 8010fea:	e014      	b.n	8011016 <_vfiprintf_r+0x156>
 8010fec:	eba0 0308 	sub.w	r3, r0, r8
 8010ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	9304      	str	r3, [sp, #16]
 8010ff8:	46a2      	mov	sl, r4
 8010ffa:	e7d2      	b.n	8010fa2 <_vfiprintf_r+0xe2>
 8010ffc:	9b03      	ldr	r3, [sp, #12]
 8010ffe:	1d19      	adds	r1, r3, #4
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	9103      	str	r1, [sp, #12]
 8011004:	2b00      	cmp	r3, #0
 8011006:	bfbb      	ittet	lt
 8011008:	425b      	neglt	r3, r3
 801100a:	f042 0202 	orrlt.w	r2, r2, #2
 801100e:	9307      	strge	r3, [sp, #28]
 8011010:	9307      	strlt	r3, [sp, #28]
 8011012:	bfb8      	it	lt
 8011014:	9204      	strlt	r2, [sp, #16]
 8011016:	7823      	ldrb	r3, [r4, #0]
 8011018:	2b2e      	cmp	r3, #46	; 0x2e
 801101a:	d10c      	bne.n	8011036 <_vfiprintf_r+0x176>
 801101c:	7863      	ldrb	r3, [r4, #1]
 801101e:	2b2a      	cmp	r3, #42	; 0x2a
 8011020:	d135      	bne.n	801108e <_vfiprintf_r+0x1ce>
 8011022:	9b03      	ldr	r3, [sp, #12]
 8011024:	1d1a      	adds	r2, r3, #4
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	9203      	str	r2, [sp, #12]
 801102a:	2b00      	cmp	r3, #0
 801102c:	bfb8      	it	lt
 801102e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011032:	3402      	adds	r4, #2
 8011034:	9305      	str	r3, [sp, #20]
 8011036:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801111c <_vfiprintf_r+0x25c>
 801103a:	7821      	ldrb	r1, [r4, #0]
 801103c:	2203      	movs	r2, #3
 801103e:	4650      	mov	r0, sl
 8011040:	f7ef f956 	bl	80002f0 <memchr>
 8011044:	b140      	cbz	r0, 8011058 <_vfiprintf_r+0x198>
 8011046:	2340      	movs	r3, #64	; 0x40
 8011048:	eba0 000a 	sub.w	r0, r0, sl
 801104c:	fa03 f000 	lsl.w	r0, r3, r0
 8011050:	9b04      	ldr	r3, [sp, #16]
 8011052:	4303      	orrs	r3, r0
 8011054:	3401      	adds	r4, #1
 8011056:	9304      	str	r3, [sp, #16]
 8011058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801105c:	482c      	ldr	r0, [pc, #176]	; (8011110 <_vfiprintf_r+0x250>)
 801105e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011062:	2206      	movs	r2, #6
 8011064:	f7ef f944 	bl	80002f0 <memchr>
 8011068:	2800      	cmp	r0, #0
 801106a:	d03f      	beq.n	80110ec <_vfiprintf_r+0x22c>
 801106c:	4b29      	ldr	r3, [pc, #164]	; (8011114 <_vfiprintf_r+0x254>)
 801106e:	bb1b      	cbnz	r3, 80110b8 <_vfiprintf_r+0x1f8>
 8011070:	9b03      	ldr	r3, [sp, #12]
 8011072:	3307      	adds	r3, #7
 8011074:	f023 0307 	bic.w	r3, r3, #7
 8011078:	3308      	adds	r3, #8
 801107a:	9303      	str	r3, [sp, #12]
 801107c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801107e:	443b      	add	r3, r7
 8011080:	9309      	str	r3, [sp, #36]	; 0x24
 8011082:	e767      	b.n	8010f54 <_vfiprintf_r+0x94>
 8011084:	fb0c 3202 	mla	r2, ip, r2, r3
 8011088:	460c      	mov	r4, r1
 801108a:	2001      	movs	r0, #1
 801108c:	e7a5      	b.n	8010fda <_vfiprintf_r+0x11a>
 801108e:	2300      	movs	r3, #0
 8011090:	3401      	adds	r4, #1
 8011092:	9305      	str	r3, [sp, #20]
 8011094:	4619      	mov	r1, r3
 8011096:	f04f 0c0a 	mov.w	ip, #10
 801109a:	4620      	mov	r0, r4
 801109c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110a0:	3a30      	subs	r2, #48	; 0x30
 80110a2:	2a09      	cmp	r2, #9
 80110a4:	d903      	bls.n	80110ae <_vfiprintf_r+0x1ee>
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d0c5      	beq.n	8011036 <_vfiprintf_r+0x176>
 80110aa:	9105      	str	r1, [sp, #20]
 80110ac:	e7c3      	b.n	8011036 <_vfiprintf_r+0x176>
 80110ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80110b2:	4604      	mov	r4, r0
 80110b4:	2301      	movs	r3, #1
 80110b6:	e7f0      	b.n	801109a <_vfiprintf_r+0x1da>
 80110b8:	ab03      	add	r3, sp, #12
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	462a      	mov	r2, r5
 80110be:	4b16      	ldr	r3, [pc, #88]	; (8011118 <_vfiprintf_r+0x258>)
 80110c0:	a904      	add	r1, sp, #16
 80110c2:	4630      	mov	r0, r6
 80110c4:	f3af 8000 	nop.w
 80110c8:	4607      	mov	r7, r0
 80110ca:	1c78      	adds	r0, r7, #1
 80110cc:	d1d6      	bne.n	801107c <_vfiprintf_r+0x1bc>
 80110ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110d0:	07d9      	lsls	r1, r3, #31
 80110d2:	d405      	bmi.n	80110e0 <_vfiprintf_r+0x220>
 80110d4:	89ab      	ldrh	r3, [r5, #12]
 80110d6:	059a      	lsls	r2, r3, #22
 80110d8:	d402      	bmi.n	80110e0 <_vfiprintf_r+0x220>
 80110da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110dc:	f000 fc35 	bl	801194a <__retarget_lock_release_recursive>
 80110e0:	89ab      	ldrh	r3, [r5, #12]
 80110e2:	065b      	lsls	r3, r3, #25
 80110e4:	f53f af12 	bmi.w	8010f0c <_vfiprintf_r+0x4c>
 80110e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110ea:	e711      	b.n	8010f10 <_vfiprintf_r+0x50>
 80110ec:	ab03      	add	r3, sp, #12
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	462a      	mov	r2, r5
 80110f2:	4b09      	ldr	r3, [pc, #36]	; (8011118 <_vfiprintf_r+0x258>)
 80110f4:	a904      	add	r1, sp, #16
 80110f6:	4630      	mov	r0, r6
 80110f8:	f000 f880 	bl	80111fc <_printf_i>
 80110fc:	e7e4      	b.n	80110c8 <_vfiprintf_r+0x208>
 80110fe:	bf00      	nop
 8011100:	080129f4 	.word	0x080129f4
 8011104:	08012a14 	.word	0x08012a14
 8011108:	080129d4 	.word	0x080129d4
 801110c:	080129a1 	.word	0x080129a1
 8011110:	080129ab 	.word	0x080129ab
 8011114:	00000000 	.word	0x00000000
 8011118:	08010e9b 	.word	0x08010e9b
 801111c:	080129a7 	.word	0x080129a7

08011120 <_printf_common>:
 8011120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011124:	4616      	mov	r6, r2
 8011126:	4699      	mov	r9, r3
 8011128:	688a      	ldr	r2, [r1, #8]
 801112a:	690b      	ldr	r3, [r1, #16]
 801112c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011130:	4293      	cmp	r3, r2
 8011132:	bfb8      	it	lt
 8011134:	4613      	movlt	r3, r2
 8011136:	6033      	str	r3, [r6, #0]
 8011138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801113c:	4607      	mov	r7, r0
 801113e:	460c      	mov	r4, r1
 8011140:	b10a      	cbz	r2, 8011146 <_printf_common+0x26>
 8011142:	3301      	adds	r3, #1
 8011144:	6033      	str	r3, [r6, #0]
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	0699      	lsls	r1, r3, #26
 801114a:	bf42      	ittt	mi
 801114c:	6833      	ldrmi	r3, [r6, #0]
 801114e:	3302      	addmi	r3, #2
 8011150:	6033      	strmi	r3, [r6, #0]
 8011152:	6825      	ldr	r5, [r4, #0]
 8011154:	f015 0506 	ands.w	r5, r5, #6
 8011158:	d106      	bne.n	8011168 <_printf_common+0x48>
 801115a:	f104 0a19 	add.w	sl, r4, #25
 801115e:	68e3      	ldr	r3, [r4, #12]
 8011160:	6832      	ldr	r2, [r6, #0]
 8011162:	1a9b      	subs	r3, r3, r2
 8011164:	42ab      	cmp	r3, r5
 8011166:	dc26      	bgt.n	80111b6 <_printf_common+0x96>
 8011168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801116c:	1e13      	subs	r3, r2, #0
 801116e:	6822      	ldr	r2, [r4, #0]
 8011170:	bf18      	it	ne
 8011172:	2301      	movne	r3, #1
 8011174:	0692      	lsls	r2, r2, #26
 8011176:	d42b      	bmi.n	80111d0 <_printf_common+0xb0>
 8011178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801117c:	4649      	mov	r1, r9
 801117e:	4638      	mov	r0, r7
 8011180:	47c0      	blx	r8
 8011182:	3001      	adds	r0, #1
 8011184:	d01e      	beq.n	80111c4 <_printf_common+0xa4>
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	68e5      	ldr	r5, [r4, #12]
 801118a:	6832      	ldr	r2, [r6, #0]
 801118c:	f003 0306 	and.w	r3, r3, #6
 8011190:	2b04      	cmp	r3, #4
 8011192:	bf08      	it	eq
 8011194:	1aad      	subeq	r5, r5, r2
 8011196:	68a3      	ldr	r3, [r4, #8]
 8011198:	6922      	ldr	r2, [r4, #16]
 801119a:	bf0c      	ite	eq
 801119c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111a0:	2500      	movne	r5, #0
 80111a2:	4293      	cmp	r3, r2
 80111a4:	bfc4      	itt	gt
 80111a6:	1a9b      	subgt	r3, r3, r2
 80111a8:	18ed      	addgt	r5, r5, r3
 80111aa:	2600      	movs	r6, #0
 80111ac:	341a      	adds	r4, #26
 80111ae:	42b5      	cmp	r5, r6
 80111b0:	d11a      	bne.n	80111e8 <_printf_common+0xc8>
 80111b2:	2000      	movs	r0, #0
 80111b4:	e008      	b.n	80111c8 <_printf_common+0xa8>
 80111b6:	2301      	movs	r3, #1
 80111b8:	4652      	mov	r2, sl
 80111ba:	4649      	mov	r1, r9
 80111bc:	4638      	mov	r0, r7
 80111be:	47c0      	blx	r8
 80111c0:	3001      	adds	r0, #1
 80111c2:	d103      	bne.n	80111cc <_printf_common+0xac>
 80111c4:	f04f 30ff 	mov.w	r0, #4294967295
 80111c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111cc:	3501      	adds	r5, #1
 80111ce:	e7c6      	b.n	801115e <_printf_common+0x3e>
 80111d0:	18e1      	adds	r1, r4, r3
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	2030      	movs	r0, #48	; 0x30
 80111d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80111da:	4422      	add	r2, r4
 80111dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80111e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80111e4:	3302      	adds	r3, #2
 80111e6:	e7c7      	b.n	8011178 <_printf_common+0x58>
 80111e8:	2301      	movs	r3, #1
 80111ea:	4622      	mov	r2, r4
 80111ec:	4649      	mov	r1, r9
 80111ee:	4638      	mov	r0, r7
 80111f0:	47c0      	blx	r8
 80111f2:	3001      	adds	r0, #1
 80111f4:	d0e6      	beq.n	80111c4 <_printf_common+0xa4>
 80111f6:	3601      	adds	r6, #1
 80111f8:	e7d9      	b.n	80111ae <_printf_common+0x8e>
	...

080111fc <_printf_i>:
 80111fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011200:	7e0f      	ldrb	r7, [r1, #24]
 8011202:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011204:	2f78      	cmp	r7, #120	; 0x78
 8011206:	4691      	mov	r9, r2
 8011208:	4680      	mov	r8, r0
 801120a:	460c      	mov	r4, r1
 801120c:	469a      	mov	sl, r3
 801120e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011212:	d807      	bhi.n	8011224 <_printf_i+0x28>
 8011214:	2f62      	cmp	r7, #98	; 0x62
 8011216:	d80a      	bhi.n	801122e <_printf_i+0x32>
 8011218:	2f00      	cmp	r7, #0
 801121a:	f000 80d8 	beq.w	80113ce <_printf_i+0x1d2>
 801121e:	2f58      	cmp	r7, #88	; 0x58
 8011220:	f000 80a3 	beq.w	801136a <_printf_i+0x16e>
 8011224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801122c:	e03a      	b.n	80112a4 <_printf_i+0xa8>
 801122e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011232:	2b15      	cmp	r3, #21
 8011234:	d8f6      	bhi.n	8011224 <_printf_i+0x28>
 8011236:	a101      	add	r1, pc, #4	; (adr r1, 801123c <_printf_i+0x40>)
 8011238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801123c:	08011295 	.word	0x08011295
 8011240:	080112a9 	.word	0x080112a9
 8011244:	08011225 	.word	0x08011225
 8011248:	08011225 	.word	0x08011225
 801124c:	08011225 	.word	0x08011225
 8011250:	08011225 	.word	0x08011225
 8011254:	080112a9 	.word	0x080112a9
 8011258:	08011225 	.word	0x08011225
 801125c:	08011225 	.word	0x08011225
 8011260:	08011225 	.word	0x08011225
 8011264:	08011225 	.word	0x08011225
 8011268:	080113b5 	.word	0x080113b5
 801126c:	080112d9 	.word	0x080112d9
 8011270:	08011397 	.word	0x08011397
 8011274:	08011225 	.word	0x08011225
 8011278:	08011225 	.word	0x08011225
 801127c:	080113d7 	.word	0x080113d7
 8011280:	08011225 	.word	0x08011225
 8011284:	080112d9 	.word	0x080112d9
 8011288:	08011225 	.word	0x08011225
 801128c:	08011225 	.word	0x08011225
 8011290:	0801139f 	.word	0x0801139f
 8011294:	682b      	ldr	r3, [r5, #0]
 8011296:	1d1a      	adds	r2, r3, #4
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	602a      	str	r2, [r5, #0]
 801129c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112a4:	2301      	movs	r3, #1
 80112a6:	e0a3      	b.n	80113f0 <_printf_i+0x1f4>
 80112a8:	6820      	ldr	r0, [r4, #0]
 80112aa:	6829      	ldr	r1, [r5, #0]
 80112ac:	0606      	lsls	r6, r0, #24
 80112ae:	f101 0304 	add.w	r3, r1, #4
 80112b2:	d50a      	bpl.n	80112ca <_printf_i+0xce>
 80112b4:	680e      	ldr	r6, [r1, #0]
 80112b6:	602b      	str	r3, [r5, #0]
 80112b8:	2e00      	cmp	r6, #0
 80112ba:	da03      	bge.n	80112c4 <_printf_i+0xc8>
 80112bc:	232d      	movs	r3, #45	; 0x2d
 80112be:	4276      	negs	r6, r6
 80112c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112c4:	485e      	ldr	r0, [pc, #376]	; (8011440 <_printf_i+0x244>)
 80112c6:	230a      	movs	r3, #10
 80112c8:	e019      	b.n	80112fe <_printf_i+0x102>
 80112ca:	680e      	ldr	r6, [r1, #0]
 80112cc:	602b      	str	r3, [r5, #0]
 80112ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80112d2:	bf18      	it	ne
 80112d4:	b236      	sxthne	r6, r6
 80112d6:	e7ef      	b.n	80112b8 <_printf_i+0xbc>
 80112d8:	682b      	ldr	r3, [r5, #0]
 80112da:	6820      	ldr	r0, [r4, #0]
 80112dc:	1d19      	adds	r1, r3, #4
 80112de:	6029      	str	r1, [r5, #0]
 80112e0:	0601      	lsls	r1, r0, #24
 80112e2:	d501      	bpl.n	80112e8 <_printf_i+0xec>
 80112e4:	681e      	ldr	r6, [r3, #0]
 80112e6:	e002      	b.n	80112ee <_printf_i+0xf2>
 80112e8:	0646      	lsls	r6, r0, #25
 80112ea:	d5fb      	bpl.n	80112e4 <_printf_i+0xe8>
 80112ec:	881e      	ldrh	r6, [r3, #0]
 80112ee:	4854      	ldr	r0, [pc, #336]	; (8011440 <_printf_i+0x244>)
 80112f0:	2f6f      	cmp	r7, #111	; 0x6f
 80112f2:	bf0c      	ite	eq
 80112f4:	2308      	moveq	r3, #8
 80112f6:	230a      	movne	r3, #10
 80112f8:	2100      	movs	r1, #0
 80112fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80112fe:	6865      	ldr	r5, [r4, #4]
 8011300:	60a5      	str	r5, [r4, #8]
 8011302:	2d00      	cmp	r5, #0
 8011304:	bfa2      	ittt	ge
 8011306:	6821      	ldrge	r1, [r4, #0]
 8011308:	f021 0104 	bicge.w	r1, r1, #4
 801130c:	6021      	strge	r1, [r4, #0]
 801130e:	b90e      	cbnz	r6, 8011314 <_printf_i+0x118>
 8011310:	2d00      	cmp	r5, #0
 8011312:	d04d      	beq.n	80113b0 <_printf_i+0x1b4>
 8011314:	4615      	mov	r5, r2
 8011316:	fbb6 f1f3 	udiv	r1, r6, r3
 801131a:	fb03 6711 	mls	r7, r3, r1, r6
 801131e:	5dc7      	ldrb	r7, [r0, r7]
 8011320:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011324:	4637      	mov	r7, r6
 8011326:	42bb      	cmp	r3, r7
 8011328:	460e      	mov	r6, r1
 801132a:	d9f4      	bls.n	8011316 <_printf_i+0x11a>
 801132c:	2b08      	cmp	r3, #8
 801132e:	d10b      	bne.n	8011348 <_printf_i+0x14c>
 8011330:	6823      	ldr	r3, [r4, #0]
 8011332:	07de      	lsls	r6, r3, #31
 8011334:	d508      	bpl.n	8011348 <_printf_i+0x14c>
 8011336:	6923      	ldr	r3, [r4, #16]
 8011338:	6861      	ldr	r1, [r4, #4]
 801133a:	4299      	cmp	r1, r3
 801133c:	bfde      	ittt	le
 801133e:	2330      	movle	r3, #48	; 0x30
 8011340:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011344:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011348:	1b52      	subs	r2, r2, r5
 801134a:	6122      	str	r2, [r4, #16]
 801134c:	f8cd a000 	str.w	sl, [sp]
 8011350:	464b      	mov	r3, r9
 8011352:	aa03      	add	r2, sp, #12
 8011354:	4621      	mov	r1, r4
 8011356:	4640      	mov	r0, r8
 8011358:	f7ff fee2 	bl	8011120 <_printf_common>
 801135c:	3001      	adds	r0, #1
 801135e:	d14c      	bne.n	80113fa <_printf_i+0x1fe>
 8011360:	f04f 30ff 	mov.w	r0, #4294967295
 8011364:	b004      	add	sp, #16
 8011366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801136a:	4835      	ldr	r0, [pc, #212]	; (8011440 <_printf_i+0x244>)
 801136c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011370:	6829      	ldr	r1, [r5, #0]
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	f851 6b04 	ldr.w	r6, [r1], #4
 8011378:	6029      	str	r1, [r5, #0]
 801137a:	061d      	lsls	r5, r3, #24
 801137c:	d514      	bpl.n	80113a8 <_printf_i+0x1ac>
 801137e:	07df      	lsls	r7, r3, #31
 8011380:	bf44      	itt	mi
 8011382:	f043 0320 	orrmi.w	r3, r3, #32
 8011386:	6023      	strmi	r3, [r4, #0]
 8011388:	b91e      	cbnz	r6, 8011392 <_printf_i+0x196>
 801138a:	6823      	ldr	r3, [r4, #0]
 801138c:	f023 0320 	bic.w	r3, r3, #32
 8011390:	6023      	str	r3, [r4, #0]
 8011392:	2310      	movs	r3, #16
 8011394:	e7b0      	b.n	80112f8 <_printf_i+0xfc>
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	f043 0320 	orr.w	r3, r3, #32
 801139c:	6023      	str	r3, [r4, #0]
 801139e:	2378      	movs	r3, #120	; 0x78
 80113a0:	4828      	ldr	r0, [pc, #160]	; (8011444 <_printf_i+0x248>)
 80113a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113a6:	e7e3      	b.n	8011370 <_printf_i+0x174>
 80113a8:	0659      	lsls	r1, r3, #25
 80113aa:	bf48      	it	mi
 80113ac:	b2b6      	uxthmi	r6, r6
 80113ae:	e7e6      	b.n	801137e <_printf_i+0x182>
 80113b0:	4615      	mov	r5, r2
 80113b2:	e7bb      	b.n	801132c <_printf_i+0x130>
 80113b4:	682b      	ldr	r3, [r5, #0]
 80113b6:	6826      	ldr	r6, [r4, #0]
 80113b8:	6961      	ldr	r1, [r4, #20]
 80113ba:	1d18      	adds	r0, r3, #4
 80113bc:	6028      	str	r0, [r5, #0]
 80113be:	0635      	lsls	r5, r6, #24
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	d501      	bpl.n	80113c8 <_printf_i+0x1cc>
 80113c4:	6019      	str	r1, [r3, #0]
 80113c6:	e002      	b.n	80113ce <_printf_i+0x1d2>
 80113c8:	0670      	lsls	r0, r6, #25
 80113ca:	d5fb      	bpl.n	80113c4 <_printf_i+0x1c8>
 80113cc:	8019      	strh	r1, [r3, #0]
 80113ce:	2300      	movs	r3, #0
 80113d0:	6123      	str	r3, [r4, #16]
 80113d2:	4615      	mov	r5, r2
 80113d4:	e7ba      	b.n	801134c <_printf_i+0x150>
 80113d6:	682b      	ldr	r3, [r5, #0]
 80113d8:	1d1a      	adds	r2, r3, #4
 80113da:	602a      	str	r2, [r5, #0]
 80113dc:	681d      	ldr	r5, [r3, #0]
 80113de:	6862      	ldr	r2, [r4, #4]
 80113e0:	2100      	movs	r1, #0
 80113e2:	4628      	mov	r0, r5
 80113e4:	f7ee ff84 	bl	80002f0 <memchr>
 80113e8:	b108      	cbz	r0, 80113ee <_printf_i+0x1f2>
 80113ea:	1b40      	subs	r0, r0, r5
 80113ec:	6060      	str	r0, [r4, #4]
 80113ee:	6863      	ldr	r3, [r4, #4]
 80113f0:	6123      	str	r3, [r4, #16]
 80113f2:	2300      	movs	r3, #0
 80113f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113f8:	e7a8      	b.n	801134c <_printf_i+0x150>
 80113fa:	6923      	ldr	r3, [r4, #16]
 80113fc:	462a      	mov	r2, r5
 80113fe:	4649      	mov	r1, r9
 8011400:	4640      	mov	r0, r8
 8011402:	47d0      	blx	sl
 8011404:	3001      	adds	r0, #1
 8011406:	d0ab      	beq.n	8011360 <_printf_i+0x164>
 8011408:	6823      	ldr	r3, [r4, #0]
 801140a:	079b      	lsls	r3, r3, #30
 801140c:	d413      	bmi.n	8011436 <_printf_i+0x23a>
 801140e:	68e0      	ldr	r0, [r4, #12]
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	4298      	cmp	r0, r3
 8011414:	bfb8      	it	lt
 8011416:	4618      	movlt	r0, r3
 8011418:	e7a4      	b.n	8011364 <_printf_i+0x168>
 801141a:	2301      	movs	r3, #1
 801141c:	4632      	mov	r2, r6
 801141e:	4649      	mov	r1, r9
 8011420:	4640      	mov	r0, r8
 8011422:	47d0      	blx	sl
 8011424:	3001      	adds	r0, #1
 8011426:	d09b      	beq.n	8011360 <_printf_i+0x164>
 8011428:	3501      	adds	r5, #1
 801142a:	68e3      	ldr	r3, [r4, #12]
 801142c:	9903      	ldr	r1, [sp, #12]
 801142e:	1a5b      	subs	r3, r3, r1
 8011430:	42ab      	cmp	r3, r5
 8011432:	dcf2      	bgt.n	801141a <_printf_i+0x21e>
 8011434:	e7eb      	b.n	801140e <_printf_i+0x212>
 8011436:	2500      	movs	r5, #0
 8011438:	f104 0619 	add.w	r6, r4, #25
 801143c:	e7f5      	b.n	801142a <_printf_i+0x22e>
 801143e:	bf00      	nop
 8011440:	080129b2 	.word	0x080129b2
 8011444:	080129c3 	.word	0x080129c3

08011448 <__swbuf_r>:
 8011448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801144a:	460e      	mov	r6, r1
 801144c:	4614      	mov	r4, r2
 801144e:	4605      	mov	r5, r0
 8011450:	b118      	cbz	r0, 801145a <__swbuf_r+0x12>
 8011452:	6983      	ldr	r3, [r0, #24]
 8011454:	b90b      	cbnz	r3, 801145a <__swbuf_r+0x12>
 8011456:	f000 f9d9 	bl	801180c <__sinit>
 801145a:	4b21      	ldr	r3, [pc, #132]	; (80114e0 <__swbuf_r+0x98>)
 801145c:	429c      	cmp	r4, r3
 801145e:	d12b      	bne.n	80114b8 <__swbuf_r+0x70>
 8011460:	686c      	ldr	r4, [r5, #4]
 8011462:	69a3      	ldr	r3, [r4, #24]
 8011464:	60a3      	str	r3, [r4, #8]
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	071a      	lsls	r2, r3, #28
 801146a:	d52f      	bpl.n	80114cc <__swbuf_r+0x84>
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	b36b      	cbz	r3, 80114cc <__swbuf_r+0x84>
 8011470:	6923      	ldr	r3, [r4, #16]
 8011472:	6820      	ldr	r0, [r4, #0]
 8011474:	1ac0      	subs	r0, r0, r3
 8011476:	6963      	ldr	r3, [r4, #20]
 8011478:	b2f6      	uxtb	r6, r6
 801147a:	4283      	cmp	r3, r0
 801147c:	4637      	mov	r7, r6
 801147e:	dc04      	bgt.n	801148a <__swbuf_r+0x42>
 8011480:	4621      	mov	r1, r4
 8011482:	4628      	mov	r0, r5
 8011484:	f000 f92e 	bl	80116e4 <_fflush_r>
 8011488:	bb30      	cbnz	r0, 80114d8 <__swbuf_r+0x90>
 801148a:	68a3      	ldr	r3, [r4, #8]
 801148c:	3b01      	subs	r3, #1
 801148e:	60a3      	str	r3, [r4, #8]
 8011490:	6823      	ldr	r3, [r4, #0]
 8011492:	1c5a      	adds	r2, r3, #1
 8011494:	6022      	str	r2, [r4, #0]
 8011496:	701e      	strb	r6, [r3, #0]
 8011498:	6963      	ldr	r3, [r4, #20]
 801149a:	3001      	adds	r0, #1
 801149c:	4283      	cmp	r3, r0
 801149e:	d004      	beq.n	80114aa <__swbuf_r+0x62>
 80114a0:	89a3      	ldrh	r3, [r4, #12]
 80114a2:	07db      	lsls	r3, r3, #31
 80114a4:	d506      	bpl.n	80114b4 <__swbuf_r+0x6c>
 80114a6:	2e0a      	cmp	r6, #10
 80114a8:	d104      	bne.n	80114b4 <__swbuf_r+0x6c>
 80114aa:	4621      	mov	r1, r4
 80114ac:	4628      	mov	r0, r5
 80114ae:	f000 f919 	bl	80116e4 <_fflush_r>
 80114b2:	b988      	cbnz	r0, 80114d8 <__swbuf_r+0x90>
 80114b4:	4638      	mov	r0, r7
 80114b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b8:	4b0a      	ldr	r3, [pc, #40]	; (80114e4 <__swbuf_r+0x9c>)
 80114ba:	429c      	cmp	r4, r3
 80114bc:	d101      	bne.n	80114c2 <__swbuf_r+0x7a>
 80114be:	68ac      	ldr	r4, [r5, #8]
 80114c0:	e7cf      	b.n	8011462 <__swbuf_r+0x1a>
 80114c2:	4b09      	ldr	r3, [pc, #36]	; (80114e8 <__swbuf_r+0xa0>)
 80114c4:	429c      	cmp	r4, r3
 80114c6:	bf08      	it	eq
 80114c8:	68ec      	ldreq	r4, [r5, #12]
 80114ca:	e7ca      	b.n	8011462 <__swbuf_r+0x1a>
 80114cc:	4621      	mov	r1, r4
 80114ce:	4628      	mov	r0, r5
 80114d0:	f000 f80c 	bl	80114ec <__swsetup_r>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d0cb      	beq.n	8011470 <__swbuf_r+0x28>
 80114d8:	f04f 37ff 	mov.w	r7, #4294967295
 80114dc:	e7ea      	b.n	80114b4 <__swbuf_r+0x6c>
 80114de:	bf00      	nop
 80114e0:	080129f4 	.word	0x080129f4
 80114e4:	08012a14 	.word	0x08012a14
 80114e8:	080129d4 	.word	0x080129d4

080114ec <__swsetup_r>:
 80114ec:	4b32      	ldr	r3, [pc, #200]	; (80115b8 <__swsetup_r+0xcc>)
 80114ee:	b570      	push	{r4, r5, r6, lr}
 80114f0:	681d      	ldr	r5, [r3, #0]
 80114f2:	4606      	mov	r6, r0
 80114f4:	460c      	mov	r4, r1
 80114f6:	b125      	cbz	r5, 8011502 <__swsetup_r+0x16>
 80114f8:	69ab      	ldr	r3, [r5, #24]
 80114fa:	b913      	cbnz	r3, 8011502 <__swsetup_r+0x16>
 80114fc:	4628      	mov	r0, r5
 80114fe:	f000 f985 	bl	801180c <__sinit>
 8011502:	4b2e      	ldr	r3, [pc, #184]	; (80115bc <__swsetup_r+0xd0>)
 8011504:	429c      	cmp	r4, r3
 8011506:	d10f      	bne.n	8011528 <__swsetup_r+0x3c>
 8011508:	686c      	ldr	r4, [r5, #4]
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011510:	0719      	lsls	r1, r3, #28
 8011512:	d42c      	bmi.n	801156e <__swsetup_r+0x82>
 8011514:	06dd      	lsls	r5, r3, #27
 8011516:	d411      	bmi.n	801153c <__swsetup_r+0x50>
 8011518:	2309      	movs	r3, #9
 801151a:	6033      	str	r3, [r6, #0]
 801151c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011520:	81a3      	strh	r3, [r4, #12]
 8011522:	f04f 30ff 	mov.w	r0, #4294967295
 8011526:	e03e      	b.n	80115a6 <__swsetup_r+0xba>
 8011528:	4b25      	ldr	r3, [pc, #148]	; (80115c0 <__swsetup_r+0xd4>)
 801152a:	429c      	cmp	r4, r3
 801152c:	d101      	bne.n	8011532 <__swsetup_r+0x46>
 801152e:	68ac      	ldr	r4, [r5, #8]
 8011530:	e7eb      	b.n	801150a <__swsetup_r+0x1e>
 8011532:	4b24      	ldr	r3, [pc, #144]	; (80115c4 <__swsetup_r+0xd8>)
 8011534:	429c      	cmp	r4, r3
 8011536:	bf08      	it	eq
 8011538:	68ec      	ldreq	r4, [r5, #12]
 801153a:	e7e6      	b.n	801150a <__swsetup_r+0x1e>
 801153c:	0758      	lsls	r0, r3, #29
 801153e:	d512      	bpl.n	8011566 <__swsetup_r+0x7a>
 8011540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011542:	b141      	cbz	r1, 8011556 <__swsetup_r+0x6a>
 8011544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011548:	4299      	cmp	r1, r3
 801154a:	d002      	beq.n	8011552 <__swsetup_r+0x66>
 801154c:	4630      	mov	r0, r6
 801154e:	f7ff fc41 	bl	8010dd4 <_free_r>
 8011552:	2300      	movs	r3, #0
 8011554:	6363      	str	r3, [r4, #52]	; 0x34
 8011556:	89a3      	ldrh	r3, [r4, #12]
 8011558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	2300      	movs	r3, #0
 8011560:	6063      	str	r3, [r4, #4]
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	6023      	str	r3, [r4, #0]
 8011566:	89a3      	ldrh	r3, [r4, #12]
 8011568:	f043 0308 	orr.w	r3, r3, #8
 801156c:	81a3      	strh	r3, [r4, #12]
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	b94b      	cbnz	r3, 8011586 <__swsetup_r+0x9a>
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801157c:	d003      	beq.n	8011586 <__swsetup_r+0x9a>
 801157e:	4621      	mov	r1, r4
 8011580:	4630      	mov	r0, r6
 8011582:	f000 fa09 	bl	8011998 <__smakebuf_r>
 8011586:	89a0      	ldrh	r0, [r4, #12]
 8011588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801158c:	f010 0301 	ands.w	r3, r0, #1
 8011590:	d00a      	beq.n	80115a8 <__swsetup_r+0xbc>
 8011592:	2300      	movs	r3, #0
 8011594:	60a3      	str	r3, [r4, #8]
 8011596:	6963      	ldr	r3, [r4, #20]
 8011598:	425b      	negs	r3, r3
 801159a:	61a3      	str	r3, [r4, #24]
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	b943      	cbnz	r3, 80115b2 <__swsetup_r+0xc6>
 80115a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115a4:	d1ba      	bne.n	801151c <__swsetup_r+0x30>
 80115a6:	bd70      	pop	{r4, r5, r6, pc}
 80115a8:	0781      	lsls	r1, r0, #30
 80115aa:	bf58      	it	pl
 80115ac:	6963      	ldrpl	r3, [r4, #20]
 80115ae:	60a3      	str	r3, [r4, #8]
 80115b0:	e7f4      	b.n	801159c <__swsetup_r+0xb0>
 80115b2:	2000      	movs	r0, #0
 80115b4:	e7f7      	b.n	80115a6 <__swsetup_r+0xba>
 80115b6:	bf00      	nop
 80115b8:	240000b0 	.word	0x240000b0
 80115bc:	080129f4 	.word	0x080129f4
 80115c0:	08012a14 	.word	0x08012a14
 80115c4:	080129d4 	.word	0x080129d4

080115c8 <abort>:
 80115c8:	b508      	push	{r3, lr}
 80115ca:	2006      	movs	r0, #6
 80115cc:	f000 fa4c 	bl	8011a68 <raise>
 80115d0:	2001      	movs	r0, #1
 80115d2:	f7f2 fd5f 	bl	8004094 <_exit>
	...

080115d8 <__sflush_r>:
 80115d8:	898a      	ldrh	r2, [r1, #12]
 80115da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115de:	4605      	mov	r5, r0
 80115e0:	0710      	lsls	r0, r2, #28
 80115e2:	460c      	mov	r4, r1
 80115e4:	d458      	bmi.n	8011698 <__sflush_r+0xc0>
 80115e6:	684b      	ldr	r3, [r1, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dc05      	bgt.n	80115f8 <__sflush_r+0x20>
 80115ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	dc02      	bgt.n	80115f8 <__sflush_r+0x20>
 80115f2:	2000      	movs	r0, #0
 80115f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115fa:	2e00      	cmp	r6, #0
 80115fc:	d0f9      	beq.n	80115f2 <__sflush_r+0x1a>
 80115fe:	2300      	movs	r3, #0
 8011600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011604:	682f      	ldr	r7, [r5, #0]
 8011606:	602b      	str	r3, [r5, #0]
 8011608:	d032      	beq.n	8011670 <__sflush_r+0x98>
 801160a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801160c:	89a3      	ldrh	r3, [r4, #12]
 801160e:	075a      	lsls	r2, r3, #29
 8011610:	d505      	bpl.n	801161e <__sflush_r+0x46>
 8011612:	6863      	ldr	r3, [r4, #4]
 8011614:	1ac0      	subs	r0, r0, r3
 8011616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011618:	b10b      	cbz	r3, 801161e <__sflush_r+0x46>
 801161a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801161c:	1ac0      	subs	r0, r0, r3
 801161e:	2300      	movs	r3, #0
 8011620:	4602      	mov	r2, r0
 8011622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011624:	6a21      	ldr	r1, [r4, #32]
 8011626:	4628      	mov	r0, r5
 8011628:	47b0      	blx	r6
 801162a:	1c43      	adds	r3, r0, #1
 801162c:	89a3      	ldrh	r3, [r4, #12]
 801162e:	d106      	bne.n	801163e <__sflush_r+0x66>
 8011630:	6829      	ldr	r1, [r5, #0]
 8011632:	291d      	cmp	r1, #29
 8011634:	d82c      	bhi.n	8011690 <__sflush_r+0xb8>
 8011636:	4a2a      	ldr	r2, [pc, #168]	; (80116e0 <__sflush_r+0x108>)
 8011638:	40ca      	lsrs	r2, r1
 801163a:	07d6      	lsls	r6, r2, #31
 801163c:	d528      	bpl.n	8011690 <__sflush_r+0xb8>
 801163e:	2200      	movs	r2, #0
 8011640:	6062      	str	r2, [r4, #4]
 8011642:	04d9      	lsls	r1, r3, #19
 8011644:	6922      	ldr	r2, [r4, #16]
 8011646:	6022      	str	r2, [r4, #0]
 8011648:	d504      	bpl.n	8011654 <__sflush_r+0x7c>
 801164a:	1c42      	adds	r2, r0, #1
 801164c:	d101      	bne.n	8011652 <__sflush_r+0x7a>
 801164e:	682b      	ldr	r3, [r5, #0]
 8011650:	b903      	cbnz	r3, 8011654 <__sflush_r+0x7c>
 8011652:	6560      	str	r0, [r4, #84]	; 0x54
 8011654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011656:	602f      	str	r7, [r5, #0]
 8011658:	2900      	cmp	r1, #0
 801165a:	d0ca      	beq.n	80115f2 <__sflush_r+0x1a>
 801165c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011660:	4299      	cmp	r1, r3
 8011662:	d002      	beq.n	801166a <__sflush_r+0x92>
 8011664:	4628      	mov	r0, r5
 8011666:	f7ff fbb5 	bl	8010dd4 <_free_r>
 801166a:	2000      	movs	r0, #0
 801166c:	6360      	str	r0, [r4, #52]	; 0x34
 801166e:	e7c1      	b.n	80115f4 <__sflush_r+0x1c>
 8011670:	6a21      	ldr	r1, [r4, #32]
 8011672:	2301      	movs	r3, #1
 8011674:	4628      	mov	r0, r5
 8011676:	47b0      	blx	r6
 8011678:	1c41      	adds	r1, r0, #1
 801167a:	d1c7      	bne.n	801160c <__sflush_r+0x34>
 801167c:	682b      	ldr	r3, [r5, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d0c4      	beq.n	801160c <__sflush_r+0x34>
 8011682:	2b1d      	cmp	r3, #29
 8011684:	d001      	beq.n	801168a <__sflush_r+0xb2>
 8011686:	2b16      	cmp	r3, #22
 8011688:	d101      	bne.n	801168e <__sflush_r+0xb6>
 801168a:	602f      	str	r7, [r5, #0]
 801168c:	e7b1      	b.n	80115f2 <__sflush_r+0x1a>
 801168e:	89a3      	ldrh	r3, [r4, #12]
 8011690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011694:	81a3      	strh	r3, [r4, #12]
 8011696:	e7ad      	b.n	80115f4 <__sflush_r+0x1c>
 8011698:	690f      	ldr	r7, [r1, #16]
 801169a:	2f00      	cmp	r7, #0
 801169c:	d0a9      	beq.n	80115f2 <__sflush_r+0x1a>
 801169e:	0793      	lsls	r3, r2, #30
 80116a0:	680e      	ldr	r6, [r1, #0]
 80116a2:	bf08      	it	eq
 80116a4:	694b      	ldreq	r3, [r1, #20]
 80116a6:	600f      	str	r7, [r1, #0]
 80116a8:	bf18      	it	ne
 80116aa:	2300      	movne	r3, #0
 80116ac:	eba6 0807 	sub.w	r8, r6, r7
 80116b0:	608b      	str	r3, [r1, #8]
 80116b2:	f1b8 0f00 	cmp.w	r8, #0
 80116b6:	dd9c      	ble.n	80115f2 <__sflush_r+0x1a>
 80116b8:	6a21      	ldr	r1, [r4, #32]
 80116ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116bc:	4643      	mov	r3, r8
 80116be:	463a      	mov	r2, r7
 80116c0:	4628      	mov	r0, r5
 80116c2:	47b0      	blx	r6
 80116c4:	2800      	cmp	r0, #0
 80116c6:	dc06      	bgt.n	80116d6 <__sflush_r+0xfe>
 80116c8:	89a3      	ldrh	r3, [r4, #12]
 80116ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116ce:	81a3      	strh	r3, [r4, #12]
 80116d0:	f04f 30ff 	mov.w	r0, #4294967295
 80116d4:	e78e      	b.n	80115f4 <__sflush_r+0x1c>
 80116d6:	4407      	add	r7, r0
 80116d8:	eba8 0800 	sub.w	r8, r8, r0
 80116dc:	e7e9      	b.n	80116b2 <__sflush_r+0xda>
 80116de:	bf00      	nop
 80116e0:	20400001 	.word	0x20400001

080116e4 <_fflush_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	690b      	ldr	r3, [r1, #16]
 80116e8:	4605      	mov	r5, r0
 80116ea:	460c      	mov	r4, r1
 80116ec:	b913      	cbnz	r3, 80116f4 <_fflush_r+0x10>
 80116ee:	2500      	movs	r5, #0
 80116f0:	4628      	mov	r0, r5
 80116f2:	bd38      	pop	{r3, r4, r5, pc}
 80116f4:	b118      	cbz	r0, 80116fe <_fflush_r+0x1a>
 80116f6:	6983      	ldr	r3, [r0, #24]
 80116f8:	b90b      	cbnz	r3, 80116fe <_fflush_r+0x1a>
 80116fa:	f000 f887 	bl	801180c <__sinit>
 80116fe:	4b14      	ldr	r3, [pc, #80]	; (8011750 <_fflush_r+0x6c>)
 8011700:	429c      	cmp	r4, r3
 8011702:	d11b      	bne.n	801173c <_fflush_r+0x58>
 8011704:	686c      	ldr	r4, [r5, #4]
 8011706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d0ef      	beq.n	80116ee <_fflush_r+0xa>
 801170e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011710:	07d0      	lsls	r0, r2, #31
 8011712:	d404      	bmi.n	801171e <_fflush_r+0x3a>
 8011714:	0599      	lsls	r1, r3, #22
 8011716:	d402      	bmi.n	801171e <_fflush_r+0x3a>
 8011718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801171a:	f000 f915 	bl	8011948 <__retarget_lock_acquire_recursive>
 801171e:	4628      	mov	r0, r5
 8011720:	4621      	mov	r1, r4
 8011722:	f7ff ff59 	bl	80115d8 <__sflush_r>
 8011726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011728:	07da      	lsls	r2, r3, #31
 801172a:	4605      	mov	r5, r0
 801172c:	d4e0      	bmi.n	80116f0 <_fflush_r+0xc>
 801172e:	89a3      	ldrh	r3, [r4, #12]
 8011730:	059b      	lsls	r3, r3, #22
 8011732:	d4dd      	bmi.n	80116f0 <_fflush_r+0xc>
 8011734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011736:	f000 f908 	bl	801194a <__retarget_lock_release_recursive>
 801173a:	e7d9      	b.n	80116f0 <_fflush_r+0xc>
 801173c:	4b05      	ldr	r3, [pc, #20]	; (8011754 <_fflush_r+0x70>)
 801173e:	429c      	cmp	r4, r3
 8011740:	d101      	bne.n	8011746 <_fflush_r+0x62>
 8011742:	68ac      	ldr	r4, [r5, #8]
 8011744:	e7df      	b.n	8011706 <_fflush_r+0x22>
 8011746:	4b04      	ldr	r3, [pc, #16]	; (8011758 <_fflush_r+0x74>)
 8011748:	429c      	cmp	r4, r3
 801174a:	bf08      	it	eq
 801174c:	68ec      	ldreq	r4, [r5, #12]
 801174e:	e7da      	b.n	8011706 <_fflush_r+0x22>
 8011750:	080129f4 	.word	0x080129f4
 8011754:	08012a14 	.word	0x08012a14
 8011758:	080129d4 	.word	0x080129d4

0801175c <std>:
 801175c:	2300      	movs	r3, #0
 801175e:	b510      	push	{r4, lr}
 8011760:	4604      	mov	r4, r0
 8011762:	e9c0 3300 	strd	r3, r3, [r0]
 8011766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801176a:	6083      	str	r3, [r0, #8]
 801176c:	8181      	strh	r1, [r0, #12]
 801176e:	6643      	str	r3, [r0, #100]	; 0x64
 8011770:	81c2      	strh	r2, [r0, #14]
 8011772:	6183      	str	r3, [r0, #24]
 8011774:	4619      	mov	r1, r3
 8011776:	2208      	movs	r2, #8
 8011778:	305c      	adds	r0, #92	; 0x5c
 801177a:	f7fd fbdd 	bl	800ef38 <memset>
 801177e:	4b05      	ldr	r3, [pc, #20]	; (8011794 <std+0x38>)
 8011780:	6263      	str	r3, [r4, #36]	; 0x24
 8011782:	4b05      	ldr	r3, [pc, #20]	; (8011798 <std+0x3c>)
 8011784:	62a3      	str	r3, [r4, #40]	; 0x28
 8011786:	4b05      	ldr	r3, [pc, #20]	; (801179c <std+0x40>)
 8011788:	62e3      	str	r3, [r4, #44]	; 0x2c
 801178a:	4b05      	ldr	r3, [pc, #20]	; (80117a0 <std+0x44>)
 801178c:	6224      	str	r4, [r4, #32]
 801178e:	6323      	str	r3, [r4, #48]	; 0x30
 8011790:	bd10      	pop	{r4, pc}
 8011792:	bf00      	nop
 8011794:	08011aa1 	.word	0x08011aa1
 8011798:	08011ac3 	.word	0x08011ac3
 801179c:	08011afb 	.word	0x08011afb
 80117a0:	08011b1f 	.word	0x08011b1f

080117a4 <_cleanup_r>:
 80117a4:	4901      	ldr	r1, [pc, #4]	; (80117ac <_cleanup_r+0x8>)
 80117a6:	f000 b8af 	b.w	8011908 <_fwalk_reent>
 80117aa:	bf00      	nop
 80117ac:	080116e5 	.word	0x080116e5

080117b0 <__sfmoreglue>:
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	2268      	movs	r2, #104	; 0x68
 80117b4:	1e4d      	subs	r5, r1, #1
 80117b6:	4355      	muls	r5, r2
 80117b8:	460e      	mov	r6, r1
 80117ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117be:	f7ff fa17 	bl	8010bf0 <_malloc_r>
 80117c2:	4604      	mov	r4, r0
 80117c4:	b140      	cbz	r0, 80117d8 <__sfmoreglue+0x28>
 80117c6:	2100      	movs	r1, #0
 80117c8:	e9c0 1600 	strd	r1, r6, [r0]
 80117cc:	300c      	adds	r0, #12
 80117ce:	60a0      	str	r0, [r4, #8]
 80117d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117d4:	f7fd fbb0 	bl	800ef38 <memset>
 80117d8:	4620      	mov	r0, r4
 80117da:	bd70      	pop	{r4, r5, r6, pc}

080117dc <__sfp_lock_acquire>:
 80117dc:	4801      	ldr	r0, [pc, #4]	; (80117e4 <__sfp_lock_acquire+0x8>)
 80117de:	f000 b8b3 	b.w	8011948 <__retarget_lock_acquire_recursive>
 80117e2:	bf00      	nop
 80117e4:	24000d91 	.word	0x24000d91

080117e8 <__sfp_lock_release>:
 80117e8:	4801      	ldr	r0, [pc, #4]	; (80117f0 <__sfp_lock_release+0x8>)
 80117ea:	f000 b8ae 	b.w	801194a <__retarget_lock_release_recursive>
 80117ee:	bf00      	nop
 80117f0:	24000d91 	.word	0x24000d91

080117f4 <__sinit_lock_acquire>:
 80117f4:	4801      	ldr	r0, [pc, #4]	; (80117fc <__sinit_lock_acquire+0x8>)
 80117f6:	f000 b8a7 	b.w	8011948 <__retarget_lock_acquire_recursive>
 80117fa:	bf00      	nop
 80117fc:	24000d92 	.word	0x24000d92

08011800 <__sinit_lock_release>:
 8011800:	4801      	ldr	r0, [pc, #4]	; (8011808 <__sinit_lock_release+0x8>)
 8011802:	f000 b8a2 	b.w	801194a <__retarget_lock_release_recursive>
 8011806:	bf00      	nop
 8011808:	24000d92 	.word	0x24000d92

0801180c <__sinit>:
 801180c:	b510      	push	{r4, lr}
 801180e:	4604      	mov	r4, r0
 8011810:	f7ff fff0 	bl	80117f4 <__sinit_lock_acquire>
 8011814:	69a3      	ldr	r3, [r4, #24]
 8011816:	b11b      	cbz	r3, 8011820 <__sinit+0x14>
 8011818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801181c:	f7ff bff0 	b.w	8011800 <__sinit_lock_release>
 8011820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011824:	6523      	str	r3, [r4, #80]	; 0x50
 8011826:	4b13      	ldr	r3, [pc, #76]	; (8011874 <__sinit+0x68>)
 8011828:	4a13      	ldr	r2, [pc, #76]	; (8011878 <__sinit+0x6c>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	62a2      	str	r2, [r4, #40]	; 0x28
 801182e:	42a3      	cmp	r3, r4
 8011830:	bf04      	itt	eq
 8011832:	2301      	moveq	r3, #1
 8011834:	61a3      	streq	r3, [r4, #24]
 8011836:	4620      	mov	r0, r4
 8011838:	f000 f820 	bl	801187c <__sfp>
 801183c:	6060      	str	r0, [r4, #4]
 801183e:	4620      	mov	r0, r4
 8011840:	f000 f81c 	bl	801187c <__sfp>
 8011844:	60a0      	str	r0, [r4, #8]
 8011846:	4620      	mov	r0, r4
 8011848:	f000 f818 	bl	801187c <__sfp>
 801184c:	2200      	movs	r2, #0
 801184e:	60e0      	str	r0, [r4, #12]
 8011850:	2104      	movs	r1, #4
 8011852:	6860      	ldr	r0, [r4, #4]
 8011854:	f7ff ff82 	bl	801175c <std>
 8011858:	68a0      	ldr	r0, [r4, #8]
 801185a:	2201      	movs	r2, #1
 801185c:	2109      	movs	r1, #9
 801185e:	f7ff ff7d 	bl	801175c <std>
 8011862:	68e0      	ldr	r0, [r4, #12]
 8011864:	2202      	movs	r2, #2
 8011866:	2112      	movs	r1, #18
 8011868:	f7ff ff78 	bl	801175c <std>
 801186c:	2301      	movs	r3, #1
 801186e:	61a3      	str	r3, [r4, #24]
 8011870:	e7d2      	b.n	8011818 <__sinit+0xc>
 8011872:	bf00      	nop
 8011874:	08012608 	.word	0x08012608
 8011878:	080117a5 	.word	0x080117a5

0801187c <__sfp>:
 801187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187e:	4607      	mov	r7, r0
 8011880:	f7ff ffac 	bl	80117dc <__sfp_lock_acquire>
 8011884:	4b1e      	ldr	r3, [pc, #120]	; (8011900 <__sfp+0x84>)
 8011886:	681e      	ldr	r6, [r3, #0]
 8011888:	69b3      	ldr	r3, [r6, #24]
 801188a:	b913      	cbnz	r3, 8011892 <__sfp+0x16>
 801188c:	4630      	mov	r0, r6
 801188e:	f7ff ffbd 	bl	801180c <__sinit>
 8011892:	3648      	adds	r6, #72	; 0x48
 8011894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011898:	3b01      	subs	r3, #1
 801189a:	d503      	bpl.n	80118a4 <__sfp+0x28>
 801189c:	6833      	ldr	r3, [r6, #0]
 801189e:	b30b      	cbz	r3, 80118e4 <__sfp+0x68>
 80118a0:	6836      	ldr	r6, [r6, #0]
 80118a2:	e7f7      	b.n	8011894 <__sfp+0x18>
 80118a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80118a8:	b9d5      	cbnz	r5, 80118e0 <__sfp+0x64>
 80118aa:	4b16      	ldr	r3, [pc, #88]	; (8011904 <__sfp+0x88>)
 80118ac:	60e3      	str	r3, [r4, #12]
 80118ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80118b2:	6665      	str	r5, [r4, #100]	; 0x64
 80118b4:	f000 f847 	bl	8011946 <__retarget_lock_init_recursive>
 80118b8:	f7ff ff96 	bl	80117e8 <__sfp_lock_release>
 80118bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80118c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80118c4:	6025      	str	r5, [r4, #0]
 80118c6:	61a5      	str	r5, [r4, #24]
 80118c8:	2208      	movs	r2, #8
 80118ca:	4629      	mov	r1, r5
 80118cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118d0:	f7fd fb32 	bl	800ef38 <memset>
 80118d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118dc:	4620      	mov	r0, r4
 80118de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e0:	3468      	adds	r4, #104	; 0x68
 80118e2:	e7d9      	b.n	8011898 <__sfp+0x1c>
 80118e4:	2104      	movs	r1, #4
 80118e6:	4638      	mov	r0, r7
 80118e8:	f7ff ff62 	bl	80117b0 <__sfmoreglue>
 80118ec:	4604      	mov	r4, r0
 80118ee:	6030      	str	r0, [r6, #0]
 80118f0:	2800      	cmp	r0, #0
 80118f2:	d1d5      	bne.n	80118a0 <__sfp+0x24>
 80118f4:	f7ff ff78 	bl	80117e8 <__sfp_lock_release>
 80118f8:	230c      	movs	r3, #12
 80118fa:	603b      	str	r3, [r7, #0]
 80118fc:	e7ee      	b.n	80118dc <__sfp+0x60>
 80118fe:	bf00      	nop
 8011900:	08012608 	.word	0x08012608
 8011904:	ffff0001 	.word	0xffff0001

08011908 <_fwalk_reent>:
 8011908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801190c:	4606      	mov	r6, r0
 801190e:	4688      	mov	r8, r1
 8011910:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011914:	2700      	movs	r7, #0
 8011916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801191a:	f1b9 0901 	subs.w	r9, r9, #1
 801191e:	d505      	bpl.n	801192c <_fwalk_reent+0x24>
 8011920:	6824      	ldr	r4, [r4, #0]
 8011922:	2c00      	cmp	r4, #0
 8011924:	d1f7      	bne.n	8011916 <_fwalk_reent+0xe>
 8011926:	4638      	mov	r0, r7
 8011928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801192c:	89ab      	ldrh	r3, [r5, #12]
 801192e:	2b01      	cmp	r3, #1
 8011930:	d907      	bls.n	8011942 <_fwalk_reent+0x3a>
 8011932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011936:	3301      	adds	r3, #1
 8011938:	d003      	beq.n	8011942 <_fwalk_reent+0x3a>
 801193a:	4629      	mov	r1, r5
 801193c:	4630      	mov	r0, r6
 801193e:	47c0      	blx	r8
 8011940:	4307      	orrs	r7, r0
 8011942:	3568      	adds	r5, #104	; 0x68
 8011944:	e7e9      	b.n	801191a <_fwalk_reent+0x12>

08011946 <__retarget_lock_init_recursive>:
 8011946:	4770      	bx	lr

08011948 <__retarget_lock_acquire_recursive>:
 8011948:	4770      	bx	lr

0801194a <__retarget_lock_release_recursive>:
 801194a:	4770      	bx	lr

0801194c <__swhatbuf_r>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	460e      	mov	r6, r1
 8011950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011954:	2900      	cmp	r1, #0
 8011956:	b096      	sub	sp, #88	; 0x58
 8011958:	4614      	mov	r4, r2
 801195a:	461d      	mov	r5, r3
 801195c:	da08      	bge.n	8011970 <__swhatbuf_r+0x24>
 801195e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011962:	2200      	movs	r2, #0
 8011964:	602a      	str	r2, [r5, #0]
 8011966:	061a      	lsls	r2, r3, #24
 8011968:	d410      	bmi.n	801198c <__swhatbuf_r+0x40>
 801196a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801196e:	e00e      	b.n	801198e <__swhatbuf_r+0x42>
 8011970:	466a      	mov	r2, sp
 8011972:	f000 f8fb 	bl	8011b6c <_fstat_r>
 8011976:	2800      	cmp	r0, #0
 8011978:	dbf1      	blt.n	801195e <__swhatbuf_r+0x12>
 801197a:	9a01      	ldr	r2, [sp, #4]
 801197c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011984:	425a      	negs	r2, r3
 8011986:	415a      	adcs	r2, r3
 8011988:	602a      	str	r2, [r5, #0]
 801198a:	e7ee      	b.n	801196a <__swhatbuf_r+0x1e>
 801198c:	2340      	movs	r3, #64	; 0x40
 801198e:	2000      	movs	r0, #0
 8011990:	6023      	str	r3, [r4, #0]
 8011992:	b016      	add	sp, #88	; 0x58
 8011994:	bd70      	pop	{r4, r5, r6, pc}
	...

08011998 <__smakebuf_r>:
 8011998:	898b      	ldrh	r3, [r1, #12]
 801199a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801199c:	079d      	lsls	r5, r3, #30
 801199e:	4606      	mov	r6, r0
 80119a0:	460c      	mov	r4, r1
 80119a2:	d507      	bpl.n	80119b4 <__smakebuf_r+0x1c>
 80119a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119a8:	6023      	str	r3, [r4, #0]
 80119aa:	6123      	str	r3, [r4, #16]
 80119ac:	2301      	movs	r3, #1
 80119ae:	6163      	str	r3, [r4, #20]
 80119b0:	b002      	add	sp, #8
 80119b2:	bd70      	pop	{r4, r5, r6, pc}
 80119b4:	ab01      	add	r3, sp, #4
 80119b6:	466a      	mov	r2, sp
 80119b8:	f7ff ffc8 	bl	801194c <__swhatbuf_r>
 80119bc:	9900      	ldr	r1, [sp, #0]
 80119be:	4605      	mov	r5, r0
 80119c0:	4630      	mov	r0, r6
 80119c2:	f7ff f915 	bl	8010bf0 <_malloc_r>
 80119c6:	b948      	cbnz	r0, 80119dc <__smakebuf_r+0x44>
 80119c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119cc:	059a      	lsls	r2, r3, #22
 80119ce:	d4ef      	bmi.n	80119b0 <__smakebuf_r+0x18>
 80119d0:	f023 0303 	bic.w	r3, r3, #3
 80119d4:	f043 0302 	orr.w	r3, r3, #2
 80119d8:	81a3      	strh	r3, [r4, #12]
 80119da:	e7e3      	b.n	80119a4 <__smakebuf_r+0xc>
 80119dc:	4b0d      	ldr	r3, [pc, #52]	; (8011a14 <__smakebuf_r+0x7c>)
 80119de:	62b3      	str	r3, [r6, #40]	; 0x28
 80119e0:	89a3      	ldrh	r3, [r4, #12]
 80119e2:	6020      	str	r0, [r4, #0]
 80119e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119e8:	81a3      	strh	r3, [r4, #12]
 80119ea:	9b00      	ldr	r3, [sp, #0]
 80119ec:	6163      	str	r3, [r4, #20]
 80119ee:	9b01      	ldr	r3, [sp, #4]
 80119f0:	6120      	str	r0, [r4, #16]
 80119f2:	b15b      	cbz	r3, 8011a0c <__smakebuf_r+0x74>
 80119f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119f8:	4630      	mov	r0, r6
 80119fa:	f000 f8c9 	bl	8011b90 <_isatty_r>
 80119fe:	b128      	cbz	r0, 8011a0c <__smakebuf_r+0x74>
 8011a00:	89a3      	ldrh	r3, [r4, #12]
 8011a02:	f023 0303 	bic.w	r3, r3, #3
 8011a06:	f043 0301 	orr.w	r3, r3, #1
 8011a0a:	81a3      	strh	r3, [r4, #12]
 8011a0c:	89a0      	ldrh	r0, [r4, #12]
 8011a0e:	4305      	orrs	r5, r0
 8011a10:	81a5      	strh	r5, [r4, #12]
 8011a12:	e7cd      	b.n	80119b0 <__smakebuf_r+0x18>
 8011a14:	080117a5 	.word	0x080117a5

08011a18 <_raise_r>:
 8011a18:	291f      	cmp	r1, #31
 8011a1a:	b538      	push	{r3, r4, r5, lr}
 8011a1c:	4604      	mov	r4, r0
 8011a1e:	460d      	mov	r5, r1
 8011a20:	d904      	bls.n	8011a2c <_raise_r+0x14>
 8011a22:	2316      	movs	r3, #22
 8011a24:	6003      	str	r3, [r0, #0]
 8011a26:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a2e:	b112      	cbz	r2, 8011a36 <_raise_r+0x1e>
 8011a30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a34:	b94b      	cbnz	r3, 8011a4a <_raise_r+0x32>
 8011a36:	4620      	mov	r0, r4
 8011a38:	f000 f830 	bl	8011a9c <_getpid_r>
 8011a3c:	462a      	mov	r2, r5
 8011a3e:	4601      	mov	r1, r0
 8011a40:	4620      	mov	r0, r4
 8011a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a46:	f000 b817 	b.w	8011a78 <_kill_r>
 8011a4a:	2b01      	cmp	r3, #1
 8011a4c:	d00a      	beq.n	8011a64 <_raise_r+0x4c>
 8011a4e:	1c59      	adds	r1, r3, #1
 8011a50:	d103      	bne.n	8011a5a <_raise_r+0x42>
 8011a52:	2316      	movs	r3, #22
 8011a54:	6003      	str	r3, [r0, #0]
 8011a56:	2001      	movs	r0, #1
 8011a58:	e7e7      	b.n	8011a2a <_raise_r+0x12>
 8011a5a:	2400      	movs	r4, #0
 8011a5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a60:	4628      	mov	r0, r5
 8011a62:	4798      	blx	r3
 8011a64:	2000      	movs	r0, #0
 8011a66:	e7e0      	b.n	8011a2a <_raise_r+0x12>

08011a68 <raise>:
 8011a68:	4b02      	ldr	r3, [pc, #8]	; (8011a74 <raise+0xc>)
 8011a6a:	4601      	mov	r1, r0
 8011a6c:	6818      	ldr	r0, [r3, #0]
 8011a6e:	f7ff bfd3 	b.w	8011a18 <_raise_r>
 8011a72:	bf00      	nop
 8011a74:	240000b0 	.word	0x240000b0

08011a78 <_kill_r>:
 8011a78:	b538      	push	{r3, r4, r5, lr}
 8011a7a:	4d07      	ldr	r5, [pc, #28]	; (8011a98 <_kill_r+0x20>)
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	4604      	mov	r4, r0
 8011a80:	4608      	mov	r0, r1
 8011a82:	4611      	mov	r1, r2
 8011a84:	602b      	str	r3, [r5, #0]
 8011a86:	f7f2 faf5 	bl	8004074 <_kill>
 8011a8a:	1c43      	adds	r3, r0, #1
 8011a8c:	d102      	bne.n	8011a94 <_kill_r+0x1c>
 8011a8e:	682b      	ldr	r3, [r5, #0]
 8011a90:	b103      	cbz	r3, 8011a94 <_kill_r+0x1c>
 8011a92:	6023      	str	r3, [r4, #0]
 8011a94:	bd38      	pop	{r3, r4, r5, pc}
 8011a96:	bf00      	nop
 8011a98:	24000d8c 	.word	0x24000d8c

08011a9c <_getpid_r>:
 8011a9c:	f7f2 bae2 	b.w	8004064 <_getpid>

08011aa0 <__sread>:
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa8:	f000 f894 	bl	8011bd4 <_read_r>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	bfab      	itete	ge
 8011ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ab4:	181b      	addge	r3, r3, r0
 8011ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011aba:	bfac      	ite	ge
 8011abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8011abe:	81a3      	strhlt	r3, [r4, #12]
 8011ac0:	bd10      	pop	{r4, pc}

08011ac2 <__swrite>:
 8011ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac6:	461f      	mov	r7, r3
 8011ac8:	898b      	ldrh	r3, [r1, #12]
 8011aca:	05db      	lsls	r3, r3, #23
 8011acc:	4605      	mov	r5, r0
 8011ace:	460c      	mov	r4, r1
 8011ad0:	4616      	mov	r6, r2
 8011ad2:	d505      	bpl.n	8011ae0 <__swrite+0x1e>
 8011ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ad8:	2302      	movs	r3, #2
 8011ada:	2200      	movs	r2, #0
 8011adc:	f000 f868 	bl	8011bb0 <_lseek_r>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011aea:	81a3      	strh	r3, [r4, #12]
 8011aec:	4632      	mov	r2, r6
 8011aee:	463b      	mov	r3, r7
 8011af0:	4628      	mov	r0, r5
 8011af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011af6:	f000 b817 	b.w	8011b28 <_write_r>

08011afa <__sseek>:
 8011afa:	b510      	push	{r4, lr}
 8011afc:	460c      	mov	r4, r1
 8011afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b02:	f000 f855 	bl	8011bb0 <_lseek_r>
 8011b06:	1c43      	adds	r3, r0, #1
 8011b08:	89a3      	ldrh	r3, [r4, #12]
 8011b0a:	bf15      	itete	ne
 8011b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b16:	81a3      	strheq	r3, [r4, #12]
 8011b18:	bf18      	it	ne
 8011b1a:	81a3      	strhne	r3, [r4, #12]
 8011b1c:	bd10      	pop	{r4, pc}

08011b1e <__sclose>:
 8011b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b22:	f000 b813 	b.w	8011b4c <_close_r>
	...

08011b28 <_write_r>:
 8011b28:	b538      	push	{r3, r4, r5, lr}
 8011b2a:	4d07      	ldr	r5, [pc, #28]	; (8011b48 <_write_r+0x20>)
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	4608      	mov	r0, r1
 8011b30:	4611      	mov	r1, r2
 8011b32:	2200      	movs	r2, #0
 8011b34:	602a      	str	r2, [r5, #0]
 8011b36:	461a      	mov	r2, r3
 8011b38:	f7f2 fad3 	bl	80040e2 <_write>
 8011b3c:	1c43      	adds	r3, r0, #1
 8011b3e:	d102      	bne.n	8011b46 <_write_r+0x1e>
 8011b40:	682b      	ldr	r3, [r5, #0]
 8011b42:	b103      	cbz	r3, 8011b46 <_write_r+0x1e>
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	bd38      	pop	{r3, r4, r5, pc}
 8011b48:	24000d8c 	.word	0x24000d8c

08011b4c <_close_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	4d06      	ldr	r5, [pc, #24]	; (8011b68 <_close_r+0x1c>)
 8011b50:	2300      	movs	r3, #0
 8011b52:	4604      	mov	r4, r0
 8011b54:	4608      	mov	r0, r1
 8011b56:	602b      	str	r3, [r5, #0]
 8011b58:	f7f2 fadf 	bl	800411a <_close>
 8011b5c:	1c43      	adds	r3, r0, #1
 8011b5e:	d102      	bne.n	8011b66 <_close_r+0x1a>
 8011b60:	682b      	ldr	r3, [r5, #0]
 8011b62:	b103      	cbz	r3, 8011b66 <_close_r+0x1a>
 8011b64:	6023      	str	r3, [r4, #0]
 8011b66:	bd38      	pop	{r3, r4, r5, pc}
 8011b68:	24000d8c 	.word	0x24000d8c

08011b6c <_fstat_r>:
 8011b6c:	b538      	push	{r3, r4, r5, lr}
 8011b6e:	4d07      	ldr	r5, [pc, #28]	; (8011b8c <_fstat_r+0x20>)
 8011b70:	2300      	movs	r3, #0
 8011b72:	4604      	mov	r4, r0
 8011b74:	4608      	mov	r0, r1
 8011b76:	4611      	mov	r1, r2
 8011b78:	602b      	str	r3, [r5, #0]
 8011b7a:	f7f2 fada 	bl	8004132 <_fstat>
 8011b7e:	1c43      	adds	r3, r0, #1
 8011b80:	d102      	bne.n	8011b88 <_fstat_r+0x1c>
 8011b82:	682b      	ldr	r3, [r5, #0]
 8011b84:	b103      	cbz	r3, 8011b88 <_fstat_r+0x1c>
 8011b86:	6023      	str	r3, [r4, #0]
 8011b88:	bd38      	pop	{r3, r4, r5, pc}
 8011b8a:	bf00      	nop
 8011b8c:	24000d8c 	.word	0x24000d8c

08011b90 <_isatty_r>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	4d06      	ldr	r5, [pc, #24]	; (8011bac <_isatty_r+0x1c>)
 8011b94:	2300      	movs	r3, #0
 8011b96:	4604      	mov	r4, r0
 8011b98:	4608      	mov	r0, r1
 8011b9a:	602b      	str	r3, [r5, #0]
 8011b9c:	f7f2 fad9 	bl	8004152 <_isatty>
 8011ba0:	1c43      	adds	r3, r0, #1
 8011ba2:	d102      	bne.n	8011baa <_isatty_r+0x1a>
 8011ba4:	682b      	ldr	r3, [r5, #0]
 8011ba6:	b103      	cbz	r3, 8011baa <_isatty_r+0x1a>
 8011ba8:	6023      	str	r3, [r4, #0]
 8011baa:	bd38      	pop	{r3, r4, r5, pc}
 8011bac:	24000d8c 	.word	0x24000d8c

08011bb0 <_lseek_r>:
 8011bb0:	b538      	push	{r3, r4, r5, lr}
 8011bb2:	4d07      	ldr	r5, [pc, #28]	; (8011bd0 <_lseek_r+0x20>)
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	4608      	mov	r0, r1
 8011bb8:	4611      	mov	r1, r2
 8011bba:	2200      	movs	r2, #0
 8011bbc:	602a      	str	r2, [r5, #0]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	f7f2 fad2 	bl	8004168 <_lseek>
 8011bc4:	1c43      	adds	r3, r0, #1
 8011bc6:	d102      	bne.n	8011bce <_lseek_r+0x1e>
 8011bc8:	682b      	ldr	r3, [r5, #0]
 8011bca:	b103      	cbz	r3, 8011bce <_lseek_r+0x1e>
 8011bcc:	6023      	str	r3, [r4, #0]
 8011bce:	bd38      	pop	{r3, r4, r5, pc}
 8011bd0:	24000d8c 	.word	0x24000d8c

08011bd4 <_read_r>:
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4d07      	ldr	r5, [pc, #28]	; (8011bf4 <_read_r+0x20>)
 8011bd8:	4604      	mov	r4, r0
 8011bda:	4608      	mov	r0, r1
 8011bdc:	4611      	mov	r1, r2
 8011bde:	2200      	movs	r2, #0
 8011be0:	602a      	str	r2, [r5, #0]
 8011be2:	461a      	mov	r2, r3
 8011be4:	f7f2 fa60 	bl	80040a8 <_read>
 8011be8:	1c43      	adds	r3, r0, #1
 8011bea:	d102      	bne.n	8011bf2 <_read_r+0x1e>
 8011bec:	682b      	ldr	r3, [r5, #0]
 8011bee:	b103      	cbz	r3, 8011bf2 <_read_r+0x1e>
 8011bf0:	6023      	str	r3, [r4, #0]
 8011bf2:	bd38      	pop	{r3, r4, r5, pc}
 8011bf4:	24000d8c 	.word	0x24000d8c

08011bf8 <checkint>:
 8011bf8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011bfc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011c00:	429a      	cmp	r2, r3
 8011c02:	b570      	push	{r4, r5, r6, lr}
 8011c04:	dd2a      	ble.n	8011c5c <checkint+0x64>
 8011c06:	f240 4333 	movw	r3, #1075	; 0x433
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	dc24      	bgt.n	8011c58 <checkint+0x60>
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	f1a3 0620 	sub.w	r6, r3, #32
 8011c14:	f04f 32ff 	mov.w	r2, #4294967295
 8011c18:	fa02 f403 	lsl.w	r4, r2, r3
 8011c1c:	fa02 f606 	lsl.w	r6, r2, r6
 8011c20:	f1c3 0520 	rsb	r5, r3, #32
 8011c24:	fa22 f505 	lsr.w	r5, r2, r5
 8011c28:	4334      	orrs	r4, r6
 8011c2a:	432c      	orrs	r4, r5
 8011c2c:	409a      	lsls	r2, r3
 8011c2e:	ea20 0202 	bic.w	r2, r0, r2
 8011c32:	ea21 0404 	bic.w	r4, r1, r4
 8011c36:	4322      	orrs	r2, r4
 8011c38:	f1a3 0420 	sub.w	r4, r3, #32
 8011c3c:	f1c3 0220 	rsb	r2, r3, #32
 8011c40:	d10c      	bne.n	8011c5c <checkint+0x64>
 8011c42:	40d8      	lsrs	r0, r3
 8011c44:	fa01 f302 	lsl.w	r3, r1, r2
 8011c48:	4318      	orrs	r0, r3
 8011c4a:	40e1      	lsrs	r1, r4
 8011c4c:	4308      	orrs	r0, r1
 8011c4e:	f000 0001 	and.w	r0, r0, #1
 8011c52:	f1d0 0002 	rsbs	r0, r0, #2
 8011c56:	bd70      	pop	{r4, r5, r6, pc}
 8011c58:	2002      	movs	r0, #2
 8011c5a:	e7fc      	b.n	8011c56 <checkint+0x5e>
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	e7fa      	b.n	8011c56 <checkint+0x5e>

08011c60 <pow>:
 8011c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c64:	ee10 4a90 	vmov	r4, s1
 8011c68:	ed2d 8b0a 	vpush	{d8-d12}
 8011c6c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011c70:	ee11 7a90 	vmov	r7, s3
 8011c74:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011c78:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	ee10 6a10 	vmov	r6, s0
 8011c82:	ee11 0a10 	vmov	r0, s2
 8011c86:	b086      	sub	sp, #24
 8011c88:	46d4      	mov	ip, sl
 8011c8a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011c8e:	d806      	bhi.n	8011c9e <pow+0x3e>
 8011c90:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011c94:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011c98:	2b7f      	cmp	r3, #127	; 0x7f
 8011c9a:	f240 8156 	bls.w	8011f4a <pow+0x2ea>
 8011c9e:	1802      	adds	r2, r0, r0
 8011ca0:	eb47 0107 	adc.w	r1, r7, r7
 8011ca4:	f06f 0e01 	mvn.w	lr, #1
 8011ca8:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011cac:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011cb0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011cb4:	45ce      	cmp	lr, r9
 8011cb6:	eb73 0808 	sbcs.w	r8, r3, r8
 8011cba:	d23f      	bcs.n	8011d3c <pow+0xdc>
 8011cbc:	ea52 0301 	orrs.w	r3, r2, r1
 8011cc0:	f04f 0300 	mov.w	r3, #0
 8011cc4:	d10c      	bne.n	8011ce0 <pow+0x80>
 8011cc6:	19b6      	adds	r6, r6, r6
 8011cc8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011ccc:	4164      	adcs	r4, r4
 8011cce:	42b3      	cmp	r3, r6
 8011cd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011cd4:	41a3      	sbcs	r3, r4
 8011cd6:	f0c0 808c 	bcc.w	8011df2 <pow+0x192>
 8011cda:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011cde:	e028      	b.n	8011d32 <pow+0xd2>
 8011ce0:	4da3      	ldr	r5, [pc, #652]	; (8011f70 <pow+0x310>)
 8011ce2:	42ac      	cmp	r4, r5
 8011ce4:	bf08      	it	eq
 8011ce6:	429e      	cmpeq	r6, r3
 8011ce8:	d107      	bne.n	8011cfa <pow+0x9a>
 8011cea:	1800      	adds	r0, r0, r0
 8011cec:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011cf0:	417f      	adcs	r7, r7
 8011cf2:	4283      	cmp	r3, r0
 8011cf4:	4b9f      	ldr	r3, [pc, #636]	; (8011f74 <pow+0x314>)
 8011cf6:	41bb      	sbcs	r3, r7
 8011cf8:	e7ed      	b.n	8011cd6 <pow+0x76>
 8011cfa:	19b6      	adds	r6, r6, r6
 8011cfc:	489e      	ldr	r0, [pc, #632]	; (8011f78 <pow+0x318>)
 8011cfe:	4164      	adcs	r4, r4
 8011d00:	42b3      	cmp	r3, r6
 8011d02:	eb70 0504 	sbcs.w	r5, r0, r4
 8011d06:	d374      	bcc.n	8011df2 <pow+0x192>
 8011d08:	4281      	cmp	r1, r0
 8011d0a:	bf08      	it	eq
 8011d0c:	429a      	cmpeq	r2, r3
 8011d0e:	d170      	bne.n	8011df2 <pow+0x192>
 8011d10:	4a9a      	ldr	r2, [pc, #616]	; (8011f7c <pow+0x31c>)
 8011d12:	4294      	cmp	r4, r2
 8011d14:	bf08      	it	eq
 8011d16:	429e      	cmpeq	r6, r3
 8011d18:	d0df      	beq.n	8011cda <pow+0x7a>
 8011d1a:	4294      	cmp	r4, r2
 8011d1c:	ea6f 0707 	mvn.w	r7, r7
 8011d20:	bf34      	ite	cc
 8011d22:	2400      	movcc	r4, #0
 8011d24:	2401      	movcs	r4, #1
 8011d26:	0fff      	lsrs	r7, r7, #31
 8011d28:	42bc      	cmp	r4, r7
 8011d2a:	f040 81d9 	bne.w	80120e0 <pow+0x480>
 8011d2e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011d32:	b006      	add	sp, #24
 8011d34:	ecbd 8b0a 	vpop	{d8-d12}
 8011d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d3c:	eb16 0806 	adds.w	r8, r6, r6
 8011d40:	eb44 0904 	adc.w	r9, r4, r4
 8011d44:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011d48:	f169 0200 	sbc.w	r2, r9, #0
 8011d4c:	458e      	cmp	lr, r1
 8011d4e:	4193      	sbcs	r3, r2
 8011d50:	d223      	bcs.n	8011d9a <pow+0x13a>
 8011d52:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011d56:	2c00      	cmp	r4, #0
 8011d58:	da12      	bge.n	8011d80 <pow+0x120>
 8011d5a:	4639      	mov	r1, r7
 8011d5c:	f7ff ff4c 	bl	8011bf8 <checkint>
 8011d60:	2801      	cmp	r0, #1
 8011d62:	d10d      	bne.n	8011d80 <pow+0x120>
 8011d64:	eeb1 0b40 	vneg.f64	d0, d0
 8011d68:	ea58 0309 	orrs.w	r3, r8, r9
 8011d6c:	d10a      	bne.n	8011d84 <pow+0x124>
 8011d6e:	2f00      	cmp	r7, #0
 8011d70:	dadf      	bge.n	8011d32 <pow+0xd2>
 8011d72:	b006      	add	sp, #24
 8011d74:	ecbd 8b0a 	vpop	{d8-d12}
 8011d78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d7c:	f000 bb50 	b.w	8012420 <__math_divzero>
 8011d80:	2000      	movs	r0, #0
 8011d82:	e7f1      	b.n	8011d68 <pow+0x108>
 8011d84:	2f00      	cmp	r7, #0
 8011d86:	dad4      	bge.n	8011d32 <pow+0xd2>
 8011d88:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d8c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011d90:	ed8d 7b00 	vstr	d7, [sp]
 8011d94:	ed9d 0b00 	vldr	d0, [sp]
 8011d98:	e7cb      	b.n	8011d32 <pow+0xd2>
 8011d9a:	2c00      	cmp	r4, #0
 8011d9c:	da2c      	bge.n	8011df8 <pow+0x198>
 8011d9e:	4639      	mov	r1, r7
 8011da0:	f7ff ff2a 	bl	8011bf8 <checkint>
 8011da4:	b930      	cbnz	r0, 8011db4 <pow+0x154>
 8011da6:	b006      	add	sp, #24
 8011da8:	ecbd 8b0a 	vpop	{d8-d12}
 8011dac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db0:	f000 bb4e 	b.w	8012450 <__math_invalid>
 8011db4:	2801      	cmp	r0, #1
 8011db6:	bf14      	ite	ne
 8011db8:	2000      	movne	r0, #0
 8011dba:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011dbe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011dc2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011dc6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011dca:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011dce:	2b7f      	cmp	r3, #127	; 0x7f
 8011dd0:	d92d      	bls.n	8011e2e <pow+0x1ce>
 8011dd2:	4b67      	ldr	r3, [pc, #412]	; (8011f70 <pow+0x310>)
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	429c      	cmp	r4, r3
 8011dd8:	bf08      	it	eq
 8011dda:	4286      	cmpeq	r6, r0
 8011ddc:	f43f af7d 	beq.w	8011cda <pow+0x7a>
 8011de0:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011de4:	428a      	cmp	r2, r1
 8011de6:	d80c      	bhi.n	8011e02 <pow+0x1a2>
 8011de8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011dec:	42b0      	cmp	r0, r6
 8011dee:	41a3      	sbcs	r3, r4
 8011df0:	d204      	bcs.n	8011dfc <pow+0x19c>
 8011df2:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011df6:	e79c      	b.n	8011d32 <pow+0xd2>
 8011df8:	2000      	movs	r0, #0
 8011dfa:	e7e4      	b.n	8011dc6 <pow+0x166>
 8011dfc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011e00:	e797      	b.n	8011d32 <pow+0xd2>
 8011e02:	2e01      	cmp	r6, #1
 8011e04:	eb74 0303 	sbcs.w	r3, r4, r3
 8011e08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011e0c:	bf34      	ite	cc
 8011e0e:	2301      	movcc	r3, #1
 8011e10:	2300      	movcs	r3, #0
 8011e12:	4295      	cmp	r5, r2
 8011e14:	bf8c      	ite	hi
 8011e16:	2500      	movhi	r5, #0
 8011e18:	2501      	movls	r5, #1
 8011e1a:	42ab      	cmp	r3, r5
 8011e1c:	f000 809d 	beq.w	8011f5a <pow+0x2fa>
 8011e20:	b006      	add	sp, #24
 8011e22:	ecbd 8b0a 	vpop	{d8-d12}
 8011e26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e2a:	f000 baf1 	b.w	8012410 <__math_oflow>
 8011e2e:	f1bc 0f00 	cmp.w	ip, #0
 8011e32:	d10b      	bne.n	8011e4c <pow+0x1ec>
 8011e34:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011f68 <pow+0x308>
 8011e38:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011e3c:	ec53 2b17 	vmov	r2, r3, d7
 8011e40:	ee17 6a10 	vmov	r6, s14
 8011e44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011e48:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011e4c:	4b4c      	ldr	r3, [pc, #304]	; (8011f80 <pow+0x320>)
 8011e4e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011e52:	4423      	add	r3, r4
 8011e54:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011e58:	1519      	asrs	r1, r3, #20
 8011e5a:	0d1b      	lsrs	r3, r3, #20
 8011e5c:	051b      	lsls	r3, r3, #20
 8011e5e:	eba4 0903 	sub.w	r9, r4, r3
 8011e62:	4b48      	ldr	r3, [pc, #288]	; (8011f84 <pow+0x324>)
 8011e64:	ee04 1a10 	vmov	s8, r1
 8011e68:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011e6c:	f1b6 0800 	subs.w	r8, r6, #0
 8011e70:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011e74:	ec49 8b15 	vmov	d5, r8, r9
 8011e78:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011e7c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011e80:	ed93 7b00 	vldr	d7, [r3]
 8011e84:	ed93 5b02 	vldr	d5, [r3, #8]
 8011e88:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011e8c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011e90:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011e94:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011e98:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011e9c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011ea0:	ed93 5b04 	vldr	d5, [r3, #16]
 8011ea4:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011ea8:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011eac:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011eb0:	ed93 4b08 	vldr	d4, [r3, #32]
 8011eb4:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011eb8:	eeb0 9b40 	vmov.f64	d9, d0
 8011ebc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011ec0:	ed93 5b06 	vldr	d5, [r3, #24]
 8011ec4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011ec8:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011ecc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011ed0:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011ed4:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011ed8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011edc:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011ee0:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011ee4:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011ee8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011eec:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011ef0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011ef4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011ef8:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011efc:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011f00:	eeab ab05 	vfma.f64	d10, d11, d5
 8011f04:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011f08:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011f0c:	ee17 3a90 	vmov	r3, s15
 8011f10:	eeb0 5b47 	vmov.f64	d5, d7
 8011f14:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011f18:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011f1c:	18b2      	adds	r2, r6, r2
 8011f1e:	2a3e      	cmp	r2, #62	; 0x3e
 8011f20:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011f24:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011f28:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011f2c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011f30:	d92b      	bls.n	8011f8a <pow+0x32a>
 8011f32:	2a00      	cmp	r2, #0
 8011f34:	da0b      	bge.n	8011f4e <pow+0x2ee>
 8011f36:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f3a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	f43f aef7 	beq.w	8011d32 <pow+0xd2>
 8011f44:	eeb1 0b40 	vneg.f64	d0, d0
 8011f48:	e6f3      	b.n	8011d32 <pow+0xd2>
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	e77e      	b.n	8011e4c <pow+0x1ec>
 8011f4e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011f52:	d919      	bls.n	8011f88 <pow+0x328>
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f6bf af63 	bge.w	8011e20 <pow+0x1c0>
 8011f5a:	b006      	add	sp, #24
 8011f5c:	ecbd 8b0a 	vpop	{d8-d12}
 8011f60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f64:	f000 ba4c 	b.w	8012400 <__math_uflow>
 8011f68:	00000000 	.word	0x00000000
 8011f6c:	43300000 	.word	0x43300000
 8011f70:	3ff00000 	.word	0x3ff00000
 8011f74:	fff00000 	.word	0xfff00000
 8011f78:	ffe00000 	.word	0xffe00000
 8011f7c:	7fe00000 	.word	0x7fe00000
 8011f80:	c0196aab 	.word	0xc0196aab
 8011f84:	08012a38 	.word	0x08012a38
 8011f88:	2600      	movs	r6, #0
 8011f8a:	495d      	ldr	r1, [pc, #372]	; (8012100 <pow+0x4a0>)
 8011f8c:	ed91 4b02 	vldr	d4, [r1, #8]
 8011f90:	ed91 3b00 	vldr	d3, [r1]
 8011f94:	eeb0 6b44 	vmov.f64	d6, d4
 8011f98:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011f9c:	ee16 5a10 	vmov	r5, s12
 8011fa0:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011fa4:	ed91 4b04 	vldr	d4, [r1, #16]
 8011fa8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011fac:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8011fb4:	ed91 7b06 	vldr	d7, [r1, #24]
 8011fb8:	18dc      	adds	r4, r3, r3
 8011fba:	f104 030f 	add.w	r3, r4, #15
 8011fbe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011fc2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011fc6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011fca:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011fce:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011fd2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011fd6:	ed91 5b08 	vldr	d5, [r1, #32]
 8011fda:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011fde:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011fe2:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011fe6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011fea:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011fee:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011ff2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011ff6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011ffa:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011ffe:	eea0 5b04 	vfma.f64	d5, d0, d4
 8012002:	1940      	adds	r0, r0, r5
 8012004:	2700      	movs	r7, #0
 8012006:	eb17 020c 	adds.w	r2, r7, ip
 801200a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801200e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012012:	2e00      	cmp	r6, #0
 8012014:	d15f      	bne.n	80120d6 <pow+0x476>
 8012016:	42bd      	cmp	r5, r7
 8012018:	db13      	blt.n	8012042 <pow+0x3e2>
 801201a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801201e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8012022:	4610      	mov	r0, r2
 8012024:	ec41 0b10 	vmov	d0, r0, r1
 8012028:	eea7 0b00 	vfma.f64	d0, d7, d0
 801202c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80120e8 <pow+0x488>
 8012030:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012034:	b006      	add	sp, #24
 8012036:	ecbd 8b0a 	vpop	{d8-d12}
 801203a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801203e:	f000 ba1f 	b.w	8012480 <__math_check_oflow>
 8012042:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012046:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801204a:	4610      	mov	r0, r2
 801204c:	ec41 0b15 	vmov	d5, r0, r1
 8012050:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012054:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012058:	ee35 7b06 	vadd.f64	d7, d5, d6
 801205c:	eeb0 3bc7 	vabs.f64	d3, d7
 8012060:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8012064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012068:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80120f0 <pow+0x490>
 801206c:	d52a      	bpl.n	80120c4 <pow+0x464>
 801206e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012072:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801207a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801207e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8012082:	bf48      	it	mi
 8012084:	eeb0 4b43 	vmovmi.f64	d4, d3
 8012088:	ee37 3b04 	vadd.f64	d3, d7, d4
 801208c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8012090:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012094:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012098:	ee37 7b03 	vadd.f64	d7, d7, d3
 801209c:	ee37 7b44 	vsub.f64	d7, d7, d4
 80120a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a8:	d104      	bne.n	80120b4 <pow+0x454>
 80120aa:	4632      	mov	r2, r6
 80120ac:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80120b0:	ec43 2b17 	vmov	d7, r2, r3
 80120b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80120bc:	ee26 6b00 	vmul.f64	d6, d6, d0
 80120c0:	ed8d 6b04 	vstr	d6, [sp, #16]
 80120c4:	ee27 0b00 	vmul.f64	d0, d7, d0
 80120c8:	b006      	add	sp, #24
 80120ca:	ecbd 8b0a 	vpop	{d8-d12}
 80120ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d2:	f000 b9cc 	b.w	801246e <__math_check_uflow>
 80120d6:	ec43 2b10 	vmov	d0, r2, r3
 80120da:	eea7 0b00 	vfma.f64	d0, d7, d0
 80120de:	e628      	b.n	8011d32 <pow+0xd2>
 80120e0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80120f8 <pow+0x498>
 80120e4:	e625      	b.n	8011d32 <pow+0xd2>
 80120e6:	bf00      	nop
 80120e8:	00000000 	.word	0x00000000
 80120ec:	7f000000 	.word	0x7f000000
 80120f0:	00000000 	.word	0x00000000
 80120f4:	00100000 	.word	0x00100000
	...
 8012100:	08013a80 	.word	0x08013a80

08012104 <asin>:
 8012104:	b508      	push	{r3, lr}
 8012106:	ed2d 8b04 	vpush	{d8-d9}
 801210a:	eeb0 8b40 	vmov.f64	d8, d0
 801210e:	f000 f847 	bl	80121a0 <__ieee754_asin>
 8012112:	eeb4 8b48 	vcmp.f64	d8, d8
 8012116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801211a:	eeb0 9b40 	vmov.f64	d9, d0
 801211e:	d615      	bvs.n	801214c <asin+0x48>
 8012120:	eeb0 0b48 	vmov.f64	d0, d8
 8012124:	f000 f9c0 	bl	80124a8 <fabs>
 8012128:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801212c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012134:	dd0a      	ble.n	801214c <asin+0x48>
 8012136:	f7fc fec7 	bl	800eec8 <__errno>
 801213a:	ecbd 8b04 	vpop	{d8-d9}
 801213e:	2321      	movs	r3, #33	; 0x21
 8012140:	6003      	str	r3, [r0, #0]
 8012142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012146:	4804      	ldr	r0, [pc, #16]	; (8012158 <asin+0x54>)
 8012148:	f7fe bdc6 	b.w	8010cd8 <nan>
 801214c:	eeb0 0b49 	vmov.f64	d0, d9
 8012150:	ecbd 8b04 	vpop	{d8-d9}
 8012154:	bd08      	pop	{r3, pc}
 8012156:	bf00      	nop
 8012158:	0801289f 	.word	0x0801289f
 801215c:	00000000 	.word	0x00000000

08012160 <sqrt>:
 8012160:	b508      	push	{r3, lr}
 8012162:	ed2d 8b04 	vpush	{d8-d9}
 8012166:	eeb0 8b40 	vmov.f64	d8, d0
 801216a:	f000 f927 	bl	80123bc <__ieee754_sqrt>
 801216e:	eeb4 8b48 	vcmp.f64	d8, d8
 8012172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012176:	d60c      	bvs.n	8012192 <sqrt+0x32>
 8012178:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8012198 <sqrt+0x38>
 801217c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012184:	d505      	bpl.n	8012192 <sqrt+0x32>
 8012186:	f7fc fe9f 	bl	800eec8 <__errno>
 801218a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801218e:	2321      	movs	r3, #33	; 0x21
 8012190:	6003      	str	r3, [r0, #0]
 8012192:	ecbd 8b04 	vpop	{d8-d9}
 8012196:	bd08      	pop	{r3, pc}
	...

080121a0 <__ieee754_asin>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	ee10 5a90 	vmov	r5, s1
 80121a6:	4b82      	ldr	r3, [pc, #520]	; (80123b0 <__ieee754_asin+0x210>)
 80121a8:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80121ac:	429c      	cmp	r4, r3
 80121ae:	ed2d 8b06 	vpush	{d8-d10}
 80121b2:	dd19      	ble.n	80121e8 <__ieee754_asin+0x48>
 80121b4:	ee10 3a10 	vmov	r3, s0
 80121b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80121bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80121c0:	4323      	orrs	r3, r4
 80121c2:	d10c      	bne.n	80121de <__ieee754_asin+0x3e>
 80121c4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8012338 <__ieee754_asin+0x198>
 80121c8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012340 <__ieee754_asin+0x1a0>
 80121cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80121d0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80121d4:	eeb0 0b47 	vmov.f64	d0, d7
 80121d8:	ecbd 8b06 	vpop	{d8-d10}
 80121dc:	bd38      	pop	{r3, r4, r5, pc}
 80121de:	ee30 7b40 	vsub.f64	d7, d0, d0
 80121e2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80121e6:	e7f7      	b.n	80121d8 <__ieee754_asin+0x38>
 80121e8:	4b72      	ldr	r3, [pc, #456]	; (80123b4 <__ieee754_asin+0x214>)
 80121ea:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80121ee:	429c      	cmp	r4, r3
 80121f0:	dc0b      	bgt.n	801220a <__ieee754_asin+0x6a>
 80121f2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80121f6:	da52      	bge.n	801229e <__ieee754_asin+0xfe>
 80121f8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012348 <__ieee754_asin+0x1a8>
 80121fc:	ee30 7b07 	vadd.f64	d7, d0, d7
 8012200:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8012204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012208:	dce6      	bgt.n	80121d8 <__ieee754_asin+0x38>
 801220a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801220e:	f000 f94b 	bl	80124a8 <fabs>
 8012212:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012350 <__ieee754_asin+0x1b0>
 8012216:	ee39 0b40 	vsub.f64	d0, d9, d0
 801221a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801221e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012358 <__ieee754_asin+0x1b8>
 8012222:	eeb0 0b48 	vmov.f64	d0, d8
 8012226:	eea8 6b07 	vfma.f64	d6, d8, d7
 801222a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012360 <__ieee754_asin+0x1c0>
 801222e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8012232:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012368 <__ieee754_asin+0x1c8>
 8012236:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012370 <__ieee754_asin+0x1d0>
 801223a:	eea7 6b08 	vfma.f64	d6, d7, d8
 801223e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012378 <__ieee754_asin+0x1d8>
 8012242:	eea6 7b08 	vfma.f64	d7, d6, d8
 8012246:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012380 <__ieee754_asin+0x1e0>
 801224a:	eea7 ab08 	vfma.f64	d10, d7, d8
 801224e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8012252:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012388 <__ieee754_asin+0x1e8>
 8012256:	eea8 7b06 	vfma.f64	d7, d8, d6
 801225a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012390 <__ieee754_asin+0x1f0>
 801225e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8012262:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012398 <__ieee754_asin+0x1f8>
 8012266:	eea6 7b08 	vfma.f64	d7, d6, d8
 801226a:	eea7 9b08 	vfma.f64	d9, d7, d8
 801226e:	f000 f8a5 	bl	80123bc <__ieee754_sqrt>
 8012272:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8012276:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801227a:	4b4f      	ldr	r3, [pc, #316]	; (80123b8 <__ieee754_asin+0x218>)
 801227c:	429c      	cmp	r4, r3
 801227e:	dd3d      	ble.n	80122fc <__ieee754_asin+0x15c>
 8012280:	eea0 0b05 	vfma.f64	d0, d0, d5
 8012284:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80123a0 <__ieee754_asin+0x200>
 8012288:	eea0 7b04 	vfma.f64	d7, d0, d4
 801228c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012340 <__ieee754_asin+0x1a0>
 8012290:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012294:	2d00      	cmp	r5, #0
 8012296:	bfd8      	it	le
 8012298:	eeb1 0b40 	vnegle.f64	d0, d0
 801229c:	e79c      	b.n	80121d8 <__ieee754_asin+0x38>
 801229e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012350 <__ieee754_asin+0x1b0>
 80122a2:	ee20 7b00 	vmul.f64	d7, d0, d0
 80122a6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012358 <__ieee754_asin+0x1b8>
 80122aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80122ae:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012360 <__ieee754_asin+0x1c0>
 80122b2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80122b6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012368 <__ieee754_asin+0x1c8>
 80122ba:	eea5 6b07 	vfma.f64	d6, d5, d7
 80122be:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012378 <__ieee754_asin+0x1d8>
 80122c2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80122c6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012370 <__ieee754_asin+0x1d0>
 80122ca:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012380 <__ieee754_asin+0x1e0>
 80122ce:	eea5 6b07 	vfma.f64	d6, d5, d7
 80122d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122d6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012388 <__ieee754_asin+0x1e8>
 80122da:	eea7 5b04 	vfma.f64	d5, d7, d4
 80122de:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012390 <__ieee754_asin+0x1f0>
 80122e2:	eea5 4b07 	vfma.f64	d4, d5, d7
 80122e6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012398 <__ieee754_asin+0x1f8>
 80122ea:	eea4 5b07 	vfma.f64	d5, d4, d7
 80122ee:	eea5 9b07 	vfma.f64	d9, d5, d7
 80122f2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80122f6:	eea0 0b07 	vfma.f64	d0, d0, d7
 80122fa:	e76d      	b.n	80121d8 <__ieee754_asin+0x38>
 80122fc:	ec53 2b10 	vmov	r2, r3, d0
 8012300:	2200      	movs	r2, #0
 8012302:	ec43 2b16 	vmov	d6, r2, r3
 8012306:	ee30 7b06 	vadd.f64	d7, d0, d6
 801230a:	eea6 8b46 	vfms.f64	d8, d6, d6
 801230e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8012312:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8012338 <__ieee754_asin+0x198>
 8012316:	ee30 0b00 	vadd.f64	d0, d0, d0
 801231a:	eea3 7b44 	vfms.f64	d7, d3, d4
 801231e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8012322:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80123a8 <__ieee754_asin+0x208>
 8012326:	eeb0 0b45 	vmov.f64	d0, d5
 801232a:	eea6 0b44 	vfms.f64	d0, d6, d4
 801232e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8012332:	ee35 0b40 	vsub.f64	d0, d5, d0
 8012336:	e7ad      	b.n	8012294 <__ieee754_asin+0xf4>
 8012338:	33145c07 	.word	0x33145c07
 801233c:	3c91a626 	.word	0x3c91a626
 8012340:	54442d18 	.word	0x54442d18
 8012344:	3ff921fb 	.word	0x3ff921fb
 8012348:	8800759c 	.word	0x8800759c
 801234c:	7e37e43c 	.word	0x7e37e43c
 8012350:	0dfdf709 	.word	0x0dfdf709
 8012354:	3f023de1 	.word	0x3f023de1
 8012358:	7501b288 	.word	0x7501b288
 801235c:	3f49efe0 	.word	0x3f49efe0
 8012360:	b5688f3b 	.word	0xb5688f3b
 8012364:	bfa48228 	.word	0xbfa48228
 8012368:	0e884455 	.word	0x0e884455
 801236c:	3fc9c155 	.word	0x3fc9c155
 8012370:	55555555 	.word	0x55555555
 8012374:	3fc55555 	.word	0x3fc55555
 8012378:	03eb6f7d 	.word	0x03eb6f7d
 801237c:	bfd4d612 	.word	0xbfd4d612
 8012380:	b12e9282 	.word	0xb12e9282
 8012384:	3fb3b8c5 	.word	0x3fb3b8c5
 8012388:	1b8d0159 	.word	0x1b8d0159
 801238c:	bfe6066c 	.word	0xbfe6066c
 8012390:	9c598ac8 	.word	0x9c598ac8
 8012394:	40002ae5 	.word	0x40002ae5
 8012398:	1c8a2d4b 	.word	0x1c8a2d4b
 801239c:	c0033a27 	.word	0xc0033a27
 80123a0:	33145c07 	.word	0x33145c07
 80123a4:	bc91a626 	.word	0xbc91a626
 80123a8:	54442d18 	.word	0x54442d18
 80123ac:	3fe921fb 	.word	0x3fe921fb
 80123b0:	3fefffff 	.word	0x3fefffff
 80123b4:	3fdfffff 	.word	0x3fdfffff
 80123b8:	3fef3332 	.word	0x3fef3332

080123bc <__ieee754_sqrt>:
 80123bc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80123c0:	4770      	bx	lr

080123c2 <with_errno>:
 80123c2:	b513      	push	{r0, r1, r4, lr}
 80123c4:	4604      	mov	r4, r0
 80123c6:	ed8d 0b00 	vstr	d0, [sp]
 80123ca:	f7fc fd7d 	bl	800eec8 <__errno>
 80123ce:	ed9d 0b00 	vldr	d0, [sp]
 80123d2:	6004      	str	r4, [r0, #0]
 80123d4:	b002      	add	sp, #8
 80123d6:	bd10      	pop	{r4, pc}

080123d8 <xflow>:
 80123d8:	b082      	sub	sp, #8
 80123da:	b158      	cbz	r0, 80123f4 <xflow+0x1c>
 80123dc:	eeb1 7b40 	vneg.f64	d7, d0
 80123e0:	ed8d 7b00 	vstr	d7, [sp]
 80123e4:	ed9d 7b00 	vldr	d7, [sp]
 80123e8:	2022      	movs	r0, #34	; 0x22
 80123ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 80123ee:	b002      	add	sp, #8
 80123f0:	f7ff bfe7 	b.w	80123c2 <with_errno>
 80123f4:	eeb0 7b40 	vmov.f64	d7, d0
 80123f8:	e7f2      	b.n	80123e0 <xflow+0x8>
 80123fa:	0000      	movs	r0, r0
 80123fc:	0000      	movs	r0, r0
	...

08012400 <__math_uflow>:
 8012400:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012408 <__math_uflow+0x8>
 8012404:	f7ff bfe8 	b.w	80123d8 <xflow>
 8012408:	00000000 	.word	0x00000000
 801240c:	10000000 	.word	0x10000000

08012410 <__math_oflow>:
 8012410:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012418 <__math_oflow+0x8>
 8012414:	f7ff bfe0 	b.w	80123d8 <xflow>
 8012418:	00000000 	.word	0x00000000
 801241c:	70000000 	.word	0x70000000

08012420 <__math_divzero>:
 8012420:	b082      	sub	sp, #8
 8012422:	2800      	cmp	r0, #0
 8012424:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012428:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801242c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012430:	ed8d 7b00 	vstr	d7, [sp]
 8012434:	ed9d 0b00 	vldr	d0, [sp]
 8012438:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012448 <__math_divzero+0x28>
 801243c:	2022      	movs	r0, #34	; 0x22
 801243e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012442:	b002      	add	sp, #8
 8012444:	f7ff bfbd 	b.w	80123c2 <with_errno>
	...

08012450 <__math_invalid>:
 8012450:	eeb0 7b40 	vmov.f64	d7, d0
 8012454:	eeb4 7b47 	vcmp.f64	d7, d7
 8012458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012460:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012464:	d602      	bvs.n	801246c <__math_invalid+0x1c>
 8012466:	2021      	movs	r0, #33	; 0x21
 8012468:	f7ff bfab 	b.w	80123c2 <with_errno>
 801246c:	4770      	bx	lr

0801246e <__math_check_uflow>:
 801246e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012476:	d102      	bne.n	801247e <__math_check_uflow+0x10>
 8012478:	2022      	movs	r0, #34	; 0x22
 801247a:	f7ff bfa2 	b.w	80123c2 <with_errno>
 801247e:	4770      	bx	lr

08012480 <__math_check_oflow>:
 8012480:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80124a0 <__math_check_oflow+0x20>
 8012484:	eeb0 7bc0 	vabs.f64	d7, d0
 8012488:	eeb4 7b46 	vcmp.f64	d7, d6
 801248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012490:	dd02      	ble.n	8012498 <__math_check_oflow+0x18>
 8012492:	2022      	movs	r0, #34	; 0x22
 8012494:	f7ff bf95 	b.w	80123c2 <with_errno>
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	f3af 8000 	nop.w
 80124a0:	ffffffff 	.word	0xffffffff
 80124a4:	7fefffff 	.word	0x7fefffff

080124a8 <fabs>:
 80124a8:	ec51 0b10 	vmov	r0, r1, d0
 80124ac:	ee10 2a10 	vmov	r2, s0
 80124b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80124b4:	ec43 2b10 	vmov	d0, r2, r3
 80124b8:	4770      	bx	lr
	...

080124bc <_init>:
 80124bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124be:	bf00      	nop
 80124c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124c2:	bc08      	pop	{r3}
 80124c4:	469e      	mov	lr, r3
 80124c6:	4770      	bx	lr

080124c8 <_fini>:
 80124c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ca:	bf00      	nop
 80124cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ce:	bc08      	pop	{r3}
 80124d0:	469e      	mov	lr, r3
 80124d2:	4770      	bx	lr
