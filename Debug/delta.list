
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  08011e18  08011e18  00021e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b60  08013b60  000302cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013b60  08013b60  00023b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b68  08013b68  000302cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b68  08013b68  00023b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b6c  08013b6c  00023b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  24000000  08013b70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  240002d0  08013e3c  000302d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000c80  08013e3c  00030c80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6ed  00000000  00000000  000302fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a0  00000000  00000000  0004c9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00050088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00051398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000617d  00000000  00000000  00052520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d80f  00000000  00000000  0005869d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165965  00000000  00000000  00075eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001db811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a0  00000000  00000000  001db864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011dfc 	.word	0x08011dfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	08011dfc 	.word	0x08011dfc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <dotProduct>:
 */

#include <GlobalFunc.h>


double dotProduct(double VectA[], double VectB[],int n) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	double product = 0;
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < n; i++) {				//Producto punto entre vectores
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e016      	b.n	8000ac8 <dotProduct+0x4c>
		product += VectA[i] * VectB[i];
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	ed93 6b00 	vldr	d6, [r3]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	4413      	add	r3, r2
 8000aae:	ed93 7b00 	vldr	d7, [r3]
 8000ab2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab6:	ed97 6b06 	vldr	d6, [r7, #24]
 8000aba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000abe:	ed87 7b06 	vstr	d7, [r7, #24]
	for (int i = 0; i < n; i++) {				//Producto punto entre vectores
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbe4      	blt.n	8000a9a <dotProduct+0x1e>
	}
	return product;
 8000ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ad4:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ad8:	eeb0 0b47 	vmov.f64	d0, d7
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <matrixTranspose>:

void matrixTranspose(double A[3][3], double result[3][3]) {
 8000ae6:	b480      	push	{r7}
 8000ae8:	b085      	sub	sp, #20
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
    int i, j;

    for(i = 0; i < 3; i++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e025      	b.n	8000b42 <matrixTranspose+0x5c>
        for(j = 0; j < 3; j++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	e01c      	b.n	8000b36 <matrixTranspose+0x50>
            result[j][i] = A[i][j];
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1899      	adds	r1, r3, r2
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	461a      	mov	r2, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	1898      	adds	r0, r3, r2
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	00c9      	lsls	r1, r1, #3
 8000b2a:	4401      	add	r1, r0
 8000b2c:	e9c1 2300 	strd	r2, r3, [r1]
        for(j = 0; j < 3; j++) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	dddf      	ble.n	8000afc <matrixTranspose+0x16>
    for(i = 0; i < 3; i++) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	ddd6      	ble.n	8000af6 <matrixTranspose+0x10>
        }
    }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <inv>:

void inv(double A[3][3], double A_inv[3][3]) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b09d      	sub	sp, #116	; 0x74
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]

	// Calculamos el determinante de la matriz

	double det = 0;
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	for (int i = 0; i < 3; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	667b      	str	r3, [r7, #100]	; 0x64
 8000b72:	e05e      	b.n	8000c32 <inv+0xda>
		det += A[0][i] * (A[1][(i+1)%3]*A[2][(i+2)%3] - A[1][(i+2)%3]*A[2][(i+1)%3]);
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	ed93 6b00 	vldr	d6, [r3]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0018 	add.w	r0, r3, #24
 8000b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b88:	1c59      	adds	r1, r3, #1
 8000b8a:	4ba1      	ldr	r3, [pc, #644]	; (8000e10 <inv+0x2b8>)
 8000b8c:	fb83 3201 	smull	r3, r2, r3, r1
 8000b90:	17cb      	asrs	r3, r1, #31
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	1aca      	subs	r2, r1, r3
 8000b9c:	00d3      	lsls	r3, r2, #3
 8000b9e:	4403      	add	r3, r0
 8000ba0:	ed93 5b00 	vldr	d5, [r3]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bac:	1c99      	adds	r1, r3, #2
 8000bae:	4b98      	ldr	r3, [pc, #608]	; (8000e10 <inv+0x2b8>)
 8000bb0:	fb83 3201 	smull	r3, r2, r3, r1
 8000bb4:	17cb      	asrs	r3, r1, #31
 8000bb6:	1ad2      	subs	r2, r2, r3
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	1aca      	subs	r2, r1, r3
 8000bc0:	00d3      	lsls	r3, r2, #3
 8000bc2:	4403      	add	r3, r0
 8000bc4:	ed93 7b00 	vldr	d7, [r3]
 8000bc8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f103 0018 	add.w	r0, r3, #24
 8000bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bd4:	1c99      	adds	r1, r3, #2
 8000bd6:	4b8e      	ldr	r3, [pc, #568]	; (8000e10 <inv+0x2b8>)
 8000bd8:	fb83 3201 	smull	r3, r2, r3, r1
 8000bdc:	17cb      	asrs	r3, r1, #31
 8000bde:	1ad2      	subs	r2, r2, r3
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	1aca      	subs	r2, r1, r3
 8000be8:	00d3      	lsls	r3, r2, #3
 8000bea:	4403      	add	r3, r0
 8000bec:	ed93 4b00 	vldr	d4, [r3]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bf8:	1c59      	adds	r1, r3, #1
 8000bfa:	4b85      	ldr	r3, [pc, #532]	; (8000e10 <inv+0x2b8>)
 8000bfc:	fb83 3201 	smull	r3, r2, r3, r1
 8000c00:	17cb      	asrs	r3, r1, #31
 8000c02:	1ad2      	subs	r2, r2, r3
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	1aca      	subs	r2, r1, r3
 8000c0c:	00d3      	lsls	r3, r2, #3
 8000c0e:	4403      	add	r3, r0
 8000c10:	ed93 7b00 	vldr	d7, [r3]
 8000c14:	ee24 7b07 	vmul.f64	d7, d4, d7
 8000c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000c1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c20:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8000c24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c28:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	for (int i = 0; i < 3; i++) {
 8000c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c2e:	3301      	adds	r3, #1
 8000c30:	667b      	str	r3, [r7, #100]	; 0x64
 8000c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	dd9d      	ble.n	8000b74 <inv+0x1c>
	}

	// Verificamos si la matriz es invertible
	if (det == 0) {
 8000c38:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8000c3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	f000 80de 	beq.w	8000e04 <inv+0x2ac>
	}

	// Calculamos la matriz adjunta
	double adj[3][3];

	for (int i = 0; i < 3; i++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8000c4c:	e0a6      	b.n	8000d9c <inv+0x244>
		for (int j = 0; j < 3; j++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c52:	e09c      	b.n	8000d8e <inv+0x236>
			adj[i][j] = ((A[(j+1)%3][(i+1)%3] * A[(j+2)%3][(i+2)%3]) - (A[(j+1)%3][(i+2)%3] * A[(j+2)%3][(i+1)%3]));
 8000c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	4b6d      	ldr	r3, [pc, #436]	; (8000e10 <inv+0x2b8>)
 8000c5a:	fb83 3102 	smull	r3, r1, r3, r2
 8000c5e:	17d3      	asrs	r3, r2, #31
 8000c60:	1ac9      	subs	r1, r1, r3
 8000c62:	460b      	mov	r3, r1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	440b      	add	r3, r1
 8000c68:	1ad1      	subs	r1, r2, r3
 8000c6a:	460a      	mov	r2, r1
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	461a      	mov	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	1898      	adds	r0, r3, r2
 8000c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c7c:	1c59      	adds	r1, r3, #1
 8000c7e:	4b64      	ldr	r3, [pc, #400]	; (8000e10 <inv+0x2b8>)
 8000c80:	fb83 3201 	smull	r3, r2, r3, r1
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	1ad2      	subs	r2, r2, r3
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	1aca      	subs	r2, r1, r3
 8000c90:	00d3      	lsls	r3, r2, #3
 8000c92:	4403      	add	r3, r0
 8000c94:	ed93 6b00 	vldr	d6, [r3]
 8000c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c9a:	1c9a      	adds	r2, r3, #2
 8000c9c:	4b5c      	ldr	r3, [pc, #368]	; (8000e10 <inv+0x2b8>)
 8000c9e:	fb83 3102 	smull	r3, r1, r3, r2
 8000ca2:	17d3      	asrs	r3, r2, #31
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	440b      	add	r3, r1
 8000cac:	1ad1      	subs	r1, r2, r3
 8000cae:	460a      	mov	r2, r1
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	1898      	adds	r0, r3, r2
 8000cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cc0:	1c99      	adds	r1, r3, #2
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <inv+0x2b8>)
 8000cc4:	fb83 3201 	smull	r3, r2, r3, r1
 8000cc8:	17cb      	asrs	r3, r1, #31
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	1aca      	subs	r2, r1, r3
 8000cd4:	00d3      	lsls	r3, r2, #3
 8000cd6:	4403      	add	r3, r0
 8000cd8:	ed93 7b00 	vldr	d7, [r3]
 8000cdc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	4b4a      	ldr	r3, [pc, #296]	; (8000e10 <inv+0x2b8>)
 8000ce6:	fb83 3102 	smull	r3, r1, r3, r2
 8000cea:	17d3      	asrs	r3, r2, #31
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	460b      	mov	r3, r1
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	440b      	add	r3, r1
 8000cf4:	1ad1      	subs	r1, r2, r3
 8000cf6:	460a      	mov	r2, r1
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	1898      	adds	r0, r3, r2
 8000d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d08:	1c99      	adds	r1, r3, #2
 8000d0a:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <inv+0x2b8>)
 8000d0c:	fb83 3201 	smull	r3, r2, r3, r1
 8000d10:	17cb      	asrs	r3, r1, #31
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	1aca      	subs	r2, r1, r3
 8000d1c:	00d3      	lsls	r3, r2, #3
 8000d1e:	4403      	add	r3, r0
 8000d20:	ed93 5b00 	vldr	d5, [r3]
 8000d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d26:	1c9a      	adds	r2, r3, #2
 8000d28:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <inv+0x2b8>)
 8000d2a:	fb83 3102 	smull	r3, r1, r3, r2
 8000d2e:	17d3      	asrs	r3, r2, #31
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	460b      	mov	r3, r1
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	440b      	add	r3, r1
 8000d38:	1ad1      	subs	r1, r2, r3
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	461a      	mov	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	1898      	adds	r0, r3, r2
 8000d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d4c:	1c59      	adds	r1, r3, #1
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <inv+0x2b8>)
 8000d50:	fb83 3201 	smull	r3, r2, r3, r1
 8000d54:	17cb      	asrs	r3, r1, #31
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	1aca      	subs	r2, r1, r3
 8000d60:	00d3      	lsls	r3, r2, #3
 8000d62:	4403      	add	r3, r0
 8000d64:	ed93 7b00 	vldr	d7, [r3]
 8000d68:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	3370      	adds	r3, #112	; 0x70
 8000d80:	443b      	add	r3, r7
 8000d82:	3b68      	subs	r3, #104	; 0x68
 8000d84:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; j++) {
 8000d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	f77f af5f 	ble.w	8000c54 <inv+0xfc>
	for (int i = 0; i < 3; i++) {
 8000d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d98:	3301      	adds	r3, #1
 8000d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8000d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	f77f af55 	ble.w	8000c4e <inv+0xf6>
		}
	}

	// Calculamos la matriz inversa
	for (int i = 0; i < 3; i++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	65bb      	str	r3, [r7, #88]	; 0x58
 8000da8:	e028      	b.n	8000dfc <inv+0x2a4>
		for (int j = 0; j < 3; j++) {
 8000daa:	2300      	movs	r3, #0
 8000dac:	657b      	str	r3, [r7, #84]	; 0x54
 8000dae:	e01f      	b.n	8000df0 <inv+0x298>
			A_inv[i][j] = adj[i][j] / det;
 8000db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	3370      	adds	r3, #112	; 0x70
 8000dc0:	443b      	add	r3, r7
 8000dc2:	3b68      	subs	r3, #104	; 0x68
 8000dc4:	ed93 5b00 	vldr	d5, [r3]
 8000dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	441a      	add	r2, r3
 8000dd8:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8000ddc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4413      	add	r3, r2
 8000de6:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; j++) {
 8000dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dec:	3301      	adds	r3, #1
 8000dee:	657b      	str	r3, [r7, #84]	; 0x54
 8000df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	dddc      	ble.n	8000db0 <inv+0x258>
	for (int i = 0; i < 3; i++) {
 8000df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000df8:	3301      	adds	r3, #1
 8000dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	ddd3      	ble.n	8000daa <inv+0x252>
 8000e02:	e000      	b.n	8000e06 <inv+0x2ae>
		return;
 8000e04:	bf00      	nop
		}
	}
}
 8000e06:	3774      	adds	r7, #116	; 0x74
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	55555556 	.word	0x55555556

08000e14 <matrixProduct>:

void matrixProduct(double A[3][3], double B[3][3], double product[3][3]) {
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
    int i, j, k;

    for(i = 0; i < 3; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	e05d      	b.n	8000ee2 <matrixProduct+0xce>
        for(j = 0; j < 3; j++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	e054      	b.n	8000ed6 <matrixProduct+0xc2>
        	product[i][j] = 0;
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	18d1      	adds	r1, r2, r3
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	e9c1 2300 	strd	r2, r3, [r1]
            for(k = 0; k < 3; k++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	e03a      	b.n	8000eca <matrixProduct+0xb6>
            	product[i][j] += A[i][k] * B[k][j];
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	441a      	add	r2, r3
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	ed93 6b00 	vldr	d6, [r3]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	441a      	add	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	ed93 5b00 	vldr	d5, [r3]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	461a      	mov	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	441a      	add	r2, r3
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	ed93 7b00 	vldr	d7, [r3]
 8000ea2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	441a      	add	r2, r3
 8000eb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	ed83 7b00 	vstr	d7, [r3]
            for(k = 0; k < 3; k++) {
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	ddc1      	ble.n	8000e54 <matrixProduct+0x40>
        for(j = 0; j < 3; j++) {
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	dda7      	ble.n	8000e2c <matrixProduct+0x18>
    for(i = 0; i < 3; i++) {
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	dd9e      	ble.n	8000e26 <matrixProduct+0x12>
            }
        }
    }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0e:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a72      	ldr	r2, [pc, #456]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b70      	ldr	r3, [pc, #448]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b6c      	ldr	r3, [pc, #432]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	4a6b      	ldr	r2, [pc, #428]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3c:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4a:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a63      	ldr	r2, [pc, #396]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b61      	ldr	r3, [pc, #388]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f68:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	4a5c      	ldr	r2, [pc, #368]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f78:	4b59      	ldr	r3, [pc, #356]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b56      	ldr	r3, [pc, #344]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f96:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <MX_GPIO_Init+0x1e8>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000fe6:	483f      	ldr	r0, [pc, #252]	; (80010e4 <MX_GPIO_Init+0x1ec>)
 8000fe8:	f006 fca0 	bl	800792c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2170      	movs	r1, #112	; 0x70
 8000ff0:	483d      	ldr	r0, [pc, #244]	; (80010e8 <MX_GPIO_Init+0x1f0>)
 8000ff2:	f006 fc9b 	bl	800792c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000ff6:	233f      	movs	r3, #63	; 0x3f
 8000ff8:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4838      	ldr	r0, [pc, #224]	; (80010ec <MX_GPIO_Init+0x1f4>)
 800100c:	f006 fac6 	bl	800759c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101c:	2302      	movs	r3, #2
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	482f      	ldr	r0, [pc, #188]	; (80010e4 <MX_GPIO_Init+0x1ec>)
 8001028:	f006 fab8 	bl	800759c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 800102c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <MX_GPIO_Init+0x1ec>)
 8001046:	f006 faa9 	bl	800759c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 800104a:	2370      	movs	r3, #112	; 0x70
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4821      	ldr	r0, [pc, #132]	; (80010e8 <MX_GPIO_Init+0x1f0>)
 8001062:	f006 fa9b 	bl	800759c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2101      	movs	r1, #1
 800106a:	2006      	movs	r0, #6
 800106c:	f005 fcef 	bl	8006a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001070:	2006      	movs	r0, #6
 8001072:	f005 fd06 	bl	8006a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2101      	movs	r1, #1
 800107a:	2007      	movs	r0, #7
 800107c:	f005 fce7 	bl	8006a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001080:	2007      	movs	r0, #7
 8001082:	f005 fcfe 	bl	8006a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	2008      	movs	r0, #8
 800108c:	f005 fcdf 	bl	8006a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001090:	2008      	movs	r0, #8
 8001092:	f005 fcf6 	bl	8006a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2101      	movs	r1, #1
 800109a:	2009      	movs	r0, #9
 800109c:	f005 fcd7 	bl	8006a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010a0:	2009      	movs	r0, #9
 80010a2:	f005 fcee 	bl	8006a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	200a      	movs	r0, #10
 80010ac:	f005 fccf 	bl	8006a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f005 fce6 	bl	8006a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	2017      	movs	r0, #23
 80010bc:	f005 fcc7 	bl	8006a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010c0:	2017      	movs	r0, #23
 80010c2:	f005 fcde 	bl	8006a82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2102      	movs	r1, #2
 80010ca:	2028      	movs	r0, #40	; 0x28
 80010cc:	f005 fcbf 	bl	8006a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d0:	2028      	movs	r0, #40	; 0x28
 80010d2:	f005 fcd6 	bl	8006a82 <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020800 	.word	0x58020800
 80010e8:	58020c00 	.word	0x58020c00
 80010ec:	58021000 	.word	0x58021000

080010f0 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

	homAprox = true;
 80010f4:	4bba      	ldr	r3, [pc, #744]	; (80013e0 <homing+0x2f0>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
	homStart = true;
 80010fa:	4bba      	ldr	r3, [pc, #744]	; (80013e4 <homing+0x2f4>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8001100:	4bb9      	ldr	r3, [pc, #740]	; (80013e8 <homing+0x2f8>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2020 	strb.w	r2, [r3, #32]
    motor2.hom = false;
 8001108:	4bb8      	ldr	r3, [pc, #736]	; (80013ec <homing+0x2fc>)
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2020 	strb.w	r2, [r3, #32]
    motor3.hom = false;
 8001110:	4bb7      	ldr	r3, [pc, #732]	; (80013f0 <homing+0x300>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2020 	strb.w	r2, [r3, #32]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	48b5      	ldr	r0, [pc, #724]	; (80013f4 <homing+0x304>)
 8001120:	f006 fc04 	bl	800792c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	48b2      	ldr	r0, [pc, #712]	; (80013f4 <homing+0x304>)
 800112c:	f006 fbfe 	bl	800792c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	48af      	ldr	r0, [pc, #700]	; (80013f4 <homing+0x304>)
 8001138:	f006 fbf8 	bl	800792c <HAL_GPIO_WritePin>

	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800113c:	2100      	movs	r1, #0
 800113e:	48ae      	ldr	r0, [pc, #696]	; (80013f8 <homing+0x308>)
 8001140:	f009 fd42 	bl	800abc8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);
 8001144:	2104      	movs	r1, #4
 8001146:	48ac      	ldr	r0, [pc, #688]	; (80013f8 <homing+0x308>)
 8001148:	f009 fd3e 	bl	800abc8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_3);
 800114c:	2108      	movs	r1, #8
 800114e:	48aa      	ldr	r0, [pc, #680]	; (80013f8 <homing+0x308>)
 8001150:	f009 fd3a 	bl	800abc8 <HAL_TIM_IC_Stop_DMA>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8001154:	2006      	movs	r0, #6
 8001156:	f005 fca2 	bl	8006a9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 800115a:	2007      	movs	r0, #7
 800115c:	f005 fc9f 	bl	8006a9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001160:	2008      	movs	r0, #8
 8001162:	f005 fc9c 	bl	8006a9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8001166:	2009      	movs	r0, #9
 8001168:	f005 fc99 	bl	8006a9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 800116c:	200a      	movs	r0, #10
 800116e:	f005 fc96 	bl	8006a9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001172:	2017      	movs	r0, #23
 8001174:	f005 fc93 	bl	8006a9e <HAL_NVIC_DisableIRQ>

    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8001178:	2100      	movs	r1, #0
 800117a:	48a0      	ldr	r0, [pc, #640]	; (80013fc <homing+0x30c>)
 800117c:	f009 fa6c 	bl	800a658 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8001180:	2100      	movs	r1, #0
 8001182:	489f      	ldr	r0, [pc, #636]	; (8001400 <homing+0x310>)
 8001184:	f009 fa68 	bl	800a658 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8001188:	2100      	movs	r1, #0
 800118a:	489e      	ldr	r0, [pc, #632]	; (8001404 <homing+0x314>)
 800118c:	f009 fa64 	bl	800a658 <HAL_TIM_PWM_Stop>
	motor1.counterPeriod =  COUNTERPERIOD(rpm);
	motor2.counterPeriod =  COUNTERPERIOD(rpm);
	motor3.counterPeriod =  COUNTERPERIOD(rpm);
	*/

	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm)); //Escritura del registro ARR
 8001190:	4b9d      	ldr	r3, [pc, #628]	; (8001408 <homing+0x318>)
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800119c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80011a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011a4:	ed9f 5b88 	vldr	d5, [pc, #544]	; 80013c8 <homing+0x2d8>
 80011a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011ac:	4b97      	ldr	r3, [pc, #604]	; (800140c <homing+0x31c>)
 80011ae:	ed93 7b00 	vldr	d7, [r3]
 80011b2:	ed9f 5b87 	vldr	d5, [pc, #540]	; 80013d0 <homing+0x2e0>
 80011b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011ba:	ed9f 4b87 	vldr	d4, [pc, #540]	; 80013d8 <homing+0x2e8>
 80011be:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80011c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011c6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80011ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80011ce:	4b8b      	ldr	r3, [pc, #556]	; (80013fc <homing+0x30c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011d6:	ee17 2a90 	vmov	r2, s15
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
 80011dc:	4b8a      	ldr	r3, [pc, #552]	; (8001408 <homing+0x318>)
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80011ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011f0:	ed9f 5b75 	vldr	d5, [pc, #468]	; 80013c8 <homing+0x2d8>
 80011f4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <homing+0x31c>)
 80011fa:	ed93 7b00 	vldr	d7, [r3]
 80011fe:	ed9f 5b74 	vldr	d5, [pc, #464]	; 80013d0 <homing+0x2e0>
 8001202:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001206:	ed9f 4b74 	vldr	d4, [pc, #464]	; 80013d8 <homing+0x2e8>
 800120a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800120e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001212:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001216:	ee37 7b46 	vsub.f64	d7, d7, d6
 800121a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800121e:	ee17 2a90 	vmov	r2, s15
 8001222:	4b76      	ldr	r3, [pc, #472]	; (80013fc <homing+0x30c>)
 8001224:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8001226:	4b78      	ldr	r3, [pc, #480]	; (8001408 <homing+0x318>)
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001232:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001236:	ee37 7b06 	vadd.f64	d7, d7, d6
 800123a:	ed9f 5b63 	vldr	d5, [pc, #396]	; 80013c8 <homing+0x2d8>
 800123e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001242:	4b72      	ldr	r3, [pc, #456]	; (800140c <homing+0x31c>)
 8001244:	ed93 7b00 	vldr	d7, [r3]
 8001248:	ed9f 5b61 	vldr	d5, [pc, #388]	; 80013d0 <homing+0x2e0>
 800124c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001250:	ed9f 4b61 	vldr	d4, [pc, #388]	; 80013d8 <homing+0x2e8>
 8001254:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001258:	ee26 7b07 	vmul.f64	d7, d6, d7
 800125c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001260:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001264:	4b66      	ldr	r3, [pc, #408]	; (8001400 <homing+0x310>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800126c:	ee17 2a90 	vmov	r2, s15
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
 8001272:	4b65      	ldr	r3, [pc, #404]	; (8001408 <homing+0x318>)
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800127e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001282:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001286:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80013c8 <homing+0x2d8>
 800128a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <homing+0x31c>)
 8001290:	ed93 7b00 	vldr	d7, [r3]
 8001294:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80013d0 <homing+0x2e0>
 8001298:	ee27 5b05 	vmul.f64	d5, d7, d5
 800129c:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 80013d8 <homing+0x2e8>
 80012a0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80012a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	4b51      	ldr	r3, [pc, #324]	; (8001400 <homing+0x310>)
 80012ba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 80012bc:	4b52      	ldr	r3, [pc, #328]	; (8001408 <homing+0x318>)
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80012c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012d0:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 80013c8 <homing+0x2d8>
 80012d4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <homing+0x31c>)
 80012da:	ed93 7b00 	vldr	d7, [r3]
 80012de:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80013d0 <homing+0x2e0>
 80012e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012e6:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 80013d8 <homing+0x2e8>
 80012ea:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80012ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <homing+0x314>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <homing+0x318>)
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001314:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001318:	ee37 7b06 	vadd.f64	d7, d7, d6
 800131c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80013c8 <homing+0x2d8>
 8001320:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <homing+0x31c>)
 8001326:	ed93 7b00 	vldr	d7, [r3]
 800132a:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80013d0 <homing+0x2e0>
 800132e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001332:	ed9f 4b29 	vldr	d4, [pc, #164]	; 80013d8 <homing+0x2e8>
 8001336:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800133a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800133e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001342:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001346:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800134a:	ee17 2a90 	vmov	r2, s15
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <homing+0x314>)
 8001350:	60da      	str	r2, [r3, #12]

	__HAL_TIM_SET_AUTORELOAD(&htim2,3000); //Escritura del registro ARR
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <homing+0x308>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
 800135c:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <homing+0x308>)
 800135e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001362:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <homing+0x318>)
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001370:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001374:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <homing+0x318>)
 800137a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800137e:	ee17 2a90 	vmov	r2, s15
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <homing+0x320>)
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001390:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001394:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <homing+0x320>)
 800139a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800139e:	ee17 2a90 	vmov	r2, s15
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <homing+0x324>)
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80013b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <homing+0x324>)
 80013ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013be:	ee17 2a90 	vmov	r2, s15
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 80013c4:	e070      	b.n	80014a8 <homing+0x3b8>
 80013c6:	bf00      	nop
 80013c8:	00000000 	.word	0x00000000
 80013cc:	418e8480 	.word	0x418e8480
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40bf4000 	.word	0x40bf4000
 80013d8:	00000000 	.word	0x00000000
 80013dc:	404e0000 	.word	0x404e0000
 80013e0:	240002ec 	.word	0x240002ec
 80013e4:	240002ed 	.word	0x240002ed
 80013e8:	24000630 	.word	0x24000630
 80013ec:	24000670 	.word	0x24000670
 80013f0:	240006b0 	.word	0x240006b0
 80013f4:	58020800 	.word	0x58020800
 80013f8:	240007fc 	.word	0x240007fc
 80013fc:	2400092c 	.word	0x2400092c
 8001400:	24000978 	.word	0x24000978
 8001404:	240009c4 	.word	0x240009c4
 8001408:	40001800 	.word	0x40001800
 800140c:	24000000 	.word	0x24000000
 8001410:	40001c00 	.word	0x40001c00
 8001414:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 8001418:	2100      	movs	r1, #0
 800141a:	4890      	ldr	r0, [pc, #576]	; (800165c <homing+0x56c>)
 800141c:	f009 f80e 	bl	800a43c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8001420:	2100      	movs	r1, #0
 8001422:	488f      	ldr	r0, [pc, #572]	; (8001660 <homing+0x570>)
 8001424:	f009 f80a 	bl	800a43c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8001428:	2100      	movs	r1, #0
 800142a:	488e      	ldr	r0, [pc, #568]	; (8001664 <homing+0x574>)
 800142c:	f009 f806 	bl	800a43c <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001430:	2101      	movs	r1, #1
 8001432:	488d      	ldr	r0, [pc, #564]	; (8001668 <homing+0x578>)
 8001434:	f006 fa62 	bl	80078fc <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00d      	beq.n	800145a <homing+0x36a>
 800143e:	2104      	movs	r1, #4
 8001440:	4889      	ldr	r0, [pc, #548]	; (8001668 <homing+0x578>)
 8001442:	f006 fa5b 	bl	80078fc <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <homing+0x36a>
 800144c:	2110      	movs	r1, #16
 800144e:	4886      	ldr	r0, [pc, #536]	; (8001668 <homing+0x578>)
 8001450:	f006 fa54 	bl	80078fc <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d126      	bne.n	80014a8 <homing+0x3b8>
            HAL_Delay(30);
 800145a:	201e      	movs	r0, #30
 800145c:	f005 f9c8 	bl	80067f0 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001460:	2101      	movs	r1, #1
 8001462:	4881      	ldr	r0, [pc, #516]	; (8001668 <homing+0x578>)
 8001464:	f006 fa4a 	bl	80078fc <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00d      	beq.n	800148a <homing+0x39a>
 800146e:	2104      	movs	r1, #4
 8001470:	487d      	ldr	r0, [pc, #500]	; (8001668 <homing+0x578>)
 8001472:	f006 fa43 	bl	80078fc <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <homing+0x39a>
 800147c:	2110      	movs	r1, #16
 800147e:	487a      	ldr	r0, [pc, #488]	; (8001668 <homing+0x578>)
 8001480:	f006 fa3c 	bl	80078fc <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10e      	bne.n	80014a8 <homing+0x3b8>

                Stop_PWM_MOTOR_1;
 800148a:	2100      	movs	r1, #0
 800148c:	4873      	ldr	r0, [pc, #460]	; (800165c <homing+0x56c>)
 800148e:	f009 f8e3 	bl	800a658 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8001492:	2100      	movs	r1, #0
 8001494:	4872      	ldr	r0, [pc, #456]	; (8001660 <homing+0x570>)
 8001496:	f009 f8df 	bl	800a658 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 800149a:	2100      	movs	r1, #0
 800149c:	4871      	ldr	r0, [pc, #452]	; (8001664 <homing+0x574>)
 800149e:	f009 f8db 	bl	800a658 <HAL_TIM_PWM_Stop>

                homAprox = false;
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <homing+0x57c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 80014a8:	4b70      	ldr	r3, [pc, #448]	; (800166c <homing+0x57c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1b3      	bne.n	8001418 <homing+0x328>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 80014b0:	e14d      	b.n	800174e <homing+0x65e>

        if (ES1s_PRESSED && !motor1.hom) {
 80014b2:	2101      	movs	r1, #1
 80014b4:	486c      	ldr	r0, [pc, #432]	; (8001668 <homing+0x578>)
 80014b6:	f006 fa21 	bl	80078fc <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d159      	bne.n	8001574 <homing+0x484>
 80014c0:	4b6b      	ldr	r3, [pc, #428]	; (8001670 <homing+0x580>)
 80014c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d154      	bne.n	8001574 <homing+0x484>

            Stop_PWM_MOTOR_2;
 80014ca:	2100      	movs	r1, #0
 80014cc:	4864      	ldr	r0, [pc, #400]	; (8001660 <homing+0x570>)
 80014ce:	f009 f8c3 	bl	800a658 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80014d2:	2100      	movs	r1, #0
 80014d4:	4863      	ldr	r0, [pc, #396]	; (8001664 <homing+0x574>)
 80014d6:	f009 f8bf 	bl	800a658 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80014da:	201e      	movs	r0, #30
 80014dc:	f005 f988 	bl	80067f0 <HAL_Delay>

            while(ES1s_PRESSED){
 80014e0:	e010      	b.n	8001504 <homing+0x414>

                negative_Dir_MOTOR_1;
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e8:	4862      	ldr	r0, [pc, #392]	; (8001674 <homing+0x584>)
 80014ea:	f006 fa1f 	bl	800792c <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80014ee:	2000      	movs	r0, #0
 80014f0:	f005 f97e 	bl	80067f0 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80014f4:	2100      	movs	r1, #0
 80014f6:	4859      	ldr	r0, [pc, #356]	; (800165c <homing+0x56c>)
 80014f8:	f008 ffa0 	bl	800a43c <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80014fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001500:	f005 f976 	bl	80067f0 <HAL_Delay>
            while(ES1s_PRESSED){
 8001504:	2101      	movs	r1, #1
 8001506:	4858      	ldr	r0, [pc, #352]	; (8001668 <homing+0x578>)
 8001508:	f006 f9f8 	bl	80078fc <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0e7      	beq.n	80014e2 <homing+0x3f2>

            }

            Stop_PWM_MOTOR_1;
 8001512:	2100      	movs	r1, #0
 8001514:	4851      	ldr	r0, [pc, #324]	; (800165c <homing+0x56c>)
 8001516:	f009 f89f 	bl	800a658 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 800151a:	4b55      	ldr	r3, [pc, #340]	; (8001670 <homing+0x580>)
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 8001522:	2364      	movs	r3, #100	; 0x64
 8001524:	2204      	movs	r2, #4
 8001526:	4954      	ldr	r1, [pc, #336]	; (8001678 <homing+0x588>)
 8001528:	4854      	ldr	r0, [pc, #336]	; (800167c <homing+0x58c>)
 800152a:	f00a fe5f 	bl	800c1ec <HAL_UART_Transmit>
            HAL_Delay(30);
 800152e:	201e      	movs	r0, #30
 8001530:	f005 f95e 	bl	80067f0 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001534:	2104      	movs	r1, #4
 8001536:	484c      	ldr	r0, [pc, #304]	; (8001668 <homing+0x578>)
 8001538:	f006 f9e0 	bl	80078fc <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <homing+0x464>
 8001542:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <homing+0x590>)
 8001544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <homing+0x464>
 800154c:	2100      	movs	r1, #0
 800154e:	4844      	ldr	r0, [pc, #272]	; (8001660 <homing+0x570>)
 8001550:	f008 ff74 	bl	800a43c <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001554:	2110      	movs	r1, #16
 8001556:	4844      	ldr	r0, [pc, #272]	; (8001668 <homing+0x578>)
 8001558:	f006 f9d0 	bl	80078fc <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <homing+0x484>
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <homing+0x594>)
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d103      	bne.n	8001574 <homing+0x484>
 800156c:	2100      	movs	r1, #0
 800156e:	483d      	ldr	r0, [pc, #244]	; (8001664 <homing+0x574>)
 8001570:	f008 ff64 	bl	800a43c <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001574:	2104      	movs	r1, #4
 8001576:	483c      	ldr	r0, [pc, #240]	; (8001668 <homing+0x578>)
 8001578:	f006 f9c0 	bl	80078fc <HAL_GPIO_ReadPin>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d159      	bne.n	8001636 <homing+0x546>
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <homing+0x590>)
 8001584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d154      	bne.n	8001636 <homing+0x546>

            Stop_PWM_MOTOR_1;
 800158c:	2100      	movs	r1, #0
 800158e:	4833      	ldr	r0, [pc, #204]	; (800165c <homing+0x56c>)
 8001590:	f009 f862 	bl	800a658 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001594:	2100      	movs	r1, #0
 8001596:	4833      	ldr	r0, [pc, #204]	; (8001664 <homing+0x574>)
 8001598:	f009 f85e 	bl	800a658 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 800159c:	201e      	movs	r0, #30
 800159e:	f005 f927 	bl	80067f0 <HAL_Delay>

            while(ES2s_PRESSED){
 80015a2:	e010      	b.n	80015c6 <homing+0x4d6>

                negative_Dir_MOTOR_2;
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015aa:	4832      	ldr	r0, [pc, #200]	; (8001674 <homing+0x584>)
 80015ac:	f006 f9be 	bl	800792c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f005 f91d 	bl	80067f0 <HAL_Delay>
                Start_PWM_MOTOR_2;
 80015b6:	2100      	movs	r1, #0
 80015b8:	4829      	ldr	r0, [pc, #164]	; (8001660 <homing+0x570>)
 80015ba:	f008 ff3f 	bl	800a43c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80015be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c2:	f005 f915 	bl	80067f0 <HAL_Delay>
            while(ES2s_PRESSED){
 80015c6:	2104      	movs	r1, #4
 80015c8:	4827      	ldr	r0, [pc, #156]	; (8001668 <homing+0x578>)
 80015ca:	f006 f997 	bl	80078fc <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0e7      	beq.n	80015a4 <homing+0x4b4>

            }

            Stop_PWM_MOTOR_2;
 80015d4:	2100      	movs	r1, #0
 80015d6:	4822      	ldr	r0, [pc, #136]	; (8001660 <homing+0x570>)
 80015d8:	f009 f83e 	bl	800a658 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <homing+0x590>)
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	2204      	movs	r2, #4
 80015e8:	4927      	ldr	r1, [pc, #156]	; (8001688 <homing+0x598>)
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <homing+0x58c>)
 80015ec:	f00a fdfe 	bl	800c1ec <HAL_UART_Transmit>
            HAL_Delay(30);
 80015f0:	201e      	movs	r0, #30
 80015f2:	f005 f8fd 	bl	80067f0 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80015f6:	2101      	movs	r1, #1
 80015f8:	481b      	ldr	r0, [pc, #108]	; (8001668 <homing+0x578>)
 80015fa:	f006 f97f 	bl	80078fc <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <homing+0x526>
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <homing+0x580>)
 8001606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d103      	bne.n	8001616 <homing+0x526>
 800160e:	2100      	movs	r1, #0
 8001610:	4812      	ldr	r0, [pc, #72]	; (800165c <homing+0x56c>)
 8001612:	f008 ff13 	bl	800a43c <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001616:	2110      	movs	r1, #16
 8001618:	4813      	ldr	r0, [pc, #76]	; (8001668 <homing+0x578>)
 800161a:	f006 f96f 	bl	80078fc <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <homing+0x546>
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <homing+0x594>)
 8001626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <homing+0x546>
 800162e:	2100      	movs	r1, #0
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <homing+0x574>)
 8001632:	f008 ff03 	bl	800a43c <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001636:	2110      	movs	r1, #16
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <homing+0x578>)
 800163a:	f006 f95f 	bl	80078fc <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d16c      	bne.n	800171e <homing+0x62e>

            Stop_PWM_MOTOR_1;
 8001644:	2100      	movs	r1, #0
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <homing+0x56c>)
 8001648:	f009 f806 	bl	800a658 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 800164c:	2100      	movs	r1, #0
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <homing+0x570>)
 8001650:	f009 f802 	bl	800a658 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001654:	201e      	movs	r0, #30
 8001656:	f005 f8cb 	bl	80067f0 <HAL_Delay>

            while(ES3s_PRESSED){
 800165a:	e028      	b.n	80016ae <homing+0x5be>
 800165c:	2400092c 	.word	0x2400092c
 8001660:	24000978 	.word	0x24000978
 8001664:	240009c4 	.word	0x240009c4
 8001668:	58021000 	.word	0x58021000
 800166c:	240002ec 	.word	0x240002ec
 8001670:	24000630 	.word	0x24000630
 8001674:	58020800 	.word	0x58020800
 8001678:	08011e18 	.word	0x08011e18
 800167c:	24000bdc 	.word	0x24000bdc
 8001680:	24000670 	.word	0x24000670
 8001684:	240006b0 	.word	0x240006b0
 8001688:	08011e1c 	.word	0x08011e1c

                negative_Dir_MOTOR_3;
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001692:	4833      	ldr	r0, [pc, #204]	; (8001760 <homing+0x670>)
 8001694:	f006 f94a 	bl	800792c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001698:	2000      	movs	r0, #0
 800169a:	f005 f8a9 	bl	80067f0 <HAL_Delay>
                Start_PWM_MOTOR_3;
 800169e:	2100      	movs	r1, #0
 80016a0:	4830      	ldr	r0, [pc, #192]	; (8001764 <homing+0x674>)
 80016a2:	f008 fecb 	bl	800a43c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80016a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016aa:	f005 f8a1 	bl	80067f0 <HAL_Delay>
            while(ES3s_PRESSED){
 80016ae:	2110      	movs	r1, #16
 80016b0:	482d      	ldr	r0, [pc, #180]	; (8001768 <homing+0x678>)
 80016b2:	f006 f923 	bl	80078fc <HAL_GPIO_ReadPin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0e7      	beq.n	800168c <homing+0x59c>
            }

            Stop_PWM_MOTOR_3;
 80016bc:	2100      	movs	r1, #0
 80016be:	4829      	ldr	r0, [pc, #164]	; (8001764 <homing+0x674>)
 80016c0:	f008 ffca 	bl	800a658 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <homing+0x67c>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	2204      	movs	r2, #4
 80016d0:	4927      	ldr	r1, [pc, #156]	; (8001770 <homing+0x680>)
 80016d2:	4828      	ldr	r0, [pc, #160]	; (8001774 <homing+0x684>)
 80016d4:	f00a fd8a 	bl	800c1ec <HAL_UART_Transmit>
			HAL_Delay(30);
 80016d8:	201e      	movs	r0, #30
 80016da:	f005 f889 	bl	80067f0 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80016de:	2101      	movs	r1, #1
 80016e0:	4821      	ldr	r0, [pc, #132]	; (8001768 <homing+0x678>)
 80016e2:	f006 f90b 	bl	80078fc <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <homing+0x60e>
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <homing+0x688>)
 80016ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d103      	bne.n	80016fe <homing+0x60e>
 80016f6:	2100      	movs	r1, #0
 80016f8:	4820      	ldr	r0, [pc, #128]	; (800177c <homing+0x68c>)
 80016fa:	f008 fe9f 	bl	800a43c <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80016fe:	2104      	movs	r1, #4
 8001700:	4819      	ldr	r0, [pc, #100]	; (8001768 <homing+0x678>)
 8001702:	f006 f8fb 	bl	80078fc <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <homing+0x62e>
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <homing+0x690>)
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <homing+0x62e>
 8001716:	2100      	movs	r1, #0
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <homing+0x694>)
 800171a:	f008 fe8f 	bl	800a43c <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <homing+0x688>)
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d012      	beq.n	800174e <homing+0x65e>
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <homing+0x690>)
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00d      	beq.n	800174e <homing+0x65e>
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <homing+0x67c>)
 8001734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <homing+0x65e>
        	homFin=true;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <homing+0x698>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 8001742:	2364      	movs	r3, #100	; 0x64
 8001744:	2204      	movs	r2, #4
 8001746:	4911      	ldr	r1, [pc, #68]	; (800178c <homing+0x69c>)
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <homing+0x684>)
 800174a:	f00a fd4f 	bl	800c1ec <HAL_UART_Transmit>
    while (!homFin){
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <homing+0x698>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f43f aead 	beq.w	80014b2 <homing+0x3c2>
        }
       }


    }
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	58020800 	.word	0x58020800
 8001764:	240009c4 	.word	0x240009c4
 8001768:	58021000 	.word	0x58021000
 800176c:	240006b0 	.word	0x240006b0
 8001770:	08011e20 	.word	0x08011e20
 8001774:	24000bdc 	.word	0x24000bdc
 8001778:	24000630 	.word	0x24000630
 800177c:	2400092c 	.word	0x2400092c
 8001780:	24000670 	.word	0x24000670
 8001784:	24000978 	.word	0x24000978
 8001788:	24000721 	.word	0x24000721
 800178c:	08011e24 	.word	0x08011e24

08001790 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8001796:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <interpretaComando+0x1c0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b70      	cmp	r3, #112	; 0x70
 800179c:	d010      	beq.n	80017c0 <interpretaComando+0x30>
 800179e:	2b70      	cmp	r3, #112	; 0x70
 80017a0:	f300 80d1 	bgt.w	8001946 <interpretaComando+0x1b6>
 80017a4:	2b68      	cmp	r3, #104	; 0x68
 80017a6:	d007      	beq.n	80017b8 <interpretaComando+0x28>
 80017a8:	2b68      	cmp	r3, #104	; 0x68
 80017aa:	f300 80cc 	bgt.w	8001946 <interpretaComando+0x1b6>
 80017ae:	2b48      	cmp	r3, #72	; 0x48
 80017b0:	d002      	beq.n	80017b8 <interpretaComando+0x28>
 80017b2:	2b50      	cmp	r3, #80	; 0x50
 80017b4:	d004      	beq.n	80017c0 <interpretaComando+0x30>



	}

}
 80017b6:	e0c6      	b.n	8001946 <interpretaComando+0x1b6>
		state = HOME;
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <interpretaComando+0x1c4>)
 80017ba:	2203      	movs	r2, #3
 80017bc:	701a      	strb	r2, [r3, #0]
	break;
 80017be:	e0c2      	b.n	8001946 <interpretaComando+0x1b6>
		flagErrorEndStop = 0;
 80017c0:	4965      	ldr	r1, [pc, #404]	; (8001958 <interpretaComando+0x1c8>)
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 80017d6:	e0ac      	b.n	8001932 <interpretaComando+0x1a2>
			if(rx_buffer[i] == 'x'){
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	4a5d      	ldr	r2, [pc, #372]	; (8001950 <interpretaComando+0x1c0>)
 80017dc:	5cd3      	ldrb	r3, [r2, r3]
 80017de:	2b78      	cmp	r3, #120	; 0x78
 80017e0:	d133      	bne.n	800184a <interpretaComando+0xba>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80017e2:	e00c      	b.n	80017fe <interpretaComando+0x6e>
					auxString[j] = rx_buffer[i+1];
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	4959      	ldr	r1, [pc, #356]	; (8001950 <interpretaComando+0x1c0>)
 80017ec:	5c89      	ldrb	r1, [r1, r2]
 80017ee:	4a5b      	ldr	r2, [pc, #364]	; (800195c <interpretaComando+0x1cc>)
 80017f0:	54d1      	strb	r1, [r2, r3]
					j++;
 80017f2:	7bbb      	ldrb	r3, [r7, #14]
 80017f4:	3301      	adds	r3, #1
 80017f6:	73bb      	strb	r3, [r7, #14]
					i++;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	4a53      	ldr	r2, [pc, #332]	; (8001950 <interpretaComando+0x1c0>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	2b20      	cmp	r3, #32
 8001808:	d1ec      	bne.n	80017e4 <interpretaComando+0x54>
				Pfin.x = strtod(&auxString[0], NULL);
 800180a:	2100      	movs	r1, #0
 800180c:	4853      	ldr	r0, [pc, #332]	; (800195c <interpretaComando+0x1cc>)
 800180e:	f00d fdfd 	bl	800f40c <strtod>
 8001812:	eeb0 7b40 	vmov.f64	d7, d0
 8001816:	4b52      	ldr	r3, [pc, #328]	; (8001960 <interpretaComando+0x1d0>)
 8001818:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	e007      	b.n	8001832 <interpretaComando+0xa2>
					auxString[k] = 0;
 8001822:	4a4e      	ldr	r2, [pc, #312]	; (800195c <interpretaComando+0x1cc>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3301      	adds	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b0a      	cmp	r3, #10
 8001836:	ddf4      	ble.n	8001822 <interpretaComando+0x92>
				j=0;
 8001838:	2300      	movs	r3, #0
 800183a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 800183c:	2364      	movs	r3, #100	; 0x64
 800183e:	2207      	movs	r2, #7
 8001840:	4948      	ldr	r1, [pc, #288]	; (8001964 <interpretaComando+0x1d4>)
 8001842:	4849      	ldr	r0, [pc, #292]	; (8001968 <interpretaComando+0x1d8>)
 8001844:	f00a fcd2 	bl	800c1ec <HAL_UART_Transmit>
 8001848:	e070      	b.n	800192c <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'y'){
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	4a40      	ldr	r2, [pc, #256]	; (8001950 <interpretaComando+0x1c0>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	2b79      	cmp	r3, #121	; 0x79
 8001852:	d133      	bne.n	80018bc <interpretaComando+0x12c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001854:	e00c      	b.n	8001870 <interpretaComando+0xe0>
					auxString[j] = rx_buffer[i+1];
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	7bbb      	ldrb	r3, [r7, #14]
 800185c:	493c      	ldr	r1, [pc, #240]	; (8001950 <interpretaComando+0x1c0>)
 800185e:	5c89      	ldrb	r1, [r1, r2]
 8001860:	4a3e      	ldr	r2, [pc, #248]	; (800195c <interpretaComando+0x1cc>)
 8001862:	54d1      	strb	r1, [r2, r3]
					j++;
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	3301      	adds	r3, #1
 8001868:	73bb      	strb	r3, [r7, #14]
					i++;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3301      	adds	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	3301      	adds	r3, #1
 8001874:	4a36      	ldr	r2, [pc, #216]	; (8001950 <interpretaComando+0x1c0>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	2b20      	cmp	r3, #32
 800187a:	d1ec      	bne.n	8001856 <interpretaComando+0xc6>
				Pfin.y = strtod(&auxString[0], NULL);
 800187c:	2100      	movs	r1, #0
 800187e:	4837      	ldr	r0, [pc, #220]	; (800195c <interpretaComando+0x1cc>)
 8001880:	f00d fdc4 	bl	800f40c <strtod>
 8001884:	eeb0 7b40 	vmov.f64	d7, d0
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <interpretaComando+0x1d0>)
 800188a:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	e007      	b.n	80018a4 <interpretaComando+0x114>
					auxString[k] = 0;
 8001894:	4a31      	ldr	r2, [pc, #196]	; (800195c <interpretaComando+0x1cc>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3301      	adds	r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b0a      	cmp	r3, #10
 80018a8:	ddf4      	ble.n	8001894 <interpretaComando+0x104>
				j=0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	2207      	movs	r2, #7
 80018b2:	492e      	ldr	r1, [pc, #184]	; (800196c <interpretaComando+0x1dc>)
 80018b4:	482c      	ldr	r0, [pc, #176]	; (8001968 <interpretaComando+0x1d8>)
 80018b6:	f00a fc99 	bl	800c1ec <HAL_UART_Transmit>
 80018ba:	e037      	b.n	800192c <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'z'){
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4a24      	ldr	r2, [pc, #144]	; (8001950 <interpretaComando+0x1c0>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	2b7a      	cmp	r3, #122	; 0x7a
 80018c4:	d132      	bne.n	800192c <interpretaComando+0x19c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018c6:	e00c      	b.n	80018e2 <interpretaComando+0x152>
					auxString[j] = rx_buffer[i+1];
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	4920      	ldr	r1, [pc, #128]	; (8001950 <interpretaComando+0x1c0>)
 80018d0:	5c89      	ldrb	r1, [r1, r2]
 80018d2:	4a22      	ldr	r2, [pc, #136]	; (800195c <interpretaComando+0x1cc>)
 80018d4:	54d1      	strb	r1, [r2, r3]
					j++;
 80018d6:	7bbb      	ldrb	r3, [r7, #14]
 80018d8:	3301      	adds	r3, #1
 80018da:	73bb      	strb	r3, [r7, #14]
					i++;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	3301      	adds	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <interpretaComando+0x1c0>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d1ec      	bne.n	80018c8 <interpretaComando+0x138>
				Pfin.z = strtod(&auxString[0], NULL);
 80018ee:	2100      	movs	r1, #0
 80018f0:	481a      	ldr	r0, [pc, #104]	; (800195c <interpretaComando+0x1cc>)
 80018f2:	f00d fd8b 	bl	800f40c <strtod>
 80018f6:	eeb0 7b40 	vmov.f64	d7, d0
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <interpretaComando+0x1d0>)
 80018fc:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	e007      	b.n	8001916 <interpretaComando+0x186>
					auxString[k] = 0;
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <interpretaComando+0x1cc>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b0a      	cmp	r3, #10
 800191a:	ddf4      	ble.n	8001906 <interpretaComando+0x176>
				j=0;
 800191c:	2300      	movs	r3, #0
 800191e:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 8001920:	2364      	movs	r3, #100	; 0x64
 8001922:	2207      	movs	r2, #7
 8001924:	4912      	ldr	r1, [pc, #72]	; (8001970 <interpretaComando+0x1e0>)
 8001926:	4810      	ldr	r0, [pc, #64]	; (8001968 <interpretaComando+0x1d8>)
 8001928:	f00a fc60 	bl	800c1ec <HAL_UART_Transmit>
			i++;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	3301      	adds	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <interpretaComando+0x1c0>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f af4d 	bne.w	80017d8 <interpretaComando+0x48>
		receptionFlag = true;
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <interpretaComando+0x1e4>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
		break;
 8001944:	bf00      	nop
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	240007c4 	.word	0x240007c4
 8001954:	24000720 	.word	0x24000720
 8001958:	240007e8 	.word	0x240007e8
 800195c:	240002f0 	.word	0x240002f0
 8001960:	24000760 	.word	0x24000760
 8001964:	08011e28 	.word	0x08011e28
 8001968:	24000bdc 	.word	0x24000bdc
 800196c:	08011e30 	.word	0x08011e30
 8001970:	08011e38 	.word	0x08011e38
 8001974:	240007e3 	.word	0x240007e3

08001978 <inverseJacobian>:
double cross_P2[3];
double cross_P3[3];
double dot[3];


void inverseJacobian(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b09b      	sub	sp, #108	; 0x6c
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001982:	ed87 1b08 	vstr	d1, [r7, #32]
 8001986:	ed87 2b06 	vstr	d2, [r7, #24]
 800198a:	ed87 3b04 	vstr	d3, [r7, #16]
 800198e:	ed87 4b02 	vstr	d4, [r7, #8]
 8001992:	ed87 5b00 	vstr	d5, [r7]
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8001996:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800199a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800199e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80019a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	E1[0] = Pxaux + 0;
 80019ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b2:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001cc0 <inverseJacobian+0x348>
 80019b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019ba:	4bc9      	ldr	r3, [pc, #804]	; (8001ce0 <inverseJacobian+0x368>)
 80019bc:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 80019c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80019c4:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001cc8 <inverseJacobian+0x350>
 80019c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019cc:	4bc4      	ldr	r3, [pc, #784]	; (8001ce0 <inverseJacobian+0x368>)
 80019ce:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 80019d2:	49c3      	ldr	r1, [pc, #780]	; (8001ce0 <inverseJacobian+0x368>)
 80019d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019d8:	e9c1 2304 	strd	r2, r3, [r1, #16]

	E2[0] = Pxaux + 0.060621778264911;
 80019dc:	ed97 7b04 	vldr	d7, [r7, #16]
 80019e0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8001cd0 <inverseJacobian+0x358>
 80019e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019e8:	4bbe      	ldr	r3, [pc, #760]	; (8001ce4 <inverseJacobian+0x36c>)
 80019ea:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 80019ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80019f2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001cd8 <inverseJacobian+0x360>
 80019f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019fa:	4bba      	ldr	r3, [pc, #744]	; (8001ce4 <inverseJacobian+0x36c>)
 80019fc:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8001a00:	49b8      	ldr	r1, [pc, #736]	; (8001ce4 <inverseJacobian+0x36c>)
 8001a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a06:	e9c1 2304 	strd	r2, r3, [r1, #16]

	E3[0] = Pxaux - 0.060621778264911;
 8001a0a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a0e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8001cd0 <inverseJacobian+0x358>
 8001a12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a16:	4bb4      	ldr	r3, [pc, #720]	; (8001ce8 <inverseJacobian+0x370>)
 8001a18:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8001a1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a20:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001cd8 <inverseJacobian+0x360>
 8001a24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a28:	4baf      	ldr	r3, [pc, #700]	; (8001ce8 <inverseJacobian+0x370>)
 8001a2a:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8001a2e:	49ae      	ldr	r1, [pc, #696]	; (8001ce8 <inverseJacobian+0x370>)
 8001a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a34:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8001a38:	4bac      	ldr	r3, [pc, #688]	; (8001cec <inverseJacobian+0x374>)
 8001a3a:	ed93 6b00 	vldr	d6, [r3]
 8001a3e:	4bac      	ldr	r3, [pc, #688]	; (8001cf0 <inverseJacobian+0x378>)
 8001a40:	ed93 7b00 	vldr	d7, [r3]
 8001a44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a48:	4baa      	ldr	r3, [pc, #680]	; (8001cf4 <inverseJacobian+0x37c>)
 8001a4a:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8001a4e:	4baa      	ldr	r3, [pc, #680]	; (8001cf8 <inverseJacobian+0x380>)
 8001a50:	ed93 6b00 	vldr	d6, [r3]
 8001a54:	4ba6      	ldr	r3, [pc, #664]	; (8001cf0 <inverseJacobian+0x378>)
 8001a56:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a5e:	4ba5      	ldr	r3, [pc, #660]	; (8001cf4 <inverseJacobian+0x37c>)
 8001a60:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8001a64:	4ba5      	ldr	r3, [pc, #660]	; (8001cfc <inverseJacobian+0x384>)
 8001a66:	ed93 6b00 	vldr	d6, [r3]
 8001a6a:	4ba1      	ldr	r3, [pc, #644]	; (8001cf0 <inverseJacobian+0x378>)
 8001a6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001a70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a74:	4b9f      	ldr	r3, [pc, #636]	; (8001cf4 <inverseJacobian+0x37c>)
 8001a76:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8001a7a:	4ba1      	ldr	r3, [pc, #644]	; (8001d00 <inverseJacobian+0x388>)
 8001a7c:	ed93 6b00 	vldr	d6, [r3]
 8001a80:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <inverseJacobian+0x38c>)
 8001a82:	ed93 7b00 	vldr	d7, [r3]
 8001a86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a8a:	4b9a      	ldr	r3, [pc, #616]	; (8001cf4 <inverseJacobian+0x37c>)
 8001a8c:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8001a90:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <inverseJacobian+0x390>)
 8001a92:	ed93 6b00 	vldr	d6, [r3]
 8001a96:	4b9b      	ldr	r3, [pc, #620]	; (8001d04 <inverseJacobian+0x38c>)
 8001a98:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001aa0:	4b94      	ldr	r3, [pc, #592]	; (8001cf4 <inverseJacobian+0x37c>)
 8001aa2:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8001aa6:	4b99      	ldr	r3, [pc, #612]	; (8001d0c <inverseJacobian+0x394>)
 8001aa8:	ed93 6b00 	vldr	d6, [r3]
 8001aac:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <inverseJacobian+0x38c>)
 8001aae:	ed93 7b04 	vldr	d7, [r3, #16]
 8001ab2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ab6:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <inverseJacobian+0x37c>)
 8001ab8:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8001abc:	4b94      	ldr	r3, [pc, #592]	; (8001d10 <inverseJacobian+0x398>)
 8001abe:	ed93 6b00 	vldr	d6, [r3]
 8001ac2:	4b94      	ldr	r3, [pc, #592]	; (8001d14 <inverseJacobian+0x39c>)
 8001ac4:	ed93 7b00 	vldr	d7, [r3]
 8001ac8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001acc:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <inverseJacobian+0x37c>)
 8001ace:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8001ad2:	4b91      	ldr	r3, [pc, #580]	; (8001d18 <inverseJacobian+0x3a0>)
 8001ad4:	ed93 6b00 	vldr	d6, [r3]
 8001ad8:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <inverseJacobian+0x39c>)
 8001ada:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ade:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ae2:	4b84      	ldr	r3, [pc, #528]	; (8001cf4 <inverseJacobian+0x37c>)
 8001ae4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8001ae8:	4b8c      	ldr	r3, [pc, #560]	; (8001d1c <inverseJacobian+0x3a4>)
 8001aea:	ed93 6b00 	vldr	d6, [r3]
 8001aee:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <inverseJacobian+0x39c>)
 8001af0:	ed93 7b04 	vldr	d7, [r3, #16]
 8001af4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001af8:	4b7e      	ldr	r3, [pc, #504]	; (8001cf4 <inverseJacobian+0x37c>)
 8001afa:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 8001afe:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <inverseJacobian+0x368>)
 8001b00:	ed93 6b00 	vldr	d6, [r3]
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <inverseJacobian+0x374>)
 8001b06:	ed93 7b00 	vldr	d7, [r3]
 8001b0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b0e:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <inverseJacobian+0x3a8>)
 8001b10:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8001b14:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <inverseJacobian+0x368>)
 8001b16:	ed93 6b02 	vldr	d6, [r3, #8]
 8001b1a:	4b77      	ldr	r3, [pc, #476]	; (8001cf8 <inverseJacobian+0x380>)
 8001b1c:	ed93 7b00 	vldr	d7, [r3]
 8001b20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b24:	4b7e      	ldr	r3, [pc, #504]	; (8001d20 <inverseJacobian+0x3a8>)
 8001b26:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <inverseJacobian+0x368>)
 8001b2c:	ed93 6b04 	vldr	d6, [r3, #16]
 8001b30:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <inverseJacobian+0x384>)
 8001b32:	ed93 7b00 	vldr	d7, [r3]
 8001b36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b3a:	4b79      	ldr	r3, [pc, #484]	; (8001d20 <inverseJacobian+0x3a8>)
 8001b3c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8001b40:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <inverseJacobian+0x36c>)
 8001b42:	ed93 6b00 	vldr	d6, [r3]
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <inverseJacobian+0x388>)
 8001b48:	ed93 7b00 	vldr	d7, [r3]
 8001b4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b50:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <inverseJacobian+0x3a8>)
 8001b52:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <inverseJacobian+0x36c>)
 8001b58:	ed93 6b02 	vldr	d6, [r3, #8]
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <inverseJacobian+0x390>)
 8001b5e:	ed93 7b00 	vldr	d7, [r3]
 8001b62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b66:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <inverseJacobian+0x3a8>)
 8001b68:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 8001b6c:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <inverseJacobian+0x36c>)
 8001b6e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001b72:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <inverseJacobian+0x394>)
 8001b74:	ed93 7b00 	vldr	d7, [r3]
 8001b78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <inverseJacobian+0x3a8>)
 8001b7e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8001b82:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <inverseJacobian+0x370>)
 8001b84:	ed93 6b00 	vldr	d6, [r3]
 8001b88:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <inverseJacobian+0x398>)
 8001b8a:	ed93 7b00 	vldr	d7, [r3]
 8001b8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <inverseJacobian+0x3a8>)
 8001b94:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <inverseJacobian+0x370>)
 8001b9a:	ed93 6b02 	vldr	d6, [r3, #8]
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <inverseJacobian+0x3a0>)
 8001ba0:	ed93 7b00 	vldr	d7, [r3]
 8001ba4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ba8:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <inverseJacobian+0x3a8>)
 8001baa:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 8001bae:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <inverseJacobian+0x370>)
 8001bb0:	ed93 6b04 	vldr	d6, [r3, #16]
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <inverseJacobian+0x3a4>)
 8001bb6:	ed93 7b00 	vldr	d7, [r3]
 8001bba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bbe:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <inverseJacobian+0x3a8>)
 8001bc0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	matrixTranspose(l2, Jcd);//Jacobiano de la cinematica directa
 8001bc4:	4957      	ldr	r1, [pc, #348]	; (8001d24 <inverseJacobian+0x3ac>)
 8001bc6:	4856      	ldr	r0, [pc, #344]	; (8001d20 <inverseJacobian+0x3a8>)
 8001bc8:	f7fe ff8d 	bl	8000ae6 <matrixTranspose>


	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8001bcc:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <inverseJacobian+0x3b0>)
 8001bce:	ed93 6b02 	vldr	d6, [r3, #8]
 8001bd2:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <inverseJacobian+0x37c>)
 8001bd4:	ed93 7b04 	vldr	d7, [r3, #16]
 8001bd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001bdc:	4b52      	ldr	r3, [pc, #328]	; (8001d28 <inverseJacobian+0x3b0>)
 8001bde:	ed93 5b04 	vldr	d5, [r3, #16]
 8001be2:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <inverseJacobian+0x37c>)
 8001be4:	ed93 7b02 	vldr	d7, [r3, #8]
 8001be8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <inverseJacobian+0x3b4>)
 8001bf2:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8001bf6:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <inverseJacobian+0x3b0>)
 8001bf8:	ed93 6b04 	vldr	d6, [r3, #16]
 8001bfc:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <inverseJacobian+0x37c>)
 8001bfe:	ed93 7b00 	vldr	d7, [r3]
 8001c02:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c06:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <inverseJacobian+0x3b0>)
 8001c08:	ed93 5b00 	vldr	d5, [r3]
 8001c0c:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <inverseJacobian+0x37c>)
 8001c0e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001c12:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <inverseJacobian+0x3b4>)
 8001c1c:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8001c20:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <inverseJacobian+0x3b0>)
 8001c22:	ed93 6b00 	vldr	d6, [r3]
 8001c26:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <inverseJacobian+0x37c>)
 8001c28:	ed93 7b02 	vldr	d7, [r3, #8]
 8001c2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c30:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <inverseJacobian+0x3b0>)
 8001c32:	ed93 5b02 	vldr	d5, [r3, #8]
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <inverseJacobian+0x37c>)
 8001c38:	ed93 7b00 	vldr	d7, [r3]
 8001c3c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <inverseJacobian+0x3b4>)
 8001c46:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <inverseJacobian+0x3b8>)
 8001c4c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <inverseJacobian+0x37c>)
 8001c52:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c56:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c5a:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <inverseJacobian+0x3b8>)
 8001c5c:	ed93 5b04 	vldr	d5, [r3, #16]
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <inverseJacobian+0x37c>)
 8001c62:	ed93 7b08 	vldr	d7, [r3, #32]
 8001c66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <inverseJacobian+0x3bc>)
 8001c70:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <inverseJacobian+0x3b8>)
 8001c76:	ed93 6b04 	vldr	d6, [r3, #16]
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <inverseJacobian+0x37c>)
 8001c7c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001c80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <inverseJacobian+0x3b8>)
 8001c86:	ed93 5b00 	vldr	d5, [r3]
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <inverseJacobian+0x37c>)
 8001c8c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <inverseJacobian+0x3bc>)
 8001c9a:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <inverseJacobian+0x3b8>)
 8001ca0:	ed93 6b00 	vldr	d6, [r3]
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <inverseJacobian+0x37c>)
 8001ca6:	ed93 7b08 	vldr	d7, [r3, #32]
 8001caa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <inverseJacobian+0x3b8>)
 8001cb0:	ed93 5b02 	vldr	d5, [r3, #8]
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <inverseJacobian+0x37c>)
 8001cb6:	ed93 7b06 	vldr	d7, [r3, #24]
 8001cba:	e03d      	b.n	8001d38 <inverseJacobian+0x3c0>
 8001cbc:	f3af 8000 	nop.w
	...
 8001cc8:	1eb851ec 	.word	0x1eb851ec
 8001ccc:	3fb1eb85 	.word	0x3fb1eb85
 8001cd0:	562574c0 	.word	0x562574c0
 8001cd4:	3faf09d1 	.word	0x3faf09d1
 8001cd8:	1eb851ec 	.word	0x1eb851ec
 8001cdc:	3fa1eb85 	.word	0x3fa1eb85
 8001ce0:	24000300 	.word	0x24000300
 8001ce4:	24000318 	.word	0x24000318
 8001ce8:	24000330 	.word	0x24000330
 8001cec:	24000570 	.word	0x24000570
 8001cf0:	24000008 	.word	0x24000008
 8001cf4:	24000348 	.word	0x24000348
 8001cf8:	24000580 	.word	0x24000580
 8001cfc:	24000590 	.word	0x24000590
 8001d00:	240005b8 	.word	0x240005b8
 8001d04:	24000020 	.word	0x24000020
 8001d08:	240005c8 	.word	0x240005c8
 8001d0c:	240005d8 	.word	0x240005d8
 8001d10:	24000600 	.word	0x24000600
 8001d14:	24000038 	.word	0x24000038
 8001d18:	24000610 	.word	0x24000610
 8001d1c:	24000620 	.word	0x24000620
 8001d20:	24000390 	.word	0x24000390
 8001d24:	240003d8 	.word	0x240003d8
 8001d28:	24000050 	.word	0x24000050
 8001d2c:	240004f8 	.word	0x240004f8
 8001d30:	24000068 	.word	0x24000068
 8001d34:	24000510 	.word	0x24000510
 8001d38:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d40:	4b77      	ldr	r3, [pc, #476]	; (8001f20 <inverseJacobian+0x5a8>)
 8001d42:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 8001d46:	4b77      	ldr	r3, [pc, #476]	; (8001f24 <inverseJacobian+0x5ac>)
 8001d48:	ed93 6b02 	vldr	d6, [r3, #8]
 8001d4c:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <inverseJacobian+0x5b0>)
 8001d4e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001d52:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <inverseJacobian+0x5ac>)
 8001d58:	ed93 5b04 	vldr	d5, [r3, #16]
 8001d5c:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <inverseJacobian+0x5b0>)
 8001d5e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001d62:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d6a:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <inverseJacobian+0x5b4>)
 8001d6c:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 8001d70:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <inverseJacobian+0x5ac>)
 8001d72:	ed93 6b04 	vldr	d6, [r3, #16]
 8001d76:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <inverseJacobian+0x5b0>)
 8001d78:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001d7c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d80:	4b68      	ldr	r3, [pc, #416]	; (8001f24 <inverseJacobian+0x5ac>)
 8001d82:	ed93 5b00 	vldr	d5, [r3]
 8001d86:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <inverseJacobian+0x5b0>)
 8001d88:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001d8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d94:	4b65      	ldr	r3, [pc, #404]	; (8001f2c <inverseJacobian+0x5b4>)
 8001d96:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 8001d9a:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <inverseJacobian+0x5ac>)
 8001d9c:	ed93 6b00 	vldr	d6, [r3]
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <inverseJacobian+0x5b0>)
 8001da2:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001da6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001daa:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <inverseJacobian+0x5ac>)
 8001dac:	ed93 5b02 	vldr	d5, [r3, #8]
 8001db0:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <inverseJacobian+0x5b0>)
 8001db2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001db6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001dbe:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <inverseJacobian+0x5b4>)
 8001dc0:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = dotProduct(cross_P1, Jcd[0],3);			//Producto Punto
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	495a      	ldr	r1, [pc, #360]	; (8001f30 <inverseJacobian+0x5b8>)
 8001dc8:	485a      	ldr	r0, [pc, #360]	; (8001f34 <inverseJacobian+0x5bc>)
 8001dca:	f7fe fe57 	bl	8000a7c <dotProduct>
 8001dce:	eeb0 7b40 	vmov.f64	d7, d0
 8001dd2:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <inverseJacobian+0x5c0>)
 8001dd4:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = dotProduct(cross_P2, Jcd[1],3);
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4958      	ldr	r1, [pc, #352]	; (8001f3c <inverseJacobian+0x5c4>)
 8001ddc:	4850      	ldr	r0, [pc, #320]	; (8001f20 <inverseJacobian+0x5a8>)
 8001dde:	f7fe fe4d 	bl	8000a7c <dotProduct>
 8001de2:	eeb0 7b40 	vmov.f64	d7, d0
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <inverseJacobian+0x5c0>)
 8001de8:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = dotProduct(cross_P3, Jcd[2],3);
 8001dec:	2203      	movs	r2, #3
 8001dee:	4954      	ldr	r1, [pc, #336]	; (8001f40 <inverseJacobian+0x5c8>)
 8001df0:	484e      	ldr	r0, [pc, #312]	; (8001f2c <inverseJacobian+0x5b4>)
 8001df2:	f7fe fe43 	bl	8000a7c <dotProduct>
 8001df6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dfa:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <inverseJacobian+0x5c0>)
 8001dfc:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8001e00:	2300      	movs	r3, #0
 8001e02:	667b      	str	r3, [r7, #100]	; 0x64
 8001e04:	e030      	b.n	8001e68 <inverseJacobian+0x4f0>
		for (int j = 0; j < 3; ++j) {
 8001e06:	2300      	movs	r3, #0
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0a:	e027      	b.n	8001e5c <inverseJacobian+0x4e4>
			if (i == j) {
 8001e0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d111      	bne.n	8001e38 <inverseJacobian+0x4c0>
				Jci[i][j] = dot[i];
 8001e14:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <inverseJacobian+0x5c0>)
 8001e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e20:	4c48      	ldr	r4, [pc, #288]	; (8001f44 <inverseJacobian+0x5cc>)
 8001e22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4423      	add	r3, r4
 8001e32:	e9c3 0100 	strd	r0, r1, [r3]
 8001e36:	e00e      	b.n	8001e56 <inverseJacobian+0x4de>
			} else {
				Jci[i][j] = 0;
 8001e38:	4942      	ldr	r1, [pc, #264]	; (8001f44 <inverseJacobian+0x5cc>)
 8001e3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4419      	add	r1, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 8001e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e58:	3301      	adds	r3, #1
 8001e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	ddd4      	ble.n	8001e0c <inverseJacobian+0x494>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8001e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e64:	3301      	adds	r3, #1
 8001e66:	667b      	str	r3, [r7, #100]	; 0x64
 8001e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	ddcb      	ble.n	8001e06 <inverseJacobian+0x48e>
			}
		}
	}

	inv(Jci,Jci_inv);
 8001e6e:	4936      	ldr	r1, [pc, #216]	; (8001f48 <inverseJacobian+0x5d0>)
 8001e70:	4834      	ldr	r0, [pc, #208]	; (8001f44 <inverseJacobian+0x5cc>)
 8001e72:	f7fe fe71 	bl	8000b58 <inv>
	matrixProduct(Jcd,Jci_inv,Jinv); //Jacobiano Inverso
 8001e76:	4a35      	ldr	r2, [pc, #212]	; (8001f4c <inverseJacobian+0x5d4>)
 8001e78:	4933      	ldr	r1, [pc, #204]	; (8001f48 <inverseJacobian+0x5d0>)
 8001e7a:	482d      	ldr	r0, [pc, #180]	; (8001f30 <inverseJacobian+0x5b8>)
 8001e7c:	f7fe ffca 	bl	8000e14 <matrixProduct>


	for (int i = 0; i < 3; ++i) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e84:	e033      	b.n	8001eee <inverseJacobian+0x576>
		double sum = 0;
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		for (int j = 0; j < 3; ++j) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e96:	e01c      	b.n	8001ed2 <inverseJacobian+0x55a>
			sum += Jinv[i][j] * Vaux[j];
 8001e98:	492c      	ldr	r1, [pc, #176]	; (8001f4c <inverseJacobian+0x5d4>)
 8001e9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	ed93 6b00 	vldr	d6, [r3]
 8001eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	3368      	adds	r3, #104	; 0x68
 8001eb4:	443b      	add	r3, r7
 8001eb6:	3b38      	subs	r3, #56	; 0x38
 8001eb8:	ed93 7b00 	vldr	d7, [r3]
 8001ebc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ec0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001ec4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ec8:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
		for (int j = 0; j < 3; ++j) {
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	3301      	adds	r3, #1
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	dddf      	ble.n	8001e98 <inverseJacobian+0x520>
		}
		omega[i] = sum;
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <inverseJacobian+0x5d8>)
 8001eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	18d1      	adds	r1, r2, r3
 8001ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ee4:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 8001ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eea:	3301      	adds	r3, #1
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	ddc8      	ble.n	8001e86 <inverseJacobian+0x50e>
	}
	motor1.omega = omega[0];
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <inverseJacobian+0x5d8>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	4916      	ldr	r1, [pc, #88]	; (8001f54 <inverseJacobian+0x5dc>)
 8001efc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor2.omega = omega[1];
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <inverseJacobian+0x5d8>)
 8001f02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f06:	4914      	ldr	r1, [pc, #80]	; (8001f58 <inverseJacobian+0x5e0>)
 8001f08:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor3.omega = omega[2];
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <inverseJacobian+0x5d8>)
 8001f0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f12:	4912      	ldr	r1, [pc, #72]	; (8001f5c <inverseJacobian+0x5e4>)
 8001f14:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 8001f18:	bf00      	nop
 8001f1a:	376c      	adds	r7, #108	; 0x6c
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	24000510 	.word	0x24000510
 8001f24:	24000080 	.word	0x24000080
 8001f28:	24000348 	.word	0x24000348
 8001f2c:	24000528 	.word	0x24000528
 8001f30:	240003d8 	.word	0x240003d8
 8001f34:	240004f8 	.word	0x240004f8
 8001f38:	24000540 	.word	0x24000540
 8001f3c:	240003f0 	.word	0x240003f0
 8001f40:	24000408 	.word	0x24000408
 8001f44:	24000420 	.word	0x24000420
 8001f48:	24000468 	.word	0x24000468
 8001f4c:	240004b0 	.word	0x240004b0
 8001f50:	24000708 	.word	0x24000708
 8001f54:	24000630 	.word	0x24000630
 8001f58:	24000670 	.word	0x24000670
 8001f5c:	240006b0 	.word	0x240006b0

08001f60 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	ed2d 8b04 	vpush	{d8-d9}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	eeb0 5b40 	vmov.f64	d5, d0
 8001f6e:	eeb0 6b41 	vmov.f64	d6, d1
 8001f72:	eeb0 7b42 	vmov.f64	d7, d2
 8001f76:	ed87 5b00 	vstr	d5, [r7]
 8001f7a:	ed87 6b02 	vstr	d6, [r7, #8]
 8001f7e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001f82:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f86:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8002340 <inverseKinematic+0x3e0>
 8001f8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f8e:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8002348 <inverseKinematic+0x3e8>
 8001f92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f96:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001f9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fa2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fa6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001faa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fae:	eeb0 0b45 	vmov.f64	d0, d5
 8001fb2:	f00f faf5 	bl	80115a0 <pow>
 8001fb6:	eeb0 7b40 	vmov.f64	d7, d0
 8001fba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001fbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fc2:	4bf9      	ldr	r3, [pc, #996]	; (80023a8 <inverseKinematic+0x448>)
 8001fc4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001fc8:	ed97 7b00 	vldr	d7, [r7]
 8001fcc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8002350 <inverseKinematic+0x3f0>
 8001fd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fd4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8002358 <inverseKinematic+0x3f8>
 8001fd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fdc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8002360 <inverseKinematic+0x400>
 8001fe0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001fe4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fe8:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8002368 <inverseKinematic+0x408>
 8001fec:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001ff0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ff4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001ff8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ffc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002000:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002004:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002008:	eeb0 0b45 	vmov.f64	d0, d5
 800200c:	f00f fac8 	bl	80115a0 <pow>
 8002010:	eeb0 7b40 	vmov.f64	d7, d0
 8002014:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002018:	ee37 7b06 	vadd.f64	d7, d7, d6
 800201c:	4be3      	ldr	r3, [pc, #908]	; (80023ac <inverseKinematic+0x44c>)
 800201e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8002022:	ed97 7b00 	vldr	d7, [r7]
 8002026:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002350 <inverseKinematic+0x3f0>
 800202a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800202e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002358 <inverseKinematic+0x3f8>
 8002032:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002036:	ed97 7b02 	vldr	d7, [r7, #8]
 800203a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8002368 <inverseKinematic+0x408>
 800203e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002042:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002046:	ee36 7b47 	vsub.f64	d7, d6, d7
 800204a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8002370 <inverseKinematic+0x410>
 800204e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002052:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8002348 <inverseKinematic+0x3e8>
 8002056:	ee37 6b06 	vadd.f64	d6, d7, d6
 800205a:	ed97 7b04 	vldr	d7, [r7, #16]
 800205e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002062:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002066:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800206a:	eeb0 0b45 	vmov.f64	d0, d5
 800206e:	f00f fa97 	bl	80115a0 <pow>
 8002072:	eeb0 7b40 	vmov.f64	d7, d0
 8002076:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800207a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800207e:	4bcc      	ldr	r3, [pc, #816]	; (80023b0 <inverseKinematic+0x450>)
 8002080:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8002084:	ed97 7b02 	vldr	d7, [r7, #8]
 8002088:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8002340 <inverseKinematic+0x3e0>
 800208c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002090:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8002348 <inverseKinematic+0x3e8>
 8002094:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002098:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800209c:	ee27 5b06 	vmul.f64	d5, d7, d6
 80020a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80020a4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80020a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020ac:	ee37 8b07 	vadd.f64	d8, d7, d7
 80020b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80020b4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8002340 <inverseKinematic+0x3e0>
 80020b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020c0:	eeb0 0b47 	vmov.f64	d0, d7
 80020c4:	f00f fa6c 	bl	80115a0 <pow>
 80020c8:	eeb0 7b40 	vmov.f64	d7, d0
 80020cc:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8002378 <inverseKinematic+0x418>
 80020d0:	ee37 9b06 	vadd.f64	d9, d7, d6
 80020d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80020d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020dc:	eeb0 0b47 	vmov.f64	d0, d7
 80020e0:	f00f fa5e 	bl	80115a0 <pow>
 80020e4:	eeb0 7b40 	vmov.f64	d7, d0
 80020e8:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020ec:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8002380 <inverseKinematic+0x420>
 80020f0:	ee37 9b46 	vsub.f64	d9, d7, d6
 80020f4:	ed97 7b00 	vldr	d7, [r7]
 80020f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002100:	f00f fa4e 	bl	80115a0 <pow>
 8002104:	eeb0 7b40 	vmov.f64	d7, d0
 8002108:	ee39 5b07 	vadd.f64	d5, d9, d7
 800210c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002110:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002114:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002118:	ee28 7b07 	vmul.f64	d7, d8, d7
 800211c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8002388 <inverseKinematic+0x428>
 8002120:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002124:	4ba3      	ldr	r3, [pc, #652]	; (80023b4 <inverseKinematic+0x454>)
 8002126:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 800212a:	ed97 7b00 	vldr	d7, [r7]
 800212e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8002350 <inverseKinematic+0x3f0>
 8002132:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002136:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8002390 <inverseKinematic+0x430>
 800213a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800213e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002142:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8002368 <inverseKinematic+0x408>
 8002146:	ee37 7b05 	vadd.f64	d7, d7, d5
 800214a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800214e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002152:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002360 <inverseKinematic+0x400>
 8002156:	ee37 5b06 	vadd.f64	d5, d7, d6
 800215a:	ed97 7b04 	vldr	d7, [r7, #16]
 800215e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002162:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002166:	ee37 8b07 	vadd.f64	d8, d7, d7
 800216a:	ed97 7b00 	vldr	d7, [r7]
 800216e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002350 <inverseKinematic+0x3f0>
 8002172:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002176:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800217a:	eeb0 0b47 	vmov.f64	d0, d7
 800217e:	f00f fa0f 	bl	80115a0 <pow>
 8002182:	eeb0 7b40 	vmov.f64	d7, d0
 8002186:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8002378 <inverseKinematic+0x418>
 800218a:	ee37 9b06 	vadd.f64	d9, d7, d6
 800218e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002192:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002368 <inverseKinematic+0x408>
 8002196:	ee37 7b06 	vadd.f64	d7, d7, d6
 800219a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800219e:	eeb0 0b47 	vmov.f64	d0, d7
 80021a2:	f00f f9fd 	bl	80115a0 <pow>
 80021a6:	eeb0 7b40 	vmov.f64	d7, d0
 80021aa:	ee39 9b07 	vadd.f64	d9, d9, d7
 80021ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80021b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80021b6:	eeb0 0b47 	vmov.f64	d0, d7
 80021ba:	f00f f9f1 	bl	80115a0 <pow>
 80021be:	eeb0 7b40 	vmov.f64	d7, d0
 80021c2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80021c6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8002380 <inverseKinematic+0x420>
 80021ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 80021ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80021d2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021da:	ee28 7b07 	vmul.f64	d7, d8, d7
 80021de:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002360 <inverseKinematic+0x400>
 80021e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021e6:	4b74      	ldr	r3, [pc, #464]	; (80023b8 <inverseKinematic+0x458>)
 80021e8:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80021ec:	ed97 7b00 	vldr	d7, [r7]
 80021f0:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8002350 <inverseKinematic+0x3f0>
 80021f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021f8:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8002358 <inverseKinematic+0x3f8>
 80021fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002200:	ed97 7b02 	vldr	d7, [r7, #8]
 8002204:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8002368 <inverseKinematic+0x408>
 8002208:	ee37 7b05 	vadd.f64	d7, d7, d5
 800220c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002210:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002214:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002370 <inverseKinematic+0x410>
 8002218:	ee37 7b06 	vadd.f64	d7, d7, d6
 800221c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8002348 <inverseKinematic+0x3e8>
 8002220:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002224:	ed97 7b04 	vldr	d7, [r7, #16]
 8002228:	ee37 6b07 	vadd.f64	d6, d7, d7
 800222c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002230:	ee37 8b07 	vadd.f64	d8, d7, d7
 8002234:	ed97 7b00 	vldr	d7, [r7]
 8002238:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002350 <inverseKinematic+0x3f0>
 800223c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002240:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002244:	eeb0 0b47 	vmov.f64	d0, d7
 8002248:	f00f f9aa 	bl	80115a0 <pow>
 800224c:	eeb0 9b40 	vmov.f64	d9, d0
 8002250:	ed97 7b02 	vldr	d7, [r7, #8]
 8002254:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002368 <inverseKinematic+0x408>
 8002258:	ee37 7b06 	vadd.f64	d7, d7, d6
 800225c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002260:	eeb0 0b47 	vmov.f64	d0, d7
 8002264:	f00f f99c 	bl	80115a0 <pow>
 8002268:	eeb0 7b40 	vmov.f64	d7, d0
 800226c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002270:	ed97 7b04 	vldr	d7, [r7, #16]
 8002274:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002278:	eeb0 0b47 	vmov.f64	d0, d7
 800227c:	f00f f990 	bl	80115a0 <pow>
 8002280:	eeb0 7b40 	vmov.f64	d7, d0
 8002284:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002288:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002380 <inverseKinematic+0x420>
 800228c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002290:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8002398 <inverseKinematic+0x438>
 8002294:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002298:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80023a0 <inverseKinematic+0x440>
 800229c:	ee37 5b06 	vadd.f64	d5, d7, d6
 80022a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80022a4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80022a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 80022b0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002360 <inverseKinematic+0x400>
 80022b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <inverseKinematic+0x45c>)
 80022ba:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 80022be:	ed97 7b02 	vldr	d7, [r7, #8]
 80022c2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002340 <inverseKinematic+0x3e0>
 80022c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022ce:	eeb0 0b47 	vmov.f64	d0, d7
 80022d2:	f00f f965 	bl	80115a0 <pow>
 80022d6:	eeb0 8b40 	vmov.f64	d8, d0
 80022da:	ed97 7b04 	vldr	d7, [r7, #16]
 80022de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022e2:	eeb0 0b47 	vmov.f64	d0, d7
 80022e6:	f00f f95b 	bl	80115a0 <pow>
 80022ea:	eeb0 7b40 	vmov.f64	d7, d0
 80022ee:	ee38 7b07 	vadd.f64	d7, d8, d7
 80022f2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002380 <inverseKinematic+0x420>
 80022f6:	ee37 8b46 	vsub.f64	d8, d7, d6
 80022fa:	ed97 7b00 	vldr	d7, [r7]
 80022fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002302:	eeb0 0b47 	vmov.f64	d0, d7
 8002306:	f00f f94b 	bl	80115a0 <pow>
 800230a:	eeb0 7b40 	vmov.f64	d7, d0
 800230e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002312:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8002398 <inverseKinematic+0x438>
 8002316:	ee37 7b46 	vsub.f64	d7, d7, d6
 800231a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80023a0 <inverseKinematic+0x440>
 800231e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002322:	ed97 7b04 	vldr	d7, [r7, #16]
 8002326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800232a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800232e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002332:	eeb0 0b45 	vmov.f64	d0, d5
 8002336:	f00f f933 	bl	80115a0 <pow>
 800233a:	eeb0 7b40 	vmov.f64	d7, d0
 800233e:	e03f      	b.n	80023c0 <inverseKinematic+0x460>
 8002340:	1eb851ec 	.word	0x1eb851ec
 8002344:	3fb1eb85 	.word	0x3fb1eb85
 8002348:	24dd2f1b 	.word	0x24dd2f1b
 800234c:	3fc58106 	.word	0x3fc58106
 8002350:	5625749b 	.word	0x5625749b
 8002354:	3faf09d1 	.word	0x3faf09d1
 8002358:	e8584caa 	.word	0xe8584caa
 800235c:	400bb67a 	.word	0x400bb67a
 8002360:	24dd2f1d 	.word	0x24dd2f1d
 8002364:	3fe58106 	.word	0x3fe58106
 8002368:	1eb851ec 	.word	0x1eb851ec
 800236c:	3fa1eb85 	.word	0x3fa1eb85
 8002370:	9ba5e356 	.word	0x9ba5e356
 8002374:	3fe020c4 	.word	0x3fe020c4
 8002378:	f705857e 	.word	0xf705857e
 800237c:	3f881e03 	.word	0x3f881e03
 8002380:	70a3d70a 	.word	0x70a3d70a
 8002384:	3fd70a3d 	.word	0x3fd70a3d
 8002388:	24dd2f1b 	.word	0x24dd2f1b
 800238c:	3fd58106 	.word	0x3fd58106
 8002390:	e8584caa 	.word	0xe8584caa
 8002394:	c00bb67a 	.word	0xc00bb67a
 8002398:	93d96639 	.word	0x93d96639
 800239c:	3f9ce6c0 	.word	0x3f9ce6c0
 80023a0:	47ae147c 	.word	0x47ae147c
 80023a4:	3fa47ae1 	.word	0x3fa47ae1
 80023a8:	24000558 	.word	0x24000558
 80023ac:	240005a0 	.word	0x240005a0
 80023b0:	240005e8 	.word	0x240005e8
 80023b4:	24000560 	.word	0x24000560
 80023b8:	240005a8 	.word	0x240005a8
 80023bc:	240005f0 	.word	0x240005f0
 80023c0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8002740 <inverseKinematic+0x7e0>
 80023c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023c8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8002748 <inverseKinematic+0x7e8>
 80023cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023d0:	4be7      	ldr	r3, [pc, #924]	; (8002770 <inverseKinematic+0x810>)
 80023d2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 80023d6:	ed97 7b00 	vldr	d7, [r7]
 80023da:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8002750 <inverseKinematic+0x7f0>
 80023de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023e2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023e6:	eeb0 0b47 	vmov.f64	d0, d7
 80023ea:	f00f f8d9 	bl	80115a0 <pow>
 80023ee:	eeb0 7b40 	vmov.f64	d7, d0
 80023f2:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8002758 <inverseKinematic+0x7f8>
 80023f6:	ee37 8b06 	vadd.f64	d8, d7, d6
 80023fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80023fe:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8002760 <inverseKinematic+0x800>
 8002402:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002406:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800240a:	eeb0 0b47 	vmov.f64	d0, d7
 800240e:	f00f f8c7 	bl	80115a0 <pow>
 8002412:	eeb0 7b40 	vmov.f64	d7, d0
 8002416:	ee38 8b07 	vadd.f64	d8, d8, d7
 800241a:	ed97 7b04 	vldr	d7, [r7, #16]
 800241e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002422:	eeb0 0b47 	vmov.f64	d0, d7
 8002426:	f00f f8bb 	bl	80115a0 <pow>
 800242a:	eeb0 7b40 	vmov.f64	d7, d0
 800242e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002432:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002768 <inverseKinematic+0x808>
 8002436:	ee37 6b46 	vsub.f64	d6, d7, d6
 800243a:	ed97 7b04 	vldr	d7, [r7, #16]
 800243e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002442:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002446:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800244a:	eeb0 0b45 	vmov.f64	d0, d5
 800244e:	f00f f8a7 	bl	80115a0 <pow>
 8002452:	eeb0 7b40 	vmov.f64	d7, d0
 8002456:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8002758 <inverseKinematic+0x7f8>
 800245a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800245e:	4bc5      	ldr	r3, [pc, #788]	; (8002774 <inverseKinematic+0x814>)
 8002460:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8002464:	ed97 7b00 	vldr	d7, [r7]
 8002468:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8002750 <inverseKinematic+0x7f0>
 800246c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002470:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002474:	eeb0 0b47 	vmov.f64	d0, d7
 8002478:	f00f f892 	bl	80115a0 <pow>
 800247c:	eeb0 8b40 	vmov.f64	d8, d0
 8002480:	ed97 7b02 	vldr	d7, [r7, #8]
 8002484:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002760 <inverseKinematic+0x800>
 8002488:	ee37 7b06 	vadd.f64	d7, d7, d6
 800248c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002490:	eeb0 0b47 	vmov.f64	d0, d7
 8002494:	f00f f884 	bl	80115a0 <pow>
 8002498:	eeb0 7b40 	vmov.f64	d7, d0
 800249c:	ee38 8b07 	vadd.f64	d8, d8, d7
 80024a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80024a4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80024a8:	eeb0 0b47 	vmov.f64	d0, d7
 80024ac:	f00f f878 	bl	80115a0 <pow>
 80024b0:	eeb0 7b40 	vmov.f64	d7, d0
 80024b4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80024b8:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8002768 <inverseKinematic+0x808>
 80024bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024c0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8002748 <inverseKinematic+0x7e8>
 80024c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024c8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8002740 <inverseKinematic+0x7e0>
 80024cc:	ee37 6b06 	vadd.f64	d6, d7, d6
 80024d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80024d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80024d8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80024dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80024e0:	eeb0 0b45 	vmov.f64	d0, d5
 80024e4:	f00f f85c 	bl	80115a0 <pow>
 80024e8:	eeb0 7b40 	vmov.f64	d7, d0
 80024ec:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8002758 <inverseKinematic+0x7f8>
 80024f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024f4:	4ba0      	ldr	r3, [pc, #640]	; (8002778 <inverseKinematic+0x818>)
 80024f6:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <inverseKinematic+0x81c>)
 80024fc:	ed93 7b00 	vldr	d7, [r3]
 8002500:	eeb1 8b47 	vneg.f64	d8, d7
 8002504:	4b9d      	ldr	r3, [pc, #628]	; (800277c <inverseKinematic+0x81c>)
 8002506:	ed93 7b00 	vldr	d7, [r3]
 800250a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800250e:	eeb0 0b47 	vmov.f64	d0, d7
 8002512:	f00f f845 	bl	80115a0 <pow>
 8002516:	eeb0 5b40 	vmov.f64	d5, d0
 800251a:	4b99      	ldr	r3, [pc, #612]	; (8002780 <inverseKinematic+0x820>)
 800251c:	ed93 7b00 	vldr	d7, [r3]
 8002520:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002524:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002528:	4b91      	ldr	r3, [pc, #580]	; (8002770 <inverseKinematic+0x810>)
 800252a:	ed93 7b00 	vldr	d7, [r3]
 800252e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002532:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002536:	eeb0 0b47 	vmov.f64	d0, d7
 800253a:	f00f fab1 	bl	8011aa0 <sqrt>
 800253e:	eeb0 7b40 	vmov.f64	d7, d0
 8002542:	ee38 5b47 	vsub.f64	d5, d8, d7
 8002546:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <inverseKinematic+0x820>)
 8002548:	ed93 7b00 	vldr	d7, [r3]
 800254c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002550:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002554:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <inverseKinematic+0x824>)
 8002556:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <inverseKinematic+0x81c>)
 800255c:	ed93 7b00 	vldr	d7, [r3]
 8002560:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002564:	eeb0 0b47 	vmov.f64	d0, d7
 8002568:	f00f f81a 	bl	80115a0 <pow>
 800256c:	eeb0 5b40 	vmov.f64	d5, d0
 8002570:	4b83      	ldr	r3, [pc, #524]	; (8002780 <inverseKinematic+0x820>)
 8002572:	ed93 7b00 	vldr	d7, [r3]
 8002576:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800257a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800257e:	4b7c      	ldr	r3, [pc, #496]	; (8002770 <inverseKinematic+0x810>)
 8002580:	ed93 7b00 	vldr	d7, [r3]
 8002584:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002588:	ee35 7b47 	vsub.f64	d7, d5, d7
 800258c:	eeb0 0b47 	vmov.f64	d0, d7
 8002590:	f00f fa86 	bl	8011aa0 <sqrt>
 8002594:	eeb0 6b40 	vmov.f64	d6, d0
 8002598:	4b78      	ldr	r3, [pc, #480]	; (800277c <inverseKinematic+0x81c>)
 800259a:	ed93 7b00 	vldr	d7, [r3]
 800259e:	ee36 5b47 	vsub.f64	d5, d6, d7
 80025a2:	4b77      	ldr	r3, [pc, #476]	; (8002780 <inverseKinematic+0x820>)
 80025a4:	ed93 7b00 	vldr	d7, [r3]
 80025a8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80025ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025b0:	4b75      	ldr	r3, [pc, #468]	; (8002788 <inverseKinematic+0x828>)
 80025b2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80025b6:	4b75      	ldr	r3, [pc, #468]	; (800278c <inverseKinematic+0x82c>)
 80025b8:	ed93 7b00 	vldr	d7, [r3]
 80025bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80025c0:	eeb0 0b47 	vmov.f64	d0, d7
 80025c4:	f00e ffec 	bl	80115a0 <pow>
 80025c8:	eeb0 5b40 	vmov.f64	d5, d0
 80025cc:	4b70      	ldr	r3, [pc, #448]	; (8002790 <inverseKinematic+0x830>)
 80025ce:	ed93 7b00 	vldr	d7, [r3]
 80025d2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80025d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025da:	4b66      	ldr	r3, [pc, #408]	; (8002774 <inverseKinematic+0x814>)
 80025dc:	ed93 7b00 	vldr	d7, [r3]
 80025e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80025e8:	eeb0 0b47 	vmov.f64	d0, d7
 80025ec:	f00f fa58 	bl	8011aa0 <sqrt>
 80025f0:	eeb0 6b40 	vmov.f64	d6, d0
 80025f4:	4b65      	ldr	r3, [pc, #404]	; (800278c <inverseKinematic+0x82c>)
 80025f6:	ed93 7b00 	vldr	d7, [r3]
 80025fa:	ee36 5b47 	vsub.f64	d5, d6, d7
 80025fe:	4b64      	ldr	r3, [pc, #400]	; (8002790 <inverseKinematic+0x830>)
 8002600:	ed93 7b00 	vldr	d7, [r3]
 8002604:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002608:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800260c:	4b61      	ldr	r3, [pc, #388]	; (8002794 <inverseKinematic+0x834>)
 800260e:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8002612:	4b5e      	ldr	r3, [pc, #376]	; (800278c <inverseKinematic+0x82c>)
 8002614:	ed93 7b00 	vldr	d7, [r3]
 8002618:	eeb1 8b47 	vneg.f64	d8, d7
 800261c:	4b5b      	ldr	r3, [pc, #364]	; (800278c <inverseKinematic+0x82c>)
 800261e:	ed93 7b00 	vldr	d7, [r3]
 8002622:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002626:	eeb0 0b47 	vmov.f64	d0, d7
 800262a:	f00e ffb9 	bl	80115a0 <pow>
 800262e:	eeb0 5b40 	vmov.f64	d5, d0
 8002632:	4b57      	ldr	r3, [pc, #348]	; (8002790 <inverseKinematic+0x830>)
 8002634:	ed93 7b00 	vldr	d7, [r3]
 8002638:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800263c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002640:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <inverseKinematic+0x814>)
 8002642:	ed93 7b00 	vldr	d7, [r3]
 8002646:	ee26 7b07 	vmul.f64	d7, d6, d7
 800264a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800264e:	eeb0 0b47 	vmov.f64	d0, d7
 8002652:	f00f fa25 	bl	8011aa0 <sqrt>
 8002656:	eeb0 7b40 	vmov.f64	d7, d0
 800265a:	ee38 5b47 	vsub.f64	d5, d8, d7
 800265e:	4b4c      	ldr	r3, [pc, #304]	; (8002790 <inverseKinematic+0x830>)
 8002660:	ed93 7b00 	vldr	d7, [r3]
 8002664:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002668:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800266c:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <inverseKinematic+0x838>)
 800266e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <inverseKinematic+0x83c>)
 8002674:	ed93 7b00 	vldr	d7, [r3]
 8002678:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800267c:	eeb0 0b47 	vmov.f64	d0, d7
 8002680:	f00e ff8e 	bl	80115a0 <pow>
 8002684:	eeb0 5b40 	vmov.f64	d5, d0
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <inverseKinematic+0x840>)
 800268a:	ed93 7b00 	vldr	d7, [r3]
 800268e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002692:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <inverseKinematic+0x818>)
 8002698:	ed93 7b00 	vldr	d7, [r3]
 800269c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80026a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80026a4:	eeb0 0b47 	vmov.f64	d0, d7
 80026a8:	f00f f9fa 	bl	8011aa0 <sqrt>
 80026ac:	eeb0 6b40 	vmov.f64	d6, d0
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <inverseKinematic+0x83c>)
 80026b2:	ed93 7b00 	vldr	d7, [r3]
 80026b6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80026ba:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <inverseKinematic+0x840>)
 80026bc:	ed93 7b00 	vldr	d7, [r3]
 80026c0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80026c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <inverseKinematic+0x844>)
 80026ca:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80026ce:	4b33      	ldr	r3, [pc, #204]	; (800279c <inverseKinematic+0x83c>)
 80026d0:	ed93 7b00 	vldr	d7, [r3]
 80026d4:	eeb1 8b47 	vneg.f64	d8, d7
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <inverseKinematic+0x83c>)
 80026da:	ed93 7b00 	vldr	d7, [r3]
 80026de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80026e2:	eeb0 0b47 	vmov.f64	d0, d7
 80026e6:	f00e ff5b 	bl	80115a0 <pow>
 80026ea:	eeb0 5b40 	vmov.f64	d5, d0
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <inverseKinematic+0x840>)
 80026f0:	ed93 7b00 	vldr	d7, [r3]
 80026f4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80026f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <inverseKinematic+0x818>)
 80026fe:	ed93 7b00 	vldr	d7, [r3]
 8002702:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002706:	ee35 7b47 	vsub.f64	d7, d5, d7
 800270a:	eeb0 0b47 	vmov.f64	d0, d7
 800270e:	f00f f9c7 	bl	8011aa0 <sqrt>
 8002712:	eeb0 7b40 	vmov.f64	d7, d0
 8002716:	ee38 5b47 	vsub.f64	d5, d8, d7
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <inverseKinematic+0x840>)
 800271c:	ed93 7b00 	vldr	d7, [r3]
 8002720:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002724:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <inverseKinematic+0x848>)
 800272a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 800272e:	491f      	ldr	r1, [pc, #124]	; (80027ac <inverseKinematic+0x84c>)
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9c1 2300 	strd	r2, r3, [r1]
 800273c:	e038      	b.n	80027b0 <inverseKinematic+0x850>
 800273e:	bf00      	nop
 8002740:	47ae147c 	.word	0x47ae147c
 8002744:	3fa47ae1 	.word	0x3fa47ae1
 8002748:	93d96639 	.word	0x93d96639
 800274c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002750:	5625749b 	.word	0x5625749b
 8002754:	3faf09d1 	.word	0x3faf09d1
 8002758:	f705857e 	.word	0xf705857e
 800275c:	3f881e03 	.word	0x3f881e03
 8002760:	1eb851ec 	.word	0x1eb851ec
 8002764:	3fa1eb85 	.word	0x3fa1eb85
 8002768:	70a3d70a 	.word	0x70a3d70a
 800276c:	3fd70a3d 	.word	0x3fd70a3d
 8002770:	24000568 	.word	0x24000568
 8002774:	240005b0 	.word	0x240005b0
 8002778:	240005f8 	.word	0x240005f8
 800277c:	24000560 	.word	0x24000560
 8002780:	24000558 	.word	0x24000558
 8002784:	24000580 	.word	0x24000580
 8002788:	24000588 	.word	0x24000588
 800278c:	240005a8 	.word	0x240005a8
 8002790:	240005a0 	.word	0x240005a0
 8002794:	240005c8 	.word	0x240005c8
 8002798:	240005d0 	.word	0x240005d0
 800279c:	240005f0 	.word	0x240005f0
 80027a0:	240005e8 	.word	0x240005e8
 80027a4:	24000610 	.word	0x24000610
 80027a8:	24000618 	.word	0x24000618
 80027ac:	24000570 	.word	0x24000570
	XJ1_2 = 0;
 80027b0:	49f1      	ldr	r1, [pc, #964]	; (8002b78 <inverseKinematic+0xc18>)
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 80027be:	4bef      	ldr	r3, [pc, #956]	; (8002b7c <inverseKinematic+0xc1c>)
 80027c0:	ed93 7b00 	vldr	d7, [r3]
 80027c4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002b10 <inverseKinematic+0xbb0>
 80027c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027cc:	4bec      	ldr	r3, [pc, #944]	; (8002b80 <inverseKinematic+0xc20>)
 80027ce:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 80027d2:	4bec      	ldr	r3, [pc, #944]	; (8002b84 <inverseKinematic+0xc24>)
 80027d4:	ed93 7b00 	vldr	d7, [r3]
 80027d8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002b10 <inverseKinematic+0xbb0>
 80027dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027e0:	4be9      	ldr	r3, [pc, #932]	; (8002b88 <inverseKinematic+0xc28>)
 80027e2:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 80027e6:	4be9      	ldr	r3, [pc, #932]	; (8002b8c <inverseKinematic+0xc2c>)
 80027e8:	ed93 7b00 	vldr	d7, [r3]
 80027ec:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002b18 <inverseKinematic+0xbb8>
 80027f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027f4:	4be6      	ldr	r3, [pc, #920]	; (8002b90 <inverseKinematic+0xc30>)
 80027f6:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 80027fa:	4be6      	ldr	r3, [pc, #920]	; (8002b94 <inverseKinematic+0xc34>)
 80027fc:	ed93 7b00 	vldr	d7, [r3]
 8002800:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002b18 <inverseKinematic+0xbb8>
 8002804:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002808:	4be3      	ldr	r3, [pc, #908]	; (8002b98 <inverseKinematic+0xc38>)
 800280a:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 800280e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002812:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002b20 <inverseKinematic+0xbc0>
 8002816:	ee37 7b46 	vsub.f64	d7, d7, d6
 800281a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002b28 <inverseKinematic+0xbc8>
 800281e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002822:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002826:	ee27 5b06 	vmul.f64	d5, d7, d6
 800282a:	ed97 7b04 	vldr	d7, [r7, #16]
 800282e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002832:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002836:	4bd9      	ldr	r3, [pc, #868]	; (8002b9c <inverseKinematic+0xc3c>)
 8002838:	ed93 7b00 	vldr	d7, [r3]
 800283c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002840:	ed97 7b02 	vldr	d7, [r7, #8]
 8002844:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002b20 <inverseKinematic+0xbc0>
 8002848:	ee37 7b46 	vsub.f64	d7, d7, d6
 800284c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002850:	eeb0 0b47 	vmov.f64	d0, d7
 8002854:	f00e fea4 	bl	80115a0 <pow>
 8002858:	eeb0 9b40 	vmov.f64	d9, d0
 800285c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002860:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002864:	eeb0 0b47 	vmov.f64	d0, d7
 8002868:	f00e fe9a 	bl	80115a0 <pow>
 800286c:	eeb0 7b40 	vmov.f64	d7, d0
 8002870:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002874:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002b30 <inverseKinematic+0xbd0>
 8002878:	ee37 9b46 	vsub.f64	d9, d7, d6
 800287c:	ed97 7b00 	vldr	d7, [r7]
 8002880:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002884:	eeb0 0b47 	vmov.f64	d0, d7
 8002888:	f00e fe8a 	bl	80115a0 <pow>
 800288c:	eeb0 7b40 	vmov.f64	d7, d0
 8002890:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002894:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002b38 <inverseKinematic+0xbd8>
 8002898:	ee37 7b46 	vsub.f64	d7, d7, d6
 800289c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002b40 <inverseKinematic+0xbe0>
 80028a0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80028a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80028a8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80028ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80028b0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80028b4:	4bba      	ldr	r3, [pc, #744]	; (8002ba0 <inverseKinematic+0xc40>)
 80028b6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80028ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80028be:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002b20 <inverseKinematic+0xbc0>
 80028c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028c6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002b28 <inverseKinematic+0xbc8>
 80028ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028ce:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80028d2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80028d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80028da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80028de:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80028e2:	4bb0      	ldr	r3, [pc, #704]	; (8002ba4 <inverseKinematic+0xc44>)
 80028e4:	ed93 7b00 	vldr	d7, [r3]
 80028e8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80028ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80028f0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002b20 <inverseKinematic+0xbc0>
 80028f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80028fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002900:	f00e fe4e 	bl	80115a0 <pow>
 8002904:	eeb0 9b40 	vmov.f64	d9, d0
 8002908:	ed97 7b04 	vldr	d7, [r7, #16]
 800290c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002910:	eeb0 0b47 	vmov.f64	d0, d7
 8002914:	f00e fe44 	bl	80115a0 <pow>
 8002918:	eeb0 7b40 	vmov.f64	d7, d0
 800291c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002920:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002b30 <inverseKinematic+0xbd0>
 8002924:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002928:	ed97 7b00 	vldr	d7, [r7]
 800292c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002930:	eeb0 0b47 	vmov.f64	d0, d7
 8002934:	f00e fe34 	bl	80115a0 <pow>
 8002938:	eeb0 7b40 	vmov.f64	d7, d0
 800293c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002940:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002b38 <inverseKinematic+0xbd8>
 8002944:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002948:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002b40 <inverseKinematic+0xbe0>
 800294c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002950:	ed97 7b04 	vldr	d7, [r7, #16]
 8002954:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002958:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800295c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002960:	4b91      	ldr	r3, [pc, #580]	; (8002ba8 <inverseKinematic+0xc48>)
 8002962:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002966:	ed97 7b00 	vldr	d7, [r7]
 800296a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002b48 <inverseKinematic+0xbe8>
 800296e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002972:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002b50 <inverseKinematic+0xbf0>
 8002976:	ee27 6b06 	vmul.f64	d6, d7, d6
 800297a:	ed97 7b02 	vldr	d7, [r7, #8]
 800297e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8002b58 <inverseKinematic+0xbf8>
 8002982:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002986:	ee37 7b07 	vadd.f64	d7, d7, d7
 800298a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800298e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002b60 <inverseKinematic+0xc00>
 8002992:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002996:	ed97 7b04 	vldr	d7, [r7, #16]
 800299a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800299e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <inverseKinematic+0xc1c>)
 80029a4:	ed93 7b00 	vldr	d7, [r3]
 80029a8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80029ac:	ed97 7b00 	vldr	d7, [r7]
 80029b0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002b48 <inverseKinematic+0xbe8>
 80029b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80029bc:	eeb0 0b47 	vmov.f64	d0, d7
 80029c0:	f00e fdee 	bl	80115a0 <pow>
 80029c4:	eeb0 7b40 	vmov.f64	d7, d0
 80029c8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002b68 <inverseKinematic+0xc08>
 80029cc:	ee37 9b06 	vadd.f64	d9, d7, d6
 80029d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80029d4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002b58 <inverseKinematic+0xbf8>
 80029d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80029e0:	eeb0 0b47 	vmov.f64	d0, d7
 80029e4:	f00e fddc 	bl	80115a0 <pow>
 80029e8:	eeb0 7b40 	vmov.f64	d7, d0
 80029ec:	ee39 9b07 	vadd.f64	d9, d9, d7
 80029f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80029f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80029f8:	eeb0 0b47 	vmov.f64	d0, d7
 80029fc:	f00e fdd0 	bl	80115a0 <pow>
 8002a00:	eeb0 7b40 	vmov.f64	d7, d0
 8002a04:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002a08:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002b30 <inverseKinematic+0xbd0>
 8002a0c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002a10:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a14:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002a18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a1c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002a20:	4b62      	ldr	r3, [pc, #392]	; (8002bac <inverseKinematic+0xc4c>)
 8002a22:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002a26:	ed97 7b00 	vldr	d7, [r7]
 8002a2a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002b48 <inverseKinematic+0xbe8>
 8002a2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a32:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002b50 <inverseKinematic+0xbf0>
 8002a36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a3a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a3e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8002b58 <inverseKinematic+0xbf8>
 8002a42:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002a46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a4e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002b60 <inverseKinematic+0xc00>
 8002a52:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002a56:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a5a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a5e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002a62:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <inverseKinematic+0xc24>)
 8002a64:	ed93 7b00 	vldr	d7, [r3]
 8002a68:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002a6c:	ed97 7b00 	vldr	d7, [r7]
 8002a70:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002b48 <inverseKinematic+0xbe8>
 8002a74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a78:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002a7c:	eeb0 0b47 	vmov.f64	d0, d7
 8002a80:	f00e fd8e 	bl	80115a0 <pow>
 8002a84:	eeb0 7b40 	vmov.f64	d7, d0
 8002a88:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002b68 <inverseKinematic+0xc08>
 8002a8c:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002a90:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a94:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002b58 <inverseKinematic+0xbf8>
 8002a98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002aa0:	eeb0 0b47 	vmov.f64	d0, d7
 8002aa4:	f00e fd7c 	bl	80115a0 <pow>
 8002aa8:	eeb0 7b40 	vmov.f64	d7, d0
 8002aac:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002ab0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ab4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002ab8:	eeb0 0b47 	vmov.f64	d0, d7
 8002abc:	f00e fd70 	bl	80115a0 <pow>
 8002ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ac4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002ac8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002b30 <inverseKinematic+0xbd0>
 8002acc:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002ad0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ad4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002ad8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002adc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002ae0:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <inverseKinematic+0xc50>)
 8002ae2:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002ae6:	ed97 7b00 	vldr	d7, [r7]
 8002aea:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002b48 <inverseKinematic+0xbe8>
 8002aee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002af2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002b70 <inverseKinematic+0xc10>
 8002af6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002afa:	ed97 7b02 	vldr	d7, [r7, #8]
 8002afe:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8002b58 <inverseKinematic+0xbf8>
 8002b02:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002b06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b0e:	e051      	b.n	8002bb4 <inverseKinematic+0xc54>
 8002b10:	e8584caa 	.word	0xe8584caa
 8002b14:	3ffbb67a 	.word	0x3ffbb67a
 8002b18:	e8584caa 	.word	0xe8584caa
 8002b1c:	bffbb67a 	.word	0xbffbb67a
 8002b20:	1eb851ec 	.word	0x1eb851ec
 8002b24:	3fb1eb85 	.word	0x3fb1eb85
 8002b28:	24dd2f1b 	.word	0x24dd2f1b
 8002b2c:	3fc58106 	.word	0x3fc58106
 8002b30:	70a3d70a 	.word	0x70a3d70a
 8002b34:	3fd70a3d 	.word	0x3fd70a3d
 8002b38:	93d96639 	.word	0x93d96639
 8002b3c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002b40:	47ae147c 	.word	0x47ae147c
 8002b44:	3fa47ae1 	.word	0x3fa47ae1
 8002b48:	5625749b 	.word	0x5625749b
 8002b4c:	3faf09d1 	.word	0x3faf09d1
 8002b50:	e8584caa 	.word	0xe8584caa
 8002b54:	c00bb67a 	.word	0xc00bb67a
 8002b58:	1eb851ec 	.word	0x1eb851ec
 8002b5c:	3fa1eb85 	.word	0x3fa1eb85
 8002b60:	24dd2f1d 	.word	0x24dd2f1d
 8002b64:	3fe58106 	.word	0x3fe58106
 8002b68:	f705857e 	.word	0xf705857e
 8002b6c:	3f881e03 	.word	0x3f881e03
 8002b70:	e8584caa 	.word	0xe8584caa
 8002b74:	400bb67a 	.word	0x400bb67a
 8002b78:	24000578 	.word	0x24000578
 8002b7c:	240005c8 	.word	0x240005c8
 8002b80:	240005b8 	.word	0x240005b8
 8002b84:	240005d0 	.word	0x240005d0
 8002b88:	240005c0 	.word	0x240005c0
 8002b8c:	24000610 	.word	0x24000610
 8002b90:	24000600 	.word	0x24000600
 8002b94:	24000618 	.word	0x24000618
 8002b98:	24000608 	.word	0x24000608
 8002b9c:	24000580 	.word	0x24000580
 8002ba0:	24000590 	.word	0x24000590
 8002ba4:	24000588 	.word	0x24000588
 8002ba8:	24000598 	.word	0x24000598
 8002bac:	240005d8 	.word	0x240005d8
 8002bb0:	240005e0 	.word	0x240005e0
 8002bb4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002df8 <inverseKinematic+0xe98>
 8002bb8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bbc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002e00 <inverseKinematic+0xea0>
 8002bc0:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002bc4:	ed97 7b04 	vldr	d7, [r7, #16]
 8002bc8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002bcc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002bd0:	4b9f      	ldr	r3, [pc, #636]	; (8002e50 <inverseKinematic+0xef0>)
 8002bd2:	ed93 7b00 	vldr	d7, [r3]
 8002bd6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002bda:	ed97 7b00 	vldr	d7, [r7]
 8002bde:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002e08 <inverseKinematic+0xea8>
 8002be2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002be6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002bea:	eeb0 0b47 	vmov.f64	d0, d7
 8002bee:	f00e fcd7 	bl	80115a0 <pow>
 8002bf2:	eeb0 9b40 	vmov.f64	d9, d0
 8002bf6:	ed97 7b02 	vldr	d7, [r7, #8]
 8002bfa:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002e10 <inverseKinematic+0xeb0>
 8002bfe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002c06:	eeb0 0b47 	vmov.f64	d0, d7
 8002c0a:	f00e fcc9 	bl	80115a0 <pow>
 8002c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8002c12:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002c16:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c1a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002c1e:	eeb0 0b47 	vmov.f64	d0, d7
 8002c22:	f00e fcbd 	bl	80115a0 <pow>
 8002c26:	eeb0 7b40 	vmov.f64	d7, d0
 8002c2a:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002c2e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002e18 <inverseKinematic+0xeb8>
 8002c32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c36:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002e20 <inverseKinematic+0xec0>
 8002c3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c3e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002e28 <inverseKinematic+0xec8>
 8002c42:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002c46:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c4a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002c4e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002c52:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002c56:	4b7f      	ldr	r3, [pc, #508]	; (8002e54 <inverseKinematic+0xef4>)
 8002c58:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002c5c:	ed97 7b00 	vldr	d7, [r7]
 8002c60:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002e08 <inverseKinematic+0xea8>
 8002c64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c68:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002e30 <inverseKinematic+0xed0>
 8002c6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c70:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c74:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002e10 <inverseKinematic+0xeb0>
 8002c78:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002c7c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c84:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002df8 <inverseKinematic+0xe98>
 8002c88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c8c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002e00 <inverseKinematic+0xea0>
 8002c90:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002c94:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c9c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002ca0:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <inverseKinematic+0xef8>)
 8002ca2:	ed93 7b00 	vldr	d7, [r3]
 8002ca6:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002caa:	ed97 7b00 	vldr	d7, [r7]
 8002cae:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002e08 <inverseKinematic+0xea8>
 8002cb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cb6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002cba:	eeb0 0b47 	vmov.f64	d0, d7
 8002cbe:	f00e fc6f 	bl	80115a0 <pow>
 8002cc2:	eeb0 9b40 	vmov.f64	d9, d0
 8002cc6:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cca:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002e10 <inverseKinematic+0xeb0>
 8002cce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cd2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8002cda:	f00e fc61 	bl	80115a0 <pow>
 8002cde:	eeb0 7b40 	vmov.f64	d7, d0
 8002ce2:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002ce6:	ed97 7b04 	vldr	d7, [r7, #16]
 8002cea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002cee:	eeb0 0b47 	vmov.f64	d0, d7
 8002cf2:	f00e fc55 	bl	80115a0 <pow>
 8002cf6:	eeb0 7b40 	vmov.f64	d7, d0
 8002cfa:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002cfe:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002e18 <inverseKinematic+0xeb8>
 8002d02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d06:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002e20 <inverseKinematic+0xec0>
 8002d0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d0e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002e28 <inverseKinematic+0xec8>
 8002d12:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002d16:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d1a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002d1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d22:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002d26:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <inverseKinematic+0xefc>)
 8002d28:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <inverseKinematic+0xf00>)
 8002d2e:	ed93 7b00 	vldr	d7, [r3]
 8002d32:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002e38 <inverseKinematic+0xed8>
 8002d36:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d3a:	eeb0 0b46 	vmov.f64	d0, d6
 8002d3e:	f00e fe81 	bl	8011a44 <asin>
 8002d42:	eeb0 7b40 	vmov.f64	d7, d0
 8002d46:	eeb1 7b47 	vneg.f64	d7, d7
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <inverseKinematic+0xf04>)
 8002d4c:	ed83 7b02 	vstr	d7, [r3, #8]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8002d50:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <inverseKinematic+0xf04>)
 8002d52:	ed93 7b02 	vldr	d7, [r3, #8]
 8002d56:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002e40 <inverseKinematic+0xee0>
 8002d5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d5e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002e48 <inverseKinematic+0xee8>
 8002d62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d66:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <inverseKinematic+0xf04>)
 8002d68:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <inverseKinematic+0xf08>)
 8002d6e:	ed93 7b00 	vldr	d7, [r3]
 8002d72:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8002e38 <inverseKinematic+0xed8>
 8002d76:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d7a:	eeb0 0b46 	vmov.f64	d0, d6
 8002d7e:	f00e fe61 	bl	8011a44 <asin>
 8002d82:	eeb0 7b40 	vmov.f64	d7, d0
 8002d86:	eeb1 7b47 	vneg.f64	d7, d7
 8002d8a:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <inverseKinematic+0xf0c>)
 8002d8c:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002d90:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <inverseKinematic+0xf0c>)
 8002d92:	ed93 7b02 	vldr	d7, [r3, #8]
 8002d96:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002e40 <inverseKinematic+0xee0>
 8002d9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d9e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002e48 <inverseKinematic+0xee8>
 8002da2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <inverseKinematic+0xf0c>)
 8002da8:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 8002dac:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <inverseKinematic+0xef4>)
 8002dae:	ed93 7b00 	vldr	d7, [r3]
 8002db2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002e38 <inverseKinematic+0xed8>
 8002db6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002dba:	eeb0 0b46 	vmov.f64	d0, d6
 8002dbe:	f00e fe41 	bl	8011a44 <asin>
 8002dc2:	eeb0 7b40 	vmov.f64	d7, d0
 8002dc6:	eeb1 7b47 	vneg.f64	d7, d7
 8002dca:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <inverseKinematic+0xf10>)
 8002dcc:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <inverseKinematic+0xf10>)
 8002dd2:	ed93 7b02 	vldr	d7, [r3, #8]
 8002dd6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8002e40 <inverseKinematic+0xee0>
 8002dda:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002dde:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002e48 <inverseKinematic+0xee8>
 8002de2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <inverseKinematic+0xf10>)
 8002de8:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	ecbd 8b04 	vpop	{d8-d9}
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	9ba5e356 	.word	0x9ba5e356
 8002dfc:	3fe020c4 	.word	0x3fe020c4
 8002e00:	24dd2f1b 	.word	0x24dd2f1b
 8002e04:	3fc58106 	.word	0x3fc58106
 8002e08:	5625749b 	.word	0x5625749b
 8002e0c:	3faf09d1 	.word	0x3faf09d1
 8002e10:	1eb851ec 	.word	0x1eb851ec
 8002e14:	3fa1eb85 	.word	0x3fa1eb85
 8002e18:	70a3d70a 	.word	0x70a3d70a
 8002e1c:	3fd70a3d 	.word	0x3fd70a3d
 8002e20:	93d96639 	.word	0x93d96639
 8002e24:	3f9ce6c0 	.word	0x3f9ce6c0
 8002e28:	47ae147c 	.word	0x47ae147c
 8002e2c:	3fa47ae1 	.word	0x3fa47ae1
 8002e30:	e8584caa 	.word	0xe8584caa
 8002e34:	400bb67a 	.word	0x400bb67a
 8002e38:	9999999a 	.word	0x9999999a
 8002e3c:	3fc99999 	.word	0x3fc99999
 8002e40:	00000000 	.word	0x00000000
 8002e44:	40668000 	.word	0x40668000
 8002e48:	54442eea 	.word	0x54442eea
 8002e4c:	400921fb 	.word	0x400921fb
 8002e50:	24000610 	.word	0x24000610
 8002e54:	24000620 	.word	0x24000620
 8002e58:	24000618 	.word	0x24000618
 8002e5c:	24000628 	.word	0x24000628
 8002e60:	24000590 	.word	0x24000590
 8002e64:	24000630 	.word	0x24000630
 8002e68:	240005d8 	.word	0x240005d8
 8002e6c:	24000670 	.word	0x24000670
 8002e70:	240006b0 	.word	0x240006b0

08002e74 <robotInitialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robotInitialization(void){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 8002e78:	481d      	ldr	r0, [pc, #116]	; (8002ef0 <robotInitialization+0x7c>)
 8002e7a:	f007 f93f 	bl	800a0fc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002e7e:	481d      	ldr	r0, [pc, #116]	; (8002ef4 <robotInitialization+0x80>)
 8002e80:	f007 f93c 	bl	800a0fc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002e84:	481c      	ldr	r0, [pc, #112]	; (8002ef8 <robotInitialization+0x84>)
 8002e86:	f007 f939 	bl	800a0fc <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2110      	movs	r1, #16
 8002e8e:	481b      	ldr	r0, [pc, #108]	; (8002efc <robotInitialization+0x88>)
 8002e90:	f004 fd4c 	bl	800792c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2120      	movs	r1, #32
 8002e98:	4818      	ldr	r0, [pc, #96]	; (8002efc <robotInitialization+0x88>)
 8002e9a:	f004 fd47 	bl	800792c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	4816      	ldr	r0, [pc, #88]	; (8002efc <robotInitialization+0x88>)
 8002ea4:	f004 fd42 	bl	800792c <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002ea8:	2032      	movs	r0, #50	; 0x32
 8002eaa:	f003 fca1 	bl	80067f0 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eb4:	4812      	ldr	r0, [pc, #72]	; (8002f00 <robotInitialization+0x8c>)
 8002eb6:	f004 fd39 	bl	800792c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ec0:	480f      	ldr	r0, [pc, #60]	; (8002f00 <robotInitialization+0x8c>)
 8002ec2:	f004 fd33 	bl	800792c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <robotInitialization+0x8c>)
 8002ece:	f004 fd2d 	bl	800792c <HAL_GPIO_WritePin>
    Stop_PWM_MOTOR_1;
    Stop_PWM_MOTOR_2;
    Stop_PWM_MOTOR_3;

    */
	motor1.stepReached = false;
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <robotInitialization+0x90>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor2.stepReached = false;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <robotInitialization+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor3.stepReached = false;
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <robotInitialization+0x98>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	2400092c 	.word	0x2400092c
 8002ef4:	24000978 	.word	0x24000978
 8002ef8:	240009c4 	.word	0x240009c4
 8002efc:	58020c00 	.word	0x58020c00
 8002f00:	58020800 	.word	0x58020800
 8002f04:	24000630 	.word	0x24000630
 8002f08:	24000670 	.word	0x24000670
 8002f0c:	240006b0 	.word	0x240006b0

08002f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	ed2d 8b02 	vpush	{d8}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f18:	f003 fbd8 	bl	80066cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f1c:	f000 fb6a 	bl	80035f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f20:	f7fd ffea 	bl	8000ef8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002f24:	f000 ffd0 	bl	8003ec8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002f28:	f003 fa2e 	bl	8006388 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002f2c:	f001 f96e 	bl	800420c <MX_TIM12_Init>
  MX_TIM13_Init();
 8002f30:	f001 f9ce 	bl	80042d0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002f34:	f001 fa18 	bl	8004368 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002f38:	f001 f91a 	bl	8004170 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002f3c:	f001 fa60 	bl	8004400 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002f40:	f003 f9d6 	bl	80062f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002f44:	f003 f988 	bl	8006258 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002f48:	f001 f82e 	bl	8003fa8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f4c:	f001 f89e 	bl	800408c <MX_TIM4_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (state){
 8002f50:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <main+0x1c0>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	f200 831b 	bhi.w	8003590 <main+0x680>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <main+0x50>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f75 	.word	0x08002f75
 8002f64:	08003385 	.word	0x08003385
 8002f68:	08003089 	.word	0x08003089
 8002f6c:	08002fa3 	.word	0x08002fa3
 8002f70:	08003591 	.word	0x08003591

		case INIT:

			  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 8002f74:	2364      	movs	r3, #100	; 0x64
 8002f76:	221c      	movs	r2, #28
 8002f78:	4956      	ldr	r1, [pc, #344]	; (80030d4 <main+0x1c4>)
 8002f7a:	4857      	ldr	r0, [pc, #348]	; (80030d8 <main+0x1c8>)
 8002f7c:	f009 f936 	bl	800c1ec <HAL_UART_Transmit>
			  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002f80:	2201      	movs	r2, #1
 8002f82:	4956      	ldr	r1, [pc, #344]	; (80030dc <main+0x1cc>)
 8002f84:	4854      	ldr	r0, [pc, #336]	; (80030d8 <main+0x1c8>)
 8002f86:	f009 f9c7 	bl	800c318 <HAL_UART_Receive_IT>
			  robotInitialization();
 8002f8a:	f7ff ff73 	bl	8002e74 <robotInitialization>
			  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002f8e:	2364      	movs	r3, #100	; 0x64
 8002f90:	2227      	movs	r2, #39	; 0x27
 8002f92:	4953      	ldr	r1, [pc, #332]	; (80030e0 <main+0x1d0>)
 8002f94:	4850      	ldr	r0, [pc, #320]	; (80030d8 <main+0x1c8>)
 8002f96:	f009 f929 	bl	800c1ec <HAL_UART_Transmit>

			  state = READY;
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <main+0x1c0>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]

			break;
 8002fa0:	e2fb      	b.n	800359a <main+0x68a>

		case HOME:

			receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002fa2:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <main+0x1d4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]

			//Ponemos el enable en bajo para habilitar el driver

			HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2110      	movs	r1, #16
 8002fac:	484e      	ldr	r0, [pc, #312]	; (80030e8 <main+0x1d8>)
 8002fae:	f004 fcbd 	bl	800792c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2120      	movs	r1, #32
 8002fb6:	484c      	ldr	r0, [pc, #304]	; (80030e8 <main+0x1d8>)
 8002fb8:	f004 fcb8 	bl	800792c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	4849      	ldr	r0, [pc, #292]	; (80030e8 <main+0x1d8>)
 8002fc2:	f004 fcb3 	bl	800792c <HAL_GPIO_WritePin>

			HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002fc6:	2032      	movs	r0, #50	; 0x32
 8002fc8:	f003 fc12 	bl	80067f0 <HAL_Delay>

			homing();
 8002fcc:	f7fe f890 	bl	80010f0 <homing>

	        if(homFin){
 8002fd0:	4b46      	ldr	r3, [pc, #280]	; (80030ec <main+0x1dc>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 82dd 	beq.w	8003594 <main+0x684>

	        	homFin = false;
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <main+0x1dc>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]

	        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002fe0:	2006      	movs	r0, #6
 8002fe2:	f003 fd4e 	bl	8006a82 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8002fe6:	2007      	movs	r0, #7
 8002fe8:	f003 fd4b 	bl	8006a82 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002fec:	2008      	movs	r0, #8
 8002fee:	f003 fd48 	bl	8006a82 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002ff2:	2009      	movs	r0, #9
 8002ff4:	f003 fd45 	bl	8006a82 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f003 fd42 	bl	8006a82 <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002ffe:	2017      	movs	r0, #23
 8003000:	f003 fd3f 	bl	8006a82 <HAL_NVIC_EnableIRQ>

				Pini.x=0;
 8003004:	493a      	ldr	r1, [pc, #232]	; (80030f0 <main+0x1e0>)
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9c1 2300 	strd	r2, r3, [r1]
				Pini.y=0;
 8003012:	4937      	ldr	r1, [pc, #220]	; (80030f0 <main+0x1e0>)
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Pini.z =-0.5208; //antes era -0.33
 8003020:	4933      	ldr	r1, [pc, #204]	; (80030f0 <main+0x1e0>)
 8003022:	a329      	add	r3, pc, #164	; (adr r3, 80030c8 <main+0x1b8>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	e9c1 2304 	strd	r2, r3, [r1, #16]

				motor1.theta = 0.0;
 800302c:	4931      	ldr	r1, [pc, #196]	; (80030f4 <main+0x1e4>)
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor2.theta = 0.0;
 800303a:	492f      	ldr	r1, [pc, #188]	; (80030f8 <main+0x1e8>)
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor3.theta = 0.0;
 8003048:	492c      	ldr	r1, [pc, #176]	; (80030fc <main+0x1ec>)
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9c1 2302 	strd	r2, r3, [r1, #8]

				motor1.currentAngle = 0.0;
 8003056:	4927      	ldr	r1, [pc, #156]	; (80030f4 <main+0x1e4>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor2.currentAngle = 0.0;
 8003064:	4924      	ldr	r1, [pc, #144]	; (80030f8 <main+0x1e8>)
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor3.currentAngle = 0.0;
 8003072:	4922      	ldr	r1, [pc, #136]	; (80030fc <main+0x1ec>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

				state = READY;
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <main+0x1c0>)
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]

	        }


			break;
 8003086:	e285      	b.n	8003594 <main+0x684>

		case WORKING:

			receptionFlag = false;
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <main+0x1d4>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]

			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 800308e:	e0ee      	b.n	800326e <main+0x35e>

				if (motor1.stepReached) {
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <main+0x1e4>)
 8003092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <main+0x19c>
					Stop_PWM_MOTOR_1;
 800309a:	2100      	movs	r1, #0
 800309c:	4818      	ldr	r0, [pc, #96]	; (8003100 <main+0x1f0>)
 800309e:	f007 fadb 	bl	800a658 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80030a2:	2100      	movs	r1, #0
 80030a4:	4817      	ldr	r0, [pc, #92]	; (8003104 <main+0x1f4>)
 80030a6:	f007 fbce 	bl	800a846 <HAL_TIM_IC_Stop>
 80030aa:	e03e      	b.n	800312a <main+0x21a>
				}else if (motor2.stepReached) {
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <main+0x1e8>)
 80030ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02c      	beq.n	8003110 <main+0x200>
					Stop_PWM_MOTOR_2;
 80030b6:	2100      	movs	r1, #0
 80030b8:	4813      	ldr	r0, [pc, #76]	; (8003108 <main+0x1f8>)
 80030ba:	f007 facd 	bl	800a658 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80030be:	2100      	movs	r1, #0
 80030c0:	4812      	ldr	r0, [pc, #72]	; (800310c <main+0x1fc>)
 80030c2:	f007 fbc0 	bl	800a846 <HAL_TIM_IC_Stop>
 80030c6:	e030      	b.n	800312a <main+0x21a>
 80030c8:	c2f837b5 	.word	0xc2f837b5
 80030cc:	bfe0aa64 	.word	0xbfe0aa64
 80030d0:	24000720 	.word	0x24000720
 80030d4:	240000a4 	.word	0x240000a4
 80030d8:	24000bdc 	.word	0x24000bdc
 80030dc:	240007e2 	.word	0x240007e2
 80030e0:	240000c0 	.word	0x240000c0
 80030e4:	240007e3 	.word	0x240007e3
 80030e8:	58020c00 	.word	0x58020c00
 80030ec:	24000721 	.word	0x24000721
 80030f0:	24000748 	.word	0x24000748
 80030f4:	24000630 	.word	0x24000630
 80030f8:	24000670 	.word	0x24000670
 80030fc:	240006b0 	.word	0x240006b0
 8003100:	2400092c 	.word	0x2400092c
 8003104:	240007fc 	.word	0x240007fc
 8003108:	24000978 	.word	0x24000978
 800310c:	24000848 	.word	0x24000848
				}else if (motor3.stepReached){
 8003110:	4b85      	ldr	r3, [pc, #532]	; (8003328 <main+0x418>)
 8003112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <main+0x21a>
					Stop_PWM_MOTOR_3;
 800311a:	2100      	movs	r1, #0
 800311c:	4883      	ldr	r0, [pc, #524]	; (800332c <main+0x41c>)
 800311e:	f007 fa9b 	bl	800a658 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8003122:	2100      	movs	r1, #0
 8003124:	4882      	ldr	r0, [pc, #520]	; (8003330 <main+0x420>)
 8003126:	f007 fb8e 	bl	800a846 <HAL_TIM_IC_Stop>
				}

				get_Straj(time);
 800312a:	4b82      	ldr	r3, [pc, #520]	; (8003334 <main+0x424>)
 800312c:	ed93 7b00 	vldr	d7, [r3]
 8003130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003134:	eeb0 0a67 	vmov.f32	s0, s15
 8003138:	f001 fb8c 	bl	8004854 <get_Straj>

				Recta3D[0] = Pini.x + q * vDirector[0];
 800313c:	4b7e      	ldr	r3, [pc, #504]	; (8003338 <main+0x428>)
 800313e:	ed93 6b00 	vldr	d6, [r3]
 8003142:	4b7e      	ldr	r3, [pc, #504]	; (800333c <main+0x42c>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	4b7d      	ldr	r3, [pc, #500]	; (8003340 <main+0x430>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003156:	ee36 7b07 	vadd.f64	d7, d6, d7
 800315a:	4b7a      	ldr	r3, [pc, #488]	; (8003344 <main+0x434>)
 800315c:	ed83 7b00 	vstr	d7, [r3]
				Recta3D[1] = Pini.y + q * vDirector[1];
 8003160:	4b75      	ldr	r3, [pc, #468]	; (8003338 <main+0x428>)
 8003162:	ed93 6b02 	vldr	d6, [r3, #8]
 8003166:	4b75      	ldr	r3, [pc, #468]	; (800333c <main+0x42c>)
 8003168:	ed93 7a01 	vldr	s14, [r3, #4]
 800316c:	4b74      	ldr	r3, [pc, #464]	; (8003340 <main+0x430>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800317a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800317e:	4b71      	ldr	r3, [pc, #452]	; (8003344 <main+0x434>)
 8003180:	ed83 7b02 	vstr	d7, [r3, #8]
				Recta3D[2] = Pini.z + q * vDirector[2];
 8003184:	4b6c      	ldr	r3, [pc, #432]	; (8003338 <main+0x428>)
 8003186:	ed93 6b04 	vldr	d6, [r3, #16]
 800318a:	4b6c      	ldr	r3, [pc, #432]	; (800333c <main+0x42c>)
 800318c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003190:	4b6b      	ldr	r3, [pc, #428]	; (8003340 <main+0x430>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800319e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031a2:	4b68      	ldr	r3, [pc, #416]	; (8003344 <main+0x434>)
 80031a4:	ed83 7b04 	vstr	d7, [r3, #16]
				dRecta3D[0] = 0 + qd * vDirector[0];
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <main+0x42c>)
 80031aa:	ed93 7a00 	vldr	s14, [r3]
 80031ae:	4b66      	ldr	r3, [pc, #408]	; (8003348 <main+0x438>)
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800334c <main+0x43c>
 80031bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031c4:	4b62      	ldr	r3, [pc, #392]	; (8003350 <main+0x440>)
 80031c6:	ed83 7b00 	vstr	d7, [r3]
				dRecta3D[1] = 0 + qd * vDirector[1];
 80031ca:	4b5c      	ldr	r3, [pc, #368]	; (800333c <main+0x42c>)
 80031cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80031d0:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <main+0x438>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800334c <main+0x43c>
 80031de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e6:	4b5a      	ldr	r3, [pc, #360]	; (8003350 <main+0x440>)
 80031e8:	ed83 7b02 	vstr	d7, [r3, #8]
				dRecta3D[2] = 0 + qd * vDirector[2];
 80031ec:	4b53      	ldr	r3, [pc, #332]	; (800333c <main+0x42c>)
 80031ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80031f2:	4b55      	ldr	r3, [pc, #340]	; (8003348 <main+0x438>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800334c <main+0x43c>
 8003200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003204:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003208:	4b51      	ldr	r3, [pc, #324]	; (8003350 <main+0x440>)
 800320a:	ed83 7b04 	vstr	d7, [r3, #16]

				inverseJacobian(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 800320e:	4b50      	ldr	r3, [pc, #320]	; (8003350 <main+0x440>)
 8003210:	ed93 7b00 	vldr	d7, [r3]
 8003214:	4b4e      	ldr	r3, [pc, #312]	; (8003350 <main+0x440>)
 8003216:	ed93 6b02 	vldr	d6, [r3, #8]
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <main+0x440>)
 800321c:	ed93 2b04 	vldr	d2, [r3, #16]
 8003220:	4b48      	ldr	r3, [pc, #288]	; (8003344 <main+0x434>)
 8003222:	ed93 3b00 	vldr	d3, [r3]
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <main+0x434>)
 8003228:	ed93 4b02 	vldr	d4, [r3, #8]
 800322c:	4b45      	ldr	r3, [pc, #276]	; (8003344 <main+0x434>)
 800322e:	ed93 5b04 	vldr	d5, [r3, #16]
 8003232:	eeb0 1b46 	vmov.f64	d1, d6
 8003236:	eeb0 0b47 	vmov.f64	d0, d7
 800323a:	f7fe fb9d 	bl	8001978 <inverseJacobian>


				setProfilTimer();
 800323e:	f002 fef7 	bl	8006030 <setProfilTimer>

				if(startMotors){
 8003242:	4b44      	ldr	r3, [pc, #272]	; (8003354 <main+0x444>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00e      	beq.n	8003268 <main+0x358>
					startMotors = false;
 800324a:	4b42      	ldr	r3, [pc, #264]	; (8003354 <main+0x444>)
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
					Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8003250:	2100      	movs	r1, #0
 8003252:	4841      	ldr	r0, [pc, #260]	; (8003358 <main+0x448>)
 8003254:	f007 f8f2 	bl	800a43c <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_2;	// Activar generacion de pwm
 8003258:	2100      	movs	r1, #0
 800325a:	4840      	ldr	r0, [pc, #256]	; (800335c <main+0x44c>)
 800325c:	f007 f8ee 	bl	800a43c <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_3;	// Activar generacion de pwm
 8003260:	2100      	movs	r1, #0
 8003262:	4832      	ldr	r0, [pc, #200]	; (800332c <main+0x41c>)
 8003264:	f007 f8ea 	bl	800a43c <HAL_TIM_PWM_Start>
				}

				stopMotors = true;
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <main+0x450>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <main+0x454>)
 8003270:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003274:	2b00      	cmp	r3, #0
 8003276:	f43f af0b 	beq.w	8003090 <main+0x180>
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <main+0x458>)
 800327c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003280:	2b00      	cmp	r3, #0
 8003282:	f43f af05 	beq.w	8003090 <main+0x180>
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <main+0x418>)
 8003288:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800328c:	2b00      	cmp	r3, #0
 800328e:	f43f aeff 	beq.w	8003090 <main+0x180>
			}// End while


			if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 8003292:	4b33      	ldr	r3, [pc, #204]	; (8003360 <main+0x450>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d029      	beq.n	80032ee <main+0x3de>

				startMotors = false;
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <main+0x444>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80032a0:	2100      	movs	r1, #0
 80032a2:	4832      	ldr	r0, [pc, #200]	; (800336c <main+0x45c>)
 80032a4:	f007 facf 	bl	800a846 <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80032a8:	2100      	movs	r1, #0
 80032aa:	4831      	ldr	r0, [pc, #196]	; (8003370 <main+0x460>)
 80032ac:	f007 facb 	bl	800a846 <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80032b0:	2100      	movs	r1, #0
 80032b2:	481f      	ldr	r0, [pc, #124]	; (8003330 <main+0x420>)
 80032b4:	f007 fac7 	bl	800a846 <HAL_TIM_IC_Stop>

				if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <main+0x454>)
 80032ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <main+0x3ba>
 80032c2:	2100      	movs	r1, #0
 80032c4:	4824      	ldr	r0, [pc, #144]	; (8003358 <main+0x448>)
 80032c6:	f007 f9c7 	bl	800a658 <HAL_TIM_PWM_Stop>
				if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <main+0x458>)
 80032cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <main+0x3cc>
 80032d4:	2100      	movs	r1, #0
 80032d6:	4821      	ldr	r0, [pc, #132]	; (800335c <main+0x44c>)
 80032d8:	f007 f9be 	bl	800a658 <HAL_TIM_PWM_Stop>
				if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <main+0x418>)
 80032de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <main+0x3de>
 80032e6:	2100      	movs	r1, #0
 80032e8:	4810      	ldr	r0, [pc, #64]	; (800332c <main+0x41c>)
 80032ea:	f007 f9b5 	bl	800a658 <HAL_TIM_PWM_Stop>
			}

			//Update coordinantes
			Pini.x = Pfin.x;
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <main+0x464>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	4910      	ldr	r1, [pc, #64]	; (8003338 <main+0x428>)
 80032f6:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <main+0x464>)
 80032fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003300:	490d      	ldr	r1, [pc, #52]	; (8003338 <main+0x428>)
 8003302:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <main+0x464>)
 8003308:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800330c:	490a      	ldr	r1, [pc, #40]	; (8003338 <main+0x428>)
 800330e:	e9c1 2304 	strd	r2, r3, [r1, #16]

			HAL_TIM_Base_Stop_IT(&htim15);
 8003312:	4819      	ldr	r0, [pc, #100]	; (8003378 <main+0x468>)
 8003314:	f007 f802 	bl	800a31c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8003318:	4818      	ldr	r0, [pc, #96]	; (800337c <main+0x46c>)
 800331a:	f006 ff5f 	bl	800a1dc <HAL_TIM_Base_Stop>


			state = READY;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <main+0x470>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]

			break;
 8003324:	e139      	b.n	800359a <main+0x68a>
 8003326:	bf00      	nop
 8003328:	240006b0 	.word	0x240006b0
 800332c:	240009c4 	.word	0x240009c4
 8003330:	24000894 	.word	0x24000894
 8003334:	240007b8 	.word	0x240007b8
 8003338:	24000748 	.word	0x24000748
 800333c:	2400077c 	.word	0x2400077c
 8003340:	24000724 	.word	0x24000724
 8003344:	24000788 	.word	0x24000788
 8003348:	24000728 	.word	0x24000728
 800334c:	00000000 	.word	0x00000000
 8003350:	240007a0 	.word	0x240007a0
 8003354:	24000722 	.word	0x24000722
 8003358:	2400092c 	.word	0x2400092c
 800335c:	24000978 	.word	0x24000978
 8003360:	24000723 	.word	0x24000723
 8003364:	24000630 	.word	0x24000630
 8003368:	24000670 	.word	0x24000670
 800336c:	240007fc 	.word	0x240007fc
 8003370:	24000848 	.word	0x24000848
 8003374:	24000760 	.word	0x24000760
 8003378:	24000a10 	.word	0x24000a10
 800337c:	240008e0 	.word	0x240008e0
 8003380:	24000720 	.word	0x24000720

		case READY:

			if (receptionFlag){
 8003384:	4b85      	ldr	r3, [pc, #532]	; (800359c <main+0x68c>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8105 	beq.w	8003598 <main+0x688>

				receptionFlag = false;
 800338e:	4b83      	ldr	r3, [pc, #524]	; (800359c <main+0x68c>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]

				startMotors = true;
 8003394:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <main+0x690>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800339a:	2100      	movs	r1, #0
 800339c:	4881      	ldr	r0, [pc, #516]	; (80035a4 <main+0x694>)
 800339e:	f007 fac3 	bl	800a928 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80033a2:	2100      	movs	r1, #0
 80033a4:	4880      	ldr	r0, [pc, #512]	; (80035a8 <main+0x698>)
 80033a6:	f007 fabf 	bl	800a928 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80033aa:	2100      	movs	r1, #0
 80033ac:	487f      	ldr	r0, [pc, #508]	; (80035ac <main+0x69c>)
 80033ae:	f007 fabb 	bl	800a928 <HAL_TIM_IC_Start_IT>

				euclideanDistance = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 80033b2:	4b7f      	ldr	r3, [pc, #508]	; (80035b0 <main+0x6a0>)
 80033b4:	ed93 6b00 	vldr	d6, [r3]
 80033b8:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <main+0x6a4>)
 80033ba:	ed93 7b00 	vldr	d7, [r3]
 80033be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80033c2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80033c6:	eeb0 0b47 	vmov.f64	d0, d7
 80033ca:	f00e f8e9 	bl	80115a0 <pow>
 80033ce:	eeb0 8b40 	vmov.f64	d8, d0
 80033d2:	4b77      	ldr	r3, [pc, #476]	; (80035b0 <main+0x6a0>)
 80033d4:	ed93 6b02 	vldr	d6, [r3, #8]
 80033d8:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <main+0x6a4>)
 80033da:	ed93 7b02 	vldr	d7, [r3, #8]
 80033de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80033e2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80033e6:	eeb0 0b47 	vmov.f64	d0, d7
 80033ea:	f00e f8d9 	bl	80115a0 <pow>
 80033ee:	eeb0 7b40 	vmov.f64	d7, d0
 80033f2:	ee38 8b07 	vadd.f64	d8, d8, d7
 80033f6:	4b6e      	ldr	r3, [pc, #440]	; (80035b0 <main+0x6a0>)
 80033f8:	ed93 6b04 	vldr	d6, [r3, #16]
 80033fc:	4b6d      	ldr	r3, [pc, #436]	; (80035b4 <main+0x6a4>)
 80033fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8003402:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003406:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800340a:	eeb0 0b47 	vmov.f64	d0, d7
 800340e:	f00e f8c7 	bl	80115a0 <pow>
 8003412:	eeb0 7b40 	vmov.f64	d7, d0
 8003416:	ee38 7b07 	vadd.f64	d7, d8, d7
 800341a:	eeb0 0b47 	vmov.f64	d0, d7
 800341e:	f00e fb3f 	bl	8011aa0 <sqrt>
 8003422:	eeb0 7b40 	vmov.f64	d7, d0
 8003426:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800342a:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <main+0x6a8>)
 800342c:	edc3 7a00 	vstr	s15, [r3]
				vDirector[0] = (Pfin.x - Pini.x) / euclideanDistance;	//Vector director en X
 8003430:	4b5f      	ldr	r3, [pc, #380]	; (80035b0 <main+0x6a0>)
 8003432:	ed93 6b00 	vldr	d6, [r3]
 8003436:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <main+0x6a4>)
 8003438:	ed93 7b00 	vldr	d7, [r3]
 800343c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003440:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <main+0x6a8>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800344a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800344e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <main+0x6ac>)
 8003454:	edc3 7a00 	vstr	s15, [r3]
				vDirector[1] = (Pfin.y - Pini.y) / euclideanDistance;	//Vector director en Y
 8003458:	4b55      	ldr	r3, [pc, #340]	; (80035b0 <main+0x6a0>)
 800345a:	ed93 6b02 	vldr	d6, [r3, #8]
 800345e:	4b55      	ldr	r3, [pc, #340]	; (80035b4 <main+0x6a4>)
 8003460:	ed93 7b02 	vldr	d7, [r3, #8]
 8003464:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <main+0x6a8>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003472:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003476:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800347a:	4b50      	ldr	r3, [pc, #320]	; (80035bc <main+0x6ac>)
 800347c:	edc3 7a01 	vstr	s15, [r3, #4]
				vDirector[2] = (Pfin.z - Pini.z) / euclideanDistance;	//Vector director en Z
 8003480:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <main+0x6a0>)
 8003482:	ed93 6b04 	vldr	d6, [r3, #16]
 8003486:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <main+0x6a4>)
 8003488:	ed93 7b04 	vldr	d7, [r3, #16]
 800348c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003490:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <main+0x6a8>)
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800349a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800349e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <main+0x6ac>)
 80034a4:	edc3 7a02 	vstr	s15, [r3, #8]

				inverseKinematic(Pfin);
 80034a8:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <main+0x6a0>)
 80034aa:	ed93 5b00 	vldr	d5, [r3]
 80034ae:	ed93 6b02 	vldr	d6, [r3, #8]
 80034b2:	ed93 7b04 	vldr	d7, [r3, #16]
 80034b6:	eeb0 0b45 	vmov.f64	d0, d5
 80034ba:	eeb0 1b46 	vmov.f64	d1, d6
 80034be:	eeb0 2b47 	vmov.f64	d2, d7
 80034c2:	f7fe fd4d 	bl	8001f60 <inverseKinematic>

				configMotor(&motor1,1);
 80034c6:	2101      	movs	r1, #1
 80034c8:	483d      	ldr	r0, [pc, #244]	; (80035c0 <main+0x6b0>)
 80034ca:	f000 fa41 	bl	8003950 <configMotor>
				configMotor(&motor2,2);
 80034ce:	2102      	movs	r1, #2
 80034d0:	483c      	ldr	r0, [pc, #240]	; (80035c4 <main+0x6b4>)
 80034d2:	f000 fa3d 	bl	8003950 <configMotor>
				configMotor(&motor3,3);
 80034d6:	2103      	movs	r1, #3
 80034d8:	483b      	ldr	r0, [pc, #236]	; (80035c8 <main+0x6b8>)
 80034da:	f000 fa39 	bl	8003950 <configMotor>

				update_ScurveTraj(0, euclideanDistance, vi, vf, vmax, amax, jmax);
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <main+0x6a8>)
 80034e0:	edd3 7a00 	vldr	s15, [r3]
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <main+0x6bc>)
 80034e6:	ed93 7a00 	vldr	s14, [r3]
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <main+0x6c0>)
 80034ec:	edd3 6a00 	vldr	s13, [r3]
 80034f0:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <main+0x6c4>)
 80034f2:	ed93 6a00 	vldr	s12, [r3]
 80034f6:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <main+0x6c8>)
 80034f8:	edd3 5a00 	vldr	s11, [r3]
 80034fc:	4b37      	ldr	r3, [pc, #220]	; (80035dc <main+0x6cc>)
 80034fe:	ed93 5a00 	vldr	s10, [r3]
 8003502:	eeb0 3a45 	vmov.f32	s6, s10
 8003506:	eef0 2a65 	vmov.f32	s5, s11
 800350a:	eeb0 2a46 	vmov.f32	s4, s12
 800350e:	eef0 1a66 	vmov.f32	s3, s13
 8003512:	eeb0 1a47 	vmov.f32	s2, s14
 8003516:	eef0 0a67 	vmov.f32	s1, s15
 800351a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80035e0 <main+0x6d0>
 800351e:	f002 f847 	bl	80055b0 <update_ScurveTraj>

				timeFlag = false;
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <main+0x6d4>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]

				motor1.pMotor = 0;
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <main+0x6b0>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
				motor2.pMotor = 0;
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <main+0x6b4>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
				motor3.pMotor = 0;
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <main+0x6b8>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

				motor1.stepReached = false;
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <main+0x6b0>)
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor2.stepReached = false;
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <main+0x6b4>)
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor3.stepReached = false;
 800354a:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <main+0x6b8>)
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				motor1.rpm = 0;
 8003552:	491b      	ldr	r1, [pc, #108]	; (80035c0 <main+0x6b0>)
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9c1 2306 	strd	r2, r3, [r1, #24]
				motor2.rpm = 0;
 8003560:	4918      	ldr	r1, [pc, #96]	; (80035c4 <main+0x6b4>)
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9c1 2306 	strd	r2, r3, [r1, #24]
				motor3.rpm = 0;
 800356e:	4916      	ldr	r1, [pc, #88]	; (80035c8 <main+0x6b8>)
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9c1 2306 	strd	r2, r3, [r1, #24]

				HAL_TIM_Base_Start(&htim5);
 800357c:	481a      	ldr	r0, [pc, #104]	; (80035e8 <main+0x6d8>)
 800357e:	f006 fdbd 	bl	800a0fc <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start_IT(&htim15);
 8003582:	481a      	ldr	r0, [pc, #104]	; (80035ec <main+0x6dc>)
 8003584:	f006 fe52 	bl	800a22c <HAL_TIM_Base_Start_IT>


				state = WORKING;
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <main+0x6e0>)
 800358a:	2202      	movs	r2, #2
 800358c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800358e:	e003      	b.n	8003598 <main+0x688>
		case FAULT:


			break;

		default:break;
 8003590:	bf00      	nop
 8003592:	e4dd      	b.n	8002f50 <main+0x40>
			break;
 8003594:	bf00      	nop
 8003596:	e4db      	b.n	8002f50 <main+0x40>
			break;
 8003598:	bf00      	nop
		switch (state){
 800359a:	e4d9      	b.n	8002f50 <main+0x40>
 800359c:	240007e3 	.word	0x240007e3
 80035a0:	24000722 	.word	0x24000722
 80035a4:	240007fc 	.word	0x240007fc
 80035a8:	24000848 	.word	0x24000848
 80035ac:	24000894 	.word	0x24000894
 80035b0:	24000760 	.word	0x24000760
 80035b4:	24000748 	.word	0x24000748
 80035b8:	24000778 	.word	0x24000778
 80035bc:	2400077c 	.word	0x2400077c
 80035c0:	24000630 	.word	0x24000630
 80035c4:	24000670 	.word	0x24000670
 80035c8:	240006b0 	.word	0x240006b0
 80035cc:	2400073c 	.word	0x2400073c
 80035d0:	24000740 	.word	0x24000740
 80035d4:	2400009c 	.word	0x2400009c
 80035d8:	240000a0 	.word	0x240000a0
 80035dc:	24000098 	.word	0x24000098
 80035e0:	00000000 	.word	0x00000000
 80035e4:	240007f1 	.word	0x240007f1
 80035e8:	240008e0 	.word	0x240008e0
 80035ec:	24000a10 	.word	0x24000a10
 80035f0:	24000720 	.word	0x24000720

080035f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b09c      	sub	sp, #112	; 0x70
 80035f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fe:	224c      	movs	r2, #76	; 0x4c
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f00b f92a 	bl	800e85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	2220      	movs	r2, #32
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f00b f924 	bl	800e85c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003614:	2002      	movs	r0, #2
 8003616:	f004 f9bd 	bl	8007994 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <SystemClock_Config+0xf4>)
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <SystemClock_Config+0xf4>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	62d3      	str	r3, [r2, #44]	; 0x2c
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <SystemClock_Config+0xf4>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <SystemClock_Config+0xf8>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800363c:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <SystemClock_Config+0xf8>)
 800363e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003642:	6193      	str	r3, [r2, #24]
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <SystemClock_Config+0xf8>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003650:	bf00      	nop
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <SystemClock_Config+0xf8>)
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365e:	d1f8      	bne.n	8003652 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003660:	2302      	movs	r3, #2
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003664:	2301      	movs	r3, #1
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003668:	2340      	movs	r3, #64	; 0x40
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800366c:	2302      	movs	r3, #2
 800366e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003670:	2300      	movs	r3, #0
 8003672:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003674:	2304      	movs	r3, #4
 8003676:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003678:	2310      	movs	r3, #16
 800367a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800367c:	2302      	movs	r3, #2
 800367e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003680:	2302      	movs	r3, #2
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003684:	2302      	movs	r3, #2
 8003686:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003688:	230c      	movs	r3, #12
 800368a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800368c:	2300      	movs	r3, #0
 800368e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003698:	4618      	mov	r0, r3
 800369a:	f004 f9b5 	bl	8007a08 <HAL_RCC_OscConfig>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80036a4:	f000 f94c 	bl	8003940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036a8:	233f      	movs	r3, #63	; 0x3f
 80036aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ac:	2303      	movs	r3, #3
 80036ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80036b4:	2308      	movs	r3, #8
 80036b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80036c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fdc8 	bl	8008264 <HAL_RCC_ClockConfig>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <SystemClock_Config+0xea>
  {
    Error_Handler();
 80036da:	f000 f931 	bl	8003940 <Error_Handler>
  }
}
 80036de:	bf00      	nop
 80036e0:	3770      	adds	r7, #112	; 0x70
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	58000400 	.word	0x58000400
 80036ec:	58024800 	.word	0x58024800

080036f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]

	  if(GPIO_Pin == BUTTON_Pin) {
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003700:	d103      	bne.n	800370a <HAL_GPIO_EXTI_Callback+0x1a>
		  FlagButton=1;
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_GPIO_EXTI_Callback+0x28>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/


}
 8003708:	e000      	b.n	800370c <HAL_GPIO_EXTI_Callback+0x1c>
	      __NOP();
 800370a:	bf00      	nop
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	240007f4 	.word	0x240007f4

0800371c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a30      	ldr	r2, [pc, #192]	; (80037ec <HAL_UART_RxCpltCallback+0xd0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d14d      	bne.n	80037ca <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 800372e:	4b30      	ldr	r3, [pc, #192]	; (80037f0 <HAL_UART_RxCpltCallback+0xd4>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b3a      	cmp	r3, #58	; 0x3a
 8003738:	d006      	beq.n	8003748 <HAL_UART_RxCpltCallback+0x2c>
 800373a:	2b3a      	cmp	r3, #58	; 0x3a
 800373c:	dc36      	bgt.n	80037ac <HAL_UART_RxCpltCallback+0x90>
 800373e:	2b08      	cmp	r3, #8
 8003740:	d009      	beq.n	8003756 <HAL_UART_RxCpltCallback+0x3a>
 8003742:	2b0d      	cmp	r3, #13
 8003744:	d01e      	beq.n	8003784 <HAL_UART_RxCpltCallback+0x68>
 8003746:	e031      	b.n	80037ac <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 800374e:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_UART_RxCpltCallback+0xdc>)
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
			break;
 8003754:	e040      	b.n	80037d8 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d037      	beq.n	80037ce <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 800375e:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	3b01      	subs	r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 8003768:	701a      	strb	r2, [r3, #0]
			}
			break;
 800376a:	e030      	b.n	80037ce <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_UART_RxCpltCallback+0xe0>)
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 8003782:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b1e      	cmp	r3, #30
 800378a:	d1ef      	bne.n	800376c <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_UART_RxCpltCallback+0xdc>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d11e      	bne.n	80037d2 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_UART_RxCpltCallback+0xe0>)
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 80037a0:	f7fd fff6 	bl	8001790 <interpretaComando>
				cm0 = 0;
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_UART_RxCpltCallback+0xdc>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]

			}
			break;
 80037aa:	e012      	b.n	80037d2 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b1d      	cmp	r3, #29
 80037b2:	d810      	bhi.n	80037d6 <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	b2d1      	uxtb	r1, r2
 80037bc:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <HAL_UART_RxCpltCallback+0xd8>)
 80037be:	7011      	strb	r1, [r2, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_UART_RxCpltCallback+0xe0>)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	5453      	strb	r3, [r2, r1]
			}
			break;
 80037c8:	e005      	b.n	80037d6 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 80037ca:	bf00      	nop
 80037cc:	e004      	b.n	80037d8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80037d6:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 80037d8:	2201      	movs	r2, #1
 80037da:	4905      	ldr	r1, [pc, #20]	; (80037f0 <HAL_UART_RxCpltCallback+0xd4>)
 80037dc:	4808      	ldr	r0, [pc, #32]	; (8003800 <HAL_UART_RxCpltCallback+0xe4>)
 80037de:	f008 fd9b 	bl	800c318 <HAL_UART_Receive_IT>
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40004800 	.word	0x40004800
 80037f0:	240007e2 	.word	0x240007e2
 80037f4:	240007c0 	.word	0x240007c0
 80037f8:	240007f0 	.word	0x240007f0
 80037fc:	240007c4 	.word	0x240007c4
 8003800:	24000bdc 	.word	0x24000bdc

08003804 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	__NOP();
 800380c:	bf00      	nop
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d110      	bne.n	8003850 <HAL_TIM_IC_CaptureCallback+0x34>
		if (motor1.pMotor == motor1.numStep) {
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d104      	bne.n	8003844 <HAL_TIM_IC_CaptureCallback+0x28>
			motor1.stepReached = true;
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <HAL_TIM_IC_CaptureCallback+0x98>)
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			}
		}
		else{}
	}
	*/
}
 8003842:	e030      	b.n	80038a6 <HAL_TIM_IC_CaptureCallback+0x8a>
			motor1.pMotor++;
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_TIM_IC_CaptureCallback+0x98>)
 800384c:	6013      	str	r3, [r2, #0]
}
 800384e:	e02a      	b.n	80038a6 <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM3){
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d110      	bne.n	800387c <HAL_TIM_IC_CaptureCallback+0x60>
		if (motor2.pMotor == motor2.numStep) {
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <HAL_TIM_IC_CaptureCallback+0xa0>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d104      	bne.n	8003870 <HAL_TIM_IC_CaptureCallback+0x54>
			motor2.stepReached = true;
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800386e:	e01a      	b.n	80038a6 <HAL_TIM_IC_CaptureCallback+0x8a>
			motor2.pMotor++;
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a11      	ldr	r2, [pc, #68]	; (80038bc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003878:	6013      	str	r3, [r2, #0]
}
 800387a:	e014      	b.n	80038a6 <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM4){
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10f      	bne.n	80038a6 <HAL_TIM_IC_CaptureCallback+0x8a>
		if (motor3.pMotor == motor3.numStep) {
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d104      	bne.n	800389c <HAL_TIM_IC_CaptureCallback+0x80>
			motor3.stepReached = true;
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800389a:	e004      	b.n	80038a6 <HAL_TIM_IC_CaptureCallback+0x8a>
			motor3.pMotor++;
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80038a4:	6013      	str	r3, [r2, #0]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	24000630 	.word	0x24000630
 80038b8:	40000400 	.word	0x40000400
 80038bc:	24000670 	.word	0x24000670
 80038c0:	40000800 	.word	0x40000800
 80038c4:	240006b0 	.word	0x240006b0

080038c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d11f      	bne.n	8003918 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	3301      	adds	r3, #1
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8003906:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8003928 <HAL_TIM_PeriodElapsedCallback+0x60>
 800390a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800390e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003914:	ed83 7b00 	vstr	d7, [r3]
		dRecta3D[2] = 0 + qd * vDirector[2];

		inverseJacobian(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
	*/
	}
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	f3af 8000 	nop.w
 8003928:	00000000 	.word	0x00000000
 800392c:	418e8480 	.word	0x418e8480
 8003930:	24000a10 	.word	0x24000a10
 8003934:	240007f1 	.word	0x240007f1
 8003938:	40000c00 	.word	0x40000c00
 800393c:	240007b8 	.word	0x240007b8

08003940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	ed93 6b02 	vldr	d6, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800396c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	db39      	blt.n	80039ea <configMotor+0x9a>
		if(ES1i_PRESSED){
 8003976:	2102      	movs	r1, #2
 8003978:	4861      	ldr	r0, [pc, #388]	; (8003b00 <configMotor+0x1b0>)
 800397a:	f003 ffbf 	bl	80078fc <HAL_GPIO_ReadPin>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d106      	bne.n	8003992 <configMotor+0x42>
			flagErrorEndStop = 1;
 8003984:	495f      	ldr	r1, [pc, #380]	; (8003b04 <configMotor+0x1b4>)
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	4b5f      	ldr	r3, [pc, #380]	; (8003b08 <configMotor+0x1b8>)
 800398c:	e9c1 2300 	strd	r2, r3, [r1]
 8003990:	e064      	b.n	8003a5c <configMotor+0x10c>
		} else {
			diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	ed93 6b02 	vldr	d6, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800399e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039a2:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <configMotor+0x74>
 80039b8:	2201      	movs	r2, #1
 80039ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039be:	4853      	ldr	r0, [pc, #332]	; (8003b0c <configMotor+0x1bc>)
 80039c0:	f003 ffb4 	bl	800792c <HAL_GPIO_WritePin>
            if (i==1) negative_Dir_MOTOR_2;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <configMotor+0x86>
 80039ca:	2201      	movs	r2, #1
 80039cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039d0:	484e      	ldr	r0, [pc, #312]	; (8003b0c <configMotor+0x1bc>)
 80039d2:	f003 ffab 	bl	800792c <HAL_GPIO_WritePin>
            if (i==2) negative_Dir_MOTOR_3;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d13f      	bne.n	8003a5c <configMotor+0x10c>
 80039dc:	2201      	movs	r2, #1
 80039de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039e2:	484a      	ldr	r0, [pc, #296]	; (8003b0c <configMotor+0x1bc>)
 80039e4:	f003 ffa2 	bl	800792c <HAL_GPIO_WritePin>
 80039e8:	e038      	b.n	8003a5c <configMotor+0x10c>
		}
	} else {
		if(ES1s_PRESSED){
 80039ea:	2101      	movs	r1, #1
 80039ec:	4844      	ldr	r0, [pc, #272]	; (8003b00 <configMotor+0x1b0>)
 80039ee:	f003 ff85 	bl	80078fc <HAL_GPIO_ReadPin>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <configMotor+0xb6>
			flagErrorEndStop = 1;
 80039f8:	4942      	ldr	r1, [pc, #264]	; (8003b04 <configMotor+0x1b4>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <configMotor+0x1b8>)
 8003a00:	e9c1 2300 	strd	r2, r3, [r1]
 8003a04:	e02a      	b.n	8003a5c <configMotor+0x10c>
		} else {
			diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a16:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

			if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <configMotor+0xe8>
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a32:	4836      	ldr	r0, [pc, #216]	; (8003b0c <configMotor+0x1bc>)
 8003a34:	f003 ff7a 	bl	800792c <HAL_GPIO_WritePin>
            if (i==1) positive_Dir_MOTOR_2;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <configMotor+0xfa>
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a44:	4831      	ldr	r0, [pc, #196]	; (8003b0c <configMotor+0x1bc>)
 8003a46:	f003 ff71 	bl	800792c <HAL_GPIO_WritePin>
            if (i==2) positive_Dir_MOTOR_3;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d105      	bne.n	8003a5c <configMotor+0x10c>
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a56:	482d      	ldr	r0, [pc, #180]	; (8003b0c <configMotor+0x1bc>)
 8003a58:	f003 ff68 	bl	800792c <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	motor->calcStep = (diffAngles * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8003a5c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a60:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003af0 <configMotor+0x1a0>
 8003a64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003a68:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003af8 <configMotor+0x1a8>
 8003a6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	motor->numStep = (uint32_t) motor->calcStep;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003a7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a80:	ee17 2a90 	vmov	r2, s15
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]
	motor->remanente = motor->remanente + (motor->calcStep - motor->numStep);// que el error no se amplifique.
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003aa0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003aa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remanente >= 1) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003ab4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003ab8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	da00      	bge.n	8003ac4 <configMotor+0x174>
		motor->remanente = motor->remanente - 1;
		motor->numStep = motor->numStep + 1;
	}

}
 8003ac2:	e00e      	b.n	8003ae2 <configMotor+0x192>
		motor->remanente = motor->remanente - 1;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003aca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003ace:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep = motor->numStep + 1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	605a      	str	r2, [r3, #4]
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w
 8003af0:	00000000 	.word	0x00000000
 8003af4:	40bf4000 	.word	0x40bf4000
 8003af8:	00000000 	.word	0x00000000
 8003afc:	40768000 	.word	0x40768000
 8003b00:	58021000 	.word	0x58021000
 8003b04:	240007e8 	.word	0x240007e8
 8003b08:	3ff00000 	.word	0x3ff00000
 8003b0c:	58020800 	.word	0x58020800

08003b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b16:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_MspInit+0x44>)
 8003b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <HAL_MspInit+0x44>)
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_MspInit+0x44>)
 8003b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003b34:	2005      	movs	r0, #5
 8003b36:	f002 ff7f 	bl	8006a38 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	2051      	movs	r0, #81	; 0x51
 8003b40:	f002 ff85 	bl	8006a4e <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003b44:	2051      	movs	r0, #81	; 0x51
 8003b46:	f002 ff9c 	bl	8006a82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	58024400 	.word	0x58024400

08003b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <HardFault_Handler+0x4>

08003b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <MemManage_Handler+0x4>

08003b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <BusFault_Handler+0x4>

08003b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <UsageFault_Handler+0x4>

08003b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bac:	f002 fe00 	bl	80067b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003bb8:	2001      	movs	r0, #1
 8003bba:	f003 fed0 	bl	800795e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003bc6:	2002      	movs	r0, #2
 8003bc8:	f003 fec9 	bl	800795e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003bd4:	2004      	movs	r0, #4
 8003bd6:	f003 fec2 	bl	800795e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003be2:	2008      	movs	r0, #8
 8003be4:	f003 febb 	bl	800795e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}

08003bec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003bf0:	2010      	movs	r0, #16
 8003bf2:	f003 feb4 	bl	800795e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003bfe:	2020      	movs	r0, #32
 8003c00:	f003 fead 	bl	800795e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <TIM2_IRQHandler+0x10>)
 8003c0e:	f007 f8ad 	bl	800ad6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	240007fc 	.word	0x240007fc

08003c1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <TIM3_IRQHandler+0x10>)
 8003c22:	f007 f8a3 	bl	800ad6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	24000848 	.word	0x24000848

08003c30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <TIM4_IRQHandler+0x10>)
 8003c36:	f007 f899 	bl	800ad6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	24000894 	.word	0x24000894

08003c44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <USART3_IRQHandler+0x10>)
 8003c4a:	f008 fbbb 	bl	800c3c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	24000bdc 	.word	0x24000bdc

08003c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003c5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c60:	f003 fe7d 	bl	800795e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003c7c:	4802      	ldr	r0, [pc, #8]	; (8003c88 <TIM15_IRQHandler+0x10>)
 8003c7e:	f007 f875 	bl	800ad6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	24000a10 	.word	0x24000a10

08003c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
	return 1;
 8003c90:	2301      	movs	r3, #1
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_kill>:

int _kill(int pid, int sig)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ca6:	f00a fdaf 	bl	800e808 <__errno>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2216      	movs	r2, #22
 8003cae:	601a      	str	r2, [r3, #0]
	return -1;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_exit>:

void _exit (int status)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ffe7 	bl	8003c9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cce:	e7fe      	b.n	8003cce <_exit+0x12>

08003cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e00a      	b.n	8003cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ce2:	f3af 8000 	nop.w
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	60ba      	str	r2, [r7, #8]
 8003cee:	b2ca      	uxtb	r2, r1
 8003cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	dbf0      	blt.n	8003ce2 <_read+0x12>
	}

return len;
 8003d00:	687b      	ldr	r3, [r7, #4]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e009      	b.n	8003d30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	60ba      	str	r2, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	dbf1      	blt.n	8003d1c <_write+0x12>
	}
	return len;
 8003d38:	687b      	ldr	r3, [r7, #4]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_close>:

int _close(int file)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
	return -1;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_isatty>:

int _isatty(int file)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	return 1;
 8003d82:	2301      	movs	r3, #1
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	return 0;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <_sbrk+0x50>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <_sbrk+0x16>
		heap_end = &end;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <_sbrk+0x50>)
 8003dbe:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <_sbrk+0x54>)
 8003dc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <_sbrk+0x50>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <_sbrk+0x50>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	466a      	mov	r2, sp
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d907      	bls.n	8003de6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003dd6:	f00a fd17 	bl	800e808 <__errno>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	220c      	movs	r2, #12
 8003dde:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	e006      	b.n	8003df4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <_sbrk+0x50>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <_sbrk+0x50>)
 8003df0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	240007f8 	.word	0x240007f8
 8003e00:	24000c80 	.word	0x24000c80

08003e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e08:	4b29      	ldr	r3, [pc, #164]	; (8003eb0 <SystemInit+0xac>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <SystemInit+0xac>)
 8003e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <SystemInit+0xb0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <SystemInit+0xb0>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e24:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <SystemInit+0xb0>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <SystemInit+0xb0>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4921      	ldr	r1, [pc, #132]	; (8003eb4 <SystemInit+0xb0>)
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <SystemInit+0xb4>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e36:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <SystemInit+0xb0>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <SystemInit+0xb0>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <SystemInit+0xb0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <SystemInit+0xb0>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <SystemInit+0xb0>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <SystemInit+0xb0>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <SystemInit+0xb0>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <SystemInit+0xb0>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <SystemInit+0xb0>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <SystemInit+0xb0>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <SystemInit+0xb0>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <SystemInit+0xb0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <SystemInit+0xb0>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <SystemInit+0xb0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <SystemInit+0xb8>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <SystemInit+0xbc>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e96:	d202      	bcs.n	8003e9e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <SystemInit+0xc0>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <SystemInit+0xac>)
 8003ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ea4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003ea6:	bf00      	nop
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000ed00 	.word	0xe000ed00
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ebc:	5c001000 	.word	0x5c001000
 8003ec0:	ffff0000 	.word	0xffff0000
 8003ec4:	51008108 	.word	0x51008108

08003ec8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08c      	sub	sp, #48	; 0x30
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ece:	f107 0320 	add.w	r3, r7, #32
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003efa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003f08:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f1c:	4821      	ldr	r0, [pc, #132]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f1e:	f006 f895 	bl	800a04c <HAL_TIM_Base_Init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003f28:	f7ff fd0a 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f30:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f32:	f107 0320 	add.w	r3, r7, #32
 8003f36:	4619      	mov	r1, r3
 8003f38:	481a      	ldr	r0, [pc, #104]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f3a:	f007 f9e7 	bl	800b30c <HAL_TIM_ConfigClockSource>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003f44:	f7ff fcfc 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003f48:	4816      	ldr	r0, [pc, #88]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f4a:	f006 fc1b 	bl	800a784 <HAL_TIM_IC_Init>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003f54:	f7ff fcf4 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4619      	mov	r1, r3
 8003f66:	480f      	ldr	r0, [pc, #60]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f68:	f008 f844 	bl	800bff4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003f72:	f7ff fce5 	bl	8003940 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003f76:	2302      	movs	r3, #2
 8003f78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <MX_TIM2_Init+0xdc>)
 8003f8e:	f007 f80c 	bl	800afaa <HAL_TIM_IC_ConfigChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003f98:	f7ff fcd2 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f9c:	bf00      	nop
 8003f9e:	3730      	adds	r7, #48	; 0x30
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	240007fc 	.word	0x240007fc

08003fa8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	; 0x30
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fae:	f107 0320 	add.w	r3, r7, #32
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003fc8:	1d3b      	adds	r3, r7, #4
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
 8003fd2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <MX_TIM3_Init+0xdc>)
 8003fd6:	4a2c      	ldr	r2, [pc, #176]	; (8004088 <MX_TIM3_Init+0xe0>)
 8003fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <MX_TIM3_Init+0xdc>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe0:	4b28      	ldr	r3, [pc, #160]	; (8004084 <MX_TIM3_Init+0xdc>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003fe6:	4b27      	ldr	r3, [pc, #156]	; (8004084 <MX_TIM3_Init+0xdc>)
 8003fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fee:	4b25      	ldr	r3, [pc, #148]	; (8004084 <MX_TIM3_Init+0xdc>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <MX_TIM3_Init+0xdc>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ffa:	4822      	ldr	r0, [pc, #136]	; (8004084 <MX_TIM3_Init+0xdc>)
 8003ffc:	f006 f826 	bl	800a04c <HAL_TIM_Base_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8004006:	f7ff fc9b 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800400a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800400e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004010:	f107 0320 	add.w	r3, r7, #32
 8004014:	4619      	mov	r1, r3
 8004016:	481b      	ldr	r0, [pc, #108]	; (8004084 <MX_TIM3_Init+0xdc>)
 8004018:	f007 f978 	bl	800b30c <HAL_TIM_ConfigClockSource>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004022:	f7ff fc8d 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004026:	4817      	ldr	r0, [pc, #92]	; (8004084 <MX_TIM3_Init+0xdc>)
 8004028:	f006 fbac 	bl	800a784 <HAL_TIM_IC_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8004032:	f7ff fc85 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	4619      	mov	r1, r3
 8004044:	480f      	ldr	r0, [pc, #60]	; (8004084 <MX_TIM3_Init+0xdc>)
 8004046:	f007 ffd5 	bl	800bff4 <HAL_TIMEx_MasterConfigSynchronization>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8004050:	f7ff fc76 	bl	8003940 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004054:	2302      	movs	r3, #2
 8004056:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004058:	2301      	movs	r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004064:	1d3b      	adds	r3, r7, #4
 8004066:	2200      	movs	r2, #0
 8004068:	4619      	mov	r1, r3
 800406a:	4806      	ldr	r0, [pc, #24]	; (8004084 <MX_TIM3_Init+0xdc>)
 800406c:	f006 ff9d 	bl	800afaa <HAL_TIM_IC_ConfigChannel>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8004076:	f7ff fc63 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800407a:	bf00      	nop
 800407c:	3730      	adds	r7, #48	; 0x30
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	24000848 	.word	0x24000848
 8004088:	40000400 	.word	0x40000400

0800408c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08c      	sub	sp, #48	; 0x30
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004092:	f107 0320 	add.w	r3, r7, #32
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040ba:	4a2c      	ldr	r2, [pc, #176]	; (800416c <MX_TIM4_Init+0xe0>)
 80040bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80040be:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c4:	4b28      	ldr	r3, [pc, #160]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d2:	4b25      	ldr	r3, [pc, #148]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d8:	4b23      	ldr	r3, [pc, #140]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040da:	2200      	movs	r2, #0
 80040dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80040de:	4822      	ldr	r0, [pc, #136]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040e0:	f005 ffb4 	bl	800a04c <HAL_TIM_Base_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80040ea:	f7ff fc29 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80040f4:	f107 0320 	add.w	r3, r7, #32
 80040f8:	4619      	mov	r1, r3
 80040fa:	481b      	ldr	r0, [pc, #108]	; (8004168 <MX_TIM4_Init+0xdc>)
 80040fc:	f007 f906 	bl	800b30c <HAL_TIM_ConfigClockSource>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004106:	f7ff fc1b 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800410a:	4817      	ldr	r0, [pc, #92]	; (8004168 <MX_TIM4_Init+0xdc>)
 800410c:	f006 fb3a 	bl	800a784 <HAL_TIM_IC_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8004116:	f7ff fc13 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	4619      	mov	r1, r3
 8004128:	480f      	ldr	r0, [pc, #60]	; (8004168 <MX_TIM4_Init+0xdc>)
 800412a:	f007 ff63 	bl	800bff4 <HAL_TIMEx_MasterConfigSynchronization>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8004134:	f7ff fc04 	bl	8003940 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004138:	2302      	movs	r3, #2
 800413a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800413c:	2301      	movs	r3, #1
 800413e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	2200      	movs	r2, #0
 800414c:	4619      	mov	r1, r3
 800414e:	4806      	ldr	r0, [pc, #24]	; (8004168 <MX_TIM4_Init+0xdc>)
 8004150:	f006 ff2b 	bl	800afaa <HAL_TIM_IC_ConfigChannel>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800415a:	f7ff fbf1 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800415e:	bf00      	nop
 8004160:	3730      	adds	r7, #48	; 0x30
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	24000894 	.word	0x24000894
 800416c:	40000800 	.word	0x40000800

08004170 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004176:	f107 0310 	add.w	r3, r7, #16
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <MX_TIM5_Init+0x94>)
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <MX_TIM5_Init+0x98>)
 8004192:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <MX_TIM5_Init+0x94>)
 8004196:	2200      	movs	r2, #0
 8004198:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419a:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <MX_TIM5_Init+0x94>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80041a0:	4b18      	ldr	r3, [pc, #96]	; (8004204 <MX_TIM5_Init+0x94>)
 80041a2:	f04f 32ff 	mov.w	r2, #4294967295
 80041a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a8:	4b16      	ldr	r3, [pc, #88]	; (8004204 <MX_TIM5_Init+0x94>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <MX_TIM5_Init+0x94>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80041b4:	4813      	ldr	r0, [pc, #76]	; (8004204 <MX_TIM5_Init+0x94>)
 80041b6:	f005 ff49 	bl	800a04c <HAL_TIM_Base_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80041c0:	f7ff fbbe 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80041ca:	f107 0310 	add.w	r3, r7, #16
 80041ce:	4619      	mov	r1, r3
 80041d0:	480c      	ldr	r0, [pc, #48]	; (8004204 <MX_TIM5_Init+0x94>)
 80041d2:	f007 f89b 	bl	800b30c <HAL_TIM_ConfigClockSource>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80041dc:	f7ff fbb0 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e0:	2300      	movs	r3, #0
 80041e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4805      	ldr	r0, [pc, #20]	; (8004204 <MX_TIM5_Init+0x94>)
 80041ee:	f007 ff01 	bl	800bff4 <HAL_TIMEx_MasterConfigSynchronization>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80041f8:	f7ff fba2 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80041fc:	bf00      	nop
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	240008e0 	.word	0x240008e0
 8004208:	40000c00 	.word	0x40000c00

0800420c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004212:	f107 0320 	add.w	r3, r7, #32
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	609a      	str	r2, [r3, #8]
 800422a:	60da      	str	r2, [r3, #12]
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	615a      	str	r2, [r3, #20]
 8004230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004232:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <MX_TIM12_Init+0xbc>)
 8004234:	4a25      	ldr	r2, [pc, #148]	; (80042cc <MX_TIM12_Init+0xc0>)
 8004236:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 8004238:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <MX_TIM12_Init+0xbc>)
 800423a:	223f      	movs	r2, #63	; 0x3f
 800423c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800423e:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <MX_TIM12_Init+0xbc>)
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8004244:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <MX_TIM12_Init+0xbc>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800424a:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <MX_TIM12_Init+0xbc>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <MX_TIM12_Init+0xbc>)
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004256:	481c      	ldr	r0, [pc, #112]	; (80042c8 <MX_TIM12_Init+0xbc>)
 8004258:	f005 fef8 	bl	800a04c <HAL_TIM_Base_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8004262:	f7ff fb6d 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800426a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800426c:	f107 0320 	add.w	r3, r7, #32
 8004270:	4619      	mov	r1, r3
 8004272:	4815      	ldr	r0, [pc, #84]	; (80042c8 <MX_TIM12_Init+0xbc>)
 8004274:	f007 f84a 	bl	800b30c <HAL_TIM_ConfigClockSource>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 800427e:	f7ff fb5f 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004282:	4811      	ldr	r0, [pc, #68]	; (80042c8 <MX_TIM12_Init+0xbc>)
 8004284:	f006 f879 	bl	800a37a <HAL_TIM_PWM_Init>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 800428e:	f7ff fb57 	bl	8003940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004292:	2360      	movs	r3, #96	; 0x60
 8004294:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	2200      	movs	r2, #0
 80042a6:	4619      	mov	r1, r3
 80042a8:	4807      	ldr	r0, [pc, #28]	; (80042c8 <MX_TIM12_Init+0xbc>)
 80042aa:	f006 ff1b 	bl	800b0e4 <HAL_TIM_PWM_ConfigChannel>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 80042b4:	f7ff fb44 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80042b8:	4803      	ldr	r0, [pc, #12]	; (80042c8 <MX_TIM12_Init+0xbc>)
 80042ba:	f000 fa3d 	bl	8004738 <HAL_TIM_MspPostInit>

}
 80042be:	bf00      	nop
 80042c0:	3730      	adds	r7, #48	; 0x30
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	2400092c 	.word	0x2400092c
 80042cc:	40001800 	.word	0x40001800

080042d0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
 80042e4:	615a      	str	r2, [r3, #20]
 80042e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <MX_TIM13_Init+0x90>)
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <MX_TIM13_Init+0x94>)
 80042ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <MX_TIM13_Init+0x90>)
 80042f0:	223f      	movs	r2, #63	; 0x3f
 80042f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <MX_TIM13_Init+0x90>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 80042fa:	4b19      	ldr	r3, [pc, #100]	; (8004360 <MX_TIM13_Init+0x90>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <MX_TIM13_Init+0x90>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004306:	4b16      	ldr	r3, [pc, #88]	; (8004360 <MX_TIM13_Init+0x90>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800430c:	4814      	ldr	r0, [pc, #80]	; (8004360 <MX_TIM13_Init+0x90>)
 800430e:	f005 fe9d 	bl	800a04c <HAL_TIM_Base_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8004318:	f7ff fb12 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800431c:	4810      	ldr	r0, [pc, #64]	; (8004360 <MX_TIM13_Init+0x90>)
 800431e:	f006 f82c 	bl	800a37a <HAL_TIM_PWM_Init>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8004328:	f7ff fb0a 	bl	8003940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800432c:	2360      	movs	r3, #96	; 0x60
 800432e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	2200      	movs	r2, #0
 8004340:	4619      	mov	r1, r3
 8004342:	4807      	ldr	r0, [pc, #28]	; (8004360 <MX_TIM13_Init+0x90>)
 8004344:	f006 fece 	bl	800b0e4 <HAL_TIM_PWM_ConfigChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 800434e:	f7ff faf7 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004352:	4803      	ldr	r0, [pc, #12]	; (8004360 <MX_TIM13_Init+0x90>)
 8004354:	f000 f9f0 	bl	8004738 <HAL_TIM_MspPostInit>

}
 8004358:	bf00      	nop
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	24000978 	.word	0x24000978
 8004364:	40001c00 	.word	0x40001c00

08004368 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	605a      	str	r2, [r3, #4]
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	611a      	str	r2, [r3, #16]
 800437c:	615a      	str	r2, [r3, #20]
 800437e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <MX_TIM14_Init+0x90>)
 8004382:	4a1e      	ldr	r2, [pc, #120]	; (80043fc <MX_TIM14_Init+0x94>)
 8004384:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <MX_TIM14_Init+0x90>)
 8004388:	223f      	movs	r2, #63	; 0x3f
 800438a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <MX_TIM14_Init+0x90>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <MX_TIM14_Init+0x90>)
 8004394:	2200      	movs	r2, #0
 8004396:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004398:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <MX_TIM14_Init+0x90>)
 800439a:	2200      	movs	r2, #0
 800439c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800439e:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <MX_TIM14_Init+0x90>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80043a4:	4814      	ldr	r0, [pc, #80]	; (80043f8 <MX_TIM14_Init+0x90>)
 80043a6:	f005 fe51 	bl	800a04c <HAL_TIM_Base_Init>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80043b0:	f7ff fac6 	bl	8003940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80043b4:	4810      	ldr	r0, [pc, #64]	; (80043f8 <MX_TIM14_Init+0x90>)
 80043b6:	f005 ffe0 	bl	800a37a <HAL_TIM_PWM_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80043c0:	f7ff fabe 	bl	8003940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043c4:	2360      	movs	r3, #96	; 0x60
 80043c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	2200      	movs	r2, #0
 80043d8:	4619      	mov	r1, r3
 80043da:	4807      	ldr	r0, [pc, #28]	; (80043f8 <MX_TIM14_Init+0x90>)
 80043dc:	f006 fe82 	bl	800b0e4 <HAL_TIM_PWM_ConfigChannel>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 80043e6:	f7ff faab 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80043ea:	4803      	ldr	r0, [pc, #12]	; (80043f8 <MX_TIM14_Init+0x90>)
 80043ec:	f000 f9a4 	bl	8004738 <HAL_TIM_MspPostInit>

}
 80043f0:	bf00      	nop
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	240009c4 	.word	0x240009c4
 80043fc:	40002000 	.word	0x40002000

08004400 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004406:	f107 0310 	add.w	r3, r7, #16
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <MX_TIM15_Init+0x9c>)
 8004420:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <MX_TIM15_Init+0xa0>)
 8004422:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <MX_TIM15_Init+0x9c>)
 8004426:	2200      	movs	r2, #0
 8004428:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <MX_TIM15_Init+0x9c>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <MX_TIM15_Init+0x9c>)
 8004432:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8004436:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004438:	4b18      	ldr	r3, [pc, #96]	; (800449c <MX_TIM15_Init+0x9c>)
 800443a:	2200      	movs	r2, #0
 800443c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800443e:	4b17      	ldr	r3, [pc, #92]	; (800449c <MX_TIM15_Init+0x9c>)
 8004440:	2200      	movs	r2, #0
 8004442:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <MX_TIM15_Init+0x9c>)
 8004446:	2200      	movs	r2, #0
 8004448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800444a:	4814      	ldr	r0, [pc, #80]	; (800449c <MX_TIM15_Init+0x9c>)
 800444c:	f005 fdfe 	bl	800a04c <HAL_TIM_Base_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004456:	f7ff fa73 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800445a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800445e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004460:	f107 0310 	add.w	r3, r7, #16
 8004464:	4619      	mov	r1, r3
 8004466:	480d      	ldr	r0, [pc, #52]	; (800449c <MX_TIM15_Init+0x9c>)
 8004468:	f006 ff50 	bl	800b30c <HAL_TIM_ConfigClockSource>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004472:	f7ff fa65 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4806      	ldr	r0, [pc, #24]	; (800449c <MX_TIM15_Init+0x9c>)
 8004484:	f007 fdb6 	bl	800bff4 <HAL_TIMEx_MasterConfigSynchronization>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800448e:	f7ff fa57 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004492:	bf00      	nop
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	24000a10 	.word	0x24000a10
 80044a0:	40014000 	.word	0x40014000

080044a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b092      	sub	sp, #72	; 0x48
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d136      	bne.n	8004534 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044c6:	4b92      	ldr	r3, [pc, #584]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80044c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044cc:	4a90      	ldr	r2, [pc, #576]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044d6:	4b8e      	ldr	r3, [pc, #568]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80044d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	633b      	str	r3, [r7, #48]	; 0x30
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e4:	4b8a      	ldr	r3, [pc, #552]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80044e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ea:	4a89      	ldr	r2, [pc, #548]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044f4:	4b86      	ldr	r3, [pc, #536]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80044f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004502:	2301      	movs	r3, #1
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004512:	2301      	movs	r3, #1
 8004514:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004516:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800451a:	4619      	mov	r1, r3
 800451c:	487d      	ldr	r0, [pc, #500]	; (8004714 <HAL_TIM_Base_MspInit+0x270>)
 800451e:	f003 f83d 	bl	800759c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8004522:	2201      	movs	r2, #1
 8004524:	2101      	movs	r1, #1
 8004526:	201c      	movs	r0, #28
 8004528:	f002 fa91 	bl	8006a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800452c:	201c      	movs	r0, #28
 800452e:	f002 faa8 	bl	8006a82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004532:	e0e8      	b.n	8004706 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a77      	ldr	r2, [pc, #476]	; (8004718 <HAL_TIM_Base_MspInit+0x274>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d136      	bne.n	80045ac <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800453e:	4b74      	ldr	r3, [pc, #464]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004544:	4a72      	ldr	r2, [pc, #456]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004546:	f043 0302 	orr.w	r3, r3, #2
 800454a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800454e:	4b70      	ldr	r3, [pc, #448]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455c:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 800455e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004562:	4a6b      	ldr	r2, [pc, #428]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800456c:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 800456e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800457a:	2340      	movs	r3, #64	; 0x40
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004586:	2300      	movs	r3, #0
 8004588:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800458a:	2302      	movs	r3, #2
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004592:	4619      	mov	r1, r3
 8004594:	485f      	ldr	r0, [pc, #380]	; (8004714 <HAL_TIM_Base_MspInit+0x270>)
 8004596:	f003 f801 	bl	800759c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 800459a:	2201      	movs	r2, #1
 800459c:	2101      	movs	r1, #1
 800459e:	201d      	movs	r0, #29
 80045a0:	f002 fa55 	bl	8006a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80045a4:	201d      	movs	r0, #29
 80045a6:	f002 fa6c 	bl	8006a82 <HAL_NVIC_EnableIRQ>
}
 80045aa:	e0ac      	b.n	8004706 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a5a      	ldr	r2, [pc, #360]	; (800471c <HAL_TIM_Base_MspInit+0x278>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d137      	bne.n	8004626 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045b6:	4b56      	ldr	r3, [pc, #344]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80045b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045bc:	4a54      	ldr	r2, [pc, #336]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80045be:	f043 0304 	orr.w	r3, r3, #4
 80045c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045c6:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80045c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045d4:	4b4e      	ldr	r3, [pc, #312]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80045d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045da:	4a4d      	ldr	r2, [pc, #308]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80045dc:	f043 0308 	orr.w	r3, r3, #8
 80045e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045e4:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80045e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f8:	2302      	movs	r3, #2
 80045fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004600:	2300      	movs	r3, #0
 8004602:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004604:	2302      	movs	r3, #2
 8004606:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004608:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800460c:	4619      	mov	r1, r3
 800460e:	4844      	ldr	r0, [pc, #272]	; (8004720 <HAL_TIM_Base_MspInit+0x27c>)
 8004610:	f002 ffc4 	bl	800759c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 1);
 8004614:	2201      	movs	r2, #1
 8004616:	2101      	movs	r1, #1
 8004618:	201e      	movs	r0, #30
 800461a:	f002 fa18 	bl	8006a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800461e:	201e      	movs	r0, #30
 8004620:	f002 fa2f 	bl	8006a82 <HAL_NVIC_EnableIRQ>
}
 8004624:	e06f      	b.n	8004706 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3e      	ldr	r2, [pc, #248]	; (8004724 <HAL_TIM_Base_MspInit+0x280>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10f      	bne.n	8004650 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004630:	4b37      	ldr	r3, [pc, #220]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004636:	4a36      	ldr	r2, [pc, #216]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004640:	4b33      	ldr	r3, [pc, #204]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	69bb      	ldr	r3, [r7, #24]
}
 800464e:	e05a      	b.n	8004706 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a34      	ldr	r2, [pc, #208]	; (8004728 <HAL_TIM_Base_MspInit+0x284>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10f      	bne.n	800467a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800465a:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 800465c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004660:	4a2b      	ldr	r2, [pc, #172]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004666:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800466a:	4b29      	ldr	r3, [pc, #164]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 800466c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	697b      	ldr	r3, [r7, #20]
}
 8004678:	e045      	b.n	8004706 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_TIM_Base_MspInit+0x288>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10f      	bne.n	80046a4 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004684:	4b22      	ldr	r3, [pc, #136]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468a:	4a21      	ldr	r2, [pc, #132]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 800468c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004690:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 8004696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
}
 80046a2:	e030      	b.n	8004706 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <HAL_TIM_Base_MspInit+0x28c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10f      	bne.n	80046ce <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80046ae:	4b18      	ldr	r3, [pc, #96]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80046b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80046b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80046c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	e01b      	b.n	8004706 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a18      	ldr	r2, [pc, #96]	; (8004734 <HAL_TIM_Base_MspInit+0x290>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d116      	bne.n	8004706 <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80046d8:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046de:	4a0c      	ldr	r2, [pc, #48]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_TIM_Base_MspInit+0x26c>)
 80046ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 1);
 80046f6:	2201      	movs	r2, #1
 80046f8:	2101      	movs	r1, #1
 80046fa:	2074      	movs	r0, #116	; 0x74
 80046fc:	f002 f9a7 	bl	8006a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004700:	2074      	movs	r0, #116	; 0x74
 8004702:	f002 f9be 	bl	8006a82 <HAL_NVIC_EnableIRQ>
}
 8004706:	bf00      	nop
 8004708:	3748      	adds	r7, #72	; 0x48
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	58020000 	.word	0x58020000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	58020c00 	.word	0x58020c00
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40001800 	.word	0x40001800
 800472c:	40001c00 	.word	0x40001c00
 8004730:	40002000 	.word	0x40002000
 8004734:	40014000 	.word	0x40014000

08004738 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a39      	ldr	r2, [pc, #228]	; (800483c <HAL_TIM_MspPostInit+0x104>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d120      	bne.n	800479c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800475a:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 800475c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004760:	4a37      	ldr	r2, [pc, #220]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 8004762:	f043 0302 	orr.w	r3, r3, #2
 8004766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800476a:	4b35      	ldr	r3, [pc, #212]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 800476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004778:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800477c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004782:	2302      	movs	r3, #2
 8004784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800478a:	2302      	movs	r3, #2
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4619      	mov	r1, r3
 8004794:	482b      	ldr	r0, [pc, #172]	; (8004844 <HAL_TIM_MspPostInit+0x10c>)
 8004796:	f002 ff01 	bl	800759c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800479a:	e04a      	b.n	8004832 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a29      	ldr	r2, [pc, #164]	; (8004848 <HAL_TIM_MspPostInit+0x110>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d120      	bne.n	80047e8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047a6:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 80047a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ac:	4a24      	ldr	r2, [pc, #144]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 80047ae:	f043 0320 	orr.w	r3, r3, #32
 80047b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047b6:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 80047b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 80047c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ca:	2302      	movs	r3, #2
 80047cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047ce:	2302      	movs	r3, #2
 80047d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d2:	2300      	movs	r3, #0
 80047d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80047d6:	2309      	movs	r3, #9
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 80047da:	f107 0314 	add.w	r3, r7, #20
 80047de:	4619      	mov	r1, r3
 80047e0:	481a      	ldr	r0, [pc, #104]	; (800484c <HAL_TIM_MspPostInit+0x114>)
 80047e2:	f002 fedb 	bl	800759c <HAL_GPIO_Init>
}
 80047e6:	e024      	b.n	8004832 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_TIM_MspPostInit+0x118>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d11f      	bne.n	8004832 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 80047f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f8:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 80047fa:	f043 0320 	orr.w	r3, r3, #32
 80047fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <HAL_TIM_MspPostInit+0x108>)
 8004804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004816:	2302      	movs	r3, #2
 8004818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800481a:	2302      	movs	r3, #2
 800481c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481e:	2300      	movs	r3, #0
 8004820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004822:	2309      	movs	r3, #9
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	4619      	mov	r1, r3
 800482c:	4807      	ldr	r0, [pc, #28]	; (800484c <HAL_TIM_MspPostInit+0x114>)
 800482e:	f002 feb5 	bl	800759c <HAL_GPIO_Init>
}
 8004832:	bf00      	nop
 8004834:	3728      	adds	r7, #40	; 0x28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40001800 	.word	0x40001800
 8004840:	58024400 	.word	0x58024400
 8004844:	58020400 	.word	0x58020400
 8004848:	40001c00 	.word	0x40001c00
 800484c:	58021400 	.word	0x58021400
 8004850:	40002000 	.word	0x40002000

08004854 <get_Straj>:
float qi,qf;

double _rpm1,_rpm2,_rpm3;
uint32_t _peri1,_peri2,_peri3;

void get_Straj(float t){
 8004854:	b580      	push	{r7, lr}
 8004856:	ed2d 8b06 	vpush	{d8-d10}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	ed87 0a01 	vstr	s0, [r7, #4]

    if (qf < qi){
 8004862:	4bb6      	ldr	r3, [pc, #728]	; (8004b3c <get_Straj+0x2e8>)
 8004864:	ed93 7a00 	vldr	s14, [r3]
 8004868:	4bb5      	ldr	r3, [pc, #724]	; (8004b40 <get_Straj+0x2ec>)
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	f140 8081 	bpl.w	800497c <get_Straj+0x128>

    flagInv = true;
 800487a:	4bb2      	ldr	r3, [pc, #712]	; (8004b44 <get_Straj+0x2f0>)
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8004880:	4baf      	ldr	r3, [pc, #700]	; (8004b40 <get_Straj+0x2ec>)
 8004882:	edd3 7a00 	vldr	s15, [r3]
 8004886:	eef1 7a67 	vneg.f32	s15, s15
 800488a:	4bad      	ldr	r3, [pc, #692]	; (8004b40 <get_Straj+0x2ec>)
 800488c:	edc3 7a00 	vstr	s15, [r3]
    qf = -qf;
 8004890:	4baa      	ldr	r3, [pc, #680]	; (8004b3c <get_Straj+0x2e8>)
 8004892:	edd3 7a00 	vldr	s15, [r3]
 8004896:	eef1 7a67 	vneg.f32	s15, s15
 800489a:	4ba8      	ldr	r3, [pc, #672]	; (8004b3c <get_Straj+0x2e8>)
 800489c:	edc3 7a00 	vstr	s15, [r3]
    vi = -vi;
 80048a0:	4ba9      	ldr	r3, [pc, #676]	; (8004b48 <get_Straj+0x2f4>)
 80048a2:	edd3 7a00 	vldr	s15, [r3]
 80048a6:	eef1 7a67 	vneg.f32	s15, s15
 80048aa:	4ba7      	ldr	r3, [pc, #668]	; (8004b48 <get_Straj+0x2f4>)
 80048ac:	edc3 7a00 	vstr	s15, [r3]
    vf = -vf;
 80048b0:	4ba6      	ldr	r3, [pc, #664]	; (8004b4c <get_Straj+0x2f8>)
 80048b2:	edd3 7a00 	vldr	s15, [r3]
 80048b6:	eef1 7a67 	vneg.f32	s15, s15
 80048ba:	4ba4      	ldr	r3, [pc, #656]	; (8004b4c <get_Straj+0x2f8>)
 80048bc:	edc3 7a00 	vstr	s15, [r3]

    vmax = -vmin;
 80048c0:	4ba3      	ldr	r3, [pc, #652]	; (8004b50 <get_Straj+0x2fc>)
 80048c2:	edd3 7a00 	vldr	s15, [r3]
 80048c6:	eef1 7a67 	vneg.f32	s15, s15
 80048ca:	4ba2      	ldr	r3, [pc, #648]	; (8004b54 <get_Straj+0x300>)
 80048cc:	edc3 7a00 	vstr	s15, [r3]
    vmin = -vmax;
 80048d0:	4ba0      	ldr	r3, [pc, #640]	; (8004b54 <get_Straj+0x300>)
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	eef1 7a67 	vneg.f32	s15, s15
 80048da:	4b9d      	ldr	r3, [pc, #628]	; (8004b50 <get_Straj+0x2fc>)
 80048dc:	edc3 7a00 	vstr	s15, [r3]
    amax = -amin;
 80048e0:	4b9d      	ldr	r3, [pc, #628]	; (8004b58 <get_Straj+0x304>)
 80048e2:	edd3 7a00 	vldr	s15, [r3]
 80048e6:	eef1 7a67 	vneg.f32	s15, s15
 80048ea:	4b9c      	ldr	r3, [pc, #624]	; (8004b5c <get_Straj+0x308>)
 80048ec:	edc3 7a00 	vstr	s15, [r3]
    amin = -amax;
 80048f0:	4b9a      	ldr	r3, [pc, #616]	; (8004b5c <get_Straj+0x308>)
 80048f2:	edd3 7a00 	vldr	s15, [r3]
 80048f6:	eef1 7a67 	vneg.f32	s15, s15
 80048fa:	4b97      	ldr	r3, [pc, #604]	; (8004b58 <get_Straj+0x304>)
 80048fc:	edc3 7a00 	vstr	s15, [r3]
    jmax = -jmin;
 8004900:	4b97      	ldr	r3, [pc, #604]	; (8004b60 <get_Straj+0x30c>)
 8004902:	edd3 7a00 	vldr	s15, [r3]
 8004906:	eef1 7a67 	vneg.f32	s15, s15
 800490a:	4b96      	ldr	r3, [pc, #600]	; (8004b64 <get_Straj+0x310>)
 800490c:	edc3 7a00 	vstr	s15, [r3]
    jmin = -jmax;
 8004910:	4b94      	ldr	r3, [pc, #592]	; (8004b64 <get_Straj+0x310>)
 8004912:	edd3 7a00 	vldr	s15, [r3]
 8004916:	eef1 7a67 	vneg.f32	s15, s15
 800491a:	4b91      	ldr	r3, [pc, #580]	; (8004b60 <get_Straj+0x30c>)
 800491c:	edc3 7a00 	vstr	s15, [r3]

    alima = jmax*Tj1;
 8004920:	4b90      	ldr	r3, [pc, #576]	; (8004b64 <get_Straj+0x310>)
 8004922:	ed93 7a00 	vldr	s14, [r3]
 8004926:	4b90      	ldr	r3, [pc, #576]	; (8004b68 <get_Straj+0x314>)
 8004928:	edd3 7a00 	vldr	s15, [r3]
 800492c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004930:	4b8e      	ldr	r3, [pc, #568]	; (8004b6c <get_Straj+0x318>)
 8004932:	edc3 7a00 	vstr	s15, [r3]
    alimd = -jmax*Tj2;
 8004936:	4b8b      	ldr	r3, [pc, #556]	; (8004b64 <get_Straj+0x310>)
 8004938:	edd3 7a00 	vldr	s15, [r3]
 800493c:	eeb1 7a67 	vneg.f32	s14, s15
 8004940:	4b8b      	ldr	r3, [pc, #556]	; (8004b70 <get_Straj+0x31c>)
 8004942:	edd3 7a00 	vldr	s15, [r3]
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	4b8a      	ldr	r3, [pc, #552]	; (8004b74 <get_Straj+0x320>)
 800494c:	edc3 7a00 	vstr	s15, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8004950:	4b89      	ldr	r3, [pc, #548]	; (8004b78 <get_Straj+0x324>)
 8004952:	ed93 7a00 	vldr	s14, [r3]
 8004956:	4b84      	ldr	r3, [pc, #528]	; (8004b68 <get_Straj+0x314>)
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004960:	4b82      	ldr	r3, [pc, #520]	; (8004b6c <get_Straj+0x318>)
 8004962:	edd3 7a00 	vldr	s15, [r3]
 8004966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800496a:	4b77      	ldr	r3, [pc, #476]	; (8004b48 <get_Straj+0x2f4>)
 800496c:	edd3 7a00 	vldr	s15, [r3]
 8004970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004974:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <get_Straj+0x328>)
 8004976:	edc3 7a00 	vstr	s15, [r3]
 800497a:	e044      	b.n	8004a06 <get_Straj+0x1b2>

    }else{
        jmin = -jmax;
 800497c:	4b79      	ldr	r3, [pc, #484]	; (8004b64 <get_Straj+0x310>)
 800497e:	edd3 7a00 	vldr	s15, [r3]
 8004982:	eef1 7a67 	vneg.f32	s15, s15
 8004986:	4b76      	ldr	r3, [pc, #472]	; (8004b60 <get_Straj+0x30c>)
 8004988:	edc3 7a00 	vstr	s15, [r3]
        amin = -amax;
 800498c:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <get_Straj+0x308>)
 800498e:	edd3 7a00 	vldr	s15, [r3]
 8004992:	eef1 7a67 	vneg.f32	s15, s15
 8004996:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <get_Straj+0x304>)
 8004998:	edc3 7a00 	vstr	s15, [r3]
        vmin = -vmax;
 800499c:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <get_Straj+0x300>)
 800499e:	edd3 7a00 	vldr	s15, [r3]
 80049a2:	eef1 7a67 	vneg.f32	s15, s15
 80049a6:	4b6a      	ldr	r3, [pc, #424]	; (8004b50 <get_Straj+0x2fc>)
 80049a8:	edc3 7a00 	vstr	s15, [r3]

        alima = jmax*Tj1;
 80049ac:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <get_Straj+0x310>)
 80049ae:	ed93 7a00 	vldr	s14, [r3]
 80049b2:	4b6d      	ldr	r3, [pc, #436]	; (8004b68 <get_Straj+0x314>)
 80049b4:	edd3 7a00 	vldr	s15, [r3]
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	4b6b      	ldr	r3, [pc, #428]	; (8004b6c <get_Straj+0x318>)
 80049be:	edc3 7a00 	vstr	s15, [r3]
        alimd = -jmax*Tj2;
 80049c2:	4b68      	ldr	r3, [pc, #416]	; (8004b64 <get_Straj+0x310>)
 80049c4:	edd3 7a00 	vldr	s15, [r3]
 80049c8:	eeb1 7a67 	vneg.f32	s14, s15
 80049cc:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <get_Straj+0x31c>)
 80049ce:	edd3 7a00 	vldr	s15, [r3]
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <get_Straj+0x320>)
 80049d8:	edc3 7a00 	vstr	s15, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 80049dc:	4b66      	ldr	r3, [pc, #408]	; (8004b78 <get_Straj+0x324>)
 80049de:	ed93 7a00 	vldr	s14, [r3]
 80049e2:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <get_Straj+0x314>)
 80049e4:	edd3 7a00 	vldr	s15, [r3]
 80049e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049ec:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <get_Straj+0x318>)
 80049ee:	edd3 7a00 	vldr	s15, [r3]
 80049f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049f6:	4b54      	ldr	r3, [pc, #336]	; (8004b48 <get_Straj+0x2f4>)
 80049f8:	edd3 7a00 	vldr	s15, [r3]
 80049fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a00:	4b5e      	ldr	r3, [pc, #376]	; (8004b7c <get_Straj+0x328>)
 8004a02:	edc3 7a00 	vstr	s15, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8004a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	f2c0 80bd 	blt.w	8004b90 <get_Straj+0x33c>
 8004a16:	4b54      	ldr	r3, [pc, #336]	; (8004b68 <get_Straj+0x314>)
 8004a18:	edd3 7a00 	vldr	s15, [r3]
 8004a1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	f200 80b2 	bhi.w	8004b90 <get_Straj+0x33c>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8004a2c:	4b46      	ldr	r3, [pc, #280]	; (8004b48 <get_Straj+0x2f4>)
 8004a2e:	ed93 7a00 	vldr	s14, [r3]
 8004a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a3a:	4b41      	ldr	r3, [pc, #260]	; (8004b40 <get_Straj+0x2ec>)
 8004a3c:	edd3 7a00 	vldr	s15, [r3]
 8004a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a44:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004a48:	4b46      	ldr	r3, [pc, #280]	; (8004b64 <get_Straj+0x310>)
 8004a4a:	edd3 7a00 	vldr	s15, [r3]
 8004a4e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004a5a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004a5e:	eeb0 0b47 	vmov.f64	d0, d7
 8004a62:	f00c fd9d 	bl	80115a0 <pow>
 8004a66:	eeb0 7b40 	vmov.f64	d7, d0
 8004a6a:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004a6e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004a72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a76:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004a7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004a7e:	4b40      	ldr	r3, [pc, #256]	; (8004b80 <get_Straj+0x32c>)
 8004a80:	edc3 7a00 	vstr	s15, [r3]
        qd = vi+jmax*pow(t,2)/2;
 8004a84:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <get_Straj+0x2f4>)
 8004a86:	edd3 7a00 	vldr	s15, [r3]
 8004a8a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004a8e:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <get_Straj+0x310>)
 8004a90:	edd3 7a00 	vldr	s15, [r3]
 8004a94:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004a98:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004aa0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8004aa8:	f00c fd7a 	bl	80115a0 <pow>
 8004aac:	eeb0 7b40 	vmov.f64	d7, d0
 8004ab0:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004ab4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004ab8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004abc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ac4:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <get_Straj+0x330>)
 8004ac6:	edc3 7a00 	vstr	s15, [r3]
        qdd = jmax*t;
 8004aca:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <get_Straj+0x310>)
 8004acc:	ed93 7a00 	vldr	s14, [r3]
 8004ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <get_Straj+0x334>)
 8004ada:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmax;
 8004ade:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <get_Straj+0x310>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2a      	ldr	r2, [pc, #168]	; (8004b8c <get_Straj+0x338>)
 8004ae4:	6013      	str	r3, [r2, #0]
        if (flagInv){
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <get_Straj+0x2f0>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8545 	beq.w	800557a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004af0:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <get_Straj+0x32c>)
 8004af2:	edd3 7a00 	vldr	s15, [r3]
 8004af6:	eef1 7a67 	vneg.f32	s15, s15
 8004afa:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <get_Straj+0x32c>)
 8004afc:	edc3 7a00 	vstr	s15, [r3]
 8004b00:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <get_Straj+0x330>)
 8004b02:	edd3 7a00 	vldr	s15, [r3]
 8004b06:	eef1 7a67 	vneg.f32	s15, s15
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <get_Straj+0x330>)
 8004b0c:	edc3 7a00 	vstr	s15, [r3]
 8004b10:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <get_Straj+0x334>)
 8004b12:	edd3 7a00 	vldr	s15, [r3]
 8004b16:	eef1 7a67 	vneg.f32	s15, s15
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <get_Straj+0x334>)
 8004b1c:	edc3 7a00 	vstr	s15, [r3]
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <get_Straj+0x338>)
 8004b22:	edd3 7a00 	vldr	s15, [r3]
 8004b26:	eef1 7a67 	vneg.f32	s15, s15
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <get_Straj+0x338>)
 8004b2c:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <get_Straj+0x2f0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004b36:	f000 bd20 	b.w	800557a <get_Straj+0xd26>
 8004b3a:	bf00      	nop
 8004b3c:	24000a90 	.word	0x24000a90
 8004b40:	24000a8c 	.word	0x24000a8c
 8004b44:	24000a5c 	.word	0x24000a5c
 8004b48:	2400073c 	.word	0x2400073c
 8004b4c:	24000740 	.word	0x24000740
 8004b50:	24000738 	.word	0x24000738
 8004b54:	2400009c 	.word	0x2400009c
 8004b58:	24000744 	.word	0x24000744
 8004b5c:	240000a0 	.word	0x240000a0
 8004b60:	24000734 	.word	0x24000734
 8004b64:	24000098 	.word	0x24000098
 8004b68:	24000a7c 	.word	0x24000a7c
 8004b6c:	24000a60 	.word	0x24000a60
 8004b70:	24000a80 	.word	0x24000a80
 8004b74:	24000a64 	.word	0x24000a64
 8004b78:	24000a70 	.word	0x24000a70
 8004b7c:	24000a68 	.word	0x24000a68
 8004b80:	24000724 	.word	0x24000724
 8004b84:	24000728 	.word	0x24000728
 8004b88:	2400072c 	.word	0x2400072c
 8004b8c:	24000730 	.word	0x24000730
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004b90:	4bc1      	ldr	r3, [pc, #772]	; (8004e98 <get_Straj+0x644>)
 8004b92:	edd3 7a00 	vldr	s15, [r3]
 8004b96:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	f340 80af 	ble.w	8004d04 <get_Straj+0x4b0>
 8004ba6:	4bbd      	ldr	r3, [pc, #756]	; (8004e9c <get_Straj+0x648>)
 8004ba8:	ed93 7a00 	vldr	s14, [r3]
 8004bac:	4bba      	ldr	r3, [pc, #744]	; (8004e98 <get_Straj+0x644>)
 8004bae:	edd3 7a00 	vldr	s15, [r3]
 8004bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	f200 809f 	bhi.w	8004d04 <get_Straj+0x4b0>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004bc6:	4bb6      	ldr	r3, [pc, #728]	; (8004ea0 <get_Straj+0x64c>)
 8004bc8:	ed93 7a00 	vldr	s14, [r3]
 8004bcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bd4:	4bb3      	ldr	r3, [pc, #716]	; (8004ea4 <get_Straj+0x650>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bde:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004be2:	4bb1      	ldr	r3, [pc, #708]	; (8004ea8 <get_Straj+0x654>)
 8004be4:	ed93 7a00 	vldr	s14, [r3]
 8004be8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8004bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bf0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004bfc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c00:	eeb0 0b47 	vmov.f64	d0, d7
 8004c04:	f00c fccc 	bl	80115a0 <pow>
 8004c08:	eeb0 7b40 	vmov.f64	d7, d0
 8004c0c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004c10:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004c14:	4ba0      	ldr	r3, [pc, #640]	; (8004e98 <get_Straj+0x644>)
 8004c16:	edd3 7a00 	vldr	s15, [r3]
 8004c1a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c2e:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004c32:	4b99      	ldr	r3, [pc, #612]	; (8004e98 <get_Straj+0x644>)
 8004c34:	edd3 7a00 	vldr	s15, [r3]
 8004c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c3c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004c40:	eeb0 0b47 	vmov.f64	d0, d7
 8004c44:	f00c fcac 	bl	80115a0 <pow>
 8004c48:	eeb0 7b40 	vmov.f64	d7, d0
 8004c4c:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004c50:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004c54:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004c58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c5c:	4b93      	ldr	r3, [pc, #588]	; (8004eac <get_Straj+0x658>)
 8004c5e:	edc3 7a00 	vstr	s15, [r3]
        qd = vi+amax*(t-Tj1/2);
 8004c62:	4b8d      	ldr	r3, [pc, #564]	; (8004e98 <get_Straj+0x644>)
 8004c64:	ed93 7a00 	vldr	s14, [r3]
 8004c68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c70:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c78:	4b8d      	ldr	r3, [pc, #564]	; (8004eb0 <get_Straj+0x65c>)
 8004c7a:	edd3 7a00 	vldr	s15, [r3]
 8004c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c82:	4b87      	ldr	r3, [pc, #540]	; (8004ea0 <get_Straj+0x64c>)
 8004c84:	edd3 7a00 	vldr	s15, [r3]
 8004c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8c:	4b89      	ldr	r3, [pc, #548]	; (8004eb4 <get_Straj+0x660>)
 8004c8e:	edc3 7a00 	vstr	s15, [r3]
        qdd = jmax*Tj1;
 8004c92:	4b89      	ldr	r3, [pc, #548]	; (8004eb8 <get_Straj+0x664>)
 8004c94:	ed93 7a00 	vldr	s14, [r3]
 8004c98:	4b7f      	ldr	r3, [pc, #508]	; (8004e98 <get_Straj+0x644>)
 8004c9a:	edd3 7a00 	vldr	s15, [r3]
 8004c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca2:	4b86      	ldr	r3, [pc, #536]	; (8004ebc <get_Straj+0x668>)
 8004ca4:	edc3 7a00 	vstr	s15, [r3]
        qddd = 0;
 8004ca8:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <get_Straj+0x66c>)
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

        if (flagInv){
 8004cb0:	4b84      	ldr	r3, [pc, #528]	; (8004ec4 <get_Straj+0x670>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8460 	beq.w	800557a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004cba:	4b7c      	ldr	r3, [pc, #496]	; (8004eac <get_Straj+0x658>)
 8004cbc:	edd3 7a00 	vldr	s15, [r3]
 8004cc0:	eef1 7a67 	vneg.f32	s15, s15
 8004cc4:	4b79      	ldr	r3, [pc, #484]	; (8004eac <get_Straj+0x658>)
 8004cc6:	edc3 7a00 	vstr	s15, [r3]
 8004cca:	4b7a      	ldr	r3, [pc, #488]	; (8004eb4 <get_Straj+0x660>)
 8004ccc:	edd3 7a00 	vldr	s15, [r3]
 8004cd0:	eef1 7a67 	vneg.f32	s15, s15
 8004cd4:	4b77      	ldr	r3, [pc, #476]	; (8004eb4 <get_Straj+0x660>)
 8004cd6:	edc3 7a00 	vstr	s15, [r3]
 8004cda:	4b78      	ldr	r3, [pc, #480]	; (8004ebc <get_Straj+0x668>)
 8004cdc:	edd3 7a00 	vldr	s15, [r3]
 8004ce0:	eef1 7a67 	vneg.f32	s15, s15
 8004ce4:	4b75      	ldr	r3, [pc, #468]	; (8004ebc <get_Straj+0x668>)
 8004ce6:	edc3 7a00 	vstr	s15, [r3]
 8004cea:	4b75      	ldr	r3, [pc, #468]	; (8004ec0 <get_Straj+0x66c>)
 8004cec:	edd3 7a00 	vldr	s15, [r3]
 8004cf0:	eef1 7a67 	vneg.f32	s15, s15
 8004cf4:	4b72      	ldr	r3, [pc, #456]	; (8004ec0 <get_Straj+0x66c>)
 8004cf6:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004cfa:	4b72      	ldr	r3, [pc, #456]	; (8004ec4 <get_Straj+0x670>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004d00:	f000 bc3b 	b.w	800557a <get_Straj+0xd26>
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004d04:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <get_Straj+0x648>)
 8004d06:	ed93 7a00 	vldr	s14, [r3]
 8004d0a:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <get_Straj+0x644>)
 8004d0c:	edd3 7a00 	vldr	s15, [r3]
 8004d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d14:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d20:	f340 80d8 	ble.w	8004ed4 <get_Straj+0x680>
 8004d24:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <get_Straj+0x648>)
 8004d26:	edd3 7a00 	vldr	s15, [r3]
 8004d2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d36:	f200 80cd 	bhi.w	8004ed4 <get_Straj+0x680>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004d3a:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <get_Straj+0x674>)
 8004d3c:	ed93 7a00 	vldr	s14, [r3]
 8004d40:	4b57      	ldr	r3, [pc, #348]	; (8004ea0 <get_Straj+0x64c>)
 8004d42:	edd3 7a00 	vldr	s15, [r3]
 8004d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d4a:	4b54      	ldr	r3, [pc, #336]	; (8004e9c <get_Straj+0x648>)
 8004d4c:	edd3 7a00 	vldr	s15, [r3]
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004d58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d5c:	4b51      	ldr	r3, [pc, #324]	; (8004ea4 <get_Straj+0x650>)
 8004d5e:	edd3 7a00 	vldr	s15, [r3]
 8004d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d66:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <get_Straj+0x648>)
 8004d68:	edd3 6a00 	vldr	s13, [r3]
 8004d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d74:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <get_Straj+0x674>)
 8004d76:	edd3 7a00 	vldr	s15, [r3]
 8004d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d82:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <get_Straj+0x678>)
 8004d88:	edd3 7a00 	vldr	s15, [r3]
 8004d8c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004d90:	4b42      	ldr	r3, [pc, #264]	; (8004e9c <get_Straj+0x648>)
 8004d92:	ed93 7a00 	vldr	s14, [r3]
 8004d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004da2:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004da6:	eeb0 0b47 	vmov.f64	d0, d7
 8004daa:	f00c fbf9 	bl	80115a0 <pow>
 8004dae:	eeb0 7b40 	vmov.f64	d7, d0
 8004db2:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004db6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004dba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004dbe:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004dc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004dc6:	4b39      	ldr	r3, [pc, #228]	; (8004eac <get_Straj+0x658>)
 8004dc8:	edc3 7a00 	vstr	s15, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 8004dcc:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <get_Straj+0x67c>)
 8004dce:	edd3 7a00 	vldr	s15, [r3]
 8004dd2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004dd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ecc <get_Straj+0x678>)
 8004dd8:	edd3 7a00 	vldr	s15, [r3]
 8004ddc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <get_Straj+0x648>)
 8004de2:	ed93 7a00 	vldr	s14, [r3]
 8004de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004df2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004df6:	eeb0 0b47 	vmov.f64	d0, d7
 8004dfa:	f00c fbd1 	bl	80115a0 <pow>
 8004dfe:	eeb0 7b40 	vmov.f64	d7, d0
 8004e02:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004e06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004e0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004e0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004e12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <get_Straj+0x660>)
 8004e18:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmin*(Ta-t);
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <get_Straj+0x678>)
 8004e1e:	edd3 7a00 	vldr	s15, [r3]
 8004e22:	eeb1 7a67 	vneg.f32	s14, s15
 8004e26:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <get_Straj+0x648>)
 8004e28:	edd3 6a00 	vldr	s13, [r3]
 8004e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e38:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <get_Straj+0x668>)
 8004e3a:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmin;
 8004e3e:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <get_Straj+0x678>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <get_Straj+0x66c>)
 8004e44:	6013      	str	r3, [r2, #0]
        if (flagInv){
 8004e46:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <get_Straj+0x670>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8395 	beq.w	800557a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004e50:	4b16      	ldr	r3, [pc, #88]	; (8004eac <get_Straj+0x658>)
 8004e52:	edd3 7a00 	vldr	s15, [r3]
 8004e56:	eef1 7a67 	vneg.f32	s15, s15
 8004e5a:	4b14      	ldr	r3, [pc, #80]	; (8004eac <get_Straj+0x658>)
 8004e5c:	edc3 7a00 	vstr	s15, [r3]
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <get_Straj+0x660>)
 8004e62:	edd3 7a00 	vldr	s15, [r3]
 8004e66:	eef1 7a67 	vneg.f32	s15, s15
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <get_Straj+0x660>)
 8004e6c:	edc3 7a00 	vstr	s15, [r3]
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <get_Straj+0x668>)
 8004e72:	edd3 7a00 	vldr	s15, [r3]
 8004e76:	eef1 7a67 	vneg.f32	s15, s15
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <get_Straj+0x668>)
 8004e7c:	edc3 7a00 	vstr	s15, [r3]
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <get_Straj+0x66c>)
 8004e82:	edd3 7a00 	vldr	s15, [r3]
 8004e86:	eef1 7a67 	vneg.f32	s15, s15
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <get_Straj+0x66c>)
 8004e8c:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <get_Straj+0x670>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004e96:	e370      	b.n	800557a <get_Straj+0xd26>
 8004e98:	24000a7c 	.word	0x24000a7c
 8004e9c:	24000a70 	.word	0x24000a70
 8004ea0:	2400073c 	.word	0x2400073c
 8004ea4:	24000a8c 	.word	0x24000a8c
 8004ea8:	24000a60 	.word	0x24000a60
 8004eac:	24000724 	.word	0x24000724
 8004eb0:	240000a0 	.word	0x240000a0
 8004eb4:	24000728 	.word	0x24000728
 8004eb8:	24000098 	.word	0x24000098
 8004ebc:	2400072c 	.word	0x2400072c
 8004ec0:	24000730 	.word	0x24000730
 8004ec4:	24000a5c 	.word	0x24000a5c
 8004ec8:	24000a68 	.word	0x24000a68
 8004ecc:	24000734 	.word	0x24000734
 8004ed0:	2400009c 	.word	0x2400009c
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004ed4:	4bae      	ldr	r3, [pc, #696]	; (8005190 <get_Straj+0x93c>)
 8004ed6:	edd3 7a00 	vldr	s15, [r3]
 8004eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee6:	dd6a      	ble.n	8004fbe <get_Straj+0x76a>
 8004ee8:	4ba9      	ldr	r3, [pc, #676]	; (8005190 <get_Straj+0x93c>)
 8004eea:	ed93 7a00 	vldr	s14, [r3]
 8004eee:	4ba9      	ldr	r3, [pc, #676]	; (8005194 <get_Straj+0x940>)
 8004ef0:	edd3 7a00 	vldr	s15, [r3]
 8004ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f04:	d85b      	bhi.n	8004fbe <get_Straj+0x76a>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004f06:	4ba4      	ldr	r3, [pc, #656]	; (8005198 <get_Straj+0x944>)
 8004f08:	ed93 7a00 	vldr	s14, [r3]
 8004f0c:	4ba3      	ldr	r3, [pc, #652]	; (800519c <get_Straj+0x948>)
 8004f0e:	edd3 7a00 	vldr	s15, [r3]
 8004f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f16:	4b9e      	ldr	r3, [pc, #632]	; (8005190 <get_Straj+0x93c>)
 8004f18:	edd3 7a00 	vldr	s15, [r3]
 8004f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004f24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004f28:	4b9d      	ldr	r3, [pc, #628]	; (80051a0 <get_Straj+0x94c>)
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f32:	4b97      	ldr	r3, [pc, #604]	; (8005190 <get_Straj+0x93c>)
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	edd7 6a01 	vldr	s13, [r7, #4]
 8004f3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f40:	4b95      	ldr	r3, [pc, #596]	; (8005198 <get_Straj+0x944>)
 8004f42:	edd3 7a00 	vldr	s15, [r3]
 8004f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4e:	4b95      	ldr	r3, [pc, #596]	; (80051a4 <get_Straj+0x950>)
 8004f50:	edc3 7a00 	vstr	s15, [r3]
        qd = vmax;
 8004f54:	4b94      	ldr	r3, [pc, #592]	; (80051a8 <get_Straj+0x954>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a94      	ldr	r2, [pc, #592]	; (80051ac <get_Straj+0x958>)
 8004f5a:	6013      	str	r3, [r2, #0]
        qdd = 0;
 8004f5c:	4b94      	ldr	r3, [pc, #592]	; (80051b0 <get_Straj+0x95c>)
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
        qddd = 0;
 8004f64:	4b93      	ldr	r3, [pc, #588]	; (80051b4 <get_Straj+0x960>)
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
        if (flagInv){
 8004f6c:	4b92      	ldr	r3, [pc, #584]	; (80051b8 <get_Straj+0x964>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8302 	beq.w	800557a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004f76:	4b8b      	ldr	r3, [pc, #556]	; (80051a4 <get_Straj+0x950>)
 8004f78:	edd3 7a00 	vldr	s15, [r3]
 8004f7c:	eef1 7a67 	vneg.f32	s15, s15
 8004f80:	4b88      	ldr	r3, [pc, #544]	; (80051a4 <get_Straj+0x950>)
 8004f82:	edc3 7a00 	vstr	s15, [r3]
 8004f86:	4b89      	ldr	r3, [pc, #548]	; (80051ac <get_Straj+0x958>)
 8004f88:	edd3 7a00 	vldr	s15, [r3]
 8004f8c:	eef1 7a67 	vneg.f32	s15, s15
 8004f90:	4b86      	ldr	r3, [pc, #536]	; (80051ac <get_Straj+0x958>)
 8004f92:	edc3 7a00 	vstr	s15, [r3]
 8004f96:	4b86      	ldr	r3, [pc, #536]	; (80051b0 <get_Straj+0x95c>)
 8004f98:	edd3 7a00 	vldr	s15, [r3]
 8004f9c:	eef1 7a67 	vneg.f32	s15, s15
 8004fa0:	4b83      	ldr	r3, [pc, #524]	; (80051b0 <get_Straj+0x95c>)
 8004fa2:	edc3 7a00 	vstr	s15, [r3]
 8004fa6:	4b83      	ldr	r3, [pc, #524]	; (80051b4 <get_Straj+0x960>)
 8004fa8:	edd3 7a00 	vldr	s15, [r3]
 8004fac:	eef1 7a67 	vneg.f32	s15, s15
 8004fb0:	4b80      	ldr	r3, [pc, #512]	; (80051b4 <get_Straj+0x960>)
 8004fb2:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8004fb6:	4b80      	ldr	r3, [pc, #512]	; (80051b8 <get_Straj+0x964>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004fbc:	e2dd      	b.n	800557a <get_Straj+0xd26>
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004fbe:	4b7f      	ldr	r3, [pc, #508]	; (80051bc <get_Straj+0x968>)
 8004fc0:	ed93 7a00 	vldr	s14, [r3]
 8004fc4:	4b7e      	ldr	r3, [pc, #504]	; (80051c0 <get_Straj+0x96c>)
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fce:	ed97 7a01 	vldr	s14, [r7, #4]
 8004fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fda:	f2c0 80fd 	blt.w	80051d8 <get_Straj+0x984>
 8004fde:	4b77      	ldr	r3, [pc, #476]	; (80051bc <get_Straj+0x968>)
 8004fe0:	ed93 7a00 	vldr	s14, [r3]
 8004fe4:	4b76      	ldr	r3, [pc, #472]	; (80051c0 <get_Straj+0x96c>)
 8004fe6:	edd3 7a00 	vldr	s15, [r3]
 8004fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fee:	4b75      	ldr	r3, [pc, #468]	; (80051c4 <get_Straj+0x970>)
 8004ff0:	edd3 7a00 	vldr	s15, [r3]
 8004ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005004:	f200 80e8 	bhi.w	80051d8 <get_Straj+0x984>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8005008:	4b6f      	ldr	r3, [pc, #444]	; (80051c8 <get_Straj+0x974>)
 800500a:	ed93 7a00 	vldr	s14, [r3]
 800500e:	4b62      	ldr	r3, [pc, #392]	; (8005198 <get_Straj+0x944>)
 8005010:	edd3 6a00 	vldr	s13, [r3]
 8005014:	4b6d      	ldr	r3, [pc, #436]	; (80051cc <get_Straj+0x978>)
 8005016:	edd3 7a00 	vldr	s15, [r3]
 800501a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800501e:	4b68      	ldr	r3, [pc, #416]	; (80051c0 <get_Straj+0x96c>)
 8005020:	edd3 7a00 	vldr	s15, [r3]
 8005024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005028:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800502c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005030:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005034:	4b61      	ldr	r3, [pc, #388]	; (80051bc <get_Straj+0x968>)
 8005036:	edd3 7a00 	vldr	s15, [r3]
 800503a:	edd7 6a01 	vldr	s13, [r7, #4]
 800503e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005042:	4b5f      	ldr	r3, [pc, #380]	; (80051c0 <get_Straj+0x96c>)
 8005044:	edd3 7a00 	vldr	s15, [r3]
 8005048:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800504c:	4b52      	ldr	r3, [pc, #328]	; (8005198 <get_Straj+0x944>)
 800504e:	edd3 7a00 	vldr	s15, [r3]
 8005052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800505a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800505e:	4b5c      	ldr	r3, [pc, #368]	; (80051d0 <get_Straj+0x97c>)
 8005060:	edd3 7a00 	vldr	s15, [r3]
 8005064:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005068:	4b54      	ldr	r3, [pc, #336]	; (80051bc <get_Straj+0x968>)
 800506a:	edd3 7a00 	vldr	s15, [r3]
 800506e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005076:	4b52      	ldr	r3, [pc, #328]	; (80051c0 <get_Straj+0x96c>)
 8005078:	edd3 7a00 	vldr	s15, [r3]
 800507c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005084:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005088:	eeb0 0b47 	vmov.f64	d0, d7
 800508c:	f00c fa88 	bl	80115a0 <pow>
 8005090:	eeb0 6b40 	vmov.f64	d6, d0
 8005094:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005098:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800509c:	ee29 7b07 	vmul.f64	d7, d9, d7
 80050a0:	ee38 7b47 	vsub.f64	d7, d8, d7
 80050a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80050a8:	4b3e      	ldr	r3, [pc, #248]	; (80051a4 <get_Straj+0x950>)
 80050aa:	edc3 7a00 	vstr	s15, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 80050ae:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <get_Straj+0x944>)
 80050b0:	edd3 7a00 	vldr	s15, [r3]
 80050b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80050b8:	4b45      	ldr	r3, [pc, #276]	; (80051d0 <get_Straj+0x97c>)
 80050ba:	edd3 7a00 	vldr	s15, [r3]
 80050be:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80050c2:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <get_Straj+0x968>)
 80050c4:	edd3 7a00 	vldr	s15, [r3]
 80050c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80050cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050d0:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <get_Straj+0x96c>)
 80050d2:	edd3 7a00 	vldr	s15, [r3]
 80050d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80050e2:	eeb0 0b47 	vmov.f64	d0, d7
 80050e6:	f00c fa5b 	bl	80115a0 <pow>
 80050ea:	eeb0 6b40 	vmov.f64	d6, d0
 80050ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80050f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80050f6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80050fa:	ee38 7b47 	vsub.f64	d7, d8, d7
 80050fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005102:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <get_Straj+0x958>)
 8005104:	edc3 7a00 	vstr	s15, [r3]
        qdd=-jmax*(t-T+Td);
 8005108:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <get_Straj+0x97c>)
 800510a:	edd3 7a00 	vldr	s15, [r3]
 800510e:	eeb1 7a67 	vneg.f32	s14, s15
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <get_Straj+0x968>)
 8005114:	edd3 7a00 	vldr	s15, [r3]
 8005118:	edd7 6a01 	vldr	s13, [r7, #4]
 800511c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <get_Straj+0x96c>)
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <get_Straj+0x95c>)
 8005130:	edc3 7a00 	vstr	s15, [r3]
        qddd=jmin;
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <get_Straj+0x980>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <get_Straj+0x960>)
 800513a:	6013      	str	r3, [r2, #0]
        if (flagInv){
 800513c:	4b1e      	ldr	r3, [pc, #120]	; (80051b8 <get_Straj+0x964>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 821a 	beq.w	800557a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005146:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <get_Straj+0x950>)
 8005148:	edd3 7a00 	vldr	s15, [r3]
 800514c:	eef1 7a67 	vneg.f32	s15, s15
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <get_Straj+0x950>)
 8005152:	edc3 7a00 	vstr	s15, [r3]
 8005156:	4b15      	ldr	r3, [pc, #84]	; (80051ac <get_Straj+0x958>)
 8005158:	edd3 7a00 	vldr	s15, [r3]
 800515c:	eef1 7a67 	vneg.f32	s15, s15
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <get_Straj+0x958>)
 8005162:	edc3 7a00 	vstr	s15, [r3]
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <get_Straj+0x95c>)
 8005168:	edd3 7a00 	vldr	s15, [r3]
 800516c:	eef1 7a67 	vneg.f32	s15, s15
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <get_Straj+0x95c>)
 8005172:	edc3 7a00 	vstr	s15, [r3]
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <get_Straj+0x960>)
 8005178:	edd3 7a00 	vldr	s15, [r3]
 800517c:	eef1 7a67 	vneg.f32	s15, s15
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <get_Straj+0x960>)
 8005182:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <get_Straj+0x964>)
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800518c:	e1f5      	b.n	800557a <get_Straj+0xd26>
 800518e:	bf00      	nop
 8005190:	24000a70 	.word	0x24000a70
 8005194:	24000a78 	.word	0x24000a78
 8005198:	24000a68 	.word	0x24000a68
 800519c:	2400073c 	.word	0x2400073c
 80051a0:	24000a8c 	.word	0x24000a8c
 80051a4:	24000724 	.word	0x24000724
 80051a8:	2400009c 	.word	0x2400009c
 80051ac:	24000728 	.word	0x24000728
 80051b0:	2400072c 	.word	0x2400072c
 80051b4:	24000730 	.word	0x24000730
 80051b8:	24000a5c 	.word	0x24000a5c
 80051bc:	24000a6c 	.word	0x24000a6c
 80051c0:	24000a74 	.word	0x24000a74
 80051c4:	24000a80 	.word	0x24000a80
 80051c8:	24000a90 	.word	0x24000a90
 80051cc:	24000740 	.word	0x24000740
 80051d0:	24000098 	.word	0x24000098
 80051d4:	24000734 	.word	0x24000734
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 80051d8:	4b8d      	ldr	r3, [pc, #564]	; (8005410 <get_Straj+0xbbc>)
 80051da:	ed93 7a00 	vldr	s14, [r3]
 80051de:	4b8d      	ldr	r3, [pc, #564]	; (8005414 <get_Straj+0xbc0>)
 80051e0:	edd3 7a00 	vldr	s15, [r3]
 80051e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051e8:	4b8b      	ldr	r3, [pc, #556]	; (8005418 <get_Straj+0xbc4>)
 80051ea:	edd3 7a00 	vldr	s15, [r3]
 80051ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80051f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	f340 80eb 	ble.w	80053d8 <get_Straj+0xb84>
 8005202:	4b83      	ldr	r3, [pc, #524]	; (8005410 <get_Straj+0xbbc>)
 8005204:	ed93 7a00 	vldr	s14, [r3]
 8005208:	4b83      	ldr	r3, [pc, #524]	; (8005418 <get_Straj+0xbc4>)
 800520a:	edd3 7a00 	vldr	s15, [r3]
 800520e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005212:	ed97 7a01 	vldr	s14, [r7, #4]
 8005216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	f200 80db 	bhi.w	80053d8 <get_Straj+0xb84>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8005222:	4b7e      	ldr	r3, [pc, #504]	; (800541c <get_Straj+0xbc8>)
 8005224:	ed93 7a00 	vldr	s14, [r3]
 8005228:	4b7d      	ldr	r3, [pc, #500]	; (8005420 <get_Straj+0xbcc>)
 800522a:	edd3 6a00 	vldr	s13, [r3]
 800522e:	4b7d      	ldr	r3, [pc, #500]	; (8005424 <get_Straj+0xbd0>)
 8005230:	edd3 7a00 	vldr	s15, [r3]
 8005234:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005238:	4b76      	ldr	r3, [pc, #472]	; (8005414 <get_Straj+0xbc0>)
 800523a:	edd3 7a00 	vldr	s15, [r3]
 800523e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005242:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005246:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800524a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800524e:	4b70      	ldr	r3, [pc, #448]	; (8005410 <get_Straj+0xbbc>)
 8005250:	edd3 7a00 	vldr	s15, [r3]
 8005254:	edd7 6a01 	vldr	s13, [r7, #4]
 8005258:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800525c:	4b6d      	ldr	r3, [pc, #436]	; (8005414 <get_Straj+0xbc0>)
 800525e:	edd3 7a00 	vldr	s15, [r3]
 8005262:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005266:	4b6e      	ldr	r3, [pc, #440]	; (8005420 <get_Straj+0xbcc>)
 8005268:	edd3 7a00 	vldr	s15, [r3]
 800526c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005274:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005278:	4b6b      	ldr	r3, [pc, #428]	; (8005428 <get_Straj+0xbd4>)
 800527a:	ed93 7a00 	vldr	s14, [r3]
 800527e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8005282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005286:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800528a:	4b61      	ldr	r3, [pc, #388]	; (8005410 <get_Straj+0xbbc>)
 800528c:	edd3 7a00 	vldr	s15, [r3]
 8005290:	ed97 7a01 	vldr	s14, [r7, #4]
 8005294:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005298:	4b5e      	ldr	r3, [pc, #376]	; (8005414 <get_Straj+0xbc0>)
 800529a:	edd3 7a00 	vldr	s15, [r3]
 800529e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80052aa:	eeb0 0b47 	vmov.f64	d0, d7
 80052ae:	f00c f977 	bl	80115a0 <pow>
 80052b2:	eeb0 7b40 	vmov.f64	d7, d0
 80052b6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80052ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052be:	4b56      	ldr	r3, [pc, #344]	; (8005418 <get_Straj+0xbc4>)
 80052c0:	edd3 7a00 	vldr	s15, [r3]
 80052c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80052c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052cc:	4b50      	ldr	r3, [pc, #320]	; (8005410 <get_Straj+0xbbc>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	edd7 5a01 	vldr	s11, [r7, #4]
 80052d6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80052da:	4b4e      	ldr	r3, [pc, #312]	; (8005414 <get_Straj+0xbc0>)
 80052dc:	edd3 7a00 	vldr	s15, [r3]
 80052e0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80052e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052ec:	ee36 ab47 	vsub.f64	d10, d6, d7
 80052f0:	4b49      	ldr	r3, [pc, #292]	; (8005418 <get_Straj+0xbc4>)
 80052f2:	edd3 7a00 	vldr	s15, [r3]
 80052f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80052fe:	eeb0 0b47 	vmov.f64	d0, d7
 8005302:	f00c f94d 	bl	80115a0 <pow>
 8005306:	eeb0 7b40 	vmov.f64	d7, d0
 800530a:	ee3a 7b07 	vadd.f64	d7, d10, d7
 800530e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005312:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005316:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800531a:	4b44      	ldr	r3, [pc, #272]	; (800542c <get_Straj+0xbd8>)
 800531c:	edc3 7a00 	vstr	s15, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8005320:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <get_Straj+0xbbc>)
 8005322:	edd3 7a00 	vldr	s15, [r3]
 8005326:	ed97 7a01 	vldr	s14, [r7, #4]
 800532a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800532e:	4b39      	ldr	r3, [pc, #228]	; (8005414 <get_Straj+0xbc0>)
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005338:	4b37      	ldr	r3, [pc, #220]	; (8005418 <get_Straj+0xbc4>)
 800533a:	edd3 6a00 	vldr	s13, [r3]
 800533e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005342:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800534a:	4b37      	ldr	r3, [pc, #220]	; (8005428 <get_Straj+0xbd4>)
 800534c:	edd3 7a00 	vldr	s15, [r3]
 8005350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005354:	4b32      	ldr	r3, [pc, #200]	; (8005420 <get_Straj+0xbcc>)
 8005356:	edd3 7a00 	vldr	s15, [r3]
 800535a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800535e:	4b34      	ldr	r3, [pc, #208]	; (8005430 <get_Straj+0xbdc>)
 8005360:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmax*Tj2;
 8005364:	4b33      	ldr	r3, [pc, #204]	; (8005434 <get_Straj+0xbe0>)
 8005366:	edd3 7a00 	vldr	s15, [r3]
 800536a:	eeb1 7a67 	vneg.f32	s14, s15
 800536e:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <get_Straj+0xbc4>)
 8005370:	edd3 7a00 	vldr	s15, [r3]
 8005374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005378:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <get_Straj+0xbe4>)
 800537a:	edc3 7a00 	vstr	s15, [r3]
        qddd = 0;
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <get_Straj+0xbe8>)
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
        if (flagInv){
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <get_Straj+0xbec>)
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80f5 	beq.w	800557a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005390:	4b26      	ldr	r3, [pc, #152]	; (800542c <get_Straj+0xbd8>)
 8005392:	edd3 7a00 	vldr	s15, [r3]
 8005396:	eef1 7a67 	vneg.f32	s15, s15
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <get_Straj+0xbd8>)
 800539c:	edc3 7a00 	vstr	s15, [r3]
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <get_Straj+0xbdc>)
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	eef1 7a67 	vneg.f32	s15, s15
 80053aa:	4b21      	ldr	r3, [pc, #132]	; (8005430 <get_Straj+0xbdc>)
 80053ac:	edc3 7a00 	vstr	s15, [r3]
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <get_Straj+0xbe4>)
 80053b2:	edd3 7a00 	vldr	s15, [r3]
 80053b6:	eef1 7a67 	vneg.f32	s15, s15
 80053ba:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <get_Straj+0xbe4>)
 80053bc:	edc3 7a00 	vstr	s15, [r3]
 80053c0:	4b1e      	ldr	r3, [pc, #120]	; (800543c <get_Straj+0xbe8>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	eef1 7a67 	vneg.f32	s15, s15
 80053ca:	4b1c      	ldr	r3, [pc, #112]	; (800543c <get_Straj+0xbe8>)
 80053cc:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 80053d0:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <get_Straj+0xbec>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80053d6:	e0d0      	b.n	800557a <get_Straj+0xd26>
        }

    } else if (t>T-Tj2 && t<=T){
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <get_Straj+0xbbc>)
 80053da:	ed93 7a00 	vldr	s14, [r3]
 80053de:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <get_Straj+0xbc4>)
 80053e0:	edd3 7a00 	vldr	s15, [r3]
 80053e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80053ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f4:	dc00      	bgt.n	80053f8 <get_Straj+0xba4>
            flagInv = false;
        }
    }


}
 80053f6:	e0c0      	b.n	800557a <get_Straj+0xd26>
    } else if (t>T-Tj2 && t<=T){
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <get_Straj+0xbbc>)
 80053fa:	edd3 7a00 	vldr	s15, [r3]
 80053fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8005402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540a:	d91b      	bls.n	8005444 <get_Straj+0xbf0>
}
 800540c:	e0b5      	b.n	800557a <get_Straj+0xd26>
 800540e:	bf00      	nop
 8005410:	24000a6c 	.word	0x24000a6c
 8005414:	24000a74 	.word	0x24000a74
 8005418:	24000a80 	.word	0x24000a80
 800541c:	24000a90 	.word	0x24000a90
 8005420:	24000a68 	.word	0x24000a68
 8005424:	24000740 	.word	0x24000740
 8005428:	24000a64 	.word	0x24000a64
 800542c:	24000724 	.word	0x24000724
 8005430:	24000728 	.word	0x24000728
 8005434:	24000098 	.word	0x24000098
 8005438:	2400072c 	.word	0x2400072c
 800543c:	24000730 	.word	0x24000730
 8005440:	24000a5c 	.word	0x24000a5c
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8005444:	4b50      	ldr	r3, [pc, #320]	; (8005588 <get_Straj+0xd34>)
 8005446:	ed93 7a00 	vldr	s14, [r3]
 800544a:	4b50      	ldr	r3, [pc, #320]	; (800558c <get_Straj+0xd38>)
 800544c:	edd3 6a00 	vldr	s13, [r3]
 8005450:	edd7 7a01 	vldr	s15, [r7, #4]
 8005454:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005458:	4b4d      	ldr	r3, [pc, #308]	; (8005590 <get_Straj+0xd3c>)
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005466:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800546a:	4b4a      	ldr	r3, [pc, #296]	; (8005594 <get_Straj+0xd40>)
 800546c:	edd3 7a00 	vldr	s15, [r3]
 8005470:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005474:	4b45      	ldr	r3, [pc, #276]	; (800558c <get_Straj+0xd38>)
 8005476:	ed93 7a00 	vldr	s14, [r3]
 800547a:	edd7 7a01 	vldr	s15, [r7, #4]
 800547e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005486:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800548a:	eeb0 0b47 	vmov.f64	d0, d7
 800548e:	f00c f887 	bl	80115a0 <pow>
 8005492:	eeb0 6b40 	vmov.f64	d6, d0
 8005496:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800549a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800549e:	ee29 7b07 	vmul.f64	d7, d9, d7
 80054a2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80054a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80054aa:	4b3b      	ldr	r3, [pc, #236]	; (8005598 <get_Straj+0xd44>)
 80054ac:	edc3 7a00 	vstr	s15, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 80054b0:	4b37      	ldr	r3, [pc, #220]	; (8005590 <get_Straj+0xd3c>)
 80054b2:	edd3 7a00 	vldr	s15, [r3]
 80054b6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80054ba:	4b36      	ldr	r3, [pc, #216]	; (8005594 <get_Straj+0xd40>)
 80054bc:	edd3 7a00 	vldr	s15, [r3]
 80054c0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80054c4:	4b31      	ldr	r3, [pc, #196]	; (800558c <get_Straj+0xd38>)
 80054c6:	ed93 7a00 	vldr	s14, [r3]
 80054ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80054ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054da:	eeb0 0b47 	vmov.f64	d0, d7
 80054de:	f00c f85f 	bl	80115a0 <pow>
 80054e2:	eeb0 7b40 	vmov.f64	d7, d0
 80054e6:	ee29 6b07 	vmul.f64	d6, d9, d7
 80054ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80054ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80054f2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80054f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80054fa:	4b28      	ldr	r3, [pc, #160]	; (800559c <get_Straj+0xd48>)
 80054fc:	edc3 7a00 	vstr	s15, [r3]
        qdd = -jmax*(T-t);
 8005500:	4b24      	ldr	r3, [pc, #144]	; (8005594 <get_Straj+0xd40>)
 8005502:	edd3 7a00 	vldr	s15, [r3]
 8005506:	eeb1 7a67 	vneg.f32	s14, s15
 800550a:	4b20      	ldr	r3, [pc, #128]	; (800558c <get_Straj+0xd38>)
 800550c:	edd3 6a00 	vldr	s13, [r3]
 8005510:	edd7 7a01 	vldr	s15, [r7, #4]
 8005514:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551c:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <get_Straj+0xd4c>)
 800551e:	edc3 7a00 	vstr	s15, [r3]
        qddd = jmax;
 8005522:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <get_Straj+0xd40>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <get_Straj+0xd50>)
 8005528:	6013      	str	r3, [r2, #0]
        if (flagInv){
 800552a:	4b1f      	ldr	r3, [pc, #124]	; (80055a8 <get_Straj+0xd54>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d023      	beq.n	800557a <get_Straj+0xd26>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <get_Straj+0xd44>)
 8005534:	edd3 7a00 	vldr	s15, [r3]
 8005538:	eef1 7a67 	vneg.f32	s15, s15
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <get_Straj+0xd44>)
 800553e:	edc3 7a00 	vstr	s15, [r3]
 8005542:	4b16      	ldr	r3, [pc, #88]	; (800559c <get_Straj+0xd48>)
 8005544:	edd3 7a00 	vldr	s15, [r3]
 8005548:	eef1 7a67 	vneg.f32	s15, s15
 800554c:	4b13      	ldr	r3, [pc, #76]	; (800559c <get_Straj+0xd48>)
 800554e:	edc3 7a00 	vstr	s15, [r3]
 8005552:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <get_Straj+0xd4c>)
 8005554:	edd3 7a00 	vldr	s15, [r3]
 8005558:	eef1 7a67 	vneg.f32	s15, s15
 800555c:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <get_Straj+0xd4c>)
 800555e:	edc3 7a00 	vstr	s15, [r3]
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <get_Straj+0xd50>)
 8005564:	edd3 7a00 	vldr	s15, [r3]
 8005568:	eef1 7a67 	vneg.f32	s15, s15
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <get_Straj+0xd50>)
 800556e:	edc3 7a00 	vstr	s15, [r3]
            flagInv = false;
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <get_Straj+0xd54>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
}
 8005578:	e7ff      	b.n	800557a <get_Straj+0xd26>
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	ecbd 8b06 	vpop	{d8-d10}
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	24000a90 	.word	0x24000a90
 800558c:	24000a6c 	.word	0x24000a6c
 8005590:	24000740 	.word	0x24000740
 8005594:	24000098 	.word	0x24000098
 8005598:	24000724 	.word	0x24000724
 800559c:	24000728 	.word	0x24000728
 80055a0:	2400072c 	.word	0x2400072c
 80055a4:	24000730 	.word	0x24000730
 80055a8:	24000a5c 	.word	0x24000a5c
 80055ac:	00000000 	.word	0x00000000

080055b0 <update_ScurveTraj>:


void update_ScurveTraj(float _qi ,float _qf, float vi,float vf ,float vmax,float amax,float jmax){
 80055b0:	b580      	push	{r7, lr}
 80055b2:	ed2d 8b06 	vpush	{d8-d10}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	ed87 0a07 	vstr	s0, [r7, #28]
 80055be:	edc7 0a06 	vstr	s1, [r7, #24]
 80055c2:	ed87 1a05 	vstr	s2, [r7, #20]
 80055c6:	edc7 1a04 	vstr	s3, [r7, #16]
 80055ca:	ed87 2a03 	vstr	s4, [r7, #12]
 80055ce:	edc7 2a02 	vstr	s5, [r7, #8]
 80055d2:	ed87 3a01 	vstr	s6, [r7, #4]

jmin = -jmax;
 80055d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80055da:	eef1 7a67 	vneg.f32	s15, s15
 80055de:	4bad      	ldr	r3, [pc, #692]	; (8005894 <update_ScurveTraj+0x2e4>)
 80055e0:	edc3 7a00 	vstr	s15, [r3]
amin = -amax;
 80055e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80055e8:	eef1 7a67 	vneg.f32	s15, s15
 80055ec:	4baa      	ldr	r3, [pc, #680]	; (8005898 <update_ScurveTraj+0x2e8>)
 80055ee:	edc3 7a00 	vstr	s15, [r3]
vmin = -vmax;
 80055f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80055f6:	eef1 7a67 	vneg.f32	s15, s15
 80055fa:	4ba8      	ldr	r3, [pc, #672]	; (800589c <update_ScurveTraj+0x2ec>)
 80055fc:	edc3 7a00 	vstr	s15, [r3]
qi=_qi;
 8005600:	4aa7      	ldr	r2, [pc, #668]	; (80058a0 <update_ScurveTraj+0x2f0>)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	6013      	str	r3, [r2, #0]
qf=_qf;
 8005606:	4aa7      	ldr	r2, [pc, #668]	; (80058a4 <update_ScurveTraj+0x2f4>)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	6013      	str	r3, [r2, #0]

if (qf < qi){
 800560c:	4ba5      	ldr	r3, [pc, #660]	; (80058a4 <update_ScurveTraj+0x2f4>)
 800560e:	ed93 7a00 	vldr	s14, [r3]
 8005612:	4ba3      	ldr	r3, [pc, #652]	; (80058a0 <update_ScurveTraj+0x2f0>)
 8005614:	edd3 7a00 	vldr	s15, [r3]
 8005618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005620:	d548      	bpl.n	80056b4 <update_ScurveTraj+0x104>

    flagInv = true;
 8005622:	4ba1      	ldr	r3, [pc, #644]	; (80058a8 <update_ScurveTraj+0x2f8>)
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 8005628:	4b9d      	ldr	r3, [pc, #628]	; (80058a0 <update_ScurveTraj+0x2f0>)
 800562a:	edd3 7a00 	vldr	s15, [r3]
 800562e:	eef1 7a67 	vneg.f32	s15, s15
 8005632:	4b9b      	ldr	r3, [pc, #620]	; (80058a0 <update_ScurveTraj+0x2f0>)
 8005634:	edc3 7a00 	vstr	s15, [r3]
    qf = -qf;
 8005638:	4b9a      	ldr	r3, [pc, #616]	; (80058a4 <update_ScurveTraj+0x2f4>)
 800563a:	edd3 7a00 	vldr	s15, [r3]
 800563e:	eef1 7a67 	vneg.f32	s15, s15
 8005642:	4b98      	ldr	r3, [pc, #608]	; (80058a4 <update_ScurveTraj+0x2f4>)
 8005644:	edc3 7a00 	vstr	s15, [r3]
    vi = -vi;
 8005648:	edd7 7a05 	vldr	s15, [r7, #20]
 800564c:	eef1 7a67 	vneg.f32	s15, s15
 8005650:	edc7 7a05 	vstr	s15, [r7, #20]
    vf = -vf;
 8005654:	edd7 7a04 	vldr	s15, [r7, #16]
 8005658:	eef1 7a67 	vneg.f32	s15, s15
 800565c:	edc7 7a04 	vstr	s15, [r7, #16]

    vmax = -vmin;
 8005660:	4b8e      	ldr	r3, [pc, #568]	; (800589c <update_ScurveTraj+0x2ec>)
 8005662:	edd3 7a00 	vldr	s15, [r3]
 8005666:	eef1 7a67 	vneg.f32	s15, s15
 800566a:	edc7 7a03 	vstr	s15, [r7, #12]
    vmin = -vmax;
 800566e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005672:	eef1 7a67 	vneg.f32	s15, s15
 8005676:	4b89      	ldr	r3, [pc, #548]	; (800589c <update_ScurveTraj+0x2ec>)
 8005678:	edc3 7a00 	vstr	s15, [r3]
    amax = -amin;
 800567c:	4b86      	ldr	r3, [pc, #536]	; (8005898 <update_ScurveTraj+0x2e8>)
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	eef1 7a67 	vneg.f32	s15, s15
 8005686:	edc7 7a02 	vstr	s15, [r7, #8]
    amin = -amax;
 800568a:	edd7 7a02 	vldr	s15, [r7, #8]
 800568e:	eef1 7a67 	vneg.f32	s15, s15
 8005692:	4b81      	ldr	r3, [pc, #516]	; (8005898 <update_ScurveTraj+0x2e8>)
 8005694:	edc3 7a00 	vstr	s15, [r3]
    jmax = -jmin;
 8005698:	4b7e      	ldr	r3, [pc, #504]	; (8005894 <update_ScurveTraj+0x2e4>)
 800569a:	edd3 7a00 	vldr	s15, [r3]
 800569e:	eef1 7a67 	vneg.f32	s15, s15
 80056a2:	edc7 7a01 	vstr	s15, [r7, #4]
    jmin = -jmax;
 80056a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056aa:	eef1 7a67 	vneg.f32	s15, s15
 80056ae:	4b79      	ldr	r3, [pc, #484]	; (8005894 <update_ScurveTraj+0x2e4>)
 80056b0:	edc3 7a00 	vstr	s15, [r3]

}

volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 80056b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80056b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80056bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056c0:	eef0 7ae7 	vabs.f32	s15, s15
 80056c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80056c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80056cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80056d4:	eeb0 0b45 	vmov.f64	d0, d5
 80056d8:	f00c f9e2 	bl	8011aa0 <sqrt>
 80056dc:	eeb0 6b40 	vmov.f64	d6, d0
 80056e0:	edd7 5a02 	vldr	s11, [r7, #8]
 80056e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80056e8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80056ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80056f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80056f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f8:	d518      	bpl.n	800572c <update_ScurveTraj+0x17c>
 80056fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80056fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005706:	eef0 7ae7 	vabs.f32	s15, s15
 800570a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800570e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005716:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800571a:	eeb0 0b45 	vmov.f64	d0, d5
 800571e:	f00c f9bf 	bl	8011aa0 <sqrt>
 8005722:	eeb0 7b40 	vmov.f64	d7, d0
 8005726:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800572a:	e005      	b.n	8005738 <update_ScurveTraj+0x188>
 800572c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005730:	ed97 7a01 	vldr	s14, [r7, #4]
 8005734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005738:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


if (Tjaux<amax/jmax){
 800573c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005740:	edd7 7a01 	vldr	s15, [r7, #4]
 8005744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005748:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800574c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005754:	dc00      	bgt.n	8005758 <update_ScurveTraj+0x1a8>
    //if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
    //else {printf("the trajectory is NOT \n");}
}
else if (Tjaux == amax/jmax){
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    //if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
    //else {printf("the trajectory is NOT feasible\n");}
}
//Phase 1: acceleration
if ((vmax-vi)*jmax < pow(amax,2)){
 8005758:	ed97 7a03 	vldr	s14, [r7, #12]
 800575c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005760:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005764:	edd7 7a01 	vldr	s15, [r7, #4]
 8005768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005770:	edd7 7a02 	vldr	s15, [r7, #8]
 8005774:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005778:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800577c:	eeb0 0b47 	vmov.f64	d0, d7
 8005780:	f00b ff0e 	bl	80115a0 <pow>
 8005784:	eeb0 7b40 	vmov.f64	d7, d0
 8005788:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	d523      	bpl.n	80057da <update_ScurveTraj+0x22a>
    //printf("amax is NOT reached\n");

    Tj1=sqrt(fabs(vmax-vi)/jmax);
 8005792:	ed97 7a03 	vldr	s14, [r7, #12]
 8005796:	edd7 7a05 	vldr	s15, [r7, #20]
 800579a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800579e:	eef0 7ae7 	vabs.f32	s15, s15
 80057a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80057a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80057aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80057ae:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80057b2:	eeb0 0b45 	vmov.f64	d0, d5
 80057b6:	f00c f973 	bl	8011aa0 <sqrt>
 80057ba:	eeb0 7b40 	vmov.f64	d7, d0
 80057be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80057c2:	4b3a      	ldr	r3, [pc, #232]	; (80058ac <update_ScurveTraj+0x2fc>)
 80057c4:	edc3 7a00 	vstr	s15, [r3]
    Ta=Tj1*2;
 80057c8:	4b38      	ldr	r3, [pc, #224]	; (80058ac <update_ScurveTraj+0x2fc>)
 80057ca:	edd3 7a00 	vldr	s15, [r3]
 80057ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057d2:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <update_ScurveTraj+0x300>)
 80057d4:	edc3 7a00 	vstr	s15, [r3]
 80057d8:	e01a      	b.n	8005810 <update_ScurveTraj+0x260>
}
else{
    //printf("amax is reached\n");
    Tj1=amax/jmax;
 80057da:	edd7 6a02 	vldr	s13, [r7, #8]
 80057de:	ed97 7a01 	vldr	s14, [r7, #4]
 80057e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e6:	4b31      	ldr	r3, [pc, #196]	; (80058ac <update_ScurveTraj+0x2fc>)
 80057e8:	edc3 7a00 	vstr	s15, [r3]
    Ta=Tj1+(vmax-vi)/amax;
 80057ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80057f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80057f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80057f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80057fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <update_ScurveTraj+0x2fc>)
 8005802:	edd3 7a00 	vldr	s15, [r3]
 8005806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800580a:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <update_ScurveTraj+0x300>)
 800580c:	edc3 7a00 	vstr	s15, [r3]
}

//Phase 3: Desacceleration


if ((vmax-vf)*jmax < pow(amax,2)){
 8005810:	ed97 7a03 	vldr	s14, [r7, #12]
 8005814:	edd7 7a04 	vldr	s15, [r7, #16]
 8005818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800581c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005824:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005828:	edd7 7a02 	vldr	s15, [r7, #8]
 800582c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005830:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005834:	eeb0 0b47 	vmov.f64	d0, d7
 8005838:	f00b feb2 	bl	80115a0 <pow>
 800583c:	eeb0 7b40 	vmov.f64	d7, d0
 8005840:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005848:	d538      	bpl.n	80058bc <update_ScurveTraj+0x30c>
    //printf("amin is NOT reached\n");

    Tj2=sqrt(fabs(vmax-vf)/jmax);
 800584a:	ed97 7a03 	vldr	s14, [r7, #12]
 800584e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005856:	eef0 7ae7 	vabs.f32	s15, s15
 800585a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800585e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005866:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800586a:	eeb0 0b45 	vmov.f64	d0, d5
 800586e:	f00c f917 	bl	8011aa0 <sqrt>
 8005872:	eeb0 7b40 	vmov.f64	d7, d0
 8005876:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800587a:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <update_ScurveTraj+0x304>)
 800587c:	edc3 7a00 	vstr	s15, [r3]
    Td=Tj2*2;
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <update_ScurveTraj+0x304>)
 8005882:	edd3 7a00 	vldr	s15, [r3]
 8005886:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <update_ScurveTraj+0x308>)
 800588c:	edc3 7a00 	vstr	s15, [r3]
 8005890:	e02f      	b.n	80058f2 <update_ScurveTraj+0x342>
 8005892:	bf00      	nop
 8005894:	24000734 	.word	0x24000734
 8005898:	24000744 	.word	0x24000744
 800589c:	24000738 	.word	0x24000738
 80058a0:	24000a8c 	.word	0x24000a8c
 80058a4:	24000a90 	.word	0x24000a90
 80058a8:	24000a5c 	.word	0x24000a5c
 80058ac:	24000a7c 	.word	0x24000a7c
 80058b0:	24000a70 	.word	0x24000a70
 80058b4:	24000a80 	.word	0x24000a80
 80058b8:	24000a74 	.word	0x24000a74
}
else{
    //printf("amin is reached\n");
    Tj2=amax/jmax;
 80058bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80058c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80058c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c8:	4ba9      	ldr	r3, [pc, #676]	; (8005b70 <update_ScurveTraj+0x5c0>)
 80058ca:	edc3 7a00 	vstr	s15, [r3]
    Td=Tj2+(vmax-vf)/amax;
 80058ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80058d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80058d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80058da:	edd7 7a02 	vldr	s15, [r7, #8]
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4ba3      	ldr	r3, [pc, #652]	; (8005b70 <update_ScurveTraj+0x5c0>)
 80058e4:	edd3 7a00 	vldr	s15, [r3]
 80058e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058ec:	4ba1      	ldr	r3, [pc, #644]	; (8005b74 <update_ScurveTraj+0x5c4>)
 80058ee:	edc3 7a00 	vstr	s15, [r3]
}


Tv = (qf-qi)/vmax - Ta/2*(1+vi/vmax)-Td/2*(1+vf/vmax);
 80058f2:	4ba1      	ldr	r3, [pc, #644]	; (8005b78 <update_ScurveTraj+0x5c8>)
 80058f4:	ed93 7a00 	vldr	s14, [r3]
 80058f8:	4ba0      	ldr	r3, [pc, #640]	; (8005b7c <update_ScurveTraj+0x5cc>)
 80058fa:	edd3 7a00 	vldr	s15, [r3]
 80058fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005902:	edd7 7a03 	vldr	s15, [r7, #12]
 8005906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590a:	4b9d      	ldr	r3, [pc, #628]	; (8005b80 <update_ScurveTraj+0x5d0>)
 800590c:	edd3 7a00 	vldr	s15, [r3]
 8005910:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005914:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005918:	edd7 5a05 	vldr	s11, [r7, #20]
 800591c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005920:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8005924:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005928:	ee77 7a86 	vadd.f32	s15, s15, s12
 800592c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005934:	4b8f      	ldr	r3, [pc, #572]	; (8005b74 <update_ScurveTraj+0x5c4>)
 8005936:	edd3 7a00 	vldr	s15, [r3]
 800593a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800593e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005942:	edd7 5a04 	vldr	s11, [r7, #16]
 8005946:	ed97 6a03 	vldr	s12, [r7, #12]
 800594a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800594e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005952:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800595e:	4b89      	ldr	r3, [pc, #548]	; (8005b84 <update_ScurveTraj+0x5d4>)
 8005960:	edc3 7a00 	vstr	s15, [r3]

if (Tv>0){
 8005964:	4b87      	ldr	r3, [pc, #540]	; (8005b84 <update_ScurveTraj+0x5d4>)
 8005966:	edd3 7a00 	vldr	s15, [r3]
 800596a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800596e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005972:	f300 8347 	bgt.w	8006004 <update_ScurveTraj+0xa54>
    //printf("the max velocity is reached\n");
}
else{
    //printf("CASE 2\n");
    //printf("In this case vmax is NOT reached, so Tv=0\n");
    Tj1=amax/jmax;
 8005976:	edd7 6a02 	vldr	s13, [r7, #8]
 800597a:	ed97 7a01 	vldr	s14, [r7, #4]
 800597e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005982:	4b81      	ldr	r3, [pc, #516]	; (8005b88 <update_ScurveTraj+0x5d8>)
 8005984:	edc3 7a00 	vstr	s15, [r3]
    Tj2=Tj1;
 8005988:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <update_ScurveTraj+0x5d8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a78      	ldr	r2, [pc, #480]	; (8005b70 <update_ScurveTraj+0x5c0>)
 800598e:	6013      	str	r3, [r2, #0]
    Tj=Tj1;
 8005990:	4b7d      	ldr	r3, [pc, #500]	; (8005b88 <update_ScurveTraj+0x5d8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7d      	ldr	r2, [pc, #500]	; (8005b8c <update_ScurveTraj+0x5dc>)
 8005996:	6013      	str	r3, [r2, #0]
    delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005998:	edd7 7a02 	vldr	s15, [r7, #8]
 800599c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059a0:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80059a4:	eeb0 0b47 	vmov.f64	d0, d7
 80059a8:	f00b fdfa 	bl	80115a0 <pow>
 80059ac:	eeb0 9b40 	vmov.f64	d9, d0
 80059b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80059b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059bc:	eeb0 0b47 	vmov.f64	d0, d7
 80059c0:	f00b fdee 	bl	80115a0 <pow>
 80059c4:	eeb0 7b40 	vmov.f64	d7, d0
 80059c8:	ee89 8b07 	vdiv.f64	d8, d9, d7
 80059cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80059d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059d8:	eeb0 0b47 	vmov.f64	d0, d7
 80059dc:	f00b fde0 	bl	80115a0 <pow>
 80059e0:	eeb0 9b40 	vmov.f64	d9, d0
 80059e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80059e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80059ec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059f0:	eeb0 0b47 	vmov.f64	d0, d7
 80059f4:	f00b fdd4 	bl	80115a0 <pow>
 80059f8:	eeb0 7b40 	vmov.f64	d7, d0
 80059fc:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005a00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a04:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005a08:	4b5b      	ldr	r3, [pc, #364]	; (8005b78 <update_ScurveTraj+0x5c8>)
 8005a0a:	ed93 7a00 	vldr	s14, [r3]
 8005a0e:	4b5b      	ldr	r3, [pc, #364]	; (8005b7c <update_ScurveTraj+0x5cc>)
 8005a10:	edd3 7a00 	vldr	s15, [r3]
 8005a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a18:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005a1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a20:	ed97 5a02 	vldr	s10, [r7, #8]
 8005a24:	edd7 5a01 	vldr	s11, [r7, #4]
 8005a28:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8005a2c:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8005a30:	ed97 5a05 	vldr	s10, [r7, #20]
 8005a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a38:	ee75 7a27 	vadd.f32	s15, s10, s15
 8005a3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a44:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a50:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005a58:	4b4d      	ldr	r3, [pc, #308]	; (8005b90 <update_ScurveTraj+0x5e0>)
 8005a5a:	edc3 7a00 	vstr	s15, [r3]
    Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005a5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a6a:	eeb0 0b47 	vmov.f64	d0, d7
 8005a6e:	f00b fd97 	bl	80115a0 <pow>
 8005a72:	eeb0 5b40 	vmov.f64	d5, d0
 8005a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a7e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a8e:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005a92:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <update_ScurveTraj+0x5e0>)
 8005a94:	edd3 7a00 	vldr	s15, [r3]
 8005a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005a9c:	eeb0 0b47 	vmov.f64	d0, d7
 8005aa0:	f00b fffe 	bl	8011aa0 <sqrt>
 8005aa4:	eeb0 7b40 	vmov.f64	d7, d0
 8005aa8:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005aac:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ab0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ab4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005ab8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ac0:	4b2f      	ldr	r3, [pc, #188]	; (8005b80 <update_ScurveTraj+0x5d0>)
 8005ac2:	edc3 7a00 	vstr	s15, [r3]
    Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ace:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ad2:	eeb0 0b47 	vmov.f64	d0, d7
 8005ad6:	f00b fd63 	bl	80115a0 <pow>
 8005ada:	eeb0 5b40 	vmov.f64	d5, d0
 8005ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ae6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005aea:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005af2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005af6:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005afa:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <update_ScurveTraj+0x5e0>)
 8005afc:	edd3 7a00 	vldr	s15, [r3]
 8005b00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b04:	eeb0 0b47 	vmov.f64	d0, d7
 8005b08:	f00b ffca 	bl	8011aa0 <sqrt>
 8005b0c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b10:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b1c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005b20:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005b28:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <update_ScurveTraj+0x5c4>)
 8005b2a:	edc3 7a00 	vstr	s15, [r3]
    Tv=0;
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <update_ScurveTraj+0x5d4>)
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]


    if (Ta<2*Tj || Td<2*Tj){
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <update_ScurveTraj+0x5dc>)
 8005b38:	edd3 7a00 	vldr	s15, [r3]
 8005b3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005b40:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <update_ScurveTraj+0x5d0>)
 8005b42:	edd3 7a00 	vldr	s15, [r3]
 8005b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4e:	f300 822c 	bgt.w	8005faa <update_ScurveTraj+0x9fa>
 8005b52:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <update_ScurveTraj+0x5dc>)
 8005b54:	edd3 7a00 	vldr	s15, [r3]
 8005b58:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <update_ScurveTraj+0x5c4>)
 8005b5e:	edd3 7a00 	vldr	s15, [r3]
 8005b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6a:	f300 821e 	bgt.w	8005faa <update_ScurveTraj+0x9fa>
        }
    }

}

}
 8005b6e:	e249      	b.n	8006004 <update_ScurveTraj+0xa54>
 8005b70:	24000a80 	.word	0x24000a80
 8005b74:	24000a74 	.word	0x24000a74
 8005b78:	24000a90 	.word	0x24000a90
 8005b7c:	24000a8c 	.word	0x24000a8c
 8005b80:	24000a70 	.word	0x24000a70
 8005b84:	24000a78 	.word	0x24000a78
 8005b88:	24000a7c 	.word	0x24000a7c
 8005b8c:	24000a84 	.word	0x24000a84
 8005b90:	24000a88 	.word	0x24000a88
            amax=amax*0.99;
 8005b94:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b9c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8005e80 <update_ScurveTraj+0x8d0>
 8005ba0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ba4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ba8:	edc7 7a02 	vstr	s15, [r7, #8]
            Tj=amax/jmax;
 8005bac:	edd7 6a02 	vldr	s13, [r7, #8]
 8005bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb8:	4bb3      	ldr	r3, [pc, #716]	; (8005e88 <update_ScurveTraj+0x8d8>)
 8005bba:	edc3 7a00 	vstr	s15, [r3]
            delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bc6:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005bca:	eeb0 0b47 	vmov.f64	d0, d7
 8005bce:	f00b fce7 	bl	80115a0 <pow>
 8005bd2:	eeb0 9b40 	vmov.f64	d9, d0
 8005bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bde:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005be2:	eeb0 0b47 	vmov.f64	d0, d7
 8005be6:	f00b fcdb 	bl	80115a0 <pow>
 8005bea:	eeb0 7b40 	vmov.f64	d7, d0
 8005bee:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005bf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bfa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bfe:	eeb0 0b47 	vmov.f64	d0, d7
 8005c02:	f00b fccd 	bl	80115a0 <pow>
 8005c06:	eeb0 9b40 	vmov.f64	d9, d0
 8005c0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c12:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c16:	eeb0 0b47 	vmov.f64	d0, d7
 8005c1a:	f00b fcc1 	bl	80115a0 <pow>
 8005c1e:	eeb0 7b40 	vmov.f64	d7, d0
 8005c22:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005c26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c2a:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005c2e:	4b97      	ldr	r3, [pc, #604]	; (8005e8c <update_ScurveTraj+0x8dc>)
 8005c30:	ed93 7a00 	vldr	s14, [r3]
 8005c34:	4b96      	ldr	r3, [pc, #600]	; (8005e90 <update_ScurveTraj+0x8e0>)
 8005c36:	edd3 7a00 	vldr	s15, [r3]
 8005c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c3e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005c42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c46:	ed97 5a02 	vldr	s10, [r7, #8]
 8005c4a:	edd7 5a01 	vldr	s11, [r7, #4]
 8005c4e:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8005c52:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8005c56:	ed97 5a05 	vldr	s10, [r7, #20]
 8005c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c5e:	ee75 7a27 	vadd.f32	s15, s10, s15
 8005c62:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005c7e:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <update_ScurveTraj+0x8e4>)
 8005c80:	edc3 7a00 	vstr	s15, [r3]
            Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c8c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c90:	eeb0 0b47 	vmov.f64	d0, d7
 8005c94:	f00b fc84 	bl	80115a0 <pow>
 8005c98:	eeb0 5b40 	vmov.f64	d5, d0
 8005c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005ca4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005ca8:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cb4:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005cb8:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <update_ScurveTraj+0x8e4>)
 8005cba:	edd3 7a00 	vldr	s15, [r3]
 8005cbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cc2:	eeb0 0b47 	vmov.f64	d0, d7
 8005cc6:	f00b feeb 	bl	8011aa0 <sqrt>
 8005cca:	eeb0 7b40 	vmov.f64	d7, d0
 8005cce:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005cd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005cda:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005cde:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <update_ScurveTraj+0x8e8>)
 8005ce8:	edc3 7a00 	vstr	s15, [r3]
            Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005cec:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cf4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cfc:	f00b fc50 	bl	80115a0 <pow>
 8005d00:	eeb0 5b40 	vmov.f64	d5, d0
 8005d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d0c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d1c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005d20:	4b5c      	ldr	r3, [pc, #368]	; (8005e94 <update_ScurveTraj+0x8e4>)
 8005d22:	edd3 7a00 	vldr	s15, [r3]
 8005d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d2a:	eeb0 0b47 	vmov.f64	d0, d7
 8005d2e:	f00b feb7 	bl	8011aa0 <sqrt>
 8005d32:	eeb0 7b40 	vmov.f64	d7, d0
 8005d36:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005d3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d42:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005d46:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005d4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005d4e:	4b53      	ldr	r3, [pc, #332]	; (8005e9c <update_ScurveTraj+0x8ec>)
 8005d50:	edc3 7a00 	vstr	s15, [r3]
            if (Ta<0){
 8005d54:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <update_ScurveTraj+0x8e8>)
 8005d56:	edd3 7a00 	vldr	s15, [r3]
 8005d5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d62:	f140 8081 	bpl.w	8005e68 <update_ScurveTraj+0x8b8>
                Ta=0;
 8005d66:	4b4c      	ldr	r3, [pc, #304]	; (8005e98 <update_ScurveTraj+0x8e8>)
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
                Tj1=0;
 8005d6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ea0 <update_ScurveTraj+0x8f0>)
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
                Td=2*((qf-qi)/(vf+vi));
 8005d76:	4b45      	ldr	r3, [pc, #276]	; (8005e8c <update_ScurveTraj+0x8dc>)
 8005d78:	ed93 7a00 	vldr	s14, [r3]
 8005d7c:	4b44      	ldr	r3, [pc, #272]	; (8005e90 <update_ScurveTraj+0x8e0>)
 8005d7e:	edd3 7a00 	vldr	s15, [r3]
 8005d82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005d86:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d9a:	4b40      	ldr	r3, [pc, #256]	; (8005e9c <update_ScurveTraj+0x8ec>)
 8005d9c:	edc3 7a00 	vstr	s15, [r3]
                Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005da0:	4b3a      	ldr	r3, [pc, #232]	; (8005e8c <update_ScurveTraj+0x8dc>)
 8005da2:	ed93 7a00 	vldr	s14, [r3]
 8005da6:	4b3a      	ldr	r3, [pc, #232]	; (8005e90 <update_ScurveTraj+0x8e0>)
 8005da8:	edd3 7a00 	vldr	s15, [r3]
 8005dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005db0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dc0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dc8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8005dcc:	4b2f      	ldr	r3, [pc, #188]	; (8005e8c <update_ScurveTraj+0x8dc>)
 8005dce:	ed93 7a00 	vldr	s14, [r3]
 8005dd2:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <update_ScurveTraj+0x8e0>)
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005de0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005de4:	eeb0 0b47 	vmov.f64	d0, d7
 8005de8:	f00b fbda 	bl	80115a0 <pow>
 8005dec:	eeb0 7b40 	vmov.f64	d7, d0
 8005df0:	ee2a ab07 	vmul.f64	d10, d10, d7
 8005df4:	ed97 7a04 	vldr	s14, [r7, #16]
 8005df8:	edd7 7a05 	vldr	s15, [r7, #20]
 8005dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e04:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005e08:	eeb0 0b47 	vmov.f64	d0, d7
 8005e0c:	f00b fbc8 	bl	80115a0 <pow>
 8005e10:	eeb0 6b40 	vmov.f64	d6, d0
 8005e14:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e18:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005e24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005e28:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8005e2c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005e30:	eeb0 0b47 	vmov.f64	d0, d7
 8005e34:	f00b fe34 	bl	8011aa0 <sqrt>
 8005e38:	eeb0 7b40 	vmov.f64	d7, d0
 8005e3c:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005e40:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e44:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005e58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005e5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005e60:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <update_ScurveTraj+0x8f4>)
 8005e62:	edc3 7a00 	vstr	s15, [r3]
                break;
 8005e66:	e0cd      	b.n	8006004 <update_ScurveTraj+0xa54>
            if (Td<0){
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <update_ScurveTraj+0x8ec>)
 8005e6a:	edd3 7a00 	vldr	s15, [r3]
 8005e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e76:	d417      	bmi.n	8005ea8 <update_ScurveTraj+0x8f8>
 8005e78:	e097      	b.n	8005faa <update_ScurveTraj+0x9fa>
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w
 8005e80:	7ae147ae 	.word	0x7ae147ae
 8005e84:	3fefae14 	.word	0x3fefae14
 8005e88:	24000a84 	.word	0x24000a84
 8005e8c:	24000a90 	.word	0x24000a90
 8005e90:	24000a8c 	.word	0x24000a8c
 8005e94:	24000a88 	.word	0x24000a88
 8005e98:	24000a70 	.word	0x24000a70
 8005e9c:	24000a74 	.word	0x24000a74
 8005ea0:	24000a7c 	.word	0x24000a7c
 8005ea4:	24000a80 	.word	0x24000a80
                Td=0;
 8005ea8:	4b59      	ldr	r3, [pc, #356]	; (8006010 <update_ScurveTraj+0xa60>)
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
                Ta=2*((qf-qi)/(vf+vi));
 8005eb0:	4b58      	ldr	r3, [pc, #352]	; (8006014 <update_ScurveTraj+0xa64>)
 8005eb2:	ed93 7a00 	vldr	s14, [r3]
 8005eb6:	4b58      	ldr	r3, [pc, #352]	; (8006018 <update_ScurveTraj+0xa68>)
 8005eb8:	edd3 7a00 	vldr	s15, [r3]
 8005ebc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005ec0:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ec4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ed4:	4b51      	ldr	r3, [pc, #324]	; (800601c <update_ScurveTraj+0xa6c>)
 8005ed6:	edc3 7a00 	vstr	s15, [r3]
                Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005eda:	4b4e      	ldr	r3, [pc, #312]	; (8006014 <update_ScurveTraj+0xa64>)
 8005edc:	ed93 7a00 	vldr	s14, [r3]
 8005ee0:	4b4d      	ldr	r3, [pc, #308]	; (8006018 <update_ScurveTraj+0xa68>)
 8005ee2:	edd3 7a00 	vldr	s15, [r3]
 8005ee6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eea:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005efa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8005efe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f02:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8005f06:	4b43      	ldr	r3, [pc, #268]	; (8006014 <update_ScurveTraj+0xa64>)
 8005f08:	ed93 7a00 	vldr	s14, [r3]
 8005f0c:	4b42      	ldr	r3, [pc, #264]	; (8006018 <update_ScurveTraj+0xa68>)
 8005f0e:	edd3 7a00 	vldr	s15, [r3]
 8005f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f1a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f1e:	eeb0 0b47 	vmov.f64	d0, d7
 8005f22:	f00b fb3d 	bl	80115a0 <pow>
 8005f26:	eeb0 7b40 	vmov.f64	d7, d0
 8005f2a:	ee2a ab07 	vmul.f64	d10, d10, d7
 8005f2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005f42:	eeb0 0b47 	vmov.f64	d0, d7
 8005f46:	f00b fb2b 	bl	80115a0 <pow>
 8005f4a:	eeb0 6b40 	vmov.f64	d6, d0
 8005f4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f52:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005f5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f62:	ee3a 7b47 	vsub.f64	d7, d10, d7
 8005f66:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005f6a:	eeb0 0b47 	vmov.f64	d0, d7
 8005f6e:	f00b fd97 	bl	8011aa0 <sqrt>
 8005f72:	eeb0 7b40 	vmov.f64	d7, d0
 8005f76:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005f7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005f92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005f96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <update_ScurveTraj+0xa70>)
 8005f9c:	edc3 7a00 	vstr	s15, [r3]
                Tj2=0;
 8005fa0:	4b20      	ldr	r3, [pc, #128]	; (8006024 <update_ScurveTraj+0xa74>)
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
                break;
 8005fa8:	e02c      	b.n	8006004 <update_ScurveTraj+0xa54>
        while (!(Ta>2*Tj && Td>2*Tj)){
 8005faa:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <update_ScurveTraj+0xa78>)
 8005fac:	edd3 7a00 	vldr	s15, [r3]
 8005fb0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005fb4:	4b19      	ldr	r3, [pc, #100]	; (800601c <update_ScurveTraj+0xa6c>)
 8005fb6:	edd3 7a00 	vldr	s15, [r3]
 8005fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc2:	bf4c      	ite	mi
 8005fc4:	2301      	movmi	r3, #1
 8005fc6:	2300      	movpl	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f083 0301 	eor.w	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f47f addf 	bne.w	8005b94 <update_ScurveTraj+0x5e4>
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <update_ScurveTraj+0xa78>)
 8005fd8:	edd3 7a00 	vldr	s15, [r3]
 8005fdc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <update_ScurveTraj+0xa60>)
 8005fe2:	edd3 7a00 	vldr	s15, [r3]
 8005fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fee:	bf4c      	ite	mi
 8005ff0:	2301      	movmi	r3, #1
 8005ff2:	2300      	movpl	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f083 0301 	eor.w	r3, r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f47f adc9 	bne.w	8005b94 <update_ScurveTraj+0x5e4>
}
 8006002:	e7ff      	b.n	8006004 <update_ScurveTraj+0xa54>
 8006004:	bf00      	nop
 8006006:	3728      	adds	r7, #40	; 0x28
 8006008:	46bd      	mov	sp, r7
 800600a:	ecbd 8b06 	vpop	{d8-d10}
 800600e:	bd80      	pop	{r7, pc}
 8006010:	24000a74 	.word	0x24000a74
 8006014:	24000a90 	.word	0x24000a90
 8006018:	24000a8c 	.word	0x24000a8c
 800601c:	24000a70 	.word	0x24000a70
 8006020:	24000a7c 	.word	0x24000a7c
 8006024:	24000a80 	.word	0x24000a80
 8006028:	24000a84 	.word	0x24000a84
 800602c:	00000000 	.word	0x00000000

08006030 <setProfilTimer>:


void setProfilTimer(void) {	// velAng en rpm
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		_rpm1 = motor1.omega * RADs_TO_RPM;
 8006034:	4b78      	ldr	r3, [pc, #480]	; (8006218 <setProfilTimer+0x1e8>)
 8006036:	ed93 7b04 	vldr	d7, [r3, #16]
 800603a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80061f8 <setProfilTimer+0x1c8>
 800603e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006042:	4b76      	ldr	r3, [pc, #472]	; (800621c <setProfilTimer+0x1ec>)
 8006044:	ed83 7b00 	vstr	d7, [r3]
		_rpm2 = motor2.omega * RADs_TO_RPM;
 8006048:	4b75      	ldr	r3, [pc, #468]	; (8006220 <setProfilTimer+0x1f0>)
 800604a:	ed93 7b04 	vldr	d7, [r3, #16]
 800604e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80061f8 <setProfilTimer+0x1c8>
 8006052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006056:	4b73      	ldr	r3, [pc, #460]	; (8006224 <setProfilTimer+0x1f4>)
 8006058:	ed83 7b00 	vstr	d7, [r3]
		_rpm3 = motor3.omega * RADs_TO_RPM;
 800605c:	4b72      	ldr	r3, [pc, #456]	; (8006228 <setProfilTimer+0x1f8>)
 800605e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006062:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80061f8 <setProfilTimer+0x1c8>
 8006066:	ee27 7b06 	vmul.f64	d7, d7, d6
 800606a:	4b70      	ldr	r3, [pc, #448]	; (800622c <setProfilTimer+0x1fc>)
 800606c:	ed83 7b00 	vstr	d7, [r3]
		if(rpm3<=0.1){
			rpm3=0.1;
		}
		*/

		rpm1 = 1;   //HARDCODE PARA HACER PRUEBAS A BAJA VELOCIDAD
 8006070:	496f      	ldr	r1, [pc, #444]	; (8006230 <setProfilTimer+0x200>)
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	4b6f      	ldr	r3, [pc, #444]	; (8006234 <setProfilTimer+0x204>)
 8006078:	e9c1 2300 	strd	r2, r3, [r1]
		rpm2 = 1 ;
 800607c:	496e      	ldr	r1, [pc, #440]	; (8006238 <setProfilTimer+0x208>)
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	4b6c      	ldr	r3, [pc, #432]	; (8006234 <setProfilTimer+0x204>)
 8006084:	e9c1 2300 	strd	r2, r3, [r1]
		rpm3 = 1;
 8006088:	496c      	ldr	r1, [pc, #432]	; (800623c <setProfilTimer+0x20c>)
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	4b69      	ldr	r3, [pc, #420]	; (8006234 <setProfilTimer+0x204>)
 8006090:	e9c1 2300 	strd	r2, r3, [r1]


		_peri1= COUNTERPERIOD(rpm1);
 8006094:	4b6a      	ldr	r3, [pc, #424]	; (8006240 <setProfilTimer+0x210>)
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80060a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80060a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80060a8:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8006200 <setProfilTimer+0x1d0>
 80060ac:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80060b0:	4b5f      	ldr	r3, [pc, #380]	; (8006230 <setProfilTimer+0x200>)
 80060b2:	ed93 7b00 	vldr	d7, [r3]
 80060b6:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8006208 <setProfilTimer+0x1d8>
 80060ba:	ee27 5b05 	vmul.f64	d5, d7, d5
 80060be:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8006210 <setProfilTimer+0x1e0>
 80060c2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80060c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80060ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80060ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80060d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060d6:	ee17 2a90 	vmov	r2, s15
 80060da:	4b5a      	ldr	r3, [pc, #360]	; (8006244 <setProfilTimer+0x214>)
 80060dc:	601a      	str	r2, [r3, #0]
		_peri2= COUNTERPERIOD(rpm2);
 80060de:	4b58      	ldr	r3, [pc, #352]	; (8006240 <setProfilTimer+0x210>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80060ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80060ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80060f2:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8006200 <setProfilTimer+0x1d0>
 80060f6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80060fa:	4b4f      	ldr	r3, [pc, #316]	; (8006238 <setProfilTimer+0x208>)
 80060fc:	ed93 7b00 	vldr	d7, [r3]
 8006100:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8006208 <setProfilTimer+0x1d8>
 8006104:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006108:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8006210 <setProfilTimer+0x1e0>
 800610c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8006110:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006114:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006118:	ee37 7b46 	vsub.f64	d7, d7, d6
 800611c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006120:	ee17 2a90 	vmov	r2, s15
 8006124:	4b48      	ldr	r3, [pc, #288]	; (8006248 <setProfilTimer+0x218>)
 8006126:	601a      	str	r2, [r3, #0]
		_peri3= COUNTERPERIOD(rpm3);
 8006128:	4b45      	ldr	r3, [pc, #276]	; (8006240 <setProfilTimer+0x210>)
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006134:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006138:	ee37 7b06 	vadd.f64	d7, d7, d6
 800613c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8006200 <setProfilTimer+0x1d0>
 8006140:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8006144:	4b3d      	ldr	r3, [pc, #244]	; (800623c <setProfilTimer+0x20c>)
 8006146:	ed93 7b00 	vldr	d7, [r3]
 800614a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8006208 <setProfilTimer+0x1d8>
 800614e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006152:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 8006210 <setProfilTimer+0x1e0>
 8006156:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800615a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800615e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006162:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006166:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800616a:	ee17 2a90 	vmov	r2, s15
 800616e:	4b37      	ldr	r3, [pc, #220]	; (800624c <setProfilTimer+0x21c>)
 8006170:	601a      	str	r2, [r3, #0]


		TIM12->ARR = _peri1;
 8006172:	4a33      	ldr	r2, [pc, #204]	; (8006240 <setProfilTimer+0x210>)
 8006174:	4b33      	ldr	r3, [pc, #204]	; (8006244 <setProfilTimer+0x214>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM13->ARR = _peri2;
 800617a:	4a35      	ldr	r2, [pc, #212]	; (8006250 <setProfilTimer+0x220>)
 800617c:	4b32      	ldr	r3, [pc, #200]	; (8006248 <setProfilTimer+0x218>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM14->ARR = _peri3;
 8006182:	4a34      	ldr	r2, [pc, #208]	; (8006254 <setProfilTimer+0x224>)
 8006184:	4b31      	ldr	r3, [pc, #196]	; (800624c <setProfilTimer+0x21c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	62d3      	str	r3, [r2, #44]	; 0x2c



		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 800618a:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <setProfilTimer+0x210>)
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006196:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800619a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800619e:	4b28      	ldr	r3, [pc, #160]	; (8006240 <setProfilTimer+0x210>)
 80061a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80061a4:	ee17 2a90 	vmov	r2, s15
 80061a8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80061aa:	4b29      	ldr	r3, [pc, #164]	; (8006250 <setProfilTimer+0x220>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80061b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80061ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80061be:	4b24      	ldr	r3, [pc, #144]	; (8006250 <setProfilTimer+0x220>)
 80061c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80061c4:	ee17 2a90 	vmov	r2, s15
 80061c8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80061ca:	4b22      	ldr	r3, [pc, #136]	; (8006254 <setProfilTimer+0x224>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80061d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80061da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80061de:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <setProfilTimer+0x224>)
 80061e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80061e4:	ee17 2a90 	vmov	r2, s15
 80061e8:	635a      	str	r2, [r3, #52]	; 0x34
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
			}
			*/


}
 80061ea:	bf00      	nop
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	f3af 8000 	nop.w
 80061f8:	66ed2a99 	.word	0x66ed2a99
 80061fc:	4023193d 	.word	0x4023193d
 8006200:	00000000 	.word	0x00000000
 8006204:	418e8480 	.word	0x418e8480
 8006208:	00000000 	.word	0x00000000
 800620c:	40bf4000 	.word	0x40bf4000
 8006210:	00000000 	.word	0x00000000
 8006214:	404e0000 	.word	0x404e0000
 8006218:	24000630 	.word	0x24000630
 800621c:	24000a98 	.word	0x24000a98
 8006220:	24000670 	.word	0x24000670
 8006224:	24000aa0 	.word	0x24000aa0
 8006228:	240006b0 	.word	0x240006b0
 800622c:	24000aa8 	.word	0x24000aa8
 8006230:	240006f0 	.word	0x240006f0
 8006234:	3ff00000 	.word	0x3ff00000
 8006238:	240006f8 	.word	0x240006f8
 800623c:	24000700 	.word	0x24000700
 8006240:	40001800 	.word	0x40001800
 8006244:	24000ab0 	.word	0x24000ab0
 8006248:	24000ab4 	.word	0x24000ab4
 800624c:	24000ab8 	.word	0x24000ab8
 8006250:	40001c00 	.word	0x40001c00
 8006254:	40002000 	.word	0x40002000

08006258 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800625c:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 800625e:	4a23      	ldr	r2, [pc, #140]	; (80062ec <MX_USART1_UART_Init+0x94>)
 8006260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006262:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 8006264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800626a:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 800626c:	2200      	movs	r2, #0
 800626e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006270:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 8006272:	2200      	movs	r2, #0
 8006274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006276:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 8006278:	2200      	movs	r2, #0
 800627a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 800627e:	220c      	movs	r2, #12
 8006280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 8006284:	2200      	movs	r2, #0
 8006286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006288:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 800628a:	2200      	movs	r2, #0
 800628c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800628e:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 8006290:	2200      	movs	r2, #0
 8006292:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 8006296:	2200      	movs	r2, #0
 8006298:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 800629c:	2200      	movs	r2, #0
 800629e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80062a0:	4811      	ldr	r0, [pc, #68]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 80062a2:	f005 ff53 	bl	800c14c <HAL_UART_Init>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80062ac:	f7fd fb48 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062b0:	2100      	movs	r1, #0
 80062b2:	480d      	ldr	r0, [pc, #52]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 80062b4:	f008 f9dd 	bl	800e672 <HAL_UARTEx_SetTxFifoThreshold>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80062be:	f7fd fb3f 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062c2:	2100      	movs	r1, #0
 80062c4:	4808      	ldr	r0, [pc, #32]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 80062c6:	f008 fa12 	bl	800e6ee <HAL_UARTEx_SetRxFifoThreshold>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80062d0:	f7fd fb36 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80062d4:	4804      	ldr	r0, [pc, #16]	; (80062e8 <MX_USART1_UART_Init+0x90>)
 80062d6:	f008 f993 	bl	800e600 <HAL_UARTEx_DisableFifoMode>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80062e0:	f7fd fb2e 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80062e4:	bf00      	nop
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	24000abc 	.word	0x24000abc
 80062ec:	40011000 	.word	0x40011000

080062f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062f4:	4b22      	ldr	r3, [pc, #136]	; (8006380 <MX_USART2_UART_Init+0x90>)
 80062f6:	4a23      	ldr	r2, [pc, #140]	; (8006384 <MX_USART2_UART_Init+0x94>)
 80062f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80062fa:	4b21      	ldr	r3, [pc, #132]	; (8006380 <MX_USART2_UART_Init+0x90>)
 80062fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006302:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <MX_USART2_UART_Init+0x90>)
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006308:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <MX_USART2_UART_Init+0x90>)
 800630a:	2200      	movs	r2, #0
 800630c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <MX_USART2_UART_Init+0x90>)
 8006310:	2200      	movs	r2, #0
 8006312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006314:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <MX_USART2_UART_Init+0x90>)
 8006316:	220c      	movs	r2, #12
 8006318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800631a:	4b19      	ldr	r3, [pc, #100]	; (8006380 <MX_USART2_UART_Init+0x90>)
 800631c:	2200      	movs	r2, #0
 800631e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006320:	4b17      	ldr	r3, [pc, #92]	; (8006380 <MX_USART2_UART_Init+0x90>)
 8006322:	2200      	movs	r2, #0
 8006324:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006326:	4b16      	ldr	r3, [pc, #88]	; (8006380 <MX_USART2_UART_Init+0x90>)
 8006328:	2200      	movs	r2, #0
 800632a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800632c:	4b14      	ldr	r3, [pc, #80]	; (8006380 <MX_USART2_UART_Init+0x90>)
 800632e:	2200      	movs	r2, #0
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006332:	4b13      	ldr	r3, [pc, #76]	; (8006380 <MX_USART2_UART_Init+0x90>)
 8006334:	2200      	movs	r2, #0
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006338:	4811      	ldr	r0, [pc, #68]	; (8006380 <MX_USART2_UART_Init+0x90>)
 800633a:	f005 ff07 	bl	800c14c <HAL_UART_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006344:	f7fd fafc 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006348:	2100      	movs	r1, #0
 800634a:	480d      	ldr	r0, [pc, #52]	; (8006380 <MX_USART2_UART_Init+0x90>)
 800634c:	f008 f991 	bl	800e672 <HAL_UARTEx_SetTxFifoThreshold>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006356:	f7fd faf3 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800635a:	2100      	movs	r1, #0
 800635c:	4808      	ldr	r0, [pc, #32]	; (8006380 <MX_USART2_UART_Init+0x90>)
 800635e:	f008 f9c6 	bl	800e6ee <HAL_UARTEx_SetRxFifoThreshold>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006368:	f7fd faea 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800636c:	4804      	ldr	r0, [pc, #16]	; (8006380 <MX_USART2_UART_Init+0x90>)
 800636e:	f008 f947 	bl	800e600 <HAL_UARTEx_DisableFifoMode>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006378:	f7fd fae2 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800637c:	bf00      	nop
 800637e:	bd80      	pop	{r7, pc}
 8006380:	24000b4c 	.word	0x24000b4c
 8006384:	40004400 	.word	0x40004400

08006388 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800638c:	4b22      	ldr	r3, [pc, #136]	; (8006418 <MX_USART3_UART_Init+0x90>)
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <MX_USART3_UART_Init+0x94>)
 8006390:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <MX_USART3_UART_Init+0x90>)
 8006394:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006398:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800639a:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <MX_USART3_UART_Init+0x90>)
 800639c:	2200      	movs	r2, #0
 800639e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80063a6:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80063ac:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063ae:	220c      	movs	r2, #12
 80063b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063b2:	4b19      	ldr	r3, [pc, #100]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80063b8:	4b17      	ldr	r3, [pc, #92]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063be:	4b16      	ldr	r3, [pc, #88]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063c4:	4b14      	ldr	r3, [pc, #80]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80063d0:	4811      	ldr	r0, [pc, #68]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063d2:	f005 febb 	bl	800c14c <HAL_UART_Init>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80063dc:	f7fd fab0 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063e0:	2100      	movs	r1, #0
 80063e2:	480d      	ldr	r0, [pc, #52]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063e4:	f008 f945 	bl	800e672 <HAL_UARTEx_SetTxFifoThreshold>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80063ee:	f7fd faa7 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063f2:	2100      	movs	r1, #0
 80063f4:	4808      	ldr	r0, [pc, #32]	; (8006418 <MX_USART3_UART_Init+0x90>)
 80063f6:	f008 f97a 	bl	800e6ee <HAL_UARTEx_SetRxFifoThreshold>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006400:	f7fd fa9e 	bl	8003940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006404:	4804      	ldr	r0, [pc, #16]	; (8006418 <MX_USART3_UART_Init+0x90>)
 8006406:	f008 f8fb 	bl	800e600 <HAL_UARTEx_DisableFifoMode>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006410:	f7fd fa96 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}
 8006418:	24000bdc 	.word	0x24000bdc
 800641c:	40004800 	.word	0x40004800

08006420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b0be      	sub	sp, #248	; 0xf8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006428:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800643c:	22bc      	movs	r2, #188	; 0xbc
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f008 fa0b 	bl	800e85c <memset>
  if(uartHandle->Instance==USART1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a84      	ldr	r2, [pc, #528]	; (800665c <HAL_UART_MspInit+0x23c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d168      	bne.n	8006522 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006450:	2301      	movs	r3, #1
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800645a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800645e:	4618      	mov	r0, r3
 8006460:	f002 fa8c 	bl	800897c <HAL_RCCEx_PeriphCLKConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800646a:	f7fd fa69 	bl	8003940 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800646e:	4b7c      	ldr	r3, [pc, #496]	; (8006660 <HAL_UART_MspInit+0x240>)
 8006470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006474:	4a7a      	ldr	r2, [pc, #488]	; (8006660 <HAL_UART_MspInit+0x240>)
 8006476:	f043 0310 	orr.w	r3, r3, #16
 800647a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800647e:	4b78      	ldr	r3, [pc, #480]	; (8006660 <HAL_UART_MspInit+0x240>)
 8006480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800648c:	4b74      	ldr	r3, [pc, #464]	; (8006660 <HAL_UART_MspInit+0x240>)
 800648e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006492:	4a73      	ldr	r2, [pc, #460]	; (8006660 <HAL_UART_MspInit+0x240>)
 8006494:	f043 0302 	orr.w	r3, r3, #2
 8006498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800649c:	4b70      	ldr	r3, [pc, #448]	; (8006660 <HAL_UART_MspInit+0x240>)
 800649e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	623b      	str	r3, [r7, #32]
 80064a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064aa:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <HAL_UART_MspInit+0x240>)
 80064ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064b0:	4a6b      	ldr	r2, [pc, #428]	; (8006660 <HAL_UART_MspInit+0x240>)
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064ba:	4b69      	ldr	r3, [pc, #420]	; (8006660 <HAL_UART_MspInit+0x240>)
 80064bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 80064c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d0:	2302      	movs	r3, #2
 80064d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80064e2:	2304      	movs	r3, #4
 80064e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 80064e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064ec:	4619      	mov	r1, r3
 80064ee:	485d      	ldr	r0, [pc, #372]	; (8006664 <HAL_UART_MspInit+0x244>)
 80064f0:	f001 f854 	bl	800759c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 80064f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fc:	2302      	movs	r3, #2
 80064fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800650e:	2307      	movs	r3, #7
 8006510:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006514:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006518:	4619      	mov	r1, r3
 800651a:	4853      	ldr	r0, [pc, #332]	; (8006668 <HAL_UART_MspInit+0x248>)
 800651c:	f001 f83e 	bl	800759c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006520:	e097      	b.n	8006652 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a51      	ldr	r2, [pc, #324]	; (800666c <HAL_UART_MspInit+0x24c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d142      	bne.n	80065b2 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800652c:	2302      	movs	r3, #2
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006530:	2300      	movs	r3, #0
 8006532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800653a:	4618      	mov	r0, r3
 800653c:	f002 fa1e 	bl	800897c <HAL_RCCEx_PeriphCLKConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006546:	f7fd f9fb 	bl	8003940 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800654a:	4b45      	ldr	r3, [pc, #276]	; (8006660 <HAL_UART_MspInit+0x240>)
 800654c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006550:	4a43      	ldr	r2, [pc, #268]	; (8006660 <HAL_UART_MspInit+0x240>)
 8006552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006556:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800655a:	4b41      	ldr	r3, [pc, #260]	; (8006660 <HAL_UART_MspInit+0x240>)
 800655c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006568:	4b3d      	ldr	r3, [pc, #244]	; (8006660 <HAL_UART_MspInit+0x240>)
 800656a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800656e:	4a3c      	ldr	r2, [pc, #240]	; (8006660 <HAL_UART_MspInit+0x240>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006578:	4b39      	ldr	r3, [pc, #228]	; (8006660 <HAL_UART_MspInit+0x240>)
 800657a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006586:	230c      	movs	r3, #12
 8006588:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800658c:	2302      	movs	r3, #2
 800658e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006592:	2300      	movs	r3, #0
 8006594:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006598:	2300      	movs	r3, #0
 800659a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800659e:	2307      	movs	r3, #7
 80065a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80065a8:	4619      	mov	r1, r3
 80065aa:	482f      	ldr	r0, [pc, #188]	; (8006668 <HAL_UART_MspInit+0x248>)
 80065ac:	f000 fff6 	bl	800759c <HAL_GPIO_Init>
}
 80065b0:	e04f      	b.n	8006652 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a2e      	ldr	r2, [pc, #184]	; (8006670 <HAL_UART_MspInit+0x250>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d14a      	bne.n	8006652 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80065bc:	2302      	movs	r3, #2
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065ca:	4618      	mov	r0, r3
 80065cc:	f002 f9d6 	bl	800897c <HAL_RCCEx_PeriphCLKConfig>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80065d6:	f7fd f9b3 	bl	8003940 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80065da:	4b21      	ldr	r3, [pc, #132]	; (8006660 <HAL_UART_MspInit+0x240>)
 80065dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065e0:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <HAL_UART_MspInit+0x240>)
 80065e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <HAL_UART_MspInit+0x240>)
 80065ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065f8:	4b19      	ldr	r3, [pc, #100]	; (8006660 <HAL_UART_MspInit+0x240>)
 80065fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065fe:	4a18      	ldr	r2, [pc, #96]	; (8006660 <HAL_UART_MspInit+0x240>)
 8006600:	f043 0308 	orr.w	r3, r3, #8
 8006604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006608:	4b15      	ldr	r3, [pc, #84]	; (8006660 <HAL_UART_MspInit+0x240>)
 800660a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800661a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661e:	2302      	movs	r3, #2
 8006620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006624:	2300      	movs	r3, #0
 8006626:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006630:	2307      	movs	r3, #7
 8006632:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006636:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800663a:	4619      	mov	r1, r3
 800663c:	480d      	ldr	r0, [pc, #52]	; (8006674 <HAL_UART_MspInit+0x254>)
 800663e:	f000 ffad 	bl	800759c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006642:	2201      	movs	r2, #1
 8006644:	2101      	movs	r1, #1
 8006646:	2027      	movs	r0, #39	; 0x27
 8006648:	f000 fa01 	bl	8006a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800664c:	2027      	movs	r0, #39	; 0x27
 800664e:	f000 fa18 	bl	8006a82 <HAL_NVIC_EnableIRQ>
}
 8006652:	bf00      	nop
 8006654:	37f8      	adds	r7, #248	; 0xf8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40011000 	.word	0x40011000
 8006660:	58024400 	.word	0x58024400
 8006664:	58020400 	.word	0x58020400
 8006668:	58020000 	.word	0x58020000
 800666c:	40004400 	.word	0x40004400
 8006670:	40004800 	.word	0x40004800
 8006674:	58020c00 	.word	0x58020c00

08006678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800667c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800667e:	e003      	b.n	8006688 <LoopCopyDataInit>

08006680 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006680:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006682:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006684:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006686:	3104      	adds	r1, #4

08006688 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006688:	480b      	ldr	r0, [pc, #44]	; (80066b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800668c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800668e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006690:	d3f6      	bcc.n	8006680 <CopyDataInit>
  ldr  r2, =_sbss
 8006692:	4a0b      	ldr	r2, [pc, #44]	; (80066c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006694:	e002      	b.n	800669c <LoopFillZerobss>

08006696 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006696:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006698:	f842 3b04 	str.w	r3, [r2], #4

0800669c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800669e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80066a0:	d3f9      	bcc.n	8006696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80066a2:	f7fd fbaf 	bl	8003e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066a6:	f008 f8b5 	bl	800e814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066aa:	f7fc fc31 	bl	8002f10 <main>
  bx  lr    
 80066ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80066b0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80066b4:	08013b70 	.word	0x08013b70
  ldr  r0, =_sdata
 80066b8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80066bc:	240002cc 	.word	0x240002cc
  ldr  r2, =_sbss
 80066c0:	240002d0 	.word	0x240002d0
  ldr  r3, = _ebss
 80066c4:	24000c80 	.word	0x24000c80

080066c8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066c8:	e7fe      	b.n	80066c8 <ADC3_IRQHandler>
	...

080066cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066d2:	2003      	movs	r0, #3
 80066d4:	f000 f9b0 	bl	8006a38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066d8:	f001 ff7a 	bl	80085d0 <HAL_RCC_GetSysClockFreq>
 80066dc:	4602      	mov	r2, r0
 80066de:	4b15      	ldr	r3, [pc, #84]	; (8006734 <HAL_Init+0x68>)
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	4913      	ldr	r1, [pc, #76]	; (8006738 <HAL_Init+0x6c>)
 80066ea:	5ccb      	ldrb	r3, [r1, r3]
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
 80066f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <HAL_Init+0x68>)
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	4a0e      	ldr	r2, [pc, #56]	; (8006738 <HAL_Init+0x6c>)
 8006700:	5cd3      	ldrb	r3, [r2, r3]
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
 800670c:	4a0b      	ldr	r2, [pc, #44]	; (800673c <HAL_Init+0x70>)
 800670e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006710:	4a0b      	ldr	r2, [pc, #44]	; (8006740 <HAL_Init+0x74>)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006716:	2000      	movs	r0, #0
 8006718:	f000 f814 	bl	8006744 <HAL_InitTick>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e002      	b.n	800672c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006726:	f7fd f9f3 	bl	8003b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	58024400 	.word	0x58024400
 8006738:	08011e40 	.word	0x08011e40
 800673c:	240000ec 	.word	0x240000ec
 8006740:	240000e8 	.word	0x240000e8

08006744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800674c:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <HAL_InitTick+0x60>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e021      	b.n	800679c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006758:	4b13      	ldr	r3, [pc, #76]	; (80067a8 <HAL_InitTick+0x64>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <HAL_InitTick+0x60>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	4619      	mov	r1, r3
 8006762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006766:	fbb3 f3f1 	udiv	r3, r3, r1
 800676a:	fbb2 f3f3 	udiv	r3, r2, r3
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f9a3 	bl	8006aba <HAL_SYSTICK_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e00e      	b.n	800679c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b0f      	cmp	r3, #15
 8006782:	d80a      	bhi.n	800679a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006784:	2200      	movs	r2, #0
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	f000 f95f 	bl	8006a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006790:	4a06      	ldr	r2, [pc, #24]	; (80067ac <HAL_InitTick+0x68>)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	e000      	b.n	800679c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	240000f4 	.word	0x240000f4
 80067a8:	240000e8 	.word	0x240000e8
 80067ac:	240000f0 	.word	0x240000f0

080067b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <HAL_IncTick+0x20>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_IncTick+0x24>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4413      	add	r3, r2
 80067c0:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <HAL_IncTick+0x24>)
 80067c2:	6013      	str	r3, [r2, #0]
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	240000f4 	.word	0x240000f4
 80067d4:	24000c6c 	.word	0x24000c6c

080067d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  return uwTick;
 80067dc:	4b03      	ldr	r3, [pc, #12]	; (80067ec <HAL_GetTick+0x14>)
 80067de:	681b      	ldr	r3, [r3, #0]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	24000c6c 	.word	0x24000c6c

080067f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067f8:	f7ff ffee 	bl	80067d8 <HAL_GetTick>
 80067fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d005      	beq.n	8006816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_Delay+0x44>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006816:	bf00      	nop
 8006818:	f7ff ffde 	bl	80067d8 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d8f7      	bhi.n	8006818 <HAL_Delay+0x28>
  {
  }
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	240000f4 	.word	0x240000f4

08006838 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_GetREVID+0x14>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	0c1b      	lsrs	r3, r3, #16
}
 8006842:	4618      	mov	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	5c001000 	.word	0x5c001000

08006850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <__NVIC_SetPriorityGrouping+0x40>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800686c:	4013      	ands	r3, r2
 800686e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006878:	4b06      	ldr	r3, [pc, #24]	; (8006894 <__NVIC_SetPriorityGrouping+0x44>)
 800687a:	4313      	orrs	r3, r2
 800687c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800687e:	4a04      	ldr	r2, [pc, #16]	; (8006890 <__NVIC_SetPriorityGrouping+0x40>)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	60d3      	str	r3, [r2, #12]
}
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	e000ed00 	.word	0xe000ed00
 8006894:	05fa0000 	.word	0x05fa0000

08006898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800689c:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <__NVIC_GetPriorityGrouping+0x18>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	0a1b      	lsrs	r3, r3, #8
 80068a2:	f003 0307 	and.w	r3, r3, #7
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	e000ed00 	.word	0xe000ed00

080068b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	db0b      	blt.n	80068de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	f003 021f 	and.w	r2, r3, #31
 80068cc:	4907      	ldr	r1, [pc, #28]	; (80068ec <__NVIC_EnableIRQ+0x38>)
 80068ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	2001      	movs	r0, #1
 80068d6:	fa00 f202 	lsl.w	r2, r0, r2
 80068da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	e000e100 	.word	0xe000e100

080068f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	db12      	blt.n	8006928 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	f003 021f 	and.w	r2, r3, #31
 8006908:	490a      	ldr	r1, [pc, #40]	; (8006934 <__NVIC_DisableIRQ+0x44>)
 800690a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	2001      	movs	r0, #1
 8006912:	fa00 f202 	lsl.w	r2, r0, r2
 8006916:	3320      	adds	r3, #32
 8006918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800691c:	f3bf 8f4f 	dsb	sy
}
 8006920:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006922:	f3bf 8f6f 	isb	sy
}
 8006926:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	e000e100 	.word	0xe000e100

08006938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006948:	2b00      	cmp	r3, #0
 800694a:	db0a      	blt.n	8006962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	490c      	ldr	r1, [pc, #48]	; (8006984 <__NVIC_SetPriority+0x4c>)
 8006952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006956:	0112      	lsls	r2, r2, #4
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	440b      	add	r3, r1
 800695c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006960:	e00a      	b.n	8006978 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	4908      	ldr	r1, [pc, #32]	; (8006988 <__NVIC_SetPriority+0x50>)
 8006968:	88fb      	ldrh	r3, [r7, #6]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	3b04      	subs	r3, #4
 8006970:	0112      	lsls	r2, r2, #4
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	440b      	add	r3, r1
 8006976:	761a      	strb	r2, [r3, #24]
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	e000e100 	.word	0xe000e100
 8006988:	e000ed00 	.word	0xe000ed00

0800698c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800698c:	b480      	push	{r7}
 800698e:	b089      	sub	sp, #36	; 0x24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f1c3 0307 	rsb	r3, r3, #7
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	bf28      	it	cs
 80069aa:	2304      	movcs	r3, #4
 80069ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3304      	adds	r3, #4
 80069b2:	2b06      	cmp	r3, #6
 80069b4:	d902      	bls.n	80069bc <NVIC_EncodePriority+0x30>
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3b03      	subs	r3, #3
 80069ba:	e000      	b.n	80069be <NVIC_EncodePriority+0x32>
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43da      	mvns	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	401a      	ands	r2, r3
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069d4:	f04f 31ff 	mov.w	r1, #4294967295
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	43d9      	mvns	r1, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e4:	4313      	orrs	r3, r2
         );
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3724      	adds	r7, #36	; 0x24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a04:	d301      	bcc.n	8006a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a06:	2301      	movs	r3, #1
 8006a08:	e00f      	b.n	8006a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <SysTick_Config+0x40>)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a12:	210f      	movs	r1, #15
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295
 8006a18:	f7ff ff8e 	bl	8006938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a1c:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <SysTick_Config+0x40>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a22:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <SysTick_Config+0x40>)
 8006a24:	2207      	movs	r2, #7
 8006a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	e000e010 	.word	0xe000e010

08006a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff ff05 	bl	8006850 <__NVIC_SetPriorityGrouping>
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	4603      	mov	r3, r0
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a5c:	f7ff ff1c 	bl	8006898 <__NVIC_GetPriorityGrouping>
 8006a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	6978      	ldr	r0, [r7, #20]
 8006a68:	f7ff ff90 	bl	800698c <NVIC_EncodePriority>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a72:	4611      	mov	r1, r2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff ff5f 	bl	8006938 <__NVIC_SetPriority>
}
 8006a7a:	bf00      	nop
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	4603      	mov	r3, r0
 8006a8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff ff0f 	bl	80068b4 <__NVIC_EnableIRQ>
}
 8006a96:	bf00      	nop
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff ff1f 	bl	80068f0 <__NVIC_DisableIRQ>
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff ff96 	bl	80069f4 <SysTick_Config>
 8006ac8:	4603      	mov	r3, r0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006adc:	f7ff fe7c 	bl	80067d8 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e2dc      	b.n	80070a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d008      	beq.n	8006b0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e2cd      	b.n	80070a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a76      	ldr	r2, [pc, #472]	; (8006ce8 <HAL_DMA_Abort+0x214>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d04a      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a74      	ldr	r2, [pc, #464]	; (8006cec <HAL_DMA_Abort+0x218>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d045      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a73      	ldr	r2, [pc, #460]	; (8006cf0 <HAL_DMA_Abort+0x21c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d040      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a71      	ldr	r2, [pc, #452]	; (8006cf4 <HAL_DMA_Abort+0x220>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d03b      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a70      	ldr	r2, [pc, #448]	; (8006cf8 <HAL_DMA_Abort+0x224>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d036      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6e      	ldr	r2, [pc, #440]	; (8006cfc <HAL_DMA_Abort+0x228>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d031      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6d      	ldr	r2, [pc, #436]	; (8006d00 <HAL_DMA_Abort+0x22c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d02c      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a6b      	ldr	r2, [pc, #428]	; (8006d04 <HAL_DMA_Abort+0x230>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d027      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6a      	ldr	r2, [pc, #424]	; (8006d08 <HAL_DMA_Abort+0x234>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d022      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a68      	ldr	r2, [pc, #416]	; (8006d0c <HAL_DMA_Abort+0x238>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d01d      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_DMA_Abort+0x23c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d018      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a65      	ldr	r2, [pc, #404]	; (8006d14 <HAL_DMA_Abort+0x240>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a64      	ldr	r2, [pc, #400]	; (8006d18 <HAL_DMA_Abort+0x244>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00e      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a62      	ldr	r2, [pc, #392]	; (8006d1c <HAL_DMA_Abort+0x248>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d009      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a61      	ldr	r2, [pc, #388]	; (8006d20 <HAL_DMA_Abort+0x24c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d004      	beq.n	8006baa <HAL_DMA_Abort+0xd6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a5f      	ldr	r2, [pc, #380]	; (8006d24 <HAL_DMA_Abort+0x250>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d101      	bne.n	8006bae <HAL_DMA_Abort+0xda>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <HAL_DMA_Abort+0xdc>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 021e 	bic.w	r2, r2, #30
 8006bc2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e00a      	b.n	8006bf2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 020e 	bic.w	r2, r2, #14
 8006bea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a3c      	ldr	r2, [pc, #240]	; (8006ce8 <HAL_DMA_Abort+0x214>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d072      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a3a      	ldr	r2, [pc, #232]	; (8006cec <HAL_DMA_Abort+0x218>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d06d      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a39      	ldr	r2, [pc, #228]	; (8006cf0 <HAL_DMA_Abort+0x21c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d068      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a37      	ldr	r2, [pc, #220]	; (8006cf4 <HAL_DMA_Abort+0x220>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d063      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a36      	ldr	r2, [pc, #216]	; (8006cf8 <HAL_DMA_Abort+0x224>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d05e      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a34      	ldr	r2, [pc, #208]	; (8006cfc <HAL_DMA_Abort+0x228>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d059      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a33      	ldr	r2, [pc, #204]	; (8006d00 <HAL_DMA_Abort+0x22c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d054      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a31      	ldr	r2, [pc, #196]	; (8006d04 <HAL_DMA_Abort+0x230>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d04f      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a30      	ldr	r2, [pc, #192]	; (8006d08 <HAL_DMA_Abort+0x234>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d04a      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a2e      	ldr	r2, [pc, #184]	; (8006d0c <HAL_DMA_Abort+0x238>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d045      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a2d      	ldr	r2, [pc, #180]	; (8006d10 <HAL_DMA_Abort+0x23c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d040      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <HAL_DMA_Abort+0x240>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d03b      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a2a      	ldr	r2, [pc, #168]	; (8006d18 <HAL_DMA_Abort+0x244>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d036      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <HAL_DMA_Abort+0x248>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d031      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a27      	ldr	r2, [pc, #156]	; (8006d20 <HAL_DMA_Abort+0x24c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d02c      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a25      	ldr	r2, [pc, #148]	; (8006d24 <HAL_DMA_Abort+0x250>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d027      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a24      	ldr	r2, [pc, #144]	; (8006d28 <HAL_DMA_Abort+0x254>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d022      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <HAL_DMA_Abort+0x258>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d01d      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a21      	ldr	r2, [pc, #132]	; (8006d30 <HAL_DMA_Abort+0x25c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d018      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <HAL_DMA_Abort+0x260>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <HAL_DMA_Abort+0x264>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00e      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <HAL_DMA_Abort+0x268>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d009      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <HAL_DMA_Abort+0x26c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d004      	beq.n	8006ce2 <HAL_DMA_Abort+0x20e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <HAL_DMA_Abort+0x270>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d132      	bne.n	8006d48 <HAL_DMA_Abort+0x274>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e031      	b.n	8006d4a <HAL_DMA_Abort+0x276>
 8006ce6:	bf00      	nop
 8006ce8:	40020010 	.word	0x40020010
 8006cec:	40020028 	.word	0x40020028
 8006cf0:	40020040 	.word	0x40020040
 8006cf4:	40020058 	.word	0x40020058
 8006cf8:	40020070 	.word	0x40020070
 8006cfc:	40020088 	.word	0x40020088
 8006d00:	400200a0 	.word	0x400200a0
 8006d04:	400200b8 	.word	0x400200b8
 8006d08:	40020410 	.word	0x40020410
 8006d0c:	40020428 	.word	0x40020428
 8006d10:	40020440 	.word	0x40020440
 8006d14:	40020458 	.word	0x40020458
 8006d18:	40020470 	.word	0x40020470
 8006d1c:	40020488 	.word	0x40020488
 8006d20:	400204a0 	.word	0x400204a0
 8006d24:	400204b8 	.word	0x400204b8
 8006d28:	58025408 	.word	0x58025408
 8006d2c:	5802541c 	.word	0x5802541c
 8006d30:	58025430 	.word	0x58025430
 8006d34:	58025444 	.word	0x58025444
 8006d38:	58025458 	.word	0x58025458
 8006d3c:	5802546c 	.word	0x5802546c
 8006d40:	58025480 	.word	0x58025480
 8006d44:	58025494 	.word	0x58025494
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a6d      	ldr	r2, [pc, #436]	; (8006f18 <HAL_DMA_Abort+0x444>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d04a      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a6b      	ldr	r2, [pc, #428]	; (8006f1c <HAL_DMA_Abort+0x448>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d045      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a6a      	ldr	r2, [pc, #424]	; (8006f20 <HAL_DMA_Abort+0x44c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d040      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a68      	ldr	r2, [pc, #416]	; (8006f24 <HAL_DMA_Abort+0x450>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d03b      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a67      	ldr	r2, [pc, #412]	; (8006f28 <HAL_DMA_Abort+0x454>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d036      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a65      	ldr	r2, [pc, #404]	; (8006f2c <HAL_DMA_Abort+0x458>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d031      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a64      	ldr	r2, [pc, #400]	; (8006f30 <HAL_DMA_Abort+0x45c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d02c      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a62      	ldr	r2, [pc, #392]	; (8006f34 <HAL_DMA_Abort+0x460>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a61      	ldr	r2, [pc, #388]	; (8006f38 <HAL_DMA_Abort+0x464>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d022      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a5f      	ldr	r2, [pc, #380]	; (8006f3c <HAL_DMA_Abort+0x468>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a5e      	ldr	r2, [pc, #376]	; (8006f40 <HAL_DMA_Abort+0x46c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a5c      	ldr	r2, [pc, #368]	; (8006f44 <HAL_DMA_Abort+0x470>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a5b      	ldr	r2, [pc, #364]	; (8006f48 <HAL_DMA_Abort+0x474>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a59      	ldr	r2, [pc, #356]	; (8006f4c <HAL_DMA_Abort+0x478>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a58      	ldr	r2, [pc, #352]	; (8006f50 <HAL_DMA_Abort+0x47c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_DMA_Abort+0x32a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a56      	ldr	r2, [pc, #344]	; (8006f54 <HAL_DMA_Abort+0x480>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <HAL_DMA_Abort+0x33c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e007      	b.n	8006e20 <HAL_DMA_Abort+0x34c>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e20:	e013      	b.n	8006e4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e22:	f7ff fcd9 	bl	80067d8 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b05      	cmp	r3, #5
 8006e2e:	d90c      	bls.n	8006e4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2203      	movs	r2, #3
 8006e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e12d      	b.n	80070a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2f      	ldr	r2, [pc, #188]	; (8006f18 <HAL_DMA_Abort+0x444>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d04a      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2d      	ldr	r2, [pc, #180]	; (8006f1c <HAL_DMA_Abort+0x448>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d045      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2c      	ldr	r2, [pc, #176]	; (8006f20 <HAL_DMA_Abort+0x44c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d040      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a2a      	ldr	r2, [pc, #168]	; (8006f24 <HAL_DMA_Abort+0x450>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d03b      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a29      	ldr	r2, [pc, #164]	; (8006f28 <HAL_DMA_Abort+0x454>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d036      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a27      	ldr	r2, [pc, #156]	; (8006f2c <HAL_DMA_Abort+0x458>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d031      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a26      	ldr	r2, [pc, #152]	; (8006f30 <HAL_DMA_Abort+0x45c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d02c      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <HAL_DMA_Abort+0x460>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d027      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a23      	ldr	r2, [pc, #140]	; (8006f38 <HAL_DMA_Abort+0x464>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d022      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <HAL_DMA_Abort+0x468>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01d      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a20      	ldr	r2, [pc, #128]	; (8006f40 <HAL_DMA_Abort+0x46c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d018      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1e      	ldr	r2, [pc, #120]	; (8006f44 <HAL_DMA_Abort+0x470>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_DMA_Abort+0x474>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_DMA_Abort+0x478>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <HAL_DMA_Abort+0x47c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d004      	beq.n	8006ef6 <HAL_DMA_Abort+0x422>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <HAL_DMA_Abort+0x480>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d101      	bne.n	8006efa <HAL_DMA_Abort+0x426>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <HAL_DMA_Abort+0x428>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d02b      	beq.n	8006f58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	223f      	movs	r2, #63	; 0x3f
 8006f10:	409a      	lsls	r2, r3
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	609a      	str	r2, [r3, #8]
 8006f16:	e02a      	b.n	8006f6e <HAL_DMA_Abort+0x49a>
 8006f18:	40020010 	.word	0x40020010
 8006f1c:	40020028 	.word	0x40020028
 8006f20:	40020040 	.word	0x40020040
 8006f24:	40020058 	.word	0x40020058
 8006f28:	40020070 	.word	0x40020070
 8006f2c:	40020088 	.word	0x40020088
 8006f30:	400200a0 	.word	0x400200a0
 8006f34:	400200b8 	.word	0x400200b8
 8006f38:	40020410 	.word	0x40020410
 8006f3c:	40020428 	.word	0x40020428
 8006f40:	40020440 	.word	0x40020440
 8006f44:	40020458 	.word	0x40020458
 8006f48:	40020470 	.word	0x40020470
 8006f4c:	40020488 	.word	0x40020488
 8006f50:	400204a0 	.word	0x400204a0
 8006f54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	2201      	movs	r2, #1
 8006f68:	409a      	lsls	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4f      	ldr	r2, [pc, #316]	; (80070b0 <HAL_DMA_Abort+0x5dc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d072      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a4d      	ldr	r2, [pc, #308]	; (80070b4 <HAL_DMA_Abort+0x5e0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d06d      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a4c      	ldr	r2, [pc, #304]	; (80070b8 <HAL_DMA_Abort+0x5e4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d068      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a4a      	ldr	r2, [pc, #296]	; (80070bc <HAL_DMA_Abort+0x5e8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d063      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a49      	ldr	r2, [pc, #292]	; (80070c0 <HAL_DMA_Abort+0x5ec>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d05e      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a47      	ldr	r2, [pc, #284]	; (80070c4 <HAL_DMA_Abort+0x5f0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d059      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a46      	ldr	r2, [pc, #280]	; (80070c8 <HAL_DMA_Abort+0x5f4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d054      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a44      	ldr	r2, [pc, #272]	; (80070cc <HAL_DMA_Abort+0x5f8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d04f      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a43      	ldr	r2, [pc, #268]	; (80070d0 <HAL_DMA_Abort+0x5fc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d04a      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a41      	ldr	r2, [pc, #260]	; (80070d4 <HAL_DMA_Abort+0x600>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d045      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a40      	ldr	r2, [pc, #256]	; (80070d8 <HAL_DMA_Abort+0x604>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d040      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a3e      	ldr	r2, [pc, #248]	; (80070dc <HAL_DMA_Abort+0x608>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d03b      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3d      	ldr	r2, [pc, #244]	; (80070e0 <HAL_DMA_Abort+0x60c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d036      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a3b      	ldr	r2, [pc, #236]	; (80070e4 <HAL_DMA_Abort+0x610>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d031      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a3a      	ldr	r2, [pc, #232]	; (80070e8 <HAL_DMA_Abort+0x614>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d02c      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a38      	ldr	r2, [pc, #224]	; (80070ec <HAL_DMA_Abort+0x618>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d027      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a37      	ldr	r2, [pc, #220]	; (80070f0 <HAL_DMA_Abort+0x61c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d022      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a35      	ldr	r2, [pc, #212]	; (80070f4 <HAL_DMA_Abort+0x620>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d01d      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a34      	ldr	r2, [pc, #208]	; (80070f8 <HAL_DMA_Abort+0x624>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d018      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a32      	ldr	r2, [pc, #200]	; (80070fc <HAL_DMA_Abort+0x628>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d013      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a31      	ldr	r2, [pc, #196]	; (8007100 <HAL_DMA_Abort+0x62c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00e      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2f      	ldr	r2, [pc, #188]	; (8007104 <HAL_DMA_Abort+0x630>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d009      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2e      	ldr	r2, [pc, #184]	; (8007108 <HAL_DMA_Abort+0x634>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d004      	beq.n	800705e <HAL_DMA_Abort+0x58a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2c      	ldr	r2, [pc, #176]	; (800710c <HAL_DMA_Abort+0x638>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <HAL_DMA_Abort+0x58e>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <HAL_DMA_Abort+0x590>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d015      	beq.n	8007094 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007070:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00c      	beq.n	8007094 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007088:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007092:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	40020010 	.word	0x40020010
 80070b4:	40020028 	.word	0x40020028
 80070b8:	40020040 	.word	0x40020040
 80070bc:	40020058 	.word	0x40020058
 80070c0:	40020070 	.word	0x40020070
 80070c4:	40020088 	.word	0x40020088
 80070c8:	400200a0 	.word	0x400200a0
 80070cc:	400200b8 	.word	0x400200b8
 80070d0:	40020410 	.word	0x40020410
 80070d4:	40020428 	.word	0x40020428
 80070d8:	40020440 	.word	0x40020440
 80070dc:	40020458 	.word	0x40020458
 80070e0:	40020470 	.word	0x40020470
 80070e4:	40020488 	.word	0x40020488
 80070e8:	400204a0 	.word	0x400204a0
 80070ec:	400204b8 	.word	0x400204b8
 80070f0:	58025408 	.word	0x58025408
 80070f4:	5802541c 	.word	0x5802541c
 80070f8:	58025430 	.word	0x58025430
 80070fc:	58025444 	.word	0x58025444
 8007100:	58025458 	.word	0x58025458
 8007104:	5802546c 	.word	0x5802546c
 8007108:	58025480 	.word	0x58025480
 800710c:	58025494 	.word	0x58025494

08007110 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e237      	b.n	8007592 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d004      	beq.n	8007138 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2280      	movs	r2, #128	; 0x80
 8007132:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e22c      	b.n	8007592 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5c      	ldr	r2, [pc, #368]	; (80072b0 <HAL_DMA_Abort_IT+0x1a0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d04a      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a5b      	ldr	r2, [pc, #364]	; (80072b4 <HAL_DMA_Abort_IT+0x1a4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d045      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a59      	ldr	r2, [pc, #356]	; (80072b8 <HAL_DMA_Abort_IT+0x1a8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d040      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a58      	ldr	r2, [pc, #352]	; (80072bc <HAL_DMA_Abort_IT+0x1ac>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d03b      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a56      	ldr	r2, [pc, #344]	; (80072c0 <HAL_DMA_Abort_IT+0x1b0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d036      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a55      	ldr	r2, [pc, #340]	; (80072c4 <HAL_DMA_Abort_IT+0x1b4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d031      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a53      	ldr	r2, [pc, #332]	; (80072c8 <HAL_DMA_Abort_IT+0x1b8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02c      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a52      	ldr	r2, [pc, #328]	; (80072cc <HAL_DMA_Abort_IT+0x1bc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d027      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a50      	ldr	r2, [pc, #320]	; (80072d0 <HAL_DMA_Abort_IT+0x1c0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d022      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a4f      	ldr	r2, [pc, #316]	; (80072d4 <HAL_DMA_Abort_IT+0x1c4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d01d      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a4d      	ldr	r2, [pc, #308]	; (80072d8 <HAL_DMA_Abort_IT+0x1c8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d018      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a4c      	ldr	r2, [pc, #304]	; (80072dc <HAL_DMA_Abort_IT+0x1cc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a4a      	ldr	r2, [pc, #296]	; (80072e0 <HAL_DMA_Abort_IT+0x1d0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00e      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a49      	ldr	r2, [pc, #292]	; (80072e4 <HAL_DMA_Abort_IT+0x1d4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d009      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a47      	ldr	r2, [pc, #284]	; (80072e8 <HAL_DMA_Abort_IT+0x1d8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_DMA_Abort_IT+0xc8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a46      	ldr	r2, [pc, #280]	; (80072ec <HAL_DMA_Abort_IT+0x1dc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d101      	bne.n	80071dc <HAL_DMA_Abort_IT+0xcc>
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <HAL_DMA_Abort_IT+0xce>
 80071dc:	2300      	movs	r3, #0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8086 	beq.w	80072f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2204      	movs	r2, #4
 80071e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <HAL_DMA_Abort_IT+0x1a0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d04a      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2e      	ldr	r2, [pc, #184]	; (80072b4 <HAL_DMA_Abort_IT+0x1a4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d045      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a2c      	ldr	r2, [pc, #176]	; (80072b8 <HAL_DMA_Abort_IT+0x1a8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d040      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2b      	ldr	r2, [pc, #172]	; (80072bc <HAL_DMA_Abort_IT+0x1ac>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d03b      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a29      	ldr	r2, [pc, #164]	; (80072c0 <HAL_DMA_Abort_IT+0x1b0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d036      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a28      	ldr	r2, [pc, #160]	; (80072c4 <HAL_DMA_Abort_IT+0x1b4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d031      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a26      	ldr	r2, [pc, #152]	; (80072c8 <HAL_DMA_Abort_IT+0x1b8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d02c      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a25      	ldr	r2, [pc, #148]	; (80072cc <HAL_DMA_Abort_IT+0x1bc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d027      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a23      	ldr	r2, [pc, #140]	; (80072d0 <HAL_DMA_Abort_IT+0x1c0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d022      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a22      	ldr	r2, [pc, #136]	; (80072d4 <HAL_DMA_Abort_IT+0x1c4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d01d      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <HAL_DMA_Abort_IT+0x1c8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d018      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1f      	ldr	r2, [pc, #124]	; (80072dc <HAL_DMA_Abort_IT+0x1cc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <HAL_DMA_Abort_IT+0x1d0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00e      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <HAL_DMA_Abort_IT+0x1d4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <HAL_DMA_Abort_IT+0x1d8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <HAL_DMA_Abort_IT+0x17c>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a19      	ldr	r2, [pc, #100]	; (80072ec <HAL_DMA_Abort_IT+0x1dc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d108      	bne.n	800729e <HAL_DMA_Abort_IT+0x18e>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e178      	b.n	8007590 <HAL_DMA_Abort_IT+0x480>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e16f      	b.n	8007590 <HAL_DMA_Abort_IT+0x480>
 80072b0:	40020010 	.word	0x40020010
 80072b4:	40020028 	.word	0x40020028
 80072b8:	40020040 	.word	0x40020040
 80072bc:	40020058 	.word	0x40020058
 80072c0:	40020070 	.word	0x40020070
 80072c4:	40020088 	.word	0x40020088
 80072c8:	400200a0 	.word	0x400200a0
 80072cc:	400200b8 	.word	0x400200b8
 80072d0:	40020410 	.word	0x40020410
 80072d4:	40020428 	.word	0x40020428
 80072d8:	40020440 	.word	0x40020440
 80072dc:	40020458 	.word	0x40020458
 80072e0:	40020470 	.word	0x40020470
 80072e4:	40020488 	.word	0x40020488
 80072e8:	400204a0 	.word	0x400204a0
 80072ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 020e 	bic.w	r2, r2, #14
 80072fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a6c      	ldr	r2, [pc, #432]	; (80074b8 <HAL_DMA_Abort_IT+0x3a8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04a      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a6b      	ldr	r2, [pc, #428]	; (80074bc <HAL_DMA_Abort_IT+0x3ac>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d045      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a69      	ldr	r2, [pc, #420]	; (80074c0 <HAL_DMA_Abort_IT+0x3b0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d040      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a68      	ldr	r2, [pc, #416]	; (80074c4 <HAL_DMA_Abort_IT+0x3b4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d03b      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a66      	ldr	r2, [pc, #408]	; (80074c8 <HAL_DMA_Abort_IT+0x3b8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d036      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a65      	ldr	r2, [pc, #404]	; (80074cc <HAL_DMA_Abort_IT+0x3bc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d031      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a63      	ldr	r2, [pc, #396]	; (80074d0 <HAL_DMA_Abort_IT+0x3c0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d02c      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a62      	ldr	r2, [pc, #392]	; (80074d4 <HAL_DMA_Abort_IT+0x3c4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d027      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a60      	ldr	r2, [pc, #384]	; (80074d8 <HAL_DMA_Abort_IT+0x3c8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d022      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a5f      	ldr	r2, [pc, #380]	; (80074dc <HAL_DMA_Abort_IT+0x3cc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d01d      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5d      	ldr	r2, [pc, #372]	; (80074e0 <HAL_DMA_Abort_IT+0x3d0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a5c      	ldr	r2, [pc, #368]	; (80074e4 <HAL_DMA_Abort_IT+0x3d4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a5a      	ldr	r2, [pc, #360]	; (80074e8 <HAL_DMA_Abort_IT+0x3d8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a59      	ldr	r2, [pc, #356]	; (80074ec <HAL_DMA_Abort_IT+0x3dc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a57      	ldr	r2, [pc, #348]	; (80074f0 <HAL_DMA_Abort_IT+0x3e0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_DMA_Abort_IT+0x290>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a56      	ldr	r2, [pc, #344]	; (80074f4 <HAL_DMA_Abort_IT+0x3e4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d108      	bne.n	80073b2 <HAL_DMA_Abort_IT+0x2a2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0201 	bic.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e007      	b.n	80073c2 <HAL_DMA_Abort_IT+0x2b2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <HAL_DMA_Abort_IT+0x3a8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d072      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a3a      	ldr	r2, [pc, #232]	; (80074bc <HAL_DMA_Abort_IT+0x3ac>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d06d      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a39      	ldr	r2, [pc, #228]	; (80074c0 <HAL_DMA_Abort_IT+0x3b0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d068      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a37      	ldr	r2, [pc, #220]	; (80074c4 <HAL_DMA_Abort_IT+0x3b4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d063      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a36      	ldr	r2, [pc, #216]	; (80074c8 <HAL_DMA_Abort_IT+0x3b8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d05e      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a34      	ldr	r2, [pc, #208]	; (80074cc <HAL_DMA_Abort_IT+0x3bc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d059      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a33      	ldr	r2, [pc, #204]	; (80074d0 <HAL_DMA_Abort_IT+0x3c0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d054      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a31      	ldr	r2, [pc, #196]	; (80074d4 <HAL_DMA_Abort_IT+0x3c4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d04f      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a30      	ldr	r2, [pc, #192]	; (80074d8 <HAL_DMA_Abort_IT+0x3c8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d04a      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a2e      	ldr	r2, [pc, #184]	; (80074dc <HAL_DMA_Abort_IT+0x3cc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d045      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2d      	ldr	r2, [pc, #180]	; (80074e0 <HAL_DMA_Abort_IT+0x3d0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d040      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2b      	ldr	r2, [pc, #172]	; (80074e4 <HAL_DMA_Abort_IT+0x3d4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d03b      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <HAL_DMA_Abort_IT+0x3d8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d036      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a28      	ldr	r2, [pc, #160]	; (80074ec <HAL_DMA_Abort_IT+0x3dc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d031      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a27      	ldr	r2, [pc, #156]	; (80074f0 <HAL_DMA_Abort_IT+0x3e0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d02c      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a25      	ldr	r2, [pc, #148]	; (80074f4 <HAL_DMA_Abort_IT+0x3e4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d027      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <HAL_DMA_Abort_IT+0x3e8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d022      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a22      	ldr	r2, [pc, #136]	; (80074fc <HAL_DMA_Abort_IT+0x3ec>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d01d      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a21      	ldr	r2, [pc, #132]	; (8007500 <HAL_DMA_Abort_IT+0x3f0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d018      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <HAL_DMA_Abort_IT+0x3f4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <HAL_DMA_Abort_IT+0x3f8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00e      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a1c      	ldr	r2, [pc, #112]	; (800750c <HAL_DMA_Abort_IT+0x3fc>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d009      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <HAL_DMA_Abort_IT+0x400>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <HAL_DMA_Abort_IT+0x3a2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a19      	ldr	r2, [pc, #100]	; (8007514 <HAL_DMA_Abort_IT+0x404>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d132      	bne.n	8007518 <HAL_DMA_Abort_IT+0x408>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e031      	b.n	800751a <HAL_DMA_Abort_IT+0x40a>
 80074b6:	bf00      	nop
 80074b8:	40020010 	.word	0x40020010
 80074bc:	40020028 	.word	0x40020028
 80074c0:	40020040 	.word	0x40020040
 80074c4:	40020058 	.word	0x40020058
 80074c8:	40020070 	.word	0x40020070
 80074cc:	40020088 	.word	0x40020088
 80074d0:	400200a0 	.word	0x400200a0
 80074d4:	400200b8 	.word	0x400200b8
 80074d8:	40020410 	.word	0x40020410
 80074dc:	40020428 	.word	0x40020428
 80074e0:	40020440 	.word	0x40020440
 80074e4:	40020458 	.word	0x40020458
 80074e8:	40020470 	.word	0x40020470
 80074ec:	40020488 	.word	0x40020488
 80074f0:	400204a0 	.word	0x400204a0
 80074f4:	400204b8 	.word	0x400204b8
 80074f8:	58025408 	.word	0x58025408
 80074fc:	5802541c 	.word	0x5802541c
 8007500:	58025430 	.word	0x58025430
 8007504:	58025444 	.word	0x58025444
 8007508:	58025458 	.word	0x58025458
 800750c:	5802546c 	.word	0x5802546c
 8007510:	58025480 	.word	0x58025480
 8007514:	58025494 	.word	0x58025494
 8007518:	2300      	movs	r3, #0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d028      	beq.n	8007570 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800752c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007532:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	2201      	movs	r2, #1
 800753e:	409a      	lsls	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800754c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00c      	beq.n	8007570 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007564:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800756e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop

0800759c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800759c:	b480      	push	{r7}
 800759e:	b089      	sub	sp, #36	; 0x24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80075aa:	4b89      	ldr	r3, [pc, #548]	; (80077d0 <HAL_GPIO_Init+0x234>)
 80075ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075ae:	e194      	b.n	80078da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	2101      	movs	r1, #1
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	fa01 f303 	lsl.w	r3, r1, r3
 80075bc:	4013      	ands	r3, r2
 80075be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8186 	beq.w	80078d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d005      	beq.n	80075e0 <HAL_GPIO_Init+0x44>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d130      	bne.n	8007642 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	2203      	movs	r2, #3
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	43db      	mvns	r3, r3
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	4013      	ands	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4313      	orrs	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007616:	2201      	movs	r2, #1
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	f003 0201 	and.w	r2, r3, #1
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	4313      	orrs	r3, r2
 800763a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b03      	cmp	r3, #3
 800764c:	d017      	beq.n	800767e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	2203      	movs	r2, #3
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	43db      	mvns	r3, r3
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	4013      	ands	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	4313      	orrs	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d123      	bne.n	80076d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	08da      	lsrs	r2, r3, #3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3208      	adds	r2, #8
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	220f      	movs	r2, #15
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	08da      	lsrs	r2, r3, #3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3208      	adds	r2, #8
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	2203      	movs	r2, #3
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f003 0203 	and.w	r2, r3, #3
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80e0 	beq.w	80078d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007714:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <HAL_GPIO_Init+0x238>)
 8007716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800771a:	4a2e      	ldr	r2, [pc, #184]	; (80077d4 <HAL_GPIO_Init+0x238>)
 800771c:	f043 0302 	orr.w	r3, r3, #2
 8007720:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007724:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <HAL_GPIO_Init+0x238>)
 8007726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007732:	4a29      	ldr	r2, [pc, #164]	; (80077d8 <HAL_GPIO_Init+0x23c>)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	089b      	lsrs	r3, r3, #2
 8007738:	3302      	adds	r3, #2
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	220f      	movs	r2, #15
 800774a:	fa02 f303 	lsl.w	r3, r2, r3
 800774e:	43db      	mvns	r3, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	4013      	ands	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a20      	ldr	r2, [pc, #128]	; (80077dc <HAL_GPIO_Init+0x240>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d052      	beq.n	8007804 <HAL_GPIO_Init+0x268>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <HAL_GPIO_Init+0x244>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d031      	beq.n	80077ca <HAL_GPIO_Init+0x22e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_GPIO_Init+0x248>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d02b      	beq.n	80077c6 <HAL_GPIO_Init+0x22a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1d      	ldr	r2, [pc, #116]	; (80077e8 <HAL_GPIO_Init+0x24c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d025      	beq.n	80077c2 <HAL_GPIO_Init+0x226>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <HAL_GPIO_Init+0x250>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <HAL_GPIO_Init+0x222>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <HAL_GPIO_Init+0x254>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d019      	beq.n	80077ba <HAL_GPIO_Init+0x21e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <HAL_GPIO_Init+0x258>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <HAL_GPIO_Init+0x21a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a19      	ldr	r2, [pc, #100]	; (80077f8 <HAL_GPIO_Init+0x25c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00d      	beq.n	80077b2 <HAL_GPIO_Init+0x216>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a18      	ldr	r2, [pc, #96]	; (80077fc <HAL_GPIO_Init+0x260>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <HAL_GPIO_Init+0x212>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a17      	ldr	r2, [pc, #92]	; (8007800 <HAL_GPIO_Init+0x264>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d101      	bne.n	80077aa <HAL_GPIO_Init+0x20e>
 80077a6:	2309      	movs	r3, #9
 80077a8:	e02d      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077aa:	230a      	movs	r3, #10
 80077ac:	e02b      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ae:	2308      	movs	r3, #8
 80077b0:	e029      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077b2:	2307      	movs	r3, #7
 80077b4:	e027      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077b6:	2306      	movs	r3, #6
 80077b8:	e025      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ba:	2305      	movs	r3, #5
 80077bc:	e023      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077be:	2304      	movs	r3, #4
 80077c0:	e021      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077c2:	2303      	movs	r3, #3
 80077c4:	e01f      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e01d      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e01b      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ce:	bf00      	nop
 80077d0:	58000080 	.word	0x58000080
 80077d4:	58024400 	.word	0x58024400
 80077d8:	58000400 	.word	0x58000400
 80077dc:	58020000 	.word	0x58020000
 80077e0:	58020400 	.word	0x58020400
 80077e4:	58020800 	.word	0x58020800
 80077e8:	58020c00 	.word	0x58020c00
 80077ec:	58021000 	.word	0x58021000
 80077f0:	58021400 	.word	0x58021400
 80077f4:	58021800 	.word	0x58021800
 80077f8:	58021c00 	.word	0x58021c00
 80077fc:	58022000 	.word	0x58022000
 8007800:	58022400 	.word	0x58022400
 8007804:	2300      	movs	r3, #0
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	f002 0203 	and.w	r2, r2, #3
 800780c:	0092      	lsls	r2, r2, #2
 800780e:	4093      	lsls	r3, r2
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	4313      	orrs	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007816:	4938      	ldr	r1, [pc, #224]	; (80078f8 <HAL_GPIO_Init+0x35c>)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	3302      	adds	r3, #2
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	43db      	mvns	r3, r3
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	4013      	ands	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800784a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	43db      	mvns	r3, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	4013      	ands	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	43db      	mvns	r3, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	4013      	ands	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	43db      	mvns	r3, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4013      	ands	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	3301      	adds	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f ae63 	bne.w	80075b0 <HAL_GPIO_Init+0x14>
  }
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	3724      	adds	r7, #36	; 0x24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	58000400 	.word	0x58000400

080078fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	887b      	ldrh	r3, [r7, #2]
 800790e:	4013      	ands	r3, r2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007914:	2301      	movs	r3, #1
 8007916:	73fb      	strb	r3, [r7, #15]
 8007918:	e001      	b.n	800791e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	807b      	strh	r3, [r7, #2]
 8007938:	4613      	mov	r3, r2
 800793a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800793c:	787b      	ldrb	r3, [r7, #1]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007942:	887a      	ldrh	r2, [r7, #2]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007948:	e003      	b.n	8007952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800794a:	887b      	ldrh	r3, [r7, #2]
 800794c:	041a      	lsls	r2, r3, #16
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	619a      	str	r2, [r3, #24]
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	4603      	mov	r3, r0
 8007966:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	4013      	ands	r3, r2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	4618      	mov	r0, r3
 8007986:	f7fb feb3 	bl	80036f0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800799c:	4b19      	ldr	r3, [pc, #100]	; (8007a04 <HAL_PWREx_ConfigSupply+0x70>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d00a      	beq.n	80079be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079a8:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <HAL_PWREx_ConfigSupply+0x70>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d001      	beq.n	80079ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e01f      	b.n	80079fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e01d      	b.n	80079fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <HAL_PWREx_ConfigSupply+0x70>)
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f023 0207 	bic.w	r2, r3, #7
 80079c6:	490f      	ldr	r1, [pc, #60]	; (8007a04 <HAL_PWREx_ConfigSupply+0x70>)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079ce:	f7fe ff03 	bl	80067d8 <HAL_GetTick>
 80079d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079d4:	e009      	b.n	80079ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079d6:	f7fe feff 	bl	80067d8 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e4:	d901      	bls.n	80079ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e007      	b.n	80079fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079ea:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <HAL_PWREx_ConfigSupply+0x70>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f6:	d1ee      	bne.n	80079d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	58024800 	.word	0x58024800

08007a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08c      	sub	sp, #48	; 0x30
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f000 bc1d 	b.w	8008256 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8087 	beq.w	8007b38 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a2a:	4b99      	ldr	r3, [pc, #612]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a34:	4b96      	ldr	r3, [pc, #600]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	2b10      	cmp	r3, #16
 8007a3e:	d007      	beq.n	8007a50 <HAL_RCC_OscConfig+0x48>
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	2b18      	cmp	r3, #24
 8007a44:	d110      	bne.n	8007a68 <HAL_RCC_OscConfig+0x60>
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d10b      	bne.n	8007a68 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a50:	4b8f      	ldr	r3, [pc, #572]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d06c      	beq.n	8007b36 <HAL_RCC_OscConfig+0x12e>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d168      	bne.n	8007b36 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e3f6      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d106      	bne.n	8007a80 <HAL_RCC_OscConfig+0x78>
 8007a72:	4b87      	ldr	r3, [pc, #540]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a86      	ldr	r2, [pc, #536]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	e02e      	b.n	8007ade <HAL_RCC_OscConfig+0xd6>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10c      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x9a>
 8007a88:	4b81      	ldr	r3, [pc, #516]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a80      	ldr	r2, [pc, #512]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	4b7e      	ldr	r3, [pc, #504]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a7d      	ldr	r2, [pc, #500]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	e01d      	b.n	8007ade <HAL_RCC_OscConfig+0xd6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_RCC_OscConfig+0xbe>
 8007aac:	4b78      	ldr	r3, [pc, #480]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a77      	ldr	r2, [pc, #476]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4b75      	ldr	r3, [pc, #468]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a74      	ldr	r2, [pc, #464]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	e00b      	b.n	8007ade <HAL_RCC_OscConfig+0xd6>
 8007ac6:	4b72      	ldr	r3, [pc, #456]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a71      	ldr	r2, [pc, #452]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	4b6f      	ldr	r3, [pc, #444]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a6e      	ldr	r2, [pc, #440]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007adc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d013      	beq.n	8007b0e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae6:	f7fe fe77 	bl	80067d8 <HAL_GetTick>
 8007aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007aec:	e008      	b.n	8007b00 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aee:	f7fe fe73 	bl	80067d8 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b64      	cmp	r3, #100	; 0x64
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e3aa      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b00:	4b63      	ldr	r3, [pc, #396]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0f0      	beq.n	8007aee <HAL_RCC_OscConfig+0xe6>
 8007b0c:	e014      	b.n	8007b38 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0e:	f7fe fe63 	bl	80067d8 <HAL_GetTick>
 8007b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b16:	f7fe fe5f 	bl	80067d8 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b64      	cmp	r3, #100	; 0x64
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e396      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b28:	4b59      	ldr	r3, [pc, #356]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <HAL_RCC_OscConfig+0x10e>
 8007b34:	e000      	b.n	8007b38 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80cb 	beq.w	8007cdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b46:	4b52      	ldr	r3, [pc, #328]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b4e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b50:	4b4f      	ldr	r3, [pc, #316]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <HAL_RCC_OscConfig+0x164>
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	2b18      	cmp	r3, #24
 8007b60:	d156      	bne.n	8007c10 <HAL_RCC_OscConfig+0x208>
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d151      	bne.n	8007c10 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b6c:	4b48      	ldr	r3, [pc, #288]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <HAL_RCC_OscConfig+0x17c>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e368      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b84:	4b42      	ldr	r3, [pc, #264]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f023 0219 	bic.w	r2, r3, #25
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	493f      	ldr	r1, [pc, #252]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b96:	f7fe fe1f 	bl	80067d8 <HAL_GetTick>
 8007b9a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b9c:	e008      	b.n	8007bb0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b9e:	f7fe fe1b 	bl	80067d8 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e352      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bb0:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f0      	beq.n	8007b9e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bbc:	f7fe fe3c 	bl	8006838 <HAL_GetREVID>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d817      	bhi.n	8007bfa <HAL_RCC_OscConfig+0x1f2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d108      	bne.n	8007be4 <HAL_RCC_OscConfig+0x1dc>
 8007bd2:	4b2f      	ldr	r3, [pc, #188]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bda:	4a2d      	ldr	r2, [pc, #180]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007be2:	e07b      	b.n	8007cdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be4:	4b2a      	ldr	r3, [pc, #168]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	4927      	ldr	r1, [pc, #156]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bf8:	e070      	b.n	8007cdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bfa:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	061b      	lsls	r3, r3, #24
 8007c08:	4921      	ldr	r1, [pc, #132]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c0e:	e065      	b.n	8007cdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d048      	beq.n	8007caa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c18:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f023 0219 	bic.w	r2, r3, #25
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	491a      	ldr	r1, [pc, #104]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2a:	f7fe fdd5 	bl	80067d8 <HAL_GetTick>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c30:	e008      	b.n	8007c44 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c32:	f7fe fdd1 	bl	80067d8 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d901      	bls.n	8007c44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e308      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c44:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0f0      	beq.n	8007c32 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c50:	f7fe fdf2 	bl	8006838 <HAL_GetREVID>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d81a      	bhi.n	8007c94 <HAL_RCC_OscConfig+0x28c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d108      	bne.n	8007c78 <HAL_RCC_OscConfig+0x270>
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c6e:	4a08      	ldr	r2, [pc, #32]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c74:	6053      	str	r3, [r2, #4]
 8007c76:	e031      	b.n	8007cdc <HAL_RCC_OscConfig+0x2d4>
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	031b      	lsls	r3, r3, #12
 8007c86:	4902      	ldr	r1, [pc, #8]	; (8007c90 <HAL_RCC_OscConfig+0x288>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	604b      	str	r3, [r1, #4]
 8007c8c:	e026      	b.n	8007cdc <HAL_RCC_OscConfig+0x2d4>
 8007c8e:	bf00      	nop
 8007c90:	58024400 	.word	0x58024400
 8007c94:	4b9a      	ldr	r3, [pc, #616]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	061b      	lsls	r3, r3, #24
 8007ca2:	4997      	ldr	r1, [pc, #604]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	604b      	str	r3, [r1, #4]
 8007ca8:	e018      	b.n	8007cdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007caa:	4b95      	ldr	r3, [pc, #596]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a94      	ldr	r2, [pc, #592]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb6:	f7fe fd8f 	bl	80067d8 <HAL_GetTick>
 8007cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cbc:	e008      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cbe:	f7fe fd8b 	bl	80067d8 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d901      	bls.n	8007cd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e2c2      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cd0:	4b8b      	ldr	r3, [pc, #556]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f0      	bne.n	8007cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 80a9 	beq.w	8007e3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cea:	4b85      	ldr	r3, [pc, #532]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cf4:	4b82      	ldr	r3, [pc, #520]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d007      	beq.n	8007d10 <HAL_RCC_OscConfig+0x308>
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b18      	cmp	r3, #24
 8007d04:	d13a      	bne.n	8007d7c <HAL_RCC_OscConfig+0x374>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d135      	bne.n	8007d7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d10:	4b7b      	ldr	r3, [pc, #492]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_RCC_OscConfig+0x320>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	2b80      	cmp	r3, #128	; 0x80
 8007d22:	d001      	beq.n	8007d28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e296      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d28:	f7fe fd86 	bl	8006838 <HAL_GetREVID>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d817      	bhi.n	8007d66 <HAL_RCC_OscConfig+0x35e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d108      	bne.n	8007d50 <HAL_RCC_OscConfig+0x348>
 8007d3e:	4b70      	ldr	r3, [pc, #448]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d46:	4a6e      	ldr	r2, [pc, #440]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d4c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d4e:	e075      	b.n	8007e3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d50:	4b6b      	ldr	r3, [pc, #428]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	069b      	lsls	r3, r3, #26
 8007d5e:	4968      	ldr	r1, [pc, #416]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d64:	e06a      	b.n	8007e3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d66:	4b66      	ldr	r3, [pc, #408]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	061b      	lsls	r3, r3, #24
 8007d74:	4962      	ldr	r1, [pc, #392]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d7a:	e05f      	b.n	8007e3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d042      	beq.n	8007e0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d84:	4b5e      	ldr	r3, [pc, #376]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a5d      	ldr	r2, [pc, #372]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d90:	f7fe fd22 	bl	80067d8 <HAL_GetTick>
 8007d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d98:	f7fe fd1e 	bl	80067d8 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e255      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007daa:	4b55      	ldr	r3, [pc, #340]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0f0      	beq.n	8007d98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007db6:	f7fe fd3f 	bl	8006838 <HAL_GetREVID>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d817      	bhi.n	8007df4 <HAL_RCC_OscConfig+0x3ec>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d108      	bne.n	8007dde <HAL_RCC_OscConfig+0x3d6>
 8007dcc:	4b4c      	ldr	r3, [pc, #304]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dd4:	4a4a      	ldr	r2, [pc, #296]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007dd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dda:	6053      	str	r3, [r2, #4]
 8007ddc:	e02e      	b.n	8007e3c <HAL_RCC_OscConfig+0x434>
 8007dde:	4b48      	ldr	r3, [pc, #288]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	069b      	lsls	r3, r3, #26
 8007dec:	4944      	ldr	r1, [pc, #272]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	604b      	str	r3, [r1, #4]
 8007df2:	e023      	b.n	8007e3c <HAL_RCC_OscConfig+0x434>
 8007df4:	4b42      	ldr	r3, [pc, #264]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	061b      	lsls	r3, r3, #24
 8007e02:	493f      	ldr	r1, [pc, #252]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60cb      	str	r3, [r1, #12]
 8007e08:	e018      	b.n	8007e3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e0a:	4b3d      	ldr	r3, [pc, #244]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a3c      	ldr	r2, [pc, #240]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e16:	f7fe fcdf 	bl	80067d8 <HAL_GetTick>
 8007e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e1e:	f7fe fcdb 	bl	80067d8 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e212      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e30:	4b33      	ldr	r3, [pc, #204]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f0      	bne.n	8007e1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d036      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d019      	beq.n	8007e84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e50:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e54:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5c:	f7fe fcbc 	bl	80067d8 <HAL_GetTick>
 8007e60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e64:	f7fe fcb8 	bl	80067d8 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e1ef      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e76:	4b22      	ldr	r3, [pc, #136]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0f0      	beq.n	8007e64 <HAL_RCC_OscConfig+0x45c>
 8007e82:	e018      	b.n	8007eb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e84:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e88:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e90:	f7fe fca2 	bl	80067d8 <HAL_GetTick>
 8007e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e98:	f7fe fc9e 	bl	80067d8 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e1d5      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f0      	bne.n	8007e98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d039      	beq.n	8007f36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01c      	beq.n	8007f04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007eca:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ed6:	f7fe fc7f 	bl	80067d8 <HAL_GetTick>
 8007eda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007edc:	e008      	b.n	8007ef0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ede:	f7fe fc7b 	bl	80067d8 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e1b2      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ef0:	4b03      	ldr	r3, [pc, #12]	; (8007f00 <HAL_RCC_OscConfig+0x4f8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0f0      	beq.n	8007ede <HAL_RCC_OscConfig+0x4d6>
 8007efc:	e01b      	b.n	8007f36 <HAL_RCC_OscConfig+0x52e>
 8007efe:	bf00      	nop
 8007f00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f04:	4b9b      	ldr	r3, [pc, #620]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a9a      	ldr	r2, [pc, #616]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f10:	f7fe fc62 	bl	80067d8 <HAL_GetTick>
 8007f14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f18:	f7fe fc5e 	bl	80067d8 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e195      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f2a:	4b92      	ldr	r3, [pc, #584]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f0      	bne.n	8007f18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 8081 	beq.w	8008046 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f44:	4b8c      	ldr	r3, [pc, #560]	; (8008178 <HAL_RCC_OscConfig+0x770>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a8b      	ldr	r2, [pc, #556]	; (8008178 <HAL_RCC_OscConfig+0x770>)
 8007f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f50:	f7fe fc42 	bl	80067d8 <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f58:	f7fe fc3e 	bl	80067d8 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b64      	cmp	r3, #100	; 0x64
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e175      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f6a:	4b83      	ldr	r3, [pc, #524]	; (8008178 <HAL_RCC_OscConfig+0x770>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f0      	beq.n	8007f58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d106      	bne.n	8007f8c <HAL_RCC_OscConfig+0x584>
 8007f7e:	4b7d      	ldr	r3, [pc, #500]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	4a7c      	ldr	r2, [pc, #496]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	6713      	str	r3, [r2, #112]	; 0x70
 8007f8a:	e02d      	b.n	8007fe8 <HAL_RCC_OscConfig+0x5e0>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10c      	bne.n	8007fae <HAL_RCC_OscConfig+0x5a6>
 8007f94:	4b77      	ldr	r3, [pc, #476]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f98:	4a76      	ldr	r2, [pc, #472]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
 8007f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa0:	4b74      	ldr	r3, [pc, #464]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa4:	4a73      	ldr	r2, [pc, #460]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fa6:	f023 0304 	bic.w	r3, r3, #4
 8007faa:	6713      	str	r3, [r2, #112]	; 0x70
 8007fac:	e01c      	b.n	8007fe8 <HAL_RCC_OscConfig+0x5e0>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d10c      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x5c8>
 8007fb6:	4b6f      	ldr	r3, [pc, #444]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	4a6e      	ldr	r2, [pc, #440]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fbc:	f043 0304 	orr.w	r3, r3, #4
 8007fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc2:	4b6c      	ldr	r3, [pc, #432]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc6:	4a6b      	ldr	r2, [pc, #428]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fc8:	f043 0301 	orr.w	r3, r3, #1
 8007fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8007fce:	e00b      	b.n	8007fe8 <HAL_RCC_OscConfig+0x5e0>
 8007fd0:	4b68      	ldr	r3, [pc, #416]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd4:	4a67      	ldr	r2, [pc, #412]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fd6:	f023 0301 	bic.w	r3, r3, #1
 8007fda:	6713      	str	r3, [r2, #112]	; 0x70
 8007fdc:	4b65      	ldr	r3, [pc, #404]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe0:	4a64      	ldr	r2, [pc, #400]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8007fe2:	f023 0304 	bic.w	r3, r3, #4
 8007fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d015      	beq.n	800801c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff0:	f7fe fbf2 	bl	80067d8 <HAL_GetTick>
 8007ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ff6:	e00a      	b.n	800800e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff8:	f7fe fbee 	bl	80067d8 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	4293      	cmp	r3, r2
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e123      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800800e:	4b59      	ldr	r3, [pc, #356]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0ee      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x5f0>
 800801a:	e014      	b.n	8008046 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801c:	f7fe fbdc 	bl	80067d8 <HAL_GetTick>
 8008020:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008022:	e00a      	b.n	800803a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008024:	f7fe fbd8 	bl	80067d8 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008032:	4293      	cmp	r3, r2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e10d      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800803a:	4b4e      	ldr	r3, [pc, #312]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1ee      	bne.n	8008024 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8102 	beq.w	8008254 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008050:	4b48      	ldr	r3, [pc, #288]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008058:	2b18      	cmp	r3, #24
 800805a:	f000 80bd 	beq.w	80081d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	2b02      	cmp	r3, #2
 8008064:	f040 809e 	bne.w	80081a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008068:	4b42      	ldr	r3, [pc, #264]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a41      	ldr	r2, [pc, #260]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800806e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008074:	f7fe fbb0 	bl	80067d8 <HAL_GetTick>
 8008078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800807a:	e008      	b.n	800808e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800807c:	f7fe fbac 	bl	80067d8 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d901      	bls.n	800808e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e0e3      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800808e:	4b39      	ldr	r3, [pc, #228]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1f0      	bne.n	800807c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800809a:	4b36      	ldr	r3, [pc, #216]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800809c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800809e:	4b37      	ldr	r3, [pc, #220]	; (800817c <HAL_RCC_OscConfig+0x774>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080aa:	0112      	lsls	r2, r2, #4
 80080ac:	430a      	orrs	r2, r1
 80080ae:	4931      	ldr	r1, [pc, #196]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	628b      	str	r3, [r1, #40]	; 0x28
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	3b01      	subs	r3, #1
 80080ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c2:	3b01      	subs	r3, #1
 80080c4:	025b      	lsls	r3, r3, #9
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	431a      	orrs	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	3b01      	subs	r3, #1
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080dc:	3b01      	subs	r3, #1
 80080de:	061b      	lsls	r3, r3, #24
 80080e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080e4:	4923      	ldr	r1, [pc, #140]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80080ea:	4b22      	ldr	r3, [pc, #136]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a21      	ldr	r2, [pc, #132]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080f6:	4b1f      	ldr	r3, [pc, #124]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 80080f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <HAL_RCC_OscConfig+0x778>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008102:	00d2      	lsls	r2, r2, #3
 8008104:	491b      	ldr	r1, [pc, #108]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800810a:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f023 020c 	bic.w	r2, r3, #12
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	4917      	ldr	r1, [pc, #92]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008118:	4313      	orrs	r3, r2
 800811a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800811c:	4b15      	ldr	r3, [pc, #84]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	f023 0202 	bic.w	r2, r3, #2
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008128:	4912      	ldr	r1, [pc, #72]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800812a:	4313      	orrs	r3, r2
 800812c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800812e:	4b11      	ldr	r3, [pc, #68]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4a10      	ldr	r2, [pc, #64]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813a:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	4a0d      	ldr	r2, [pc, #52]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008144:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008146:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	4a0a      	ldr	r2, [pc, #40]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 800814c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008152:	4b08      	ldr	r3, [pc, #32]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	4a07      	ldr	r2, [pc, #28]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a04      	ldr	r2, [pc, #16]	; (8008174 <HAL_RCC_OscConfig+0x76c>)
 8008164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816a:	f7fe fb35 	bl	80067d8 <HAL_GetTick>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008170:	e011      	b.n	8008196 <HAL_RCC_OscConfig+0x78e>
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400
 8008178:	58024800 	.word	0x58024800
 800817c:	fffffc0c 	.word	0xfffffc0c
 8008180:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008184:	f7fe fb28 	bl	80067d8 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e05f      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008196:	4b32      	ldr	r3, [pc, #200]	; (8008260 <HAL_RCC_OscConfig+0x858>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0f0      	beq.n	8008184 <HAL_RCC_OscConfig+0x77c>
 80081a2:	e057      	b.n	8008254 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a4:	4b2e      	ldr	r3, [pc, #184]	; (8008260 <HAL_RCC_OscConfig+0x858>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a2d      	ldr	r2, [pc, #180]	; (8008260 <HAL_RCC_OscConfig+0x858>)
 80081aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b0:	f7fe fb12 	bl	80067d8 <HAL_GetTick>
 80081b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081b6:	e008      	b.n	80081ca <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b8:	f7fe fb0e 	bl	80067d8 <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d901      	bls.n	80081ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e045      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081ca:	4b25      	ldr	r3, [pc, #148]	; (8008260 <HAL_RCC_OscConfig+0x858>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1f0      	bne.n	80081b8 <HAL_RCC_OscConfig+0x7b0>
 80081d6:	e03d      	b.n	8008254 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80081d8:	4b21      	ldr	r3, [pc, #132]	; (8008260 <HAL_RCC_OscConfig+0x858>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80081de:	4b20      	ldr	r3, [pc, #128]	; (8008260 <HAL_RCC_OscConfig+0x858>)
 80081e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d031      	beq.n	8008250 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f003 0203 	and.w	r2, r3, #3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d12a      	bne.n	8008250 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	091b      	lsrs	r3, r3, #4
 80081fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008206:	429a      	cmp	r2, r3
 8008208:	d122      	bne.n	8008250 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008214:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008216:	429a      	cmp	r2, r3
 8008218:	d11a      	bne.n	8008250 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	0a5b      	lsrs	r3, r3, #9
 800821e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008226:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008228:	429a      	cmp	r2, r3
 800822a:	d111      	bne.n	8008250 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	0c1b      	lsrs	r3, r3, #16
 8008230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800823a:	429a      	cmp	r2, r3
 800823c:	d108      	bne.n	8008250 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	0e1b      	lsrs	r3, r3, #24
 8008242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800824c:	429a      	cmp	r2, r3
 800824e:	d001      	beq.n	8008254 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3730      	adds	r7, #48	; 0x30
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	58024400 	.word	0x58024400

08008264 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e19c      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008278:	4b8a      	ldr	r3, [pc, #552]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d910      	bls.n	80082a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008286:	4b87      	ldr	r3, [pc, #540]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f023 020f 	bic.w	r2, r3, #15
 800828e:	4985      	ldr	r1, [pc, #532]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	4313      	orrs	r3, r2
 8008294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008296:	4b83      	ldr	r3, [pc, #524]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d001      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e184      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d010      	beq.n	80082d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	4b7b      	ldr	r3, [pc, #492]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d908      	bls.n	80082d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082c4:	4b78      	ldr	r3, [pc, #480]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	4975      	ldr	r1, [pc, #468]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0308 	and.w	r3, r3, #8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d010      	beq.n	8008304 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695a      	ldr	r2, [r3, #20]
 80082e6:	4b70      	ldr	r3, [pc, #448]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d908      	bls.n	8008304 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082f2:	4b6d      	ldr	r3, [pc, #436]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	496a      	ldr	r1, [pc, #424]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008300:	4313      	orrs	r3, r2
 8008302:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	2b00      	cmp	r3, #0
 800830e:	d010      	beq.n	8008332 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699a      	ldr	r2, [r3, #24]
 8008314:	4b64      	ldr	r3, [pc, #400]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800831c:	429a      	cmp	r2, r3
 800831e:	d908      	bls.n	8008332 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008320:	4b61      	ldr	r3, [pc, #388]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	495e      	ldr	r1, [pc, #376]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 800832e:	4313      	orrs	r3, r2
 8008330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d010      	beq.n	8008360 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69da      	ldr	r2, [r3, #28]
 8008342:	4b59      	ldr	r3, [pc, #356]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800834a:	429a      	cmp	r2, r3
 800834c:	d908      	bls.n	8008360 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800834e:	4b56      	ldr	r3, [pc, #344]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	4953      	ldr	r1, [pc, #332]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 800835c:	4313      	orrs	r3, r2
 800835e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	4b4d      	ldr	r3, [pc, #308]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f003 030f 	and.w	r3, r3, #15
 8008378:	429a      	cmp	r2, r3
 800837a:	d908      	bls.n	800838e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800837c:	4b4a      	ldr	r3, [pc, #296]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	f023 020f 	bic.w	r2, r3, #15
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	4947      	ldr	r1, [pc, #284]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 800838a:	4313      	orrs	r3, r2
 800838c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d055      	beq.n	8008446 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800839a:	4b43      	ldr	r3, [pc, #268]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	4940      	ldr	r1, [pc, #256]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d107      	bne.n	80083c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083b4:	4b3c      	ldr	r3, [pc, #240]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d121      	bne.n	8008404 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e0f6      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d107      	bne.n	80083dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083cc:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d115      	bne.n	8008404 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0ea      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d107      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083e4:	4b30      	ldr	r3, [pc, #192]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e0de      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f4:	4b2c      	ldr	r3, [pc, #176]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0d6      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008404:	4b28      	ldr	r3, [pc, #160]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f023 0207 	bic.w	r2, r3, #7
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4925      	ldr	r1, [pc, #148]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008412:	4313      	orrs	r3, r2
 8008414:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008416:	f7fe f9df 	bl	80067d8 <HAL_GetTick>
 800841a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800841c:	e00a      	b.n	8008434 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800841e:	f7fe f9db 	bl	80067d8 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	f241 3288 	movw	r2, #5000	; 0x1388
 800842c:	4293      	cmp	r3, r2
 800842e:	d901      	bls.n	8008434 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e0be      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008434:	4b1c      	ldr	r3, [pc, #112]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	429a      	cmp	r2, r3
 8008444:	d1eb      	bne.n	800841e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	429a      	cmp	r2, r3
 8008460:	d208      	bcs.n	8008474 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008462:	4b11      	ldr	r3, [pc, #68]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f023 020f 	bic.w	r2, r3, #15
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	490e      	ldr	r1, [pc, #56]	; (80084a8 <HAL_RCC_ClockConfig+0x244>)
 8008470:	4313      	orrs	r3, r2
 8008472:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008474:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d214      	bcs.n	80084ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008482:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f023 020f 	bic.w	r2, r3, #15
 800848a:	4906      	ldr	r1, [pc, #24]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4313      	orrs	r3, r2
 8008490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <HAL_RCC_ClockConfig+0x240>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d005      	beq.n	80084ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e086      	b.n	80085b2 <HAL_RCC_ClockConfig+0x34e>
 80084a4:	52002000 	.word	0x52002000
 80084a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d010      	beq.n	80084da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	4b3f      	ldr	r3, [pc, #252]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d208      	bcs.n	80084da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084c8:	4b3c      	ldr	r3, [pc, #240]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	4939      	ldr	r1, [pc, #228]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d010      	beq.n	8008508 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695a      	ldr	r2, [r3, #20]
 80084ea:	4b34      	ldr	r3, [pc, #208]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d208      	bcs.n	8008508 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084f6:	4b31      	ldr	r3, [pc, #196]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	492e      	ldr	r1, [pc, #184]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 8008504:	4313      	orrs	r3, r2
 8008506:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0310 	and.w	r3, r3, #16
 8008510:	2b00      	cmp	r3, #0
 8008512:	d010      	beq.n	8008536 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	4b28      	ldr	r3, [pc, #160]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008520:	429a      	cmp	r2, r3
 8008522:	d208      	bcs.n	8008536 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008524:	4b25      	ldr	r3, [pc, #148]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	4922      	ldr	r1, [pc, #136]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 8008532:	4313      	orrs	r3, r2
 8008534:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69da      	ldr	r2, [r3, #28]
 8008546:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800854e:	429a      	cmp	r2, r3
 8008550:	d208      	bcs.n	8008564 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008552:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	4917      	ldr	r1, [pc, #92]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 8008560:	4313      	orrs	r3, r2
 8008562:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008564:	f000 f834 	bl	80085d0 <HAL_RCC_GetSysClockFreq>
 8008568:	4602      	mov	r2, r0
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	4912      	ldr	r1, [pc, #72]	; (80085c0 <HAL_RCC_ClockConfig+0x35c>)
 8008576:	5ccb      	ldrb	r3, [r1, r3]
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
 8008580:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <HAL_RCC_ClockConfig+0x358>)
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	4a0d      	ldr	r2, [pc, #52]	; (80085c0 <HAL_RCC_ClockConfig+0x35c>)
 800858c:	5cd3      	ldrb	r3, [r2, r3]
 800858e:	f003 031f 	and.w	r3, r3, #31
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
 8008598:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <HAL_RCC_ClockConfig+0x360>)
 800859a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800859c:	4a0a      	ldr	r2, [pc, #40]	; (80085c8 <HAL_RCC_ClockConfig+0x364>)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80085a2:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <HAL_RCC_ClockConfig+0x368>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe f8cc 	bl	8006744 <HAL_InitTick>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	58024400 	.word	0x58024400
 80085c0:	08011e40 	.word	0x08011e40
 80085c4:	240000ec 	.word	0x240000ec
 80085c8:	240000e8 	.word	0x240000e8
 80085cc:	240000f0 	.word	0x240000f0

080085d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085d6:	4bb3      	ldr	r3, [pc, #716]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085de:	2b18      	cmp	r3, #24
 80085e0:	f200 8155 	bhi.w	800888e <HAL_RCC_GetSysClockFreq+0x2be>
 80085e4:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	08008651 	.word	0x08008651
 80085f0:	0800888f 	.word	0x0800888f
 80085f4:	0800888f 	.word	0x0800888f
 80085f8:	0800888f 	.word	0x0800888f
 80085fc:	0800888f 	.word	0x0800888f
 8008600:	0800888f 	.word	0x0800888f
 8008604:	0800888f 	.word	0x0800888f
 8008608:	0800888f 	.word	0x0800888f
 800860c:	08008677 	.word	0x08008677
 8008610:	0800888f 	.word	0x0800888f
 8008614:	0800888f 	.word	0x0800888f
 8008618:	0800888f 	.word	0x0800888f
 800861c:	0800888f 	.word	0x0800888f
 8008620:	0800888f 	.word	0x0800888f
 8008624:	0800888f 	.word	0x0800888f
 8008628:	0800888f 	.word	0x0800888f
 800862c:	0800867d 	.word	0x0800867d
 8008630:	0800888f 	.word	0x0800888f
 8008634:	0800888f 	.word	0x0800888f
 8008638:	0800888f 	.word	0x0800888f
 800863c:	0800888f 	.word	0x0800888f
 8008640:	0800888f 	.word	0x0800888f
 8008644:	0800888f 	.word	0x0800888f
 8008648:	0800888f 	.word	0x0800888f
 800864c:	08008683 	.word	0x08008683
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008650:	4b94      	ldr	r3, [pc, #592]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0320 	and.w	r3, r3, #32
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800865c:	4b91      	ldr	r3, [pc, #580]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	08db      	lsrs	r3, r3, #3
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	4a90      	ldr	r2, [pc, #576]	; (80088a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008668:	fa22 f303 	lsr.w	r3, r2, r3
 800866c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800866e:	e111      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008670:	4b8d      	ldr	r3, [pc, #564]	; (80088a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008672:	61bb      	str	r3, [r7, #24]
    break;
 8008674:	e10e      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008676:	4b8d      	ldr	r3, [pc, #564]	; (80088ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008678:	61bb      	str	r3, [r7, #24]
    break;
 800867a:	e10b      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800867c:	4b8c      	ldr	r3, [pc, #560]	; (80088b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800867e:	61bb      	str	r3, [r7, #24]
    break;
 8008680:	e108      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008682:	4b88      	ldr	r3, [pc, #544]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800868c:	4b85      	ldr	r3, [pc, #532]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	091b      	lsrs	r3, r3, #4
 8008692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008696:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008698:	4b82      	ldr	r3, [pc, #520]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086a2:	4b80      	ldr	r3, [pc, #512]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a6:	08db      	lsrs	r3, r3, #3
 80086a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	fb02 f303 	mul.w	r3, r2, r3
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80e1 	beq.w	8008888 <HAL_RCC_GetSysClockFreq+0x2b8>
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	f000 8083 	beq.w	80087d4 <HAL_RCC_GetSysClockFreq+0x204>
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	f200 80a1 	bhi.w	8008818 <HAL_RCC_GetSysClockFreq+0x248>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_RCC_GetSysClockFreq+0x114>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d056      	beq.n	8008790 <HAL_RCC_GetSysClockFreq+0x1c0>
 80086e2:	e099      	b.n	8008818 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086e4:	4b6f      	ldr	r3, [pc, #444]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0320 	and.w	r3, r3, #32
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d02d      	beq.n	800874c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086f0:	4b6c      	ldr	r3, [pc, #432]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	08db      	lsrs	r3, r3, #3
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	4a6b      	ldr	r2, [pc, #428]	; (80088a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008700:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b62      	ldr	r3, [pc, #392]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872a:	ed97 6a02 	vldr	s12, [r7, #8]
 800872e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800874a:	e087      	b.n	800885c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875e:	4b51      	ldr	r3, [pc, #324]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008772:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800878e:	e065      	b.n	800885c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800879e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a2:	4b40      	ldr	r3, [pc, #256]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087d2:	e043      	b.n	800885c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80087e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e6:	4b2f      	ldr	r3, [pc, #188]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800880a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008816:	e021      	b.n	800885c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882a:	4b1e      	ldr	r3, [pc, #120]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883a:	ed97 6a02 	vldr	s12, [r7, #8]
 800883e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800885a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800885c:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	0a5b      	lsrs	r3, r3, #9
 8008862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008866:	3301      	adds	r3, #1
 8008868:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008874:	edd7 6a07 	vldr	s13, [r7, #28]
 8008878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800887c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008880:	ee17 3a90 	vmov	r3, s15
 8008884:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008886:	e005      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	61bb      	str	r3, [r7, #24]
    break;
 800888c:	e002      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800888e:	4b07      	ldr	r3, [pc, #28]	; (80088ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008890:	61bb      	str	r3, [r7, #24]
    break;
 8008892:	bf00      	nop
  }

  return sysclockfreq;
 8008894:	69bb      	ldr	r3, [r7, #24]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3724      	adds	r7, #36	; 0x24
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	58024400 	.word	0x58024400
 80088a8:	03d09000 	.word	0x03d09000
 80088ac:	003d0900 	.word	0x003d0900
 80088b0:	017d7840 	.word	0x017d7840
 80088b4:	46000000 	.word	0x46000000
 80088b8:	4c742400 	.word	0x4c742400
 80088bc:	4a742400 	.word	0x4a742400
 80088c0:	4bbebc20 	.word	0x4bbebc20

080088c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088ca:	f7ff fe81 	bl	80085d0 <HAL_RCC_GetSysClockFreq>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b10      	ldr	r3, [pc, #64]	; (8008914 <HAL_RCC_GetHCLKFreq+0x50>)
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	0a1b      	lsrs	r3, r3, #8
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	490f      	ldr	r1, [pc, #60]	; (8008918 <HAL_RCC_GetHCLKFreq+0x54>)
 80088dc:	5ccb      	ldrb	r3, [r1, r3]
 80088de:	f003 031f 	and.w	r3, r3, #31
 80088e2:	fa22 f303 	lsr.w	r3, r2, r3
 80088e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088e8:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <HAL_RCC_GetHCLKFreq+0x50>)
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	4a09      	ldr	r2, [pc, #36]	; (8008918 <HAL_RCC_GetHCLKFreq+0x54>)
 80088f2:	5cd3      	ldrb	r3, [r2, r3]
 80088f4:	f003 031f 	and.w	r3, r3, #31
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	fa22 f303 	lsr.w	r3, r2, r3
 80088fe:	4a07      	ldr	r2, [pc, #28]	; (800891c <HAL_RCC_GetHCLKFreq+0x58>)
 8008900:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008902:	4a07      	ldr	r2, [pc, #28]	; (8008920 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <HAL_RCC_GetHCLKFreq+0x58>)
 800890a:	681b      	ldr	r3, [r3, #0]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	58024400 	.word	0x58024400
 8008918:	08011e40 	.word	0x08011e40
 800891c:	240000ec 	.word	0x240000ec
 8008920:	240000e8 	.word	0x240000e8

08008924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008928:	f7ff ffcc 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 800892c:	4602      	mov	r2, r0
 800892e:	4b06      	ldr	r3, [pc, #24]	; (8008948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	4904      	ldr	r1, [pc, #16]	; (800894c <HAL_RCC_GetPCLK1Freq+0x28>)
 800893a:	5ccb      	ldrb	r3, [r1, r3]
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008944:	4618      	mov	r0, r3
 8008946:	bd80      	pop	{r7, pc}
 8008948:	58024400 	.word	0x58024400
 800894c:	08011e40 	.word	0x08011e40

08008950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008954:	f7ff ffb6 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 8008958:	4602      	mov	r2, r0
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	4904      	ldr	r1, [pc, #16]	; (8008978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008966:	5ccb      	ldrb	r3, [r1, r3]
 8008968:	f003 031f 	and.w	r3, r3, #31
 800896c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008970:	4618      	mov	r0, r3
 8008972:	bd80      	pop	{r7, pc}
 8008974:	58024400 	.word	0x58024400
 8008978:	08011e40 	.word	0x08011e40

0800897c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008984:	2300      	movs	r3, #0
 8008986:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008988:	2300      	movs	r3, #0
 800898a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d03f      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089a0:	d02a      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80089a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089a6:	d824      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80089a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ac:	d018      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089b2:	d81e      	bhi.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80089b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089bc:	d007      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80089be:	e018      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c0:	4ba3      	ldr	r3, [pc, #652]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4aa2      	ldr	r2, [pc, #648]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089cc:	e015      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3304      	adds	r3, #4
 80089d2:	2102      	movs	r1, #2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 f9d5 	bl	8009d84 <RCCEx_PLL2_Config>
 80089da:	4603      	mov	r3, r0
 80089dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089de:	e00c      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3324      	adds	r3, #36	; 0x24
 80089e4:	2102      	movs	r1, #2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 fa7e 	bl	8009ee8 <RCCEx_PLL3_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089f0:	e003      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]
      break;
 80089f6:	e000      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80089f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a00:	4b93      	ldr	r3, [pc, #588]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0c:	4990      	ldr	r1, [pc, #576]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	650b      	str	r3, [r1, #80]	; 0x50
 8008a12:	e001      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d03d      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d826      	bhi.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a49 	.word	0x08008a49
 8008a38:	08008a57 	.word	0x08008a57
 8008a3c:	08008a69 	.word	0x08008a69
 8008a40:	08008a81 	.word	0x08008a81
 8008a44:	08008a81 	.word	0x08008a81
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a48:	4b81      	ldr	r3, [pc, #516]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	4a80      	ldr	r2, [pc, #512]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a54:	e015      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 f991 	bl	8009d84 <RCCEx_PLL2_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a66:	e00c      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3324      	adds	r3, #36	; 0x24
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fa3a 	bl	8009ee8 <RCCEx_PLL3_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a78:	e003      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a7e:	e000      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d109      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a88:	4b71      	ldr	r3, [pc, #452]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8c:	f023 0207 	bic.w	r2, r3, #7
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a94:	496e      	ldr	r1, [pc, #440]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	650b      	str	r3, [r1, #80]	; 0x50
 8008a9a:	e001      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d042      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab4:	d02b      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aba:	d825      	bhi.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008abc:	2bc0      	cmp	r3, #192	; 0xc0
 8008abe:	d028      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008ac0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ac2:	d821      	bhi.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008ac4:	2b80      	cmp	r3, #128	; 0x80
 8008ac6:	d016      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d81d      	bhi.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008ad0:	2b40      	cmp	r3, #64	; 0x40
 8008ad2:	d007      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008ad4:	e018      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad6:	4b5e      	ldr	r3, [pc, #376]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	4a5d      	ldr	r2, [pc, #372]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ae2:	e017      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	2100      	movs	r1, #0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 f94a 	bl	8009d84 <RCCEx_PLL2_Config>
 8008af0:	4603      	mov	r3, r0
 8008af2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008af4:	e00e      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3324      	adds	r3, #36	; 0x24
 8008afa:	2100      	movs	r1, #0
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 f9f3 	bl	8009ee8 <RCCEx_PLL3_Config>
 8008b02:	4603      	mov	r3, r0
 8008b04:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b06:	e005      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0c:	e002      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b0e:	bf00      	nop
 8008b10:	e000      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b1a:	4b4d      	ldr	r3, [pc, #308]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b26:	494a      	ldr	r1, [pc, #296]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	650b      	str	r3, [r1, #80]	; 0x50
 8008b2c:	e001      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d049      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b48:	d030      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b4e:	d82a      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b54:	d02c      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008b56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b5a:	d824      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b60:	d018      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b66:	d81e      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b70:	d007      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008b72:	e018      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b74:	4b36      	ldr	r3, [pc, #216]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	4a35      	ldr	r2, [pc, #212]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b80:	e017      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3304      	adds	r3, #4
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f8fb 	bl	8009d84 <RCCEx_PLL2_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b92:	e00e      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3324      	adds	r3, #36	; 0x24
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 f9a4 	bl	8009ee8 <RCCEx_PLL3_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ba4:	e005      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8008baa:	e002      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008bb8:	4b25      	ldr	r3, [pc, #148]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bbc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bc6:	4922      	ldr	r1, [pc, #136]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	658b      	str	r3, [r1, #88]	; 0x58
 8008bcc:	e001      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d04b      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008be4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008be8:	d030      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bee:	d82a      	bhi.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008bf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bf4:	d02e      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008bf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bfa:	d824      	bhi.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c00:	d018      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c06:	d81e      	bhi.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c10:	d007      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008c12:	e018      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c14:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	4a0d      	ldr	r2, [pc, #52]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c20:	e019      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3304      	adds	r3, #4
 8008c26:	2100      	movs	r1, #0
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 f8ab 	bl	8009d84 <RCCEx_PLL2_Config>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c32:	e010      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3324      	adds	r3, #36	; 0x24
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 f954 	bl	8009ee8 <RCCEx_PLL3_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c44:	e007      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4a:	e004      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008c4c:	bf00      	nop
 8008c4e:	e002      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008c50:	58024400 	.word	0x58024400
      break;
 8008c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c5c:	4b99      	ldr	r3, [pc, #612]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c6a:	4996      	ldr	r1, [pc, #600]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	658b      	str	r3, [r1, #88]	; 0x58
 8008c70:	e001      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d032      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c86:	2b30      	cmp	r3, #48	; 0x30
 8008c88:	d01c      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008c8a:	2b30      	cmp	r3, #48	; 0x30
 8008c8c:	d817      	bhi.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008c8e:	2b20      	cmp	r3, #32
 8008c90:	d00c      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d813      	bhi.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008c9a:	2b10      	cmp	r3, #16
 8008c9c:	d10f      	bne.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9e:	4b89      	ldr	r3, [pc, #548]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	4a88      	ldr	r2, [pc, #544]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008caa:	e00e      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 f866 	bl	8009d84 <RCCEx_PLL2_Config>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008cbc:	e005      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008cc2:	e002      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008cc4:	bf00      	nop
 8008cc6:	e000      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d109      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008cd0:	4b7c      	ldr	r3, [pc, #496]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cdc:	4979      	ldr	r1, [pc, #484]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ce2:	e001      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d047      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cfc:	d030      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d02:	d82a      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d08:	d02c      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008d0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d0e:	d824      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d14:	d018      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d1a:	d81e      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d24:	d007      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008d26:	e018      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d28:	4b66      	ldr	r3, [pc, #408]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a65      	ldr	r2, [pc, #404]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d34:	e017      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f001 f821 	bl	8009d84 <RCCEx_PLL2_Config>
 8008d42:	4603      	mov	r3, r0
 8008d44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d46:	e00e      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3324      	adds	r3, #36	; 0x24
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 f8ca 	bl	8009ee8 <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d58:	e005      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008d60:	bf00      	nop
 8008d62:	e000      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d6c:	4b55      	ldr	r3, [pc, #340]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d78:	4952      	ldr	r1, [pc, #328]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	650b      	str	r3, [r1, #80]	; 0x50
 8008d7e:	e001      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d049      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d98:	d02e      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d9e:	d828      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008da0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008da4:	d02a      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008da6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008daa:	d822      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008dac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008db0:	d026      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008db2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008db6:	d81c      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dbc:	d010      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dc2:	d816      	bhi.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01d      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dcc:	d111      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 ffd5 	bl	8009d84 <RCCEx_PLL2_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008dde:	e012      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3324      	adds	r3, #36	; 0x24
 8008de4:	2101      	movs	r1, #1
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 f87e 	bl	8009ee8 <RCCEx_PLL3_Config>
 8008dec:	4603      	mov	r3, r0
 8008dee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008df0:	e009      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
      break;
 8008df6:	e006      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008df8:	bf00      	nop
 8008dfa:	e004      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008dfc:	bf00      	nop
 8008dfe:	e002      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e00:	bf00      	nop
 8008e02:	e000      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d109      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e0c:	4b2d      	ldr	r3, [pc, #180]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e10:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e18:	492a      	ldr	r1, [pc, #168]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	650b      	str	r3, [r1, #80]	; 0x50
 8008e1e:	e001      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d04d      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e3a:	d02e      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e40:	d828      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e46:	d02a      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e4c:	d822      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e52:	d026      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008e54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e58:	d81c      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5e:	d010      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e64:	d816      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01d      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e6e:	d111      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3304      	adds	r3, #4
 8008e74:	2101      	movs	r1, #1
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 ff84 	bl	8009d84 <RCCEx_PLL2_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e80:	e012      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3324      	adds	r3, #36	; 0x24
 8008e86:	2101      	movs	r1, #1
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 f82d 	bl	8009ee8 <RCCEx_PLL3_Config>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e92:	e009      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
      break;
 8008e98:	e006      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e004      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e9e:	bf00      	nop
 8008ea0:	e002      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e000      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ebc:	4901      	ldr	r1, [pc, #4]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ec2:	e003      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d02f      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee0:	d00e      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee6:	d814      	bhi.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d015      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ef0:	d10f      	bne.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef2:	4baf      	ldr	r3, [pc, #700]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	4aae      	ldr	r2, [pc, #696]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008efc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008efe:	e00c      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3304      	adds	r3, #4
 8008f04:	2101      	movs	r1, #1
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 ff3c 	bl	8009d84 <RCCEx_PLL2_Config>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f10:	e003      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	75fb      	strb	r3, [r7, #23]
      break;
 8008f16:	e000      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f20:	4ba3      	ldr	r3, [pc, #652]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2c:	49a0      	ldr	r1, [pc, #640]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	650b      	str	r3, [r1, #80]	; 0x50
 8008f32:	e001      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d032      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d81b      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f8b 	.word	0x08008f8b
 8008f58:	08008f65 	.word	0x08008f65
 8008f5c:	08008f73 	.word	0x08008f73
 8008f60:	08008f8b 	.word	0x08008f8b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f64:	4b92      	ldr	r3, [pc, #584]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	4a91      	ldr	r2, [pc, #580]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f70:	e00c      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	3304      	adds	r3, #4
 8008f76:	2102      	movs	r1, #2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 ff03 	bl	8009d84 <RCCEx_PLL2_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f82:	e003      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]
      break;
 8008f88:	e000      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f92:	4b87      	ldr	r3, [pc, #540]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f96:	f023 0203 	bic.w	r2, r3, #3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9e:	4984      	ldr	r1, [pc, #528]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008fa4:	e001      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 8086 	beq.w	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fb8:	4b7e      	ldr	r3, [pc, #504]	; (80091b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a7d      	ldr	r2, [pc, #500]	; (80091b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fc4:	f7fd fc08 	bl	80067d8 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fca:	e009      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fcc:	f7fd fc04 	bl	80067d8 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b64      	cmp	r3, #100	; 0x64
 8008fd8:	d902      	bls.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	75fb      	strb	r3, [r7, #23]
        break;
 8008fde:	e005      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fe0:	4b74      	ldr	r3, [pc, #464]	; (80091b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0ef      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d166      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008ff2:	4b6f      	ldr	r3, [pc, #444]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ffc:	4053      	eors	r3, r2
 8008ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009002:	2b00      	cmp	r3, #0
 8009004:	d013      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009006:	4b6a      	ldr	r3, [pc, #424]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800900a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800900e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009010:	4b67      	ldr	r3, [pc, #412]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009014:	4a66      	ldr	r2, [pc, #408]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800901a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800901c:	4b64      	ldr	r3, [pc, #400]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800901e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009020:	4a63      	ldr	r2, [pc, #396]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009026:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009028:	4a61      	ldr	r2, [pc, #388]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009038:	d115      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800903a:	f7fd fbcd 	bl	80067d8 <HAL_GetTick>
 800903e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009040:	e00b      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009042:	f7fd fbc9 	bl	80067d8 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009050:	4293      	cmp	r3, r2
 8009052:	d902      	bls.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	75fb      	strb	r3, [r7, #23]
            break;
 8009058:	e005      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800905a:	4b55      	ldr	r3, [pc, #340]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800905c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0ed      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d126      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800907a:	d10d      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800907c:	4b4c      	ldr	r3, [pc, #304]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800908a:	0919      	lsrs	r1, r3, #4
 800908c:	4b4a      	ldr	r3, [pc, #296]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800908e:	400b      	ands	r3, r1
 8009090:	4947      	ldr	r1, [pc, #284]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009092:	4313      	orrs	r3, r2
 8009094:	610b      	str	r3, [r1, #16]
 8009096:	e005      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009098:	4b45      	ldr	r3, [pc, #276]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	4a44      	ldr	r2, [pc, #272]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800909e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80090a2:	6113      	str	r3, [r2, #16]
 80090a4:	4b42      	ldr	r3, [pc, #264]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090b2:	493f      	ldr	r1, [pc, #252]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	670b      	str	r3, [r1, #112]	; 0x70
 80090b8:	e004      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	75bb      	strb	r3, [r7, #22]
 80090be:	e001      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8085 	beq.w	80091dc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d6:	2b28      	cmp	r3, #40	; 0x28
 80090d8:	d866      	bhi.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80090da:	a201      	add	r2, pc, #4	; (adr r2, 80090e0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80090dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e0:	080091bd 	.word	0x080091bd
 80090e4:	080091a9 	.word	0x080091a9
 80090e8:	080091a9 	.word	0x080091a9
 80090ec:	080091a9 	.word	0x080091a9
 80090f0:	080091a9 	.word	0x080091a9
 80090f4:	080091a9 	.word	0x080091a9
 80090f8:	080091a9 	.word	0x080091a9
 80090fc:	080091a9 	.word	0x080091a9
 8009100:	08009185 	.word	0x08009185
 8009104:	080091a9 	.word	0x080091a9
 8009108:	080091a9 	.word	0x080091a9
 800910c:	080091a9 	.word	0x080091a9
 8009110:	080091a9 	.word	0x080091a9
 8009114:	080091a9 	.word	0x080091a9
 8009118:	080091a9 	.word	0x080091a9
 800911c:	080091a9 	.word	0x080091a9
 8009120:	08009197 	.word	0x08009197
 8009124:	080091a9 	.word	0x080091a9
 8009128:	080091a9 	.word	0x080091a9
 800912c:	080091a9 	.word	0x080091a9
 8009130:	080091a9 	.word	0x080091a9
 8009134:	080091a9 	.word	0x080091a9
 8009138:	080091a9 	.word	0x080091a9
 800913c:	080091a9 	.word	0x080091a9
 8009140:	080091bd 	.word	0x080091bd
 8009144:	080091a9 	.word	0x080091a9
 8009148:	080091a9 	.word	0x080091a9
 800914c:	080091a9 	.word	0x080091a9
 8009150:	080091a9 	.word	0x080091a9
 8009154:	080091a9 	.word	0x080091a9
 8009158:	080091a9 	.word	0x080091a9
 800915c:	080091a9 	.word	0x080091a9
 8009160:	080091bd 	.word	0x080091bd
 8009164:	080091a9 	.word	0x080091a9
 8009168:	080091a9 	.word	0x080091a9
 800916c:	080091a9 	.word	0x080091a9
 8009170:	080091a9 	.word	0x080091a9
 8009174:	080091a9 	.word	0x080091a9
 8009178:	080091a9 	.word	0x080091a9
 800917c:	080091a9 	.word	0x080091a9
 8009180:	080091bd 	.word	0x080091bd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3304      	adds	r3, #4
 8009188:	2101      	movs	r1, #1
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fdfa 	bl	8009d84 <RCCEx_PLL2_Config>
 8009190:	4603      	mov	r3, r0
 8009192:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009194:	e013      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3324      	adds	r3, #36	; 0x24
 800919a:	2101      	movs	r1, #1
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fea3 	bl	8009ee8 <RCCEx_PLL3_Config>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80091a6:	e00a      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	75fb      	strb	r3, [r7, #23]
      break;
 80091ac:	e007      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x842>
 80091ae:	bf00      	nop
 80091b0:	58024400 	.word	0x58024400
 80091b4:	58024800 	.word	0x58024800
 80091b8:	00ffffcf 	.word	0x00ffffcf
      break;
 80091bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d109      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80091c4:	4b96      	ldr	r3, [pc, #600]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091d0:	4993      	ldr	r1, [pc, #588]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	654b      	str	r3, [r1, #84]	; 0x54
 80091d6:	e001      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d038      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ec:	2b05      	cmp	r3, #5
 80091ee:	d821      	bhi.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80091f0:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	0800923b 	.word	0x0800923b
 80091fc:	08009211 	.word	0x08009211
 8009200:	08009223 	.word	0x08009223
 8009204:	0800923b 	.word	0x0800923b
 8009208:	0800923b 	.word	0x0800923b
 800920c:	0800923b 	.word	0x0800923b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3304      	adds	r3, #4
 8009214:	2101      	movs	r1, #1
 8009216:	4618      	mov	r0, r3
 8009218:	f000 fdb4 	bl	8009d84 <RCCEx_PLL2_Config>
 800921c:	4603      	mov	r3, r0
 800921e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009220:	e00c      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3324      	adds	r3, #36	; 0x24
 8009226:	2101      	movs	r1, #1
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fe5d 	bl	8009ee8 <RCCEx_PLL3_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009232:	e003      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	75fb      	strb	r3, [r7, #23]
      break;
 8009238:	e000      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800923a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009242:	4b77      	ldr	r3, [pc, #476]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009246:	f023 0207 	bic.w	r2, r3, #7
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924e:	4974      	ldr	r1, [pc, #464]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009250:	4313      	orrs	r3, r2
 8009252:	654b      	str	r3, [r1, #84]	; 0x54
 8009254:	e001      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b00      	cmp	r3, #0
 8009264:	d03a      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926c:	2b05      	cmp	r3, #5
 800926e:	d821      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	080092bb 	.word	0x080092bb
 800927c:	08009291 	.word	0x08009291
 8009280:	080092a3 	.word	0x080092a3
 8009284:	080092bb 	.word	0x080092bb
 8009288:	080092bb 	.word	0x080092bb
 800928c:	080092bb 	.word	0x080092bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3304      	adds	r3, #4
 8009294:	2101      	movs	r1, #1
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fd74 	bl	8009d84 <RCCEx_PLL2_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80092a0:	e00c      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3324      	adds	r3, #36	; 0x24
 80092a6:	2101      	movs	r1, #1
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 fe1d 	bl	8009ee8 <RCCEx_PLL3_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80092b2:	e003      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	75fb      	strb	r3, [r7, #23]
      break;
 80092b8:	e000      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80092ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092c2:	4b57      	ldr	r3, [pc, #348]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c6:	f023 0207 	bic.w	r2, r3, #7
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d0:	4953      	ldr	r1, [pc, #332]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	658b      	str	r3, [r1, #88]	; 0x58
 80092d6:	e001      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d04b      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092f2:	d02e      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80092f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092f8:	d828      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80092fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092fe:	d02a      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009304:	d822      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009306:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800930a:	d026      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800930c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009310:	d81c      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009316:	d010      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800931c:	d816      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d01d      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009326:	d111      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3304      	adds	r3, #4
 800932c:	2100      	movs	r1, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fd28 	bl	8009d84 <RCCEx_PLL2_Config>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009338:	e012      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3324      	adds	r3, #36	; 0x24
 800933e:	2102      	movs	r1, #2
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fdd1 	bl	8009ee8 <RCCEx_PLL3_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800934a:	e009      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
      break;
 8009350:	e006      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009352:	bf00      	nop
 8009354:	e004      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009356:	bf00      	nop
 8009358:	e002      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800935a:	bf00      	nop
 800935c:	e000      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800935e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009366:	4b2e      	ldr	r3, [pc, #184]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800936a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009374:	492a      	ldr	r1, [pc, #168]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009376:	4313      	orrs	r3, r2
 8009378:	654b      	str	r3, [r1, #84]	; 0x54
 800937a:	e001      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009388:	2b00      	cmp	r3, #0
 800938a:	d04d      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009392:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009396:	d02e      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009398:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800939c:	d828      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800939e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a2:	d02a      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80093a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a8:	d822      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80093aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093ae:	d026      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80093b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093b4:	d81c      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80093b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ba:	d010      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80093bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093c0:	d816      	bhi.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d01d      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80093c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ca:	d111      	bne.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3304      	adds	r3, #4
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fcd6 	bl	8009d84 <RCCEx_PLL2_Config>
 80093d8:	4603      	mov	r3, r0
 80093da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80093dc:	e012      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3324      	adds	r3, #36	; 0x24
 80093e2:	2102      	movs	r1, #2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fd7f 	bl	8009ee8 <RCCEx_PLL3_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80093ee:	e009      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]
      break;
 80093f4:	e006      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093f6:	bf00      	nop
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10c      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800940a:	4b05      	ldr	r3, [pc, #20]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009418:	4901      	ldr	r1, [pc, #4]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800941a:	4313      	orrs	r3, r2
 800941c:	658b      	str	r3, [r1, #88]	; 0x58
 800941e:	e003      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009430:	2b00      	cmp	r3, #0
 8009432:	d04b      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800943a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800943e:	d02e      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009440:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009444:	d828      	bhi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800944a:	d02a      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800944c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009450:	d822      	bhi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009452:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009456:	d026      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009458:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800945c:	d81c      	bhi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800945e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009462:	d010      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009468:	d816      	bhi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d01d      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800946e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009472:	d111      	bne.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3304      	adds	r3, #4
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fc82 	bl	8009d84 <RCCEx_PLL2_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009484:	e012      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3324      	adds	r3, #36	; 0x24
 800948a:	2102      	movs	r1, #2
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fd2b 	bl	8009ee8 <RCCEx_PLL3_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009496:	e009      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
      break;
 800949c:	e006      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800949e:	bf00      	nop
 80094a0:	e004      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80094a2:	bf00      	nop
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80094aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80094b2:	4b9d      	ldr	r3, [pc, #628]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094c0:	4999      	ldr	r1, [pc, #612]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	658b      	str	r3, [r1, #88]	; 0x58
 80094c6:	e001      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0308 	and.w	r3, r3, #8
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d01a      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e2:	d10a      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3324      	adds	r3, #36	; 0x24
 80094e8:	2102      	movs	r1, #2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fcfc 	bl	8009ee8 <RCCEx_PLL3_Config>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80094fa:	4b8b      	ldr	r3, [pc, #556]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009508:	4987      	ldr	r1, [pc, #540]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800950a:	4313      	orrs	r3, r2
 800950c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0310 	and.w	r3, r3, #16
 8009516:	2b00      	cmp	r3, #0
 8009518:	d01a      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009524:	d10a      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3324      	adds	r3, #36	; 0x24
 800952a:	2102      	movs	r1, #2
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fcdb 	bl	8009ee8 <RCCEx_PLL3_Config>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800953c:	4b7a      	ldr	r3, [pc, #488]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800953e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800954a:	4977      	ldr	r1, [pc, #476]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800954c:	4313      	orrs	r3, r2
 800954e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d034      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009566:	d01d      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800956c:	d817      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009576:	d009      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009578:	e011      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3304      	adds	r3, #4
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fbff 	bl	8009d84 <RCCEx_PLL2_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800958a:	e00c      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3324      	adds	r3, #36	; 0x24
 8009590:	2102      	movs	r1, #2
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fca8 	bl	8009ee8 <RCCEx_PLL3_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800959c:	e003      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
      break;
 80095a2:	e000      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80095a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095ac:	4b5e      	ldr	r3, [pc, #376]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095ba:	495b      	ldr	r1, [pc, #364]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	658b      	str	r3, [r1, #88]	; 0x58
 80095c0:	e001      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d033      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095dc:	d01c      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80095de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095e2:	d816      	bhi.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80095e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e8:	d003      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80095ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095ee:	d007      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80095f0:	e00f      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f2:	4b4d      	ldr	r3, [pc, #308]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	4a4c      	ldr	r2, [pc, #304]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80095fe:	e00c      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3324      	adds	r3, #36	; 0x24
 8009604:	2101      	movs	r1, #1
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fc6e 	bl	8009ee8 <RCCEx_PLL3_Config>
 800960c:	4603      	mov	r3, r0
 800960e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009610:	e003      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	75fb      	strb	r3, [r7, #23]
      break;
 8009616:	e000      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961a:	7dfb      	ldrb	r3, [r7, #23]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009620:	4b41      	ldr	r3, [pc, #260]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800962e:	493e      	ldr	r1, [pc, #248]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009630:	4313      	orrs	r3, r2
 8009632:	654b      	str	r3, [r1, #84]	; 0x54
 8009634:	e001      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d029      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800964e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009652:	d007      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009654:	e00f      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009656:	4b34      	ldr	r3, [pc, #208]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965a:	4a33      	ldr	r2, [pc, #204]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800965c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009662:	e00b      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3304      	adds	r3, #4
 8009668:	2102      	movs	r1, #2
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fb8a 	bl	8009d84 <RCCEx_PLL2_Config>
 8009670:	4603      	mov	r3, r0
 8009672:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009674:	e002      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	75fb      	strb	r3, [r7, #23]
      break;
 800967a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009682:	4b29      	ldr	r3, [pc, #164]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968e:	4926      	ldr	r1, [pc, #152]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009690:	4313      	orrs	r3, r2
 8009692:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009694:	e001      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3324      	adds	r3, #36	; 0x24
 80096aa:	2102      	movs	r1, #2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fc1b 	bl	8009ee8 <RCCEx_PLL3_Config>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d033      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096d0:	d017      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80096d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096d6:	d811      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80096d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096dc:	d013      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80096de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096e2:	d80b      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d010      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80096e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ec:	d106      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ee:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	4a0d      	ldr	r2, [pc, #52]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80096fa:	e007      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009700:	e004      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009702:	bf00      	nop
 8009704:	e002      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009706:	bf00      	nop
 8009708:	e000      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800970a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10c      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009712:	4b05      	ldr	r3, [pc, #20]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800971e:	4902      	ldr	r1, [pc, #8]	; (8009728 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009720:	4313      	orrs	r3, r2
 8009722:	654b      	str	r3, [r1, #84]	; 0x54
 8009724:	e004      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009726:	bf00      	nop
 8009728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d008      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800973c:	4b31      	ldr	r3, [pc, #196]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800973e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009740:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009748:	492e      	ldr	r1, [pc, #184]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800974a:	4313      	orrs	r3, r2
 800974c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d009      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800975a:	4b2a      	ldr	r3, [pc, #168]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009768:	4926      	ldr	r1, [pc, #152]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800976a:	4313      	orrs	r3, r2
 800976c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d008      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800977a:	4b22      	ldr	r3, [pc, #136]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800977c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009786:	491f      	ldr	r1, [pc, #124]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009788:	4313      	orrs	r3, r2
 800978a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00d      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009798:	4b1a      	ldr	r3, [pc, #104]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	4a19      	ldr	r2, [pc, #100]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800979e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097a2:	6113      	str	r3, [r2, #16]
 80097a4:	4b17      	ldr	r3, [pc, #92]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80097ae:	4915      	ldr	r1, [pc, #84]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	da08      	bge.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80097bc:	4b11      	ldr	r3, [pc, #68]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c8:	490e      	ldr	r1, [pc, #56]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d009      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097da:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e8:	4906      	ldr	r1, [pc, #24]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80097ee:	7dbb      	ldrb	r3, [r7, #22]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	e000      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	58024400 	.word	0x58024400

08009808 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800980c:	f7ff f85a 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 8009810:	4602      	mov	r2, r0
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	091b      	lsrs	r3, r3, #4
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	4904      	ldr	r1, [pc, #16]	; (8009830 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800981e:	5ccb      	ldrb	r3, [r1, r3]
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009828:	4618      	mov	r0, r3
 800982a:	bd80      	pop	{r7, pc}
 800982c:	58024400 	.word	0x58024400
 8009830:	08011e40 	.word	0x08011e40

08009834 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009834:	b480      	push	{r7}
 8009836:	b089      	sub	sp, #36	; 0x24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800983c:	4ba1      	ldr	r3, [pc, #644]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009846:	4b9f      	ldr	r3, [pc, #636]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984a:	0b1b      	lsrs	r3, r3, #12
 800984c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009850:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009852:	4b9c      	ldr	r3, [pc, #624]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	091b      	lsrs	r3, r3, #4
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800985e:	4b99      	ldr	r3, [pc, #612]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009862:	08db      	lsrs	r3, r3, #3
 8009864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	fb02 f303 	mul.w	r3, r2, r3
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009876:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8111 	beq.w	8009aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b02      	cmp	r3, #2
 8009886:	f000 8083 	beq.w	8009990 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b02      	cmp	r3, #2
 800988e:	f200 80a1 	bhi.w	80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d056      	beq.n	800994c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800989e:	e099      	b.n	80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a0:	4b88      	ldr	r3, [pc, #544]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d02d      	beq.n	8009908 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098ac:	4b85      	ldr	r3, [pc, #532]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	08db      	lsrs	r3, r3, #3
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	4a84      	ldr	r2, [pc, #528]	; (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80098b8:	fa22 f303 	lsr.w	r3, r2, r3
 80098bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	ee07 3a90 	vmov	s15, r3
 80098c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d6:	4b7b      	ldr	r3, [pc, #492]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009902:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009906:	e087      	b.n	8009a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991a:	4b6a      	ldr	r3, [pc, #424]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992a:	ed97 6a03 	vldr	s12, [r7, #12]
 800992e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800993e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800994a:	e065      	b.n	8009a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800995a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995e:	4b59      	ldr	r3, [pc, #356]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009972:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800997e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800998e:	e043      	b.n	8009a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800999e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a2:	4b48      	ldr	r3, [pc, #288]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099d2:	e021      	b.n	8009a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e6:	4b37      	ldr	r3, [pc, #220]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009a18:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	0a5b      	lsrs	r3, r3, #9
 8009a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a3e:	ee17 2a90 	vmov	r2, s15
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009a46:	4b1f      	ldr	r3, [pc, #124]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	0c1b      	lsrs	r3, r3, #16
 8009a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a50:	ee07 3a90 	vmov	s15, r3
 8009a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a6c:	ee17 2a90 	vmov	r2, s15
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a74:	4b13      	ldr	r3, [pc, #76]	; (8009ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	0e1b      	lsrs	r3, r3, #24
 8009a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9a:	ee17 2a90 	vmov	r2, s15
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009aa2:	e008      	b.n	8009ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	609a      	str	r2, [r3, #8]
}
 8009ab6:	bf00      	nop
 8009ab8:	3724      	adds	r7, #36	; 0x24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	58024400 	.word	0x58024400
 8009ac8:	03d09000 	.word	0x03d09000
 8009acc:	46000000 	.word	0x46000000
 8009ad0:	4c742400 	.word	0x4c742400
 8009ad4:	4a742400 	.word	0x4a742400
 8009ad8:	4bbebc20 	.word	0x4bbebc20

08009adc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b089      	sub	sp, #36	; 0x24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ae4:	4ba1      	ldr	r3, [pc, #644]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009aee:	4b9f      	ldr	r3, [pc, #636]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af2:	0d1b      	lsrs	r3, r3, #20
 8009af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009af8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009afa:	4b9c      	ldr	r3, [pc, #624]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	0a1b      	lsrs	r3, r3, #8
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b06:	4b99      	ldr	r3, [pc, #612]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0a:	08db      	lsrs	r3, r3, #3
 8009b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	fb02 f303 	mul.w	r3, r2, r3
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 8111 	beq.w	8009d4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	f000 8083 	beq.w	8009c38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	f200 80a1 	bhi.w	8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d056      	beq.n	8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b46:	e099      	b.n	8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b48:	4b88      	ldr	r3, [pc, #544]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d02d      	beq.n	8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b54:	4b85      	ldr	r3, [pc, #532]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	08db      	lsrs	r3, r3, #3
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	4a84      	ldr	r2, [pc, #528]	; (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b60:	fa22 f303 	lsr.w	r3, r2, r3
 8009b64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	ee07 3a90 	vmov	s15, r3
 8009b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b7e:	4b7b      	ldr	r3, [pc, #492]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009baa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bae:	e087      	b.n	8009cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc2:	4b6a      	ldr	r3, [pc, #424]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bf2:	e065      	b.n	8009cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c06:	4b59      	ldr	r3, [pc, #356]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c36:	e043      	b.n	8009cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4a:	4b48      	ldr	r3, [pc, #288]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c7a:	e021      	b.n	8009cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8e:	4b37      	ldr	r3, [pc, #220]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009cc0:	4b2a      	ldr	r3, [pc, #168]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc4:	0a5b      	lsrs	r3, r3, #9
 8009cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ce6:	ee17 2a90 	vmov	r2, s15
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009cee:	4b1f      	ldr	r3, [pc, #124]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	0c1b      	lsrs	r3, r3, #16
 8009cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf8:	ee07 3a90 	vmov	s15, r3
 8009cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d14:	ee17 2a90 	vmov	r2, s15
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009d1c:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	0e1b      	lsrs	r3, r3, #24
 8009d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d42:	ee17 2a90 	vmov	r2, s15
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d4a:	e008      	b.n	8009d5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	609a      	str	r2, [r3, #8]
}
 8009d5e:	bf00      	nop
 8009d60:	3724      	adds	r7, #36	; 0x24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	58024400 	.word	0x58024400
 8009d70:	03d09000 	.word	0x03d09000
 8009d74:	46000000 	.word	0x46000000
 8009d78:	4c742400 	.word	0x4c742400
 8009d7c:	4a742400 	.word	0x4a742400
 8009d80:	4bbebc20 	.word	0x4bbebc20

08009d84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d92:	4b53      	ldr	r3, [pc, #332]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d96:	f003 0303 	and.w	r3, r3, #3
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d101      	bne.n	8009da2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e099      	b.n	8009ed6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009da2:	4b4f      	ldr	r3, [pc, #316]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a4e      	ldr	r2, [pc, #312]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009da8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dae:	f7fc fd13 	bl	80067d8 <HAL_GetTick>
 8009db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009db4:	e008      	b.n	8009dc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009db6:	f7fc fd0f 	bl	80067d8 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d901      	bls.n	8009dc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e086      	b.n	8009ed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dc8:	4b45      	ldr	r3, [pc, #276]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1f0      	bne.n	8009db6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009dd4:	4b42      	ldr	r3, [pc, #264]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	031b      	lsls	r3, r3, #12
 8009de2:	493f      	ldr	r1, [pc, #252]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	628b      	str	r3, [r1, #40]	; 0x28
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	025b      	lsls	r3, r3, #9
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	3b01      	subs	r3, #1
 8009e04:	041b      	lsls	r3, r3, #16
 8009e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	061b      	lsls	r3, r3, #24
 8009e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e18:	4931      	ldr	r1, [pc, #196]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e1e:	4b30      	ldr	r3, [pc, #192]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	492d      	ldr	r1, [pc, #180]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e30:	4b2b      	ldr	r3, [pc, #172]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	f023 0220 	bic.w	r2, r3, #32
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	4928      	ldr	r1, [pc, #160]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e42:	4b27      	ldr	r3, [pc, #156]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	4a26      	ldr	r2, [pc, #152]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e48:	f023 0310 	bic.w	r3, r3, #16
 8009e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e4e:	4b24      	ldr	r3, [pc, #144]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e52:	4b24      	ldr	r3, [pc, #144]	; (8009ee4 <RCCEx_PLL2_Config+0x160>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	69d2      	ldr	r2, [r2, #28]
 8009e5a:	00d2      	lsls	r2, r2, #3
 8009e5c:	4920      	ldr	r1, [pc, #128]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e62:	4b1f      	ldr	r3, [pc, #124]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e66:	4a1e      	ldr	r2, [pc, #120]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e68:	f043 0310 	orr.w	r3, r3, #16
 8009e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e74:	4b1a      	ldr	r3, [pc, #104]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	4a19      	ldr	r2, [pc, #100]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e80:	e00f      	b.n	8009ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d106      	bne.n	8009e96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e88:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8c:	4a14      	ldr	r2, [pc, #80]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e94:	e005      	b.n	8009ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e96:	4b12      	ldr	r3, [pc, #72]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	4a11      	ldr	r2, [pc, #68]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ea2:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a0e      	ldr	r2, [pc, #56]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eae:	f7fc fc93 	bl	80067d8 <HAL_GetTick>
 8009eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009eb4:	e008      	b.n	8009ec8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009eb6:	f7fc fc8f 	bl	80067d8 <HAL_GetTick>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d901      	bls.n	8009ec8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e006      	b.n	8009ed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ec8:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <RCCEx_PLL2_Config+0x15c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0f0      	beq.n	8009eb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	58024400 	.word	0x58024400
 8009ee4:	ffff0007 	.word	0xffff0007

08009ee8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ef6:	4b53      	ldr	r3, [pc, #332]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d101      	bne.n	8009f06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e099      	b.n	800a03a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f06:	4b4f      	ldr	r3, [pc, #316]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a4e      	ldr	r2, [pc, #312]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f12:	f7fc fc61 	bl	80067d8 <HAL_GetTick>
 8009f16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f18:	e008      	b.n	8009f2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f1a:	f7fc fc5d 	bl	80067d8 <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d901      	bls.n	8009f2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e086      	b.n	800a03a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f2c:	4b45      	ldr	r3, [pc, #276]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1f0      	bne.n	8009f1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f38:	4b42      	ldr	r3, [pc, #264]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	051b      	lsls	r3, r3, #20
 8009f46:	493f      	ldr	r1, [pc, #252]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	628b      	str	r3, [r1, #40]	; 0x28
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	025b      	lsls	r3, r3, #9
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	041b      	lsls	r3, r3, #16
 8009f6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	061b      	lsls	r3, r3, #24
 8009f78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f7c:	4931      	ldr	r1, [pc, #196]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f82:	4b30      	ldr	r3, [pc, #192]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	492d      	ldr	r1, [pc, #180]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f94:	4b2b      	ldr	r3, [pc, #172]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	4928      	ldr	r1, [pc, #160]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fa6:	4b27      	ldr	r3, [pc, #156]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	4a26      	ldr	r2, [pc, #152]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fb2:	4b24      	ldr	r3, [pc, #144]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fb6:	4b24      	ldr	r3, [pc, #144]	; (800a048 <RCCEx_PLL3_Config+0x160>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	69d2      	ldr	r2, [r2, #28]
 8009fbe:	00d2      	lsls	r2, r2, #3
 8009fc0:	4920      	ldr	r1, [pc, #128]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fc6:	4b1f      	ldr	r3, [pc, #124]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fca:	4a1e      	ldr	r2, [pc, #120]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4a19      	ldr	r2, [pc, #100]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fe4:	e00f      	b.n	800a006 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d106      	bne.n	8009ffa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009fec:	4b15      	ldr	r3, [pc, #84]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	4a14      	ldr	r2, [pc, #80]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009ff2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ff8:	e005      	b.n	800a006 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ffa:	4b12      	ldr	r3, [pc, #72]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 8009ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffe:	4a11      	ldr	r2, [pc, #68]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 800a000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a004:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a006:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a0e      	ldr	r2, [pc, #56]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 800a00c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a012:	f7fc fbe1 	bl	80067d8 <HAL_GetTick>
 800a016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a018:	e008      	b.n	800a02c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a01a:	f7fc fbdd 	bl	80067d8 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b02      	cmp	r3, #2
 800a026:	d901      	bls.n	800a02c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e006      	b.n	800a03a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <RCCEx_PLL3_Config+0x15c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0f0      	beq.n	800a01a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	58024400 	.word	0x58024400
 800a048:	ffff0007 	.word	0xffff0007

0800a04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e049      	b.n	800a0f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d106      	bne.n	800a078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7fa fa16 	bl	80044a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	4619      	mov	r1, r3
 800a08a:	4610      	mov	r0, r2
 800a08c:	f001 fa54 	bl	800b538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d001      	beq.n	800a114 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e04c      	b.n	800a1ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a26      	ldr	r2, [pc, #152]	; (800a1bc <HAL_TIM_Base_Start+0xc0>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d022      	beq.n	800a16c <HAL_TIM_Base_Start+0x70>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12e:	d01d      	beq.n	800a16c <HAL_TIM_Base_Start+0x70>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a22      	ldr	r2, [pc, #136]	; (800a1c0 <HAL_TIM_Base_Start+0xc4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d018      	beq.n	800a16c <HAL_TIM_Base_Start+0x70>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a21      	ldr	r2, [pc, #132]	; (800a1c4 <HAL_TIM_Base_Start+0xc8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d013      	beq.n	800a16c <HAL_TIM_Base_Start+0x70>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1f      	ldr	r2, [pc, #124]	; (800a1c8 <HAL_TIM_Base_Start+0xcc>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00e      	beq.n	800a16c <HAL_TIM_Base_Start+0x70>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a1e      	ldr	r2, [pc, #120]	; (800a1cc <HAL_TIM_Base_Start+0xd0>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d009      	beq.n	800a16c <HAL_TIM_Base_Start+0x70>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <HAL_TIM_Base_Start+0xd4>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_TIM_Base_Start+0x70>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a1b      	ldr	r2, [pc, #108]	; (800a1d4 <HAL_TIM_Base_Start+0xd8>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d115      	bne.n	800a198 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	4b19      	ldr	r3, [pc, #100]	; (800a1d8 <HAL_TIM_Base_Start+0xdc>)
 800a174:	4013      	ands	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2b06      	cmp	r3, #6
 800a17c:	d015      	beq.n	800a1aa <HAL_TIM_Base_Start+0xae>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a184:	d011      	beq.n	800a1aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f042 0201 	orr.w	r2, r2, #1
 800a194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a196:	e008      	b.n	800a1aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	e000      	b.n	800a1ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	40000800 	.word	0x40000800
 800a1c8:	40000c00 	.word	0x40000c00
 800a1cc:	40010400 	.word	0x40010400
 800a1d0:	40001800 	.word	0x40001800
 800a1d4:	40014000 	.word	0x40014000
 800a1d8:	00010007 	.word	0x00010007

0800a1dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6a1a      	ldr	r2, [r3, #32]
 800a1ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10f      	bne.n	800a214 <HAL_TIM_Base_Stop+0x38>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6a1a      	ldr	r2, [r3, #32]
 800a1fa:	f240 4344 	movw	r3, #1092	; 0x444
 800a1fe:	4013      	ands	r3, r2
 800a200:	2b00      	cmp	r3, #0
 800a202:	d107      	bne.n	800a214 <HAL_TIM_Base_Stop+0x38>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f022 0201 	bic.w	r2, r2, #1
 800a212:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d001      	beq.n	800a244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e054      	b.n	800a2ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f042 0201 	orr.w	r2, r2, #1
 800a25a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a26      	ldr	r2, [pc, #152]	; (800a2fc <HAL_TIM_Base_Start_IT+0xd0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d022      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x80>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26e:	d01d      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x80>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a22      	ldr	r2, [pc, #136]	; (800a300 <HAL_TIM_Base_Start_IT+0xd4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d018      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x80>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a21      	ldr	r2, [pc, #132]	; (800a304 <HAL_TIM_Base_Start_IT+0xd8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d013      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x80>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1f      	ldr	r2, [pc, #124]	; (800a308 <HAL_TIM_Base_Start_IT+0xdc>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00e      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x80>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1e      	ldr	r2, [pc, #120]	; (800a30c <HAL_TIM_Base_Start_IT+0xe0>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d009      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x80>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1c      	ldr	r2, [pc, #112]	; (800a310 <HAL_TIM_Base_Start_IT+0xe4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d004      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x80>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a1b      	ldr	r2, [pc, #108]	; (800a314 <HAL_TIM_Base_Start_IT+0xe8>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d115      	bne.n	800a2d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	4b19      	ldr	r3, [pc, #100]	; (800a318 <HAL_TIM_Base_Start_IT+0xec>)
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b06      	cmp	r3, #6
 800a2bc:	d015      	beq.n	800a2ea <HAL_TIM_Base_Start_IT+0xbe>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2c4:	d011      	beq.n	800a2ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0201 	orr.w	r2, r2, #1
 800a2d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d6:	e008      	b.n	800a2ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f042 0201 	orr.w	r2, r2, #1
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	e000      	b.n	800a2ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00
 800a30c:	40010400 	.word	0x40010400
 800a310:	40001800 	.word	0x40001800
 800a314:	40014000 	.word	0x40014000
 800a318:	00010007 	.word	0x00010007

0800a31c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f022 0201 	bic.w	r2, r2, #1
 800a332:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6a1a      	ldr	r2, [r3, #32]
 800a33a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a33e:	4013      	ands	r3, r2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10f      	bne.n	800a364 <HAL_TIM_Base_Stop_IT+0x48>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	f240 4344 	movw	r3, #1092	; 0x444
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d107      	bne.n	800a364 <HAL_TIM_Base_Stop_IT+0x48>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 0201 	bic.w	r2, r2, #1
 800a362:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e049      	b.n	800a420 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f841 	bl	800a428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	f001 f8bd 	bl	800b538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d109      	bne.n	800a460 <HAL_TIM_PWM_Start+0x24>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b01      	cmp	r3, #1
 800a456:	bf14      	ite	ne
 800a458:	2301      	movne	r3, #1
 800a45a:	2300      	moveq	r3, #0
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	e03c      	b.n	800a4da <HAL_TIM_PWM_Start+0x9e>
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b04      	cmp	r3, #4
 800a464:	d109      	bne.n	800a47a <HAL_TIM_PWM_Start+0x3e>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b01      	cmp	r3, #1
 800a470:	bf14      	ite	ne
 800a472:	2301      	movne	r3, #1
 800a474:	2300      	moveq	r3, #0
 800a476:	b2db      	uxtb	r3, r3
 800a478:	e02f      	b.n	800a4da <HAL_TIM_PWM_Start+0x9e>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b08      	cmp	r3, #8
 800a47e:	d109      	bne.n	800a494 <HAL_TIM_PWM_Start+0x58>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b01      	cmp	r3, #1
 800a48a:	bf14      	ite	ne
 800a48c:	2301      	movne	r3, #1
 800a48e:	2300      	moveq	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	e022      	b.n	800a4da <HAL_TIM_PWM_Start+0x9e>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2b0c      	cmp	r3, #12
 800a498:	d109      	bne.n	800a4ae <HAL_TIM_PWM_Start+0x72>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	bf14      	ite	ne
 800a4a6:	2301      	movne	r3, #1
 800a4a8:	2300      	moveq	r3, #0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	e015      	b.n	800a4da <HAL_TIM_PWM_Start+0x9e>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b10      	cmp	r3, #16
 800a4b2:	d109      	bne.n	800a4c8 <HAL_TIM_PWM_Start+0x8c>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	bf14      	ite	ne
 800a4c0:	2301      	movne	r3, #1
 800a4c2:	2300      	moveq	r3, #0
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	e008      	b.n	800a4da <HAL_TIM_PWM_Start+0x9e>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	bf14      	ite	ne
 800a4d4:	2301      	movne	r3, #1
 800a4d6:	2300      	moveq	r3, #0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e0a1      	b.n	800a626 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <HAL_TIM_PWM_Start+0xb6>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4f0:	e023      	b.n	800a53a <HAL_TIM_PWM_Start+0xfe>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d104      	bne.n	800a502 <HAL_TIM_PWM_Start+0xc6>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a500:	e01b      	b.n	800a53a <HAL_TIM_PWM_Start+0xfe>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b08      	cmp	r3, #8
 800a506:	d104      	bne.n	800a512 <HAL_TIM_PWM_Start+0xd6>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a510:	e013      	b.n	800a53a <HAL_TIM_PWM_Start+0xfe>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b0c      	cmp	r3, #12
 800a516:	d104      	bne.n	800a522 <HAL_TIM_PWM_Start+0xe6>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a520:	e00b      	b.n	800a53a <HAL_TIM_PWM_Start+0xfe>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b10      	cmp	r3, #16
 800a526:	d104      	bne.n	800a532 <HAL_TIM_PWM_Start+0xf6>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a530:	e003      	b.n	800a53a <HAL_TIM_PWM_Start+0xfe>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2202      	movs	r2, #2
 800a536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2201      	movs	r2, #1
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f001 fd30 	bl	800bfa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a38      	ldr	r2, [pc, #224]	; (800a630 <HAL_TIM_PWM_Start+0x1f4>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d013      	beq.n	800a57a <HAL_TIM_PWM_Start+0x13e>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a37      	ldr	r2, [pc, #220]	; (800a634 <HAL_TIM_PWM_Start+0x1f8>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00e      	beq.n	800a57a <HAL_TIM_PWM_Start+0x13e>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a35      	ldr	r2, [pc, #212]	; (800a638 <HAL_TIM_PWM_Start+0x1fc>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d009      	beq.n	800a57a <HAL_TIM_PWM_Start+0x13e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a34      	ldr	r2, [pc, #208]	; (800a63c <HAL_TIM_PWM_Start+0x200>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d004      	beq.n	800a57a <HAL_TIM_PWM_Start+0x13e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a32      	ldr	r2, [pc, #200]	; (800a640 <HAL_TIM_PWM_Start+0x204>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d101      	bne.n	800a57e <HAL_TIM_PWM_Start+0x142>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <HAL_TIM_PWM_Start+0x144>
 800a57e:	2300      	movs	r3, #0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d007      	beq.n	800a594 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a592:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a25      	ldr	r2, [pc, #148]	; (800a630 <HAL_TIM_PWM_Start+0x1f4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d022      	beq.n	800a5e4 <HAL_TIM_PWM_Start+0x1a8>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a6:	d01d      	beq.n	800a5e4 <HAL_TIM_PWM_Start+0x1a8>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a25      	ldr	r2, [pc, #148]	; (800a644 <HAL_TIM_PWM_Start+0x208>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d018      	beq.n	800a5e4 <HAL_TIM_PWM_Start+0x1a8>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a24      	ldr	r2, [pc, #144]	; (800a648 <HAL_TIM_PWM_Start+0x20c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d013      	beq.n	800a5e4 <HAL_TIM_PWM_Start+0x1a8>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a22      	ldr	r2, [pc, #136]	; (800a64c <HAL_TIM_PWM_Start+0x210>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d00e      	beq.n	800a5e4 <HAL_TIM_PWM_Start+0x1a8>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a1a      	ldr	r2, [pc, #104]	; (800a634 <HAL_TIM_PWM_Start+0x1f8>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d009      	beq.n	800a5e4 <HAL_TIM_PWM_Start+0x1a8>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a1e      	ldr	r2, [pc, #120]	; (800a650 <HAL_TIM_PWM_Start+0x214>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d004      	beq.n	800a5e4 <HAL_TIM_PWM_Start+0x1a8>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a16      	ldr	r2, [pc, #88]	; (800a638 <HAL_TIM_PWM_Start+0x1fc>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d115      	bne.n	800a610 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	4b1a      	ldr	r3, [pc, #104]	; (800a654 <HAL_TIM_PWM_Start+0x218>)
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b06      	cmp	r3, #6
 800a5f4:	d015      	beq.n	800a622 <HAL_TIM_PWM_Start+0x1e6>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5fc:	d011      	beq.n	800a622 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f042 0201 	orr.w	r2, r2, #1
 800a60c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a60e:	e008      	b.n	800a622 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f042 0201 	orr.w	r2, r2, #1
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e000      	b.n	800a624 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	40010000 	.word	0x40010000
 800a634:	40010400 	.word	0x40010400
 800a638:	40014000 	.word	0x40014000
 800a63c:	40014400 	.word	0x40014400
 800a640:	40014800 	.word	0x40014800
 800a644:	40000400 	.word	0x40000400
 800a648:	40000800 	.word	0x40000800
 800a64c:	40000c00 	.word	0x40000c00
 800a650:	40001800 	.word	0x40001800
 800a654:	00010007 	.word	0x00010007

0800a658 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2200      	movs	r2, #0
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 fc9c 	bl	800bfa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a3e      	ldr	r2, [pc, #248]	; (800a770 <HAL_TIM_PWM_Stop+0x118>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d013      	beq.n	800a6a2 <HAL_TIM_PWM_Stop+0x4a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a3d      	ldr	r2, [pc, #244]	; (800a774 <HAL_TIM_PWM_Stop+0x11c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d00e      	beq.n	800a6a2 <HAL_TIM_PWM_Stop+0x4a>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a3b      	ldr	r2, [pc, #236]	; (800a778 <HAL_TIM_PWM_Stop+0x120>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d009      	beq.n	800a6a2 <HAL_TIM_PWM_Stop+0x4a>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a3a      	ldr	r2, [pc, #232]	; (800a77c <HAL_TIM_PWM_Stop+0x124>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d004      	beq.n	800a6a2 <HAL_TIM_PWM_Stop+0x4a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a38      	ldr	r2, [pc, #224]	; (800a780 <HAL_TIM_PWM_Stop+0x128>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d101      	bne.n	800a6a6 <HAL_TIM_PWM_Stop+0x4e>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e000      	b.n	800a6a8 <HAL_TIM_PWM_Stop+0x50>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d017      	beq.n	800a6dc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6a1a      	ldr	r2, [r3, #32]
 800a6b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10f      	bne.n	800a6dc <HAL_TIM_PWM_Stop+0x84>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6a1a      	ldr	r2, [r3, #32]
 800a6c2:	f240 4344 	movw	r3, #1092	; 0x444
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d107      	bne.n	800a6dc <HAL_TIM_PWM_Stop+0x84>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6a1a      	ldr	r2, [r3, #32]
 800a6e2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10f      	bne.n	800a70c <HAL_TIM_PWM_Stop+0xb4>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6a1a      	ldr	r2, [r3, #32]
 800a6f2:	f240 4344 	movw	r3, #1092	; 0x444
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d107      	bne.n	800a70c <HAL_TIM_PWM_Stop+0xb4>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 0201 	bic.w	r2, r2, #1
 800a70a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d104      	bne.n	800a71c <HAL_TIM_PWM_Stop+0xc4>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a71a:	e023      	b.n	800a764 <HAL_TIM_PWM_Stop+0x10c>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d104      	bne.n	800a72c <HAL_TIM_PWM_Stop+0xd4>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a72a:	e01b      	b.n	800a764 <HAL_TIM_PWM_Stop+0x10c>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b08      	cmp	r3, #8
 800a730:	d104      	bne.n	800a73c <HAL_TIM_PWM_Stop+0xe4>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a73a:	e013      	b.n	800a764 <HAL_TIM_PWM_Stop+0x10c>
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b0c      	cmp	r3, #12
 800a740:	d104      	bne.n	800a74c <HAL_TIM_PWM_Stop+0xf4>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a74a:	e00b      	b.n	800a764 <HAL_TIM_PWM_Stop+0x10c>
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b10      	cmp	r3, #16
 800a750:	d104      	bne.n	800a75c <HAL_TIM_PWM_Stop+0x104>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a75a:	e003      	b.n	800a764 <HAL_TIM_PWM_Stop+0x10c>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	40010000 	.word	0x40010000
 800a774:	40010400 	.word	0x40010400
 800a778:	40014000 	.word	0x40014000
 800a77c:	40014400 	.word	0x40014400
 800a780:	40014800 	.word	0x40014800

0800a784 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e049      	b.n	800a82a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f841 	bl	800a832 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f000 feb8 	bl	800b538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a83a:	bf00      	nop
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b082      	sub	sp, #8
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2200      	movs	r2, #0
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 fba5 	bl	800bfa8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	6a1a      	ldr	r2, [r3, #32]
 800a864:	f241 1311 	movw	r3, #4369	; 0x1111
 800a868:	4013      	ands	r3, r2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10f      	bne.n	800a88e <HAL_TIM_IC_Stop+0x48>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	f240 4344 	movw	r3, #1092	; 0x444
 800a878:	4013      	ands	r3, r2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d107      	bne.n	800a88e <HAL_TIM_IC_Stop+0x48>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0201 	bic.w	r2, r2, #1
 800a88c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d104      	bne.n	800a89e <HAL_TIM_IC_Stop+0x58>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a89c:	e023      	b.n	800a8e6 <HAL_TIM_IC_Stop+0xa0>
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d104      	bne.n	800a8ae <HAL_TIM_IC_Stop+0x68>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8ac:	e01b      	b.n	800a8e6 <HAL_TIM_IC_Stop+0xa0>
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b08      	cmp	r3, #8
 800a8b2:	d104      	bne.n	800a8be <HAL_TIM_IC_Stop+0x78>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8bc:	e013      	b.n	800a8e6 <HAL_TIM_IC_Stop+0xa0>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2b0c      	cmp	r3, #12
 800a8c2:	d104      	bne.n	800a8ce <HAL_TIM_IC_Stop+0x88>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8cc:	e00b      	b.n	800a8e6 <HAL_TIM_IC_Stop+0xa0>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2b10      	cmp	r3, #16
 800a8d2:	d104      	bne.n	800a8de <HAL_TIM_IC_Stop+0x98>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8dc:	e003      	b.n	800a8e6 <HAL_TIM_IC_Stop+0xa0>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <HAL_TIM_IC_Stop+0xb0>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8f4:	e013      	b.n	800a91e <HAL_TIM_IC_Stop+0xd8>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d104      	bne.n	800a906 <HAL_TIM_IC_Stop+0xc0>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a904:	e00b      	b.n	800a91e <HAL_TIM_IC_Stop+0xd8>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d104      	bne.n	800a916 <HAL_TIM_IC_Stop+0xd0>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a914:	e003      	b.n	800a91e <HAL_TIM_IC_Stop+0xd8>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d104      	bne.n	800a946 <HAL_TIM_IC_Start_IT+0x1e>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a942:	b2db      	uxtb	r3, r3
 800a944:	e023      	b.n	800a98e <HAL_TIM_IC_Start_IT+0x66>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d104      	bne.n	800a956 <HAL_TIM_IC_Start_IT+0x2e>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a952:	b2db      	uxtb	r3, r3
 800a954:	e01b      	b.n	800a98e <HAL_TIM_IC_Start_IT+0x66>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	2b08      	cmp	r3, #8
 800a95a:	d104      	bne.n	800a966 <HAL_TIM_IC_Start_IT+0x3e>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a962:	b2db      	uxtb	r3, r3
 800a964:	e013      	b.n	800a98e <HAL_TIM_IC_Start_IT+0x66>
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b0c      	cmp	r3, #12
 800a96a:	d104      	bne.n	800a976 <HAL_TIM_IC_Start_IT+0x4e>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a972:	b2db      	uxtb	r3, r3
 800a974:	e00b      	b.n	800a98e <HAL_TIM_IC_Start_IT+0x66>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b10      	cmp	r3, #16
 800a97a:	d104      	bne.n	800a986 <HAL_TIM_IC_Start_IT+0x5e>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a982:	b2db      	uxtb	r3, r3
 800a984:	e003      	b.n	800a98e <HAL_TIM_IC_Start_IT+0x66>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d104      	bne.n	800a9a0 <HAL_TIM_IC_Start_IT+0x78>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	e013      	b.n	800a9c8 <HAL_TIM_IC_Start_IT+0xa0>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b04      	cmp	r3, #4
 800a9a4:	d104      	bne.n	800a9b0 <HAL_TIM_IC_Start_IT+0x88>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	e00b      	b.n	800a9c8 <HAL_TIM_IC_Start_IT+0xa0>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2b08      	cmp	r3, #8
 800a9b4:	d104      	bne.n	800a9c0 <HAL_TIM_IC_Start_IT+0x98>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	e003      	b.n	800a9c8 <HAL_TIM_IC_Start_IT+0xa0>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9ca:	7bbb      	ldrb	r3, [r7, #14]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d102      	bne.n	800a9d6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9d0:	7b7b      	ldrb	r3, [r7, #13]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d001      	beq.n	800a9da <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e0e2      	b.n	800aba0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <HAL_TIM_IC_Start_IT+0xc2>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9e8:	e023      	b.n	800aa32 <HAL_TIM_IC_Start_IT+0x10a>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d104      	bne.n	800a9fa <HAL_TIM_IC_Start_IT+0xd2>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9f8:	e01b      	b.n	800aa32 <HAL_TIM_IC_Start_IT+0x10a>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d104      	bne.n	800aa0a <HAL_TIM_IC_Start_IT+0xe2>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa08:	e013      	b.n	800aa32 <HAL_TIM_IC_Start_IT+0x10a>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	2b0c      	cmp	r3, #12
 800aa0e:	d104      	bne.n	800aa1a <HAL_TIM_IC_Start_IT+0xf2>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2202      	movs	r2, #2
 800aa14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa18:	e00b      	b.n	800aa32 <HAL_TIM_IC_Start_IT+0x10a>
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d104      	bne.n	800aa2a <HAL_TIM_IC_Start_IT+0x102>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa28:	e003      	b.n	800aa32 <HAL_TIM_IC_Start_IT+0x10a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <HAL_TIM_IC_Start_IT+0x11a>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa40:	e013      	b.n	800aa6a <HAL_TIM_IC_Start_IT+0x142>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d104      	bne.n	800aa52 <HAL_TIM_IC_Start_IT+0x12a>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa50:	e00b      	b.n	800aa6a <HAL_TIM_IC_Start_IT+0x142>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b08      	cmp	r3, #8
 800aa56:	d104      	bne.n	800aa62 <HAL_TIM_IC_Start_IT+0x13a>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa60:	e003      	b.n	800aa6a <HAL_TIM_IC_Start_IT+0x142>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2202      	movs	r2, #2
 800aa66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b0c      	cmp	r3, #12
 800aa6e:	d841      	bhi.n	800aaf4 <HAL_TIM_IC_Start_IT+0x1cc>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <HAL_TIM_IC_Start_IT+0x150>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aaad 	.word	0x0800aaad
 800aa7c:	0800aaf5 	.word	0x0800aaf5
 800aa80:	0800aaf5 	.word	0x0800aaf5
 800aa84:	0800aaf5 	.word	0x0800aaf5
 800aa88:	0800aabf 	.word	0x0800aabf
 800aa8c:	0800aaf5 	.word	0x0800aaf5
 800aa90:	0800aaf5 	.word	0x0800aaf5
 800aa94:	0800aaf5 	.word	0x0800aaf5
 800aa98:	0800aad1 	.word	0x0800aad1
 800aa9c:	0800aaf5 	.word	0x0800aaf5
 800aaa0:	0800aaf5 	.word	0x0800aaf5
 800aaa4:	0800aaf5 	.word	0x0800aaf5
 800aaa8:	0800aae3 	.word	0x0800aae3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68da      	ldr	r2, [r3, #12]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0202 	orr.w	r2, r2, #2
 800aaba:	60da      	str	r2, [r3, #12]
      break;
 800aabc:	e01d      	b.n	800aafa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68da      	ldr	r2, [r3, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f042 0204 	orr.w	r2, r2, #4
 800aacc:	60da      	str	r2, [r3, #12]
      break;
 800aace:	e014      	b.n	800aafa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68da      	ldr	r2, [r3, #12]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0208 	orr.w	r2, r2, #8
 800aade:	60da      	str	r2, [r3, #12]
      break;
 800aae0:	e00b      	b.n	800aafa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f042 0210 	orr.w	r2, r2, #16
 800aaf0:	60da      	str	r2, [r3, #12]
      break;
 800aaf2:	e002      	b.n	800aafa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf8:	bf00      	nop
  }

  if (status == HAL_OK)
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d14e      	bne.n	800ab9e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2201      	movs	r2, #1
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 fa4d 	bl	800bfa8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a25      	ldr	r2, [pc, #148]	; (800aba8 <HAL_TIM_IC_Start_IT+0x280>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d022      	beq.n	800ab5e <HAL_TIM_IC_Start_IT+0x236>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab20:	d01d      	beq.n	800ab5e <HAL_TIM_IC_Start_IT+0x236>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a21      	ldr	r2, [pc, #132]	; (800abac <HAL_TIM_IC_Start_IT+0x284>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d018      	beq.n	800ab5e <HAL_TIM_IC_Start_IT+0x236>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <HAL_TIM_IC_Start_IT+0x288>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d013      	beq.n	800ab5e <HAL_TIM_IC_Start_IT+0x236>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a1e      	ldr	r2, [pc, #120]	; (800abb4 <HAL_TIM_IC_Start_IT+0x28c>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d00e      	beq.n	800ab5e <HAL_TIM_IC_Start_IT+0x236>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a1c      	ldr	r2, [pc, #112]	; (800abb8 <HAL_TIM_IC_Start_IT+0x290>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d009      	beq.n	800ab5e <HAL_TIM_IC_Start_IT+0x236>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a1b      	ldr	r2, [pc, #108]	; (800abbc <HAL_TIM_IC_Start_IT+0x294>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d004      	beq.n	800ab5e <HAL_TIM_IC_Start_IT+0x236>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a19      	ldr	r2, [pc, #100]	; (800abc0 <HAL_TIM_IC_Start_IT+0x298>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d115      	bne.n	800ab8a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	4b17      	ldr	r3, [pc, #92]	; (800abc4 <HAL_TIM_IC_Start_IT+0x29c>)
 800ab66:	4013      	ands	r3, r2
 800ab68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b06      	cmp	r3, #6
 800ab6e:	d015      	beq.n	800ab9c <HAL_TIM_IC_Start_IT+0x274>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab76:	d011      	beq.n	800ab9c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f042 0201 	orr.w	r2, r2, #1
 800ab86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab88:	e008      	b.n	800ab9c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f042 0201 	orr.w	r2, r2, #1
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	e000      	b.n	800ab9e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab9c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	40010000 	.word	0x40010000
 800abac:	40000400 	.word	0x40000400
 800abb0:	40000800 	.word	0x40000800
 800abb4:	40000c00 	.word	0x40000c00
 800abb8:	40010400 	.word	0x40010400
 800abbc:	40001800 	.word	0x40001800
 800abc0:	40014000 	.word	0x40014000
 800abc4:	00010007 	.word	0x00010007

0800abc8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2200      	movs	r2, #0
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 f9e2 	bl	800bfa8 <TIM_CCxChannelCmd>

  switch (Channel)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	2b0c      	cmp	r3, #12
 800abe8:	d854      	bhi.n	800ac94 <HAL_TIM_IC_Stop_DMA+0xcc>
 800abea:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <HAL_TIM_IC_Stop_DMA+0x28>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac25 	.word	0x0800ac25
 800abf4:	0800ac95 	.word	0x0800ac95
 800abf8:	0800ac95 	.word	0x0800ac95
 800abfc:	0800ac95 	.word	0x0800ac95
 800ac00:	0800ac41 	.word	0x0800ac41
 800ac04:	0800ac95 	.word	0x0800ac95
 800ac08:	0800ac95 	.word	0x0800ac95
 800ac0c:	0800ac95 	.word	0x0800ac95
 800ac10:	0800ac5d 	.word	0x0800ac5d
 800ac14:	0800ac95 	.word	0x0800ac95
 800ac18:	0800ac95 	.word	0x0800ac95
 800ac1c:	0800ac95 	.word	0x0800ac95
 800ac20:	0800ac79 	.word	0x0800ac79
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68da      	ldr	r2, [r3, #12]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ac32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fc fa69 	bl	8007110 <HAL_DMA_Abort_IT>
      break;
 800ac3e:	e02c      	b.n	800ac9a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fc fa5b 	bl	8007110 <HAL_DMA_Abort_IT>
      break;
 800ac5a:	e01e      	b.n	800ac9a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fc fa4d 	bl	8007110 <HAL_DMA_Abort_IT>
      break;
 800ac76:	e010      	b.n	800ac9a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fc fa3f 	bl	8007110 <HAL_DMA_Abort_IT>
      break;
 800ac92:	e002      	b.n	800ac9a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	73fb      	strb	r3, [r7, #15]
      break;
 800ac98:	bf00      	nop
  }

  if (status == HAL_OK)
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d15f      	bne.n	800ad60 <HAL_TIM_IC_Stop_DMA+0x198>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6a1a      	ldr	r2, [r3, #32]
 800aca6:	f241 1311 	movw	r3, #4369	; 0x1111
 800acaa:	4013      	ands	r3, r2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10f      	bne.n	800acd0 <HAL_TIM_IC_Stop_DMA+0x108>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6a1a      	ldr	r2, [r3, #32]
 800acb6:	f240 4344 	movw	r3, #1092	; 0x444
 800acba:	4013      	ands	r3, r2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d107      	bne.n	800acd0 <HAL_TIM_IC_Stop_DMA+0x108>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 0201 	bic.w	r2, r2, #1
 800acce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d104      	bne.n	800ace0 <HAL_TIM_IC_Stop_DMA+0x118>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acde:	e023      	b.n	800ad28 <HAL_TIM_IC_Stop_DMA+0x160>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	d104      	bne.n	800acf0 <HAL_TIM_IC_Stop_DMA+0x128>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acee:	e01b      	b.n	800ad28 <HAL_TIM_IC_Stop_DMA+0x160>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b08      	cmp	r3, #8
 800acf4:	d104      	bne.n	800ad00 <HAL_TIM_IC_Stop_DMA+0x138>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acfe:	e013      	b.n	800ad28 <HAL_TIM_IC_Stop_DMA+0x160>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b0c      	cmp	r3, #12
 800ad04:	d104      	bne.n	800ad10 <HAL_TIM_IC_Stop_DMA+0x148>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad0e:	e00b      	b.n	800ad28 <HAL_TIM_IC_Stop_DMA+0x160>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b10      	cmp	r3, #16
 800ad14:	d104      	bne.n	800ad20 <HAL_TIM_IC_Stop_DMA+0x158>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad1e:	e003      	b.n	800ad28 <HAL_TIM_IC_Stop_DMA+0x160>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d104      	bne.n	800ad38 <HAL_TIM_IC_Stop_DMA+0x170>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad36:	e013      	b.n	800ad60 <HAL_TIM_IC_Stop_DMA+0x198>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b04      	cmp	r3, #4
 800ad3c:	d104      	bne.n	800ad48 <HAL_TIM_IC_Stop_DMA+0x180>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad46:	e00b      	b.n	800ad60 <HAL_TIM_IC_Stop_DMA+0x198>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b08      	cmp	r3, #8
 800ad4c:	d104      	bne.n	800ad58 <HAL_TIM_IC_Stop_DMA+0x190>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad56:	e003      	b.n	800ad60 <HAL_TIM_IC_Stop_DMA+0x198>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop

0800ad6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d122      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d11b      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f06f 0202 	mvn.w	r2, #2
 800ad98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	f003 0303 	and.w	r3, r3, #3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7f8 fd34 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 800adb4:	e005      	b.n	800adc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fba0 	bl	800b4fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fba7 	bl	800b510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	f003 0304 	and.w	r3, r3, #4
 800add2:	2b04      	cmp	r3, #4
 800add4:	d122      	bne.n	800ae1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	f003 0304 	and.w	r3, r3, #4
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	d11b      	bne.n	800ae1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f06f 0204 	mvn.w	r2, #4
 800adec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2202      	movs	r2, #2
 800adf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7f8 fd0a 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 800ae08:	e005      	b.n	800ae16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fb76 	bl	800b4fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fb7d 	bl	800b510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b08      	cmp	r3, #8
 800ae28:	d122      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f003 0308 	and.w	r3, r3, #8
 800ae34:	2b08      	cmp	r3, #8
 800ae36:	d11b      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f06f 0208 	mvn.w	r2, #8
 800ae40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2204      	movs	r2, #4
 800ae46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	69db      	ldr	r3, [r3, #28]
 800ae4e:	f003 0303 	and.w	r3, r3, #3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7f8 fce0 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 800ae5c:	e005      	b.n	800ae6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fb4c 	bl	800b4fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fb53 	bl	800b510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	f003 0310 	and.w	r3, r3, #16
 800ae7a:	2b10      	cmp	r3, #16
 800ae7c:	d122      	bne.n	800aec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b10      	cmp	r3, #16
 800ae8a:	d11b      	bne.n	800aec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f06f 0210 	mvn.w	r2, #16
 800ae94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2208      	movs	r2, #8
 800ae9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7f8 fcb6 	bl	800381c <HAL_TIM_IC_CaptureCallback>
 800aeb0:	e005      	b.n	800aebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fb22 	bl	800b4fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fb29 	bl	800b510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d10e      	bne.n	800aef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d107      	bne.n	800aef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f06f 0201 	mvn.w	r2, #1
 800aee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7f8 fcec 	bl	80038c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aefa:	2b80      	cmp	r3, #128	; 0x80
 800aefc:	d10e      	bne.n	800af1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af08:	2b80      	cmp	r3, #128	; 0x80
 800af0a:	d107      	bne.n	800af1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 f904 	bl	800c124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af2a:	d10e      	bne.n	800af4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	2b80      	cmp	r3, #128	; 0x80
 800af38:	d107      	bne.n	800af4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 f8f7 	bl	800c138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af54:	2b40      	cmp	r3, #64	; 0x40
 800af56:	d10e      	bne.n	800af76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af62:	2b40      	cmp	r3, #64	; 0x40
 800af64:	d107      	bne.n	800af76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fad7 	bl	800b524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b20      	cmp	r3, #32
 800af82:	d10e      	bne.n	800afa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	f003 0320 	and.w	r3, r3, #32
 800af8e:	2b20      	cmp	r3, #32
 800af90:	d107      	bne.n	800afa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f06f 0220 	mvn.w	r2, #32
 800af9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 f8b7 	bl	800c110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afa2:	bf00      	nop
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b086      	sub	sp, #24
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_TIM_IC_ConfigChannel+0x1e>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e088      	b.n	800b0da <HAL_TIM_IC_ConfigChannel+0x130>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d11b      	bne.n	800b00e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6818      	ldr	r0, [r3, #0]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	6819      	ldr	r1, [r3, #0]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f000 fe17 	bl	800bc18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	699a      	ldr	r2, [r3, #24]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f022 020c 	bic.w	r2, r2, #12
 800aff8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6999      	ldr	r1, [r3, #24]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	430a      	orrs	r2, r1
 800b00a:	619a      	str	r2, [r3, #24]
 800b00c:	e060      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d11c      	bne.n	800b04e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	6819      	ldr	r1, [r3, #0]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f000 fe9b 	bl	800bd5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b036:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6999      	ldr	r1, [r3, #24]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	021a      	lsls	r2, r3, #8
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	430a      	orrs	r2, r1
 800b04a:	619a      	str	r2, [r3, #24]
 800b04c:	e040      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b08      	cmp	r3, #8
 800b052:	d11b      	bne.n	800b08c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	6819      	ldr	r1, [r3, #0]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	f000 fee8 	bl	800be38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 020c 	bic.w	r2, r2, #12
 800b076:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	69d9      	ldr	r1, [r3, #28]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	430a      	orrs	r2, r1
 800b088:	61da      	str	r2, [r3, #28]
 800b08a:	e021      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b0c      	cmp	r3, #12
 800b090:	d11c      	bne.n	800b0cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	6819      	ldr	r1, [r3, #0]
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	f000 ff05 	bl	800beb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69da      	ldr	r2, [r3, #28]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b0b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	69d9      	ldr	r1, [r3, #28]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	021a      	lsls	r2, r3, #8
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	61da      	str	r2, [r3, #28]
 800b0ca:	e001      	b.n	800b0d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d101      	bne.n	800b102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e0ff      	b.n	800b302 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b14      	cmp	r3, #20
 800b10e:	f200 80f0 	bhi.w	800b2f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b112:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b16d 	.word	0x0800b16d
 800b11c:	0800b2f3 	.word	0x0800b2f3
 800b120:	0800b2f3 	.word	0x0800b2f3
 800b124:	0800b2f3 	.word	0x0800b2f3
 800b128:	0800b1ad 	.word	0x0800b1ad
 800b12c:	0800b2f3 	.word	0x0800b2f3
 800b130:	0800b2f3 	.word	0x0800b2f3
 800b134:	0800b2f3 	.word	0x0800b2f3
 800b138:	0800b1ef 	.word	0x0800b1ef
 800b13c:	0800b2f3 	.word	0x0800b2f3
 800b140:	0800b2f3 	.word	0x0800b2f3
 800b144:	0800b2f3 	.word	0x0800b2f3
 800b148:	0800b22f 	.word	0x0800b22f
 800b14c:	0800b2f3 	.word	0x0800b2f3
 800b150:	0800b2f3 	.word	0x0800b2f3
 800b154:	0800b2f3 	.word	0x0800b2f3
 800b158:	0800b271 	.word	0x0800b271
 800b15c:	0800b2f3 	.word	0x0800b2f3
 800b160:	0800b2f3 	.word	0x0800b2f3
 800b164:	0800b2f3 	.word	0x0800b2f3
 800b168:	0800b2b1 	.word	0x0800b2b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68b9      	ldr	r1, [r7, #8]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 fa7a 	bl	800b66c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	699a      	ldr	r2, [r3, #24]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f042 0208 	orr.w	r2, r2, #8
 800b186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	699a      	ldr	r2, [r3, #24]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0204 	bic.w	r2, r2, #4
 800b196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6999      	ldr	r1, [r3, #24]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	691a      	ldr	r2, [r3, #16]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	619a      	str	r2, [r3, #24]
      break;
 800b1aa:	e0a5      	b.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68b9      	ldr	r1, [r7, #8]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 faea 	bl	800b78c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	699a      	ldr	r2, [r3, #24]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	699a      	ldr	r2, [r3, #24]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6999      	ldr	r1, [r3, #24]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	021a      	lsls	r2, r3, #8
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	619a      	str	r2, [r3, #24]
      break;
 800b1ec:	e084      	b.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68b9      	ldr	r1, [r7, #8]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fb53 	bl	800b8a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	69da      	ldr	r2, [r3, #28]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f042 0208 	orr.w	r2, r2, #8
 800b208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	69da      	ldr	r2, [r3, #28]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f022 0204 	bic.w	r2, r2, #4
 800b218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69d9      	ldr	r1, [r3, #28]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	691a      	ldr	r2, [r3, #16]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	61da      	str	r2, [r3, #28]
      break;
 800b22c:	e064      	b.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	4618      	mov	r0, r3
 800b236:	f000 fbbb 	bl	800b9b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	69da      	ldr	r2, [r3, #28]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	69da      	ldr	r2, [r3, #28]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	69d9      	ldr	r1, [r3, #28]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	021a      	lsls	r2, r3, #8
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	61da      	str	r2, [r3, #28]
      break;
 800b26e:	e043      	b.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	68b9      	ldr	r1, [r7, #8]
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fc04 	bl	800ba84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0208 	orr.w	r2, r2, #8
 800b28a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f022 0204 	bic.w	r2, r2, #4
 800b29a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	691a      	ldr	r2, [r3, #16]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b2ae:	e023      	b.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68b9      	ldr	r1, [r7, #8]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fc48 	bl	800bb4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	021a      	lsls	r2, r3, #8
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b2f0:	e002      	b.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop

0800b30c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b320:	2b01      	cmp	r3, #1
 800b322:	d101      	bne.n	800b328 <HAL_TIM_ConfigClockSource+0x1c>
 800b324:	2302      	movs	r3, #2
 800b326:	e0dc      	b.n	800b4e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2202      	movs	r2, #2
 800b334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	4b6a      	ldr	r3, [pc, #424]	; (800b4ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800b344:	4013      	ands	r3, r2
 800b346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b34e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a64      	ldr	r2, [pc, #400]	; (800b4f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	f000 80a9 	beq.w	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b364:	4a62      	ldr	r2, [pc, #392]	; (800b4f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b366:	4293      	cmp	r3, r2
 800b368:	f200 80ae 	bhi.w	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b36c:	4a61      	ldr	r2, [pc, #388]	; (800b4f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	f000 80a1 	beq.w	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b374:	4a5f      	ldr	r2, [pc, #380]	; (800b4f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b376:	4293      	cmp	r3, r2
 800b378:	f200 80a6 	bhi.w	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b37c:	4a5e      	ldr	r2, [pc, #376]	; (800b4f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	f000 8099 	beq.w	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b384:	4a5c      	ldr	r2, [pc, #368]	; (800b4f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b386:	4293      	cmp	r3, r2
 800b388:	f200 809e 	bhi.w	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b38c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b390:	f000 8091 	beq.w	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b394:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b398:	f200 8096 	bhi.w	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b39c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3a0:	f000 8089 	beq.w	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3a8:	f200 808e 	bhi.w	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3b0:	d03e      	beq.n	800b430 <HAL_TIM_ConfigClockSource+0x124>
 800b3b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3b6:	f200 8087 	bhi.w	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3be:	f000 8086 	beq.w	800b4ce <HAL_TIM_ConfigClockSource+0x1c2>
 800b3c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c6:	d87f      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3c8:	2b70      	cmp	r3, #112	; 0x70
 800b3ca:	d01a      	beq.n	800b402 <HAL_TIM_ConfigClockSource+0xf6>
 800b3cc:	2b70      	cmp	r3, #112	; 0x70
 800b3ce:	d87b      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3d0:	2b60      	cmp	r3, #96	; 0x60
 800b3d2:	d050      	beq.n	800b476 <HAL_TIM_ConfigClockSource+0x16a>
 800b3d4:	2b60      	cmp	r3, #96	; 0x60
 800b3d6:	d877      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3d8:	2b50      	cmp	r3, #80	; 0x50
 800b3da:	d03c      	beq.n	800b456 <HAL_TIM_ConfigClockSource+0x14a>
 800b3dc:	2b50      	cmp	r3, #80	; 0x50
 800b3de:	d873      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	d058      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0x18a>
 800b3e4:	2b40      	cmp	r3, #64	; 0x40
 800b3e6:	d86f      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3e8:	2b30      	cmp	r3, #48	; 0x30
 800b3ea:	d064      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3ec:	2b30      	cmp	r3, #48	; 0x30
 800b3ee:	d86b      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	d060      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f4:	2b20      	cmp	r3, #32
 800b3f6:	d867      	bhi.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d05c      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3fc:	2b10      	cmp	r3, #16
 800b3fe:	d05a      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b400:	e062      	b.n	800b4c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6818      	ldr	r0, [r3, #0]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	6899      	ldr	r1, [r3, #8]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	f000 fda9 	bl	800bf68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	609a      	str	r2, [r3, #8]
      break;
 800b42e:	e04f      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	6899      	ldr	r1, [r3, #8]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f000 fd92 	bl	800bf68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689a      	ldr	r2, [r3, #8]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b452:	609a      	str	r2, [r3, #8]
      break;
 800b454:	e03c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	6859      	ldr	r1, [r3, #4]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	461a      	mov	r2, r3
 800b464:	f000 fc4c 	bl	800bd00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2150      	movs	r1, #80	; 0x50
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 fd5c 	bl	800bf2c <TIM_ITRx_SetConfig>
      break;
 800b474:	e02c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	6859      	ldr	r1, [r3, #4]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	461a      	mov	r2, r3
 800b484:	f000 fca8 	bl	800bdd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2160      	movs	r1, #96	; 0x60
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fd4c 	bl	800bf2c <TIM_ITRx_SetConfig>
      break;
 800b494:	e01c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	6859      	ldr	r1, [r3, #4]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f000 fc2c 	bl	800bd00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2140      	movs	r1, #64	; 0x40
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fd3c 	bl	800bf2c <TIM_ITRx_SetConfig>
      break;
 800b4b4:	e00c      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f000 fd33 	bl	800bf2c <TIM_ITRx_SetConfig>
      break;
 800b4c6:	e003      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b4cc:	e000      	b.n	800b4d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b4ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	ffceff88 	.word	0xffceff88
 800b4f0:	00100040 	.word	0x00100040
 800b4f4:	00100030 	.word	0x00100030
 800b4f8:	00100020 	.word	0x00100020

0800b4fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a40      	ldr	r2, [pc, #256]	; (800b64c <TIM_Base_SetConfig+0x114>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d013      	beq.n	800b578 <TIM_Base_SetConfig+0x40>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b556:	d00f      	beq.n	800b578 <TIM_Base_SetConfig+0x40>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a3d      	ldr	r2, [pc, #244]	; (800b650 <TIM_Base_SetConfig+0x118>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d00b      	beq.n	800b578 <TIM_Base_SetConfig+0x40>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a3c      	ldr	r2, [pc, #240]	; (800b654 <TIM_Base_SetConfig+0x11c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d007      	beq.n	800b578 <TIM_Base_SetConfig+0x40>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a3b      	ldr	r2, [pc, #236]	; (800b658 <TIM_Base_SetConfig+0x120>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d003      	beq.n	800b578 <TIM_Base_SetConfig+0x40>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a3a      	ldr	r2, [pc, #232]	; (800b65c <TIM_Base_SetConfig+0x124>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d108      	bne.n	800b58a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b57e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	4313      	orrs	r3, r2
 800b588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a2f      	ldr	r2, [pc, #188]	; (800b64c <TIM_Base_SetConfig+0x114>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d01f      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b598:	d01b      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a2c      	ldr	r2, [pc, #176]	; (800b650 <TIM_Base_SetConfig+0x118>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d017      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a2b      	ldr	r2, [pc, #172]	; (800b654 <TIM_Base_SetConfig+0x11c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d013      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a2a      	ldr	r2, [pc, #168]	; (800b658 <TIM_Base_SetConfig+0x120>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d00f      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a29      	ldr	r2, [pc, #164]	; (800b65c <TIM_Base_SetConfig+0x124>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d00b      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a28      	ldr	r2, [pc, #160]	; (800b660 <TIM_Base_SetConfig+0x128>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d007      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a27      	ldr	r2, [pc, #156]	; (800b664 <TIM_Base_SetConfig+0x12c>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d003      	beq.n	800b5d2 <TIM_Base_SetConfig+0x9a>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a26      	ldr	r2, [pc, #152]	; (800b668 <TIM_Base_SetConfig+0x130>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d108      	bne.n	800b5e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	695b      	ldr	r3, [r3, #20]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a10      	ldr	r2, [pc, #64]	; (800b64c <TIM_Base_SetConfig+0x114>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d00f      	beq.n	800b630 <TIM_Base_SetConfig+0xf8>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a12      	ldr	r2, [pc, #72]	; (800b65c <TIM_Base_SetConfig+0x124>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d00b      	beq.n	800b630 <TIM_Base_SetConfig+0xf8>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a11      	ldr	r2, [pc, #68]	; (800b660 <TIM_Base_SetConfig+0x128>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d007      	beq.n	800b630 <TIM_Base_SetConfig+0xf8>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a10      	ldr	r2, [pc, #64]	; (800b664 <TIM_Base_SetConfig+0x12c>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d003      	beq.n	800b630 <TIM_Base_SetConfig+0xf8>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a0f      	ldr	r2, [pc, #60]	; (800b668 <TIM_Base_SetConfig+0x130>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d103      	bne.n	800b638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	615a      	str	r2, [r3, #20]
}
 800b63e:	bf00      	nop
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	40010000 	.word	0x40010000
 800b650:	40000400 	.word	0x40000400
 800b654:	40000800 	.word	0x40000800
 800b658:	40000c00 	.word	0x40000c00
 800b65c:	40010400 	.word	0x40010400
 800b660:	40014000 	.word	0x40014000
 800b664:	40014400 	.word	0x40014400
 800b668:	40014800 	.word	0x40014800

0800b66c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	f023 0201 	bic.w	r2, r3, #1
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4b37      	ldr	r3, [pc, #220]	; (800b774 <TIM_OC1_SetConfig+0x108>)
 800b698:	4013      	ands	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f023 0303 	bic.w	r3, r3, #3
 800b6a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f023 0302 	bic.w	r3, r3, #2
 800b6b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a2d      	ldr	r2, [pc, #180]	; (800b778 <TIM_OC1_SetConfig+0x10c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00f      	beq.n	800b6e8 <TIM_OC1_SetConfig+0x7c>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a2c      	ldr	r2, [pc, #176]	; (800b77c <TIM_OC1_SetConfig+0x110>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d00b      	beq.n	800b6e8 <TIM_OC1_SetConfig+0x7c>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a2b      	ldr	r2, [pc, #172]	; (800b780 <TIM_OC1_SetConfig+0x114>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d007      	beq.n	800b6e8 <TIM_OC1_SetConfig+0x7c>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a2a      	ldr	r2, [pc, #168]	; (800b784 <TIM_OC1_SetConfig+0x118>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d003      	beq.n	800b6e8 <TIM_OC1_SetConfig+0x7c>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a29      	ldr	r2, [pc, #164]	; (800b788 <TIM_OC1_SetConfig+0x11c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d10c      	bne.n	800b702 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f023 0308 	bic.w	r3, r3, #8
 800b6ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f023 0304 	bic.w	r3, r3, #4
 800b700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a1c      	ldr	r2, [pc, #112]	; (800b778 <TIM_OC1_SetConfig+0x10c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00f      	beq.n	800b72a <TIM_OC1_SetConfig+0xbe>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a1b      	ldr	r2, [pc, #108]	; (800b77c <TIM_OC1_SetConfig+0x110>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d00b      	beq.n	800b72a <TIM_OC1_SetConfig+0xbe>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a1a      	ldr	r2, [pc, #104]	; (800b780 <TIM_OC1_SetConfig+0x114>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d007      	beq.n	800b72a <TIM_OC1_SetConfig+0xbe>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a19      	ldr	r2, [pc, #100]	; (800b784 <TIM_OC1_SetConfig+0x118>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d003      	beq.n	800b72a <TIM_OC1_SetConfig+0xbe>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a18      	ldr	r2, [pc, #96]	; (800b788 <TIM_OC1_SetConfig+0x11c>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d111      	bne.n	800b74e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	4313      	orrs	r3, r2
 800b742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	621a      	str	r2, [r3, #32]
}
 800b768:	bf00      	nop
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	fffeff8f 	.word	0xfffeff8f
 800b778:	40010000 	.word	0x40010000
 800b77c:	40010400 	.word	0x40010400
 800b780:	40014000 	.word	0x40014000
 800b784:	40014400 	.word	0x40014400
 800b788:	40014800 	.word	0x40014800

0800b78c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	f023 0210 	bic.w	r2, r3, #16
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4b34      	ldr	r3, [pc, #208]	; (800b888 <TIM_OC2_SetConfig+0xfc>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f023 0320 	bic.w	r3, r3, #32
 800b7d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a29      	ldr	r2, [pc, #164]	; (800b88c <TIM_OC2_SetConfig+0x100>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d003      	beq.n	800b7f4 <TIM_OC2_SetConfig+0x68>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a28      	ldr	r2, [pc, #160]	; (800b890 <TIM_OC2_SetConfig+0x104>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d10d      	bne.n	800b810 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	4313      	orrs	r3, r2
 800b806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b80e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a1e      	ldr	r2, [pc, #120]	; (800b88c <TIM_OC2_SetConfig+0x100>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00f      	beq.n	800b838 <TIM_OC2_SetConfig+0xac>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a1d      	ldr	r2, [pc, #116]	; (800b890 <TIM_OC2_SetConfig+0x104>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d00b      	beq.n	800b838 <TIM_OC2_SetConfig+0xac>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a1c      	ldr	r2, [pc, #112]	; (800b894 <TIM_OC2_SetConfig+0x108>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d007      	beq.n	800b838 <TIM_OC2_SetConfig+0xac>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a1b      	ldr	r2, [pc, #108]	; (800b898 <TIM_OC2_SetConfig+0x10c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d003      	beq.n	800b838 <TIM_OC2_SetConfig+0xac>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a1a      	ldr	r2, [pc, #104]	; (800b89c <TIM_OC2_SetConfig+0x110>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d113      	bne.n	800b860 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b83e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	4313      	orrs	r3, r2
 800b852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	621a      	str	r2, [r3, #32]
}
 800b87a:	bf00      	nop
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	feff8fff 	.word	0xfeff8fff
 800b88c:	40010000 	.word	0x40010000
 800b890:	40010400 	.word	0x40010400
 800b894:	40014000 	.word	0x40014000
 800b898:	40014400 	.word	0x40014400
 800b89c:	40014800 	.word	0x40014800

0800b8a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4b33      	ldr	r3, [pc, #204]	; (800b998 <TIM_OC3_SetConfig+0xf8>)
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f023 0303 	bic.w	r3, r3, #3
 800b8d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	021b      	lsls	r3, r3, #8
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a28      	ldr	r2, [pc, #160]	; (800b99c <TIM_OC3_SetConfig+0xfc>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d003      	beq.n	800b906 <TIM_OC3_SetConfig+0x66>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <TIM_OC3_SetConfig+0x100>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d10d      	bne.n	800b922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b90c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	021b      	lsls	r3, r3, #8
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4313      	orrs	r3, r2
 800b918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a1d      	ldr	r2, [pc, #116]	; (800b99c <TIM_OC3_SetConfig+0xfc>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00f      	beq.n	800b94a <TIM_OC3_SetConfig+0xaa>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a1c      	ldr	r2, [pc, #112]	; (800b9a0 <TIM_OC3_SetConfig+0x100>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00b      	beq.n	800b94a <TIM_OC3_SetConfig+0xaa>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a1b      	ldr	r2, [pc, #108]	; (800b9a4 <TIM_OC3_SetConfig+0x104>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d007      	beq.n	800b94a <TIM_OC3_SetConfig+0xaa>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a1a      	ldr	r2, [pc, #104]	; (800b9a8 <TIM_OC3_SetConfig+0x108>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d003      	beq.n	800b94a <TIM_OC3_SetConfig+0xaa>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a19      	ldr	r2, [pc, #100]	; (800b9ac <TIM_OC3_SetConfig+0x10c>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d113      	bne.n	800b972 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	011b      	lsls	r3, r3, #4
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	4313      	orrs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	011b      	lsls	r3, r3, #4
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	4313      	orrs	r3, r2
 800b970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	621a      	str	r2, [r3, #32]
}
 800b98c:	bf00      	nop
 800b98e:	371c      	adds	r7, #28
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	fffeff8f 	.word	0xfffeff8f
 800b99c:	40010000 	.word	0x40010000
 800b9a0:	40010400 	.word	0x40010400
 800b9a4:	40014000 	.word	0x40014000
 800b9a8:	40014400 	.word	0x40014400
 800b9ac:	40014800 	.word	0x40014800

0800b9b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <TIM_OC4_SetConfig+0xbc>)
 800b9dc:	4013      	ands	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	021b      	lsls	r3, r3, #8
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	031b      	lsls	r3, r3, #12
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a19      	ldr	r2, [pc, #100]	; (800ba70 <TIM_OC4_SetConfig+0xc0>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d00f      	beq.n	800ba30 <TIM_OC4_SetConfig+0x80>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a18      	ldr	r2, [pc, #96]	; (800ba74 <TIM_OC4_SetConfig+0xc4>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00b      	beq.n	800ba30 <TIM_OC4_SetConfig+0x80>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a17      	ldr	r2, [pc, #92]	; (800ba78 <TIM_OC4_SetConfig+0xc8>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d007      	beq.n	800ba30 <TIM_OC4_SetConfig+0x80>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a16      	ldr	r2, [pc, #88]	; (800ba7c <TIM_OC4_SetConfig+0xcc>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d003      	beq.n	800ba30 <TIM_OC4_SetConfig+0x80>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a15      	ldr	r2, [pc, #84]	; (800ba80 <TIM_OC4_SetConfig+0xd0>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d109      	bne.n	800ba44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	019b      	lsls	r3, r3, #6
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	621a      	str	r2, [r3, #32]
}
 800ba5e:	bf00      	nop
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	feff8fff 	.word	0xfeff8fff
 800ba70:	40010000 	.word	0x40010000
 800ba74:	40010400 	.word	0x40010400
 800ba78:	40014000 	.word	0x40014000
 800ba7c:	40014400 	.word	0x40014400
 800ba80:	40014800 	.word	0x40014800

0800ba84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a1b      	ldr	r3, [r3, #32]
 800ba9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <TIM_OC5_SetConfig+0xb0>)
 800bab0:	4013      	ands	r3, r2
 800bab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	4313      	orrs	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	041b      	lsls	r3, r3, #16
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	4313      	orrs	r3, r2
 800bad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a18      	ldr	r2, [pc, #96]	; (800bb38 <TIM_OC5_SetConfig+0xb4>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d00f      	beq.n	800bafa <TIM_OC5_SetConfig+0x76>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a17      	ldr	r2, [pc, #92]	; (800bb3c <TIM_OC5_SetConfig+0xb8>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d00b      	beq.n	800bafa <TIM_OC5_SetConfig+0x76>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a16      	ldr	r2, [pc, #88]	; (800bb40 <TIM_OC5_SetConfig+0xbc>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d007      	beq.n	800bafa <TIM_OC5_SetConfig+0x76>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a15      	ldr	r2, [pc, #84]	; (800bb44 <TIM_OC5_SetConfig+0xc0>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d003      	beq.n	800bafa <TIM_OC5_SetConfig+0x76>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a14      	ldr	r2, [pc, #80]	; (800bb48 <TIM_OC5_SetConfig+0xc4>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d109      	bne.n	800bb0e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	021b      	lsls	r3, r3, #8
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	621a      	str	r2, [r3, #32]
}
 800bb28:	bf00      	nop
 800bb2a:	371c      	adds	r7, #28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	fffeff8f 	.word	0xfffeff8f
 800bb38:	40010000 	.word	0x40010000
 800bb3c:	40010400 	.word	0x40010400
 800bb40:	40014000 	.word	0x40014000
 800bb44:	40014400 	.word	0x40014400
 800bb48:	40014800 	.word	0x40014800

0800bb4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	4b22      	ldr	r3, [pc, #136]	; (800bc00 <TIM_OC6_SetConfig+0xb4>)
 800bb78:	4013      	ands	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	051b      	lsls	r3, r3, #20
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a19      	ldr	r2, [pc, #100]	; (800bc04 <TIM_OC6_SetConfig+0xb8>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d00f      	beq.n	800bbc4 <TIM_OC6_SetConfig+0x78>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a18      	ldr	r2, [pc, #96]	; (800bc08 <TIM_OC6_SetConfig+0xbc>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d00b      	beq.n	800bbc4 <TIM_OC6_SetConfig+0x78>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a17      	ldr	r2, [pc, #92]	; (800bc0c <TIM_OC6_SetConfig+0xc0>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d007      	beq.n	800bbc4 <TIM_OC6_SetConfig+0x78>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a16      	ldr	r2, [pc, #88]	; (800bc10 <TIM_OC6_SetConfig+0xc4>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d003      	beq.n	800bbc4 <TIM_OC6_SetConfig+0x78>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a15      	ldr	r2, [pc, #84]	; (800bc14 <TIM_OC6_SetConfig+0xc8>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d109      	bne.n	800bbd8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	029b      	lsls	r3, r3, #10
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	621a      	str	r2, [r3, #32]
}
 800bbf2:	bf00      	nop
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	feff8fff 	.word	0xfeff8fff
 800bc04:	40010000 	.word	0x40010000
 800bc08:	40010400 	.word	0x40010400
 800bc0c:	40014000 	.word	0x40014000
 800bc10:	40014400 	.word	0x40014400
 800bc14:	40014800 	.word	0x40014800

0800bc18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	f023 0201 	bic.w	r2, r3, #1
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a1b      	ldr	r3, [r3, #32]
 800bc3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	4a28      	ldr	r2, [pc, #160]	; (800bce4 <TIM_TI1_SetConfig+0xcc>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d01b      	beq.n	800bc7e <TIM_TI1_SetConfig+0x66>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc4c:	d017      	beq.n	800bc7e <TIM_TI1_SetConfig+0x66>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	4a25      	ldr	r2, [pc, #148]	; (800bce8 <TIM_TI1_SetConfig+0xd0>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d013      	beq.n	800bc7e <TIM_TI1_SetConfig+0x66>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4a24      	ldr	r2, [pc, #144]	; (800bcec <TIM_TI1_SetConfig+0xd4>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d00f      	beq.n	800bc7e <TIM_TI1_SetConfig+0x66>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	4a23      	ldr	r2, [pc, #140]	; (800bcf0 <TIM_TI1_SetConfig+0xd8>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d00b      	beq.n	800bc7e <TIM_TI1_SetConfig+0x66>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	4a22      	ldr	r2, [pc, #136]	; (800bcf4 <TIM_TI1_SetConfig+0xdc>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d007      	beq.n	800bc7e <TIM_TI1_SetConfig+0x66>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	4a21      	ldr	r2, [pc, #132]	; (800bcf8 <TIM_TI1_SetConfig+0xe0>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d003      	beq.n	800bc7e <TIM_TI1_SetConfig+0x66>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4a20      	ldr	r2, [pc, #128]	; (800bcfc <TIM_TI1_SetConfig+0xe4>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d101      	bne.n	800bc82 <TIM_TI1_SetConfig+0x6a>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <TIM_TI1_SetConfig+0x6c>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d008      	beq.n	800bc9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	f023 0303 	bic.w	r3, r3, #3
 800bc8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	617b      	str	r3, [r7, #20]
 800bc98:	e003      	b.n	800bca2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f043 0301 	orr.w	r3, r3, #1
 800bca0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	011b      	lsls	r3, r3, #4
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	f023 030a 	bic.w	r3, r3, #10
 800bcbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f003 030a 	and.w	r3, r3, #10
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	621a      	str	r2, [r3, #32]
}
 800bcd6:	bf00      	nop
 800bcd8:	371c      	adds	r7, #28
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	40010000 	.word	0x40010000
 800bce8:	40000400 	.word	0x40000400
 800bcec:	40000800 	.word	0x40000800
 800bcf0:	40000c00 	.word	0x40000c00
 800bcf4:	40010400 	.word	0x40010400
 800bcf8:	40001800 	.word	0x40001800
 800bcfc:	40014000 	.word	0x40014000

0800bd00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	f023 0201 	bic.w	r2, r3, #1
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f023 030a 	bic.w	r3, r3, #10
 800bd3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	621a      	str	r2, [r3, #32]
}
 800bd52:	bf00      	nop
 800bd54:	371c      	adds	r7, #28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b087      	sub	sp, #28
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	60f8      	str	r0, [r7, #12]
 800bd66:	60b9      	str	r1, [r7, #8]
 800bd68:	607a      	str	r2, [r7, #4]
 800bd6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	f023 0210 	bic.w	r2, r3, #16
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	031b      	lsls	r3, r3, #12
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	011b      	lsls	r3, r3, #4
 800bdb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	621a      	str	r2, [r3, #32]
}
 800bdcc:	bf00      	nop
 800bdce:	371c      	adds	r7, #28
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6a1b      	ldr	r3, [r3, #32]
 800bde8:	f023 0210 	bic.w	r2, r3, #16
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	031b      	lsls	r3, r3, #12
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	011b      	lsls	r3, r3, #4
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	621a      	str	r2, [r3, #32]
}
 800be2c:	bf00      	nop
 800be2e:	371c      	adds	r7, #28
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be38:	b480      	push	{r7}
 800be3a:	b087      	sub	sp, #28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6a1b      	ldr	r3, [r3, #32]
 800be5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f023 0303 	bic.w	r3, r3, #3
 800be64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	011b      	lsls	r3, r3, #4
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	4313      	orrs	r3, r2
 800be80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800be88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	021b      	lsls	r3, r3, #8
 800be8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	4313      	orrs	r3, r2
 800be96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	621a      	str	r2, [r3, #32]
}
 800bea4:	bf00      	nop
 800bea6:	371c      	adds	r7, #28
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bedc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	021b      	lsls	r3, r3, #8
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800beee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	031b      	lsls	r3, r3, #12
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	4313      	orrs	r3, r2
 800befa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bf02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	031b      	lsls	r3, r3, #12
 800bf08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bf0c:	693a      	ldr	r2, [r7, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	621a      	str	r2, [r3, #32]
}
 800bf1e:	bf00      	nop
 800bf20:	371c      	adds	r7, #28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
	...

0800bf2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <TIM_ITRx_SetConfig+0x38>)
 800bf40:	4013      	ands	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	f043 0307 	orr.w	r3, r3, #7
 800bf4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	609a      	str	r2, [r3, #8]
}
 800bf56:	bf00      	nop
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	ffcfff8f 	.word	0xffcfff8f

0800bf68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	021a      	lsls	r2, r3, #8
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	609a      	str	r2, [r3, #8]
}
 800bf9c:	bf00      	nop
 800bf9e:	371c      	adds	r7, #28
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f003 031f 	and.w	r3, r3, #31
 800bfba:	2201      	movs	r2, #1
 800bfbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6a1a      	ldr	r2, [r3, #32]
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	43db      	mvns	r3, r3
 800bfca:	401a      	ands	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6a1a      	ldr	r2, [r3, #32]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f003 031f 	and.w	r3, r3, #31
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	621a      	str	r2, [r3, #32]
}
 800bfe6:	bf00      	nop
 800bfe8:	371c      	adds	r7, #28
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
	...

0800bff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c004:	2b01      	cmp	r3, #1
 800c006:	d101      	bne.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c008:	2302      	movs	r3, #2
 800c00a:	e06d      	b.n	800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2202      	movs	r2, #2
 800c018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a30      	ldr	r2, [pc, #192]	; (800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d004      	beq.n	800c040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a2f      	ldr	r2, [pc, #188]	; (800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d108      	bne.n	800c052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	4313      	orrs	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4313      	orrs	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a20      	ldr	r2, [pc, #128]	; (800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d022      	beq.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c07e:	d01d      	beq.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a1d      	ldr	r2, [pc, #116]	; (800c0fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d018      	beq.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a1c      	ldr	r2, [pc, #112]	; (800c100 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d013      	beq.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a1a      	ldr	r2, [pc, #104]	; (800c104 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d00e      	beq.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a15      	ldr	r2, [pc, #84]	; (800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d009      	beq.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a16      	ldr	r2, [pc, #88]	; (800c108 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d004      	beq.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a15      	ldr	r2, [pc, #84]	; (800c10c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d10c      	bne.n	800c0d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	40010000 	.word	0x40010000
 800c0f8:	40010400 	.word	0x40010400
 800c0fc:	40000400 	.word	0x40000400
 800c100:	40000800 	.word	0x40000800
 800c104:	40000c00 	.word	0x40000c00
 800c108:	40001800 	.word	0x40001800
 800c10c:	40014000 	.word	0x40014000

0800c110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c140:	bf00      	nop
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e042      	b.n	800c1e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c164:	2b00      	cmp	r3, #0
 800c166:	d106      	bne.n	800c176 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7fa f955 	bl	8006420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2224      	movs	r2, #36	; 0x24
 800c17a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f022 0201 	bic.w	r2, r2, #1
 800c18c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fccc 	bl	800cb2c <UART_SetConfig>
 800c194:	4603      	mov	r3, r0
 800c196:	2b01      	cmp	r3, #1
 800c198:	d101      	bne.n	800c19e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e022      	b.n	800c1e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d002      	beq.n	800c1ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f001 fa28 	bl	800d5fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	689a      	ldr	r2, [r3, #8]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 0201 	orr.w	r2, r2, #1
 800c1da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f001 faaf 	bl	800d740 <UART_CheckIdleState>
 800c1e2:	4603      	mov	r3, r0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08a      	sub	sp, #40	; 0x28
 800c1f0:	af02      	add	r7, sp, #8
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c202:	2b20      	cmp	r3, #32
 800c204:	f040 8083 	bne.w	800c30e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <HAL_UART_Transmit+0x28>
 800c20e:	88fb      	ldrh	r3, [r7, #6]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e07b      	b.n	800c310 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d101      	bne.n	800c226 <HAL_UART_Transmit+0x3a>
 800c222:	2302      	movs	r3, #2
 800c224:	e074      	b.n	800c310 <HAL_UART_Transmit+0x124>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2221      	movs	r2, #33	; 0x21
 800c23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c23e:	f7fa facb 	bl	80067d8 <HAL_GetTick>
 800c242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	88fa      	ldrh	r2, [r7, #6]
 800c248:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	88fa      	ldrh	r2, [r7, #6]
 800c250:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c25c:	d108      	bne.n	800c270 <HAL_UART_Transmit+0x84>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d104      	bne.n	800c270 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	61bb      	str	r3, [r7, #24]
 800c26e:	e003      	b.n	800c278 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c274:	2300      	movs	r3, #0
 800c276:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c280:	e02c      	b.n	800c2dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2200      	movs	r2, #0
 800c28a:	2180      	movs	r1, #128	; 0x80
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f001 faa2 	bl	800d7d6 <UART_WaitOnFlagUntilTimeout>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d001      	beq.n	800c29c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e039      	b.n	800c310 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10b      	bne.n	800c2ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	3302      	adds	r3, #2
 800c2b6:	61bb      	str	r3, [r7, #24]
 800c2b8:	e007      	b.n	800c2ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	781a      	ldrb	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1cc      	bne.n	800c282 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2140      	movs	r1, #64	; 0x40
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f001 fa6f 	bl	800d7d6 <UART_WaitOnFlagUntilTimeout>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e006      	b.n	800c310 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2220      	movs	r2, #32
 800c306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	e000      	b.n	800c310 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c30e:	2302      	movs	r3, #2
  }
}
 800c310:	4618      	mov	r0, r3
 800c312:	3720      	adds	r7, #32
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	4613      	mov	r3, r2
 800c324:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c32c:	2b20      	cmp	r3, #32
 800c32e:	d142      	bne.n	800c3b6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <HAL_UART_Receive_IT+0x24>
 800c336:	88fb      	ldrh	r3, [r7, #6]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e03b      	b.n	800c3b8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c346:	2b01      	cmp	r3, #1
 800c348:	d101      	bne.n	800c34e <HAL_UART_Receive_IT+0x36>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e034      	b.n	800c3b8 <HAL_UART_Receive_IT+0xa0>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a17      	ldr	r2, [pc, #92]	; (800c3c0 <HAL_UART_Receive_IT+0xa8>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d01f      	beq.n	800c3a6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c370:	2b00      	cmp	r3, #0
 800c372:	d018      	beq.n	800c3a6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	e853 3f00 	ldrex	r3, [r3]
 800c380:	613b      	str	r3, [r7, #16]
   return(result);
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c388:	627b      	str	r3, [r7, #36]	; 0x24
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	623b      	str	r3, [r7, #32]
 800c394:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	69f9      	ldr	r1, [r7, #28]
 800c398:	6a3a      	ldr	r2, [r7, #32]
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e6      	bne.n	800c374 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c3a6:	88fb      	ldrh	r3, [r7, #6]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	68b9      	ldr	r1, [r7, #8]
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f001 fadb 	bl	800d968 <UART_Start_Receive_IT>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	e000      	b.n	800c3b8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c3b6:	2302      	movs	r3, #2
  }
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3728      	adds	r7, #40	; 0x28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	58000c00 	.word	0x58000c00

0800c3c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b0ba      	sub	sp, #232	; 0xe8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c3ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c3ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c3f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d11b      	bne.n	800c438 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c404:	f003 0320 	and.w	r3, r3, #32
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d015      	beq.n	800c438 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c410:	f003 0320 	and.w	r3, r3, #32
 800c414:	2b00      	cmp	r3, #0
 800c416:	d105      	bne.n	800c424 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c41c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d009      	beq.n	800c438 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 835a 	beq.w	800cae2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	4798      	blx	r3
      }
      return;
 800c436:	e354      	b.n	800cae2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 811f 	beq.w	800c680 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c442:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c446:	4b8b      	ldr	r3, [pc, #556]	; (800c674 <HAL_UART_IRQHandler+0x2b0>)
 800c448:	4013      	ands	r3, r2
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c44e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c452:	4b89      	ldr	r3, [pc, #548]	; (800c678 <HAL_UART_IRQHandler+0x2b4>)
 800c454:	4013      	ands	r3, r2
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 8112 	beq.w	800c680 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c460:	f003 0301 	and.w	r3, r3, #1
 800c464:	2b00      	cmp	r3, #0
 800c466:	d011      	beq.n	800c48c <HAL_UART_IRQHandler+0xc8>
 800c468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c46c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2201      	movs	r2, #1
 800c47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c482:	f043 0201 	orr.w	r2, r3, #1
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c490:	f003 0302 	and.w	r3, r3, #2
 800c494:	2b00      	cmp	r3, #0
 800c496:	d011      	beq.n	800c4bc <HAL_UART_IRQHandler+0xf8>
 800c498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c49c:	f003 0301 	and.w	r3, r3, #1
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b2:	f043 0204 	orr.w	r2, r3, #4
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d011      	beq.n	800c4ec <HAL_UART_IRQHandler+0x128>
 800c4c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00b      	beq.n	800c4ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2204      	movs	r2, #4
 800c4da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4e2:	f043 0202 	orr.w	r2, r3, #2
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f0:	f003 0308 	and.w	r3, r3, #8
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d017      	beq.n	800c528 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4fc:	f003 0320 	and.w	r3, r3, #32
 800c500:	2b00      	cmp	r3, #0
 800c502:	d105      	bne.n	800c510 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c504:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c508:	4b5a      	ldr	r3, [pc, #360]	; (800c674 <HAL_UART_IRQHandler+0x2b0>)
 800c50a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00b      	beq.n	800c528 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2208      	movs	r2, #8
 800c516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c51e:	f043 0208 	orr.w	r2, r3, #8
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c52c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c530:	2b00      	cmp	r3, #0
 800c532:	d012      	beq.n	800c55a <HAL_UART_IRQHandler+0x196>
 800c534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00c      	beq.n	800c55a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c550:	f043 0220 	orr.w	r2, r3, #32
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 82c0 	beq.w	800cae6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d013      	beq.n	800c59a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d105      	bne.n	800c58a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c57e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d007      	beq.n	800c59a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d003      	beq.n	800c59a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ae:	2b40      	cmp	r3, #64	; 0x40
 800c5b0:	d005      	beq.n	800c5be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c5b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d04f      	beq.n	800c65e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f001 fafc 	bl	800dbbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ce:	2b40      	cmp	r3, #64	; 0x40
 800c5d0:	d141      	bne.n	800c656 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5e0:	e853 3f00 	ldrex	r3, [r3]
 800c5e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c5e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	3308      	adds	r3, #8
 800c5fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c60a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c60e:	e841 2300 	strex	r3, r2, [r1]
 800c612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1d9      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d013      	beq.n	800c64e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c62a:	4a14      	ldr	r2, [pc, #80]	; (800c67c <HAL_UART_IRQHandler+0x2b8>)
 800c62c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c632:	4618      	mov	r0, r3
 800c634:	f7fa fd6c 	bl	8007110 <HAL_DMA_Abort_IT>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d017      	beq.n	800c66e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c648:	4610      	mov	r0, r2
 800c64a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c64c:	e00f      	b.n	800c66e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fa56 	bl	800cb00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c654:	e00b      	b.n	800c66e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fa52 	bl	800cb00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c65c:	e007      	b.n	800c66e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fa4e 	bl	800cb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c66c:	e23b      	b.n	800cae6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c66e:	bf00      	nop
    return;
 800c670:	e239      	b.n	800cae6 <HAL_UART_IRQHandler+0x722>
 800c672:	bf00      	nop
 800c674:	10000001 	.word	0x10000001
 800c678:	04000120 	.word	0x04000120
 800c67c:	0800dc89 	.word	0x0800dc89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c684:	2b01      	cmp	r3, #1
 800c686:	f040 81ce 	bne.w	800ca26 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c68e:	f003 0310 	and.w	r3, r3, #16
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 81c7 	beq.w	800ca26 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 81c0 	beq.w	800ca26 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2210      	movs	r2, #16
 800c6ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b8:	2b40      	cmp	r3, #64	; 0x40
 800c6ba:	f040 813b 	bne.w	800c934 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a8b      	ldr	r2, [pc, #556]	; (800c8f4 <HAL_UART_IRQHandler+0x530>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d059      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a89      	ldr	r2, [pc, #548]	; (800c8f8 <HAL_UART_IRQHandler+0x534>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d053      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a87      	ldr	r2, [pc, #540]	; (800c8fc <HAL_UART_IRQHandler+0x538>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d04d      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a85      	ldr	r2, [pc, #532]	; (800c900 <HAL_UART_IRQHandler+0x53c>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d047      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a83      	ldr	r2, [pc, #524]	; (800c904 <HAL_UART_IRQHandler+0x540>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d041      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a81      	ldr	r2, [pc, #516]	; (800c908 <HAL_UART_IRQHandler+0x544>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d03b      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a7f      	ldr	r2, [pc, #508]	; (800c90c <HAL_UART_IRQHandler+0x548>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d035      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a7d      	ldr	r2, [pc, #500]	; (800c910 <HAL_UART_IRQHandler+0x54c>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d02f      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a7b      	ldr	r2, [pc, #492]	; (800c914 <HAL_UART_IRQHandler+0x550>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d029      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a79      	ldr	r2, [pc, #484]	; (800c918 <HAL_UART_IRQHandler+0x554>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d023      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a77      	ldr	r2, [pc, #476]	; (800c91c <HAL_UART_IRQHandler+0x558>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d01d      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a75      	ldr	r2, [pc, #468]	; (800c920 <HAL_UART_IRQHandler+0x55c>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d017      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a73      	ldr	r2, [pc, #460]	; (800c924 <HAL_UART_IRQHandler+0x560>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d011      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a71      	ldr	r2, [pc, #452]	; (800c928 <HAL_UART_IRQHandler+0x564>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d00b      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a6f      	ldr	r2, [pc, #444]	; (800c92c <HAL_UART_IRQHandler+0x568>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d005      	beq.n	800c77e <HAL_UART_IRQHandler+0x3ba>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a6d      	ldr	r2, [pc, #436]	; (800c930 <HAL_UART_IRQHandler+0x56c>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d105      	bne.n	800c78a <HAL_UART_IRQHandler+0x3c6>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	b29b      	uxth	r3, r3
 800c788:	e004      	b.n	800c794 <HAL_UART_IRQHandler+0x3d0>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	b29b      	uxth	r3, r3
 800c794:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c798:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 81a4 	beq.w	800caea <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	f080 819c 	bcs.w	800caea <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c0:	69db      	ldr	r3, [r3, #28]
 800c7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c6:	f000 8086 	beq.w	800c8d6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7d6:	e853 3f00 	ldrex	r3, [r3]
 800c7da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c7de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c7e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c800:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c80c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1da      	bne.n	800c7ca <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	3308      	adds	r3, #8
 800c81a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c81e:	e853 3f00 	ldrex	r3, [r3]
 800c822:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c826:	f023 0301 	bic.w	r3, r3, #1
 800c82a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	3308      	adds	r3, #8
 800c834:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c838:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c83c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c840:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c84a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e1      	bne.n	800c814 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3308      	adds	r3, #8
 800c856:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c85a:	e853 3f00 	ldrex	r3, [r3]
 800c85e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3308      	adds	r3, #8
 800c870:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c874:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c876:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c878:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c87a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c87c:	e841 2300 	strex	r3, r2, [r1]
 800c880:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1e3      	bne.n	800c850 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2220      	movs	r2, #32
 800c88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c89e:	e853 3f00 	ldrex	r3, [r3]
 800c8a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a6:	f023 0310 	bic.w	r3, r3, #16
 800c8aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8c0:	e841 2300 	strex	r3, r2, [r1]
 800c8c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1e4      	bne.n	800c896 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7fa f8ff 	bl	8006ad4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f912 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8f0:	e0fb      	b.n	800caea <HAL_UART_IRQHandler+0x726>
 800c8f2:	bf00      	nop
 800c8f4:	40020010 	.word	0x40020010
 800c8f8:	40020028 	.word	0x40020028
 800c8fc:	40020040 	.word	0x40020040
 800c900:	40020058 	.word	0x40020058
 800c904:	40020070 	.word	0x40020070
 800c908:	40020088 	.word	0x40020088
 800c90c:	400200a0 	.word	0x400200a0
 800c910:	400200b8 	.word	0x400200b8
 800c914:	40020410 	.word	0x40020410
 800c918:	40020428 	.word	0x40020428
 800c91c:	40020440 	.word	0x40020440
 800c920:	40020458 	.word	0x40020458
 800c924:	40020470 	.word	0x40020470
 800c928:	40020488 	.word	0x40020488
 800c92c:	400204a0 	.word	0x400204a0
 800c930:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c940:	b29b      	uxth	r3, r3
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c94e:	b29b      	uxth	r3, r3
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 80cc 	beq.w	800caee <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f000 80c7 	beq.w	800caee <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	e853 3f00 	ldrex	r3, [r3]
 800c96c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c974:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	461a      	mov	r2, r3
 800c97e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c982:	647b      	str	r3, [r7, #68]	; 0x44
 800c984:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c98a:	e841 2300 	strex	r3, r2, [r1]
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1e4      	bne.n	800c960 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3308      	adds	r3, #8
 800c99c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a0:	e853 3f00 	ldrex	r3, [r3]
 800c9a4:	623b      	str	r3, [r7, #32]
   return(result);
 800c9a6:	6a3a      	ldr	r2, [r7, #32]
 800c9a8:	4b54      	ldr	r3, [pc, #336]	; (800cafc <HAL_UART_IRQHandler+0x738>)
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c9ba:	633a      	str	r2, [r7, #48]	; 0x30
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9c2:	e841 2300 	strex	r3, r2, [r1]
 800c9c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1e3      	bne.n	800c996 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2220      	movs	r2, #32
 800c9d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	e853 3f00 	ldrex	r3, [r3]
 800c9ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f023 0310 	bic.w	r3, r3, #16
 800c9f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca04:	61fb      	str	r3, [r7, #28]
 800ca06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca08:	69b9      	ldr	r1, [r7, #24]
 800ca0a:	69fa      	ldr	r2, [r7, #28]
 800ca0c:	e841 2300 	strex	r3, r2, [r1]
 800ca10:	617b      	str	r3, [r7, #20]
   return(result);
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1e4      	bne.n	800c9e2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f878 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca24:	e063      	b.n	800caee <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00e      	beq.n	800ca50 <HAL_UART_IRQHandler+0x68c>
 800ca32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d008      	beq.n	800ca50 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f001 fdbb 	bl	800e5c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca4e:	e051      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ca50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d014      	beq.n	800ca86 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d105      	bne.n	800ca74 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d008      	beq.n	800ca86 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d03a      	beq.n	800caf2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	4798      	blx	r3
    }
    return;
 800ca84:	e035      	b.n	800caf2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d009      	beq.n	800caa6 <HAL_UART_IRQHandler+0x6e2>
 800ca92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f001 f908 	bl	800dcb4 <UART_EndTransmit_IT>
    return;
 800caa4:	e026      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800caa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d009      	beq.n	800cac6 <HAL_UART_IRQHandler+0x702>
 800cab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 fd94 	bl	800e5ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cac4:	e016      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d010      	beq.n	800caf4 <HAL_UART_IRQHandler+0x730>
 800cad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	da0c      	bge.n	800caf4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 fd7c 	bl	800e5d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cae0:	e008      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
      return;
 800cae2:	bf00      	nop
 800cae4:	e006      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
    return;
 800cae6:	bf00      	nop
 800cae8:	e004      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
      return;
 800caea:	bf00      	nop
 800caec:	e002      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
      return;
 800caee:	bf00      	nop
 800caf0:	e000      	b.n	800caf4 <HAL_UART_IRQHandler+0x730>
    return;
 800caf2:	bf00      	nop
  }
}
 800caf4:	37e8      	adds	r7, #232	; 0xe8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	effffffe 	.word	0xeffffffe

0800cb00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb30:	b092      	sub	sp, #72	; 0x48
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	689a      	ldr	r2, [r3, #8]
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	431a      	orrs	r2, r3
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4bbe      	ldr	r3, [pc, #760]	; (800ce54 <UART_SetConfig+0x328>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	6812      	ldr	r2, [r2, #0]
 800cb62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb64:	430b      	orrs	r3, r1
 800cb66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4ab3      	ldr	r2, [pc, #716]	; (800ce58 <UART_SetConfig+0x32c>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d004      	beq.n	800cb98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb94:	4313      	orrs	r3, r2
 800cb96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	689a      	ldr	r2, [r3, #8]
 800cb9e:	4baf      	ldr	r3, [pc, #700]	; (800ce5c <UART_SetConfig+0x330>)
 800cba0:	4013      	ands	r3, r2
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	6812      	ldr	r2, [r2, #0]
 800cba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb2:	f023 010f 	bic.w	r1, r3, #15
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4aa6      	ldr	r2, [pc, #664]	; (800ce60 <UART_SetConfig+0x334>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d177      	bne.n	800ccbc <UART_SetConfig+0x190>
 800cbcc:	4ba5      	ldr	r3, [pc, #660]	; (800ce64 <UART_SetConfig+0x338>)
 800cbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbd4:	2b28      	cmp	r3, #40	; 0x28
 800cbd6:	d86d      	bhi.n	800ccb4 <UART_SetConfig+0x188>
 800cbd8:	a201      	add	r2, pc, #4	; (adr r2, 800cbe0 <UART_SetConfig+0xb4>)
 800cbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbde:	bf00      	nop
 800cbe0:	0800cc85 	.word	0x0800cc85
 800cbe4:	0800ccb5 	.word	0x0800ccb5
 800cbe8:	0800ccb5 	.word	0x0800ccb5
 800cbec:	0800ccb5 	.word	0x0800ccb5
 800cbf0:	0800ccb5 	.word	0x0800ccb5
 800cbf4:	0800ccb5 	.word	0x0800ccb5
 800cbf8:	0800ccb5 	.word	0x0800ccb5
 800cbfc:	0800ccb5 	.word	0x0800ccb5
 800cc00:	0800cc8d 	.word	0x0800cc8d
 800cc04:	0800ccb5 	.word	0x0800ccb5
 800cc08:	0800ccb5 	.word	0x0800ccb5
 800cc0c:	0800ccb5 	.word	0x0800ccb5
 800cc10:	0800ccb5 	.word	0x0800ccb5
 800cc14:	0800ccb5 	.word	0x0800ccb5
 800cc18:	0800ccb5 	.word	0x0800ccb5
 800cc1c:	0800ccb5 	.word	0x0800ccb5
 800cc20:	0800cc95 	.word	0x0800cc95
 800cc24:	0800ccb5 	.word	0x0800ccb5
 800cc28:	0800ccb5 	.word	0x0800ccb5
 800cc2c:	0800ccb5 	.word	0x0800ccb5
 800cc30:	0800ccb5 	.word	0x0800ccb5
 800cc34:	0800ccb5 	.word	0x0800ccb5
 800cc38:	0800ccb5 	.word	0x0800ccb5
 800cc3c:	0800ccb5 	.word	0x0800ccb5
 800cc40:	0800cc9d 	.word	0x0800cc9d
 800cc44:	0800ccb5 	.word	0x0800ccb5
 800cc48:	0800ccb5 	.word	0x0800ccb5
 800cc4c:	0800ccb5 	.word	0x0800ccb5
 800cc50:	0800ccb5 	.word	0x0800ccb5
 800cc54:	0800ccb5 	.word	0x0800ccb5
 800cc58:	0800ccb5 	.word	0x0800ccb5
 800cc5c:	0800ccb5 	.word	0x0800ccb5
 800cc60:	0800cca5 	.word	0x0800cca5
 800cc64:	0800ccb5 	.word	0x0800ccb5
 800cc68:	0800ccb5 	.word	0x0800ccb5
 800cc6c:	0800ccb5 	.word	0x0800ccb5
 800cc70:	0800ccb5 	.word	0x0800ccb5
 800cc74:	0800ccb5 	.word	0x0800ccb5
 800cc78:	0800ccb5 	.word	0x0800ccb5
 800cc7c:	0800ccb5 	.word	0x0800ccb5
 800cc80:	0800ccad 	.word	0x0800ccad
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e222      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cc8c:	2304      	movs	r3, #4
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e21e      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cc94:	2308      	movs	r3, #8
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e21a      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca2:	e216      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cca4:	2320      	movs	r3, #32
 800cca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccaa:	e212      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ccac:	2340      	movs	r3, #64	; 0x40
 800ccae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb2:	e20e      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ccb4:	2380      	movs	r3, #128	; 0x80
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e20a      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a69      	ldr	r2, [pc, #420]	; (800ce68 <UART_SetConfig+0x33c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d130      	bne.n	800cd28 <UART_SetConfig+0x1fc>
 800ccc6:	4b67      	ldr	r3, [pc, #412]	; (800ce64 <UART_SetConfig+0x338>)
 800ccc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	2b05      	cmp	r3, #5
 800ccd0:	d826      	bhi.n	800cd20 <UART_SetConfig+0x1f4>
 800ccd2:	a201      	add	r2, pc, #4	; (adr r2, 800ccd8 <UART_SetConfig+0x1ac>)
 800ccd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd8:	0800ccf1 	.word	0x0800ccf1
 800ccdc:	0800ccf9 	.word	0x0800ccf9
 800cce0:	0800cd01 	.word	0x0800cd01
 800cce4:	0800cd09 	.word	0x0800cd09
 800cce8:	0800cd11 	.word	0x0800cd11
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf6:	e1ec      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfe:	e1e8      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd00:	2308      	movs	r3, #8
 800cd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd06:	e1e4      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd08:	2310      	movs	r3, #16
 800cd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0e:	e1e0      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd10:	2320      	movs	r3, #32
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd16:	e1dc      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd18:	2340      	movs	r3, #64	; 0x40
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1e:	e1d8      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd20:	2380      	movs	r3, #128	; 0x80
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd26:	e1d4      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a4f      	ldr	r2, [pc, #316]	; (800ce6c <UART_SetConfig+0x340>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d130      	bne.n	800cd94 <UART_SetConfig+0x268>
 800cd32:	4b4c      	ldr	r3, [pc, #304]	; (800ce64 <UART_SetConfig+0x338>)
 800cd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd36:	f003 0307 	and.w	r3, r3, #7
 800cd3a:	2b05      	cmp	r3, #5
 800cd3c:	d826      	bhi.n	800cd8c <UART_SetConfig+0x260>
 800cd3e:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <UART_SetConfig+0x218>)
 800cd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd44:	0800cd5d 	.word	0x0800cd5d
 800cd48:	0800cd65 	.word	0x0800cd65
 800cd4c:	0800cd6d 	.word	0x0800cd6d
 800cd50:	0800cd75 	.word	0x0800cd75
 800cd54:	0800cd7d 	.word	0x0800cd7d
 800cd58:	0800cd85 	.word	0x0800cd85
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd62:	e1b6      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd64:	2304      	movs	r3, #4
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6a:	e1b2      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd6c:	2308      	movs	r3, #8
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd72:	e1ae      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd74:	2310      	movs	r3, #16
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7a:	e1aa      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd7c:	2320      	movs	r3, #32
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd82:	e1a6      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd84:	2340      	movs	r3, #64	; 0x40
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8a:	e1a2      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd8c:	2380      	movs	r3, #128	; 0x80
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd92:	e19e      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a35      	ldr	r2, [pc, #212]	; (800ce70 <UART_SetConfig+0x344>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d130      	bne.n	800ce00 <UART_SetConfig+0x2d4>
 800cd9e:	4b31      	ldr	r3, [pc, #196]	; (800ce64 <UART_SetConfig+0x338>)
 800cda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda2:	f003 0307 	and.w	r3, r3, #7
 800cda6:	2b05      	cmp	r3, #5
 800cda8:	d826      	bhi.n	800cdf8 <UART_SetConfig+0x2cc>
 800cdaa:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <UART_SetConfig+0x284>)
 800cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb0:	0800cdc9 	.word	0x0800cdc9
 800cdb4:	0800cdd1 	.word	0x0800cdd1
 800cdb8:	0800cdd9 	.word	0x0800cdd9
 800cdbc:	0800cde1 	.word	0x0800cde1
 800cdc0:	0800cde9 	.word	0x0800cde9
 800cdc4:	0800cdf1 	.word	0x0800cdf1
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdce:	e180      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cdd0:	2304      	movs	r3, #4
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd6:	e17c      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cdd8:	2308      	movs	r3, #8
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdde:	e178      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cde0:	2310      	movs	r3, #16
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cde6:	e174      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cde8:	2320      	movs	r3, #32
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdee:	e170      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cdf0:	2340      	movs	r3, #64	; 0x40
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdf6:	e16c      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cdf8:	2380      	movs	r3, #128	; 0x80
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfe:	e168      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a1b      	ldr	r2, [pc, #108]	; (800ce74 <UART_SetConfig+0x348>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d142      	bne.n	800ce90 <UART_SetConfig+0x364>
 800ce0a:	4b16      	ldr	r3, [pc, #88]	; (800ce64 <UART_SetConfig+0x338>)
 800ce0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0e:	f003 0307 	and.w	r3, r3, #7
 800ce12:	2b05      	cmp	r3, #5
 800ce14:	d838      	bhi.n	800ce88 <UART_SetConfig+0x35c>
 800ce16:	a201      	add	r2, pc, #4	; (adr r2, 800ce1c <UART_SetConfig+0x2f0>)
 800ce18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1c:	0800ce35 	.word	0x0800ce35
 800ce20:	0800ce3d 	.word	0x0800ce3d
 800ce24:	0800ce45 	.word	0x0800ce45
 800ce28:	0800ce4d 	.word	0x0800ce4d
 800ce2c:	0800ce79 	.word	0x0800ce79
 800ce30:	0800ce81 	.word	0x0800ce81
 800ce34:	2300      	movs	r3, #0
 800ce36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce3a:	e14a      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce3c:	2304      	movs	r3, #4
 800ce3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce42:	e146      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce44:	2308      	movs	r3, #8
 800ce46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce4a:	e142      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce4c:	2310      	movs	r3, #16
 800ce4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce52:	e13e      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce54:	cfff69f3 	.word	0xcfff69f3
 800ce58:	58000c00 	.word	0x58000c00
 800ce5c:	11fff4ff 	.word	0x11fff4ff
 800ce60:	40011000 	.word	0x40011000
 800ce64:	58024400 	.word	0x58024400
 800ce68:	40004400 	.word	0x40004400
 800ce6c:	40004800 	.word	0x40004800
 800ce70:	40004c00 	.word	0x40004c00
 800ce74:	40005000 	.word	0x40005000
 800ce78:	2320      	movs	r3, #32
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7e:	e128      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce80:	2340      	movs	r3, #64	; 0x40
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce86:	e124      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce88:	2380      	movs	r3, #128	; 0x80
 800ce8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8e:	e120      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4acb      	ldr	r2, [pc, #812]	; (800d1c4 <UART_SetConfig+0x698>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d176      	bne.n	800cf88 <UART_SetConfig+0x45c>
 800ce9a:	4bcb      	ldr	r3, [pc, #812]	; (800d1c8 <UART_SetConfig+0x69c>)
 800ce9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cea2:	2b28      	cmp	r3, #40	; 0x28
 800cea4:	d86c      	bhi.n	800cf80 <UART_SetConfig+0x454>
 800cea6:	a201      	add	r2, pc, #4	; (adr r2, 800ceac <UART_SetConfig+0x380>)
 800cea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceac:	0800cf51 	.word	0x0800cf51
 800ceb0:	0800cf81 	.word	0x0800cf81
 800ceb4:	0800cf81 	.word	0x0800cf81
 800ceb8:	0800cf81 	.word	0x0800cf81
 800cebc:	0800cf81 	.word	0x0800cf81
 800cec0:	0800cf81 	.word	0x0800cf81
 800cec4:	0800cf81 	.word	0x0800cf81
 800cec8:	0800cf81 	.word	0x0800cf81
 800cecc:	0800cf59 	.word	0x0800cf59
 800ced0:	0800cf81 	.word	0x0800cf81
 800ced4:	0800cf81 	.word	0x0800cf81
 800ced8:	0800cf81 	.word	0x0800cf81
 800cedc:	0800cf81 	.word	0x0800cf81
 800cee0:	0800cf81 	.word	0x0800cf81
 800cee4:	0800cf81 	.word	0x0800cf81
 800cee8:	0800cf81 	.word	0x0800cf81
 800ceec:	0800cf61 	.word	0x0800cf61
 800cef0:	0800cf81 	.word	0x0800cf81
 800cef4:	0800cf81 	.word	0x0800cf81
 800cef8:	0800cf81 	.word	0x0800cf81
 800cefc:	0800cf81 	.word	0x0800cf81
 800cf00:	0800cf81 	.word	0x0800cf81
 800cf04:	0800cf81 	.word	0x0800cf81
 800cf08:	0800cf81 	.word	0x0800cf81
 800cf0c:	0800cf69 	.word	0x0800cf69
 800cf10:	0800cf81 	.word	0x0800cf81
 800cf14:	0800cf81 	.word	0x0800cf81
 800cf18:	0800cf81 	.word	0x0800cf81
 800cf1c:	0800cf81 	.word	0x0800cf81
 800cf20:	0800cf81 	.word	0x0800cf81
 800cf24:	0800cf81 	.word	0x0800cf81
 800cf28:	0800cf81 	.word	0x0800cf81
 800cf2c:	0800cf71 	.word	0x0800cf71
 800cf30:	0800cf81 	.word	0x0800cf81
 800cf34:	0800cf81 	.word	0x0800cf81
 800cf38:	0800cf81 	.word	0x0800cf81
 800cf3c:	0800cf81 	.word	0x0800cf81
 800cf40:	0800cf81 	.word	0x0800cf81
 800cf44:	0800cf81 	.word	0x0800cf81
 800cf48:	0800cf81 	.word	0x0800cf81
 800cf4c:	0800cf79 	.word	0x0800cf79
 800cf50:	2301      	movs	r3, #1
 800cf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf56:	e0bc      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cf58:	2304      	movs	r3, #4
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5e:	e0b8      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cf60:	2308      	movs	r3, #8
 800cf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf66:	e0b4      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cf68:	2310      	movs	r3, #16
 800cf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6e:	e0b0      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cf70:	2320      	movs	r3, #32
 800cf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf76:	e0ac      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cf78:	2340      	movs	r3, #64	; 0x40
 800cf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7e:	e0a8      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cf80:	2380      	movs	r3, #128	; 0x80
 800cf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf86:	e0a4      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a8f      	ldr	r2, [pc, #572]	; (800d1cc <UART_SetConfig+0x6a0>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d130      	bne.n	800cff4 <UART_SetConfig+0x4c8>
 800cf92:	4b8d      	ldr	r3, [pc, #564]	; (800d1c8 <UART_SetConfig+0x69c>)
 800cf94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	2b05      	cmp	r3, #5
 800cf9c:	d826      	bhi.n	800cfec <UART_SetConfig+0x4c0>
 800cf9e:	a201      	add	r2, pc, #4	; (adr r2, 800cfa4 <UART_SetConfig+0x478>)
 800cfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa4:	0800cfbd 	.word	0x0800cfbd
 800cfa8:	0800cfc5 	.word	0x0800cfc5
 800cfac:	0800cfcd 	.word	0x0800cfcd
 800cfb0:	0800cfd5 	.word	0x0800cfd5
 800cfb4:	0800cfdd 	.word	0x0800cfdd
 800cfb8:	0800cfe5 	.word	0x0800cfe5
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc2:	e086      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cfc4:	2304      	movs	r3, #4
 800cfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfca:	e082      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cfcc:	2308      	movs	r3, #8
 800cfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd2:	e07e      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cfd4:	2310      	movs	r3, #16
 800cfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfda:	e07a      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cfdc:	2320      	movs	r3, #32
 800cfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe2:	e076      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cfe4:	2340      	movs	r3, #64	; 0x40
 800cfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfea:	e072      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cfec:	2380      	movs	r3, #128	; 0x80
 800cfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff2:	e06e      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a75      	ldr	r2, [pc, #468]	; (800d1d0 <UART_SetConfig+0x6a4>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d130      	bne.n	800d060 <UART_SetConfig+0x534>
 800cffe:	4b72      	ldr	r3, [pc, #456]	; (800d1c8 <UART_SetConfig+0x69c>)
 800d000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d002:	f003 0307 	and.w	r3, r3, #7
 800d006:	2b05      	cmp	r3, #5
 800d008:	d826      	bhi.n	800d058 <UART_SetConfig+0x52c>
 800d00a:	a201      	add	r2, pc, #4	; (adr r2, 800d010 <UART_SetConfig+0x4e4>)
 800d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d010:	0800d029 	.word	0x0800d029
 800d014:	0800d031 	.word	0x0800d031
 800d018:	0800d039 	.word	0x0800d039
 800d01c:	0800d041 	.word	0x0800d041
 800d020:	0800d049 	.word	0x0800d049
 800d024:	0800d051 	.word	0x0800d051
 800d028:	2300      	movs	r3, #0
 800d02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02e:	e050      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d030:	2304      	movs	r3, #4
 800d032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d036:	e04c      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d038:	2308      	movs	r3, #8
 800d03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03e:	e048      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d040:	2310      	movs	r3, #16
 800d042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d046:	e044      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d048:	2320      	movs	r3, #32
 800d04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04e:	e040      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d050:	2340      	movs	r3, #64	; 0x40
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d056:	e03c      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d058:	2380      	movs	r3, #128	; 0x80
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d05e:	e038      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a5b      	ldr	r2, [pc, #364]	; (800d1d4 <UART_SetConfig+0x6a8>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d130      	bne.n	800d0cc <UART_SetConfig+0x5a0>
 800d06a:	4b57      	ldr	r3, [pc, #348]	; (800d1c8 <UART_SetConfig+0x69c>)
 800d06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d06e:	f003 0307 	and.w	r3, r3, #7
 800d072:	2b05      	cmp	r3, #5
 800d074:	d826      	bhi.n	800d0c4 <UART_SetConfig+0x598>
 800d076:	a201      	add	r2, pc, #4	; (adr r2, 800d07c <UART_SetConfig+0x550>)
 800d078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07c:	0800d095 	.word	0x0800d095
 800d080:	0800d09d 	.word	0x0800d09d
 800d084:	0800d0a5 	.word	0x0800d0a5
 800d088:	0800d0ad 	.word	0x0800d0ad
 800d08c:	0800d0b5 	.word	0x0800d0b5
 800d090:	0800d0bd 	.word	0x0800d0bd
 800d094:	2302      	movs	r3, #2
 800d096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d09a:	e01a      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d09c:	2304      	movs	r3, #4
 800d09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0a2:	e016      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d0a4:	2308      	movs	r3, #8
 800d0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0aa:	e012      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d0ac:	2310      	movs	r3, #16
 800d0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0b2:	e00e      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d0b4:	2320      	movs	r3, #32
 800d0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ba:	e00a      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d0bc:	2340      	movs	r3, #64	; 0x40
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0c2:	e006      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d0c4:	2380      	movs	r3, #128	; 0x80
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ca:	e002      	b.n	800d0d2 <UART_SetConfig+0x5a6>
 800d0cc:	2380      	movs	r3, #128	; 0x80
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a3f      	ldr	r2, [pc, #252]	; (800d1d4 <UART_SetConfig+0x6a8>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	f040 80f8 	bne.w	800d2ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0e2:	2b20      	cmp	r3, #32
 800d0e4:	dc46      	bgt.n	800d174 <UART_SetConfig+0x648>
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	f2c0 8082 	blt.w	800d1f0 <UART_SetConfig+0x6c4>
 800d0ec:	3b02      	subs	r3, #2
 800d0ee:	2b1e      	cmp	r3, #30
 800d0f0:	d87e      	bhi.n	800d1f0 <UART_SetConfig+0x6c4>
 800d0f2:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <UART_SetConfig+0x5cc>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d17b 	.word	0x0800d17b
 800d0fc:	0800d1f1 	.word	0x0800d1f1
 800d100:	0800d183 	.word	0x0800d183
 800d104:	0800d1f1 	.word	0x0800d1f1
 800d108:	0800d1f1 	.word	0x0800d1f1
 800d10c:	0800d1f1 	.word	0x0800d1f1
 800d110:	0800d193 	.word	0x0800d193
 800d114:	0800d1f1 	.word	0x0800d1f1
 800d118:	0800d1f1 	.word	0x0800d1f1
 800d11c:	0800d1f1 	.word	0x0800d1f1
 800d120:	0800d1f1 	.word	0x0800d1f1
 800d124:	0800d1f1 	.word	0x0800d1f1
 800d128:	0800d1f1 	.word	0x0800d1f1
 800d12c:	0800d1f1 	.word	0x0800d1f1
 800d130:	0800d1a3 	.word	0x0800d1a3
 800d134:	0800d1f1 	.word	0x0800d1f1
 800d138:	0800d1f1 	.word	0x0800d1f1
 800d13c:	0800d1f1 	.word	0x0800d1f1
 800d140:	0800d1f1 	.word	0x0800d1f1
 800d144:	0800d1f1 	.word	0x0800d1f1
 800d148:	0800d1f1 	.word	0x0800d1f1
 800d14c:	0800d1f1 	.word	0x0800d1f1
 800d150:	0800d1f1 	.word	0x0800d1f1
 800d154:	0800d1f1 	.word	0x0800d1f1
 800d158:	0800d1f1 	.word	0x0800d1f1
 800d15c:	0800d1f1 	.word	0x0800d1f1
 800d160:	0800d1f1 	.word	0x0800d1f1
 800d164:	0800d1f1 	.word	0x0800d1f1
 800d168:	0800d1f1 	.word	0x0800d1f1
 800d16c:	0800d1f1 	.word	0x0800d1f1
 800d170:	0800d1e3 	.word	0x0800d1e3
 800d174:	2b40      	cmp	r3, #64	; 0x40
 800d176:	d037      	beq.n	800d1e8 <UART_SetConfig+0x6bc>
 800d178:	e03a      	b.n	800d1f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d17a:	f7fc fb45 	bl	8009808 <HAL_RCCEx_GetD3PCLK1Freq>
 800d17e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d180:	e03c      	b.n	800d1fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d186:	4618      	mov	r0, r3
 800d188:	f7fc fb54 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d190:	e034      	b.n	800d1fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d192:	f107 0318 	add.w	r3, r7, #24
 800d196:	4618      	mov	r0, r3
 800d198:	f7fc fca0 	bl	8009adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1a0:	e02c      	b.n	800d1fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1a2:	4b09      	ldr	r3, [pc, #36]	; (800d1c8 <UART_SetConfig+0x69c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0320 	and.w	r3, r3, #32
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d016      	beq.n	800d1dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1ae:	4b06      	ldr	r3, [pc, #24]	; (800d1c8 <UART_SetConfig+0x69c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	08db      	lsrs	r3, r3, #3
 800d1b4:	f003 0303 	and.w	r3, r3, #3
 800d1b8:	4a07      	ldr	r2, [pc, #28]	; (800d1d8 <UART_SetConfig+0x6ac>)
 800d1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1c0:	e01c      	b.n	800d1fc <UART_SetConfig+0x6d0>
 800d1c2:	bf00      	nop
 800d1c4:	40011400 	.word	0x40011400
 800d1c8:	58024400 	.word	0x58024400
 800d1cc:	40007800 	.word	0x40007800
 800d1d0:	40007c00 	.word	0x40007c00
 800d1d4:	58000c00 	.word	0x58000c00
 800d1d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d1dc:	4b9d      	ldr	r3, [pc, #628]	; (800d454 <UART_SetConfig+0x928>)
 800d1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1e0:	e00c      	b.n	800d1fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1e2:	4b9d      	ldr	r3, [pc, #628]	; (800d458 <UART_SetConfig+0x92c>)
 800d1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1e6:	e009      	b.n	800d1fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ee:	e005      	b.n	800d1fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d1fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 81de 	beq.w	800d5c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d208:	4a94      	ldr	r2, [pc, #592]	; (800d45c <UART_SetConfig+0x930>)
 800d20a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d20e:	461a      	mov	r2, r3
 800d210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d212:	fbb3 f3f2 	udiv	r3, r3, r2
 800d216:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	4613      	mov	r3, r2
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	4413      	add	r3, r2
 800d222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d224:	429a      	cmp	r2, r3
 800d226:	d305      	bcc.n	800d234 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d22e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d230:	429a      	cmp	r2, r3
 800d232:	d903      	bls.n	800d23c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d23a:	e1c1      	b.n	800d5c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23e:	2200      	movs	r2, #0
 800d240:	60bb      	str	r3, [r7, #8]
 800d242:	60fa      	str	r2, [r7, #12]
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	4a84      	ldr	r2, [pc, #528]	; (800d45c <UART_SetConfig+0x930>)
 800d24a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d24e:	b29b      	uxth	r3, r3
 800d250:	2200      	movs	r2, #0
 800d252:	603b      	str	r3, [r7, #0]
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d25a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d25e:	f7f3 fa53 	bl	8000708 <__aeabi_uldivmod>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4610      	mov	r0, r2
 800d268:	4619      	mov	r1, r3
 800d26a:	f04f 0200 	mov.w	r2, #0
 800d26e:	f04f 0300 	mov.w	r3, #0
 800d272:	020b      	lsls	r3, r1, #8
 800d274:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d278:	0202      	lsls	r2, r0, #8
 800d27a:	6979      	ldr	r1, [r7, #20]
 800d27c:	6849      	ldr	r1, [r1, #4]
 800d27e:	0849      	lsrs	r1, r1, #1
 800d280:	2000      	movs	r0, #0
 800d282:	460c      	mov	r4, r1
 800d284:	4605      	mov	r5, r0
 800d286:	eb12 0804 	adds.w	r8, r2, r4
 800d28a:	eb43 0905 	adc.w	r9, r3, r5
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	469a      	mov	sl, r3
 800d296:	4693      	mov	fp, r2
 800d298:	4652      	mov	r2, sl
 800d29a:	465b      	mov	r3, fp
 800d29c:	4640      	mov	r0, r8
 800d29e:	4649      	mov	r1, r9
 800d2a0:	f7f3 fa32 	bl	8000708 <__aeabi_uldivmod>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2b2:	d308      	bcc.n	800d2c6 <UART_SetConfig+0x79a>
 800d2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2ba:	d204      	bcs.n	800d2c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2c2:	60da      	str	r2, [r3, #12]
 800d2c4:	e17c      	b.n	800d5c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d2cc:	e178      	b.n	800d5c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	69db      	ldr	r3, [r3, #28]
 800d2d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2d6:	f040 80c5 	bne.w	800d464 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d2da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2de:	2b20      	cmp	r3, #32
 800d2e0:	dc48      	bgt.n	800d374 <UART_SetConfig+0x848>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	db7b      	blt.n	800d3de <UART_SetConfig+0x8b2>
 800d2e6:	2b20      	cmp	r3, #32
 800d2e8:	d879      	bhi.n	800d3de <UART_SetConfig+0x8b2>
 800d2ea:	a201      	add	r2, pc, #4	; (adr r2, 800d2f0 <UART_SetConfig+0x7c4>)
 800d2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f0:	0800d37b 	.word	0x0800d37b
 800d2f4:	0800d383 	.word	0x0800d383
 800d2f8:	0800d3df 	.word	0x0800d3df
 800d2fc:	0800d3df 	.word	0x0800d3df
 800d300:	0800d38b 	.word	0x0800d38b
 800d304:	0800d3df 	.word	0x0800d3df
 800d308:	0800d3df 	.word	0x0800d3df
 800d30c:	0800d3df 	.word	0x0800d3df
 800d310:	0800d39b 	.word	0x0800d39b
 800d314:	0800d3df 	.word	0x0800d3df
 800d318:	0800d3df 	.word	0x0800d3df
 800d31c:	0800d3df 	.word	0x0800d3df
 800d320:	0800d3df 	.word	0x0800d3df
 800d324:	0800d3df 	.word	0x0800d3df
 800d328:	0800d3df 	.word	0x0800d3df
 800d32c:	0800d3df 	.word	0x0800d3df
 800d330:	0800d3ab 	.word	0x0800d3ab
 800d334:	0800d3df 	.word	0x0800d3df
 800d338:	0800d3df 	.word	0x0800d3df
 800d33c:	0800d3df 	.word	0x0800d3df
 800d340:	0800d3df 	.word	0x0800d3df
 800d344:	0800d3df 	.word	0x0800d3df
 800d348:	0800d3df 	.word	0x0800d3df
 800d34c:	0800d3df 	.word	0x0800d3df
 800d350:	0800d3df 	.word	0x0800d3df
 800d354:	0800d3df 	.word	0x0800d3df
 800d358:	0800d3df 	.word	0x0800d3df
 800d35c:	0800d3df 	.word	0x0800d3df
 800d360:	0800d3df 	.word	0x0800d3df
 800d364:	0800d3df 	.word	0x0800d3df
 800d368:	0800d3df 	.word	0x0800d3df
 800d36c:	0800d3df 	.word	0x0800d3df
 800d370:	0800d3d1 	.word	0x0800d3d1
 800d374:	2b40      	cmp	r3, #64	; 0x40
 800d376:	d02e      	beq.n	800d3d6 <UART_SetConfig+0x8aa>
 800d378:	e031      	b.n	800d3de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d37a:	f7fb fad3 	bl	8008924 <HAL_RCC_GetPCLK1Freq>
 800d37e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d380:	e033      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d382:	f7fb fae5 	bl	8008950 <HAL_RCC_GetPCLK2Freq>
 800d386:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d388:	e02f      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fc fa50 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d398:	e027      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d39a:	f107 0318 	add.w	r3, r7, #24
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fc fb9c 	bl	8009adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3a8:	e01f      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3aa:	4b2d      	ldr	r3, [pc, #180]	; (800d460 <UART_SetConfig+0x934>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 0320 	and.w	r3, r3, #32
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d009      	beq.n	800d3ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3b6:	4b2a      	ldr	r3, [pc, #168]	; (800d460 <UART_SetConfig+0x934>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	08db      	lsrs	r3, r3, #3
 800d3bc:	f003 0303 	and.w	r3, r3, #3
 800d3c0:	4a24      	ldr	r2, [pc, #144]	; (800d454 <UART_SetConfig+0x928>)
 800d3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3c8:	e00f      	b.n	800d3ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d3ca:	4b22      	ldr	r3, [pc, #136]	; (800d454 <UART_SetConfig+0x928>)
 800d3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ce:	e00c      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d3d0:	4b21      	ldr	r3, [pc, #132]	; (800d458 <UART_SetConfig+0x92c>)
 800d3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3d4:	e009      	b.n	800d3ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3dc:	e005      	b.n	800d3ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f000 80e7 	beq.w	800d5c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f6:	4a19      	ldr	r2, [pc, #100]	; (800d45c <UART_SetConfig+0x930>)
 800d3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d400:	fbb3 f3f2 	udiv	r3, r3, r2
 800d404:	005a      	lsls	r2, r3, #1
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	085b      	lsrs	r3, r3, #1
 800d40c:	441a      	add	r2, r3
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	fbb2 f3f3 	udiv	r3, r2, r3
 800d416:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	2b0f      	cmp	r3, #15
 800d41c:	d916      	bls.n	800d44c <UART_SetConfig+0x920>
 800d41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d424:	d212      	bcs.n	800d44c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	b29b      	uxth	r3, r3
 800d42a:	f023 030f 	bic.w	r3, r3, #15
 800d42e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	085b      	lsrs	r3, r3, #1
 800d434:	b29b      	uxth	r3, r3
 800d436:	f003 0307 	and.w	r3, r3, #7
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d43e:	4313      	orrs	r3, r2
 800d440:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d448:	60da      	str	r2, [r3, #12]
 800d44a:	e0b9      	b.n	800d5c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d452:	e0b5      	b.n	800d5c0 <UART_SetConfig+0xa94>
 800d454:	03d09000 	.word	0x03d09000
 800d458:	003d0900 	.word	0x003d0900
 800d45c:	08011e50 	.word	0x08011e50
 800d460:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d464:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d468:	2b20      	cmp	r3, #32
 800d46a:	dc49      	bgt.n	800d500 <UART_SetConfig+0x9d4>
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	db7c      	blt.n	800d56a <UART_SetConfig+0xa3e>
 800d470:	2b20      	cmp	r3, #32
 800d472:	d87a      	bhi.n	800d56a <UART_SetConfig+0xa3e>
 800d474:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <UART_SetConfig+0x950>)
 800d476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47a:	bf00      	nop
 800d47c:	0800d507 	.word	0x0800d507
 800d480:	0800d50f 	.word	0x0800d50f
 800d484:	0800d56b 	.word	0x0800d56b
 800d488:	0800d56b 	.word	0x0800d56b
 800d48c:	0800d517 	.word	0x0800d517
 800d490:	0800d56b 	.word	0x0800d56b
 800d494:	0800d56b 	.word	0x0800d56b
 800d498:	0800d56b 	.word	0x0800d56b
 800d49c:	0800d527 	.word	0x0800d527
 800d4a0:	0800d56b 	.word	0x0800d56b
 800d4a4:	0800d56b 	.word	0x0800d56b
 800d4a8:	0800d56b 	.word	0x0800d56b
 800d4ac:	0800d56b 	.word	0x0800d56b
 800d4b0:	0800d56b 	.word	0x0800d56b
 800d4b4:	0800d56b 	.word	0x0800d56b
 800d4b8:	0800d56b 	.word	0x0800d56b
 800d4bc:	0800d537 	.word	0x0800d537
 800d4c0:	0800d56b 	.word	0x0800d56b
 800d4c4:	0800d56b 	.word	0x0800d56b
 800d4c8:	0800d56b 	.word	0x0800d56b
 800d4cc:	0800d56b 	.word	0x0800d56b
 800d4d0:	0800d56b 	.word	0x0800d56b
 800d4d4:	0800d56b 	.word	0x0800d56b
 800d4d8:	0800d56b 	.word	0x0800d56b
 800d4dc:	0800d56b 	.word	0x0800d56b
 800d4e0:	0800d56b 	.word	0x0800d56b
 800d4e4:	0800d56b 	.word	0x0800d56b
 800d4e8:	0800d56b 	.word	0x0800d56b
 800d4ec:	0800d56b 	.word	0x0800d56b
 800d4f0:	0800d56b 	.word	0x0800d56b
 800d4f4:	0800d56b 	.word	0x0800d56b
 800d4f8:	0800d56b 	.word	0x0800d56b
 800d4fc:	0800d55d 	.word	0x0800d55d
 800d500:	2b40      	cmp	r3, #64	; 0x40
 800d502:	d02e      	beq.n	800d562 <UART_SetConfig+0xa36>
 800d504:	e031      	b.n	800d56a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d506:	f7fb fa0d 	bl	8008924 <HAL_RCC_GetPCLK1Freq>
 800d50a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d50c:	e033      	b.n	800d576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d50e:	f7fb fa1f 	bl	8008950 <HAL_RCC_GetPCLK2Freq>
 800d512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d514:	e02f      	b.n	800d576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fc f98a 	bl	8009834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d524:	e027      	b.n	800d576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d526:	f107 0318 	add.w	r3, r7, #24
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fc fad6 	bl	8009adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d534:	e01f      	b.n	800d576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d536:	4b2d      	ldr	r3, [pc, #180]	; (800d5ec <UART_SetConfig+0xac0>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f003 0320 	and.w	r3, r3, #32
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d009      	beq.n	800d556 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d542:	4b2a      	ldr	r3, [pc, #168]	; (800d5ec <UART_SetConfig+0xac0>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	08db      	lsrs	r3, r3, #3
 800d548:	f003 0303 	and.w	r3, r3, #3
 800d54c:	4a28      	ldr	r2, [pc, #160]	; (800d5f0 <UART_SetConfig+0xac4>)
 800d54e:	fa22 f303 	lsr.w	r3, r2, r3
 800d552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d554:	e00f      	b.n	800d576 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d556:	4b26      	ldr	r3, [pc, #152]	; (800d5f0 <UART_SetConfig+0xac4>)
 800d558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d55a:	e00c      	b.n	800d576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d55c:	4b25      	ldr	r3, [pc, #148]	; (800d5f4 <UART_SetConfig+0xac8>)
 800d55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d560:	e009      	b.n	800d576 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d568:	e005      	b.n	800d576 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d574:	bf00      	nop
    }

    if (pclk != 0U)
 800d576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d021      	beq.n	800d5c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d580:	4a1d      	ldr	r2, [pc, #116]	; (800d5f8 <UART_SetConfig+0xacc>)
 800d582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d586:	461a      	mov	r2, r3
 800d588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d58a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	085b      	lsrs	r3, r3, #1
 800d594:	441a      	add	r2, r3
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d59e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a2:	2b0f      	cmp	r3, #15
 800d5a4:	d909      	bls.n	800d5ba <UART_SetConfig+0xa8e>
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5ac:	d205      	bcs.n	800d5ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	60da      	str	r2, [r3, #12]
 800d5b8:	e002      	b.n	800d5c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d5dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3748      	adds	r7, #72	; 0x48
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5ea:	bf00      	nop
 800d5ec:	58024400 	.word	0x58024400
 800d5f0:	03d09000 	.word	0x03d09000
 800d5f4:	003d0900 	.word	0x003d0900
 800d5f8:	08011e50 	.word	0x08011e50

0800d5fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00a      	beq.n	800d626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	430a      	orrs	r2, r1
 800d624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62a:	f003 0302 	and.w	r3, r3, #2
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00a      	beq.n	800d66a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	430a      	orrs	r2, r1
 800d668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d66e:	f003 0308 	and.w	r3, r3, #8
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00a      	beq.n	800d68c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	430a      	orrs	r2, r1
 800d68a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d690:	f003 0310 	and.w	r3, r3, #16
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00a      	beq.n	800d6ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b2:	f003 0320 	and.w	r3, r3, #32
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00a      	beq.n	800d6d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d01a      	beq.n	800d712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	430a      	orrs	r2, r1
 800d6f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6fa:	d10a      	bne.n	800d712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	430a      	orrs	r2, r1
 800d710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	605a      	str	r2, [r3, #4]
  }
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af02      	add	r7, sp, #8
 800d746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d750:	f7f9 f842 	bl	80067d8 <HAL_GetTick>
 800d754:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 0308 	and.w	r3, r3, #8
 800d760:	2b08      	cmp	r3, #8
 800d762:	d10e      	bne.n	800d782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f82f 	bl	800d7d6 <UART_WaitOnFlagUntilTimeout>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e025      	b.n	800d7ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	d10e      	bne.n	800d7ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f819 	bl	800d7d6 <UART_WaitOnFlagUntilTimeout>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	e00f      	b.n	800d7ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2220      	movs	r2, #32
 800d7b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2220      	movs	r2, #32
 800d7ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b09c      	sub	sp, #112	; 0x70
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	603b      	str	r3, [r7, #0]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7e6:	e0a9      	b.n	800d93c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ee:	f000 80a5 	beq.w	800d93c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7f2:	f7f8 fff1 	bl	80067d8 <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d302      	bcc.n	800d808 <UART_WaitOnFlagUntilTimeout+0x32>
 800d802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d804:	2b00      	cmp	r3, #0
 800d806:	d140      	bne.n	800d88a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d810:	e853 3f00 	ldrex	r3, [r3]
 800d814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d81c:	667b      	str	r3, [r7, #100]	; 0x64
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	461a      	mov	r2, r3
 800d824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d826:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d828:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d82c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d82e:	e841 2300 	strex	r3, r2, [r1]
 800d832:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1e6      	bne.n	800d808 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3308      	adds	r3, #8
 800d840:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d844:	e853 3f00 	ldrex	r3, [r3]
 800d848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	f023 0301 	bic.w	r3, r3, #1
 800d850:	663b      	str	r3, [r7, #96]	; 0x60
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3308      	adds	r3, #8
 800d858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d85a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d85c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d862:	e841 2300 	strex	r3, r2, [r1]
 800d866:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1e5      	bne.n	800d83a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2220      	movs	r2, #32
 800d872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2220      	movs	r2, #32
 800d87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2200      	movs	r2, #0
 800d882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d886:	2303      	movs	r3, #3
 800d888:	e069      	b.n	800d95e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f003 0304 	and.w	r3, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	d051      	beq.n	800d93c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	69db      	ldr	r3, [r3, #28]
 800d89e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8a6:	d149      	bne.n	800d93c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ba:	e853 3f00 	ldrex	r3, [r3]
 800d8be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d8c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8d8:	e841 2300 	strex	r3, r2, [r1]
 800d8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1e6      	bne.n	800d8b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	e853 3f00 	ldrex	r3, [r3]
 800d8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f023 0301 	bic.w	r3, r3, #1
 800d8fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	3308      	adds	r3, #8
 800d902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d904:	623a      	str	r2, [r7, #32]
 800d906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d908:	69f9      	ldr	r1, [r7, #28]
 800d90a:	6a3a      	ldr	r2, [r7, #32]
 800d90c:	e841 2300 	strex	r3, r2, [r1]
 800d910:	61bb      	str	r3, [r7, #24]
   return(result);
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d1e5      	bne.n	800d8e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2220      	movs	r2, #32
 800d91c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2220      	movs	r2, #32
 800d924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2220      	movs	r2, #32
 800d92c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d938:	2303      	movs	r3, #3
 800d93a:	e010      	b.n	800d95e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	69da      	ldr	r2, [r3, #28]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	4013      	ands	r3, r2
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	429a      	cmp	r2, r3
 800d94a:	bf0c      	ite	eq
 800d94c:	2301      	moveq	r3, #1
 800d94e:	2300      	movne	r3, #0
 800d950:	b2db      	uxtb	r3, r3
 800d952:	461a      	mov	r2, r3
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	429a      	cmp	r2, r3
 800d958:	f43f af46 	beq.w	800d7e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3770      	adds	r7, #112	; 0x70
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d968:	b480      	push	{r7}
 800d96a:	b0a3      	sub	sp, #140	; 0x8c
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	4613      	mov	r3, r2
 800d974:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	88fa      	ldrh	r2, [r7, #6]
 800d980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	88fa      	ldrh	r2, [r7, #6]
 800d988:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d99a:	d10e      	bne.n	800d9ba <UART_Start_Receive_IT+0x52>
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d105      	bne.n	800d9b0 <UART_Start_Receive_IT+0x48>
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d9aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d9ae:	e02d      	b.n	800da0c <UART_Start_Receive_IT+0xa4>
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	22ff      	movs	r2, #255	; 0xff
 800d9b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d9b8:	e028      	b.n	800da0c <UART_Start_Receive_IT+0xa4>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10d      	bne.n	800d9de <UART_Start_Receive_IT+0x76>
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d104      	bne.n	800d9d4 <UART_Start_Receive_IT+0x6c>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	22ff      	movs	r2, #255	; 0xff
 800d9ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d9d2:	e01b      	b.n	800da0c <UART_Start_Receive_IT+0xa4>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	227f      	movs	r2, #127	; 0x7f
 800d9d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d9dc:	e016      	b.n	800da0c <UART_Start_Receive_IT+0xa4>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9e6:	d10d      	bne.n	800da04 <UART_Start_Receive_IT+0x9c>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d104      	bne.n	800d9fa <UART_Start_Receive_IT+0x92>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	227f      	movs	r2, #127	; 0x7f
 800d9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d9f8:	e008      	b.n	800da0c <UART_Start_Receive_IT+0xa4>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	223f      	movs	r2, #63	; 0x3f
 800d9fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800da02:	e003      	b.n	800da0c <UART_Start_Receive_IT+0xa4>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2200      	movs	r2, #0
 800da08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2222      	movs	r2, #34	; 0x22
 800da18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	3308      	adds	r3, #8
 800da22:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da26:	e853 3f00 	ldrex	r3, [r3]
 800da2a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800da2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da2e:	f043 0301 	orr.w	r3, r3, #1
 800da32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3308      	adds	r3, #8
 800da3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800da40:	673a      	str	r2, [r7, #112]	; 0x70
 800da42:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800da46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800da4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e3      	bne.n	800da1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da5c:	d153      	bne.n	800db06 <UART_Start_Receive_IT+0x19e>
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800da64:	88fa      	ldrh	r2, [r7, #6]
 800da66:	429a      	cmp	r2, r3
 800da68:	d34d      	bcc.n	800db06 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da72:	d107      	bne.n	800da84 <UART_Start_Receive_IT+0x11c>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d103      	bne.n	800da84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4a4b      	ldr	r2, [pc, #300]	; (800dbac <UART_Start_Receive_IT+0x244>)
 800da80:	671a      	str	r2, [r3, #112]	; 0x70
 800da82:	e002      	b.n	800da8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	4a4a      	ldr	r2, [pc, #296]	; (800dbb0 <UART_Start_Receive_IT+0x248>)
 800da88:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d01a      	beq.n	800dad0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa2:	e853 3f00 	ldrex	r3, [r3]
 800daa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800daa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800daae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	461a      	mov	r2, r3
 800dab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dabc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dabe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dac2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dac4:	e841 2300 	strex	r3, r2, [r1]
 800dac8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800daca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1e4      	bne.n	800da9a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3308      	adds	r3, #8
 800dad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dada:	e853 3f00 	ldrex	r3, [r3]
 800dade:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	3308      	adds	r3, #8
 800daee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800daf0:	64ba      	str	r2, [r7, #72]	; 0x48
 800daf2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800daf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800daf8:	e841 2300 	strex	r3, r2, [r1]
 800dafc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1e5      	bne.n	800dad0 <UART_Start_Receive_IT+0x168>
 800db04:	e04a      	b.n	800db9c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db0e:	d107      	bne.n	800db20 <UART_Start_Receive_IT+0x1b8>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d103      	bne.n	800db20 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4a26      	ldr	r2, [pc, #152]	; (800dbb4 <UART_Start_Receive_IT+0x24c>)
 800db1c:	671a      	str	r2, [r3, #112]	; 0x70
 800db1e:	e002      	b.n	800db26 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	4a25      	ldr	r2, [pc, #148]	; (800dbb8 <UART_Start_Receive_IT+0x250>)
 800db24:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d019      	beq.n	800db6a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	e853 3f00 	ldrex	r3, [r3]
 800db42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800db4a:	677b      	str	r3, [r7, #116]	; 0x74
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	461a      	mov	r2, r3
 800db52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db54:	637b      	str	r3, [r7, #52]	; 0x34
 800db56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db5c:	e841 2300 	strex	r3, r2, [r1]
 800db60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1e6      	bne.n	800db36 <UART_Start_Receive_IT+0x1ce>
 800db68:	e018      	b.n	800db9c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	e853 3f00 	ldrex	r3, [r3]
 800db76:	613b      	str	r3, [r7, #16]
   return(result);
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	f043 0320 	orr.w	r3, r3, #32
 800db7e:	67bb      	str	r3, [r7, #120]	; 0x78
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	461a      	mov	r2, r3
 800db86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db88:	623b      	str	r3, [r7, #32]
 800db8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8c:	69f9      	ldr	r1, [r7, #28]
 800db8e:	6a3a      	ldr	r2, [r7, #32]
 800db90:	e841 2300 	strex	r3, r2, [r1]
 800db94:	61bb      	str	r3, [r7, #24]
   return(result);
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1e6      	bne.n	800db6a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	378c      	adds	r7, #140	; 0x8c
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	0800e2c5 	.word	0x0800e2c5
 800dbb0:	0800dfcd 	.word	0x0800dfcd
 800dbb4:	0800de6b 	.word	0x0800de6b
 800dbb8:	0800dd0b 	.word	0x0800dd0b

0800dbbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b095      	sub	sp, #84	; 0x54
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbcc:	e853 3f00 	ldrex	r3, [r3]
 800dbd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe2:	643b      	str	r3, [r7, #64]	; 0x40
 800dbe4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dbea:	e841 2300 	strex	r3, r2, [r1]
 800dbee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e6      	bne.n	800dbc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3308      	adds	r3, #8
 800dbfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfe:	6a3b      	ldr	r3, [r7, #32]
 800dc00:	e853 3f00 	ldrex	r3, [r3]
 800dc04:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc06:	69fa      	ldr	r2, [r7, #28]
 800dc08:	4b1e      	ldr	r3, [pc, #120]	; (800dc84 <UART_EndRxTransfer+0xc8>)
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	3308      	adds	r3, #8
 800dc14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc1e:	e841 2300 	strex	r3, r2, [r1]
 800dc22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1e5      	bne.n	800dbf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d118      	bne.n	800dc64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	e853 3f00 	ldrex	r3, [r3]
 800dc3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	f023 0310 	bic.w	r3, r3, #16
 800dc46:	647b      	str	r3, [r7, #68]	; 0x44
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc50:	61bb      	str	r3, [r7, #24]
 800dc52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc54:	6979      	ldr	r1, [r7, #20]
 800dc56:	69ba      	ldr	r2, [r7, #24]
 800dc58:	e841 2300 	strex	r3, r2, [r1]
 800dc5c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d1e6      	bne.n	800dc32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2220      	movs	r2, #32
 800dc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	671a      	str	r2, [r3, #112]	; 0x70
}
 800dc78:	bf00      	nop
 800dc7a:	3754      	adds	r7, #84	; 0x54
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	effffffe 	.word	0xeffffffe

0800dc88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	f7fe ff2a 	bl	800cb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcac:	bf00      	nop
 800dcae:	3710      	adds	r7, #16
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	e853 3f00 	ldrex	r3, [r3]
 800dcc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcd0:	61fb      	str	r3, [r7, #28]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	61bb      	str	r3, [r7, #24]
 800dcdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcde:	6979      	ldr	r1, [r7, #20]
 800dce0:	69ba      	ldr	r2, [r7, #24]
 800dce2:	e841 2300 	strex	r3, r2, [r1]
 800dce6:	613b      	str	r3, [r7, #16]
   return(result);
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e6      	bne.n	800dcbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7f5 fd81 	bl	8003804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd02:	bf00      	nop
 800dd04:	3720      	adds	r7, #32
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b096      	sub	sp, #88	; 0x58
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd22:	2b22      	cmp	r3, #34	; 0x22
 800dd24:	f040 8095 	bne.w	800de52 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800dd36:	b2d9      	uxtb	r1, r3
 800dd38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd42:	400a      	ands	r2, r1
 800dd44:	b2d2      	uxtb	r2, r2
 800dd46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d178      	bne.n	800de62 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	e853 3f00 	ldrex	r3, [r3]
 800dd7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd84:	653b      	str	r3, [r7, #80]	; 0x50
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd8e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd96:	e841 2300 	strex	r3, r2, [r1]
 800dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e6      	bne.n	800dd70 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3308      	adds	r3, #8
 800dda8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	e853 3f00 	ldrex	r3, [r3]
 800ddb0:	623b      	str	r3, [r7, #32]
   return(result);
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	f023 0301 	bic.w	r3, r3, #1
 800ddb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	3308      	adds	r3, #8
 800ddc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddc2:	633a      	str	r2, [r7, #48]	; 0x30
 800ddc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddca:	e841 2300 	strex	r3, r2, [r1]
 800ddce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ddd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d1e5      	bne.n	800dda2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2220      	movs	r2, #32
 800ddda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d12e      	bne.n	800de4a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	e853 3f00 	ldrex	r3, [r3]
 800ddfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f023 0310 	bic.w	r3, r3, #16
 800de06:	64bb      	str	r3, [r7, #72]	; 0x48
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	461a      	mov	r2, r3
 800de0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de10:	61fb      	str	r3, [r7, #28]
 800de12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de14:	69b9      	ldr	r1, [r7, #24]
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	e841 2300 	strex	r3, r2, [r1]
 800de1c:	617b      	str	r3, [r7, #20]
   return(result);
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1e6      	bne.n	800ddf2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	69db      	ldr	r3, [r3, #28]
 800de2a:	f003 0310 	and.w	r3, r3, #16
 800de2e:	2b10      	cmp	r3, #16
 800de30:	d103      	bne.n	800de3a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2210      	movs	r2, #16
 800de38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de40:	4619      	mov	r1, r3
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7fe fe66 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de48:	e00b      	b.n	800de62 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7f5 fc66 	bl	800371c <HAL_UART_RxCpltCallback>
}
 800de50:	e007      	b.n	800de62 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	699a      	ldr	r2, [r3, #24]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f042 0208 	orr.w	r2, r2, #8
 800de60:	619a      	str	r2, [r3, #24]
}
 800de62:	bf00      	nop
 800de64:	3758      	adds	r7, #88	; 0x58
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b096      	sub	sp, #88	; 0x58
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de82:	2b22      	cmp	r3, #34	; 0x22
 800de84:	f040 8095 	bne.w	800dfb2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de96:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800de98:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800de9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dea0:	4013      	ands	r3, r2
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deac:	1c9a      	adds	r2, r3, #2
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deb8:	b29b      	uxth	r3, r3
 800deba:	3b01      	subs	r3, #1
 800debc:	b29a      	uxth	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deca:	b29b      	uxth	r3, r3
 800decc:	2b00      	cmp	r3, #0
 800dece:	d178      	bne.n	800dfc2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded8:	e853 3f00 	ldrex	r3, [r3]
 800dedc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	461a      	mov	r2, r3
 800deec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deee:	643b      	str	r3, [r7, #64]	; 0x40
 800def0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800def4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800def6:	e841 2300 	strex	r3, r2, [r1]
 800defa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1e6      	bne.n	800ded0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	3308      	adds	r3, #8
 800df08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	e853 3f00 	ldrex	r3, [r3]
 800df10:	61fb      	str	r3, [r7, #28]
   return(result);
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	f023 0301 	bic.w	r3, r3, #1
 800df18:	64bb      	str	r3, [r7, #72]	; 0x48
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3308      	adds	r3, #8
 800df20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df22:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df2a:	e841 2300 	strex	r3, r2, [r1]
 800df2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1e5      	bne.n	800df02 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2220      	movs	r2, #32
 800df3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d12e      	bne.n	800dfaa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	f023 0310 	bic.w	r3, r3, #16
 800df66:	647b      	str	r3, [r7, #68]	; 0x44
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
 800df6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df70:	61bb      	str	r3, [r7, #24]
 800df72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	6979      	ldr	r1, [r7, #20]
 800df76:	69ba      	ldr	r2, [r7, #24]
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	613b      	str	r3, [r7, #16]
   return(result);
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e6      	bne.n	800df52 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	69db      	ldr	r3, [r3, #28]
 800df8a:	f003 0310 	and.w	r3, r3, #16
 800df8e:	2b10      	cmp	r3, #16
 800df90:	d103      	bne.n	800df9a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2210      	movs	r2, #16
 800df98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7fe fdb6 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfa8:	e00b      	b.n	800dfc2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7f5 fbb6 	bl	800371c <HAL_UART_RxCpltCallback>
}
 800dfb0:	e007      	b.n	800dfc2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	699a      	ldr	r2, [r3, #24]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f042 0208 	orr.w	r2, r2, #8
 800dfc0:	619a      	str	r2, [r3, #24]
}
 800dfc2:	bf00      	nop
 800dfc4:	3758      	adds	r7, #88	; 0x58
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
	...

0800dfcc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b0a6      	sub	sp, #152	; 0x98
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dfda:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	69db      	ldr	r3, [r3, #28]
 800dfe4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e002:	2b22      	cmp	r3, #34	; 0x22
 800e004:	f040 814d 	bne.w	800e2a2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e00e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e012:	e0f4      	b.n	800e1fe <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e01e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e022:	b2d9      	uxtb	r1, r3
 800e024:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e02e:	400a      	ands	r2, r1
 800e030:	b2d2      	uxtb	r2, r2
 800e032:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e038:	1c5a      	adds	r2, r3, #1
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e044:	b29b      	uxth	r3, r3
 800e046:	3b01      	subs	r3, #1
 800e048:	b29a      	uxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	69db      	ldr	r3, [r3, #28]
 800e056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e05a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e05e:	f003 0307 	and.w	r3, r3, #7
 800e062:	2b00      	cmp	r3, #0
 800e064:	d053      	beq.n	800e10e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e06a:	f003 0301 	and.w	r3, r3, #1
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d011      	beq.n	800e096 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00b      	beq.n	800e096 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2201      	movs	r2, #1
 800e084:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e08c:	f043 0201 	orr.w	r2, r3, #1
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e09a:	f003 0302 	and.w	r3, r3, #2
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d011      	beq.n	800e0c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e0a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0a6:	f003 0301 	and.w	r3, r3, #1
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00b      	beq.n	800e0c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0bc:	f043 0204 	orr.w	r2, r3, #4
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e0ca:	f003 0304 	and.w	r3, r3, #4
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d011      	beq.n	800e0f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e0d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00b      	beq.n	800e0f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	2204      	movs	r2, #4
 800e0e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ec:	f043 0202 	orr.w	r2, r3, #2
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d006      	beq.n	800e10e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7fe fcfd 	bl	800cb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e114:	b29b      	uxth	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d171      	bne.n	800e1fe <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e122:	e853 3f00 	ldrex	r3, [r3]
 800e126:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e12a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e12e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	461a      	mov	r2, r3
 800e138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e13c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e13e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e140:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e142:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e144:	e841 2300 	strex	r3, r2, [r1]
 800e148:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e14a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1e4      	bne.n	800e11a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	3308      	adds	r3, #8
 800e156:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e15a:	e853 3f00 	ldrex	r3, [r3]
 800e15e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e162:	4b56      	ldr	r3, [pc, #344]	; (800e2bc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e164:	4013      	ands	r3, r2
 800e166:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	3308      	adds	r3, #8
 800e16e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e170:	657a      	str	r2, [r7, #84]	; 0x54
 800e172:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e174:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e176:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e178:	e841 2300 	strex	r3, r2, [r1]
 800e17c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1e5      	bne.n	800e150 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2220      	movs	r2, #32
 800e188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e196:	2b01      	cmp	r3, #1
 800e198:	d12e      	bne.n	800e1f8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1a8:	e853 3f00 	ldrex	r3, [r3]
 800e1ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	f023 0310 	bic.w	r3, r3, #16
 800e1b4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1be:	643b      	str	r3, [r7, #64]	; 0x40
 800e1c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e1c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1c6:	e841 2300 	strex	r3, r2, [r1]
 800e1ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1e6      	bne.n	800e1a0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	f003 0310 	and.w	r3, r3, #16
 800e1dc:	2b10      	cmp	r3, #16
 800e1de:	d103      	bne.n	800e1e8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2210      	movs	r2, #16
 800e1e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7fe fc8f 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
 800e1f6:	e002      	b.n	800e1fe <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7f5 fa8f 	bl	800371c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e1fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e202:	2b00      	cmp	r3, #0
 800e204:	d006      	beq.n	800e214 <UART_RxISR_8BIT_FIFOEN+0x248>
 800e206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e20a:	f003 0320 	and.w	r3, r3, #32
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f47f af00 	bne.w	800e014 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e21a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e21e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e222:	2b00      	cmp	r3, #0
 800e224:	d045      	beq.n	800e2b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e22c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e230:	429a      	cmp	r2, r3
 800e232:	d23e      	bcs.n	800e2b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3308      	adds	r3, #8
 800e23a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	e853 3f00 	ldrex	r3, [r3]
 800e242:	61fb      	str	r3, [r7, #28]
   return(result);
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e24a:	673b      	str	r3, [r7, #112]	; 0x70
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3308      	adds	r3, #8
 800e252:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e254:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e25c:	e841 2300 	strex	r3, r2, [r1]
 800e260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1e5      	bne.n	800e234 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4a15      	ldr	r2, [pc, #84]	; (800e2c0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e26c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	e853 3f00 	ldrex	r3, [r3]
 800e27a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	f043 0320 	orr.w	r3, r3, #32
 800e282:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e28c:	61bb      	str	r3, [r7, #24]
 800e28e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e290:	6979      	ldr	r1, [r7, #20]
 800e292:	69ba      	ldr	r2, [r7, #24]
 800e294:	e841 2300 	strex	r3, r2, [r1]
 800e298:	613b      	str	r3, [r7, #16]
   return(result);
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1e6      	bne.n	800e26e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2a0:	e007      	b.n	800e2b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	699a      	ldr	r2, [r3, #24]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f042 0208 	orr.w	r2, r2, #8
 800e2b0:	619a      	str	r2, [r3, #24]
}
 800e2b2:	bf00      	nop
 800e2b4:	3798      	adds	r7, #152	; 0x98
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	effffffe 	.word	0xeffffffe
 800e2c0:	0800dd0b 	.word	0x0800dd0b

0800e2c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b0a8      	sub	sp, #160	; 0xa0
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2d2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	69db      	ldr	r3, [r3, #28]
 800e2dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2fa:	2b22      	cmp	r3, #34	; 0x22
 800e2fc:	f040 8151 	bne.w	800e5a2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e306:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e30a:	e0f8      	b.n	800e4fe <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e312:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e31e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e322:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e326:	4013      	ands	r3, r2
 800e328:	b29a      	uxth	r2, r3
 800e32a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e32e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e334:	1c9a      	adds	r2, r3, #2
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e340:	b29b      	uxth	r3, r3
 800e342:	3b01      	subs	r3, #1
 800e344:	b29a      	uxth	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	69db      	ldr	r3, [r3, #28]
 800e352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e356:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e35a:	f003 0307 	and.w	r3, r3, #7
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d053      	beq.n	800e40a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e366:	f003 0301 	and.w	r3, r3, #1
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d011      	beq.n	800e392 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e36e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00b      	beq.n	800e392 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2201      	movs	r2, #1
 800e380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e388:	f043 0201 	orr.w	r2, r3, #1
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e396:	f003 0302 	and.w	r3, r3, #2
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d011      	beq.n	800e3c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e39e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00b      	beq.n	800e3c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3b8:	f043 0204 	orr.w	r2, r3, #4
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3c6:	f003 0304 	and.w	r3, r3, #4
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d011      	beq.n	800e3f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e3ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e3d2:	f003 0301 	and.w	r3, r3, #1
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00b      	beq.n	800e3f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2204      	movs	r2, #4
 800e3e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3e8:	f043 0202 	orr.w	r2, r3, #2
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d006      	beq.n	800e40a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7fe fb7f 	bl	800cb00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e410:	b29b      	uxth	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d173      	bne.n	800e4fe <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e41e:	e853 3f00 	ldrex	r3, [r3]
 800e422:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e42a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	461a      	mov	r2, r3
 800e434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e43a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e43e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e4      	bne.n	800e416 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3308      	adds	r3, #8
 800e452:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e45c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e45e:	4b57      	ldr	r3, [pc, #348]	; (800e5bc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e460:	4013      	ands	r3, r2
 800e462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3308      	adds	r3, #8
 800e46c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e470:	65ba      	str	r2, [r7, #88]	; 0x58
 800e472:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e478:	e841 2300 	strex	r3, r2, [r1]
 800e47c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1e3      	bne.n	800e44c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2220      	movs	r2, #32
 800e488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e496:	2b01      	cmp	r3, #1
 800e498:	d12e      	bne.n	800e4f8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b0:	f023 0310 	bic.w	r3, r3, #16
 800e4b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4be:	647b      	str	r3, [r7, #68]	; 0x44
 800e4c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e6      	bne.n	800e4a0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	69db      	ldr	r3, [r3, #28]
 800e4d8:	f003 0310 	and.w	r3, r3, #16
 800e4dc:	2b10      	cmp	r3, #16
 800e4de:	d103      	bne.n	800e4e8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2210      	movs	r2, #16
 800e4e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7fe fb0f 	bl	800cb14 <HAL_UARTEx_RxEventCallback>
 800e4f6:	e002      	b.n	800e4fe <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7f5 f90f 	bl	800371c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e4fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e502:	2b00      	cmp	r3, #0
 800e504:	d006      	beq.n	800e514 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e50a:	f003 0320 	and.w	r3, r3, #32
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f47f aefc 	bne.w	800e30c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e51a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e51e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e522:	2b00      	cmp	r3, #0
 800e524:	d045      	beq.n	800e5b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e52c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e530:	429a      	cmp	r2, r3
 800e532:	d23e      	bcs.n	800e5b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	3308      	adds	r3, #8
 800e53a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	e853 3f00 	ldrex	r3, [r3]
 800e542:	623b      	str	r3, [r7, #32]
   return(result);
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e54a:	677b      	str	r3, [r7, #116]	; 0x74
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	3308      	adds	r3, #8
 800e552:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e554:	633a      	str	r2, [r7, #48]	; 0x30
 800e556:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e55c:	e841 2300 	strex	r3, r2, [r1]
 800e560:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1e5      	bne.n	800e534 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a15      	ldr	r2, [pc, #84]	; (800e5c0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e56c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	e853 3f00 	ldrex	r3, [r3]
 800e57a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f043 0320 	orr.w	r3, r3, #32
 800e582:	673b      	str	r3, [r7, #112]	; 0x70
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	461a      	mov	r2, r3
 800e58a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e58c:	61fb      	str	r3, [r7, #28]
 800e58e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e590:	69b9      	ldr	r1, [r7, #24]
 800e592:	69fa      	ldr	r2, [r7, #28]
 800e594:	e841 2300 	strex	r3, r2, [r1]
 800e598:	617b      	str	r3, [r7, #20]
   return(result);
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1e6      	bne.n	800e56e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e5a0:	e007      	b.n	800e5b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	699a      	ldr	r2, [r3, #24]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f042 0208 	orr.w	r2, r2, #8
 800e5b0:	619a      	str	r2, [r3, #24]
}
 800e5b2:	bf00      	nop
 800e5b4:	37a0      	adds	r7, #160	; 0xa0
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	effffffe 	.word	0xeffffffe
 800e5c0:	0800de6b 	.word	0x0800de6b

0800e5c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d101      	bne.n	800e616 <HAL_UARTEx_DisableFifoMode+0x16>
 800e612:	2302      	movs	r3, #2
 800e614:	e027      	b.n	800e666 <HAL_UARTEx_DisableFifoMode+0x66>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2224      	movs	r2, #36	; 0x24
 800e622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f022 0201 	bic.w	r2, r2, #1
 800e63c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e644:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	68fa      	ldr	r2, [r7, #12]
 800e652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2220      	movs	r2, #32
 800e658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3714      	adds	r7, #20
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b084      	sub	sp, #16
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e682:	2b01      	cmp	r3, #1
 800e684:	d101      	bne.n	800e68a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e686:	2302      	movs	r3, #2
 800e688:	e02d      	b.n	800e6e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2224      	movs	r2, #36	; 0x24
 800e696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f022 0201 	bic.w	r2, r2, #1
 800e6b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f850 	bl	800e76c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	68fa      	ldr	r2, [r7, #12]
 800e6d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2220      	movs	r2, #32
 800e6d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b084      	sub	sp, #16
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d101      	bne.n	800e706 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e702:	2302      	movs	r3, #2
 800e704:	e02d      	b.n	800e762 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2224      	movs	r2, #36	; 0x24
 800e712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f022 0201 	bic.w	r2, r2, #1
 800e72c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	683a      	ldr	r2, [r7, #0]
 800e73e:	430a      	orrs	r2, r1
 800e740:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f812 	bl	800e76c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2220      	movs	r2, #32
 800e754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
	...

0800e76c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d108      	bne.n	800e78e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e78c:	e031      	b.n	800e7f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e78e:	2310      	movs	r3, #16
 800e790:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e792:	2310      	movs	r3, #16
 800e794:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	0e5b      	lsrs	r3, r3, #25
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	f003 0307 	and.w	r3, r3, #7
 800e7a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	0f5b      	lsrs	r3, r3, #29
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	f003 0307 	and.w	r3, r3, #7
 800e7b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7b6:	7bbb      	ldrb	r3, [r7, #14]
 800e7b8:	7b3a      	ldrb	r2, [r7, #12]
 800e7ba:	4911      	ldr	r1, [pc, #68]	; (800e800 <UARTEx_SetNbDataToProcess+0x94>)
 800e7bc:	5c8a      	ldrb	r2, [r1, r2]
 800e7be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7c2:	7b3a      	ldrb	r2, [r7, #12]
 800e7c4:	490f      	ldr	r1, [pc, #60]	; (800e804 <UARTEx_SetNbDataToProcess+0x98>)
 800e7c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	7b7a      	ldrb	r2, [r7, #13]
 800e7d8:	4909      	ldr	r1, [pc, #36]	; (800e800 <UARTEx_SetNbDataToProcess+0x94>)
 800e7da:	5c8a      	ldrb	r2, [r1, r2]
 800e7dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e7e0:	7b7a      	ldrb	r2, [r7, #13]
 800e7e2:	4908      	ldr	r1, [pc, #32]	; (800e804 <UARTEx_SetNbDataToProcess+0x98>)
 800e7e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e7f2:	bf00      	nop
 800e7f4:	3714      	adds	r7, #20
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop
 800e800:	08011e68 	.word	0x08011e68
 800e804:	08011e70 	.word	0x08011e70

0800e808 <__errno>:
 800e808:	4b01      	ldr	r3, [pc, #4]	; (800e810 <__errno+0x8>)
 800e80a:	6818      	ldr	r0, [r3, #0]
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	240000f8 	.word	0x240000f8

0800e814 <__libc_init_array>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	4d0d      	ldr	r5, [pc, #52]	; (800e84c <__libc_init_array+0x38>)
 800e818:	4c0d      	ldr	r4, [pc, #52]	; (800e850 <__libc_init_array+0x3c>)
 800e81a:	1b64      	subs	r4, r4, r5
 800e81c:	10a4      	asrs	r4, r4, #2
 800e81e:	2600      	movs	r6, #0
 800e820:	42a6      	cmp	r6, r4
 800e822:	d109      	bne.n	800e838 <__libc_init_array+0x24>
 800e824:	4d0b      	ldr	r5, [pc, #44]	; (800e854 <__libc_init_array+0x40>)
 800e826:	4c0c      	ldr	r4, [pc, #48]	; (800e858 <__libc_init_array+0x44>)
 800e828:	f003 fae8 	bl	8011dfc <_init>
 800e82c:	1b64      	subs	r4, r4, r5
 800e82e:	10a4      	asrs	r4, r4, #2
 800e830:	2600      	movs	r6, #0
 800e832:	42a6      	cmp	r6, r4
 800e834:	d105      	bne.n	800e842 <__libc_init_array+0x2e>
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	f855 3b04 	ldr.w	r3, [r5], #4
 800e83c:	4798      	blx	r3
 800e83e:	3601      	adds	r6, #1
 800e840:	e7ee      	b.n	800e820 <__libc_init_array+0xc>
 800e842:	f855 3b04 	ldr.w	r3, [r5], #4
 800e846:	4798      	blx	r3
 800e848:	3601      	adds	r6, #1
 800e84a:	e7f2      	b.n	800e832 <__libc_init_array+0x1e>
 800e84c:	08013b68 	.word	0x08013b68
 800e850:	08013b68 	.word	0x08013b68
 800e854:	08013b68 	.word	0x08013b68
 800e858:	08013b6c 	.word	0x08013b6c

0800e85c <memset>:
 800e85c:	4402      	add	r2, r0
 800e85e:	4603      	mov	r3, r0
 800e860:	4293      	cmp	r3, r2
 800e862:	d100      	bne.n	800e866 <memset+0xa>
 800e864:	4770      	bx	lr
 800e866:	f803 1b01 	strb.w	r1, [r3], #1
 800e86a:	e7f9      	b.n	800e860 <memset+0x4>

0800e86c <sulp>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	4604      	mov	r4, r0
 800e870:	460d      	mov	r5, r1
 800e872:	4616      	mov	r6, r2
 800e874:	ec45 4b10 	vmov	d0, r4, r5
 800e878:	f001 fcd6 	bl	8010228 <__ulp>
 800e87c:	b17e      	cbz	r6, 800e89e <sulp+0x32>
 800e87e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e882:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e886:	2b00      	cmp	r3, #0
 800e888:	dd09      	ble.n	800e89e <sulp+0x32>
 800e88a:	051b      	lsls	r3, r3, #20
 800e88c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e890:	2000      	movs	r0, #0
 800e892:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e896:	ec41 0b17 	vmov	d7, r0, r1
 800e89a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e89e:	bd70      	pop	{r4, r5, r6, pc}

0800e8a0 <_strtod_l>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	ed2d 8b0e 	vpush	{d8-d14}
 800e8a8:	b097      	sub	sp, #92	; 0x5c
 800e8aa:	461f      	mov	r7, r3
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	9312      	str	r3, [sp, #72]	; 0x48
 800e8b0:	4ba1      	ldr	r3, [pc, #644]	; (800eb38 <_strtod_l+0x298>)
 800e8b2:	920d      	str	r2, [sp, #52]	; 0x34
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	9307      	str	r3, [sp, #28]
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	468b      	mov	fp, r1
 800e8be:	f7f1 fd0f 	bl	80002e0 <strlen>
 800e8c2:	f04f 0800 	mov.w	r8, #0
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	f04f 0900 	mov.w	r9, #0
 800e8cc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e8d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e8d2:	7813      	ldrb	r3, [r2, #0]
 800e8d4:	2b2b      	cmp	r3, #43	; 0x2b
 800e8d6:	d04d      	beq.n	800e974 <_strtod_l+0xd4>
 800e8d8:	d83a      	bhi.n	800e950 <_strtod_l+0xb0>
 800e8da:	2b0d      	cmp	r3, #13
 800e8dc:	d833      	bhi.n	800e946 <_strtod_l+0xa6>
 800e8de:	2b08      	cmp	r3, #8
 800e8e0:	d833      	bhi.n	800e94a <_strtod_l+0xaa>
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d03d      	beq.n	800e962 <_strtod_l+0xc2>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	9308      	str	r3, [sp, #32]
 800e8ea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e8ec:	7833      	ldrb	r3, [r6, #0]
 800e8ee:	2b30      	cmp	r3, #48	; 0x30
 800e8f0:	f040 80b0 	bne.w	800ea54 <_strtod_l+0x1b4>
 800e8f4:	7873      	ldrb	r3, [r6, #1]
 800e8f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e8fa:	2b58      	cmp	r3, #88	; 0x58
 800e8fc:	d167      	bne.n	800e9ce <_strtod_l+0x12e>
 800e8fe:	9b08      	ldr	r3, [sp, #32]
 800e900:	9301      	str	r3, [sp, #4]
 800e902:	ab12      	add	r3, sp, #72	; 0x48
 800e904:	9702      	str	r7, [sp, #8]
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	4a8c      	ldr	r2, [pc, #560]	; (800eb3c <_strtod_l+0x29c>)
 800e90a:	ab13      	add	r3, sp, #76	; 0x4c
 800e90c:	a911      	add	r1, sp, #68	; 0x44
 800e90e:	4620      	mov	r0, r4
 800e910:	f000 fdf0 	bl	800f4f4 <__gethex>
 800e914:	f010 0507 	ands.w	r5, r0, #7
 800e918:	4607      	mov	r7, r0
 800e91a:	d005      	beq.n	800e928 <_strtod_l+0x88>
 800e91c:	2d06      	cmp	r5, #6
 800e91e:	d12b      	bne.n	800e978 <_strtod_l+0xd8>
 800e920:	3601      	adds	r6, #1
 800e922:	2300      	movs	r3, #0
 800e924:	9611      	str	r6, [sp, #68]	; 0x44
 800e926:	9308      	str	r3, [sp, #32]
 800e928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f040 854e 	bne.w	800f3cc <_strtod_l+0xb2c>
 800e930:	9b08      	ldr	r3, [sp, #32]
 800e932:	b1e3      	cbz	r3, 800e96e <_strtod_l+0xce>
 800e934:	ec49 8b17 	vmov	d7, r8, r9
 800e938:	eeb1 0b47 	vneg.f64	d0, d7
 800e93c:	b017      	add	sp, #92	; 0x5c
 800e93e:	ecbd 8b0e 	vpop	{d8-d14}
 800e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e946:	2b20      	cmp	r3, #32
 800e948:	d1cd      	bne.n	800e8e6 <_strtod_l+0x46>
 800e94a:	3201      	adds	r2, #1
 800e94c:	9211      	str	r2, [sp, #68]	; 0x44
 800e94e:	e7bf      	b.n	800e8d0 <_strtod_l+0x30>
 800e950:	2b2d      	cmp	r3, #45	; 0x2d
 800e952:	d1c8      	bne.n	800e8e6 <_strtod_l+0x46>
 800e954:	2301      	movs	r3, #1
 800e956:	9308      	str	r3, [sp, #32]
 800e958:	1c53      	adds	r3, r2, #1
 800e95a:	9311      	str	r3, [sp, #68]	; 0x44
 800e95c:	7853      	ldrb	r3, [r2, #1]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1c3      	bne.n	800e8ea <_strtod_l+0x4a>
 800e962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e964:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f040 852d 	bne.w	800f3c8 <_strtod_l+0xb28>
 800e96e:	ec49 8b10 	vmov	d0, r8, r9
 800e972:	e7e3      	b.n	800e93c <_strtod_l+0x9c>
 800e974:	2300      	movs	r3, #0
 800e976:	e7ee      	b.n	800e956 <_strtod_l+0xb6>
 800e978:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e97a:	b13a      	cbz	r2, 800e98c <_strtod_l+0xec>
 800e97c:	2135      	movs	r1, #53	; 0x35
 800e97e:	a814      	add	r0, sp, #80	; 0x50
 800e980:	f001 fd5a 	bl	8010438 <__copybits>
 800e984:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e986:	4620      	mov	r0, r4
 800e988:	f001 f91c 	bl	800fbc4 <_Bfree>
 800e98c:	3d01      	subs	r5, #1
 800e98e:	2d04      	cmp	r5, #4
 800e990:	d806      	bhi.n	800e9a0 <_strtod_l+0x100>
 800e992:	e8df f005 	tbb	[pc, r5]
 800e996:	030a      	.short	0x030a
 800e998:	1714      	.short	0x1714
 800e99a:	0a          	.byte	0x0a
 800e99b:	00          	.byte	0x00
 800e99c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e9a0:	073f      	lsls	r7, r7, #28
 800e9a2:	d5c1      	bpl.n	800e928 <_strtod_l+0x88>
 800e9a4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e9a8:	e7be      	b.n	800e928 <_strtod_l+0x88>
 800e9aa:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e9ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e9b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e9b4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e9b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e9bc:	e7f0      	b.n	800e9a0 <_strtod_l+0x100>
 800e9be:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800eb40 <_strtod_l+0x2a0>
 800e9c2:	e7ed      	b.n	800e9a0 <_strtod_l+0x100>
 800e9c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e9c8:	f04f 38ff 	mov.w	r8, #4294967295
 800e9cc:	e7e8      	b.n	800e9a0 <_strtod_l+0x100>
 800e9ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9d0:	1c5a      	adds	r2, r3, #1
 800e9d2:	9211      	str	r2, [sp, #68]	; 0x44
 800e9d4:	785b      	ldrb	r3, [r3, #1]
 800e9d6:	2b30      	cmp	r3, #48	; 0x30
 800e9d8:	d0f9      	beq.n	800e9ce <_strtod_l+0x12e>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d0a4      	beq.n	800e928 <_strtod_l+0x88>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	f04f 0a00 	mov.w	sl, #0
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9e8:	930a      	str	r3, [sp, #40]	; 0x28
 800e9ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e9ee:	f8cd a018 	str.w	sl, [sp, #24]
 800e9f2:	220a      	movs	r2, #10
 800e9f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e9f6:	7807      	ldrb	r7, [r0, #0]
 800e9f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e9fc:	b2d9      	uxtb	r1, r3
 800e9fe:	2909      	cmp	r1, #9
 800ea00:	d92a      	bls.n	800ea58 <_strtod_l+0x1b8>
 800ea02:	9907      	ldr	r1, [sp, #28]
 800ea04:	462a      	mov	r2, r5
 800ea06:	f001 fe1f 	bl	8010648 <strncmp>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	d033      	beq.n	800ea76 <_strtod_l+0x1d6>
 800ea0e:	2000      	movs	r0, #0
 800ea10:	9b06      	ldr	r3, [sp, #24]
 800ea12:	463a      	mov	r2, r7
 800ea14:	4601      	mov	r1, r0
 800ea16:	4607      	mov	r7, r0
 800ea18:	2a65      	cmp	r2, #101	; 0x65
 800ea1a:	d001      	beq.n	800ea20 <_strtod_l+0x180>
 800ea1c:	2a45      	cmp	r2, #69	; 0x45
 800ea1e:	d117      	bne.n	800ea50 <_strtod_l+0x1b0>
 800ea20:	b91b      	cbnz	r3, 800ea2a <_strtod_l+0x18a>
 800ea22:	9b04      	ldr	r3, [sp, #16]
 800ea24:	4303      	orrs	r3, r0
 800ea26:	d09c      	beq.n	800e962 <_strtod_l+0xc2>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800ea2e:	f10b 0201 	add.w	r2, fp, #1
 800ea32:	9211      	str	r2, [sp, #68]	; 0x44
 800ea34:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800ea38:	2a2b      	cmp	r2, #43	; 0x2b
 800ea3a:	d071      	beq.n	800eb20 <_strtod_l+0x280>
 800ea3c:	2a2d      	cmp	r2, #45	; 0x2d
 800ea3e:	d077      	beq.n	800eb30 <_strtod_l+0x290>
 800ea40:	f04f 0e00 	mov.w	lr, #0
 800ea44:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ea48:	2d09      	cmp	r5, #9
 800ea4a:	d97f      	bls.n	800eb4c <_strtod_l+0x2ac>
 800ea4c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ea50:	2500      	movs	r5, #0
 800ea52:	e09b      	b.n	800eb8c <_strtod_l+0x2ec>
 800ea54:	2300      	movs	r3, #0
 800ea56:	e7c3      	b.n	800e9e0 <_strtod_l+0x140>
 800ea58:	9906      	ldr	r1, [sp, #24]
 800ea5a:	2908      	cmp	r1, #8
 800ea5c:	bfdd      	ittte	le
 800ea5e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ea60:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea64:	9309      	strle	r3, [sp, #36]	; 0x24
 800ea66:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ea6a:	9b06      	ldr	r3, [sp, #24]
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	3301      	adds	r3, #1
 800ea70:	9306      	str	r3, [sp, #24]
 800ea72:	9011      	str	r0, [sp, #68]	; 0x44
 800ea74:	e7be      	b.n	800e9f4 <_strtod_l+0x154>
 800ea76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea78:	195a      	adds	r2, r3, r5
 800ea7a:	9211      	str	r2, [sp, #68]	; 0x44
 800ea7c:	5d5a      	ldrb	r2, [r3, r5]
 800ea7e:	9b06      	ldr	r3, [sp, #24]
 800ea80:	b3a3      	cbz	r3, 800eaec <_strtod_l+0x24c>
 800ea82:	4607      	mov	r7, r0
 800ea84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ea88:	2909      	cmp	r1, #9
 800ea8a:	d912      	bls.n	800eab2 <_strtod_l+0x212>
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	e7c3      	b.n	800ea18 <_strtod_l+0x178>
 800ea90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	9211      	str	r2, [sp, #68]	; 0x44
 800ea96:	785a      	ldrb	r2, [r3, #1]
 800ea98:	3001      	adds	r0, #1
 800ea9a:	2a30      	cmp	r2, #48	; 0x30
 800ea9c:	d0f8      	beq.n	800ea90 <_strtod_l+0x1f0>
 800ea9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800eaa2:	2b08      	cmp	r3, #8
 800eaa4:	f200 8497 	bhi.w	800f3d6 <_strtod_l+0xb36>
 800eaa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eaaa:	930a      	str	r3, [sp, #40]	; 0x28
 800eaac:	4607      	mov	r7, r0
 800eaae:	2000      	movs	r0, #0
 800eab0:	4603      	mov	r3, r0
 800eab2:	3a30      	subs	r2, #48	; 0x30
 800eab4:	f100 0101 	add.w	r1, r0, #1
 800eab8:	d012      	beq.n	800eae0 <_strtod_l+0x240>
 800eaba:	440f      	add	r7, r1
 800eabc:	eb00 0c03 	add.w	ip, r0, r3
 800eac0:	4619      	mov	r1, r3
 800eac2:	250a      	movs	r5, #10
 800eac4:	4561      	cmp	r1, ip
 800eac6:	d113      	bne.n	800eaf0 <_strtod_l+0x250>
 800eac8:	1819      	adds	r1, r3, r0
 800eaca:	2908      	cmp	r1, #8
 800eacc:	f103 0301 	add.w	r3, r3, #1
 800ead0:	4403      	add	r3, r0
 800ead2:	dc1c      	bgt.n	800eb0e <_strtod_l+0x26e>
 800ead4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ead6:	210a      	movs	r1, #10
 800ead8:	fb01 2200 	mla	r2, r1, r0, r2
 800eadc:	9209      	str	r2, [sp, #36]	; 0x24
 800eade:	2100      	movs	r1, #0
 800eae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eae2:	1c50      	adds	r0, r2, #1
 800eae4:	9011      	str	r0, [sp, #68]	; 0x44
 800eae6:	7852      	ldrb	r2, [r2, #1]
 800eae8:	4608      	mov	r0, r1
 800eaea:	e7cb      	b.n	800ea84 <_strtod_l+0x1e4>
 800eaec:	9806      	ldr	r0, [sp, #24]
 800eaee:	e7d4      	b.n	800ea9a <_strtod_l+0x1fa>
 800eaf0:	2908      	cmp	r1, #8
 800eaf2:	dc04      	bgt.n	800eafe <_strtod_l+0x25e>
 800eaf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800eaf6:	436e      	muls	r6, r5
 800eaf8:	9609      	str	r6, [sp, #36]	; 0x24
 800eafa:	3101      	adds	r1, #1
 800eafc:	e7e2      	b.n	800eac4 <_strtod_l+0x224>
 800eafe:	f101 0e01 	add.w	lr, r1, #1
 800eb02:	f1be 0f10 	cmp.w	lr, #16
 800eb06:	bfd8      	it	le
 800eb08:	fb05 fa0a 	mulle.w	sl, r5, sl
 800eb0c:	e7f5      	b.n	800eafa <_strtod_l+0x25a>
 800eb0e:	2b10      	cmp	r3, #16
 800eb10:	bfdc      	itt	le
 800eb12:	210a      	movle	r1, #10
 800eb14:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800eb18:	e7e1      	b.n	800eade <_strtod_l+0x23e>
 800eb1a:	2700      	movs	r7, #0
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	e780      	b.n	800ea22 <_strtod_l+0x182>
 800eb20:	f04f 0e00 	mov.w	lr, #0
 800eb24:	f10b 0202 	add.w	r2, fp, #2
 800eb28:	9211      	str	r2, [sp, #68]	; 0x44
 800eb2a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800eb2e:	e789      	b.n	800ea44 <_strtod_l+0x1a4>
 800eb30:	f04f 0e01 	mov.w	lr, #1
 800eb34:	e7f6      	b.n	800eb24 <_strtod_l+0x284>
 800eb36:	bf00      	nop
 800eb38:	08011f50 	.word	0x08011f50
 800eb3c:	08011e88 	.word	0x08011e88
 800eb40:	7ff00000 	.word	0x7ff00000
 800eb44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eb46:	1c55      	adds	r5, r2, #1
 800eb48:	9511      	str	r5, [sp, #68]	; 0x44
 800eb4a:	7852      	ldrb	r2, [r2, #1]
 800eb4c:	2a30      	cmp	r2, #48	; 0x30
 800eb4e:	d0f9      	beq.n	800eb44 <_strtod_l+0x2a4>
 800eb50:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800eb54:	2d08      	cmp	r5, #8
 800eb56:	f63f af7b 	bhi.w	800ea50 <_strtod_l+0x1b0>
 800eb5a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800eb5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eb60:	9207      	str	r2, [sp, #28]
 800eb62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eb64:	1c55      	adds	r5, r2, #1
 800eb66:	9511      	str	r5, [sp, #68]	; 0x44
 800eb68:	7852      	ldrb	r2, [r2, #1]
 800eb6a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800eb6e:	2e09      	cmp	r6, #9
 800eb70:	d937      	bls.n	800ebe2 <_strtod_l+0x342>
 800eb72:	9e07      	ldr	r6, [sp, #28]
 800eb74:	1bad      	subs	r5, r5, r6
 800eb76:	2d08      	cmp	r5, #8
 800eb78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800eb7c:	dc02      	bgt.n	800eb84 <_strtod_l+0x2e4>
 800eb7e:	4565      	cmp	r5, ip
 800eb80:	bfa8      	it	ge
 800eb82:	4665      	movge	r5, ip
 800eb84:	f1be 0f00 	cmp.w	lr, #0
 800eb88:	d000      	beq.n	800eb8c <_strtod_l+0x2ec>
 800eb8a:	426d      	negs	r5, r5
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d14d      	bne.n	800ec2c <_strtod_l+0x38c>
 800eb90:	9b04      	ldr	r3, [sp, #16]
 800eb92:	4303      	orrs	r3, r0
 800eb94:	f47f aec8 	bne.w	800e928 <_strtod_l+0x88>
 800eb98:	2900      	cmp	r1, #0
 800eb9a:	f47f aee2 	bne.w	800e962 <_strtod_l+0xc2>
 800eb9e:	2a69      	cmp	r2, #105	; 0x69
 800eba0:	d027      	beq.n	800ebf2 <_strtod_l+0x352>
 800eba2:	dc24      	bgt.n	800ebee <_strtod_l+0x34e>
 800eba4:	2a49      	cmp	r2, #73	; 0x49
 800eba6:	d024      	beq.n	800ebf2 <_strtod_l+0x352>
 800eba8:	2a4e      	cmp	r2, #78	; 0x4e
 800ebaa:	f47f aeda 	bne.w	800e962 <_strtod_l+0xc2>
 800ebae:	4996      	ldr	r1, [pc, #600]	; (800ee08 <_strtod_l+0x568>)
 800ebb0:	a811      	add	r0, sp, #68	; 0x44
 800ebb2:	f000 fef7 	bl	800f9a4 <__match>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	f43f aed3 	beq.w	800e962 <_strtod_l+0xc2>
 800ebbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	2b28      	cmp	r3, #40	; 0x28
 800ebc2:	d12d      	bne.n	800ec20 <_strtod_l+0x380>
 800ebc4:	4991      	ldr	r1, [pc, #580]	; (800ee0c <_strtod_l+0x56c>)
 800ebc6:	aa14      	add	r2, sp, #80	; 0x50
 800ebc8:	a811      	add	r0, sp, #68	; 0x44
 800ebca:	f000 feff 	bl	800f9cc <__hexnan>
 800ebce:	2805      	cmp	r0, #5
 800ebd0:	d126      	bne.n	800ec20 <_strtod_l+0x380>
 800ebd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebd4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ebd8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ebdc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ebe0:	e6a2      	b.n	800e928 <_strtod_l+0x88>
 800ebe2:	250a      	movs	r5, #10
 800ebe4:	fb05 250c 	mla	r5, r5, ip, r2
 800ebe8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800ebec:	e7b9      	b.n	800eb62 <_strtod_l+0x2c2>
 800ebee:	2a6e      	cmp	r2, #110	; 0x6e
 800ebf0:	e7db      	b.n	800ebaa <_strtod_l+0x30a>
 800ebf2:	4987      	ldr	r1, [pc, #540]	; (800ee10 <_strtod_l+0x570>)
 800ebf4:	a811      	add	r0, sp, #68	; 0x44
 800ebf6:	f000 fed5 	bl	800f9a4 <__match>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	f43f aeb1 	beq.w	800e962 <_strtod_l+0xc2>
 800ec00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec02:	4984      	ldr	r1, [pc, #528]	; (800ee14 <_strtod_l+0x574>)
 800ec04:	3b01      	subs	r3, #1
 800ec06:	a811      	add	r0, sp, #68	; 0x44
 800ec08:	9311      	str	r3, [sp, #68]	; 0x44
 800ec0a:	f000 fecb 	bl	800f9a4 <__match>
 800ec0e:	b910      	cbnz	r0, 800ec16 <_strtod_l+0x376>
 800ec10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec12:	3301      	adds	r3, #1
 800ec14:	9311      	str	r3, [sp, #68]	; 0x44
 800ec16:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800ee28 <_strtod_l+0x588>
 800ec1a:	f04f 0800 	mov.w	r8, #0
 800ec1e:	e683      	b.n	800e928 <_strtod_l+0x88>
 800ec20:	487d      	ldr	r0, [pc, #500]	; (800ee18 <_strtod_l+0x578>)
 800ec22:	f001 fcf9 	bl	8010618 <nan>
 800ec26:	ec59 8b10 	vmov	r8, r9, d0
 800ec2a:	e67d      	b.n	800e928 <_strtod_l+0x88>
 800ec2c:	1bea      	subs	r2, r5, r7
 800ec2e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800ec32:	9207      	str	r2, [sp, #28]
 800ec34:	9a06      	ldr	r2, [sp, #24]
 800ec36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ec3a:	2a00      	cmp	r2, #0
 800ec3c:	bf08      	it	eq
 800ec3e:	461a      	moveq	r2, r3
 800ec40:	2b10      	cmp	r3, #16
 800ec42:	9206      	str	r2, [sp, #24]
 800ec44:	461a      	mov	r2, r3
 800ec46:	bfa8      	it	ge
 800ec48:	2210      	movge	r2, #16
 800ec4a:	2b09      	cmp	r3, #9
 800ec4c:	ec59 8b17 	vmov	r8, r9, d7
 800ec50:	dd0c      	ble.n	800ec6c <_strtod_l+0x3cc>
 800ec52:	4972      	ldr	r1, [pc, #456]	; (800ee1c <_strtod_l+0x57c>)
 800ec54:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ec58:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800ec5c:	ee06 aa90 	vmov	s13, sl
 800ec60:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ec64:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ec68:	ec59 8b16 	vmov	r8, r9, d6
 800ec6c:	2b0f      	cmp	r3, #15
 800ec6e:	dc36      	bgt.n	800ecde <_strtod_l+0x43e>
 800ec70:	9907      	ldr	r1, [sp, #28]
 800ec72:	2900      	cmp	r1, #0
 800ec74:	f43f ae58 	beq.w	800e928 <_strtod_l+0x88>
 800ec78:	dd23      	ble.n	800ecc2 <_strtod_l+0x422>
 800ec7a:	2916      	cmp	r1, #22
 800ec7c:	dc0b      	bgt.n	800ec96 <_strtod_l+0x3f6>
 800ec7e:	4b67      	ldr	r3, [pc, #412]	; (800ee1c <_strtod_l+0x57c>)
 800ec80:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ec84:	ed93 7b00 	vldr	d7, [r3]
 800ec88:	ec49 8b16 	vmov	d6, r8, r9
 800ec8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec90:	ec59 8b17 	vmov	r8, r9, d7
 800ec94:	e648      	b.n	800e928 <_strtod_l+0x88>
 800ec96:	9807      	ldr	r0, [sp, #28]
 800ec98:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800ec9c:	4281      	cmp	r1, r0
 800ec9e:	db1e      	blt.n	800ecde <_strtod_l+0x43e>
 800eca0:	4a5e      	ldr	r2, [pc, #376]	; (800ee1c <_strtod_l+0x57c>)
 800eca2:	f1c3 030f 	rsb	r3, r3, #15
 800eca6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ecaa:	ed91 7b00 	vldr	d7, [r1]
 800ecae:	ec49 8b16 	vmov	d6, r8, r9
 800ecb2:	1ac3      	subs	r3, r0, r3
 800ecb4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ecb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ecbc:	ed92 6b00 	vldr	d6, [r2]
 800ecc0:	e7e4      	b.n	800ec8c <_strtod_l+0x3ec>
 800ecc2:	9907      	ldr	r1, [sp, #28]
 800ecc4:	3116      	adds	r1, #22
 800ecc6:	db0a      	blt.n	800ecde <_strtod_l+0x43e>
 800ecc8:	4b54      	ldr	r3, [pc, #336]	; (800ee1c <_strtod_l+0x57c>)
 800ecca:	1b7d      	subs	r5, r7, r5
 800eccc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ecd0:	ed95 7b00 	vldr	d7, [r5]
 800ecd4:	ec49 8b16 	vmov	d6, r8, r9
 800ecd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ecdc:	e7d8      	b.n	800ec90 <_strtod_l+0x3f0>
 800ecde:	9907      	ldr	r1, [sp, #28]
 800ece0:	1a9a      	subs	r2, r3, r2
 800ece2:	440a      	add	r2, r1
 800ece4:	2a00      	cmp	r2, #0
 800ece6:	dd6f      	ble.n	800edc8 <_strtod_l+0x528>
 800ece8:	f012 000f 	ands.w	r0, r2, #15
 800ecec:	d00a      	beq.n	800ed04 <_strtod_l+0x464>
 800ecee:	494b      	ldr	r1, [pc, #300]	; (800ee1c <_strtod_l+0x57c>)
 800ecf0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ecf4:	ed91 7b00 	vldr	d7, [r1]
 800ecf8:	ec49 8b16 	vmov	d6, r8, r9
 800ecfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed00:	ec59 8b17 	vmov	r8, r9, d7
 800ed04:	f032 020f 	bics.w	r2, r2, #15
 800ed08:	d04f      	beq.n	800edaa <_strtod_l+0x50a>
 800ed0a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800ed0e:	dd22      	ble.n	800ed56 <_strtod_l+0x4b6>
 800ed10:	2500      	movs	r5, #0
 800ed12:	462e      	mov	r6, r5
 800ed14:	9506      	str	r5, [sp, #24]
 800ed16:	462f      	mov	r7, r5
 800ed18:	2322      	movs	r3, #34	; 0x22
 800ed1a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800ee28 <_strtod_l+0x588>
 800ed1e:	6023      	str	r3, [r4, #0]
 800ed20:	f04f 0800 	mov.w	r8, #0
 800ed24:	9b06      	ldr	r3, [sp, #24]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f43f adfe 	beq.w	800e928 <_strtod_l+0x88>
 800ed2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f000 ff48 	bl	800fbc4 <_Bfree>
 800ed34:	4639      	mov	r1, r7
 800ed36:	4620      	mov	r0, r4
 800ed38:	f000 ff44 	bl	800fbc4 <_Bfree>
 800ed3c:	4631      	mov	r1, r6
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f000 ff40 	bl	800fbc4 <_Bfree>
 800ed44:	9906      	ldr	r1, [sp, #24]
 800ed46:	4620      	mov	r0, r4
 800ed48:	f000 ff3c 	bl	800fbc4 <_Bfree>
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 ff38 	bl	800fbc4 <_Bfree>
 800ed54:	e5e8      	b.n	800e928 <_strtod_l+0x88>
 800ed56:	2000      	movs	r0, #0
 800ed58:	ec49 8b17 	vmov	d7, r8, r9
 800ed5c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800ee20 <_strtod_l+0x580>
 800ed60:	1112      	asrs	r2, r2, #4
 800ed62:	4601      	mov	r1, r0
 800ed64:	2a01      	cmp	r2, #1
 800ed66:	dc23      	bgt.n	800edb0 <_strtod_l+0x510>
 800ed68:	b108      	cbz	r0, 800ed6e <_strtod_l+0x4ce>
 800ed6a:	ec59 8b17 	vmov	r8, r9, d7
 800ed6e:	4a2c      	ldr	r2, [pc, #176]	; (800ee20 <_strtod_l+0x580>)
 800ed70:	482c      	ldr	r0, [pc, #176]	; (800ee24 <_strtod_l+0x584>)
 800ed72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ed76:	ed92 7b00 	vldr	d7, [r2]
 800ed7a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ed7e:	ec49 8b16 	vmov	d6, r8, r9
 800ed82:	4a29      	ldr	r2, [pc, #164]	; (800ee28 <_strtod_l+0x588>)
 800ed84:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed88:	ee17 1a90 	vmov	r1, s15
 800ed8c:	400a      	ands	r2, r1
 800ed8e:	4282      	cmp	r2, r0
 800ed90:	ec59 8b17 	vmov	r8, r9, d7
 800ed94:	d8bc      	bhi.n	800ed10 <_strtod_l+0x470>
 800ed96:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ed9a:	4282      	cmp	r2, r0
 800ed9c:	bf86      	itte	hi
 800ed9e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800ee2c <_strtod_l+0x58c>
 800eda2:	f04f 38ff 	movhi.w	r8, #4294967295
 800eda6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800edaa:	2200      	movs	r2, #0
 800edac:	9204      	str	r2, [sp, #16]
 800edae:	e078      	b.n	800eea2 <_strtod_l+0x602>
 800edb0:	07d6      	lsls	r6, r2, #31
 800edb2:	d504      	bpl.n	800edbe <_strtod_l+0x51e>
 800edb4:	ed9c 6b00 	vldr	d6, [ip]
 800edb8:	2001      	movs	r0, #1
 800edba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800edbe:	3101      	adds	r1, #1
 800edc0:	1052      	asrs	r2, r2, #1
 800edc2:	f10c 0c08 	add.w	ip, ip, #8
 800edc6:	e7cd      	b.n	800ed64 <_strtod_l+0x4c4>
 800edc8:	d0ef      	beq.n	800edaa <_strtod_l+0x50a>
 800edca:	4252      	negs	r2, r2
 800edcc:	f012 000f 	ands.w	r0, r2, #15
 800edd0:	d00a      	beq.n	800ede8 <_strtod_l+0x548>
 800edd2:	4912      	ldr	r1, [pc, #72]	; (800ee1c <_strtod_l+0x57c>)
 800edd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800edd8:	ed91 7b00 	vldr	d7, [r1]
 800eddc:	ec49 8b16 	vmov	d6, r8, r9
 800ede0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ede4:	ec59 8b17 	vmov	r8, r9, d7
 800ede8:	1112      	asrs	r2, r2, #4
 800edea:	d0de      	beq.n	800edaa <_strtod_l+0x50a>
 800edec:	2a1f      	cmp	r2, #31
 800edee:	dd1f      	ble.n	800ee30 <_strtod_l+0x590>
 800edf0:	2500      	movs	r5, #0
 800edf2:	462e      	mov	r6, r5
 800edf4:	9506      	str	r5, [sp, #24]
 800edf6:	462f      	mov	r7, r5
 800edf8:	2322      	movs	r3, #34	; 0x22
 800edfa:	f04f 0800 	mov.w	r8, #0
 800edfe:	f04f 0900 	mov.w	r9, #0
 800ee02:	6023      	str	r3, [r4, #0]
 800ee04:	e78e      	b.n	800ed24 <_strtod_l+0x484>
 800ee06:	bf00      	nop
 800ee08:	08011e85 	.word	0x08011e85
 800ee0c:	08011e9c 	.word	0x08011e9c
 800ee10:	08011e7c 	.word	0x08011e7c
 800ee14:	08011e7f 	.word	0x08011e7f
 800ee18:	0801210f 	.word	0x0801210f
 800ee1c:	08012000 	.word	0x08012000
 800ee20:	08011fd8 	.word	0x08011fd8
 800ee24:	7ca00000 	.word	0x7ca00000
 800ee28:	7ff00000 	.word	0x7ff00000
 800ee2c:	7fefffff 	.word	0x7fefffff
 800ee30:	f012 0110 	ands.w	r1, r2, #16
 800ee34:	bf18      	it	ne
 800ee36:	216a      	movne	r1, #106	; 0x6a
 800ee38:	9104      	str	r1, [sp, #16]
 800ee3a:	ec49 8b17 	vmov	d7, r8, r9
 800ee3e:	49be      	ldr	r1, [pc, #760]	; (800f138 <_strtod_l+0x898>)
 800ee40:	2000      	movs	r0, #0
 800ee42:	07d6      	lsls	r6, r2, #31
 800ee44:	d504      	bpl.n	800ee50 <_strtod_l+0x5b0>
 800ee46:	ed91 6b00 	vldr	d6, [r1]
 800ee4a:	2001      	movs	r0, #1
 800ee4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee50:	1052      	asrs	r2, r2, #1
 800ee52:	f101 0108 	add.w	r1, r1, #8
 800ee56:	d1f4      	bne.n	800ee42 <_strtod_l+0x5a2>
 800ee58:	b108      	cbz	r0, 800ee5e <_strtod_l+0x5be>
 800ee5a:	ec59 8b17 	vmov	r8, r9, d7
 800ee5e:	9a04      	ldr	r2, [sp, #16]
 800ee60:	b1c2      	cbz	r2, 800ee94 <_strtod_l+0x5f4>
 800ee62:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800ee66:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800ee6a:	2a00      	cmp	r2, #0
 800ee6c:	4648      	mov	r0, r9
 800ee6e:	dd11      	ble.n	800ee94 <_strtod_l+0x5f4>
 800ee70:	2a1f      	cmp	r2, #31
 800ee72:	f340 812e 	ble.w	800f0d2 <_strtod_l+0x832>
 800ee76:	2a34      	cmp	r2, #52	; 0x34
 800ee78:	bfde      	ittt	le
 800ee7a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800ee7e:	f04f 32ff 	movle.w	r2, #4294967295
 800ee82:	fa02 f101 	lslle.w	r1, r2, r1
 800ee86:	f04f 0800 	mov.w	r8, #0
 800ee8a:	bfcc      	ite	gt
 800ee8c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ee90:	ea01 0900 	andle.w	r9, r1, r0
 800ee94:	ec49 8b17 	vmov	d7, r8, r9
 800ee98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea0:	d0a6      	beq.n	800edf0 <_strtod_l+0x550>
 800eea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eea4:	9200      	str	r2, [sp, #0]
 800eea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eea8:	9a06      	ldr	r2, [sp, #24]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 fef2 	bl	800fc94 <__s2b>
 800eeb0:	9006      	str	r0, [sp, #24]
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	f43f af2c 	beq.w	800ed10 <_strtod_l+0x470>
 800eeb8:	9b07      	ldr	r3, [sp, #28]
 800eeba:	1b7d      	subs	r5, r7, r5
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	bfb4      	ite	lt
 800eec0:	462b      	movlt	r3, r5
 800eec2:	2300      	movge	r3, #0
 800eec4:	9309      	str	r3, [sp, #36]	; 0x24
 800eec6:	9b07      	ldr	r3, [sp, #28]
 800eec8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f118 <_strtod_l+0x878>
 800eecc:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f120 <_strtod_l+0x880>
 800eed0:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f128 <_strtod_l+0x888>
 800eed4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eed8:	2500      	movs	r5, #0
 800eeda:	930c      	str	r3, [sp, #48]	; 0x30
 800eedc:	462e      	mov	r6, r5
 800eede:	9b06      	ldr	r3, [sp, #24]
 800eee0:	4620      	mov	r0, r4
 800eee2:	6859      	ldr	r1, [r3, #4]
 800eee4:	f000 fe2e 	bl	800fb44 <_Balloc>
 800eee8:	4607      	mov	r7, r0
 800eeea:	2800      	cmp	r0, #0
 800eeec:	f43f af14 	beq.w	800ed18 <_strtod_l+0x478>
 800eef0:	9b06      	ldr	r3, [sp, #24]
 800eef2:	691a      	ldr	r2, [r3, #16]
 800eef4:	3202      	adds	r2, #2
 800eef6:	f103 010c 	add.w	r1, r3, #12
 800eefa:	0092      	lsls	r2, r2, #2
 800eefc:	300c      	adds	r0, #12
 800eefe:	f000 fe13 	bl	800fb28 <memcpy>
 800ef02:	ec49 8b10 	vmov	d0, r8, r9
 800ef06:	aa14      	add	r2, sp, #80	; 0x50
 800ef08:	a913      	add	r1, sp, #76	; 0x4c
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f001 fa08 	bl	8010320 <__d2b>
 800ef10:	ec49 8b18 	vmov	d8, r8, r9
 800ef14:	9012      	str	r0, [sp, #72]	; 0x48
 800ef16:	2800      	cmp	r0, #0
 800ef18:	f43f aefe 	beq.w	800ed18 <_strtod_l+0x478>
 800ef1c:	2101      	movs	r1, #1
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f000 ff52 	bl	800fdc8 <__i2b>
 800ef24:	4606      	mov	r6, r0
 800ef26:	2800      	cmp	r0, #0
 800ef28:	f43f aef6 	beq.w	800ed18 <_strtod_l+0x478>
 800ef2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef2e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	bfab      	itete	ge
 800ef34:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ef36:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ef38:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ef3c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ef40:	bfac      	ite	ge
 800ef42:	eb03 0b02 	addge.w	fp, r3, r2
 800ef46:	eba2 0a03 	sublt.w	sl, r2, r3
 800ef4a:	9a04      	ldr	r2, [sp, #16]
 800ef4c:	1a9b      	subs	r3, r3, r2
 800ef4e:	440b      	add	r3, r1
 800ef50:	4a7a      	ldr	r2, [pc, #488]	; (800f13c <_strtod_l+0x89c>)
 800ef52:	3b01      	subs	r3, #1
 800ef54:	4293      	cmp	r3, r2
 800ef56:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ef5a:	f280 80cd 	bge.w	800f0f8 <_strtod_l+0x858>
 800ef5e:	1ad2      	subs	r2, r2, r3
 800ef60:	2a1f      	cmp	r2, #31
 800ef62:	eba1 0102 	sub.w	r1, r1, r2
 800ef66:	f04f 0001 	mov.w	r0, #1
 800ef6a:	f300 80b9 	bgt.w	800f0e0 <_strtod_l+0x840>
 800ef6e:	fa00 f302 	lsl.w	r3, r0, r2
 800ef72:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef74:	2300      	movs	r3, #0
 800ef76:	930a      	str	r3, [sp, #40]	; 0x28
 800ef78:	eb0b 0301 	add.w	r3, fp, r1
 800ef7c:	9a04      	ldr	r2, [sp, #16]
 800ef7e:	459b      	cmp	fp, r3
 800ef80:	448a      	add	sl, r1
 800ef82:	4492      	add	sl, r2
 800ef84:	465a      	mov	r2, fp
 800ef86:	bfa8      	it	ge
 800ef88:	461a      	movge	r2, r3
 800ef8a:	4552      	cmp	r2, sl
 800ef8c:	bfa8      	it	ge
 800ef8e:	4652      	movge	r2, sl
 800ef90:	2a00      	cmp	r2, #0
 800ef92:	bfc2      	ittt	gt
 800ef94:	1a9b      	subgt	r3, r3, r2
 800ef96:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ef9a:	ebab 0b02 	subgt.w	fp, fp, r2
 800ef9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efa0:	2a00      	cmp	r2, #0
 800efa2:	dd18      	ble.n	800efd6 <_strtod_l+0x736>
 800efa4:	4631      	mov	r1, r6
 800efa6:	4620      	mov	r0, r4
 800efa8:	930f      	str	r3, [sp, #60]	; 0x3c
 800efaa:	f000 ffcd 	bl	800ff48 <__pow5mult>
 800efae:	4606      	mov	r6, r0
 800efb0:	2800      	cmp	r0, #0
 800efb2:	f43f aeb1 	beq.w	800ed18 <_strtod_l+0x478>
 800efb6:	4601      	mov	r1, r0
 800efb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800efba:	4620      	mov	r0, r4
 800efbc:	f000 ff1a 	bl	800fdf4 <__multiply>
 800efc0:	900e      	str	r0, [sp, #56]	; 0x38
 800efc2:	2800      	cmp	r0, #0
 800efc4:	f43f aea8 	beq.w	800ed18 <_strtod_l+0x478>
 800efc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 fdfa 	bl	800fbc4 <_Bfree>
 800efd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efd4:	9212      	str	r2, [sp, #72]	; 0x48
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f300 8093 	bgt.w	800f102 <_strtod_l+0x862>
 800efdc:	9b07      	ldr	r3, [sp, #28]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	dd08      	ble.n	800eff4 <_strtod_l+0x754>
 800efe2:	4639      	mov	r1, r7
 800efe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efe6:	4620      	mov	r0, r4
 800efe8:	f000 ffae 	bl	800ff48 <__pow5mult>
 800efec:	4607      	mov	r7, r0
 800efee:	2800      	cmp	r0, #0
 800eff0:	f43f ae92 	beq.w	800ed18 <_strtod_l+0x478>
 800eff4:	f1ba 0f00 	cmp.w	sl, #0
 800eff8:	dd08      	ble.n	800f00c <_strtod_l+0x76c>
 800effa:	4639      	mov	r1, r7
 800effc:	4652      	mov	r2, sl
 800effe:	4620      	mov	r0, r4
 800f000:	f000 fffc 	bl	800fffc <__lshift>
 800f004:	4607      	mov	r7, r0
 800f006:	2800      	cmp	r0, #0
 800f008:	f43f ae86 	beq.w	800ed18 <_strtod_l+0x478>
 800f00c:	f1bb 0f00 	cmp.w	fp, #0
 800f010:	dd08      	ble.n	800f024 <_strtod_l+0x784>
 800f012:	4631      	mov	r1, r6
 800f014:	465a      	mov	r2, fp
 800f016:	4620      	mov	r0, r4
 800f018:	f000 fff0 	bl	800fffc <__lshift>
 800f01c:	4606      	mov	r6, r0
 800f01e:	2800      	cmp	r0, #0
 800f020:	f43f ae7a 	beq.w	800ed18 <_strtod_l+0x478>
 800f024:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f026:	463a      	mov	r2, r7
 800f028:	4620      	mov	r0, r4
 800f02a:	f001 f873 	bl	8010114 <__mdiff>
 800f02e:	4605      	mov	r5, r0
 800f030:	2800      	cmp	r0, #0
 800f032:	f43f ae71 	beq.w	800ed18 <_strtod_l+0x478>
 800f036:	2300      	movs	r3, #0
 800f038:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f03c:	60c3      	str	r3, [r0, #12]
 800f03e:	4631      	mov	r1, r6
 800f040:	f001 f84c 	bl	80100dc <__mcmp>
 800f044:	2800      	cmp	r0, #0
 800f046:	da7d      	bge.n	800f144 <_strtod_l+0x8a4>
 800f048:	ea5a 0308 	orrs.w	r3, sl, r8
 800f04c:	f040 80a3 	bne.w	800f196 <_strtod_l+0x8f6>
 800f050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f054:	2b00      	cmp	r3, #0
 800f056:	f040 809e 	bne.w	800f196 <_strtod_l+0x8f6>
 800f05a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f05e:	0d1b      	lsrs	r3, r3, #20
 800f060:	051b      	lsls	r3, r3, #20
 800f062:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f066:	f240 8096 	bls.w	800f196 <_strtod_l+0x8f6>
 800f06a:	696b      	ldr	r3, [r5, #20]
 800f06c:	b91b      	cbnz	r3, 800f076 <_strtod_l+0x7d6>
 800f06e:	692b      	ldr	r3, [r5, #16]
 800f070:	2b01      	cmp	r3, #1
 800f072:	f340 8090 	ble.w	800f196 <_strtod_l+0x8f6>
 800f076:	4629      	mov	r1, r5
 800f078:	2201      	movs	r2, #1
 800f07a:	4620      	mov	r0, r4
 800f07c:	f000 ffbe 	bl	800fffc <__lshift>
 800f080:	4631      	mov	r1, r6
 800f082:	4605      	mov	r5, r0
 800f084:	f001 f82a 	bl	80100dc <__mcmp>
 800f088:	2800      	cmp	r0, #0
 800f08a:	f340 8084 	ble.w	800f196 <_strtod_l+0x8f6>
 800f08e:	9904      	ldr	r1, [sp, #16]
 800f090:	4a2b      	ldr	r2, [pc, #172]	; (800f140 <_strtod_l+0x8a0>)
 800f092:	464b      	mov	r3, r9
 800f094:	2900      	cmp	r1, #0
 800f096:	f000 809d 	beq.w	800f1d4 <_strtod_l+0x934>
 800f09a:	ea02 0109 	and.w	r1, r2, r9
 800f09e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f0a2:	f300 8097 	bgt.w	800f1d4 <_strtod_l+0x934>
 800f0a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f0aa:	f77f aea5 	ble.w	800edf8 <_strtod_l+0x558>
 800f0ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f130 <_strtod_l+0x890>
 800f0b2:	ec49 8b16 	vmov	d6, r8, r9
 800f0b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f0ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f0be:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	bf08      	it	eq
 800f0c6:	2322      	moveq	r3, #34	; 0x22
 800f0c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f0cc:	bf08      	it	eq
 800f0ce:	6023      	streq	r3, [r4, #0]
 800f0d0:	e62c      	b.n	800ed2c <_strtod_l+0x48c>
 800f0d2:	f04f 31ff 	mov.w	r1, #4294967295
 800f0d6:	fa01 f202 	lsl.w	r2, r1, r2
 800f0da:	ea02 0808 	and.w	r8, r2, r8
 800f0de:	e6d9      	b.n	800ee94 <_strtod_l+0x5f4>
 800f0e0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f0e4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f0e8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f0ec:	33e2      	adds	r3, #226	; 0xe2
 800f0ee:	fa00 f303 	lsl.w	r3, r0, r3
 800f0f2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f0f6:	e73f      	b.n	800ef78 <_strtod_l+0x6d8>
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f100:	e73a      	b.n	800ef78 <_strtod_l+0x6d8>
 800f102:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f104:	461a      	mov	r2, r3
 800f106:	4620      	mov	r0, r4
 800f108:	f000 ff78 	bl	800fffc <__lshift>
 800f10c:	9012      	str	r0, [sp, #72]	; 0x48
 800f10e:	2800      	cmp	r0, #0
 800f110:	f47f af64 	bne.w	800efdc <_strtod_l+0x73c>
 800f114:	e600      	b.n	800ed18 <_strtod_l+0x478>
 800f116:	bf00      	nop
 800f118:	94a03595 	.word	0x94a03595
 800f11c:	3fcfffff 	.word	0x3fcfffff
 800f120:	94a03595 	.word	0x94a03595
 800f124:	3fdfffff 	.word	0x3fdfffff
 800f128:	35afe535 	.word	0x35afe535
 800f12c:	3fe00000 	.word	0x3fe00000
 800f130:	00000000 	.word	0x00000000
 800f134:	39500000 	.word	0x39500000
 800f138:	08011eb0 	.word	0x08011eb0
 800f13c:	fffffc02 	.word	0xfffffc02
 800f140:	7ff00000 	.word	0x7ff00000
 800f144:	46cb      	mov	fp, r9
 800f146:	d15f      	bne.n	800f208 <_strtod_l+0x968>
 800f148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f14c:	f1ba 0f00 	cmp.w	sl, #0
 800f150:	d02a      	beq.n	800f1a8 <_strtod_l+0x908>
 800f152:	4aa7      	ldr	r2, [pc, #668]	; (800f3f0 <_strtod_l+0xb50>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d12b      	bne.n	800f1b0 <_strtod_l+0x910>
 800f158:	9b04      	ldr	r3, [sp, #16]
 800f15a:	4642      	mov	r2, r8
 800f15c:	b1fb      	cbz	r3, 800f19e <_strtod_l+0x8fe>
 800f15e:	4ba5      	ldr	r3, [pc, #660]	; (800f3f4 <_strtod_l+0xb54>)
 800f160:	ea09 0303 	and.w	r3, r9, r3
 800f164:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f168:	f04f 31ff 	mov.w	r1, #4294967295
 800f16c:	d81a      	bhi.n	800f1a4 <_strtod_l+0x904>
 800f16e:	0d1b      	lsrs	r3, r3, #20
 800f170:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f174:	fa01 f303 	lsl.w	r3, r1, r3
 800f178:	429a      	cmp	r2, r3
 800f17a:	d119      	bne.n	800f1b0 <_strtod_l+0x910>
 800f17c:	4b9e      	ldr	r3, [pc, #632]	; (800f3f8 <_strtod_l+0xb58>)
 800f17e:	459b      	cmp	fp, r3
 800f180:	d102      	bne.n	800f188 <_strtod_l+0x8e8>
 800f182:	3201      	adds	r2, #1
 800f184:	f43f adc8 	beq.w	800ed18 <_strtod_l+0x478>
 800f188:	4b9a      	ldr	r3, [pc, #616]	; (800f3f4 <_strtod_l+0xb54>)
 800f18a:	ea0b 0303 	and.w	r3, fp, r3
 800f18e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f192:	f04f 0800 	mov.w	r8, #0
 800f196:	9b04      	ldr	r3, [sp, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d188      	bne.n	800f0ae <_strtod_l+0x80e>
 800f19c:	e5c6      	b.n	800ed2c <_strtod_l+0x48c>
 800f19e:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a2:	e7e9      	b.n	800f178 <_strtod_l+0x8d8>
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	e7e7      	b.n	800f178 <_strtod_l+0x8d8>
 800f1a8:	ea53 0308 	orrs.w	r3, r3, r8
 800f1ac:	f43f af6f 	beq.w	800f08e <_strtod_l+0x7ee>
 800f1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1b2:	b1cb      	cbz	r3, 800f1e8 <_strtod_l+0x948>
 800f1b4:	ea13 0f0b 	tst.w	r3, fp
 800f1b8:	d0ed      	beq.n	800f196 <_strtod_l+0x8f6>
 800f1ba:	9a04      	ldr	r2, [sp, #16]
 800f1bc:	4640      	mov	r0, r8
 800f1be:	4649      	mov	r1, r9
 800f1c0:	f1ba 0f00 	cmp.w	sl, #0
 800f1c4:	d014      	beq.n	800f1f0 <_strtod_l+0x950>
 800f1c6:	f7ff fb51 	bl	800e86c <sulp>
 800f1ca:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f1ce:	ec59 8b17 	vmov	r8, r9, d7
 800f1d2:	e7e0      	b.n	800f196 <_strtod_l+0x8f6>
 800f1d4:	4013      	ands	r3, r2
 800f1d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f1da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f1de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f1e2:	f04f 38ff 	mov.w	r8, #4294967295
 800f1e6:	e7d6      	b.n	800f196 <_strtod_l+0x8f6>
 800f1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1ea:	ea13 0f08 	tst.w	r3, r8
 800f1ee:	e7e3      	b.n	800f1b8 <_strtod_l+0x918>
 800f1f0:	f7ff fb3c 	bl	800e86c <sulp>
 800f1f4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f1f8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f200:	ec59 8b10 	vmov	r8, r9, d0
 800f204:	d1c7      	bne.n	800f196 <_strtod_l+0x8f6>
 800f206:	e5f7      	b.n	800edf8 <_strtod_l+0x558>
 800f208:	4631      	mov	r1, r6
 800f20a:	4628      	mov	r0, r5
 800f20c:	f001 f8e4 	bl	80103d8 <__ratio>
 800f210:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f214:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21c:	d865      	bhi.n	800f2ea <_strtod_l+0xa4a>
 800f21e:	f1ba 0f00 	cmp.w	sl, #0
 800f222:	d042      	beq.n	800f2aa <_strtod_l+0xa0a>
 800f224:	4b75      	ldr	r3, [pc, #468]	; (800f3fc <_strtod_l+0xb5c>)
 800f226:	2200      	movs	r2, #0
 800f228:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f22c:	4871      	ldr	r0, [pc, #452]	; (800f3f4 <_strtod_l+0xb54>)
 800f22e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800f408 <_strtod_l+0xb68>
 800f232:	ea0b 0100 	and.w	r1, fp, r0
 800f236:	4561      	cmp	r1, ip
 800f238:	f040 808e 	bne.w	800f358 <_strtod_l+0xab8>
 800f23c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f240:	ec49 8b10 	vmov	d0, r8, r9
 800f244:	ec43 2b1c 	vmov	d12, r2, r3
 800f248:	910a      	str	r1, [sp, #40]	; 0x28
 800f24a:	f000 ffed 	bl	8010228 <__ulp>
 800f24e:	ec49 8b1e 	vmov	d14, r8, r9
 800f252:	4868      	ldr	r0, [pc, #416]	; (800f3f4 <_strtod_l+0xb54>)
 800f254:	eeac eb00 	vfma.f64	d14, d12, d0
 800f258:	ee1e 3a90 	vmov	r3, s29
 800f25c:	4a68      	ldr	r2, [pc, #416]	; (800f400 <_strtod_l+0xb60>)
 800f25e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f260:	4018      	ands	r0, r3
 800f262:	4290      	cmp	r0, r2
 800f264:	ec59 8b1e 	vmov	r8, r9, d14
 800f268:	d94e      	bls.n	800f308 <_strtod_l+0xa68>
 800f26a:	ee18 3a90 	vmov	r3, s17
 800f26e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f272:	4293      	cmp	r3, r2
 800f274:	d104      	bne.n	800f280 <_strtod_l+0x9e0>
 800f276:	ee18 3a10 	vmov	r3, s16
 800f27a:	3301      	adds	r3, #1
 800f27c:	f43f ad4c 	beq.w	800ed18 <_strtod_l+0x478>
 800f280:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800f3f8 <_strtod_l+0xb58>
 800f284:	f04f 38ff 	mov.w	r8, #4294967295
 800f288:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f28a:	4620      	mov	r0, r4
 800f28c:	f000 fc9a 	bl	800fbc4 <_Bfree>
 800f290:	4639      	mov	r1, r7
 800f292:	4620      	mov	r0, r4
 800f294:	f000 fc96 	bl	800fbc4 <_Bfree>
 800f298:	4631      	mov	r1, r6
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 fc92 	bl	800fbc4 <_Bfree>
 800f2a0:	4629      	mov	r1, r5
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f000 fc8e 	bl	800fbc4 <_Bfree>
 800f2a8:	e619      	b.n	800eede <_strtod_l+0x63e>
 800f2aa:	f1b8 0f00 	cmp.w	r8, #0
 800f2ae:	d112      	bne.n	800f2d6 <_strtod_l+0xa36>
 800f2b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2b4:	b9b3      	cbnz	r3, 800f2e4 <_strtod_l+0xa44>
 800f2b6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f2ba:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f2c6:	bf58      	it	pl
 800f2c8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f2cc:	eeb1 7b4d 	vneg.f64	d7, d13
 800f2d0:	ec53 2b17 	vmov	r2, r3, d7
 800f2d4:	e7aa      	b.n	800f22c <_strtod_l+0x98c>
 800f2d6:	f1b8 0f01 	cmp.w	r8, #1
 800f2da:	d103      	bne.n	800f2e4 <_strtod_l+0xa44>
 800f2dc:	f1b9 0f00 	cmp.w	r9, #0
 800f2e0:	f43f ad8a 	beq.w	800edf8 <_strtod_l+0x558>
 800f2e4:	4b47      	ldr	r3, [pc, #284]	; (800f404 <_strtod_l+0xb64>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	e79e      	b.n	800f228 <_strtod_l+0x988>
 800f2ea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f2ee:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f2f2:	f1ba 0f00 	cmp.w	sl, #0
 800f2f6:	d104      	bne.n	800f302 <_strtod_l+0xa62>
 800f2f8:	eeb1 7b4d 	vneg.f64	d7, d13
 800f2fc:	ec53 2b17 	vmov	r2, r3, d7
 800f300:	e794      	b.n	800f22c <_strtod_l+0x98c>
 800f302:	eeb0 7b4d 	vmov.f64	d7, d13
 800f306:	e7f9      	b.n	800f2fc <_strtod_l+0xa5c>
 800f308:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f30c:	9b04      	ldr	r3, [sp, #16]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1ba      	bne.n	800f288 <_strtod_l+0x9e8>
 800f312:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f316:	0d1b      	lsrs	r3, r3, #20
 800f318:	051b      	lsls	r3, r3, #20
 800f31a:	4299      	cmp	r1, r3
 800f31c:	d1b4      	bne.n	800f288 <_strtod_l+0x9e8>
 800f31e:	ec51 0b1d 	vmov	r0, r1, d13
 800f322:	f7f1 fa09 	bl	8000738 <__aeabi_d2lz>
 800f326:	f7f1 f9c1 	bl	80006ac <__aeabi_l2d>
 800f32a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f32e:	ec41 0b17 	vmov	d7, r0, r1
 800f332:	ea43 0308 	orr.w	r3, r3, r8
 800f336:	ea53 030a 	orrs.w	r3, r3, sl
 800f33a:	ee3d db47 	vsub.f64	d13, d13, d7
 800f33e:	d03c      	beq.n	800f3ba <_strtod_l+0xb1a>
 800f340:	eeb4 dbca 	vcmpe.f64	d13, d10
 800f344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f348:	f53f acf0 	bmi.w	800ed2c <_strtod_l+0x48c>
 800f34c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800f350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f354:	dd98      	ble.n	800f288 <_strtod_l+0x9e8>
 800f356:	e4e9      	b.n	800ed2c <_strtod_l+0x48c>
 800f358:	9804      	ldr	r0, [sp, #16]
 800f35a:	b1f0      	cbz	r0, 800f39a <_strtod_l+0xafa>
 800f35c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800f360:	d81b      	bhi.n	800f39a <_strtod_l+0xafa>
 800f362:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f3e8 <_strtod_l+0xb48>
 800f366:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800f36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36e:	d811      	bhi.n	800f394 <_strtod_l+0xaf4>
 800f370:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800f374:	ee1d 3a10 	vmov	r3, s26
 800f378:	2b01      	cmp	r3, #1
 800f37a:	bf38      	it	cc
 800f37c:	2301      	movcc	r3, #1
 800f37e:	ee0d 3a10 	vmov	s26, r3
 800f382:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800f386:	f1ba 0f00 	cmp.w	sl, #0
 800f38a:	d113      	bne.n	800f3b4 <_strtod_l+0xb14>
 800f38c:	eeb1 7b4d 	vneg.f64	d7, d13
 800f390:	ec53 2b17 	vmov	r2, r3, d7
 800f394:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800f398:	1a43      	subs	r3, r0, r1
 800f39a:	eeb0 0b48 	vmov.f64	d0, d8
 800f39e:	ec43 2b1c 	vmov	d12, r2, r3
 800f3a2:	910a      	str	r1, [sp, #40]	; 0x28
 800f3a4:	f000 ff40 	bl	8010228 <__ulp>
 800f3a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f3aa:	eeac 8b00 	vfma.f64	d8, d12, d0
 800f3ae:	ec59 8b18 	vmov	r8, r9, d8
 800f3b2:	e7ab      	b.n	800f30c <_strtod_l+0xa6c>
 800f3b4:	eeb0 7b4d 	vmov.f64	d7, d13
 800f3b8:	e7ea      	b.n	800f390 <_strtod_l+0xaf0>
 800f3ba:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c2:	f57f af61 	bpl.w	800f288 <_strtod_l+0x9e8>
 800f3c6:	e4b1      	b.n	800ed2c <_strtod_l+0x48c>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	9308      	str	r3, [sp, #32]
 800f3cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3d0:	6013      	str	r3, [r2, #0]
 800f3d2:	f7ff baad 	b.w	800e930 <_strtod_l+0x90>
 800f3d6:	2a65      	cmp	r2, #101	; 0x65
 800f3d8:	f43f ab9f 	beq.w	800eb1a <_strtod_l+0x27a>
 800f3dc:	2a45      	cmp	r2, #69	; 0x45
 800f3de:	f43f ab9c 	beq.w	800eb1a <_strtod_l+0x27a>
 800f3e2:	2101      	movs	r1, #1
 800f3e4:	f7ff bbd4 	b.w	800eb90 <_strtod_l+0x2f0>
 800f3e8:	ffc00000 	.word	0xffc00000
 800f3ec:	41dfffff 	.word	0x41dfffff
 800f3f0:	000fffff 	.word	0x000fffff
 800f3f4:	7ff00000 	.word	0x7ff00000
 800f3f8:	7fefffff 	.word	0x7fefffff
 800f3fc:	3ff00000 	.word	0x3ff00000
 800f400:	7c9fffff 	.word	0x7c9fffff
 800f404:	bff00000 	.word	0xbff00000
 800f408:	7fe00000 	.word	0x7fe00000

0800f40c <strtod>:
 800f40c:	460a      	mov	r2, r1
 800f40e:	4601      	mov	r1, r0
 800f410:	4802      	ldr	r0, [pc, #8]	; (800f41c <strtod+0x10>)
 800f412:	4b03      	ldr	r3, [pc, #12]	; (800f420 <strtod+0x14>)
 800f414:	6800      	ldr	r0, [r0, #0]
 800f416:	f7ff ba43 	b.w	800e8a0 <_strtod_l>
 800f41a:	bf00      	nop
 800f41c:	240000f8 	.word	0x240000f8
 800f420:	24000160 	.word	0x24000160

0800f424 <rshift>:
 800f424:	6903      	ldr	r3, [r0, #16]
 800f426:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f42a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f42e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f432:	f100 0414 	add.w	r4, r0, #20
 800f436:	dd45      	ble.n	800f4c4 <rshift+0xa0>
 800f438:	f011 011f 	ands.w	r1, r1, #31
 800f43c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f440:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f444:	d10c      	bne.n	800f460 <rshift+0x3c>
 800f446:	f100 0710 	add.w	r7, r0, #16
 800f44a:	4629      	mov	r1, r5
 800f44c:	42b1      	cmp	r1, r6
 800f44e:	d334      	bcc.n	800f4ba <rshift+0x96>
 800f450:	1a9b      	subs	r3, r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	1eea      	subs	r2, r5, #3
 800f456:	4296      	cmp	r6, r2
 800f458:	bf38      	it	cc
 800f45a:	2300      	movcc	r3, #0
 800f45c:	4423      	add	r3, r4
 800f45e:	e015      	b.n	800f48c <rshift+0x68>
 800f460:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f464:	f1c1 0820 	rsb	r8, r1, #32
 800f468:	40cf      	lsrs	r7, r1
 800f46a:	f105 0e04 	add.w	lr, r5, #4
 800f46e:	46a1      	mov	r9, r4
 800f470:	4576      	cmp	r6, lr
 800f472:	46f4      	mov	ip, lr
 800f474:	d815      	bhi.n	800f4a2 <rshift+0x7e>
 800f476:	1a9a      	subs	r2, r3, r2
 800f478:	0092      	lsls	r2, r2, #2
 800f47a:	3a04      	subs	r2, #4
 800f47c:	3501      	adds	r5, #1
 800f47e:	42ae      	cmp	r6, r5
 800f480:	bf38      	it	cc
 800f482:	2200      	movcc	r2, #0
 800f484:	18a3      	adds	r3, r4, r2
 800f486:	50a7      	str	r7, [r4, r2]
 800f488:	b107      	cbz	r7, 800f48c <rshift+0x68>
 800f48a:	3304      	adds	r3, #4
 800f48c:	1b1a      	subs	r2, r3, r4
 800f48e:	42a3      	cmp	r3, r4
 800f490:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f494:	bf08      	it	eq
 800f496:	2300      	moveq	r3, #0
 800f498:	6102      	str	r2, [r0, #16]
 800f49a:	bf08      	it	eq
 800f49c:	6143      	streq	r3, [r0, #20]
 800f49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4a2:	f8dc c000 	ldr.w	ip, [ip]
 800f4a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f4aa:	ea4c 0707 	orr.w	r7, ip, r7
 800f4ae:	f849 7b04 	str.w	r7, [r9], #4
 800f4b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4b6:	40cf      	lsrs	r7, r1
 800f4b8:	e7da      	b.n	800f470 <rshift+0x4c>
 800f4ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800f4be:	f847 cf04 	str.w	ip, [r7, #4]!
 800f4c2:	e7c3      	b.n	800f44c <rshift+0x28>
 800f4c4:	4623      	mov	r3, r4
 800f4c6:	e7e1      	b.n	800f48c <rshift+0x68>

0800f4c8 <__hexdig_fun>:
 800f4c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	d802      	bhi.n	800f4d6 <__hexdig_fun+0xe>
 800f4d0:	3820      	subs	r0, #32
 800f4d2:	b2c0      	uxtb	r0, r0
 800f4d4:	4770      	bx	lr
 800f4d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f4da:	2b05      	cmp	r3, #5
 800f4dc:	d801      	bhi.n	800f4e2 <__hexdig_fun+0x1a>
 800f4de:	3847      	subs	r0, #71	; 0x47
 800f4e0:	e7f7      	b.n	800f4d2 <__hexdig_fun+0xa>
 800f4e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f4e6:	2b05      	cmp	r3, #5
 800f4e8:	d801      	bhi.n	800f4ee <__hexdig_fun+0x26>
 800f4ea:	3827      	subs	r0, #39	; 0x27
 800f4ec:	e7f1      	b.n	800f4d2 <__hexdig_fun+0xa>
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	4770      	bx	lr
	...

0800f4f4 <__gethex>:
 800f4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f8:	ed2d 8b02 	vpush	{d8}
 800f4fc:	b089      	sub	sp, #36	; 0x24
 800f4fe:	ee08 0a10 	vmov	s16, r0
 800f502:	9304      	str	r3, [sp, #16]
 800f504:	4bb4      	ldr	r3, [pc, #720]	; (800f7d8 <__gethex+0x2e4>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	4618      	mov	r0, r3
 800f50c:	468b      	mov	fp, r1
 800f50e:	4690      	mov	r8, r2
 800f510:	f7f0 fee6 	bl	80002e0 <strlen>
 800f514:	9b01      	ldr	r3, [sp, #4]
 800f516:	f8db 2000 	ldr.w	r2, [fp]
 800f51a:	4403      	add	r3, r0
 800f51c:	4682      	mov	sl, r0
 800f51e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f522:	9305      	str	r3, [sp, #20]
 800f524:	1c93      	adds	r3, r2, #2
 800f526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f52a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f52e:	32fe      	adds	r2, #254	; 0xfe
 800f530:	18d1      	adds	r1, r2, r3
 800f532:	461f      	mov	r7, r3
 800f534:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f538:	9100      	str	r1, [sp, #0]
 800f53a:	2830      	cmp	r0, #48	; 0x30
 800f53c:	d0f8      	beq.n	800f530 <__gethex+0x3c>
 800f53e:	f7ff ffc3 	bl	800f4c8 <__hexdig_fun>
 800f542:	4604      	mov	r4, r0
 800f544:	2800      	cmp	r0, #0
 800f546:	d13a      	bne.n	800f5be <__gethex+0xca>
 800f548:	9901      	ldr	r1, [sp, #4]
 800f54a:	4652      	mov	r2, sl
 800f54c:	4638      	mov	r0, r7
 800f54e:	f001 f87b 	bl	8010648 <strncmp>
 800f552:	4605      	mov	r5, r0
 800f554:	2800      	cmp	r0, #0
 800f556:	d168      	bne.n	800f62a <__gethex+0x136>
 800f558:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f55c:	eb07 060a 	add.w	r6, r7, sl
 800f560:	f7ff ffb2 	bl	800f4c8 <__hexdig_fun>
 800f564:	2800      	cmp	r0, #0
 800f566:	d062      	beq.n	800f62e <__gethex+0x13a>
 800f568:	4633      	mov	r3, r6
 800f56a:	7818      	ldrb	r0, [r3, #0]
 800f56c:	2830      	cmp	r0, #48	; 0x30
 800f56e:	461f      	mov	r7, r3
 800f570:	f103 0301 	add.w	r3, r3, #1
 800f574:	d0f9      	beq.n	800f56a <__gethex+0x76>
 800f576:	f7ff ffa7 	bl	800f4c8 <__hexdig_fun>
 800f57a:	2301      	movs	r3, #1
 800f57c:	fab0 f480 	clz	r4, r0
 800f580:	0964      	lsrs	r4, r4, #5
 800f582:	4635      	mov	r5, r6
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	463a      	mov	r2, r7
 800f588:	4616      	mov	r6, r2
 800f58a:	3201      	adds	r2, #1
 800f58c:	7830      	ldrb	r0, [r6, #0]
 800f58e:	f7ff ff9b 	bl	800f4c8 <__hexdig_fun>
 800f592:	2800      	cmp	r0, #0
 800f594:	d1f8      	bne.n	800f588 <__gethex+0x94>
 800f596:	9901      	ldr	r1, [sp, #4]
 800f598:	4652      	mov	r2, sl
 800f59a:	4630      	mov	r0, r6
 800f59c:	f001 f854 	bl	8010648 <strncmp>
 800f5a0:	b980      	cbnz	r0, 800f5c4 <__gethex+0xd0>
 800f5a2:	b94d      	cbnz	r5, 800f5b8 <__gethex+0xc4>
 800f5a4:	eb06 050a 	add.w	r5, r6, sl
 800f5a8:	462a      	mov	r2, r5
 800f5aa:	4616      	mov	r6, r2
 800f5ac:	3201      	adds	r2, #1
 800f5ae:	7830      	ldrb	r0, [r6, #0]
 800f5b0:	f7ff ff8a 	bl	800f4c8 <__hexdig_fun>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d1f8      	bne.n	800f5aa <__gethex+0xb6>
 800f5b8:	1bad      	subs	r5, r5, r6
 800f5ba:	00ad      	lsls	r5, r5, #2
 800f5bc:	e004      	b.n	800f5c8 <__gethex+0xd4>
 800f5be:	2400      	movs	r4, #0
 800f5c0:	4625      	mov	r5, r4
 800f5c2:	e7e0      	b.n	800f586 <__gethex+0x92>
 800f5c4:	2d00      	cmp	r5, #0
 800f5c6:	d1f7      	bne.n	800f5b8 <__gethex+0xc4>
 800f5c8:	7833      	ldrb	r3, [r6, #0]
 800f5ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f5ce:	2b50      	cmp	r3, #80	; 0x50
 800f5d0:	d13b      	bne.n	800f64a <__gethex+0x156>
 800f5d2:	7873      	ldrb	r3, [r6, #1]
 800f5d4:	2b2b      	cmp	r3, #43	; 0x2b
 800f5d6:	d02c      	beq.n	800f632 <__gethex+0x13e>
 800f5d8:	2b2d      	cmp	r3, #45	; 0x2d
 800f5da:	d02e      	beq.n	800f63a <__gethex+0x146>
 800f5dc:	1c71      	adds	r1, r6, #1
 800f5de:	f04f 0900 	mov.w	r9, #0
 800f5e2:	7808      	ldrb	r0, [r1, #0]
 800f5e4:	f7ff ff70 	bl	800f4c8 <__hexdig_fun>
 800f5e8:	1e43      	subs	r3, r0, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b18      	cmp	r3, #24
 800f5ee:	d82c      	bhi.n	800f64a <__gethex+0x156>
 800f5f0:	f1a0 0210 	sub.w	r2, r0, #16
 800f5f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5f8:	f7ff ff66 	bl	800f4c8 <__hexdig_fun>
 800f5fc:	1e43      	subs	r3, r0, #1
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b18      	cmp	r3, #24
 800f602:	d91d      	bls.n	800f640 <__gethex+0x14c>
 800f604:	f1b9 0f00 	cmp.w	r9, #0
 800f608:	d000      	beq.n	800f60c <__gethex+0x118>
 800f60a:	4252      	negs	r2, r2
 800f60c:	4415      	add	r5, r2
 800f60e:	f8cb 1000 	str.w	r1, [fp]
 800f612:	b1e4      	cbz	r4, 800f64e <__gethex+0x15a>
 800f614:	9b00      	ldr	r3, [sp, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	bf14      	ite	ne
 800f61a:	2700      	movne	r7, #0
 800f61c:	2706      	moveq	r7, #6
 800f61e:	4638      	mov	r0, r7
 800f620:	b009      	add	sp, #36	; 0x24
 800f622:	ecbd 8b02 	vpop	{d8}
 800f626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62a:	463e      	mov	r6, r7
 800f62c:	4625      	mov	r5, r4
 800f62e:	2401      	movs	r4, #1
 800f630:	e7ca      	b.n	800f5c8 <__gethex+0xd4>
 800f632:	f04f 0900 	mov.w	r9, #0
 800f636:	1cb1      	adds	r1, r6, #2
 800f638:	e7d3      	b.n	800f5e2 <__gethex+0xee>
 800f63a:	f04f 0901 	mov.w	r9, #1
 800f63e:	e7fa      	b.n	800f636 <__gethex+0x142>
 800f640:	230a      	movs	r3, #10
 800f642:	fb03 0202 	mla	r2, r3, r2, r0
 800f646:	3a10      	subs	r2, #16
 800f648:	e7d4      	b.n	800f5f4 <__gethex+0x100>
 800f64a:	4631      	mov	r1, r6
 800f64c:	e7df      	b.n	800f60e <__gethex+0x11a>
 800f64e:	1bf3      	subs	r3, r6, r7
 800f650:	3b01      	subs	r3, #1
 800f652:	4621      	mov	r1, r4
 800f654:	2b07      	cmp	r3, #7
 800f656:	dc0b      	bgt.n	800f670 <__gethex+0x17c>
 800f658:	ee18 0a10 	vmov	r0, s16
 800f65c:	f000 fa72 	bl	800fb44 <_Balloc>
 800f660:	4604      	mov	r4, r0
 800f662:	b940      	cbnz	r0, 800f676 <__gethex+0x182>
 800f664:	4b5d      	ldr	r3, [pc, #372]	; (800f7dc <__gethex+0x2e8>)
 800f666:	4602      	mov	r2, r0
 800f668:	21de      	movs	r1, #222	; 0xde
 800f66a:	485d      	ldr	r0, [pc, #372]	; (800f7e0 <__gethex+0x2ec>)
 800f66c:	f001 f80e 	bl	801068c <__assert_func>
 800f670:	3101      	adds	r1, #1
 800f672:	105b      	asrs	r3, r3, #1
 800f674:	e7ee      	b.n	800f654 <__gethex+0x160>
 800f676:	f100 0914 	add.w	r9, r0, #20
 800f67a:	f04f 0b00 	mov.w	fp, #0
 800f67e:	f1ca 0301 	rsb	r3, sl, #1
 800f682:	f8cd 9008 	str.w	r9, [sp, #8]
 800f686:	f8cd b000 	str.w	fp, [sp]
 800f68a:	9306      	str	r3, [sp, #24]
 800f68c:	42b7      	cmp	r7, r6
 800f68e:	d340      	bcc.n	800f712 <__gethex+0x21e>
 800f690:	9802      	ldr	r0, [sp, #8]
 800f692:	9b00      	ldr	r3, [sp, #0]
 800f694:	f840 3b04 	str.w	r3, [r0], #4
 800f698:	eba0 0009 	sub.w	r0, r0, r9
 800f69c:	1080      	asrs	r0, r0, #2
 800f69e:	0146      	lsls	r6, r0, #5
 800f6a0:	6120      	str	r0, [r4, #16]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 fb40 	bl	800fd28 <__hi0bits>
 800f6a8:	1a30      	subs	r0, r6, r0
 800f6aa:	f8d8 6000 	ldr.w	r6, [r8]
 800f6ae:	42b0      	cmp	r0, r6
 800f6b0:	dd63      	ble.n	800f77a <__gethex+0x286>
 800f6b2:	1b87      	subs	r7, r0, r6
 800f6b4:	4639      	mov	r1, r7
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 fee1 	bl	801047e <__any_on>
 800f6bc:	4682      	mov	sl, r0
 800f6be:	b1a8      	cbz	r0, 800f6ec <__gethex+0x1f8>
 800f6c0:	1e7b      	subs	r3, r7, #1
 800f6c2:	1159      	asrs	r1, r3, #5
 800f6c4:	f003 021f 	and.w	r2, r3, #31
 800f6c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f6cc:	f04f 0a01 	mov.w	sl, #1
 800f6d0:	fa0a f202 	lsl.w	r2, sl, r2
 800f6d4:	420a      	tst	r2, r1
 800f6d6:	d009      	beq.n	800f6ec <__gethex+0x1f8>
 800f6d8:	4553      	cmp	r3, sl
 800f6da:	dd05      	ble.n	800f6e8 <__gethex+0x1f4>
 800f6dc:	1eb9      	subs	r1, r7, #2
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 fecd 	bl	801047e <__any_on>
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d145      	bne.n	800f774 <__gethex+0x280>
 800f6e8:	f04f 0a02 	mov.w	sl, #2
 800f6ec:	4639      	mov	r1, r7
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f7ff fe98 	bl	800f424 <rshift>
 800f6f4:	443d      	add	r5, r7
 800f6f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6fa:	42ab      	cmp	r3, r5
 800f6fc:	da4c      	bge.n	800f798 <__gethex+0x2a4>
 800f6fe:	ee18 0a10 	vmov	r0, s16
 800f702:	4621      	mov	r1, r4
 800f704:	f000 fa5e 	bl	800fbc4 <_Bfree>
 800f708:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f70a:	2300      	movs	r3, #0
 800f70c:	6013      	str	r3, [r2, #0]
 800f70e:	27a3      	movs	r7, #163	; 0xa3
 800f710:	e785      	b.n	800f61e <__gethex+0x12a>
 800f712:	1e73      	subs	r3, r6, #1
 800f714:	9a05      	ldr	r2, [sp, #20]
 800f716:	9303      	str	r3, [sp, #12]
 800f718:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d019      	beq.n	800f754 <__gethex+0x260>
 800f720:	f1bb 0f20 	cmp.w	fp, #32
 800f724:	d107      	bne.n	800f736 <__gethex+0x242>
 800f726:	9b02      	ldr	r3, [sp, #8]
 800f728:	9a00      	ldr	r2, [sp, #0]
 800f72a:	f843 2b04 	str.w	r2, [r3], #4
 800f72e:	9302      	str	r3, [sp, #8]
 800f730:	2300      	movs	r3, #0
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	469b      	mov	fp, r3
 800f736:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f73a:	f7ff fec5 	bl	800f4c8 <__hexdig_fun>
 800f73e:	9b00      	ldr	r3, [sp, #0]
 800f740:	f000 000f 	and.w	r0, r0, #15
 800f744:	fa00 f00b 	lsl.w	r0, r0, fp
 800f748:	4303      	orrs	r3, r0
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	f10b 0b04 	add.w	fp, fp, #4
 800f750:	9b03      	ldr	r3, [sp, #12]
 800f752:	e00d      	b.n	800f770 <__gethex+0x27c>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	9a06      	ldr	r2, [sp, #24]
 800f758:	4413      	add	r3, r2
 800f75a:	42bb      	cmp	r3, r7
 800f75c:	d3e0      	bcc.n	800f720 <__gethex+0x22c>
 800f75e:	4618      	mov	r0, r3
 800f760:	9901      	ldr	r1, [sp, #4]
 800f762:	9307      	str	r3, [sp, #28]
 800f764:	4652      	mov	r2, sl
 800f766:	f000 ff6f 	bl	8010648 <strncmp>
 800f76a:	9b07      	ldr	r3, [sp, #28]
 800f76c:	2800      	cmp	r0, #0
 800f76e:	d1d7      	bne.n	800f720 <__gethex+0x22c>
 800f770:	461e      	mov	r6, r3
 800f772:	e78b      	b.n	800f68c <__gethex+0x198>
 800f774:	f04f 0a03 	mov.w	sl, #3
 800f778:	e7b8      	b.n	800f6ec <__gethex+0x1f8>
 800f77a:	da0a      	bge.n	800f792 <__gethex+0x29e>
 800f77c:	1a37      	subs	r7, r6, r0
 800f77e:	4621      	mov	r1, r4
 800f780:	ee18 0a10 	vmov	r0, s16
 800f784:	463a      	mov	r2, r7
 800f786:	f000 fc39 	bl	800fffc <__lshift>
 800f78a:	1bed      	subs	r5, r5, r7
 800f78c:	4604      	mov	r4, r0
 800f78e:	f100 0914 	add.w	r9, r0, #20
 800f792:	f04f 0a00 	mov.w	sl, #0
 800f796:	e7ae      	b.n	800f6f6 <__gethex+0x202>
 800f798:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f79c:	42a8      	cmp	r0, r5
 800f79e:	dd72      	ble.n	800f886 <__gethex+0x392>
 800f7a0:	1b45      	subs	r5, r0, r5
 800f7a2:	42ae      	cmp	r6, r5
 800f7a4:	dc36      	bgt.n	800f814 <__gethex+0x320>
 800f7a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	d02a      	beq.n	800f804 <__gethex+0x310>
 800f7ae:	2b03      	cmp	r3, #3
 800f7b0:	d02c      	beq.n	800f80c <__gethex+0x318>
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d11c      	bne.n	800f7f0 <__gethex+0x2fc>
 800f7b6:	42ae      	cmp	r6, r5
 800f7b8:	d11a      	bne.n	800f7f0 <__gethex+0x2fc>
 800f7ba:	2e01      	cmp	r6, #1
 800f7bc:	d112      	bne.n	800f7e4 <__gethex+0x2f0>
 800f7be:	9a04      	ldr	r2, [sp, #16]
 800f7c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f7c4:	6013      	str	r3, [r2, #0]
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	6123      	str	r3, [r4, #16]
 800f7ca:	f8c9 3000 	str.w	r3, [r9]
 800f7ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7d0:	2762      	movs	r7, #98	; 0x62
 800f7d2:	601c      	str	r4, [r3, #0]
 800f7d4:	e723      	b.n	800f61e <__gethex+0x12a>
 800f7d6:	bf00      	nop
 800f7d8:	08011f50 	.word	0x08011f50
 800f7dc:	08011ed8 	.word	0x08011ed8
 800f7e0:	08011ee9 	.word	0x08011ee9
 800f7e4:	1e71      	subs	r1, r6, #1
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f000 fe49 	bl	801047e <__any_on>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d1e6      	bne.n	800f7be <__gethex+0x2ca>
 800f7f0:	ee18 0a10 	vmov	r0, s16
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	f000 f9e5 	bl	800fbc4 <_Bfree>
 800f7fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	2750      	movs	r7, #80	; 0x50
 800f802:	e70c      	b.n	800f61e <__gethex+0x12a>
 800f804:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1f2      	bne.n	800f7f0 <__gethex+0x2fc>
 800f80a:	e7d8      	b.n	800f7be <__gethex+0x2ca>
 800f80c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1d5      	bne.n	800f7be <__gethex+0x2ca>
 800f812:	e7ed      	b.n	800f7f0 <__gethex+0x2fc>
 800f814:	1e6f      	subs	r7, r5, #1
 800f816:	f1ba 0f00 	cmp.w	sl, #0
 800f81a:	d131      	bne.n	800f880 <__gethex+0x38c>
 800f81c:	b127      	cbz	r7, 800f828 <__gethex+0x334>
 800f81e:	4639      	mov	r1, r7
 800f820:	4620      	mov	r0, r4
 800f822:	f000 fe2c 	bl	801047e <__any_on>
 800f826:	4682      	mov	sl, r0
 800f828:	117b      	asrs	r3, r7, #5
 800f82a:	2101      	movs	r1, #1
 800f82c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f830:	f007 071f 	and.w	r7, r7, #31
 800f834:	fa01 f707 	lsl.w	r7, r1, r7
 800f838:	421f      	tst	r7, r3
 800f83a:	4629      	mov	r1, r5
 800f83c:	4620      	mov	r0, r4
 800f83e:	bf18      	it	ne
 800f840:	f04a 0a02 	orrne.w	sl, sl, #2
 800f844:	1b76      	subs	r6, r6, r5
 800f846:	f7ff fded 	bl	800f424 <rshift>
 800f84a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f84e:	2702      	movs	r7, #2
 800f850:	f1ba 0f00 	cmp.w	sl, #0
 800f854:	d048      	beq.n	800f8e8 <__gethex+0x3f4>
 800f856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d015      	beq.n	800f88a <__gethex+0x396>
 800f85e:	2b03      	cmp	r3, #3
 800f860:	d017      	beq.n	800f892 <__gethex+0x39e>
 800f862:	2b01      	cmp	r3, #1
 800f864:	d109      	bne.n	800f87a <__gethex+0x386>
 800f866:	f01a 0f02 	tst.w	sl, #2
 800f86a:	d006      	beq.n	800f87a <__gethex+0x386>
 800f86c:	f8d9 0000 	ldr.w	r0, [r9]
 800f870:	ea4a 0a00 	orr.w	sl, sl, r0
 800f874:	f01a 0f01 	tst.w	sl, #1
 800f878:	d10e      	bne.n	800f898 <__gethex+0x3a4>
 800f87a:	f047 0710 	orr.w	r7, r7, #16
 800f87e:	e033      	b.n	800f8e8 <__gethex+0x3f4>
 800f880:	f04f 0a01 	mov.w	sl, #1
 800f884:	e7d0      	b.n	800f828 <__gethex+0x334>
 800f886:	2701      	movs	r7, #1
 800f888:	e7e2      	b.n	800f850 <__gethex+0x35c>
 800f88a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f88c:	f1c3 0301 	rsb	r3, r3, #1
 800f890:	9315      	str	r3, [sp, #84]	; 0x54
 800f892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f894:	2b00      	cmp	r3, #0
 800f896:	d0f0      	beq.n	800f87a <__gethex+0x386>
 800f898:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f89c:	f104 0314 	add.w	r3, r4, #20
 800f8a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f8a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f8a8:	f04f 0c00 	mov.w	ip, #0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f8b6:	d01c      	beq.n	800f8f2 <__gethex+0x3fe>
 800f8b8:	3201      	adds	r2, #1
 800f8ba:	6002      	str	r2, [r0, #0]
 800f8bc:	2f02      	cmp	r7, #2
 800f8be:	f104 0314 	add.w	r3, r4, #20
 800f8c2:	d13f      	bne.n	800f944 <__gethex+0x450>
 800f8c4:	f8d8 2000 	ldr.w	r2, [r8]
 800f8c8:	3a01      	subs	r2, #1
 800f8ca:	42b2      	cmp	r2, r6
 800f8cc:	d10a      	bne.n	800f8e4 <__gethex+0x3f0>
 800f8ce:	1171      	asrs	r1, r6, #5
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8d6:	f006 061f 	and.w	r6, r6, #31
 800f8da:	fa02 f606 	lsl.w	r6, r2, r6
 800f8de:	421e      	tst	r6, r3
 800f8e0:	bf18      	it	ne
 800f8e2:	4617      	movne	r7, r2
 800f8e4:	f047 0720 	orr.w	r7, r7, #32
 800f8e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8ea:	601c      	str	r4, [r3, #0]
 800f8ec:	9b04      	ldr	r3, [sp, #16]
 800f8ee:	601d      	str	r5, [r3, #0]
 800f8f0:	e695      	b.n	800f61e <__gethex+0x12a>
 800f8f2:	4299      	cmp	r1, r3
 800f8f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8f8:	d8d8      	bhi.n	800f8ac <__gethex+0x3b8>
 800f8fa:	68a3      	ldr	r3, [r4, #8]
 800f8fc:	459b      	cmp	fp, r3
 800f8fe:	db19      	blt.n	800f934 <__gethex+0x440>
 800f900:	6861      	ldr	r1, [r4, #4]
 800f902:	ee18 0a10 	vmov	r0, s16
 800f906:	3101      	adds	r1, #1
 800f908:	f000 f91c 	bl	800fb44 <_Balloc>
 800f90c:	4681      	mov	r9, r0
 800f90e:	b918      	cbnz	r0, 800f918 <__gethex+0x424>
 800f910:	4b1a      	ldr	r3, [pc, #104]	; (800f97c <__gethex+0x488>)
 800f912:	4602      	mov	r2, r0
 800f914:	2184      	movs	r1, #132	; 0x84
 800f916:	e6a8      	b.n	800f66a <__gethex+0x176>
 800f918:	6922      	ldr	r2, [r4, #16]
 800f91a:	3202      	adds	r2, #2
 800f91c:	f104 010c 	add.w	r1, r4, #12
 800f920:	0092      	lsls	r2, r2, #2
 800f922:	300c      	adds	r0, #12
 800f924:	f000 f900 	bl	800fb28 <memcpy>
 800f928:	4621      	mov	r1, r4
 800f92a:	ee18 0a10 	vmov	r0, s16
 800f92e:	f000 f949 	bl	800fbc4 <_Bfree>
 800f932:	464c      	mov	r4, r9
 800f934:	6923      	ldr	r3, [r4, #16]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f93c:	6122      	str	r2, [r4, #16]
 800f93e:	2201      	movs	r2, #1
 800f940:	615a      	str	r2, [r3, #20]
 800f942:	e7bb      	b.n	800f8bc <__gethex+0x3c8>
 800f944:	6922      	ldr	r2, [r4, #16]
 800f946:	455a      	cmp	r2, fp
 800f948:	dd0b      	ble.n	800f962 <__gethex+0x46e>
 800f94a:	2101      	movs	r1, #1
 800f94c:	4620      	mov	r0, r4
 800f94e:	f7ff fd69 	bl	800f424 <rshift>
 800f952:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f956:	3501      	adds	r5, #1
 800f958:	42ab      	cmp	r3, r5
 800f95a:	f6ff aed0 	blt.w	800f6fe <__gethex+0x20a>
 800f95e:	2701      	movs	r7, #1
 800f960:	e7c0      	b.n	800f8e4 <__gethex+0x3f0>
 800f962:	f016 061f 	ands.w	r6, r6, #31
 800f966:	d0fa      	beq.n	800f95e <__gethex+0x46a>
 800f968:	4453      	add	r3, sl
 800f96a:	f1c6 0620 	rsb	r6, r6, #32
 800f96e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f972:	f000 f9d9 	bl	800fd28 <__hi0bits>
 800f976:	42b0      	cmp	r0, r6
 800f978:	dbe7      	blt.n	800f94a <__gethex+0x456>
 800f97a:	e7f0      	b.n	800f95e <__gethex+0x46a>
 800f97c:	08011ed8 	.word	0x08011ed8

0800f980 <L_shift>:
 800f980:	f1c2 0208 	rsb	r2, r2, #8
 800f984:	0092      	lsls	r2, r2, #2
 800f986:	b570      	push	{r4, r5, r6, lr}
 800f988:	f1c2 0620 	rsb	r6, r2, #32
 800f98c:	6843      	ldr	r3, [r0, #4]
 800f98e:	6804      	ldr	r4, [r0, #0]
 800f990:	fa03 f506 	lsl.w	r5, r3, r6
 800f994:	432c      	orrs	r4, r5
 800f996:	40d3      	lsrs	r3, r2
 800f998:	6004      	str	r4, [r0, #0]
 800f99a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f99e:	4288      	cmp	r0, r1
 800f9a0:	d3f4      	bcc.n	800f98c <L_shift+0xc>
 800f9a2:	bd70      	pop	{r4, r5, r6, pc}

0800f9a4 <__match>:
 800f9a4:	b530      	push	{r4, r5, lr}
 800f9a6:	6803      	ldr	r3, [r0, #0]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9ae:	b914      	cbnz	r4, 800f9b6 <__match+0x12>
 800f9b0:	6003      	str	r3, [r0, #0]
 800f9b2:	2001      	movs	r0, #1
 800f9b4:	bd30      	pop	{r4, r5, pc}
 800f9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f9be:	2d19      	cmp	r5, #25
 800f9c0:	bf98      	it	ls
 800f9c2:	3220      	addls	r2, #32
 800f9c4:	42a2      	cmp	r2, r4
 800f9c6:	d0f0      	beq.n	800f9aa <__match+0x6>
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	e7f3      	b.n	800f9b4 <__match+0x10>

0800f9cc <__hexnan>:
 800f9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d0:	680b      	ldr	r3, [r1, #0]
 800f9d2:	115e      	asrs	r6, r3, #5
 800f9d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f9d8:	f013 031f 	ands.w	r3, r3, #31
 800f9dc:	b087      	sub	sp, #28
 800f9de:	bf18      	it	ne
 800f9e0:	3604      	addne	r6, #4
 800f9e2:	2500      	movs	r5, #0
 800f9e4:	1f37      	subs	r7, r6, #4
 800f9e6:	4690      	mov	r8, r2
 800f9e8:	6802      	ldr	r2, [r0, #0]
 800f9ea:	9301      	str	r3, [sp, #4]
 800f9ec:	4682      	mov	sl, r0
 800f9ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9f2:	46b9      	mov	r9, r7
 800f9f4:	463c      	mov	r4, r7
 800f9f6:	9502      	str	r5, [sp, #8]
 800f9f8:	46ab      	mov	fp, r5
 800f9fa:	7851      	ldrb	r1, [r2, #1]
 800f9fc:	1c53      	adds	r3, r2, #1
 800f9fe:	9303      	str	r3, [sp, #12]
 800fa00:	b341      	cbz	r1, 800fa54 <__hexnan+0x88>
 800fa02:	4608      	mov	r0, r1
 800fa04:	9205      	str	r2, [sp, #20]
 800fa06:	9104      	str	r1, [sp, #16]
 800fa08:	f7ff fd5e 	bl	800f4c8 <__hexdig_fun>
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	d14f      	bne.n	800fab0 <__hexnan+0xe4>
 800fa10:	9904      	ldr	r1, [sp, #16]
 800fa12:	9a05      	ldr	r2, [sp, #20]
 800fa14:	2920      	cmp	r1, #32
 800fa16:	d818      	bhi.n	800fa4a <__hexnan+0x7e>
 800fa18:	9b02      	ldr	r3, [sp, #8]
 800fa1a:	459b      	cmp	fp, r3
 800fa1c:	dd13      	ble.n	800fa46 <__hexnan+0x7a>
 800fa1e:	454c      	cmp	r4, r9
 800fa20:	d206      	bcs.n	800fa30 <__hexnan+0x64>
 800fa22:	2d07      	cmp	r5, #7
 800fa24:	dc04      	bgt.n	800fa30 <__hexnan+0x64>
 800fa26:	462a      	mov	r2, r5
 800fa28:	4649      	mov	r1, r9
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f7ff ffa8 	bl	800f980 <L_shift>
 800fa30:	4544      	cmp	r4, r8
 800fa32:	d950      	bls.n	800fad6 <__hexnan+0x10a>
 800fa34:	2300      	movs	r3, #0
 800fa36:	f1a4 0904 	sub.w	r9, r4, #4
 800fa3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa3e:	f8cd b008 	str.w	fp, [sp, #8]
 800fa42:	464c      	mov	r4, r9
 800fa44:	461d      	mov	r5, r3
 800fa46:	9a03      	ldr	r2, [sp, #12]
 800fa48:	e7d7      	b.n	800f9fa <__hexnan+0x2e>
 800fa4a:	2929      	cmp	r1, #41	; 0x29
 800fa4c:	d156      	bne.n	800fafc <__hexnan+0x130>
 800fa4e:	3202      	adds	r2, #2
 800fa50:	f8ca 2000 	str.w	r2, [sl]
 800fa54:	f1bb 0f00 	cmp.w	fp, #0
 800fa58:	d050      	beq.n	800fafc <__hexnan+0x130>
 800fa5a:	454c      	cmp	r4, r9
 800fa5c:	d206      	bcs.n	800fa6c <__hexnan+0xa0>
 800fa5e:	2d07      	cmp	r5, #7
 800fa60:	dc04      	bgt.n	800fa6c <__hexnan+0xa0>
 800fa62:	462a      	mov	r2, r5
 800fa64:	4649      	mov	r1, r9
 800fa66:	4620      	mov	r0, r4
 800fa68:	f7ff ff8a 	bl	800f980 <L_shift>
 800fa6c:	4544      	cmp	r4, r8
 800fa6e:	d934      	bls.n	800fada <__hexnan+0x10e>
 800fa70:	f1a8 0204 	sub.w	r2, r8, #4
 800fa74:	4623      	mov	r3, r4
 800fa76:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa7a:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa7e:	429f      	cmp	r7, r3
 800fa80:	d2f9      	bcs.n	800fa76 <__hexnan+0xaa>
 800fa82:	1b3b      	subs	r3, r7, r4
 800fa84:	f023 0303 	bic.w	r3, r3, #3
 800fa88:	3304      	adds	r3, #4
 800fa8a:	3401      	adds	r4, #1
 800fa8c:	3e03      	subs	r6, #3
 800fa8e:	42b4      	cmp	r4, r6
 800fa90:	bf88      	it	hi
 800fa92:	2304      	movhi	r3, #4
 800fa94:	4443      	add	r3, r8
 800fa96:	2200      	movs	r2, #0
 800fa98:	f843 2b04 	str.w	r2, [r3], #4
 800fa9c:	429f      	cmp	r7, r3
 800fa9e:	d2fb      	bcs.n	800fa98 <__hexnan+0xcc>
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	b91b      	cbnz	r3, 800faac <__hexnan+0xe0>
 800faa4:	4547      	cmp	r7, r8
 800faa6:	d127      	bne.n	800faf8 <__hexnan+0x12c>
 800faa8:	2301      	movs	r3, #1
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	2005      	movs	r0, #5
 800faae:	e026      	b.n	800fafe <__hexnan+0x132>
 800fab0:	3501      	adds	r5, #1
 800fab2:	2d08      	cmp	r5, #8
 800fab4:	f10b 0b01 	add.w	fp, fp, #1
 800fab8:	dd06      	ble.n	800fac8 <__hexnan+0xfc>
 800faba:	4544      	cmp	r4, r8
 800fabc:	d9c3      	bls.n	800fa46 <__hexnan+0x7a>
 800fabe:	2300      	movs	r3, #0
 800fac0:	f844 3c04 	str.w	r3, [r4, #-4]
 800fac4:	2501      	movs	r5, #1
 800fac6:	3c04      	subs	r4, #4
 800fac8:	6822      	ldr	r2, [r4, #0]
 800faca:	f000 000f 	and.w	r0, r0, #15
 800face:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fad2:	6022      	str	r2, [r4, #0]
 800fad4:	e7b7      	b.n	800fa46 <__hexnan+0x7a>
 800fad6:	2508      	movs	r5, #8
 800fad8:	e7b5      	b.n	800fa46 <__hexnan+0x7a>
 800fada:	9b01      	ldr	r3, [sp, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d0df      	beq.n	800faa0 <__hexnan+0xd4>
 800fae0:	f04f 32ff 	mov.w	r2, #4294967295
 800fae4:	f1c3 0320 	rsb	r3, r3, #32
 800fae8:	fa22 f303 	lsr.w	r3, r2, r3
 800faec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800faf0:	401a      	ands	r2, r3
 800faf2:	f846 2c04 	str.w	r2, [r6, #-4]
 800faf6:	e7d3      	b.n	800faa0 <__hexnan+0xd4>
 800faf8:	3f04      	subs	r7, #4
 800fafa:	e7d1      	b.n	800faa0 <__hexnan+0xd4>
 800fafc:	2004      	movs	r0, #4
 800fafe:	b007      	add	sp, #28
 800fb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb04 <__ascii_mbtowc>:
 800fb04:	b082      	sub	sp, #8
 800fb06:	b901      	cbnz	r1, 800fb0a <__ascii_mbtowc+0x6>
 800fb08:	a901      	add	r1, sp, #4
 800fb0a:	b142      	cbz	r2, 800fb1e <__ascii_mbtowc+0x1a>
 800fb0c:	b14b      	cbz	r3, 800fb22 <__ascii_mbtowc+0x1e>
 800fb0e:	7813      	ldrb	r3, [r2, #0]
 800fb10:	600b      	str	r3, [r1, #0]
 800fb12:	7812      	ldrb	r2, [r2, #0]
 800fb14:	1e10      	subs	r0, r2, #0
 800fb16:	bf18      	it	ne
 800fb18:	2001      	movne	r0, #1
 800fb1a:	b002      	add	sp, #8
 800fb1c:	4770      	bx	lr
 800fb1e:	4610      	mov	r0, r2
 800fb20:	e7fb      	b.n	800fb1a <__ascii_mbtowc+0x16>
 800fb22:	f06f 0001 	mvn.w	r0, #1
 800fb26:	e7f8      	b.n	800fb1a <__ascii_mbtowc+0x16>

0800fb28 <memcpy>:
 800fb28:	440a      	add	r2, r1
 800fb2a:	4291      	cmp	r1, r2
 800fb2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb30:	d100      	bne.n	800fb34 <memcpy+0xc>
 800fb32:	4770      	bx	lr
 800fb34:	b510      	push	{r4, lr}
 800fb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb3e:	4291      	cmp	r1, r2
 800fb40:	d1f9      	bne.n	800fb36 <memcpy+0xe>
 800fb42:	bd10      	pop	{r4, pc}

0800fb44 <_Balloc>:
 800fb44:	b570      	push	{r4, r5, r6, lr}
 800fb46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb48:	4604      	mov	r4, r0
 800fb4a:	460d      	mov	r5, r1
 800fb4c:	b976      	cbnz	r6, 800fb6c <_Balloc+0x28>
 800fb4e:	2010      	movs	r0, #16
 800fb50:	f000 fdcc 	bl	80106ec <malloc>
 800fb54:	4602      	mov	r2, r0
 800fb56:	6260      	str	r0, [r4, #36]	; 0x24
 800fb58:	b920      	cbnz	r0, 800fb64 <_Balloc+0x20>
 800fb5a:	4b18      	ldr	r3, [pc, #96]	; (800fbbc <_Balloc+0x78>)
 800fb5c:	4818      	ldr	r0, [pc, #96]	; (800fbc0 <_Balloc+0x7c>)
 800fb5e:	2166      	movs	r1, #102	; 0x66
 800fb60:	f000 fd94 	bl	801068c <__assert_func>
 800fb64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb68:	6006      	str	r6, [r0, #0]
 800fb6a:	60c6      	str	r6, [r0, #12]
 800fb6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fb6e:	68f3      	ldr	r3, [r6, #12]
 800fb70:	b183      	cbz	r3, 800fb94 <_Balloc+0x50>
 800fb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb7a:	b9b8      	cbnz	r0, 800fbac <_Balloc+0x68>
 800fb7c:	2101      	movs	r1, #1
 800fb7e:	fa01 f605 	lsl.w	r6, r1, r5
 800fb82:	1d72      	adds	r2, r6, #5
 800fb84:	0092      	lsls	r2, r2, #2
 800fb86:	4620      	mov	r0, r4
 800fb88:	f000 fc9a 	bl	80104c0 <_calloc_r>
 800fb8c:	b160      	cbz	r0, 800fba8 <_Balloc+0x64>
 800fb8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb92:	e00e      	b.n	800fbb2 <_Balloc+0x6e>
 800fb94:	2221      	movs	r2, #33	; 0x21
 800fb96:	2104      	movs	r1, #4
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f000 fc91 	bl	80104c0 <_calloc_r>
 800fb9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fba0:	60f0      	str	r0, [r6, #12]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d1e4      	bne.n	800fb72 <_Balloc+0x2e>
 800fba8:	2000      	movs	r0, #0
 800fbaa:	bd70      	pop	{r4, r5, r6, pc}
 800fbac:	6802      	ldr	r2, [r0, #0]
 800fbae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fbb8:	e7f7      	b.n	800fbaa <_Balloc+0x66>
 800fbba:	bf00      	nop
 800fbbc:	08011f64 	.word	0x08011f64
 800fbc0:	08011f7b 	.word	0x08011f7b

0800fbc4 <_Bfree>:
 800fbc4:	b570      	push	{r4, r5, r6, lr}
 800fbc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbc8:	4605      	mov	r5, r0
 800fbca:	460c      	mov	r4, r1
 800fbcc:	b976      	cbnz	r6, 800fbec <_Bfree+0x28>
 800fbce:	2010      	movs	r0, #16
 800fbd0:	f000 fd8c 	bl	80106ec <malloc>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	6268      	str	r0, [r5, #36]	; 0x24
 800fbd8:	b920      	cbnz	r0, 800fbe4 <_Bfree+0x20>
 800fbda:	4b09      	ldr	r3, [pc, #36]	; (800fc00 <_Bfree+0x3c>)
 800fbdc:	4809      	ldr	r0, [pc, #36]	; (800fc04 <_Bfree+0x40>)
 800fbde:	218a      	movs	r1, #138	; 0x8a
 800fbe0:	f000 fd54 	bl	801068c <__assert_func>
 800fbe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbe8:	6006      	str	r6, [r0, #0]
 800fbea:	60c6      	str	r6, [r0, #12]
 800fbec:	b13c      	cbz	r4, 800fbfe <_Bfree+0x3a>
 800fbee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fbf0:	6862      	ldr	r2, [r4, #4]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbf8:	6021      	str	r1, [r4, #0]
 800fbfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbfe:	bd70      	pop	{r4, r5, r6, pc}
 800fc00:	08011f64 	.word	0x08011f64
 800fc04:	08011f7b 	.word	0x08011f7b

0800fc08 <__multadd>:
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	690d      	ldr	r5, [r1, #16]
 800fc0e:	4607      	mov	r7, r0
 800fc10:	460c      	mov	r4, r1
 800fc12:	461e      	mov	r6, r3
 800fc14:	f101 0c14 	add.w	ip, r1, #20
 800fc18:	2000      	movs	r0, #0
 800fc1a:	f8dc 3000 	ldr.w	r3, [ip]
 800fc1e:	b299      	uxth	r1, r3
 800fc20:	fb02 6101 	mla	r1, r2, r1, r6
 800fc24:	0c1e      	lsrs	r6, r3, #16
 800fc26:	0c0b      	lsrs	r3, r1, #16
 800fc28:	fb02 3306 	mla	r3, r2, r6, r3
 800fc2c:	b289      	uxth	r1, r1
 800fc2e:	3001      	adds	r0, #1
 800fc30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc34:	4285      	cmp	r5, r0
 800fc36:	f84c 1b04 	str.w	r1, [ip], #4
 800fc3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc3e:	dcec      	bgt.n	800fc1a <__multadd+0x12>
 800fc40:	b30e      	cbz	r6, 800fc86 <__multadd+0x7e>
 800fc42:	68a3      	ldr	r3, [r4, #8]
 800fc44:	42ab      	cmp	r3, r5
 800fc46:	dc19      	bgt.n	800fc7c <__multadd+0x74>
 800fc48:	6861      	ldr	r1, [r4, #4]
 800fc4a:	4638      	mov	r0, r7
 800fc4c:	3101      	adds	r1, #1
 800fc4e:	f7ff ff79 	bl	800fb44 <_Balloc>
 800fc52:	4680      	mov	r8, r0
 800fc54:	b928      	cbnz	r0, 800fc62 <__multadd+0x5a>
 800fc56:	4602      	mov	r2, r0
 800fc58:	4b0c      	ldr	r3, [pc, #48]	; (800fc8c <__multadd+0x84>)
 800fc5a:	480d      	ldr	r0, [pc, #52]	; (800fc90 <__multadd+0x88>)
 800fc5c:	21b5      	movs	r1, #181	; 0xb5
 800fc5e:	f000 fd15 	bl	801068c <__assert_func>
 800fc62:	6922      	ldr	r2, [r4, #16]
 800fc64:	3202      	adds	r2, #2
 800fc66:	f104 010c 	add.w	r1, r4, #12
 800fc6a:	0092      	lsls	r2, r2, #2
 800fc6c:	300c      	adds	r0, #12
 800fc6e:	f7ff ff5b 	bl	800fb28 <memcpy>
 800fc72:	4621      	mov	r1, r4
 800fc74:	4638      	mov	r0, r7
 800fc76:	f7ff ffa5 	bl	800fbc4 <_Bfree>
 800fc7a:	4644      	mov	r4, r8
 800fc7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc80:	3501      	adds	r5, #1
 800fc82:	615e      	str	r6, [r3, #20]
 800fc84:	6125      	str	r5, [r4, #16]
 800fc86:	4620      	mov	r0, r4
 800fc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc8c:	08011ed8 	.word	0x08011ed8
 800fc90:	08011f7b 	.word	0x08011f7b

0800fc94 <__s2b>:
 800fc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc98:	460c      	mov	r4, r1
 800fc9a:	4615      	mov	r5, r2
 800fc9c:	461f      	mov	r7, r3
 800fc9e:	2209      	movs	r2, #9
 800fca0:	3308      	adds	r3, #8
 800fca2:	4606      	mov	r6, r0
 800fca4:	fb93 f3f2 	sdiv	r3, r3, r2
 800fca8:	2100      	movs	r1, #0
 800fcaa:	2201      	movs	r2, #1
 800fcac:	429a      	cmp	r2, r3
 800fcae:	db09      	blt.n	800fcc4 <__s2b+0x30>
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	f7ff ff47 	bl	800fb44 <_Balloc>
 800fcb6:	b940      	cbnz	r0, 800fcca <__s2b+0x36>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	4b19      	ldr	r3, [pc, #100]	; (800fd20 <__s2b+0x8c>)
 800fcbc:	4819      	ldr	r0, [pc, #100]	; (800fd24 <__s2b+0x90>)
 800fcbe:	21ce      	movs	r1, #206	; 0xce
 800fcc0:	f000 fce4 	bl	801068c <__assert_func>
 800fcc4:	0052      	lsls	r2, r2, #1
 800fcc6:	3101      	adds	r1, #1
 800fcc8:	e7f0      	b.n	800fcac <__s2b+0x18>
 800fcca:	9b08      	ldr	r3, [sp, #32]
 800fccc:	6143      	str	r3, [r0, #20]
 800fcce:	2d09      	cmp	r5, #9
 800fcd0:	f04f 0301 	mov.w	r3, #1
 800fcd4:	6103      	str	r3, [r0, #16]
 800fcd6:	dd16      	ble.n	800fd06 <__s2b+0x72>
 800fcd8:	f104 0909 	add.w	r9, r4, #9
 800fcdc:	46c8      	mov	r8, r9
 800fcde:	442c      	add	r4, r5
 800fce0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fce4:	4601      	mov	r1, r0
 800fce6:	3b30      	subs	r3, #48	; 0x30
 800fce8:	220a      	movs	r2, #10
 800fcea:	4630      	mov	r0, r6
 800fcec:	f7ff ff8c 	bl	800fc08 <__multadd>
 800fcf0:	45a0      	cmp	r8, r4
 800fcf2:	d1f5      	bne.n	800fce0 <__s2b+0x4c>
 800fcf4:	f1a5 0408 	sub.w	r4, r5, #8
 800fcf8:	444c      	add	r4, r9
 800fcfa:	1b2d      	subs	r5, r5, r4
 800fcfc:	1963      	adds	r3, r4, r5
 800fcfe:	42bb      	cmp	r3, r7
 800fd00:	db04      	blt.n	800fd0c <__s2b+0x78>
 800fd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd06:	340a      	adds	r4, #10
 800fd08:	2509      	movs	r5, #9
 800fd0a:	e7f6      	b.n	800fcfa <__s2b+0x66>
 800fd0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd10:	4601      	mov	r1, r0
 800fd12:	3b30      	subs	r3, #48	; 0x30
 800fd14:	220a      	movs	r2, #10
 800fd16:	4630      	mov	r0, r6
 800fd18:	f7ff ff76 	bl	800fc08 <__multadd>
 800fd1c:	e7ee      	b.n	800fcfc <__s2b+0x68>
 800fd1e:	bf00      	nop
 800fd20:	08011ed8 	.word	0x08011ed8
 800fd24:	08011f7b 	.word	0x08011f7b

0800fd28 <__hi0bits>:
 800fd28:	0c03      	lsrs	r3, r0, #16
 800fd2a:	041b      	lsls	r3, r3, #16
 800fd2c:	b9d3      	cbnz	r3, 800fd64 <__hi0bits+0x3c>
 800fd2e:	0400      	lsls	r0, r0, #16
 800fd30:	2310      	movs	r3, #16
 800fd32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd36:	bf04      	itt	eq
 800fd38:	0200      	lsleq	r0, r0, #8
 800fd3a:	3308      	addeq	r3, #8
 800fd3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd40:	bf04      	itt	eq
 800fd42:	0100      	lsleq	r0, r0, #4
 800fd44:	3304      	addeq	r3, #4
 800fd46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd4a:	bf04      	itt	eq
 800fd4c:	0080      	lsleq	r0, r0, #2
 800fd4e:	3302      	addeq	r3, #2
 800fd50:	2800      	cmp	r0, #0
 800fd52:	db05      	blt.n	800fd60 <__hi0bits+0x38>
 800fd54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd58:	f103 0301 	add.w	r3, r3, #1
 800fd5c:	bf08      	it	eq
 800fd5e:	2320      	moveq	r3, #32
 800fd60:	4618      	mov	r0, r3
 800fd62:	4770      	bx	lr
 800fd64:	2300      	movs	r3, #0
 800fd66:	e7e4      	b.n	800fd32 <__hi0bits+0xa>

0800fd68 <__lo0bits>:
 800fd68:	6803      	ldr	r3, [r0, #0]
 800fd6a:	f013 0207 	ands.w	r2, r3, #7
 800fd6e:	4601      	mov	r1, r0
 800fd70:	d00b      	beq.n	800fd8a <__lo0bits+0x22>
 800fd72:	07da      	lsls	r2, r3, #31
 800fd74:	d423      	bmi.n	800fdbe <__lo0bits+0x56>
 800fd76:	0798      	lsls	r0, r3, #30
 800fd78:	bf49      	itett	mi
 800fd7a:	085b      	lsrmi	r3, r3, #1
 800fd7c:	089b      	lsrpl	r3, r3, #2
 800fd7e:	2001      	movmi	r0, #1
 800fd80:	600b      	strmi	r3, [r1, #0]
 800fd82:	bf5c      	itt	pl
 800fd84:	600b      	strpl	r3, [r1, #0]
 800fd86:	2002      	movpl	r0, #2
 800fd88:	4770      	bx	lr
 800fd8a:	b298      	uxth	r0, r3
 800fd8c:	b9a8      	cbnz	r0, 800fdba <__lo0bits+0x52>
 800fd8e:	0c1b      	lsrs	r3, r3, #16
 800fd90:	2010      	movs	r0, #16
 800fd92:	b2da      	uxtb	r2, r3
 800fd94:	b90a      	cbnz	r2, 800fd9a <__lo0bits+0x32>
 800fd96:	3008      	adds	r0, #8
 800fd98:	0a1b      	lsrs	r3, r3, #8
 800fd9a:	071a      	lsls	r2, r3, #28
 800fd9c:	bf04      	itt	eq
 800fd9e:	091b      	lsreq	r3, r3, #4
 800fda0:	3004      	addeq	r0, #4
 800fda2:	079a      	lsls	r2, r3, #30
 800fda4:	bf04      	itt	eq
 800fda6:	089b      	lsreq	r3, r3, #2
 800fda8:	3002      	addeq	r0, #2
 800fdaa:	07da      	lsls	r2, r3, #31
 800fdac:	d403      	bmi.n	800fdb6 <__lo0bits+0x4e>
 800fdae:	085b      	lsrs	r3, r3, #1
 800fdb0:	f100 0001 	add.w	r0, r0, #1
 800fdb4:	d005      	beq.n	800fdc2 <__lo0bits+0x5a>
 800fdb6:	600b      	str	r3, [r1, #0]
 800fdb8:	4770      	bx	lr
 800fdba:	4610      	mov	r0, r2
 800fdbc:	e7e9      	b.n	800fd92 <__lo0bits+0x2a>
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	4770      	bx	lr
 800fdc2:	2020      	movs	r0, #32
 800fdc4:	4770      	bx	lr
	...

0800fdc8 <__i2b>:
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	460c      	mov	r4, r1
 800fdcc:	2101      	movs	r1, #1
 800fdce:	f7ff feb9 	bl	800fb44 <_Balloc>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	b928      	cbnz	r0, 800fde2 <__i2b+0x1a>
 800fdd6:	4b05      	ldr	r3, [pc, #20]	; (800fdec <__i2b+0x24>)
 800fdd8:	4805      	ldr	r0, [pc, #20]	; (800fdf0 <__i2b+0x28>)
 800fdda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fdde:	f000 fc55 	bl	801068c <__assert_func>
 800fde2:	2301      	movs	r3, #1
 800fde4:	6144      	str	r4, [r0, #20]
 800fde6:	6103      	str	r3, [r0, #16]
 800fde8:	bd10      	pop	{r4, pc}
 800fdea:	bf00      	nop
 800fdec:	08011ed8 	.word	0x08011ed8
 800fdf0:	08011f7b 	.word	0x08011f7b

0800fdf4 <__multiply>:
 800fdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf8:	4691      	mov	r9, r2
 800fdfa:	690a      	ldr	r2, [r1, #16]
 800fdfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	bfb8      	it	lt
 800fe04:	460b      	movlt	r3, r1
 800fe06:	460c      	mov	r4, r1
 800fe08:	bfbc      	itt	lt
 800fe0a:	464c      	movlt	r4, r9
 800fe0c:	4699      	movlt	r9, r3
 800fe0e:	6927      	ldr	r7, [r4, #16]
 800fe10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe14:	68a3      	ldr	r3, [r4, #8]
 800fe16:	6861      	ldr	r1, [r4, #4]
 800fe18:	eb07 060a 	add.w	r6, r7, sl
 800fe1c:	42b3      	cmp	r3, r6
 800fe1e:	b085      	sub	sp, #20
 800fe20:	bfb8      	it	lt
 800fe22:	3101      	addlt	r1, #1
 800fe24:	f7ff fe8e 	bl	800fb44 <_Balloc>
 800fe28:	b930      	cbnz	r0, 800fe38 <__multiply+0x44>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	4b44      	ldr	r3, [pc, #272]	; (800ff40 <__multiply+0x14c>)
 800fe2e:	4845      	ldr	r0, [pc, #276]	; (800ff44 <__multiply+0x150>)
 800fe30:	f240 115d 	movw	r1, #349	; 0x15d
 800fe34:	f000 fc2a 	bl	801068c <__assert_func>
 800fe38:	f100 0514 	add.w	r5, r0, #20
 800fe3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe40:	462b      	mov	r3, r5
 800fe42:	2200      	movs	r2, #0
 800fe44:	4543      	cmp	r3, r8
 800fe46:	d321      	bcc.n	800fe8c <__multiply+0x98>
 800fe48:	f104 0314 	add.w	r3, r4, #20
 800fe4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe50:	f109 0314 	add.w	r3, r9, #20
 800fe54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe58:	9202      	str	r2, [sp, #8]
 800fe5a:	1b3a      	subs	r2, r7, r4
 800fe5c:	3a15      	subs	r2, #21
 800fe5e:	f022 0203 	bic.w	r2, r2, #3
 800fe62:	3204      	adds	r2, #4
 800fe64:	f104 0115 	add.w	r1, r4, #21
 800fe68:	428f      	cmp	r7, r1
 800fe6a:	bf38      	it	cc
 800fe6c:	2204      	movcc	r2, #4
 800fe6e:	9201      	str	r2, [sp, #4]
 800fe70:	9a02      	ldr	r2, [sp, #8]
 800fe72:	9303      	str	r3, [sp, #12]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d80c      	bhi.n	800fe92 <__multiply+0x9e>
 800fe78:	2e00      	cmp	r6, #0
 800fe7a:	dd03      	ble.n	800fe84 <__multiply+0x90>
 800fe7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d05a      	beq.n	800ff3a <__multiply+0x146>
 800fe84:	6106      	str	r6, [r0, #16]
 800fe86:	b005      	add	sp, #20
 800fe88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8c:	f843 2b04 	str.w	r2, [r3], #4
 800fe90:	e7d8      	b.n	800fe44 <__multiply+0x50>
 800fe92:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe96:	f1ba 0f00 	cmp.w	sl, #0
 800fe9a:	d024      	beq.n	800fee6 <__multiply+0xf2>
 800fe9c:	f104 0e14 	add.w	lr, r4, #20
 800fea0:	46a9      	mov	r9, r5
 800fea2:	f04f 0c00 	mov.w	ip, #0
 800fea6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800feaa:	f8d9 1000 	ldr.w	r1, [r9]
 800feae:	fa1f fb82 	uxth.w	fp, r2
 800feb2:	b289      	uxth	r1, r1
 800feb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800feb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800febc:	f8d9 2000 	ldr.w	r2, [r9]
 800fec0:	4461      	add	r1, ip
 800fec2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fec6:	fb0a c20b 	mla	r2, sl, fp, ip
 800feca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fece:	b289      	uxth	r1, r1
 800fed0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fed4:	4577      	cmp	r7, lr
 800fed6:	f849 1b04 	str.w	r1, [r9], #4
 800feda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fede:	d8e2      	bhi.n	800fea6 <__multiply+0xb2>
 800fee0:	9a01      	ldr	r2, [sp, #4]
 800fee2:	f845 c002 	str.w	ip, [r5, r2]
 800fee6:	9a03      	ldr	r2, [sp, #12]
 800fee8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800feec:	3304      	adds	r3, #4
 800feee:	f1b9 0f00 	cmp.w	r9, #0
 800fef2:	d020      	beq.n	800ff36 <__multiply+0x142>
 800fef4:	6829      	ldr	r1, [r5, #0]
 800fef6:	f104 0c14 	add.w	ip, r4, #20
 800fefa:	46ae      	mov	lr, r5
 800fefc:	f04f 0a00 	mov.w	sl, #0
 800ff00:	f8bc b000 	ldrh.w	fp, [ip]
 800ff04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ff08:	fb09 220b 	mla	r2, r9, fp, r2
 800ff0c:	4492      	add	sl, r2
 800ff0e:	b289      	uxth	r1, r1
 800ff10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ff14:	f84e 1b04 	str.w	r1, [lr], #4
 800ff18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ff1c:	f8be 1000 	ldrh.w	r1, [lr]
 800ff20:	0c12      	lsrs	r2, r2, #16
 800ff22:	fb09 1102 	mla	r1, r9, r2, r1
 800ff26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ff2a:	4567      	cmp	r7, ip
 800ff2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff30:	d8e6      	bhi.n	800ff00 <__multiply+0x10c>
 800ff32:	9a01      	ldr	r2, [sp, #4]
 800ff34:	50a9      	str	r1, [r5, r2]
 800ff36:	3504      	adds	r5, #4
 800ff38:	e79a      	b.n	800fe70 <__multiply+0x7c>
 800ff3a:	3e01      	subs	r6, #1
 800ff3c:	e79c      	b.n	800fe78 <__multiply+0x84>
 800ff3e:	bf00      	nop
 800ff40:	08011ed8 	.word	0x08011ed8
 800ff44:	08011f7b 	.word	0x08011f7b

0800ff48 <__pow5mult>:
 800ff48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff4c:	4615      	mov	r5, r2
 800ff4e:	f012 0203 	ands.w	r2, r2, #3
 800ff52:	4606      	mov	r6, r0
 800ff54:	460f      	mov	r7, r1
 800ff56:	d007      	beq.n	800ff68 <__pow5mult+0x20>
 800ff58:	4c25      	ldr	r4, [pc, #148]	; (800fff0 <__pow5mult+0xa8>)
 800ff5a:	3a01      	subs	r2, #1
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff62:	f7ff fe51 	bl	800fc08 <__multadd>
 800ff66:	4607      	mov	r7, r0
 800ff68:	10ad      	asrs	r5, r5, #2
 800ff6a:	d03d      	beq.n	800ffe8 <__pow5mult+0xa0>
 800ff6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff6e:	b97c      	cbnz	r4, 800ff90 <__pow5mult+0x48>
 800ff70:	2010      	movs	r0, #16
 800ff72:	f000 fbbb 	bl	80106ec <malloc>
 800ff76:	4602      	mov	r2, r0
 800ff78:	6270      	str	r0, [r6, #36]	; 0x24
 800ff7a:	b928      	cbnz	r0, 800ff88 <__pow5mult+0x40>
 800ff7c:	4b1d      	ldr	r3, [pc, #116]	; (800fff4 <__pow5mult+0xac>)
 800ff7e:	481e      	ldr	r0, [pc, #120]	; (800fff8 <__pow5mult+0xb0>)
 800ff80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ff84:	f000 fb82 	bl	801068c <__assert_func>
 800ff88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff8c:	6004      	str	r4, [r0, #0]
 800ff8e:	60c4      	str	r4, [r0, #12]
 800ff90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff98:	b94c      	cbnz	r4, 800ffae <__pow5mult+0x66>
 800ff9a:	f240 2171 	movw	r1, #625	; 0x271
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f7ff ff12 	bl	800fdc8 <__i2b>
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffaa:	4604      	mov	r4, r0
 800ffac:	6003      	str	r3, [r0, #0]
 800ffae:	f04f 0900 	mov.w	r9, #0
 800ffb2:	07eb      	lsls	r3, r5, #31
 800ffb4:	d50a      	bpl.n	800ffcc <__pow5mult+0x84>
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	4622      	mov	r2, r4
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f7ff ff1a 	bl	800fdf4 <__multiply>
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	4680      	mov	r8, r0
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f7ff fdfd 	bl	800fbc4 <_Bfree>
 800ffca:	4647      	mov	r7, r8
 800ffcc:	106d      	asrs	r5, r5, #1
 800ffce:	d00b      	beq.n	800ffe8 <__pow5mult+0xa0>
 800ffd0:	6820      	ldr	r0, [r4, #0]
 800ffd2:	b938      	cbnz	r0, 800ffe4 <__pow5mult+0x9c>
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	4621      	mov	r1, r4
 800ffd8:	4630      	mov	r0, r6
 800ffda:	f7ff ff0b 	bl	800fdf4 <__multiply>
 800ffde:	6020      	str	r0, [r4, #0]
 800ffe0:	f8c0 9000 	str.w	r9, [r0]
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	e7e4      	b.n	800ffb2 <__pow5mult+0x6a>
 800ffe8:	4638      	mov	r0, r7
 800ffea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffee:	bf00      	nop
 800fff0:	080120c8 	.word	0x080120c8
 800fff4:	08011f64 	.word	0x08011f64
 800fff8:	08011f7b 	.word	0x08011f7b

0800fffc <__lshift>:
 800fffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	460c      	mov	r4, r1
 8010002:	6849      	ldr	r1, [r1, #4]
 8010004:	6923      	ldr	r3, [r4, #16]
 8010006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801000a:	68a3      	ldr	r3, [r4, #8]
 801000c:	4607      	mov	r7, r0
 801000e:	4691      	mov	r9, r2
 8010010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010014:	f108 0601 	add.w	r6, r8, #1
 8010018:	42b3      	cmp	r3, r6
 801001a:	db0b      	blt.n	8010034 <__lshift+0x38>
 801001c:	4638      	mov	r0, r7
 801001e:	f7ff fd91 	bl	800fb44 <_Balloc>
 8010022:	4605      	mov	r5, r0
 8010024:	b948      	cbnz	r0, 801003a <__lshift+0x3e>
 8010026:	4602      	mov	r2, r0
 8010028:	4b2a      	ldr	r3, [pc, #168]	; (80100d4 <__lshift+0xd8>)
 801002a:	482b      	ldr	r0, [pc, #172]	; (80100d8 <__lshift+0xdc>)
 801002c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010030:	f000 fb2c 	bl	801068c <__assert_func>
 8010034:	3101      	adds	r1, #1
 8010036:	005b      	lsls	r3, r3, #1
 8010038:	e7ee      	b.n	8010018 <__lshift+0x1c>
 801003a:	2300      	movs	r3, #0
 801003c:	f100 0114 	add.w	r1, r0, #20
 8010040:	f100 0210 	add.w	r2, r0, #16
 8010044:	4618      	mov	r0, r3
 8010046:	4553      	cmp	r3, sl
 8010048:	db37      	blt.n	80100ba <__lshift+0xbe>
 801004a:	6920      	ldr	r0, [r4, #16]
 801004c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010050:	f104 0314 	add.w	r3, r4, #20
 8010054:	f019 091f 	ands.w	r9, r9, #31
 8010058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801005c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010060:	d02f      	beq.n	80100c2 <__lshift+0xc6>
 8010062:	f1c9 0e20 	rsb	lr, r9, #32
 8010066:	468a      	mov	sl, r1
 8010068:	f04f 0c00 	mov.w	ip, #0
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	fa02 f209 	lsl.w	r2, r2, r9
 8010072:	ea42 020c 	orr.w	r2, r2, ip
 8010076:	f84a 2b04 	str.w	r2, [sl], #4
 801007a:	f853 2b04 	ldr.w	r2, [r3], #4
 801007e:	4298      	cmp	r0, r3
 8010080:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010084:	d8f2      	bhi.n	801006c <__lshift+0x70>
 8010086:	1b03      	subs	r3, r0, r4
 8010088:	3b15      	subs	r3, #21
 801008a:	f023 0303 	bic.w	r3, r3, #3
 801008e:	3304      	adds	r3, #4
 8010090:	f104 0215 	add.w	r2, r4, #21
 8010094:	4290      	cmp	r0, r2
 8010096:	bf38      	it	cc
 8010098:	2304      	movcc	r3, #4
 801009a:	f841 c003 	str.w	ip, [r1, r3]
 801009e:	f1bc 0f00 	cmp.w	ip, #0
 80100a2:	d001      	beq.n	80100a8 <__lshift+0xac>
 80100a4:	f108 0602 	add.w	r6, r8, #2
 80100a8:	3e01      	subs	r6, #1
 80100aa:	4638      	mov	r0, r7
 80100ac:	612e      	str	r6, [r5, #16]
 80100ae:	4621      	mov	r1, r4
 80100b0:	f7ff fd88 	bl	800fbc4 <_Bfree>
 80100b4:	4628      	mov	r0, r5
 80100b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80100be:	3301      	adds	r3, #1
 80100c0:	e7c1      	b.n	8010046 <__lshift+0x4a>
 80100c2:	3904      	subs	r1, #4
 80100c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80100c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80100cc:	4298      	cmp	r0, r3
 80100ce:	d8f9      	bhi.n	80100c4 <__lshift+0xc8>
 80100d0:	e7ea      	b.n	80100a8 <__lshift+0xac>
 80100d2:	bf00      	nop
 80100d4:	08011ed8 	.word	0x08011ed8
 80100d8:	08011f7b 	.word	0x08011f7b

080100dc <__mcmp>:
 80100dc:	b530      	push	{r4, r5, lr}
 80100de:	6902      	ldr	r2, [r0, #16]
 80100e0:	690c      	ldr	r4, [r1, #16]
 80100e2:	1b12      	subs	r2, r2, r4
 80100e4:	d10e      	bne.n	8010104 <__mcmp+0x28>
 80100e6:	f100 0314 	add.w	r3, r0, #20
 80100ea:	3114      	adds	r1, #20
 80100ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100fc:	42a5      	cmp	r5, r4
 80100fe:	d003      	beq.n	8010108 <__mcmp+0x2c>
 8010100:	d305      	bcc.n	801010e <__mcmp+0x32>
 8010102:	2201      	movs	r2, #1
 8010104:	4610      	mov	r0, r2
 8010106:	bd30      	pop	{r4, r5, pc}
 8010108:	4283      	cmp	r3, r0
 801010a:	d3f3      	bcc.n	80100f4 <__mcmp+0x18>
 801010c:	e7fa      	b.n	8010104 <__mcmp+0x28>
 801010e:	f04f 32ff 	mov.w	r2, #4294967295
 8010112:	e7f7      	b.n	8010104 <__mcmp+0x28>

08010114 <__mdiff>:
 8010114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010118:	460c      	mov	r4, r1
 801011a:	4606      	mov	r6, r0
 801011c:	4611      	mov	r1, r2
 801011e:	4620      	mov	r0, r4
 8010120:	4690      	mov	r8, r2
 8010122:	f7ff ffdb 	bl	80100dc <__mcmp>
 8010126:	1e05      	subs	r5, r0, #0
 8010128:	d110      	bne.n	801014c <__mdiff+0x38>
 801012a:	4629      	mov	r1, r5
 801012c:	4630      	mov	r0, r6
 801012e:	f7ff fd09 	bl	800fb44 <_Balloc>
 8010132:	b930      	cbnz	r0, 8010142 <__mdiff+0x2e>
 8010134:	4b3a      	ldr	r3, [pc, #232]	; (8010220 <__mdiff+0x10c>)
 8010136:	4602      	mov	r2, r0
 8010138:	f240 2132 	movw	r1, #562	; 0x232
 801013c:	4839      	ldr	r0, [pc, #228]	; (8010224 <__mdiff+0x110>)
 801013e:	f000 faa5 	bl	801068c <__assert_func>
 8010142:	2301      	movs	r3, #1
 8010144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014c:	bfa4      	itt	ge
 801014e:	4643      	movge	r3, r8
 8010150:	46a0      	movge	r8, r4
 8010152:	4630      	mov	r0, r6
 8010154:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010158:	bfa6      	itte	ge
 801015a:	461c      	movge	r4, r3
 801015c:	2500      	movge	r5, #0
 801015e:	2501      	movlt	r5, #1
 8010160:	f7ff fcf0 	bl	800fb44 <_Balloc>
 8010164:	b920      	cbnz	r0, 8010170 <__mdiff+0x5c>
 8010166:	4b2e      	ldr	r3, [pc, #184]	; (8010220 <__mdiff+0x10c>)
 8010168:	4602      	mov	r2, r0
 801016a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801016e:	e7e5      	b.n	801013c <__mdiff+0x28>
 8010170:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010174:	6926      	ldr	r6, [r4, #16]
 8010176:	60c5      	str	r5, [r0, #12]
 8010178:	f104 0914 	add.w	r9, r4, #20
 801017c:	f108 0514 	add.w	r5, r8, #20
 8010180:	f100 0e14 	add.w	lr, r0, #20
 8010184:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010188:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801018c:	f108 0210 	add.w	r2, r8, #16
 8010190:	46f2      	mov	sl, lr
 8010192:	2100      	movs	r1, #0
 8010194:	f859 3b04 	ldr.w	r3, [r9], #4
 8010198:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801019c:	fa1f f883 	uxth.w	r8, r3
 80101a0:	fa11 f18b 	uxtah	r1, r1, fp
 80101a4:	0c1b      	lsrs	r3, r3, #16
 80101a6:	eba1 0808 	sub.w	r8, r1, r8
 80101aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80101ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80101b2:	fa1f f888 	uxth.w	r8, r8
 80101b6:	1419      	asrs	r1, r3, #16
 80101b8:	454e      	cmp	r6, r9
 80101ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80101be:	f84a 3b04 	str.w	r3, [sl], #4
 80101c2:	d8e7      	bhi.n	8010194 <__mdiff+0x80>
 80101c4:	1b33      	subs	r3, r6, r4
 80101c6:	3b15      	subs	r3, #21
 80101c8:	f023 0303 	bic.w	r3, r3, #3
 80101cc:	3304      	adds	r3, #4
 80101ce:	3415      	adds	r4, #21
 80101d0:	42a6      	cmp	r6, r4
 80101d2:	bf38      	it	cc
 80101d4:	2304      	movcc	r3, #4
 80101d6:	441d      	add	r5, r3
 80101d8:	4473      	add	r3, lr
 80101da:	469e      	mov	lr, r3
 80101dc:	462e      	mov	r6, r5
 80101de:	4566      	cmp	r6, ip
 80101e0:	d30e      	bcc.n	8010200 <__mdiff+0xec>
 80101e2:	f10c 0203 	add.w	r2, ip, #3
 80101e6:	1b52      	subs	r2, r2, r5
 80101e8:	f022 0203 	bic.w	r2, r2, #3
 80101ec:	3d03      	subs	r5, #3
 80101ee:	45ac      	cmp	ip, r5
 80101f0:	bf38      	it	cc
 80101f2:	2200      	movcc	r2, #0
 80101f4:	441a      	add	r2, r3
 80101f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80101fa:	b17b      	cbz	r3, 801021c <__mdiff+0x108>
 80101fc:	6107      	str	r7, [r0, #16]
 80101fe:	e7a3      	b.n	8010148 <__mdiff+0x34>
 8010200:	f856 8b04 	ldr.w	r8, [r6], #4
 8010204:	fa11 f288 	uxtah	r2, r1, r8
 8010208:	1414      	asrs	r4, r2, #16
 801020a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801020e:	b292      	uxth	r2, r2
 8010210:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010214:	f84e 2b04 	str.w	r2, [lr], #4
 8010218:	1421      	asrs	r1, r4, #16
 801021a:	e7e0      	b.n	80101de <__mdiff+0xca>
 801021c:	3f01      	subs	r7, #1
 801021e:	e7ea      	b.n	80101f6 <__mdiff+0xe2>
 8010220:	08011ed8 	.word	0x08011ed8
 8010224:	08011f7b 	.word	0x08011f7b

08010228 <__ulp>:
 8010228:	b082      	sub	sp, #8
 801022a:	ed8d 0b00 	vstr	d0, [sp]
 801022e:	9b01      	ldr	r3, [sp, #4]
 8010230:	4912      	ldr	r1, [pc, #72]	; (801027c <__ulp+0x54>)
 8010232:	4019      	ands	r1, r3
 8010234:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010238:	2900      	cmp	r1, #0
 801023a:	dd05      	ble.n	8010248 <__ulp+0x20>
 801023c:	2200      	movs	r2, #0
 801023e:	460b      	mov	r3, r1
 8010240:	ec43 2b10 	vmov	d0, r2, r3
 8010244:	b002      	add	sp, #8
 8010246:	4770      	bx	lr
 8010248:	4249      	negs	r1, r1
 801024a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801024e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010252:	f04f 0200 	mov.w	r2, #0
 8010256:	f04f 0300 	mov.w	r3, #0
 801025a:	da04      	bge.n	8010266 <__ulp+0x3e>
 801025c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010260:	fa41 f300 	asr.w	r3, r1, r0
 8010264:	e7ec      	b.n	8010240 <__ulp+0x18>
 8010266:	f1a0 0114 	sub.w	r1, r0, #20
 801026a:	291e      	cmp	r1, #30
 801026c:	bfda      	itte	le
 801026e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010272:	fa20 f101 	lsrle.w	r1, r0, r1
 8010276:	2101      	movgt	r1, #1
 8010278:	460a      	mov	r2, r1
 801027a:	e7e1      	b.n	8010240 <__ulp+0x18>
 801027c:	7ff00000 	.word	0x7ff00000

08010280 <__b2d>:
 8010280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010282:	6905      	ldr	r5, [r0, #16]
 8010284:	f100 0714 	add.w	r7, r0, #20
 8010288:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801028c:	1f2e      	subs	r6, r5, #4
 801028e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010292:	4620      	mov	r0, r4
 8010294:	f7ff fd48 	bl	800fd28 <__hi0bits>
 8010298:	f1c0 0320 	rsb	r3, r0, #32
 801029c:	280a      	cmp	r0, #10
 801029e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801031c <__b2d+0x9c>
 80102a2:	600b      	str	r3, [r1, #0]
 80102a4:	dc14      	bgt.n	80102d0 <__b2d+0x50>
 80102a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80102aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80102ae:	42b7      	cmp	r7, r6
 80102b0:	ea41 030c 	orr.w	r3, r1, ip
 80102b4:	bf34      	ite	cc
 80102b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80102ba:	2100      	movcs	r1, #0
 80102bc:	3015      	adds	r0, #21
 80102be:	fa04 f000 	lsl.w	r0, r4, r0
 80102c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80102c6:	ea40 0201 	orr.w	r2, r0, r1
 80102ca:	ec43 2b10 	vmov	d0, r2, r3
 80102ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102d0:	42b7      	cmp	r7, r6
 80102d2:	bf3a      	itte	cc
 80102d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80102d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80102dc:	2100      	movcs	r1, #0
 80102de:	380b      	subs	r0, #11
 80102e0:	d017      	beq.n	8010312 <__b2d+0x92>
 80102e2:	f1c0 0c20 	rsb	ip, r0, #32
 80102e6:	fa04 f500 	lsl.w	r5, r4, r0
 80102ea:	42be      	cmp	r6, r7
 80102ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80102f0:	ea45 0504 	orr.w	r5, r5, r4
 80102f4:	bf8c      	ite	hi
 80102f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80102fa:	2400      	movls	r4, #0
 80102fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010300:	fa01 f000 	lsl.w	r0, r1, r0
 8010304:	fa24 f40c 	lsr.w	r4, r4, ip
 8010308:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801030c:	ea40 0204 	orr.w	r2, r0, r4
 8010310:	e7db      	b.n	80102ca <__b2d+0x4a>
 8010312:	ea44 030c 	orr.w	r3, r4, ip
 8010316:	460a      	mov	r2, r1
 8010318:	e7d7      	b.n	80102ca <__b2d+0x4a>
 801031a:	bf00      	nop
 801031c:	3ff00000 	.word	0x3ff00000

08010320 <__d2b>:
 8010320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010324:	4689      	mov	r9, r1
 8010326:	2101      	movs	r1, #1
 8010328:	ec57 6b10 	vmov	r6, r7, d0
 801032c:	4690      	mov	r8, r2
 801032e:	f7ff fc09 	bl	800fb44 <_Balloc>
 8010332:	4604      	mov	r4, r0
 8010334:	b930      	cbnz	r0, 8010344 <__d2b+0x24>
 8010336:	4602      	mov	r2, r0
 8010338:	4b25      	ldr	r3, [pc, #148]	; (80103d0 <__d2b+0xb0>)
 801033a:	4826      	ldr	r0, [pc, #152]	; (80103d4 <__d2b+0xb4>)
 801033c:	f240 310a 	movw	r1, #778	; 0x30a
 8010340:	f000 f9a4 	bl	801068c <__assert_func>
 8010344:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801034c:	bb35      	cbnz	r5, 801039c <__d2b+0x7c>
 801034e:	2e00      	cmp	r6, #0
 8010350:	9301      	str	r3, [sp, #4]
 8010352:	d028      	beq.n	80103a6 <__d2b+0x86>
 8010354:	4668      	mov	r0, sp
 8010356:	9600      	str	r6, [sp, #0]
 8010358:	f7ff fd06 	bl	800fd68 <__lo0bits>
 801035c:	9900      	ldr	r1, [sp, #0]
 801035e:	b300      	cbz	r0, 80103a2 <__d2b+0x82>
 8010360:	9a01      	ldr	r2, [sp, #4]
 8010362:	f1c0 0320 	rsb	r3, r0, #32
 8010366:	fa02 f303 	lsl.w	r3, r2, r3
 801036a:	430b      	orrs	r3, r1
 801036c:	40c2      	lsrs	r2, r0
 801036e:	6163      	str	r3, [r4, #20]
 8010370:	9201      	str	r2, [sp, #4]
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	61a3      	str	r3, [r4, #24]
 8010376:	2b00      	cmp	r3, #0
 8010378:	bf14      	ite	ne
 801037a:	2202      	movne	r2, #2
 801037c:	2201      	moveq	r2, #1
 801037e:	6122      	str	r2, [r4, #16]
 8010380:	b1d5      	cbz	r5, 80103b8 <__d2b+0x98>
 8010382:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010386:	4405      	add	r5, r0
 8010388:	f8c9 5000 	str.w	r5, [r9]
 801038c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010390:	f8c8 0000 	str.w	r0, [r8]
 8010394:	4620      	mov	r0, r4
 8010396:	b003      	add	sp, #12
 8010398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801039c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103a0:	e7d5      	b.n	801034e <__d2b+0x2e>
 80103a2:	6161      	str	r1, [r4, #20]
 80103a4:	e7e5      	b.n	8010372 <__d2b+0x52>
 80103a6:	a801      	add	r0, sp, #4
 80103a8:	f7ff fcde 	bl	800fd68 <__lo0bits>
 80103ac:	9b01      	ldr	r3, [sp, #4]
 80103ae:	6163      	str	r3, [r4, #20]
 80103b0:	2201      	movs	r2, #1
 80103b2:	6122      	str	r2, [r4, #16]
 80103b4:	3020      	adds	r0, #32
 80103b6:	e7e3      	b.n	8010380 <__d2b+0x60>
 80103b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103c0:	f8c9 0000 	str.w	r0, [r9]
 80103c4:	6918      	ldr	r0, [r3, #16]
 80103c6:	f7ff fcaf 	bl	800fd28 <__hi0bits>
 80103ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103ce:	e7df      	b.n	8010390 <__d2b+0x70>
 80103d0:	08011ed8 	.word	0x08011ed8
 80103d4:	08011f7b 	.word	0x08011f7b

080103d8 <__ratio>:
 80103d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103dc:	4688      	mov	r8, r1
 80103de:	4669      	mov	r1, sp
 80103e0:	4681      	mov	r9, r0
 80103e2:	f7ff ff4d 	bl	8010280 <__b2d>
 80103e6:	a901      	add	r1, sp, #4
 80103e8:	4640      	mov	r0, r8
 80103ea:	ec55 4b10 	vmov	r4, r5, d0
 80103ee:	ee10 aa10 	vmov	sl, s0
 80103f2:	f7ff ff45 	bl	8010280 <__b2d>
 80103f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80103fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80103fe:	1a59      	subs	r1, r3, r1
 8010400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801040a:	ec57 6b10 	vmov	r6, r7, d0
 801040e:	2b00      	cmp	r3, #0
 8010410:	bfd6      	itet	le
 8010412:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010416:	462a      	movgt	r2, r5
 8010418:	463a      	movle	r2, r7
 801041a:	46ab      	mov	fp, r5
 801041c:	bfd6      	itet	le
 801041e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010422:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010426:	ee00 3a90 	vmovle	s1, r3
 801042a:	ec4b ab17 	vmov	d7, sl, fp
 801042e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010432:	b003      	add	sp, #12
 8010434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010438 <__copybits>:
 8010438:	3901      	subs	r1, #1
 801043a:	b570      	push	{r4, r5, r6, lr}
 801043c:	1149      	asrs	r1, r1, #5
 801043e:	6914      	ldr	r4, [r2, #16]
 8010440:	3101      	adds	r1, #1
 8010442:	f102 0314 	add.w	r3, r2, #20
 8010446:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801044a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801044e:	1f05      	subs	r5, r0, #4
 8010450:	42a3      	cmp	r3, r4
 8010452:	d30c      	bcc.n	801046e <__copybits+0x36>
 8010454:	1aa3      	subs	r3, r4, r2
 8010456:	3b11      	subs	r3, #17
 8010458:	f023 0303 	bic.w	r3, r3, #3
 801045c:	3211      	adds	r2, #17
 801045e:	42a2      	cmp	r2, r4
 8010460:	bf88      	it	hi
 8010462:	2300      	movhi	r3, #0
 8010464:	4418      	add	r0, r3
 8010466:	2300      	movs	r3, #0
 8010468:	4288      	cmp	r0, r1
 801046a:	d305      	bcc.n	8010478 <__copybits+0x40>
 801046c:	bd70      	pop	{r4, r5, r6, pc}
 801046e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010472:	f845 6f04 	str.w	r6, [r5, #4]!
 8010476:	e7eb      	b.n	8010450 <__copybits+0x18>
 8010478:	f840 3b04 	str.w	r3, [r0], #4
 801047c:	e7f4      	b.n	8010468 <__copybits+0x30>

0801047e <__any_on>:
 801047e:	f100 0214 	add.w	r2, r0, #20
 8010482:	6900      	ldr	r0, [r0, #16]
 8010484:	114b      	asrs	r3, r1, #5
 8010486:	4298      	cmp	r0, r3
 8010488:	b510      	push	{r4, lr}
 801048a:	db11      	blt.n	80104b0 <__any_on+0x32>
 801048c:	dd0a      	ble.n	80104a4 <__any_on+0x26>
 801048e:	f011 011f 	ands.w	r1, r1, #31
 8010492:	d007      	beq.n	80104a4 <__any_on+0x26>
 8010494:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010498:	fa24 f001 	lsr.w	r0, r4, r1
 801049c:	fa00 f101 	lsl.w	r1, r0, r1
 80104a0:	428c      	cmp	r4, r1
 80104a2:	d10b      	bne.n	80104bc <__any_on+0x3e>
 80104a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d803      	bhi.n	80104b4 <__any_on+0x36>
 80104ac:	2000      	movs	r0, #0
 80104ae:	bd10      	pop	{r4, pc}
 80104b0:	4603      	mov	r3, r0
 80104b2:	e7f7      	b.n	80104a4 <__any_on+0x26>
 80104b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104b8:	2900      	cmp	r1, #0
 80104ba:	d0f5      	beq.n	80104a8 <__any_on+0x2a>
 80104bc:	2001      	movs	r0, #1
 80104be:	e7f6      	b.n	80104ae <__any_on+0x30>

080104c0 <_calloc_r>:
 80104c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104c2:	fba1 2402 	umull	r2, r4, r1, r2
 80104c6:	b94c      	cbnz	r4, 80104dc <_calloc_r+0x1c>
 80104c8:	4611      	mov	r1, r2
 80104ca:	9201      	str	r2, [sp, #4]
 80104cc:	f000 f82e 	bl	801052c <_malloc_r>
 80104d0:	9a01      	ldr	r2, [sp, #4]
 80104d2:	4605      	mov	r5, r0
 80104d4:	b930      	cbnz	r0, 80104e4 <_calloc_r+0x24>
 80104d6:	4628      	mov	r0, r5
 80104d8:	b003      	add	sp, #12
 80104da:	bd30      	pop	{r4, r5, pc}
 80104dc:	220c      	movs	r2, #12
 80104de:	6002      	str	r2, [r0, #0]
 80104e0:	2500      	movs	r5, #0
 80104e2:	e7f8      	b.n	80104d6 <_calloc_r+0x16>
 80104e4:	4621      	mov	r1, r4
 80104e6:	f7fe f9b9 	bl	800e85c <memset>
 80104ea:	e7f4      	b.n	80104d6 <_calloc_r+0x16>

080104ec <sbrk_aligned>:
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	4e0e      	ldr	r6, [pc, #56]	; (8010528 <sbrk_aligned+0x3c>)
 80104f0:	460c      	mov	r4, r1
 80104f2:	6831      	ldr	r1, [r6, #0]
 80104f4:	4605      	mov	r5, r0
 80104f6:	b911      	cbnz	r1, 80104fe <sbrk_aligned+0x12>
 80104f8:	f000 f896 	bl	8010628 <_sbrk_r>
 80104fc:	6030      	str	r0, [r6, #0]
 80104fe:	4621      	mov	r1, r4
 8010500:	4628      	mov	r0, r5
 8010502:	f000 f891 	bl	8010628 <_sbrk_r>
 8010506:	1c43      	adds	r3, r0, #1
 8010508:	d00a      	beq.n	8010520 <sbrk_aligned+0x34>
 801050a:	1cc4      	adds	r4, r0, #3
 801050c:	f024 0403 	bic.w	r4, r4, #3
 8010510:	42a0      	cmp	r0, r4
 8010512:	d007      	beq.n	8010524 <sbrk_aligned+0x38>
 8010514:	1a21      	subs	r1, r4, r0
 8010516:	4628      	mov	r0, r5
 8010518:	f000 f886 	bl	8010628 <_sbrk_r>
 801051c:	3001      	adds	r0, #1
 801051e:	d101      	bne.n	8010524 <sbrk_aligned+0x38>
 8010520:	f04f 34ff 	mov.w	r4, #4294967295
 8010524:	4620      	mov	r0, r4
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	24000c74 	.word	0x24000c74

0801052c <_malloc_r>:
 801052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010530:	1ccd      	adds	r5, r1, #3
 8010532:	f025 0503 	bic.w	r5, r5, #3
 8010536:	3508      	adds	r5, #8
 8010538:	2d0c      	cmp	r5, #12
 801053a:	bf38      	it	cc
 801053c:	250c      	movcc	r5, #12
 801053e:	2d00      	cmp	r5, #0
 8010540:	4607      	mov	r7, r0
 8010542:	db01      	blt.n	8010548 <_malloc_r+0x1c>
 8010544:	42a9      	cmp	r1, r5
 8010546:	d905      	bls.n	8010554 <_malloc_r+0x28>
 8010548:	230c      	movs	r3, #12
 801054a:	603b      	str	r3, [r7, #0]
 801054c:	2600      	movs	r6, #0
 801054e:	4630      	mov	r0, r6
 8010550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010554:	4e2e      	ldr	r6, [pc, #184]	; (8010610 <_malloc_r+0xe4>)
 8010556:	f000 f8d1 	bl	80106fc <__malloc_lock>
 801055a:	6833      	ldr	r3, [r6, #0]
 801055c:	461c      	mov	r4, r3
 801055e:	bb34      	cbnz	r4, 80105ae <_malloc_r+0x82>
 8010560:	4629      	mov	r1, r5
 8010562:	4638      	mov	r0, r7
 8010564:	f7ff ffc2 	bl	80104ec <sbrk_aligned>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	4604      	mov	r4, r0
 801056c:	d14d      	bne.n	801060a <_malloc_r+0xde>
 801056e:	6834      	ldr	r4, [r6, #0]
 8010570:	4626      	mov	r6, r4
 8010572:	2e00      	cmp	r6, #0
 8010574:	d140      	bne.n	80105f8 <_malloc_r+0xcc>
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	4631      	mov	r1, r6
 801057a:	4638      	mov	r0, r7
 801057c:	eb04 0803 	add.w	r8, r4, r3
 8010580:	f000 f852 	bl	8010628 <_sbrk_r>
 8010584:	4580      	cmp	r8, r0
 8010586:	d13a      	bne.n	80105fe <_malloc_r+0xd2>
 8010588:	6821      	ldr	r1, [r4, #0]
 801058a:	3503      	adds	r5, #3
 801058c:	1a6d      	subs	r5, r5, r1
 801058e:	f025 0503 	bic.w	r5, r5, #3
 8010592:	3508      	adds	r5, #8
 8010594:	2d0c      	cmp	r5, #12
 8010596:	bf38      	it	cc
 8010598:	250c      	movcc	r5, #12
 801059a:	4629      	mov	r1, r5
 801059c:	4638      	mov	r0, r7
 801059e:	f7ff ffa5 	bl	80104ec <sbrk_aligned>
 80105a2:	3001      	adds	r0, #1
 80105a4:	d02b      	beq.n	80105fe <_malloc_r+0xd2>
 80105a6:	6823      	ldr	r3, [r4, #0]
 80105a8:	442b      	add	r3, r5
 80105aa:	6023      	str	r3, [r4, #0]
 80105ac:	e00e      	b.n	80105cc <_malloc_r+0xa0>
 80105ae:	6822      	ldr	r2, [r4, #0]
 80105b0:	1b52      	subs	r2, r2, r5
 80105b2:	d41e      	bmi.n	80105f2 <_malloc_r+0xc6>
 80105b4:	2a0b      	cmp	r2, #11
 80105b6:	d916      	bls.n	80105e6 <_malloc_r+0xba>
 80105b8:	1961      	adds	r1, r4, r5
 80105ba:	42a3      	cmp	r3, r4
 80105bc:	6025      	str	r5, [r4, #0]
 80105be:	bf18      	it	ne
 80105c0:	6059      	strne	r1, [r3, #4]
 80105c2:	6863      	ldr	r3, [r4, #4]
 80105c4:	bf08      	it	eq
 80105c6:	6031      	streq	r1, [r6, #0]
 80105c8:	5162      	str	r2, [r4, r5]
 80105ca:	604b      	str	r3, [r1, #4]
 80105cc:	4638      	mov	r0, r7
 80105ce:	f104 060b 	add.w	r6, r4, #11
 80105d2:	f000 f899 	bl	8010708 <__malloc_unlock>
 80105d6:	f026 0607 	bic.w	r6, r6, #7
 80105da:	1d23      	adds	r3, r4, #4
 80105dc:	1af2      	subs	r2, r6, r3
 80105de:	d0b6      	beq.n	801054e <_malloc_r+0x22>
 80105e0:	1b9b      	subs	r3, r3, r6
 80105e2:	50a3      	str	r3, [r4, r2]
 80105e4:	e7b3      	b.n	801054e <_malloc_r+0x22>
 80105e6:	6862      	ldr	r2, [r4, #4]
 80105e8:	42a3      	cmp	r3, r4
 80105ea:	bf0c      	ite	eq
 80105ec:	6032      	streq	r2, [r6, #0]
 80105ee:	605a      	strne	r2, [r3, #4]
 80105f0:	e7ec      	b.n	80105cc <_malloc_r+0xa0>
 80105f2:	4623      	mov	r3, r4
 80105f4:	6864      	ldr	r4, [r4, #4]
 80105f6:	e7b2      	b.n	801055e <_malloc_r+0x32>
 80105f8:	4634      	mov	r4, r6
 80105fa:	6876      	ldr	r6, [r6, #4]
 80105fc:	e7b9      	b.n	8010572 <_malloc_r+0x46>
 80105fe:	230c      	movs	r3, #12
 8010600:	603b      	str	r3, [r7, #0]
 8010602:	4638      	mov	r0, r7
 8010604:	f000 f880 	bl	8010708 <__malloc_unlock>
 8010608:	e7a1      	b.n	801054e <_malloc_r+0x22>
 801060a:	6025      	str	r5, [r4, #0]
 801060c:	e7de      	b.n	80105cc <_malloc_r+0xa0>
 801060e:	bf00      	nop
 8010610:	24000c70 	.word	0x24000c70
 8010614:	00000000 	.word	0x00000000

08010618 <nan>:
 8010618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010620 <nan+0x8>
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	00000000 	.word	0x00000000
 8010624:	7ff80000 	.word	0x7ff80000

08010628 <_sbrk_r>:
 8010628:	b538      	push	{r3, r4, r5, lr}
 801062a:	4d06      	ldr	r5, [pc, #24]	; (8010644 <_sbrk_r+0x1c>)
 801062c:	2300      	movs	r3, #0
 801062e:	4604      	mov	r4, r0
 8010630:	4608      	mov	r0, r1
 8010632:	602b      	str	r3, [r5, #0]
 8010634:	f7f3 fbba 	bl	8003dac <_sbrk>
 8010638:	1c43      	adds	r3, r0, #1
 801063a:	d102      	bne.n	8010642 <_sbrk_r+0x1a>
 801063c:	682b      	ldr	r3, [r5, #0]
 801063e:	b103      	cbz	r3, 8010642 <_sbrk_r+0x1a>
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	bd38      	pop	{r3, r4, r5, pc}
 8010644:	24000c78 	.word	0x24000c78

08010648 <strncmp>:
 8010648:	b510      	push	{r4, lr}
 801064a:	b17a      	cbz	r2, 801066c <strncmp+0x24>
 801064c:	4603      	mov	r3, r0
 801064e:	3901      	subs	r1, #1
 8010650:	1884      	adds	r4, r0, r2
 8010652:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010656:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801065a:	4290      	cmp	r0, r2
 801065c:	d101      	bne.n	8010662 <strncmp+0x1a>
 801065e:	42a3      	cmp	r3, r4
 8010660:	d101      	bne.n	8010666 <strncmp+0x1e>
 8010662:	1a80      	subs	r0, r0, r2
 8010664:	bd10      	pop	{r4, pc}
 8010666:	2800      	cmp	r0, #0
 8010668:	d1f3      	bne.n	8010652 <strncmp+0xa>
 801066a:	e7fa      	b.n	8010662 <strncmp+0x1a>
 801066c:	4610      	mov	r0, r2
 801066e:	e7f9      	b.n	8010664 <strncmp+0x1c>

08010670 <__ascii_wctomb>:
 8010670:	b149      	cbz	r1, 8010686 <__ascii_wctomb+0x16>
 8010672:	2aff      	cmp	r2, #255	; 0xff
 8010674:	bf85      	ittet	hi
 8010676:	238a      	movhi	r3, #138	; 0x8a
 8010678:	6003      	strhi	r3, [r0, #0]
 801067a:	700a      	strbls	r2, [r1, #0]
 801067c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010680:	bf98      	it	ls
 8010682:	2001      	movls	r0, #1
 8010684:	4770      	bx	lr
 8010686:	4608      	mov	r0, r1
 8010688:	4770      	bx	lr
	...

0801068c <__assert_func>:
 801068c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801068e:	4614      	mov	r4, r2
 8010690:	461a      	mov	r2, r3
 8010692:	4b09      	ldr	r3, [pc, #36]	; (80106b8 <__assert_func+0x2c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4605      	mov	r5, r0
 8010698:	68d8      	ldr	r0, [r3, #12]
 801069a:	b14c      	cbz	r4, 80106b0 <__assert_func+0x24>
 801069c:	4b07      	ldr	r3, [pc, #28]	; (80106bc <__assert_func+0x30>)
 801069e:	9100      	str	r1, [sp, #0]
 80106a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106a4:	4906      	ldr	r1, [pc, #24]	; (80106c0 <__assert_func+0x34>)
 80106a6:	462b      	mov	r3, r5
 80106a8:	f000 f80e 	bl	80106c8 <fiprintf>
 80106ac:	f000 fc2c 	bl	8010f08 <abort>
 80106b0:	4b04      	ldr	r3, [pc, #16]	; (80106c4 <__assert_func+0x38>)
 80106b2:	461c      	mov	r4, r3
 80106b4:	e7f3      	b.n	801069e <__assert_func+0x12>
 80106b6:	bf00      	nop
 80106b8:	240000f8 	.word	0x240000f8
 80106bc:	080120d4 	.word	0x080120d4
 80106c0:	080120e1 	.word	0x080120e1
 80106c4:	0801210f 	.word	0x0801210f

080106c8 <fiprintf>:
 80106c8:	b40e      	push	{r1, r2, r3}
 80106ca:	b503      	push	{r0, r1, lr}
 80106cc:	4601      	mov	r1, r0
 80106ce:	ab03      	add	r3, sp, #12
 80106d0:	4805      	ldr	r0, [pc, #20]	; (80106e8 <fiprintf+0x20>)
 80106d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80106d6:	6800      	ldr	r0, [r0, #0]
 80106d8:	9301      	str	r3, [sp, #4]
 80106da:	f000 f891 	bl	8010800 <_vfiprintf_r>
 80106de:	b002      	add	sp, #8
 80106e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80106e4:	b003      	add	sp, #12
 80106e6:	4770      	bx	lr
 80106e8:	240000f8 	.word	0x240000f8

080106ec <malloc>:
 80106ec:	4b02      	ldr	r3, [pc, #8]	; (80106f8 <malloc+0xc>)
 80106ee:	4601      	mov	r1, r0
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	f7ff bf1b 	b.w	801052c <_malloc_r>
 80106f6:	bf00      	nop
 80106f8:	240000f8 	.word	0x240000f8

080106fc <__malloc_lock>:
 80106fc:	4801      	ldr	r0, [pc, #4]	; (8010704 <__malloc_lock+0x8>)
 80106fe:	f000 bdc3 	b.w	8011288 <__retarget_lock_acquire_recursive>
 8010702:	bf00      	nop
 8010704:	24000c7c 	.word	0x24000c7c

08010708 <__malloc_unlock>:
 8010708:	4801      	ldr	r0, [pc, #4]	; (8010710 <__malloc_unlock+0x8>)
 801070a:	f000 bdbe 	b.w	801128a <__retarget_lock_release_recursive>
 801070e:	bf00      	nop
 8010710:	24000c7c 	.word	0x24000c7c

08010714 <_free_r>:
 8010714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010716:	2900      	cmp	r1, #0
 8010718:	d044      	beq.n	80107a4 <_free_r+0x90>
 801071a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801071e:	9001      	str	r0, [sp, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	f1a1 0404 	sub.w	r4, r1, #4
 8010726:	bfb8      	it	lt
 8010728:	18e4      	addlt	r4, r4, r3
 801072a:	f7ff ffe7 	bl	80106fc <__malloc_lock>
 801072e:	4a1e      	ldr	r2, [pc, #120]	; (80107a8 <_free_r+0x94>)
 8010730:	9801      	ldr	r0, [sp, #4]
 8010732:	6813      	ldr	r3, [r2, #0]
 8010734:	b933      	cbnz	r3, 8010744 <_free_r+0x30>
 8010736:	6063      	str	r3, [r4, #4]
 8010738:	6014      	str	r4, [r2, #0]
 801073a:	b003      	add	sp, #12
 801073c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010740:	f7ff bfe2 	b.w	8010708 <__malloc_unlock>
 8010744:	42a3      	cmp	r3, r4
 8010746:	d908      	bls.n	801075a <_free_r+0x46>
 8010748:	6825      	ldr	r5, [r4, #0]
 801074a:	1961      	adds	r1, r4, r5
 801074c:	428b      	cmp	r3, r1
 801074e:	bf01      	itttt	eq
 8010750:	6819      	ldreq	r1, [r3, #0]
 8010752:	685b      	ldreq	r3, [r3, #4]
 8010754:	1949      	addeq	r1, r1, r5
 8010756:	6021      	streq	r1, [r4, #0]
 8010758:	e7ed      	b.n	8010736 <_free_r+0x22>
 801075a:	461a      	mov	r2, r3
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	b10b      	cbz	r3, 8010764 <_free_r+0x50>
 8010760:	42a3      	cmp	r3, r4
 8010762:	d9fa      	bls.n	801075a <_free_r+0x46>
 8010764:	6811      	ldr	r1, [r2, #0]
 8010766:	1855      	adds	r5, r2, r1
 8010768:	42a5      	cmp	r5, r4
 801076a:	d10b      	bne.n	8010784 <_free_r+0x70>
 801076c:	6824      	ldr	r4, [r4, #0]
 801076e:	4421      	add	r1, r4
 8010770:	1854      	adds	r4, r2, r1
 8010772:	42a3      	cmp	r3, r4
 8010774:	6011      	str	r1, [r2, #0]
 8010776:	d1e0      	bne.n	801073a <_free_r+0x26>
 8010778:	681c      	ldr	r4, [r3, #0]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	6053      	str	r3, [r2, #4]
 801077e:	4421      	add	r1, r4
 8010780:	6011      	str	r1, [r2, #0]
 8010782:	e7da      	b.n	801073a <_free_r+0x26>
 8010784:	d902      	bls.n	801078c <_free_r+0x78>
 8010786:	230c      	movs	r3, #12
 8010788:	6003      	str	r3, [r0, #0]
 801078a:	e7d6      	b.n	801073a <_free_r+0x26>
 801078c:	6825      	ldr	r5, [r4, #0]
 801078e:	1961      	adds	r1, r4, r5
 8010790:	428b      	cmp	r3, r1
 8010792:	bf04      	itt	eq
 8010794:	6819      	ldreq	r1, [r3, #0]
 8010796:	685b      	ldreq	r3, [r3, #4]
 8010798:	6063      	str	r3, [r4, #4]
 801079a:	bf04      	itt	eq
 801079c:	1949      	addeq	r1, r1, r5
 801079e:	6021      	streq	r1, [r4, #0]
 80107a0:	6054      	str	r4, [r2, #4]
 80107a2:	e7ca      	b.n	801073a <_free_r+0x26>
 80107a4:	b003      	add	sp, #12
 80107a6:	bd30      	pop	{r4, r5, pc}
 80107a8:	24000c70 	.word	0x24000c70

080107ac <__sfputc_r>:
 80107ac:	6893      	ldr	r3, [r2, #8]
 80107ae:	3b01      	subs	r3, #1
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	b410      	push	{r4}
 80107b4:	6093      	str	r3, [r2, #8]
 80107b6:	da08      	bge.n	80107ca <__sfputc_r+0x1e>
 80107b8:	6994      	ldr	r4, [r2, #24]
 80107ba:	42a3      	cmp	r3, r4
 80107bc:	db01      	blt.n	80107c2 <__sfputc_r+0x16>
 80107be:	290a      	cmp	r1, #10
 80107c0:	d103      	bne.n	80107ca <__sfputc_r+0x1e>
 80107c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107c6:	f000 badf 	b.w	8010d88 <__swbuf_r>
 80107ca:	6813      	ldr	r3, [r2, #0]
 80107cc:	1c58      	adds	r0, r3, #1
 80107ce:	6010      	str	r0, [r2, #0]
 80107d0:	7019      	strb	r1, [r3, #0]
 80107d2:	4608      	mov	r0, r1
 80107d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107d8:	4770      	bx	lr

080107da <__sfputs_r>:
 80107da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107dc:	4606      	mov	r6, r0
 80107de:	460f      	mov	r7, r1
 80107e0:	4614      	mov	r4, r2
 80107e2:	18d5      	adds	r5, r2, r3
 80107e4:	42ac      	cmp	r4, r5
 80107e6:	d101      	bne.n	80107ec <__sfputs_r+0x12>
 80107e8:	2000      	movs	r0, #0
 80107ea:	e007      	b.n	80107fc <__sfputs_r+0x22>
 80107ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107f0:	463a      	mov	r2, r7
 80107f2:	4630      	mov	r0, r6
 80107f4:	f7ff ffda 	bl	80107ac <__sfputc_r>
 80107f8:	1c43      	adds	r3, r0, #1
 80107fa:	d1f3      	bne.n	80107e4 <__sfputs_r+0xa>
 80107fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010800 <_vfiprintf_r>:
 8010800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010804:	460d      	mov	r5, r1
 8010806:	b09d      	sub	sp, #116	; 0x74
 8010808:	4614      	mov	r4, r2
 801080a:	4698      	mov	r8, r3
 801080c:	4606      	mov	r6, r0
 801080e:	b118      	cbz	r0, 8010818 <_vfiprintf_r+0x18>
 8010810:	6983      	ldr	r3, [r0, #24]
 8010812:	b90b      	cbnz	r3, 8010818 <_vfiprintf_r+0x18>
 8010814:	f000 fc9a 	bl	801114c <__sinit>
 8010818:	4b89      	ldr	r3, [pc, #548]	; (8010a40 <_vfiprintf_r+0x240>)
 801081a:	429d      	cmp	r5, r3
 801081c:	d11b      	bne.n	8010856 <_vfiprintf_r+0x56>
 801081e:	6875      	ldr	r5, [r6, #4]
 8010820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010822:	07d9      	lsls	r1, r3, #31
 8010824:	d405      	bmi.n	8010832 <_vfiprintf_r+0x32>
 8010826:	89ab      	ldrh	r3, [r5, #12]
 8010828:	059a      	lsls	r2, r3, #22
 801082a:	d402      	bmi.n	8010832 <_vfiprintf_r+0x32>
 801082c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801082e:	f000 fd2b 	bl	8011288 <__retarget_lock_acquire_recursive>
 8010832:	89ab      	ldrh	r3, [r5, #12]
 8010834:	071b      	lsls	r3, r3, #28
 8010836:	d501      	bpl.n	801083c <_vfiprintf_r+0x3c>
 8010838:	692b      	ldr	r3, [r5, #16]
 801083a:	b9eb      	cbnz	r3, 8010878 <_vfiprintf_r+0x78>
 801083c:	4629      	mov	r1, r5
 801083e:	4630      	mov	r0, r6
 8010840:	f000 faf4 	bl	8010e2c <__swsetup_r>
 8010844:	b1c0      	cbz	r0, 8010878 <_vfiprintf_r+0x78>
 8010846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010848:	07dc      	lsls	r4, r3, #31
 801084a:	d50e      	bpl.n	801086a <_vfiprintf_r+0x6a>
 801084c:	f04f 30ff 	mov.w	r0, #4294967295
 8010850:	b01d      	add	sp, #116	; 0x74
 8010852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010856:	4b7b      	ldr	r3, [pc, #492]	; (8010a44 <_vfiprintf_r+0x244>)
 8010858:	429d      	cmp	r5, r3
 801085a:	d101      	bne.n	8010860 <_vfiprintf_r+0x60>
 801085c:	68b5      	ldr	r5, [r6, #8]
 801085e:	e7df      	b.n	8010820 <_vfiprintf_r+0x20>
 8010860:	4b79      	ldr	r3, [pc, #484]	; (8010a48 <_vfiprintf_r+0x248>)
 8010862:	429d      	cmp	r5, r3
 8010864:	bf08      	it	eq
 8010866:	68f5      	ldreq	r5, [r6, #12]
 8010868:	e7da      	b.n	8010820 <_vfiprintf_r+0x20>
 801086a:	89ab      	ldrh	r3, [r5, #12]
 801086c:	0598      	lsls	r0, r3, #22
 801086e:	d4ed      	bmi.n	801084c <_vfiprintf_r+0x4c>
 8010870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010872:	f000 fd0a 	bl	801128a <__retarget_lock_release_recursive>
 8010876:	e7e9      	b.n	801084c <_vfiprintf_r+0x4c>
 8010878:	2300      	movs	r3, #0
 801087a:	9309      	str	r3, [sp, #36]	; 0x24
 801087c:	2320      	movs	r3, #32
 801087e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010882:	f8cd 800c 	str.w	r8, [sp, #12]
 8010886:	2330      	movs	r3, #48	; 0x30
 8010888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a4c <_vfiprintf_r+0x24c>
 801088c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010890:	f04f 0901 	mov.w	r9, #1
 8010894:	4623      	mov	r3, r4
 8010896:	469a      	mov	sl, r3
 8010898:	f813 2b01 	ldrb.w	r2, [r3], #1
 801089c:	b10a      	cbz	r2, 80108a2 <_vfiprintf_r+0xa2>
 801089e:	2a25      	cmp	r2, #37	; 0x25
 80108a0:	d1f9      	bne.n	8010896 <_vfiprintf_r+0x96>
 80108a2:	ebba 0b04 	subs.w	fp, sl, r4
 80108a6:	d00b      	beq.n	80108c0 <_vfiprintf_r+0xc0>
 80108a8:	465b      	mov	r3, fp
 80108aa:	4622      	mov	r2, r4
 80108ac:	4629      	mov	r1, r5
 80108ae:	4630      	mov	r0, r6
 80108b0:	f7ff ff93 	bl	80107da <__sfputs_r>
 80108b4:	3001      	adds	r0, #1
 80108b6:	f000 80aa 	beq.w	8010a0e <_vfiprintf_r+0x20e>
 80108ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108bc:	445a      	add	r2, fp
 80108be:	9209      	str	r2, [sp, #36]	; 0x24
 80108c0:	f89a 3000 	ldrb.w	r3, [sl]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f000 80a2 	beq.w	8010a0e <_vfiprintf_r+0x20e>
 80108ca:	2300      	movs	r3, #0
 80108cc:	f04f 32ff 	mov.w	r2, #4294967295
 80108d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108d4:	f10a 0a01 	add.w	sl, sl, #1
 80108d8:	9304      	str	r3, [sp, #16]
 80108da:	9307      	str	r3, [sp, #28]
 80108dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108e0:	931a      	str	r3, [sp, #104]	; 0x68
 80108e2:	4654      	mov	r4, sl
 80108e4:	2205      	movs	r2, #5
 80108e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108ea:	4858      	ldr	r0, [pc, #352]	; (8010a4c <_vfiprintf_r+0x24c>)
 80108ec:	f7ef fd00 	bl	80002f0 <memchr>
 80108f0:	9a04      	ldr	r2, [sp, #16]
 80108f2:	b9d8      	cbnz	r0, 801092c <_vfiprintf_r+0x12c>
 80108f4:	06d1      	lsls	r1, r2, #27
 80108f6:	bf44      	itt	mi
 80108f8:	2320      	movmi	r3, #32
 80108fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108fe:	0713      	lsls	r3, r2, #28
 8010900:	bf44      	itt	mi
 8010902:	232b      	movmi	r3, #43	; 0x2b
 8010904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010908:	f89a 3000 	ldrb.w	r3, [sl]
 801090c:	2b2a      	cmp	r3, #42	; 0x2a
 801090e:	d015      	beq.n	801093c <_vfiprintf_r+0x13c>
 8010910:	9a07      	ldr	r2, [sp, #28]
 8010912:	4654      	mov	r4, sl
 8010914:	2000      	movs	r0, #0
 8010916:	f04f 0c0a 	mov.w	ip, #10
 801091a:	4621      	mov	r1, r4
 801091c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010920:	3b30      	subs	r3, #48	; 0x30
 8010922:	2b09      	cmp	r3, #9
 8010924:	d94e      	bls.n	80109c4 <_vfiprintf_r+0x1c4>
 8010926:	b1b0      	cbz	r0, 8010956 <_vfiprintf_r+0x156>
 8010928:	9207      	str	r2, [sp, #28]
 801092a:	e014      	b.n	8010956 <_vfiprintf_r+0x156>
 801092c:	eba0 0308 	sub.w	r3, r0, r8
 8010930:	fa09 f303 	lsl.w	r3, r9, r3
 8010934:	4313      	orrs	r3, r2
 8010936:	9304      	str	r3, [sp, #16]
 8010938:	46a2      	mov	sl, r4
 801093a:	e7d2      	b.n	80108e2 <_vfiprintf_r+0xe2>
 801093c:	9b03      	ldr	r3, [sp, #12]
 801093e:	1d19      	adds	r1, r3, #4
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	9103      	str	r1, [sp, #12]
 8010944:	2b00      	cmp	r3, #0
 8010946:	bfbb      	ittet	lt
 8010948:	425b      	neglt	r3, r3
 801094a:	f042 0202 	orrlt.w	r2, r2, #2
 801094e:	9307      	strge	r3, [sp, #28]
 8010950:	9307      	strlt	r3, [sp, #28]
 8010952:	bfb8      	it	lt
 8010954:	9204      	strlt	r2, [sp, #16]
 8010956:	7823      	ldrb	r3, [r4, #0]
 8010958:	2b2e      	cmp	r3, #46	; 0x2e
 801095a:	d10c      	bne.n	8010976 <_vfiprintf_r+0x176>
 801095c:	7863      	ldrb	r3, [r4, #1]
 801095e:	2b2a      	cmp	r3, #42	; 0x2a
 8010960:	d135      	bne.n	80109ce <_vfiprintf_r+0x1ce>
 8010962:	9b03      	ldr	r3, [sp, #12]
 8010964:	1d1a      	adds	r2, r3, #4
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	9203      	str	r2, [sp, #12]
 801096a:	2b00      	cmp	r3, #0
 801096c:	bfb8      	it	lt
 801096e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010972:	3402      	adds	r4, #2
 8010974:	9305      	str	r3, [sp, #20]
 8010976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a5c <_vfiprintf_r+0x25c>
 801097a:	7821      	ldrb	r1, [r4, #0]
 801097c:	2203      	movs	r2, #3
 801097e:	4650      	mov	r0, sl
 8010980:	f7ef fcb6 	bl	80002f0 <memchr>
 8010984:	b140      	cbz	r0, 8010998 <_vfiprintf_r+0x198>
 8010986:	2340      	movs	r3, #64	; 0x40
 8010988:	eba0 000a 	sub.w	r0, r0, sl
 801098c:	fa03 f000 	lsl.w	r0, r3, r0
 8010990:	9b04      	ldr	r3, [sp, #16]
 8010992:	4303      	orrs	r3, r0
 8010994:	3401      	adds	r4, #1
 8010996:	9304      	str	r3, [sp, #16]
 8010998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801099c:	482c      	ldr	r0, [pc, #176]	; (8010a50 <_vfiprintf_r+0x250>)
 801099e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109a2:	2206      	movs	r2, #6
 80109a4:	f7ef fca4 	bl	80002f0 <memchr>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	d03f      	beq.n	8010a2c <_vfiprintf_r+0x22c>
 80109ac:	4b29      	ldr	r3, [pc, #164]	; (8010a54 <_vfiprintf_r+0x254>)
 80109ae:	bb1b      	cbnz	r3, 80109f8 <_vfiprintf_r+0x1f8>
 80109b0:	9b03      	ldr	r3, [sp, #12]
 80109b2:	3307      	adds	r3, #7
 80109b4:	f023 0307 	bic.w	r3, r3, #7
 80109b8:	3308      	adds	r3, #8
 80109ba:	9303      	str	r3, [sp, #12]
 80109bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109be:	443b      	add	r3, r7
 80109c0:	9309      	str	r3, [sp, #36]	; 0x24
 80109c2:	e767      	b.n	8010894 <_vfiprintf_r+0x94>
 80109c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80109c8:	460c      	mov	r4, r1
 80109ca:	2001      	movs	r0, #1
 80109cc:	e7a5      	b.n	801091a <_vfiprintf_r+0x11a>
 80109ce:	2300      	movs	r3, #0
 80109d0:	3401      	adds	r4, #1
 80109d2:	9305      	str	r3, [sp, #20]
 80109d4:	4619      	mov	r1, r3
 80109d6:	f04f 0c0a 	mov.w	ip, #10
 80109da:	4620      	mov	r0, r4
 80109dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109e0:	3a30      	subs	r2, #48	; 0x30
 80109e2:	2a09      	cmp	r2, #9
 80109e4:	d903      	bls.n	80109ee <_vfiprintf_r+0x1ee>
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d0c5      	beq.n	8010976 <_vfiprintf_r+0x176>
 80109ea:	9105      	str	r1, [sp, #20]
 80109ec:	e7c3      	b.n	8010976 <_vfiprintf_r+0x176>
 80109ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80109f2:	4604      	mov	r4, r0
 80109f4:	2301      	movs	r3, #1
 80109f6:	e7f0      	b.n	80109da <_vfiprintf_r+0x1da>
 80109f8:	ab03      	add	r3, sp, #12
 80109fa:	9300      	str	r3, [sp, #0]
 80109fc:	462a      	mov	r2, r5
 80109fe:	4b16      	ldr	r3, [pc, #88]	; (8010a58 <_vfiprintf_r+0x258>)
 8010a00:	a904      	add	r1, sp, #16
 8010a02:	4630      	mov	r0, r6
 8010a04:	f3af 8000 	nop.w
 8010a08:	4607      	mov	r7, r0
 8010a0a:	1c78      	adds	r0, r7, #1
 8010a0c:	d1d6      	bne.n	80109bc <_vfiprintf_r+0x1bc>
 8010a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a10:	07d9      	lsls	r1, r3, #31
 8010a12:	d405      	bmi.n	8010a20 <_vfiprintf_r+0x220>
 8010a14:	89ab      	ldrh	r3, [r5, #12]
 8010a16:	059a      	lsls	r2, r3, #22
 8010a18:	d402      	bmi.n	8010a20 <_vfiprintf_r+0x220>
 8010a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a1c:	f000 fc35 	bl	801128a <__retarget_lock_release_recursive>
 8010a20:	89ab      	ldrh	r3, [r5, #12]
 8010a22:	065b      	lsls	r3, r3, #25
 8010a24:	f53f af12 	bmi.w	801084c <_vfiprintf_r+0x4c>
 8010a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a2a:	e711      	b.n	8010850 <_vfiprintf_r+0x50>
 8010a2c:	ab03      	add	r3, sp, #12
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	462a      	mov	r2, r5
 8010a32:	4b09      	ldr	r3, [pc, #36]	; (8010a58 <_vfiprintf_r+0x258>)
 8010a34:	a904      	add	r1, sp, #16
 8010a36:	4630      	mov	r0, r6
 8010a38:	f000 f880 	bl	8010b3c <_printf_i>
 8010a3c:	e7e4      	b.n	8010a08 <_vfiprintf_r+0x208>
 8010a3e:	bf00      	nop
 8010a40:	08012264 	.word	0x08012264
 8010a44:	08012284 	.word	0x08012284
 8010a48:	08012244 	.word	0x08012244
 8010a4c:	08012211 	.word	0x08012211
 8010a50:	0801221b 	.word	0x0801221b
 8010a54:	00000000 	.word	0x00000000
 8010a58:	080107db 	.word	0x080107db
 8010a5c:	08012217 	.word	0x08012217

08010a60 <_printf_common>:
 8010a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a64:	4616      	mov	r6, r2
 8010a66:	4699      	mov	r9, r3
 8010a68:	688a      	ldr	r2, [r1, #8]
 8010a6a:	690b      	ldr	r3, [r1, #16]
 8010a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a70:	4293      	cmp	r3, r2
 8010a72:	bfb8      	it	lt
 8010a74:	4613      	movlt	r3, r2
 8010a76:	6033      	str	r3, [r6, #0]
 8010a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a7c:	4607      	mov	r7, r0
 8010a7e:	460c      	mov	r4, r1
 8010a80:	b10a      	cbz	r2, 8010a86 <_printf_common+0x26>
 8010a82:	3301      	adds	r3, #1
 8010a84:	6033      	str	r3, [r6, #0]
 8010a86:	6823      	ldr	r3, [r4, #0]
 8010a88:	0699      	lsls	r1, r3, #26
 8010a8a:	bf42      	ittt	mi
 8010a8c:	6833      	ldrmi	r3, [r6, #0]
 8010a8e:	3302      	addmi	r3, #2
 8010a90:	6033      	strmi	r3, [r6, #0]
 8010a92:	6825      	ldr	r5, [r4, #0]
 8010a94:	f015 0506 	ands.w	r5, r5, #6
 8010a98:	d106      	bne.n	8010aa8 <_printf_common+0x48>
 8010a9a:	f104 0a19 	add.w	sl, r4, #25
 8010a9e:	68e3      	ldr	r3, [r4, #12]
 8010aa0:	6832      	ldr	r2, [r6, #0]
 8010aa2:	1a9b      	subs	r3, r3, r2
 8010aa4:	42ab      	cmp	r3, r5
 8010aa6:	dc26      	bgt.n	8010af6 <_printf_common+0x96>
 8010aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010aac:	1e13      	subs	r3, r2, #0
 8010aae:	6822      	ldr	r2, [r4, #0]
 8010ab0:	bf18      	it	ne
 8010ab2:	2301      	movne	r3, #1
 8010ab4:	0692      	lsls	r2, r2, #26
 8010ab6:	d42b      	bmi.n	8010b10 <_printf_common+0xb0>
 8010ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010abc:	4649      	mov	r1, r9
 8010abe:	4638      	mov	r0, r7
 8010ac0:	47c0      	blx	r8
 8010ac2:	3001      	adds	r0, #1
 8010ac4:	d01e      	beq.n	8010b04 <_printf_common+0xa4>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	68e5      	ldr	r5, [r4, #12]
 8010aca:	6832      	ldr	r2, [r6, #0]
 8010acc:	f003 0306 	and.w	r3, r3, #6
 8010ad0:	2b04      	cmp	r3, #4
 8010ad2:	bf08      	it	eq
 8010ad4:	1aad      	subeq	r5, r5, r2
 8010ad6:	68a3      	ldr	r3, [r4, #8]
 8010ad8:	6922      	ldr	r2, [r4, #16]
 8010ada:	bf0c      	ite	eq
 8010adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ae0:	2500      	movne	r5, #0
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	bfc4      	itt	gt
 8010ae6:	1a9b      	subgt	r3, r3, r2
 8010ae8:	18ed      	addgt	r5, r5, r3
 8010aea:	2600      	movs	r6, #0
 8010aec:	341a      	adds	r4, #26
 8010aee:	42b5      	cmp	r5, r6
 8010af0:	d11a      	bne.n	8010b28 <_printf_common+0xc8>
 8010af2:	2000      	movs	r0, #0
 8010af4:	e008      	b.n	8010b08 <_printf_common+0xa8>
 8010af6:	2301      	movs	r3, #1
 8010af8:	4652      	mov	r2, sl
 8010afa:	4649      	mov	r1, r9
 8010afc:	4638      	mov	r0, r7
 8010afe:	47c0      	blx	r8
 8010b00:	3001      	adds	r0, #1
 8010b02:	d103      	bne.n	8010b0c <_printf_common+0xac>
 8010b04:	f04f 30ff 	mov.w	r0, #4294967295
 8010b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b0c:	3501      	adds	r5, #1
 8010b0e:	e7c6      	b.n	8010a9e <_printf_common+0x3e>
 8010b10:	18e1      	adds	r1, r4, r3
 8010b12:	1c5a      	adds	r2, r3, #1
 8010b14:	2030      	movs	r0, #48	; 0x30
 8010b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b1a:	4422      	add	r2, r4
 8010b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b24:	3302      	adds	r3, #2
 8010b26:	e7c7      	b.n	8010ab8 <_printf_common+0x58>
 8010b28:	2301      	movs	r3, #1
 8010b2a:	4622      	mov	r2, r4
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	4638      	mov	r0, r7
 8010b30:	47c0      	blx	r8
 8010b32:	3001      	adds	r0, #1
 8010b34:	d0e6      	beq.n	8010b04 <_printf_common+0xa4>
 8010b36:	3601      	adds	r6, #1
 8010b38:	e7d9      	b.n	8010aee <_printf_common+0x8e>
	...

08010b3c <_printf_i>:
 8010b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b40:	7e0f      	ldrb	r7, [r1, #24]
 8010b42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010b44:	2f78      	cmp	r7, #120	; 0x78
 8010b46:	4691      	mov	r9, r2
 8010b48:	4680      	mov	r8, r0
 8010b4a:	460c      	mov	r4, r1
 8010b4c:	469a      	mov	sl, r3
 8010b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010b52:	d807      	bhi.n	8010b64 <_printf_i+0x28>
 8010b54:	2f62      	cmp	r7, #98	; 0x62
 8010b56:	d80a      	bhi.n	8010b6e <_printf_i+0x32>
 8010b58:	2f00      	cmp	r7, #0
 8010b5a:	f000 80d8 	beq.w	8010d0e <_printf_i+0x1d2>
 8010b5e:	2f58      	cmp	r7, #88	; 0x58
 8010b60:	f000 80a3 	beq.w	8010caa <_printf_i+0x16e>
 8010b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b6c:	e03a      	b.n	8010be4 <_printf_i+0xa8>
 8010b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b72:	2b15      	cmp	r3, #21
 8010b74:	d8f6      	bhi.n	8010b64 <_printf_i+0x28>
 8010b76:	a101      	add	r1, pc, #4	; (adr r1, 8010b7c <_printf_i+0x40>)
 8010b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b7c:	08010bd5 	.word	0x08010bd5
 8010b80:	08010be9 	.word	0x08010be9
 8010b84:	08010b65 	.word	0x08010b65
 8010b88:	08010b65 	.word	0x08010b65
 8010b8c:	08010b65 	.word	0x08010b65
 8010b90:	08010b65 	.word	0x08010b65
 8010b94:	08010be9 	.word	0x08010be9
 8010b98:	08010b65 	.word	0x08010b65
 8010b9c:	08010b65 	.word	0x08010b65
 8010ba0:	08010b65 	.word	0x08010b65
 8010ba4:	08010b65 	.word	0x08010b65
 8010ba8:	08010cf5 	.word	0x08010cf5
 8010bac:	08010c19 	.word	0x08010c19
 8010bb0:	08010cd7 	.word	0x08010cd7
 8010bb4:	08010b65 	.word	0x08010b65
 8010bb8:	08010b65 	.word	0x08010b65
 8010bbc:	08010d17 	.word	0x08010d17
 8010bc0:	08010b65 	.word	0x08010b65
 8010bc4:	08010c19 	.word	0x08010c19
 8010bc8:	08010b65 	.word	0x08010b65
 8010bcc:	08010b65 	.word	0x08010b65
 8010bd0:	08010cdf 	.word	0x08010cdf
 8010bd4:	682b      	ldr	r3, [r5, #0]
 8010bd6:	1d1a      	adds	r2, r3, #4
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	602a      	str	r2, [r5, #0]
 8010bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010be4:	2301      	movs	r3, #1
 8010be6:	e0a3      	b.n	8010d30 <_printf_i+0x1f4>
 8010be8:	6820      	ldr	r0, [r4, #0]
 8010bea:	6829      	ldr	r1, [r5, #0]
 8010bec:	0606      	lsls	r6, r0, #24
 8010bee:	f101 0304 	add.w	r3, r1, #4
 8010bf2:	d50a      	bpl.n	8010c0a <_printf_i+0xce>
 8010bf4:	680e      	ldr	r6, [r1, #0]
 8010bf6:	602b      	str	r3, [r5, #0]
 8010bf8:	2e00      	cmp	r6, #0
 8010bfa:	da03      	bge.n	8010c04 <_printf_i+0xc8>
 8010bfc:	232d      	movs	r3, #45	; 0x2d
 8010bfe:	4276      	negs	r6, r6
 8010c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c04:	485e      	ldr	r0, [pc, #376]	; (8010d80 <_printf_i+0x244>)
 8010c06:	230a      	movs	r3, #10
 8010c08:	e019      	b.n	8010c3e <_printf_i+0x102>
 8010c0a:	680e      	ldr	r6, [r1, #0]
 8010c0c:	602b      	str	r3, [r5, #0]
 8010c0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010c12:	bf18      	it	ne
 8010c14:	b236      	sxthne	r6, r6
 8010c16:	e7ef      	b.n	8010bf8 <_printf_i+0xbc>
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	6820      	ldr	r0, [r4, #0]
 8010c1c:	1d19      	adds	r1, r3, #4
 8010c1e:	6029      	str	r1, [r5, #0]
 8010c20:	0601      	lsls	r1, r0, #24
 8010c22:	d501      	bpl.n	8010c28 <_printf_i+0xec>
 8010c24:	681e      	ldr	r6, [r3, #0]
 8010c26:	e002      	b.n	8010c2e <_printf_i+0xf2>
 8010c28:	0646      	lsls	r6, r0, #25
 8010c2a:	d5fb      	bpl.n	8010c24 <_printf_i+0xe8>
 8010c2c:	881e      	ldrh	r6, [r3, #0]
 8010c2e:	4854      	ldr	r0, [pc, #336]	; (8010d80 <_printf_i+0x244>)
 8010c30:	2f6f      	cmp	r7, #111	; 0x6f
 8010c32:	bf0c      	ite	eq
 8010c34:	2308      	moveq	r3, #8
 8010c36:	230a      	movne	r3, #10
 8010c38:	2100      	movs	r1, #0
 8010c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c3e:	6865      	ldr	r5, [r4, #4]
 8010c40:	60a5      	str	r5, [r4, #8]
 8010c42:	2d00      	cmp	r5, #0
 8010c44:	bfa2      	ittt	ge
 8010c46:	6821      	ldrge	r1, [r4, #0]
 8010c48:	f021 0104 	bicge.w	r1, r1, #4
 8010c4c:	6021      	strge	r1, [r4, #0]
 8010c4e:	b90e      	cbnz	r6, 8010c54 <_printf_i+0x118>
 8010c50:	2d00      	cmp	r5, #0
 8010c52:	d04d      	beq.n	8010cf0 <_printf_i+0x1b4>
 8010c54:	4615      	mov	r5, r2
 8010c56:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c5a:	fb03 6711 	mls	r7, r3, r1, r6
 8010c5e:	5dc7      	ldrb	r7, [r0, r7]
 8010c60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c64:	4637      	mov	r7, r6
 8010c66:	42bb      	cmp	r3, r7
 8010c68:	460e      	mov	r6, r1
 8010c6a:	d9f4      	bls.n	8010c56 <_printf_i+0x11a>
 8010c6c:	2b08      	cmp	r3, #8
 8010c6e:	d10b      	bne.n	8010c88 <_printf_i+0x14c>
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	07de      	lsls	r6, r3, #31
 8010c74:	d508      	bpl.n	8010c88 <_printf_i+0x14c>
 8010c76:	6923      	ldr	r3, [r4, #16]
 8010c78:	6861      	ldr	r1, [r4, #4]
 8010c7a:	4299      	cmp	r1, r3
 8010c7c:	bfde      	ittt	le
 8010c7e:	2330      	movle	r3, #48	; 0x30
 8010c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c88:	1b52      	subs	r2, r2, r5
 8010c8a:	6122      	str	r2, [r4, #16]
 8010c8c:	f8cd a000 	str.w	sl, [sp]
 8010c90:	464b      	mov	r3, r9
 8010c92:	aa03      	add	r2, sp, #12
 8010c94:	4621      	mov	r1, r4
 8010c96:	4640      	mov	r0, r8
 8010c98:	f7ff fee2 	bl	8010a60 <_printf_common>
 8010c9c:	3001      	adds	r0, #1
 8010c9e:	d14c      	bne.n	8010d3a <_printf_i+0x1fe>
 8010ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca4:	b004      	add	sp, #16
 8010ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010caa:	4835      	ldr	r0, [pc, #212]	; (8010d80 <_printf_i+0x244>)
 8010cac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010cb0:	6829      	ldr	r1, [r5, #0]
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8010cb8:	6029      	str	r1, [r5, #0]
 8010cba:	061d      	lsls	r5, r3, #24
 8010cbc:	d514      	bpl.n	8010ce8 <_printf_i+0x1ac>
 8010cbe:	07df      	lsls	r7, r3, #31
 8010cc0:	bf44      	itt	mi
 8010cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8010cc6:	6023      	strmi	r3, [r4, #0]
 8010cc8:	b91e      	cbnz	r6, 8010cd2 <_printf_i+0x196>
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	f023 0320 	bic.w	r3, r3, #32
 8010cd0:	6023      	str	r3, [r4, #0]
 8010cd2:	2310      	movs	r3, #16
 8010cd4:	e7b0      	b.n	8010c38 <_printf_i+0xfc>
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	f043 0320 	orr.w	r3, r3, #32
 8010cdc:	6023      	str	r3, [r4, #0]
 8010cde:	2378      	movs	r3, #120	; 0x78
 8010ce0:	4828      	ldr	r0, [pc, #160]	; (8010d84 <_printf_i+0x248>)
 8010ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ce6:	e7e3      	b.n	8010cb0 <_printf_i+0x174>
 8010ce8:	0659      	lsls	r1, r3, #25
 8010cea:	bf48      	it	mi
 8010cec:	b2b6      	uxthmi	r6, r6
 8010cee:	e7e6      	b.n	8010cbe <_printf_i+0x182>
 8010cf0:	4615      	mov	r5, r2
 8010cf2:	e7bb      	b.n	8010c6c <_printf_i+0x130>
 8010cf4:	682b      	ldr	r3, [r5, #0]
 8010cf6:	6826      	ldr	r6, [r4, #0]
 8010cf8:	6961      	ldr	r1, [r4, #20]
 8010cfa:	1d18      	adds	r0, r3, #4
 8010cfc:	6028      	str	r0, [r5, #0]
 8010cfe:	0635      	lsls	r5, r6, #24
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	d501      	bpl.n	8010d08 <_printf_i+0x1cc>
 8010d04:	6019      	str	r1, [r3, #0]
 8010d06:	e002      	b.n	8010d0e <_printf_i+0x1d2>
 8010d08:	0670      	lsls	r0, r6, #25
 8010d0a:	d5fb      	bpl.n	8010d04 <_printf_i+0x1c8>
 8010d0c:	8019      	strh	r1, [r3, #0]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	6123      	str	r3, [r4, #16]
 8010d12:	4615      	mov	r5, r2
 8010d14:	e7ba      	b.n	8010c8c <_printf_i+0x150>
 8010d16:	682b      	ldr	r3, [r5, #0]
 8010d18:	1d1a      	adds	r2, r3, #4
 8010d1a:	602a      	str	r2, [r5, #0]
 8010d1c:	681d      	ldr	r5, [r3, #0]
 8010d1e:	6862      	ldr	r2, [r4, #4]
 8010d20:	2100      	movs	r1, #0
 8010d22:	4628      	mov	r0, r5
 8010d24:	f7ef fae4 	bl	80002f0 <memchr>
 8010d28:	b108      	cbz	r0, 8010d2e <_printf_i+0x1f2>
 8010d2a:	1b40      	subs	r0, r0, r5
 8010d2c:	6060      	str	r0, [r4, #4]
 8010d2e:	6863      	ldr	r3, [r4, #4]
 8010d30:	6123      	str	r3, [r4, #16]
 8010d32:	2300      	movs	r3, #0
 8010d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d38:	e7a8      	b.n	8010c8c <_printf_i+0x150>
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	462a      	mov	r2, r5
 8010d3e:	4649      	mov	r1, r9
 8010d40:	4640      	mov	r0, r8
 8010d42:	47d0      	blx	sl
 8010d44:	3001      	adds	r0, #1
 8010d46:	d0ab      	beq.n	8010ca0 <_printf_i+0x164>
 8010d48:	6823      	ldr	r3, [r4, #0]
 8010d4a:	079b      	lsls	r3, r3, #30
 8010d4c:	d413      	bmi.n	8010d76 <_printf_i+0x23a>
 8010d4e:	68e0      	ldr	r0, [r4, #12]
 8010d50:	9b03      	ldr	r3, [sp, #12]
 8010d52:	4298      	cmp	r0, r3
 8010d54:	bfb8      	it	lt
 8010d56:	4618      	movlt	r0, r3
 8010d58:	e7a4      	b.n	8010ca4 <_printf_i+0x168>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	4632      	mov	r2, r6
 8010d5e:	4649      	mov	r1, r9
 8010d60:	4640      	mov	r0, r8
 8010d62:	47d0      	blx	sl
 8010d64:	3001      	adds	r0, #1
 8010d66:	d09b      	beq.n	8010ca0 <_printf_i+0x164>
 8010d68:	3501      	adds	r5, #1
 8010d6a:	68e3      	ldr	r3, [r4, #12]
 8010d6c:	9903      	ldr	r1, [sp, #12]
 8010d6e:	1a5b      	subs	r3, r3, r1
 8010d70:	42ab      	cmp	r3, r5
 8010d72:	dcf2      	bgt.n	8010d5a <_printf_i+0x21e>
 8010d74:	e7eb      	b.n	8010d4e <_printf_i+0x212>
 8010d76:	2500      	movs	r5, #0
 8010d78:	f104 0619 	add.w	r6, r4, #25
 8010d7c:	e7f5      	b.n	8010d6a <_printf_i+0x22e>
 8010d7e:	bf00      	nop
 8010d80:	08012222 	.word	0x08012222
 8010d84:	08012233 	.word	0x08012233

08010d88 <__swbuf_r>:
 8010d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8a:	460e      	mov	r6, r1
 8010d8c:	4614      	mov	r4, r2
 8010d8e:	4605      	mov	r5, r0
 8010d90:	b118      	cbz	r0, 8010d9a <__swbuf_r+0x12>
 8010d92:	6983      	ldr	r3, [r0, #24]
 8010d94:	b90b      	cbnz	r3, 8010d9a <__swbuf_r+0x12>
 8010d96:	f000 f9d9 	bl	801114c <__sinit>
 8010d9a:	4b21      	ldr	r3, [pc, #132]	; (8010e20 <__swbuf_r+0x98>)
 8010d9c:	429c      	cmp	r4, r3
 8010d9e:	d12b      	bne.n	8010df8 <__swbuf_r+0x70>
 8010da0:	686c      	ldr	r4, [r5, #4]
 8010da2:	69a3      	ldr	r3, [r4, #24]
 8010da4:	60a3      	str	r3, [r4, #8]
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	071a      	lsls	r2, r3, #28
 8010daa:	d52f      	bpl.n	8010e0c <__swbuf_r+0x84>
 8010dac:	6923      	ldr	r3, [r4, #16]
 8010dae:	b36b      	cbz	r3, 8010e0c <__swbuf_r+0x84>
 8010db0:	6923      	ldr	r3, [r4, #16]
 8010db2:	6820      	ldr	r0, [r4, #0]
 8010db4:	1ac0      	subs	r0, r0, r3
 8010db6:	6963      	ldr	r3, [r4, #20]
 8010db8:	b2f6      	uxtb	r6, r6
 8010dba:	4283      	cmp	r3, r0
 8010dbc:	4637      	mov	r7, r6
 8010dbe:	dc04      	bgt.n	8010dca <__swbuf_r+0x42>
 8010dc0:	4621      	mov	r1, r4
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f000 f92e 	bl	8011024 <_fflush_r>
 8010dc8:	bb30      	cbnz	r0, 8010e18 <__swbuf_r+0x90>
 8010dca:	68a3      	ldr	r3, [r4, #8]
 8010dcc:	3b01      	subs	r3, #1
 8010dce:	60a3      	str	r3, [r4, #8]
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	1c5a      	adds	r2, r3, #1
 8010dd4:	6022      	str	r2, [r4, #0]
 8010dd6:	701e      	strb	r6, [r3, #0]
 8010dd8:	6963      	ldr	r3, [r4, #20]
 8010dda:	3001      	adds	r0, #1
 8010ddc:	4283      	cmp	r3, r0
 8010dde:	d004      	beq.n	8010dea <__swbuf_r+0x62>
 8010de0:	89a3      	ldrh	r3, [r4, #12]
 8010de2:	07db      	lsls	r3, r3, #31
 8010de4:	d506      	bpl.n	8010df4 <__swbuf_r+0x6c>
 8010de6:	2e0a      	cmp	r6, #10
 8010de8:	d104      	bne.n	8010df4 <__swbuf_r+0x6c>
 8010dea:	4621      	mov	r1, r4
 8010dec:	4628      	mov	r0, r5
 8010dee:	f000 f919 	bl	8011024 <_fflush_r>
 8010df2:	b988      	cbnz	r0, 8010e18 <__swbuf_r+0x90>
 8010df4:	4638      	mov	r0, r7
 8010df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010df8:	4b0a      	ldr	r3, [pc, #40]	; (8010e24 <__swbuf_r+0x9c>)
 8010dfa:	429c      	cmp	r4, r3
 8010dfc:	d101      	bne.n	8010e02 <__swbuf_r+0x7a>
 8010dfe:	68ac      	ldr	r4, [r5, #8]
 8010e00:	e7cf      	b.n	8010da2 <__swbuf_r+0x1a>
 8010e02:	4b09      	ldr	r3, [pc, #36]	; (8010e28 <__swbuf_r+0xa0>)
 8010e04:	429c      	cmp	r4, r3
 8010e06:	bf08      	it	eq
 8010e08:	68ec      	ldreq	r4, [r5, #12]
 8010e0a:	e7ca      	b.n	8010da2 <__swbuf_r+0x1a>
 8010e0c:	4621      	mov	r1, r4
 8010e0e:	4628      	mov	r0, r5
 8010e10:	f000 f80c 	bl	8010e2c <__swsetup_r>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d0cb      	beq.n	8010db0 <__swbuf_r+0x28>
 8010e18:	f04f 37ff 	mov.w	r7, #4294967295
 8010e1c:	e7ea      	b.n	8010df4 <__swbuf_r+0x6c>
 8010e1e:	bf00      	nop
 8010e20:	08012264 	.word	0x08012264
 8010e24:	08012284 	.word	0x08012284
 8010e28:	08012244 	.word	0x08012244

08010e2c <__swsetup_r>:
 8010e2c:	4b32      	ldr	r3, [pc, #200]	; (8010ef8 <__swsetup_r+0xcc>)
 8010e2e:	b570      	push	{r4, r5, r6, lr}
 8010e30:	681d      	ldr	r5, [r3, #0]
 8010e32:	4606      	mov	r6, r0
 8010e34:	460c      	mov	r4, r1
 8010e36:	b125      	cbz	r5, 8010e42 <__swsetup_r+0x16>
 8010e38:	69ab      	ldr	r3, [r5, #24]
 8010e3a:	b913      	cbnz	r3, 8010e42 <__swsetup_r+0x16>
 8010e3c:	4628      	mov	r0, r5
 8010e3e:	f000 f985 	bl	801114c <__sinit>
 8010e42:	4b2e      	ldr	r3, [pc, #184]	; (8010efc <__swsetup_r+0xd0>)
 8010e44:	429c      	cmp	r4, r3
 8010e46:	d10f      	bne.n	8010e68 <__swsetup_r+0x3c>
 8010e48:	686c      	ldr	r4, [r5, #4]
 8010e4a:	89a3      	ldrh	r3, [r4, #12]
 8010e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e50:	0719      	lsls	r1, r3, #28
 8010e52:	d42c      	bmi.n	8010eae <__swsetup_r+0x82>
 8010e54:	06dd      	lsls	r5, r3, #27
 8010e56:	d411      	bmi.n	8010e7c <__swsetup_r+0x50>
 8010e58:	2309      	movs	r3, #9
 8010e5a:	6033      	str	r3, [r6, #0]
 8010e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010e60:	81a3      	strh	r3, [r4, #12]
 8010e62:	f04f 30ff 	mov.w	r0, #4294967295
 8010e66:	e03e      	b.n	8010ee6 <__swsetup_r+0xba>
 8010e68:	4b25      	ldr	r3, [pc, #148]	; (8010f00 <__swsetup_r+0xd4>)
 8010e6a:	429c      	cmp	r4, r3
 8010e6c:	d101      	bne.n	8010e72 <__swsetup_r+0x46>
 8010e6e:	68ac      	ldr	r4, [r5, #8]
 8010e70:	e7eb      	b.n	8010e4a <__swsetup_r+0x1e>
 8010e72:	4b24      	ldr	r3, [pc, #144]	; (8010f04 <__swsetup_r+0xd8>)
 8010e74:	429c      	cmp	r4, r3
 8010e76:	bf08      	it	eq
 8010e78:	68ec      	ldreq	r4, [r5, #12]
 8010e7a:	e7e6      	b.n	8010e4a <__swsetup_r+0x1e>
 8010e7c:	0758      	lsls	r0, r3, #29
 8010e7e:	d512      	bpl.n	8010ea6 <__swsetup_r+0x7a>
 8010e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e82:	b141      	cbz	r1, 8010e96 <__swsetup_r+0x6a>
 8010e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e88:	4299      	cmp	r1, r3
 8010e8a:	d002      	beq.n	8010e92 <__swsetup_r+0x66>
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	f7ff fc41 	bl	8010714 <_free_r>
 8010e92:	2300      	movs	r3, #0
 8010e94:	6363      	str	r3, [r4, #52]	; 0x34
 8010e96:	89a3      	ldrh	r3, [r4, #12]
 8010e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e9c:	81a3      	strh	r3, [r4, #12]
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	6063      	str	r3, [r4, #4]
 8010ea2:	6923      	ldr	r3, [r4, #16]
 8010ea4:	6023      	str	r3, [r4, #0]
 8010ea6:	89a3      	ldrh	r3, [r4, #12]
 8010ea8:	f043 0308 	orr.w	r3, r3, #8
 8010eac:	81a3      	strh	r3, [r4, #12]
 8010eae:	6923      	ldr	r3, [r4, #16]
 8010eb0:	b94b      	cbnz	r3, 8010ec6 <__swsetup_r+0x9a>
 8010eb2:	89a3      	ldrh	r3, [r4, #12]
 8010eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ebc:	d003      	beq.n	8010ec6 <__swsetup_r+0x9a>
 8010ebe:	4621      	mov	r1, r4
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f000 fa09 	bl	80112d8 <__smakebuf_r>
 8010ec6:	89a0      	ldrh	r0, [r4, #12]
 8010ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ecc:	f010 0301 	ands.w	r3, r0, #1
 8010ed0:	d00a      	beq.n	8010ee8 <__swsetup_r+0xbc>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	60a3      	str	r3, [r4, #8]
 8010ed6:	6963      	ldr	r3, [r4, #20]
 8010ed8:	425b      	negs	r3, r3
 8010eda:	61a3      	str	r3, [r4, #24]
 8010edc:	6923      	ldr	r3, [r4, #16]
 8010ede:	b943      	cbnz	r3, 8010ef2 <__swsetup_r+0xc6>
 8010ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ee4:	d1ba      	bne.n	8010e5c <__swsetup_r+0x30>
 8010ee6:	bd70      	pop	{r4, r5, r6, pc}
 8010ee8:	0781      	lsls	r1, r0, #30
 8010eea:	bf58      	it	pl
 8010eec:	6963      	ldrpl	r3, [r4, #20]
 8010eee:	60a3      	str	r3, [r4, #8]
 8010ef0:	e7f4      	b.n	8010edc <__swsetup_r+0xb0>
 8010ef2:	2000      	movs	r0, #0
 8010ef4:	e7f7      	b.n	8010ee6 <__swsetup_r+0xba>
 8010ef6:	bf00      	nop
 8010ef8:	240000f8 	.word	0x240000f8
 8010efc:	08012264 	.word	0x08012264
 8010f00:	08012284 	.word	0x08012284
 8010f04:	08012244 	.word	0x08012244

08010f08 <abort>:
 8010f08:	b508      	push	{r3, lr}
 8010f0a:	2006      	movs	r0, #6
 8010f0c:	f000 fa4c 	bl	80113a8 <raise>
 8010f10:	2001      	movs	r0, #1
 8010f12:	f7f2 fed3 	bl	8003cbc <_exit>
	...

08010f18 <__sflush_r>:
 8010f18:	898a      	ldrh	r2, [r1, #12]
 8010f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1e:	4605      	mov	r5, r0
 8010f20:	0710      	lsls	r0, r2, #28
 8010f22:	460c      	mov	r4, r1
 8010f24:	d458      	bmi.n	8010fd8 <__sflush_r+0xc0>
 8010f26:	684b      	ldr	r3, [r1, #4]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	dc05      	bgt.n	8010f38 <__sflush_r+0x20>
 8010f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	dc02      	bgt.n	8010f38 <__sflush_r+0x20>
 8010f32:	2000      	movs	r0, #0
 8010f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f3a:	2e00      	cmp	r6, #0
 8010f3c:	d0f9      	beq.n	8010f32 <__sflush_r+0x1a>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f44:	682f      	ldr	r7, [r5, #0]
 8010f46:	602b      	str	r3, [r5, #0]
 8010f48:	d032      	beq.n	8010fb0 <__sflush_r+0x98>
 8010f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f4c:	89a3      	ldrh	r3, [r4, #12]
 8010f4e:	075a      	lsls	r2, r3, #29
 8010f50:	d505      	bpl.n	8010f5e <__sflush_r+0x46>
 8010f52:	6863      	ldr	r3, [r4, #4]
 8010f54:	1ac0      	subs	r0, r0, r3
 8010f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f58:	b10b      	cbz	r3, 8010f5e <__sflush_r+0x46>
 8010f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f5c:	1ac0      	subs	r0, r0, r3
 8010f5e:	2300      	movs	r3, #0
 8010f60:	4602      	mov	r2, r0
 8010f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f64:	6a21      	ldr	r1, [r4, #32]
 8010f66:	4628      	mov	r0, r5
 8010f68:	47b0      	blx	r6
 8010f6a:	1c43      	adds	r3, r0, #1
 8010f6c:	89a3      	ldrh	r3, [r4, #12]
 8010f6e:	d106      	bne.n	8010f7e <__sflush_r+0x66>
 8010f70:	6829      	ldr	r1, [r5, #0]
 8010f72:	291d      	cmp	r1, #29
 8010f74:	d82c      	bhi.n	8010fd0 <__sflush_r+0xb8>
 8010f76:	4a2a      	ldr	r2, [pc, #168]	; (8011020 <__sflush_r+0x108>)
 8010f78:	40ca      	lsrs	r2, r1
 8010f7a:	07d6      	lsls	r6, r2, #31
 8010f7c:	d528      	bpl.n	8010fd0 <__sflush_r+0xb8>
 8010f7e:	2200      	movs	r2, #0
 8010f80:	6062      	str	r2, [r4, #4]
 8010f82:	04d9      	lsls	r1, r3, #19
 8010f84:	6922      	ldr	r2, [r4, #16]
 8010f86:	6022      	str	r2, [r4, #0]
 8010f88:	d504      	bpl.n	8010f94 <__sflush_r+0x7c>
 8010f8a:	1c42      	adds	r2, r0, #1
 8010f8c:	d101      	bne.n	8010f92 <__sflush_r+0x7a>
 8010f8e:	682b      	ldr	r3, [r5, #0]
 8010f90:	b903      	cbnz	r3, 8010f94 <__sflush_r+0x7c>
 8010f92:	6560      	str	r0, [r4, #84]	; 0x54
 8010f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f96:	602f      	str	r7, [r5, #0]
 8010f98:	2900      	cmp	r1, #0
 8010f9a:	d0ca      	beq.n	8010f32 <__sflush_r+0x1a>
 8010f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fa0:	4299      	cmp	r1, r3
 8010fa2:	d002      	beq.n	8010faa <__sflush_r+0x92>
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	f7ff fbb5 	bl	8010714 <_free_r>
 8010faa:	2000      	movs	r0, #0
 8010fac:	6360      	str	r0, [r4, #52]	; 0x34
 8010fae:	e7c1      	b.n	8010f34 <__sflush_r+0x1c>
 8010fb0:	6a21      	ldr	r1, [r4, #32]
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	47b0      	blx	r6
 8010fb8:	1c41      	adds	r1, r0, #1
 8010fba:	d1c7      	bne.n	8010f4c <__sflush_r+0x34>
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d0c4      	beq.n	8010f4c <__sflush_r+0x34>
 8010fc2:	2b1d      	cmp	r3, #29
 8010fc4:	d001      	beq.n	8010fca <__sflush_r+0xb2>
 8010fc6:	2b16      	cmp	r3, #22
 8010fc8:	d101      	bne.n	8010fce <__sflush_r+0xb6>
 8010fca:	602f      	str	r7, [r5, #0]
 8010fcc:	e7b1      	b.n	8010f32 <__sflush_r+0x1a>
 8010fce:	89a3      	ldrh	r3, [r4, #12]
 8010fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fd4:	81a3      	strh	r3, [r4, #12]
 8010fd6:	e7ad      	b.n	8010f34 <__sflush_r+0x1c>
 8010fd8:	690f      	ldr	r7, [r1, #16]
 8010fda:	2f00      	cmp	r7, #0
 8010fdc:	d0a9      	beq.n	8010f32 <__sflush_r+0x1a>
 8010fde:	0793      	lsls	r3, r2, #30
 8010fe0:	680e      	ldr	r6, [r1, #0]
 8010fe2:	bf08      	it	eq
 8010fe4:	694b      	ldreq	r3, [r1, #20]
 8010fe6:	600f      	str	r7, [r1, #0]
 8010fe8:	bf18      	it	ne
 8010fea:	2300      	movne	r3, #0
 8010fec:	eba6 0807 	sub.w	r8, r6, r7
 8010ff0:	608b      	str	r3, [r1, #8]
 8010ff2:	f1b8 0f00 	cmp.w	r8, #0
 8010ff6:	dd9c      	ble.n	8010f32 <__sflush_r+0x1a>
 8010ff8:	6a21      	ldr	r1, [r4, #32]
 8010ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ffc:	4643      	mov	r3, r8
 8010ffe:	463a      	mov	r2, r7
 8011000:	4628      	mov	r0, r5
 8011002:	47b0      	blx	r6
 8011004:	2800      	cmp	r0, #0
 8011006:	dc06      	bgt.n	8011016 <__sflush_r+0xfe>
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801100e:	81a3      	strh	r3, [r4, #12]
 8011010:	f04f 30ff 	mov.w	r0, #4294967295
 8011014:	e78e      	b.n	8010f34 <__sflush_r+0x1c>
 8011016:	4407      	add	r7, r0
 8011018:	eba8 0800 	sub.w	r8, r8, r0
 801101c:	e7e9      	b.n	8010ff2 <__sflush_r+0xda>
 801101e:	bf00      	nop
 8011020:	20400001 	.word	0x20400001

08011024 <_fflush_r>:
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	690b      	ldr	r3, [r1, #16]
 8011028:	4605      	mov	r5, r0
 801102a:	460c      	mov	r4, r1
 801102c:	b913      	cbnz	r3, 8011034 <_fflush_r+0x10>
 801102e:	2500      	movs	r5, #0
 8011030:	4628      	mov	r0, r5
 8011032:	bd38      	pop	{r3, r4, r5, pc}
 8011034:	b118      	cbz	r0, 801103e <_fflush_r+0x1a>
 8011036:	6983      	ldr	r3, [r0, #24]
 8011038:	b90b      	cbnz	r3, 801103e <_fflush_r+0x1a>
 801103a:	f000 f887 	bl	801114c <__sinit>
 801103e:	4b14      	ldr	r3, [pc, #80]	; (8011090 <_fflush_r+0x6c>)
 8011040:	429c      	cmp	r4, r3
 8011042:	d11b      	bne.n	801107c <_fflush_r+0x58>
 8011044:	686c      	ldr	r4, [r5, #4]
 8011046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d0ef      	beq.n	801102e <_fflush_r+0xa>
 801104e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011050:	07d0      	lsls	r0, r2, #31
 8011052:	d404      	bmi.n	801105e <_fflush_r+0x3a>
 8011054:	0599      	lsls	r1, r3, #22
 8011056:	d402      	bmi.n	801105e <_fflush_r+0x3a>
 8011058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801105a:	f000 f915 	bl	8011288 <__retarget_lock_acquire_recursive>
 801105e:	4628      	mov	r0, r5
 8011060:	4621      	mov	r1, r4
 8011062:	f7ff ff59 	bl	8010f18 <__sflush_r>
 8011066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011068:	07da      	lsls	r2, r3, #31
 801106a:	4605      	mov	r5, r0
 801106c:	d4e0      	bmi.n	8011030 <_fflush_r+0xc>
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	059b      	lsls	r3, r3, #22
 8011072:	d4dd      	bmi.n	8011030 <_fflush_r+0xc>
 8011074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011076:	f000 f908 	bl	801128a <__retarget_lock_release_recursive>
 801107a:	e7d9      	b.n	8011030 <_fflush_r+0xc>
 801107c:	4b05      	ldr	r3, [pc, #20]	; (8011094 <_fflush_r+0x70>)
 801107e:	429c      	cmp	r4, r3
 8011080:	d101      	bne.n	8011086 <_fflush_r+0x62>
 8011082:	68ac      	ldr	r4, [r5, #8]
 8011084:	e7df      	b.n	8011046 <_fflush_r+0x22>
 8011086:	4b04      	ldr	r3, [pc, #16]	; (8011098 <_fflush_r+0x74>)
 8011088:	429c      	cmp	r4, r3
 801108a:	bf08      	it	eq
 801108c:	68ec      	ldreq	r4, [r5, #12]
 801108e:	e7da      	b.n	8011046 <_fflush_r+0x22>
 8011090:	08012264 	.word	0x08012264
 8011094:	08012284 	.word	0x08012284
 8011098:	08012244 	.word	0x08012244

0801109c <std>:
 801109c:	2300      	movs	r3, #0
 801109e:	b510      	push	{r4, lr}
 80110a0:	4604      	mov	r4, r0
 80110a2:	e9c0 3300 	strd	r3, r3, [r0]
 80110a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80110aa:	6083      	str	r3, [r0, #8]
 80110ac:	8181      	strh	r1, [r0, #12]
 80110ae:	6643      	str	r3, [r0, #100]	; 0x64
 80110b0:	81c2      	strh	r2, [r0, #14]
 80110b2:	6183      	str	r3, [r0, #24]
 80110b4:	4619      	mov	r1, r3
 80110b6:	2208      	movs	r2, #8
 80110b8:	305c      	adds	r0, #92	; 0x5c
 80110ba:	f7fd fbcf 	bl	800e85c <memset>
 80110be:	4b05      	ldr	r3, [pc, #20]	; (80110d4 <std+0x38>)
 80110c0:	6263      	str	r3, [r4, #36]	; 0x24
 80110c2:	4b05      	ldr	r3, [pc, #20]	; (80110d8 <std+0x3c>)
 80110c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80110c6:	4b05      	ldr	r3, [pc, #20]	; (80110dc <std+0x40>)
 80110c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110ca:	4b05      	ldr	r3, [pc, #20]	; (80110e0 <std+0x44>)
 80110cc:	6224      	str	r4, [r4, #32]
 80110ce:	6323      	str	r3, [r4, #48]	; 0x30
 80110d0:	bd10      	pop	{r4, pc}
 80110d2:	bf00      	nop
 80110d4:	080113e1 	.word	0x080113e1
 80110d8:	08011403 	.word	0x08011403
 80110dc:	0801143b 	.word	0x0801143b
 80110e0:	0801145f 	.word	0x0801145f

080110e4 <_cleanup_r>:
 80110e4:	4901      	ldr	r1, [pc, #4]	; (80110ec <_cleanup_r+0x8>)
 80110e6:	f000 b8af 	b.w	8011248 <_fwalk_reent>
 80110ea:	bf00      	nop
 80110ec:	08011025 	.word	0x08011025

080110f0 <__sfmoreglue>:
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	2268      	movs	r2, #104	; 0x68
 80110f4:	1e4d      	subs	r5, r1, #1
 80110f6:	4355      	muls	r5, r2
 80110f8:	460e      	mov	r6, r1
 80110fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80110fe:	f7ff fa15 	bl	801052c <_malloc_r>
 8011102:	4604      	mov	r4, r0
 8011104:	b140      	cbz	r0, 8011118 <__sfmoreglue+0x28>
 8011106:	2100      	movs	r1, #0
 8011108:	e9c0 1600 	strd	r1, r6, [r0]
 801110c:	300c      	adds	r0, #12
 801110e:	60a0      	str	r0, [r4, #8]
 8011110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011114:	f7fd fba2 	bl	800e85c <memset>
 8011118:	4620      	mov	r0, r4
 801111a:	bd70      	pop	{r4, r5, r6, pc}

0801111c <__sfp_lock_acquire>:
 801111c:	4801      	ldr	r0, [pc, #4]	; (8011124 <__sfp_lock_acquire+0x8>)
 801111e:	f000 b8b3 	b.w	8011288 <__retarget_lock_acquire_recursive>
 8011122:	bf00      	nop
 8011124:	24000c7d 	.word	0x24000c7d

08011128 <__sfp_lock_release>:
 8011128:	4801      	ldr	r0, [pc, #4]	; (8011130 <__sfp_lock_release+0x8>)
 801112a:	f000 b8ae 	b.w	801128a <__retarget_lock_release_recursive>
 801112e:	bf00      	nop
 8011130:	24000c7d 	.word	0x24000c7d

08011134 <__sinit_lock_acquire>:
 8011134:	4801      	ldr	r0, [pc, #4]	; (801113c <__sinit_lock_acquire+0x8>)
 8011136:	f000 b8a7 	b.w	8011288 <__retarget_lock_acquire_recursive>
 801113a:	bf00      	nop
 801113c:	24000c7e 	.word	0x24000c7e

08011140 <__sinit_lock_release>:
 8011140:	4801      	ldr	r0, [pc, #4]	; (8011148 <__sinit_lock_release+0x8>)
 8011142:	f000 b8a2 	b.w	801128a <__retarget_lock_release_recursive>
 8011146:	bf00      	nop
 8011148:	24000c7e 	.word	0x24000c7e

0801114c <__sinit>:
 801114c:	b510      	push	{r4, lr}
 801114e:	4604      	mov	r4, r0
 8011150:	f7ff fff0 	bl	8011134 <__sinit_lock_acquire>
 8011154:	69a3      	ldr	r3, [r4, #24]
 8011156:	b11b      	cbz	r3, 8011160 <__sinit+0x14>
 8011158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801115c:	f7ff bff0 	b.w	8011140 <__sinit_lock_release>
 8011160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011164:	6523      	str	r3, [r4, #80]	; 0x50
 8011166:	4b13      	ldr	r3, [pc, #76]	; (80111b4 <__sinit+0x68>)
 8011168:	4a13      	ldr	r2, [pc, #76]	; (80111b8 <__sinit+0x6c>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	62a2      	str	r2, [r4, #40]	; 0x28
 801116e:	42a3      	cmp	r3, r4
 8011170:	bf04      	itt	eq
 8011172:	2301      	moveq	r3, #1
 8011174:	61a3      	streq	r3, [r4, #24]
 8011176:	4620      	mov	r0, r4
 8011178:	f000 f820 	bl	80111bc <__sfp>
 801117c:	6060      	str	r0, [r4, #4]
 801117e:	4620      	mov	r0, r4
 8011180:	f000 f81c 	bl	80111bc <__sfp>
 8011184:	60a0      	str	r0, [r4, #8]
 8011186:	4620      	mov	r0, r4
 8011188:	f000 f818 	bl	80111bc <__sfp>
 801118c:	2200      	movs	r2, #0
 801118e:	60e0      	str	r0, [r4, #12]
 8011190:	2104      	movs	r1, #4
 8011192:	6860      	ldr	r0, [r4, #4]
 8011194:	f7ff ff82 	bl	801109c <std>
 8011198:	68a0      	ldr	r0, [r4, #8]
 801119a:	2201      	movs	r2, #1
 801119c:	2109      	movs	r1, #9
 801119e:	f7ff ff7d 	bl	801109c <std>
 80111a2:	68e0      	ldr	r0, [r4, #12]
 80111a4:	2202      	movs	r2, #2
 80111a6:	2112      	movs	r1, #18
 80111a8:	f7ff ff78 	bl	801109c <std>
 80111ac:	2301      	movs	r3, #1
 80111ae:	61a3      	str	r3, [r4, #24]
 80111b0:	e7d2      	b.n	8011158 <__sinit+0xc>
 80111b2:	bf00      	nop
 80111b4:	08011e78 	.word	0x08011e78
 80111b8:	080110e5 	.word	0x080110e5

080111bc <__sfp>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	4607      	mov	r7, r0
 80111c0:	f7ff ffac 	bl	801111c <__sfp_lock_acquire>
 80111c4:	4b1e      	ldr	r3, [pc, #120]	; (8011240 <__sfp+0x84>)
 80111c6:	681e      	ldr	r6, [r3, #0]
 80111c8:	69b3      	ldr	r3, [r6, #24]
 80111ca:	b913      	cbnz	r3, 80111d2 <__sfp+0x16>
 80111cc:	4630      	mov	r0, r6
 80111ce:	f7ff ffbd 	bl	801114c <__sinit>
 80111d2:	3648      	adds	r6, #72	; 0x48
 80111d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80111d8:	3b01      	subs	r3, #1
 80111da:	d503      	bpl.n	80111e4 <__sfp+0x28>
 80111dc:	6833      	ldr	r3, [r6, #0]
 80111de:	b30b      	cbz	r3, 8011224 <__sfp+0x68>
 80111e0:	6836      	ldr	r6, [r6, #0]
 80111e2:	e7f7      	b.n	80111d4 <__sfp+0x18>
 80111e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80111e8:	b9d5      	cbnz	r5, 8011220 <__sfp+0x64>
 80111ea:	4b16      	ldr	r3, [pc, #88]	; (8011244 <__sfp+0x88>)
 80111ec:	60e3      	str	r3, [r4, #12]
 80111ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80111f2:	6665      	str	r5, [r4, #100]	; 0x64
 80111f4:	f000 f847 	bl	8011286 <__retarget_lock_init_recursive>
 80111f8:	f7ff ff96 	bl	8011128 <__sfp_lock_release>
 80111fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011204:	6025      	str	r5, [r4, #0]
 8011206:	61a5      	str	r5, [r4, #24]
 8011208:	2208      	movs	r2, #8
 801120a:	4629      	mov	r1, r5
 801120c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011210:	f7fd fb24 	bl	800e85c <memset>
 8011214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801121c:	4620      	mov	r0, r4
 801121e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011220:	3468      	adds	r4, #104	; 0x68
 8011222:	e7d9      	b.n	80111d8 <__sfp+0x1c>
 8011224:	2104      	movs	r1, #4
 8011226:	4638      	mov	r0, r7
 8011228:	f7ff ff62 	bl	80110f0 <__sfmoreglue>
 801122c:	4604      	mov	r4, r0
 801122e:	6030      	str	r0, [r6, #0]
 8011230:	2800      	cmp	r0, #0
 8011232:	d1d5      	bne.n	80111e0 <__sfp+0x24>
 8011234:	f7ff ff78 	bl	8011128 <__sfp_lock_release>
 8011238:	230c      	movs	r3, #12
 801123a:	603b      	str	r3, [r7, #0]
 801123c:	e7ee      	b.n	801121c <__sfp+0x60>
 801123e:	bf00      	nop
 8011240:	08011e78 	.word	0x08011e78
 8011244:	ffff0001 	.word	0xffff0001

08011248 <_fwalk_reent>:
 8011248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801124c:	4606      	mov	r6, r0
 801124e:	4688      	mov	r8, r1
 8011250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011254:	2700      	movs	r7, #0
 8011256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801125a:	f1b9 0901 	subs.w	r9, r9, #1
 801125e:	d505      	bpl.n	801126c <_fwalk_reent+0x24>
 8011260:	6824      	ldr	r4, [r4, #0]
 8011262:	2c00      	cmp	r4, #0
 8011264:	d1f7      	bne.n	8011256 <_fwalk_reent+0xe>
 8011266:	4638      	mov	r0, r7
 8011268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126c:	89ab      	ldrh	r3, [r5, #12]
 801126e:	2b01      	cmp	r3, #1
 8011270:	d907      	bls.n	8011282 <_fwalk_reent+0x3a>
 8011272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011276:	3301      	adds	r3, #1
 8011278:	d003      	beq.n	8011282 <_fwalk_reent+0x3a>
 801127a:	4629      	mov	r1, r5
 801127c:	4630      	mov	r0, r6
 801127e:	47c0      	blx	r8
 8011280:	4307      	orrs	r7, r0
 8011282:	3568      	adds	r5, #104	; 0x68
 8011284:	e7e9      	b.n	801125a <_fwalk_reent+0x12>

08011286 <__retarget_lock_init_recursive>:
 8011286:	4770      	bx	lr

08011288 <__retarget_lock_acquire_recursive>:
 8011288:	4770      	bx	lr

0801128a <__retarget_lock_release_recursive>:
 801128a:	4770      	bx	lr

0801128c <__swhatbuf_r>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	460e      	mov	r6, r1
 8011290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011294:	2900      	cmp	r1, #0
 8011296:	b096      	sub	sp, #88	; 0x58
 8011298:	4614      	mov	r4, r2
 801129a:	461d      	mov	r5, r3
 801129c:	da08      	bge.n	80112b0 <__swhatbuf_r+0x24>
 801129e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80112a2:	2200      	movs	r2, #0
 80112a4:	602a      	str	r2, [r5, #0]
 80112a6:	061a      	lsls	r2, r3, #24
 80112a8:	d410      	bmi.n	80112cc <__swhatbuf_r+0x40>
 80112aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112ae:	e00e      	b.n	80112ce <__swhatbuf_r+0x42>
 80112b0:	466a      	mov	r2, sp
 80112b2:	f000 f8fb 	bl	80114ac <_fstat_r>
 80112b6:	2800      	cmp	r0, #0
 80112b8:	dbf1      	blt.n	801129e <__swhatbuf_r+0x12>
 80112ba:	9a01      	ldr	r2, [sp, #4]
 80112bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80112c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80112c4:	425a      	negs	r2, r3
 80112c6:	415a      	adcs	r2, r3
 80112c8:	602a      	str	r2, [r5, #0]
 80112ca:	e7ee      	b.n	80112aa <__swhatbuf_r+0x1e>
 80112cc:	2340      	movs	r3, #64	; 0x40
 80112ce:	2000      	movs	r0, #0
 80112d0:	6023      	str	r3, [r4, #0]
 80112d2:	b016      	add	sp, #88	; 0x58
 80112d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080112d8 <__smakebuf_r>:
 80112d8:	898b      	ldrh	r3, [r1, #12]
 80112da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112dc:	079d      	lsls	r5, r3, #30
 80112de:	4606      	mov	r6, r0
 80112e0:	460c      	mov	r4, r1
 80112e2:	d507      	bpl.n	80112f4 <__smakebuf_r+0x1c>
 80112e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80112e8:	6023      	str	r3, [r4, #0]
 80112ea:	6123      	str	r3, [r4, #16]
 80112ec:	2301      	movs	r3, #1
 80112ee:	6163      	str	r3, [r4, #20]
 80112f0:	b002      	add	sp, #8
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
 80112f4:	ab01      	add	r3, sp, #4
 80112f6:	466a      	mov	r2, sp
 80112f8:	f7ff ffc8 	bl	801128c <__swhatbuf_r>
 80112fc:	9900      	ldr	r1, [sp, #0]
 80112fe:	4605      	mov	r5, r0
 8011300:	4630      	mov	r0, r6
 8011302:	f7ff f913 	bl	801052c <_malloc_r>
 8011306:	b948      	cbnz	r0, 801131c <__smakebuf_r+0x44>
 8011308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801130c:	059a      	lsls	r2, r3, #22
 801130e:	d4ef      	bmi.n	80112f0 <__smakebuf_r+0x18>
 8011310:	f023 0303 	bic.w	r3, r3, #3
 8011314:	f043 0302 	orr.w	r3, r3, #2
 8011318:	81a3      	strh	r3, [r4, #12]
 801131a:	e7e3      	b.n	80112e4 <__smakebuf_r+0xc>
 801131c:	4b0d      	ldr	r3, [pc, #52]	; (8011354 <__smakebuf_r+0x7c>)
 801131e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011320:	89a3      	ldrh	r3, [r4, #12]
 8011322:	6020      	str	r0, [r4, #0]
 8011324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011328:	81a3      	strh	r3, [r4, #12]
 801132a:	9b00      	ldr	r3, [sp, #0]
 801132c:	6163      	str	r3, [r4, #20]
 801132e:	9b01      	ldr	r3, [sp, #4]
 8011330:	6120      	str	r0, [r4, #16]
 8011332:	b15b      	cbz	r3, 801134c <__smakebuf_r+0x74>
 8011334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011338:	4630      	mov	r0, r6
 801133a:	f000 f8c9 	bl	80114d0 <_isatty_r>
 801133e:	b128      	cbz	r0, 801134c <__smakebuf_r+0x74>
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	f023 0303 	bic.w	r3, r3, #3
 8011346:	f043 0301 	orr.w	r3, r3, #1
 801134a:	81a3      	strh	r3, [r4, #12]
 801134c:	89a0      	ldrh	r0, [r4, #12]
 801134e:	4305      	orrs	r5, r0
 8011350:	81a5      	strh	r5, [r4, #12]
 8011352:	e7cd      	b.n	80112f0 <__smakebuf_r+0x18>
 8011354:	080110e5 	.word	0x080110e5

08011358 <_raise_r>:
 8011358:	291f      	cmp	r1, #31
 801135a:	b538      	push	{r3, r4, r5, lr}
 801135c:	4604      	mov	r4, r0
 801135e:	460d      	mov	r5, r1
 8011360:	d904      	bls.n	801136c <_raise_r+0x14>
 8011362:	2316      	movs	r3, #22
 8011364:	6003      	str	r3, [r0, #0]
 8011366:	f04f 30ff 	mov.w	r0, #4294967295
 801136a:	bd38      	pop	{r3, r4, r5, pc}
 801136c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801136e:	b112      	cbz	r2, 8011376 <_raise_r+0x1e>
 8011370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011374:	b94b      	cbnz	r3, 801138a <_raise_r+0x32>
 8011376:	4620      	mov	r0, r4
 8011378:	f000 f830 	bl	80113dc <_getpid_r>
 801137c:	462a      	mov	r2, r5
 801137e:	4601      	mov	r1, r0
 8011380:	4620      	mov	r0, r4
 8011382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011386:	f000 b817 	b.w	80113b8 <_kill_r>
 801138a:	2b01      	cmp	r3, #1
 801138c:	d00a      	beq.n	80113a4 <_raise_r+0x4c>
 801138e:	1c59      	adds	r1, r3, #1
 8011390:	d103      	bne.n	801139a <_raise_r+0x42>
 8011392:	2316      	movs	r3, #22
 8011394:	6003      	str	r3, [r0, #0]
 8011396:	2001      	movs	r0, #1
 8011398:	e7e7      	b.n	801136a <_raise_r+0x12>
 801139a:	2400      	movs	r4, #0
 801139c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113a0:	4628      	mov	r0, r5
 80113a2:	4798      	blx	r3
 80113a4:	2000      	movs	r0, #0
 80113a6:	e7e0      	b.n	801136a <_raise_r+0x12>

080113a8 <raise>:
 80113a8:	4b02      	ldr	r3, [pc, #8]	; (80113b4 <raise+0xc>)
 80113aa:	4601      	mov	r1, r0
 80113ac:	6818      	ldr	r0, [r3, #0]
 80113ae:	f7ff bfd3 	b.w	8011358 <_raise_r>
 80113b2:	bf00      	nop
 80113b4:	240000f8 	.word	0x240000f8

080113b8 <_kill_r>:
 80113b8:	b538      	push	{r3, r4, r5, lr}
 80113ba:	4d07      	ldr	r5, [pc, #28]	; (80113d8 <_kill_r+0x20>)
 80113bc:	2300      	movs	r3, #0
 80113be:	4604      	mov	r4, r0
 80113c0:	4608      	mov	r0, r1
 80113c2:	4611      	mov	r1, r2
 80113c4:	602b      	str	r3, [r5, #0]
 80113c6:	f7f2 fc69 	bl	8003c9c <_kill>
 80113ca:	1c43      	adds	r3, r0, #1
 80113cc:	d102      	bne.n	80113d4 <_kill_r+0x1c>
 80113ce:	682b      	ldr	r3, [r5, #0]
 80113d0:	b103      	cbz	r3, 80113d4 <_kill_r+0x1c>
 80113d2:	6023      	str	r3, [r4, #0]
 80113d4:	bd38      	pop	{r3, r4, r5, pc}
 80113d6:	bf00      	nop
 80113d8:	24000c78 	.word	0x24000c78

080113dc <_getpid_r>:
 80113dc:	f7f2 bc56 	b.w	8003c8c <_getpid>

080113e0 <__sread>:
 80113e0:	b510      	push	{r4, lr}
 80113e2:	460c      	mov	r4, r1
 80113e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113e8:	f000 f894 	bl	8011514 <_read_r>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	bfab      	itete	ge
 80113f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80113f2:	89a3      	ldrhlt	r3, [r4, #12]
 80113f4:	181b      	addge	r3, r3, r0
 80113f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80113fa:	bfac      	ite	ge
 80113fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80113fe:	81a3      	strhlt	r3, [r4, #12]
 8011400:	bd10      	pop	{r4, pc}

08011402 <__swrite>:
 8011402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011406:	461f      	mov	r7, r3
 8011408:	898b      	ldrh	r3, [r1, #12]
 801140a:	05db      	lsls	r3, r3, #23
 801140c:	4605      	mov	r5, r0
 801140e:	460c      	mov	r4, r1
 8011410:	4616      	mov	r6, r2
 8011412:	d505      	bpl.n	8011420 <__swrite+0x1e>
 8011414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011418:	2302      	movs	r3, #2
 801141a:	2200      	movs	r2, #0
 801141c:	f000 f868 	bl	80114f0 <_lseek_r>
 8011420:	89a3      	ldrh	r3, [r4, #12]
 8011422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801142a:	81a3      	strh	r3, [r4, #12]
 801142c:	4632      	mov	r2, r6
 801142e:	463b      	mov	r3, r7
 8011430:	4628      	mov	r0, r5
 8011432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011436:	f000 b817 	b.w	8011468 <_write_r>

0801143a <__sseek>:
 801143a:	b510      	push	{r4, lr}
 801143c:	460c      	mov	r4, r1
 801143e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011442:	f000 f855 	bl	80114f0 <_lseek_r>
 8011446:	1c43      	adds	r3, r0, #1
 8011448:	89a3      	ldrh	r3, [r4, #12]
 801144a:	bf15      	itete	ne
 801144c:	6560      	strne	r0, [r4, #84]	; 0x54
 801144e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011456:	81a3      	strheq	r3, [r4, #12]
 8011458:	bf18      	it	ne
 801145a:	81a3      	strhne	r3, [r4, #12]
 801145c:	bd10      	pop	{r4, pc}

0801145e <__sclose>:
 801145e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011462:	f000 b813 	b.w	801148c <_close_r>
	...

08011468 <_write_r>:
 8011468:	b538      	push	{r3, r4, r5, lr}
 801146a:	4d07      	ldr	r5, [pc, #28]	; (8011488 <_write_r+0x20>)
 801146c:	4604      	mov	r4, r0
 801146e:	4608      	mov	r0, r1
 8011470:	4611      	mov	r1, r2
 8011472:	2200      	movs	r2, #0
 8011474:	602a      	str	r2, [r5, #0]
 8011476:	461a      	mov	r2, r3
 8011478:	f7f2 fc47 	bl	8003d0a <_write>
 801147c:	1c43      	adds	r3, r0, #1
 801147e:	d102      	bne.n	8011486 <_write_r+0x1e>
 8011480:	682b      	ldr	r3, [r5, #0]
 8011482:	b103      	cbz	r3, 8011486 <_write_r+0x1e>
 8011484:	6023      	str	r3, [r4, #0]
 8011486:	bd38      	pop	{r3, r4, r5, pc}
 8011488:	24000c78 	.word	0x24000c78

0801148c <_close_r>:
 801148c:	b538      	push	{r3, r4, r5, lr}
 801148e:	4d06      	ldr	r5, [pc, #24]	; (80114a8 <_close_r+0x1c>)
 8011490:	2300      	movs	r3, #0
 8011492:	4604      	mov	r4, r0
 8011494:	4608      	mov	r0, r1
 8011496:	602b      	str	r3, [r5, #0]
 8011498:	f7f2 fc53 	bl	8003d42 <_close>
 801149c:	1c43      	adds	r3, r0, #1
 801149e:	d102      	bne.n	80114a6 <_close_r+0x1a>
 80114a0:	682b      	ldr	r3, [r5, #0]
 80114a2:	b103      	cbz	r3, 80114a6 <_close_r+0x1a>
 80114a4:	6023      	str	r3, [r4, #0]
 80114a6:	bd38      	pop	{r3, r4, r5, pc}
 80114a8:	24000c78 	.word	0x24000c78

080114ac <_fstat_r>:
 80114ac:	b538      	push	{r3, r4, r5, lr}
 80114ae:	4d07      	ldr	r5, [pc, #28]	; (80114cc <_fstat_r+0x20>)
 80114b0:	2300      	movs	r3, #0
 80114b2:	4604      	mov	r4, r0
 80114b4:	4608      	mov	r0, r1
 80114b6:	4611      	mov	r1, r2
 80114b8:	602b      	str	r3, [r5, #0]
 80114ba:	f7f2 fc4e 	bl	8003d5a <_fstat>
 80114be:	1c43      	adds	r3, r0, #1
 80114c0:	d102      	bne.n	80114c8 <_fstat_r+0x1c>
 80114c2:	682b      	ldr	r3, [r5, #0]
 80114c4:	b103      	cbz	r3, 80114c8 <_fstat_r+0x1c>
 80114c6:	6023      	str	r3, [r4, #0]
 80114c8:	bd38      	pop	{r3, r4, r5, pc}
 80114ca:	bf00      	nop
 80114cc:	24000c78 	.word	0x24000c78

080114d0 <_isatty_r>:
 80114d0:	b538      	push	{r3, r4, r5, lr}
 80114d2:	4d06      	ldr	r5, [pc, #24]	; (80114ec <_isatty_r+0x1c>)
 80114d4:	2300      	movs	r3, #0
 80114d6:	4604      	mov	r4, r0
 80114d8:	4608      	mov	r0, r1
 80114da:	602b      	str	r3, [r5, #0]
 80114dc:	f7f2 fc4d 	bl	8003d7a <_isatty>
 80114e0:	1c43      	adds	r3, r0, #1
 80114e2:	d102      	bne.n	80114ea <_isatty_r+0x1a>
 80114e4:	682b      	ldr	r3, [r5, #0]
 80114e6:	b103      	cbz	r3, 80114ea <_isatty_r+0x1a>
 80114e8:	6023      	str	r3, [r4, #0]
 80114ea:	bd38      	pop	{r3, r4, r5, pc}
 80114ec:	24000c78 	.word	0x24000c78

080114f0 <_lseek_r>:
 80114f0:	b538      	push	{r3, r4, r5, lr}
 80114f2:	4d07      	ldr	r5, [pc, #28]	; (8011510 <_lseek_r+0x20>)
 80114f4:	4604      	mov	r4, r0
 80114f6:	4608      	mov	r0, r1
 80114f8:	4611      	mov	r1, r2
 80114fa:	2200      	movs	r2, #0
 80114fc:	602a      	str	r2, [r5, #0]
 80114fe:	461a      	mov	r2, r3
 8011500:	f7f2 fc46 	bl	8003d90 <_lseek>
 8011504:	1c43      	adds	r3, r0, #1
 8011506:	d102      	bne.n	801150e <_lseek_r+0x1e>
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	b103      	cbz	r3, 801150e <_lseek_r+0x1e>
 801150c:	6023      	str	r3, [r4, #0]
 801150e:	bd38      	pop	{r3, r4, r5, pc}
 8011510:	24000c78 	.word	0x24000c78

08011514 <_read_r>:
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	4d07      	ldr	r5, [pc, #28]	; (8011534 <_read_r+0x20>)
 8011518:	4604      	mov	r4, r0
 801151a:	4608      	mov	r0, r1
 801151c:	4611      	mov	r1, r2
 801151e:	2200      	movs	r2, #0
 8011520:	602a      	str	r2, [r5, #0]
 8011522:	461a      	mov	r2, r3
 8011524:	f7f2 fbd4 	bl	8003cd0 <_read>
 8011528:	1c43      	adds	r3, r0, #1
 801152a:	d102      	bne.n	8011532 <_read_r+0x1e>
 801152c:	682b      	ldr	r3, [r5, #0]
 801152e:	b103      	cbz	r3, 8011532 <_read_r+0x1e>
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	bd38      	pop	{r3, r4, r5, pc}
 8011534:	24000c78 	.word	0x24000c78

08011538 <checkint>:
 8011538:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801153c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011540:	429a      	cmp	r2, r3
 8011542:	b570      	push	{r4, r5, r6, lr}
 8011544:	dd2a      	ble.n	801159c <checkint+0x64>
 8011546:	f240 4333 	movw	r3, #1075	; 0x433
 801154a:	429a      	cmp	r2, r3
 801154c:	dc24      	bgt.n	8011598 <checkint+0x60>
 801154e:	1a9b      	subs	r3, r3, r2
 8011550:	f1a3 0620 	sub.w	r6, r3, #32
 8011554:	f04f 32ff 	mov.w	r2, #4294967295
 8011558:	fa02 f403 	lsl.w	r4, r2, r3
 801155c:	fa02 f606 	lsl.w	r6, r2, r6
 8011560:	f1c3 0520 	rsb	r5, r3, #32
 8011564:	fa22 f505 	lsr.w	r5, r2, r5
 8011568:	4334      	orrs	r4, r6
 801156a:	432c      	orrs	r4, r5
 801156c:	409a      	lsls	r2, r3
 801156e:	ea20 0202 	bic.w	r2, r0, r2
 8011572:	ea21 0404 	bic.w	r4, r1, r4
 8011576:	4322      	orrs	r2, r4
 8011578:	f1a3 0420 	sub.w	r4, r3, #32
 801157c:	f1c3 0220 	rsb	r2, r3, #32
 8011580:	d10c      	bne.n	801159c <checkint+0x64>
 8011582:	40d8      	lsrs	r0, r3
 8011584:	fa01 f302 	lsl.w	r3, r1, r2
 8011588:	4318      	orrs	r0, r3
 801158a:	40e1      	lsrs	r1, r4
 801158c:	4308      	orrs	r0, r1
 801158e:	f000 0001 	and.w	r0, r0, #1
 8011592:	f1d0 0002 	rsbs	r0, r0, #2
 8011596:	bd70      	pop	{r4, r5, r6, pc}
 8011598:	2002      	movs	r0, #2
 801159a:	e7fc      	b.n	8011596 <checkint+0x5e>
 801159c:	2000      	movs	r0, #0
 801159e:	e7fa      	b.n	8011596 <checkint+0x5e>

080115a0 <pow>:
 80115a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115a4:	ee10 4a90 	vmov	r4, s1
 80115a8:	ed2d 8b0a 	vpush	{d8-d12}
 80115ac:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80115b0:	ee11 7a90 	vmov	r7, s3
 80115b4:	f10a 32ff 	add.w	r2, sl, #4294967295
 80115b8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80115bc:	429a      	cmp	r2, r3
 80115be:	ee10 6a10 	vmov	r6, s0
 80115c2:	ee11 0a10 	vmov	r0, s2
 80115c6:	b086      	sub	sp, #24
 80115c8:	46d4      	mov	ip, sl
 80115ca:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80115ce:	d806      	bhi.n	80115de <pow+0x3e>
 80115d0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80115d4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80115d8:	2b7f      	cmp	r3, #127	; 0x7f
 80115da:	f240 8156 	bls.w	801188a <pow+0x2ea>
 80115de:	1802      	adds	r2, r0, r0
 80115e0:	eb47 0107 	adc.w	r1, r7, r7
 80115e4:	f06f 0e01 	mvn.w	lr, #1
 80115e8:	f112 39ff 	adds.w	r9, r2, #4294967295
 80115ec:	f141 38ff 	adc.w	r8, r1, #4294967295
 80115f0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80115f4:	45ce      	cmp	lr, r9
 80115f6:	eb73 0808 	sbcs.w	r8, r3, r8
 80115fa:	d23f      	bcs.n	801167c <pow+0xdc>
 80115fc:	ea52 0301 	orrs.w	r3, r2, r1
 8011600:	f04f 0300 	mov.w	r3, #0
 8011604:	d10c      	bne.n	8011620 <pow+0x80>
 8011606:	19b6      	adds	r6, r6, r6
 8011608:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801160c:	4164      	adcs	r4, r4
 801160e:	42b3      	cmp	r3, r6
 8011610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011614:	41a3      	sbcs	r3, r4
 8011616:	f0c0 808c 	bcc.w	8011732 <pow+0x192>
 801161a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801161e:	e028      	b.n	8011672 <pow+0xd2>
 8011620:	4da3      	ldr	r5, [pc, #652]	; (80118b0 <pow+0x310>)
 8011622:	42ac      	cmp	r4, r5
 8011624:	bf08      	it	eq
 8011626:	429e      	cmpeq	r6, r3
 8011628:	d107      	bne.n	801163a <pow+0x9a>
 801162a:	1800      	adds	r0, r0, r0
 801162c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011630:	417f      	adcs	r7, r7
 8011632:	4283      	cmp	r3, r0
 8011634:	4b9f      	ldr	r3, [pc, #636]	; (80118b4 <pow+0x314>)
 8011636:	41bb      	sbcs	r3, r7
 8011638:	e7ed      	b.n	8011616 <pow+0x76>
 801163a:	19b6      	adds	r6, r6, r6
 801163c:	489e      	ldr	r0, [pc, #632]	; (80118b8 <pow+0x318>)
 801163e:	4164      	adcs	r4, r4
 8011640:	42b3      	cmp	r3, r6
 8011642:	eb70 0504 	sbcs.w	r5, r0, r4
 8011646:	d374      	bcc.n	8011732 <pow+0x192>
 8011648:	4281      	cmp	r1, r0
 801164a:	bf08      	it	eq
 801164c:	429a      	cmpeq	r2, r3
 801164e:	d170      	bne.n	8011732 <pow+0x192>
 8011650:	4a9a      	ldr	r2, [pc, #616]	; (80118bc <pow+0x31c>)
 8011652:	4294      	cmp	r4, r2
 8011654:	bf08      	it	eq
 8011656:	429e      	cmpeq	r6, r3
 8011658:	d0df      	beq.n	801161a <pow+0x7a>
 801165a:	4294      	cmp	r4, r2
 801165c:	ea6f 0707 	mvn.w	r7, r7
 8011660:	bf34      	ite	cc
 8011662:	2400      	movcc	r4, #0
 8011664:	2401      	movcs	r4, #1
 8011666:	0fff      	lsrs	r7, r7, #31
 8011668:	42bc      	cmp	r4, r7
 801166a:	f040 81d9 	bne.w	8011a20 <pow+0x480>
 801166e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011672:	b006      	add	sp, #24
 8011674:	ecbd 8b0a 	vpop	{d8-d12}
 8011678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801167c:	eb16 0806 	adds.w	r8, r6, r6
 8011680:	eb44 0904 	adc.w	r9, r4, r4
 8011684:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011688:	f169 0200 	sbc.w	r2, r9, #0
 801168c:	458e      	cmp	lr, r1
 801168e:	4193      	sbcs	r3, r2
 8011690:	d223      	bcs.n	80116da <pow+0x13a>
 8011692:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011696:	2c00      	cmp	r4, #0
 8011698:	da12      	bge.n	80116c0 <pow+0x120>
 801169a:	4639      	mov	r1, r7
 801169c:	f7ff ff4c 	bl	8011538 <checkint>
 80116a0:	2801      	cmp	r0, #1
 80116a2:	d10d      	bne.n	80116c0 <pow+0x120>
 80116a4:	eeb1 0b40 	vneg.f64	d0, d0
 80116a8:	ea58 0309 	orrs.w	r3, r8, r9
 80116ac:	d10a      	bne.n	80116c4 <pow+0x124>
 80116ae:	2f00      	cmp	r7, #0
 80116b0:	dadf      	bge.n	8011672 <pow+0xd2>
 80116b2:	b006      	add	sp, #24
 80116b4:	ecbd 8b0a 	vpop	{d8-d12}
 80116b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116bc:	f000 bb50 	b.w	8011d60 <__math_divzero>
 80116c0:	2000      	movs	r0, #0
 80116c2:	e7f1      	b.n	80116a8 <pow+0x108>
 80116c4:	2f00      	cmp	r7, #0
 80116c6:	dad4      	bge.n	8011672 <pow+0xd2>
 80116c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80116cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80116d0:	ed8d 7b00 	vstr	d7, [sp]
 80116d4:	ed9d 0b00 	vldr	d0, [sp]
 80116d8:	e7cb      	b.n	8011672 <pow+0xd2>
 80116da:	2c00      	cmp	r4, #0
 80116dc:	da2c      	bge.n	8011738 <pow+0x198>
 80116de:	4639      	mov	r1, r7
 80116e0:	f7ff ff2a 	bl	8011538 <checkint>
 80116e4:	b930      	cbnz	r0, 80116f4 <pow+0x154>
 80116e6:	b006      	add	sp, #24
 80116e8:	ecbd 8b0a 	vpop	{d8-d12}
 80116ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116f0:	f000 bb4e 	b.w	8011d90 <__math_invalid>
 80116f4:	2801      	cmp	r0, #1
 80116f6:	bf14      	ite	ne
 80116f8:	2000      	movne	r0, #0
 80116fa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80116fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011702:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011706:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801170a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801170e:	2b7f      	cmp	r3, #127	; 0x7f
 8011710:	d92d      	bls.n	801176e <pow+0x1ce>
 8011712:	4b67      	ldr	r3, [pc, #412]	; (80118b0 <pow+0x310>)
 8011714:	2000      	movs	r0, #0
 8011716:	429c      	cmp	r4, r3
 8011718:	bf08      	it	eq
 801171a:	4286      	cmpeq	r6, r0
 801171c:	f43f af7d 	beq.w	801161a <pow+0x7a>
 8011720:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011724:	428a      	cmp	r2, r1
 8011726:	d80c      	bhi.n	8011742 <pow+0x1a2>
 8011728:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801172c:	42b0      	cmp	r0, r6
 801172e:	41a3      	sbcs	r3, r4
 8011730:	d204      	bcs.n	801173c <pow+0x19c>
 8011732:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011736:	e79c      	b.n	8011672 <pow+0xd2>
 8011738:	2000      	movs	r0, #0
 801173a:	e7e4      	b.n	8011706 <pow+0x166>
 801173c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011740:	e797      	b.n	8011672 <pow+0xd2>
 8011742:	2e01      	cmp	r6, #1
 8011744:	eb74 0303 	sbcs.w	r3, r4, r3
 8011748:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801174c:	bf34      	ite	cc
 801174e:	2301      	movcc	r3, #1
 8011750:	2300      	movcs	r3, #0
 8011752:	4295      	cmp	r5, r2
 8011754:	bf8c      	ite	hi
 8011756:	2500      	movhi	r5, #0
 8011758:	2501      	movls	r5, #1
 801175a:	42ab      	cmp	r3, r5
 801175c:	f000 809d 	beq.w	801189a <pow+0x2fa>
 8011760:	b006      	add	sp, #24
 8011762:	ecbd 8b0a 	vpop	{d8-d12}
 8011766:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801176a:	f000 baf1 	b.w	8011d50 <__math_oflow>
 801176e:	f1bc 0f00 	cmp.w	ip, #0
 8011772:	d10b      	bne.n	801178c <pow+0x1ec>
 8011774:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80118a8 <pow+0x308>
 8011778:	ee20 7b07 	vmul.f64	d7, d0, d7
 801177c:	ec53 2b17 	vmov	r2, r3, d7
 8011780:	ee17 6a10 	vmov	r6, s14
 8011784:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011788:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801178c:	4b4c      	ldr	r3, [pc, #304]	; (80118c0 <pow+0x320>)
 801178e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011792:	4423      	add	r3, r4
 8011794:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011798:	1519      	asrs	r1, r3, #20
 801179a:	0d1b      	lsrs	r3, r3, #20
 801179c:	051b      	lsls	r3, r3, #20
 801179e:	eba4 0903 	sub.w	r9, r4, r3
 80117a2:	4b48      	ldr	r3, [pc, #288]	; (80118c4 <pow+0x324>)
 80117a4:	ee04 1a10 	vmov	s8, r1
 80117a8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80117ac:	f1b6 0800 	subs.w	r8, r6, #0
 80117b0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80117b4:	ec49 8b15 	vmov	d5, r8, r9
 80117b8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80117bc:	eea5 6b07 	vfma.f64	d6, d5, d7
 80117c0:	ed93 7b00 	vldr	d7, [r3]
 80117c4:	ed93 5b02 	vldr	d5, [r3, #8]
 80117c8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80117cc:	eea4 2b07 	vfma.f64	d2, d4, d7
 80117d0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80117d4:	ee36 ab02 	vadd.f64	d10, d6, d2
 80117d8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80117dc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80117e0:	ed93 5b04 	vldr	d5, [r3, #16]
 80117e4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80117e8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80117ec:	ee26 5b05 	vmul.f64	d5, d6, d5
 80117f0:	ed93 4b08 	vldr	d4, [r3, #32]
 80117f4:	ee26 0b05 	vmul.f64	d0, d6, d5
 80117f8:	eeb0 9b40 	vmov.f64	d9, d0
 80117fc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011800:	ed93 5b06 	vldr	d5, [r3, #24]
 8011804:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011808:	ee26 bb00 	vmul.f64	d11, d6, d0
 801180c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011810:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011814:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011818:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801181c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011820:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011824:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011828:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801182c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011830:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011834:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011838:	eea0 4b03 	vfma.f64	d4, d0, d3
 801183c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011840:	eeab ab05 	vfma.f64	d10, d11, d5
 8011844:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011848:	ee21 7b06 	vmul.f64	d7, d1, d6
 801184c:	ee17 3a90 	vmov	r3, s15
 8011850:	eeb0 5b47 	vmov.f64	d5, d7
 8011854:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011858:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801185c:	18b2      	adds	r2, r6, r2
 801185e:	2a3e      	cmp	r2, #62	; 0x3e
 8011860:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011864:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011868:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801186c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011870:	d92b      	bls.n	80118ca <pow+0x32a>
 8011872:	2a00      	cmp	r2, #0
 8011874:	da0b      	bge.n	801188e <pow+0x2ee>
 8011876:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801187a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801187e:	2800      	cmp	r0, #0
 8011880:	f43f aef7 	beq.w	8011672 <pow+0xd2>
 8011884:	eeb1 0b40 	vneg.f64	d0, d0
 8011888:	e6f3      	b.n	8011672 <pow+0xd2>
 801188a:	2000      	movs	r0, #0
 801188c:	e77e      	b.n	801178c <pow+0x1ec>
 801188e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011892:	d919      	bls.n	80118c8 <pow+0x328>
 8011894:	2b00      	cmp	r3, #0
 8011896:	f6bf af63 	bge.w	8011760 <pow+0x1c0>
 801189a:	b006      	add	sp, #24
 801189c:	ecbd 8b0a 	vpop	{d8-d12}
 80118a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118a4:	f000 ba4c 	b.w	8011d40 <__math_uflow>
 80118a8:	00000000 	.word	0x00000000
 80118ac:	43300000 	.word	0x43300000
 80118b0:	3ff00000 	.word	0x3ff00000
 80118b4:	fff00000 	.word	0xfff00000
 80118b8:	ffe00000 	.word	0xffe00000
 80118bc:	7fe00000 	.word	0x7fe00000
 80118c0:	c0196aab 	.word	0xc0196aab
 80118c4:	080122a8 	.word	0x080122a8
 80118c8:	2600      	movs	r6, #0
 80118ca:	495d      	ldr	r1, [pc, #372]	; (8011a40 <pow+0x4a0>)
 80118cc:	ed91 4b02 	vldr	d4, [r1, #8]
 80118d0:	ed91 3b00 	vldr	d3, [r1]
 80118d4:	eeb0 6b44 	vmov.f64	d6, d4
 80118d8:	eea7 6b03 	vfma.f64	d6, d7, d3
 80118dc:	ee16 5a10 	vmov	r5, s12
 80118e0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80118e4:	ed91 4b04 	vldr	d4, [r1, #16]
 80118e8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80118ec:	eea6 7b04 	vfma.f64	d7, d6, d4
 80118f0:	eeb0 0b47 	vmov.f64	d0, d7
 80118f4:	ed91 7b06 	vldr	d7, [r1, #24]
 80118f8:	18dc      	adds	r4, r3, r3
 80118fa:	f104 030f 	add.w	r3, r4, #15
 80118fe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011902:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011906:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801190a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801190e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011912:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011916:	ed91 5b08 	vldr	d5, [r1, #32]
 801191a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801191e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011922:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011926:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801192a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801192e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011932:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011936:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801193a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801193e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011942:	1940      	adds	r0, r0, r5
 8011944:	2700      	movs	r7, #0
 8011946:	eb17 020c 	adds.w	r2, r7, ip
 801194a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801194e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011952:	2e00      	cmp	r6, #0
 8011954:	d15f      	bne.n	8011a16 <pow+0x476>
 8011956:	42bd      	cmp	r5, r7
 8011958:	db13      	blt.n	8011982 <pow+0x3e2>
 801195a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801195e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011962:	4610      	mov	r0, r2
 8011964:	ec41 0b10 	vmov	d0, r0, r1
 8011968:	eea7 0b00 	vfma.f64	d0, d7, d0
 801196c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011a28 <pow+0x488>
 8011970:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011974:	b006      	add	sp, #24
 8011976:	ecbd 8b0a 	vpop	{d8-d12}
 801197a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801197e:	f000 ba1f 	b.w	8011dc0 <__math_check_oflow>
 8011982:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011986:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801198a:	4610      	mov	r0, r2
 801198c:	ec41 0b15 	vmov	d5, r0, r1
 8011990:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011994:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011998:	ee35 7b06 	vadd.f64	d7, d5, d6
 801199c:	eeb0 3bc7 	vabs.f64	d3, d7
 80119a0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80119a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011a30 <pow+0x490>
 80119ac:	d52a      	bpl.n	8011a04 <pow+0x464>
 80119ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80119b2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80119b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ba:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80119be:	ee35 6b06 	vadd.f64	d6, d5, d6
 80119c2:	bf48      	it	mi
 80119c4:	eeb0 4b43 	vmovmi.f64	d4, d3
 80119c8:	ee37 3b04 	vadd.f64	d3, d7, d4
 80119cc:	ee34 5b43 	vsub.f64	d5, d4, d3
 80119d0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80119d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80119d8:	ee37 7b03 	vadd.f64	d7, d7, d3
 80119dc:	ee37 7b44 	vsub.f64	d7, d7, d4
 80119e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e8:	d104      	bne.n	80119f4 <pow+0x454>
 80119ea:	4632      	mov	r2, r6
 80119ec:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80119f0:	ec43 2b17 	vmov	d7, r2, r3
 80119f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80119fc:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011a00:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011a04:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011a08:	b006      	add	sp, #24
 8011a0a:	ecbd 8b0a 	vpop	{d8-d12}
 8011a0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a12:	f000 b9cc 	b.w	8011dae <__math_check_uflow>
 8011a16:	ec43 2b10 	vmov	d0, r2, r3
 8011a1a:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011a1e:	e628      	b.n	8011672 <pow+0xd2>
 8011a20:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011a38 <pow+0x498>
 8011a24:	e625      	b.n	8011672 <pow+0xd2>
 8011a26:	bf00      	nop
 8011a28:	00000000 	.word	0x00000000
 8011a2c:	7f000000 	.word	0x7f000000
 8011a30:	00000000 	.word	0x00000000
 8011a34:	00100000 	.word	0x00100000
	...
 8011a40:	080132f0 	.word	0x080132f0

08011a44 <asin>:
 8011a44:	b508      	push	{r3, lr}
 8011a46:	ed2d 8b04 	vpush	{d8-d9}
 8011a4a:	eeb0 8b40 	vmov.f64	d8, d0
 8011a4e:	f000 f847 	bl	8011ae0 <__ieee754_asin>
 8011a52:	eeb4 8b48 	vcmp.f64	d8, d8
 8011a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5a:	eeb0 9b40 	vmov.f64	d9, d0
 8011a5e:	d615      	bvs.n	8011a8c <asin+0x48>
 8011a60:	eeb0 0b48 	vmov.f64	d0, d8
 8011a64:	f000 f9c0 	bl	8011de8 <fabs>
 8011a68:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011a6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a74:	dd0a      	ble.n	8011a8c <asin+0x48>
 8011a76:	f7fc fec7 	bl	800e808 <__errno>
 8011a7a:	ecbd 8b04 	vpop	{d8-d9}
 8011a7e:	2321      	movs	r3, #33	; 0x21
 8011a80:	6003      	str	r3, [r0, #0]
 8011a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011a86:	4804      	ldr	r0, [pc, #16]	; (8011a98 <asin+0x54>)
 8011a88:	f7fe bdc6 	b.w	8010618 <nan>
 8011a8c:	eeb0 0b49 	vmov.f64	d0, d9
 8011a90:	ecbd 8b04 	vpop	{d8-d9}
 8011a94:	bd08      	pop	{r3, pc}
 8011a96:	bf00      	nop
 8011a98:	0801210f 	.word	0x0801210f
 8011a9c:	00000000 	.word	0x00000000

08011aa0 <sqrt>:
 8011aa0:	b508      	push	{r3, lr}
 8011aa2:	ed2d 8b04 	vpush	{d8-d9}
 8011aa6:	eeb0 8b40 	vmov.f64	d8, d0
 8011aaa:	f000 f927 	bl	8011cfc <__ieee754_sqrt>
 8011aae:	eeb4 8b48 	vcmp.f64	d8, d8
 8011ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab6:	d60c      	bvs.n	8011ad2 <sqrt+0x32>
 8011ab8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011ad8 <sqrt+0x38>
 8011abc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac4:	d505      	bpl.n	8011ad2 <sqrt+0x32>
 8011ac6:	f7fc fe9f 	bl	800e808 <__errno>
 8011aca:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011ace:	2321      	movs	r3, #33	; 0x21
 8011ad0:	6003      	str	r3, [r0, #0]
 8011ad2:	ecbd 8b04 	vpop	{d8-d9}
 8011ad6:	bd08      	pop	{r3, pc}
	...

08011ae0 <__ieee754_asin>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	ee10 5a90 	vmov	r5, s1
 8011ae6:	4b82      	ldr	r3, [pc, #520]	; (8011cf0 <__ieee754_asin+0x210>)
 8011ae8:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011aec:	429c      	cmp	r4, r3
 8011aee:	ed2d 8b06 	vpush	{d8-d10}
 8011af2:	dd19      	ble.n	8011b28 <__ieee754_asin+0x48>
 8011af4:	ee10 3a10 	vmov	r3, s0
 8011af8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011afc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b00:	4323      	orrs	r3, r4
 8011b02:	d10c      	bne.n	8011b1e <__ieee754_asin+0x3e>
 8011b04:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8011c78 <__ieee754_asin+0x198>
 8011b08:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8011c80 <__ieee754_asin+0x1a0>
 8011b0c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011b10:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011b14:	eeb0 0b47 	vmov.f64	d0, d7
 8011b18:	ecbd 8b06 	vpop	{d8-d10}
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011b22:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011b26:	e7f7      	b.n	8011b18 <__ieee754_asin+0x38>
 8011b28:	4b72      	ldr	r3, [pc, #456]	; (8011cf4 <__ieee754_asin+0x214>)
 8011b2a:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011b2e:	429c      	cmp	r4, r3
 8011b30:	dc0b      	bgt.n	8011b4a <__ieee754_asin+0x6a>
 8011b32:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011b36:	da52      	bge.n	8011bde <__ieee754_asin+0xfe>
 8011b38:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8011c88 <__ieee754_asin+0x1a8>
 8011b3c:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011b40:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b48:	dce6      	bgt.n	8011b18 <__ieee754_asin+0x38>
 8011b4a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011b4e:	f000 f94b 	bl	8011de8 <fabs>
 8011b52:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011c90 <__ieee754_asin+0x1b0>
 8011b56:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011b5a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011b5e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011c98 <__ieee754_asin+0x1b8>
 8011b62:	eeb0 0b48 	vmov.f64	d0, d8
 8011b66:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011b6a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011ca0 <__ieee754_asin+0x1c0>
 8011b6e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011b72:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011ca8 <__ieee754_asin+0x1c8>
 8011b76:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8011cb0 <__ieee754_asin+0x1d0>
 8011b7a:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011b7e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8011cb8 <__ieee754_asin+0x1d8>
 8011b82:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011b86:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011cc0 <__ieee754_asin+0x1e0>
 8011b8a:	eea7 ab08 	vfma.f64	d10, d7, d8
 8011b8e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8011b92:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011cc8 <__ieee754_asin+0x1e8>
 8011b96:	eea8 7b06 	vfma.f64	d7, d8, d6
 8011b9a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011cd0 <__ieee754_asin+0x1f0>
 8011b9e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011ba2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011cd8 <__ieee754_asin+0x1f8>
 8011ba6:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011baa:	eea7 9b08 	vfma.f64	d9, d7, d8
 8011bae:	f000 f8a5 	bl	8011cfc <__ieee754_sqrt>
 8011bb2:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8011bb6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8011bba:	4b4f      	ldr	r3, [pc, #316]	; (8011cf8 <__ieee754_asin+0x218>)
 8011bbc:	429c      	cmp	r4, r3
 8011bbe:	dd3d      	ble.n	8011c3c <__ieee754_asin+0x15c>
 8011bc0:	eea0 0b05 	vfma.f64	d0, d0, d5
 8011bc4:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011ce0 <__ieee754_asin+0x200>
 8011bc8:	eea0 7b04 	vfma.f64	d7, d0, d4
 8011bcc:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8011c80 <__ieee754_asin+0x1a0>
 8011bd0:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011bd4:	2d00      	cmp	r5, #0
 8011bd6:	bfd8      	it	le
 8011bd8:	eeb1 0b40 	vnegle.f64	d0, d0
 8011bdc:	e79c      	b.n	8011b18 <__ieee754_asin+0x38>
 8011bde:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011c90 <__ieee754_asin+0x1b0>
 8011be2:	ee20 7b00 	vmul.f64	d7, d0, d0
 8011be6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011c98 <__ieee754_asin+0x1b8>
 8011bea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011bee:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011ca0 <__ieee754_asin+0x1c0>
 8011bf2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011bf6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011ca8 <__ieee754_asin+0x1c8>
 8011bfa:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011bfe:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8011cb8 <__ieee754_asin+0x1d8>
 8011c02:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011c06:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8011cb0 <__ieee754_asin+0x1d0>
 8011c0a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8011cc0 <__ieee754_asin+0x1e0>
 8011c0e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011c12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c16:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011cc8 <__ieee754_asin+0x1e8>
 8011c1a:	eea7 5b04 	vfma.f64	d5, d7, d4
 8011c1e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8011cd0 <__ieee754_asin+0x1f0>
 8011c22:	eea5 4b07 	vfma.f64	d4, d5, d7
 8011c26:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011cd8 <__ieee754_asin+0x1f8>
 8011c2a:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011c2e:	eea5 9b07 	vfma.f64	d9, d5, d7
 8011c32:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8011c36:	eea0 0b07 	vfma.f64	d0, d0, d7
 8011c3a:	e76d      	b.n	8011b18 <__ieee754_asin+0x38>
 8011c3c:	ec53 2b10 	vmov	r2, r3, d0
 8011c40:	2200      	movs	r2, #0
 8011c42:	ec43 2b16 	vmov	d6, r2, r3
 8011c46:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011c4a:	eea6 8b46 	vfms.f64	d8, d6, d6
 8011c4e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8011c52:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8011c78 <__ieee754_asin+0x198>
 8011c56:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011c5a:	eea3 7b44 	vfms.f64	d7, d3, d4
 8011c5e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8011c62:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8011ce8 <__ieee754_asin+0x208>
 8011c66:	eeb0 0b45 	vmov.f64	d0, d5
 8011c6a:	eea6 0b44 	vfms.f64	d0, d6, d4
 8011c6e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8011c72:	ee35 0b40 	vsub.f64	d0, d5, d0
 8011c76:	e7ad      	b.n	8011bd4 <__ieee754_asin+0xf4>
 8011c78:	33145c07 	.word	0x33145c07
 8011c7c:	3c91a626 	.word	0x3c91a626
 8011c80:	54442d18 	.word	0x54442d18
 8011c84:	3ff921fb 	.word	0x3ff921fb
 8011c88:	8800759c 	.word	0x8800759c
 8011c8c:	7e37e43c 	.word	0x7e37e43c
 8011c90:	0dfdf709 	.word	0x0dfdf709
 8011c94:	3f023de1 	.word	0x3f023de1
 8011c98:	7501b288 	.word	0x7501b288
 8011c9c:	3f49efe0 	.word	0x3f49efe0
 8011ca0:	b5688f3b 	.word	0xb5688f3b
 8011ca4:	bfa48228 	.word	0xbfa48228
 8011ca8:	0e884455 	.word	0x0e884455
 8011cac:	3fc9c155 	.word	0x3fc9c155
 8011cb0:	55555555 	.word	0x55555555
 8011cb4:	3fc55555 	.word	0x3fc55555
 8011cb8:	03eb6f7d 	.word	0x03eb6f7d
 8011cbc:	bfd4d612 	.word	0xbfd4d612
 8011cc0:	b12e9282 	.word	0xb12e9282
 8011cc4:	3fb3b8c5 	.word	0x3fb3b8c5
 8011cc8:	1b8d0159 	.word	0x1b8d0159
 8011ccc:	bfe6066c 	.word	0xbfe6066c
 8011cd0:	9c598ac8 	.word	0x9c598ac8
 8011cd4:	40002ae5 	.word	0x40002ae5
 8011cd8:	1c8a2d4b 	.word	0x1c8a2d4b
 8011cdc:	c0033a27 	.word	0xc0033a27
 8011ce0:	33145c07 	.word	0x33145c07
 8011ce4:	bc91a626 	.word	0xbc91a626
 8011ce8:	54442d18 	.word	0x54442d18
 8011cec:	3fe921fb 	.word	0x3fe921fb
 8011cf0:	3fefffff 	.word	0x3fefffff
 8011cf4:	3fdfffff 	.word	0x3fdfffff
 8011cf8:	3fef3332 	.word	0x3fef3332

08011cfc <__ieee754_sqrt>:
 8011cfc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011d00:	4770      	bx	lr

08011d02 <with_errno>:
 8011d02:	b513      	push	{r0, r1, r4, lr}
 8011d04:	4604      	mov	r4, r0
 8011d06:	ed8d 0b00 	vstr	d0, [sp]
 8011d0a:	f7fc fd7d 	bl	800e808 <__errno>
 8011d0e:	ed9d 0b00 	vldr	d0, [sp]
 8011d12:	6004      	str	r4, [r0, #0]
 8011d14:	b002      	add	sp, #8
 8011d16:	bd10      	pop	{r4, pc}

08011d18 <xflow>:
 8011d18:	b082      	sub	sp, #8
 8011d1a:	b158      	cbz	r0, 8011d34 <xflow+0x1c>
 8011d1c:	eeb1 7b40 	vneg.f64	d7, d0
 8011d20:	ed8d 7b00 	vstr	d7, [sp]
 8011d24:	ed9d 7b00 	vldr	d7, [sp]
 8011d28:	2022      	movs	r0, #34	; 0x22
 8011d2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d2e:	b002      	add	sp, #8
 8011d30:	f7ff bfe7 	b.w	8011d02 <with_errno>
 8011d34:	eeb0 7b40 	vmov.f64	d7, d0
 8011d38:	e7f2      	b.n	8011d20 <xflow+0x8>
 8011d3a:	0000      	movs	r0, r0
 8011d3c:	0000      	movs	r0, r0
	...

08011d40 <__math_uflow>:
 8011d40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d48 <__math_uflow+0x8>
 8011d44:	f7ff bfe8 	b.w	8011d18 <xflow>
 8011d48:	00000000 	.word	0x00000000
 8011d4c:	10000000 	.word	0x10000000

08011d50 <__math_oflow>:
 8011d50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d58 <__math_oflow+0x8>
 8011d54:	f7ff bfe0 	b.w	8011d18 <xflow>
 8011d58:	00000000 	.word	0x00000000
 8011d5c:	70000000 	.word	0x70000000

08011d60 <__math_divzero>:
 8011d60:	b082      	sub	sp, #8
 8011d62:	2800      	cmp	r0, #0
 8011d64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d68:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011d6c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011d70:	ed8d 7b00 	vstr	d7, [sp]
 8011d74:	ed9d 0b00 	vldr	d0, [sp]
 8011d78:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011d88 <__math_divzero+0x28>
 8011d7c:	2022      	movs	r0, #34	; 0x22
 8011d7e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011d82:	b002      	add	sp, #8
 8011d84:	f7ff bfbd 	b.w	8011d02 <with_errno>
	...

08011d90 <__math_invalid>:
 8011d90:	eeb0 7b40 	vmov.f64	d7, d0
 8011d94:	eeb4 7b47 	vcmp.f64	d7, d7
 8011d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011da0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011da4:	d602      	bvs.n	8011dac <__math_invalid+0x1c>
 8011da6:	2021      	movs	r0, #33	; 0x21
 8011da8:	f7ff bfab 	b.w	8011d02 <with_errno>
 8011dac:	4770      	bx	lr

08011dae <__math_check_uflow>:
 8011dae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db6:	d102      	bne.n	8011dbe <__math_check_uflow+0x10>
 8011db8:	2022      	movs	r0, #34	; 0x22
 8011dba:	f7ff bfa2 	b.w	8011d02 <with_errno>
 8011dbe:	4770      	bx	lr

08011dc0 <__math_check_oflow>:
 8011dc0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011de0 <__math_check_oflow+0x20>
 8011dc4:	eeb0 7bc0 	vabs.f64	d7, d0
 8011dc8:	eeb4 7b46 	vcmp.f64	d7, d6
 8011dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd0:	dd02      	ble.n	8011dd8 <__math_check_oflow+0x18>
 8011dd2:	2022      	movs	r0, #34	; 0x22
 8011dd4:	f7ff bf95 	b.w	8011d02 <with_errno>
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop
 8011ddc:	f3af 8000 	nop.w
 8011de0:	ffffffff 	.word	0xffffffff
 8011de4:	7fefffff 	.word	0x7fefffff

08011de8 <fabs>:
 8011de8:	ec51 0b10 	vmov	r0, r1, d0
 8011dec:	ee10 2a10 	vmov	r2, s0
 8011df0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011df4:	ec43 2b10 	vmov	d0, r2, r3
 8011df8:	4770      	bx	lr
	...

08011dfc <_init>:
 8011dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dfe:	bf00      	nop
 8011e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e02:	bc08      	pop	{r3}
 8011e04:	469e      	mov	lr, r3
 8011e06:	4770      	bx	lr

08011e08 <_fini>:
 8011e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e0a:	bf00      	nop
 8011e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e0e:	bc08      	pop	{r3}
 8011e10:	469e      	mov	lr, r3
 8011e12:	4770      	bx	lr
