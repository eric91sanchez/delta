
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff2c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  080101d0  080101d0  000201d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f18  08011f18  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  08011f18  08011f18  00021f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f20  08011f20  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f20  08011f20  00021f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f24  08011f24  00021f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  24000000  08011f28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  24000248  08012170  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240009f8  08012170  000309f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be36  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ff  00000000  00000000  0004c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0004f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00050768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000541e  00000000  00000000  000518b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8e8  00000000  00000000  00056cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165817  00000000  00000000  000735be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d8dd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a4  00000000  00000000  001d8e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080101b4 	.word	0x080101b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	080101b4 	.word	0x080101b4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a72      	ldr	r2, [pc, #456]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b70      	ldr	r3, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a6b      	ldr	r2, [pc, #428]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b68      	ldr	r3, [pc, #416]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a5c      	ldr	r2, [pc, #368]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b59      	ldr	r3, [pc, #356]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b56      	ldr	r3, [pc, #344]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a54      	ldr	r2, [pc, #336]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b52      	ldr	r3, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a45      	ldr	r2, [pc, #276]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <MX_GPIO_Init+0x1e8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b6a:	483f      	ldr	r0, [pc, #252]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000b6c:	f005 f98a 	bl	8005e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2170      	movs	r1, #112	; 0x70
 8000b74:	483d      	ldr	r0, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000b76:	f005 f985 	bl	8005e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000b7a:	233f      	movs	r3, #63	; 0x3f
 8000b7c:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4838      	ldr	r0, [pc, #224]	; (8000c70 <MX_GPIO_Init+0x1f4>)
 8000b90:	f004 ffb0 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482f      	ldr	r0, [pc, #188]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bac:	f004 ffa2 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000bb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x1ec>)
 8000bca:	f004 ff93 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8000bce:	2370      	movs	r3, #112	; 0x70
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_GPIO_Init+0x1f0>)
 8000be6:	f004 ff85 	bl	8005af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f004 f9d9 	bl	8004fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f004 f9f0 	bl	8004fda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f004 f9d1 	bl	8004fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f004 f9e8 	bl	8004fda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2008      	movs	r0, #8
 8000c10:	f004 f9c9 	bl	8004fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c14:	2008      	movs	r0, #8
 8000c16:	f004 f9e0 	bl	8004fda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2009      	movs	r0, #9
 8000c20:	f004 f9c1 	bl	8004fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c24:	2009      	movs	r0, #9
 8000c26:	f004 f9d8 	bl	8004fda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f004 f9b9 	bl	8004fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c34:	200a      	movs	r0, #10
 8000c36:	f004 f9d0 	bl	8004fda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	2017      	movs	r0, #23
 8000c40:	f004 f9b1 	bl	8004fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c44:	2017      	movs	r0, #23
 8000c46:	f004 f9c8 	bl	8004fda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f004 f9a9 	bl	8004fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c54:	2028      	movs	r0, #40	; 0x28
 8000c56:	f004 f9c0 	bl	8004fda <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020800 	.word	0x58020800
 8000c6c:	58020c00 	.word	0x58020c00
 8000c70:	58021000 	.word	0x58021000
 8000c74:	00000000 	.word	0x00000000

08000c78 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

	homAprox = true;
 8000c7c:	4bb0      	ldr	r3, [pc, #704]	; (8000f40 <homing+0x2c8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000c82:	4bb0      	ldr	r3, [pc, #704]	; (8000f44 <homing+0x2cc>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000c88:	4baf      	ldr	r3, [pc, #700]	; (8000f48 <homing+0x2d0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
    motor2.hom = false;
 8000c90:	4bae      	ldr	r3, [pc, #696]	; (8000f4c <homing+0x2d4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]
    motor3.hom = false;
 8000c98:	4bad      	ldr	r3, [pc, #692]	; (8000f50 <homing+0x2d8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca6:	48ab      	ldr	r0, [pc, #684]	; (8000f54 <homing+0x2dc>)
 8000ca8:	f005 f8ec 	bl	8005e84 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb2:	48a8      	ldr	r0, [pc, #672]	; (8000f54 <homing+0x2dc>)
 8000cb4:	f005 f8e6 	bl	8005e84 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	48a5      	ldr	r0, [pc, #660]	; (8000f54 <homing+0x2dc>)
 8000cc0:	f005 f8e0 	bl	8005e84 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000cc4:	2006      	movs	r0, #6
 8000cc6:	f004 f996 	bl	8004ff6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f004 f993 	bl	8004ff6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f004 f990 	bl	8004ff6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f004 f98d 	bl	8004ff6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f004 f98a 	bl	8004ff6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000ce2:	2017      	movs	r0, #23
 8000ce4:	f004 f987 	bl	8004ff6 <HAL_NVIC_DisableIRQ>

    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000ce8:	2100      	movs	r1, #0
 8000cea:	489b      	ldr	r0, [pc, #620]	; (8000f58 <homing+0x2e0>)
 8000cec:	f007 ff60 	bl	8008bb0 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	489a      	ldr	r0, [pc, #616]	; (8000f5c <homing+0x2e4>)
 8000cf4:	f007 ff5c 	bl	8008bb0 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4899      	ldr	r0, [pc, #612]	; (8000f60 <homing+0x2e8>)
 8000cfc:	f007 ff58 	bl	8008bb0 <HAL_TIM_PWM_Stop>


	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm)); //Escritura del registro ARR
 8000d00:	4b98      	ldr	r3, [pc, #608]	; (8000f64 <homing+0x2ec>)
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d14:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000f28 <homing+0x2b0>
 8000d18:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d1c:	4b92      	ldr	r3, [pc, #584]	; (8000f68 <homing+0x2f0>)
 8000d1e:	ed93 7b00 	vldr	d7, [r3]
 8000d22:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000f30 <homing+0x2b8>
 8000d26:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d2a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000f38 <homing+0x2c0>
 8000d2e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d36:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d3e:	4b86      	ldr	r3, [pc, #536]	; (8000f58 <homing+0x2e0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d46:	ee17 2a90 	vmov	r2, s15
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4c:	4b85      	ldr	r3, [pc, #532]	; (8000f64 <homing+0x2ec>)
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d60:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000f28 <homing+0x2b0>
 8000d64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d68:	4b7f      	ldr	r3, [pc, #508]	; (8000f68 <homing+0x2f0>)
 8000d6a:	ed93 7b00 	vldr	d7, [r3]
 8000d6e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000f30 <homing+0x2b8>
 8000d72:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d76:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000f38 <homing+0x2c0>
 8000d7a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d8e:	ee17 2a90 	vmov	r2, s15
 8000d92:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <homing+0x2e0>)
 8000d94:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000d96:	4b73      	ldr	r3, [pc, #460]	; (8000f64 <homing+0x2ec>)
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000da2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000daa:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000f28 <homing+0x2b0>
 8000dae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000db2:	4b6d      	ldr	r3, [pc, #436]	; (8000f68 <homing+0x2f0>)
 8000db4:	ed93 7b00 	vldr	d7, [r3]
 8000db8:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000f30 <homing+0x2b8>
 8000dbc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dc0:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000f38 <homing+0x2c0>
 8000dc4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <homing+0x2e4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ddc:	ee17 2a90 	vmov	r2, s15
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de2:	4b60      	ldr	r3, [pc, #384]	; (8000f64 <homing+0x2ec>)
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000df2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df6:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000f28 <homing+0x2b0>
 8000dfa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	; (8000f68 <homing+0x2f0>)
 8000e00:	ed93 7b00 	vldr	d7, [r3]
 8000e04:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000f30 <homing+0x2b8>
 8000e08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e0c:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000f38 <homing+0x2c0>
 8000e10:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e24:	ee17 2a90 	vmov	r2, s15
 8000e28:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <homing+0x2e4>)
 8000e2a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <homing+0x2ec>)
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e40:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000f28 <homing+0x2b0>
 8000e44:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e48:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <homing+0x2f0>)
 8000e4a:	ed93 7b00 	vldr	d7, [r3]
 8000e4e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000f30 <homing+0x2b8>
 8000e52:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e56:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000f38 <homing+0x2c0>
 8000e5a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <homing+0x2e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e72:	ee17 2a90 	vmov	r2, s15
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <homing+0x2ec>)
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e8c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000f28 <homing+0x2b0>
 8000e90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e94:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <homing+0x2f0>)
 8000e96:	ed93 7b00 	vldr	d7, [r3]
 8000e9a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000f30 <homing+0x2b8>
 8000e9e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ea2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000f38 <homing+0x2c0>
 8000ea6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000eae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000eb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000eb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eba:	ee17 2a90 	vmov	r2, s15
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <homing+0x2e8>)
 8000ec0:	60da      	str	r2, [r3, #12]



	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <homing+0x2ec>)
 8000ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ece:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ed2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <homing+0x2ec>)
 8000ed8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000edc:	ee17 2a90 	vmov	r2, s15
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <homing+0x2f4>)
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000eee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ef2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <homing+0x2f4>)
 8000ef8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000efc:	ee17 2a90 	vmov	r2, s15
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <homing+0x2f8>)
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <homing+0x2f8>)
 8000f18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f1c:	ee17 2a90 	vmov	r2, s15
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000f22:	e06f      	b.n	8001004 <homing+0x38c>
 8000f24:	f3af 8000 	nop.w
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	418e8480 	.word	0x418e8480
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40bf4000 	.word	0x40bf4000
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	404e0000 	.word	0x404e0000
 8000f40:	24000264 	.word	0x24000264
 8000f44:	24000265 	.word	0x24000265
 8000f48:	24000350 	.word	0x24000350
 8000f4c:	24000390 	.word	0x24000390
 8000f50:	240003d0 	.word	0x240003d0
 8000f54:	58020800 	.word	0x58020800
 8000f58:	240006a0 	.word	0x240006a0
 8000f5c:	240006ec 	.word	0x240006ec
 8000f60:	24000738 	.word	0x24000738
 8000f64:	40001800 	.word	0x40001800
 8000f68:	24000000 	.word	0x24000000
 8000f6c:	40001c00 	.word	0x40001c00
 8000f70:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 8000f74:	2100      	movs	r1, #0
 8000f76:	4890      	ldr	r0, [pc, #576]	; (80011b8 <homing+0x540>)
 8000f78:	f007 fd0c 	bl	8008994 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	488f      	ldr	r0, [pc, #572]	; (80011bc <homing+0x544>)
 8000f80:	f007 fd08 	bl	8008994 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8000f84:	2100      	movs	r1, #0
 8000f86:	488e      	ldr	r0, [pc, #568]	; (80011c0 <homing+0x548>)
 8000f88:	f007 fd04 	bl	8008994 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	488d      	ldr	r0, [pc, #564]	; (80011c4 <homing+0x54c>)
 8000f90:	f004 ff60 	bl	8005e54 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00d      	beq.n	8000fb6 <homing+0x33e>
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4889      	ldr	r0, [pc, #548]	; (80011c4 <homing+0x54c>)
 8000f9e:	f004 ff59 	bl	8005e54 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <homing+0x33e>
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4886      	ldr	r0, [pc, #536]	; (80011c4 <homing+0x54c>)
 8000fac:	f004 ff52 	bl	8005e54 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d126      	bne.n	8001004 <homing+0x38c>
            HAL_Delay(30);
 8000fb6:	201e      	movs	r0, #30
 8000fb8:	f003 fec6 	bl	8004d48 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4881      	ldr	r0, [pc, #516]	; (80011c4 <homing+0x54c>)
 8000fc0:	f004 ff48 	bl	8005e54 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00d      	beq.n	8000fe6 <homing+0x36e>
 8000fca:	2104      	movs	r1, #4
 8000fcc:	487d      	ldr	r0, [pc, #500]	; (80011c4 <homing+0x54c>)
 8000fce:	f004 ff41 	bl	8005e54 <HAL_GPIO_ReadPin>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <homing+0x36e>
 8000fd8:	2110      	movs	r1, #16
 8000fda:	487a      	ldr	r0, [pc, #488]	; (80011c4 <homing+0x54c>)
 8000fdc:	f004 ff3a 	bl	8005e54 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10e      	bne.n	8001004 <homing+0x38c>

                Stop_PWM_MOTOR_1;
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4873      	ldr	r0, [pc, #460]	; (80011b8 <homing+0x540>)
 8000fea:	f007 fde1 	bl	8008bb0 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4872      	ldr	r0, [pc, #456]	; (80011bc <homing+0x544>)
 8000ff2:	f007 fddd 	bl	8008bb0 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4871      	ldr	r0, [pc, #452]	; (80011c0 <homing+0x548>)
 8000ffa:	f007 fdd9 	bl	8008bb0 <HAL_TIM_PWM_Stop>

                homAprox = false;
 8000ffe:	4b72      	ldr	r3, [pc, #456]	; (80011c8 <homing+0x550>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <homing+0x550>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1b3      	bne.n	8000f74 <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 800100c:	e14d      	b.n	80012aa <homing+0x632>

        if (ES1s_PRESSED && !motor1.hom) {
 800100e:	2101      	movs	r1, #1
 8001010:	486c      	ldr	r0, [pc, #432]	; (80011c4 <homing+0x54c>)
 8001012:	f004 ff1f 	bl	8005e54 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d159      	bne.n	80010d0 <homing+0x458>
 800101c:	4b6b      	ldr	r3, [pc, #428]	; (80011cc <homing+0x554>)
 800101e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d154      	bne.n	80010d0 <homing+0x458>

            Stop_PWM_MOTOR_2;
 8001026:	2100      	movs	r1, #0
 8001028:	4864      	ldr	r0, [pc, #400]	; (80011bc <homing+0x544>)
 800102a:	f007 fdc1 	bl	8008bb0 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 800102e:	2100      	movs	r1, #0
 8001030:	4863      	ldr	r0, [pc, #396]	; (80011c0 <homing+0x548>)
 8001032:	f007 fdbd 	bl	8008bb0 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 8001036:	201e      	movs	r0, #30
 8001038:	f003 fe86 	bl	8004d48 <HAL_Delay>

            while(ES1s_PRESSED){
 800103c:	e010      	b.n	8001060 <homing+0x3e8>

                negative_Dir_MOTOR_1;
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001044:	4862      	ldr	r0, [pc, #392]	; (80011d0 <homing+0x558>)
 8001046:	f004 ff1d 	bl	8005e84 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 800104a:	2000      	movs	r0, #0
 800104c:	f003 fe7c 	bl	8004d48 <HAL_Delay>
                Start_PWM_MOTOR_1;
 8001050:	2100      	movs	r1, #0
 8001052:	4859      	ldr	r0, [pc, #356]	; (80011b8 <homing+0x540>)
 8001054:	f007 fc9e 	bl	8008994 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 8001058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105c:	f003 fe74 	bl	8004d48 <HAL_Delay>
            while(ES1s_PRESSED){
 8001060:	2101      	movs	r1, #1
 8001062:	4858      	ldr	r0, [pc, #352]	; (80011c4 <homing+0x54c>)
 8001064:	f004 fef6 	bl	8005e54 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0e7      	beq.n	800103e <homing+0x3c6>

            }

            Stop_PWM_MOTOR_1;
 800106e:	2100      	movs	r1, #0
 8001070:	4851      	ldr	r0, [pc, #324]	; (80011b8 <homing+0x540>)
 8001072:	f007 fd9d 	bl	8008bb0 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 8001076:	4b55      	ldr	r3, [pc, #340]	; (80011cc <homing+0x554>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2204      	movs	r2, #4
 8001082:	4954      	ldr	r1, [pc, #336]	; (80011d4 <homing+0x55c>)
 8001084:	4854      	ldr	r0, [pc, #336]	; (80011d8 <homing+0x560>)
 8001086:	f009 fa8b 	bl	800a5a0 <HAL_UART_Transmit>
            HAL_Delay(30);
 800108a:	201e      	movs	r0, #30
 800108c:	f003 fe5c 	bl	8004d48 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001090:	2104      	movs	r1, #4
 8001092:	484c      	ldr	r0, [pc, #304]	; (80011c4 <homing+0x54c>)
 8001094:	f004 fede 	bl	8005e54 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <homing+0x438>
 800109e:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <homing+0x564>)
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <homing+0x438>
 80010a8:	2100      	movs	r1, #0
 80010aa:	4844      	ldr	r0, [pc, #272]	; (80011bc <homing+0x544>)
 80010ac:	f007 fc72 	bl	8008994 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80010b0:	2110      	movs	r1, #16
 80010b2:	4844      	ldr	r0, [pc, #272]	; (80011c4 <homing+0x54c>)
 80010b4:	f004 fece 	bl	8005e54 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <homing+0x458>
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <homing+0x568>)
 80010c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <homing+0x458>
 80010c8:	2100      	movs	r1, #0
 80010ca:	483d      	ldr	r0, [pc, #244]	; (80011c0 <homing+0x548>)
 80010cc:	f007 fc62 	bl	8008994 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 80010d0:	2104      	movs	r1, #4
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <homing+0x54c>)
 80010d4:	f004 febe 	bl	8005e54 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d159      	bne.n	8001192 <homing+0x51a>
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <homing+0x564>)
 80010e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d154      	bne.n	8001192 <homing+0x51a>

            Stop_PWM_MOTOR_1;
 80010e8:	2100      	movs	r1, #0
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <homing+0x540>)
 80010ec:	f007 fd60 	bl	8008bb0 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010f0:	2100      	movs	r1, #0
 80010f2:	4833      	ldr	r0, [pc, #204]	; (80011c0 <homing+0x548>)
 80010f4:	f007 fd5c 	bl	8008bb0 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 80010f8:	201e      	movs	r0, #30
 80010fa:	f003 fe25 	bl	8004d48 <HAL_Delay>

            while(ES2s_PRESSED){
 80010fe:	e010      	b.n	8001122 <homing+0x4aa>

                negative_Dir_MOTOR_2;
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001106:	4832      	ldr	r0, [pc, #200]	; (80011d0 <homing+0x558>)
 8001108:	f004 febc 	bl	8005e84 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 800110c:	2000      	movs	r0, #0
 800110e:	f003 fe1b 	bl	8004d48 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001112:	2100      	movs	r1, #0
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <homing+0x544>)
 8001116:	f007 fc3d 	bl	8008994 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111e:	f003 fe13 	bl	8004d48 <HAL_Delay>
            while(ES2s_PRESSED){
 8001122:	2104      	movs	r1, #4
 8001124:	4827      	ldr	r0, [pc, #156]	; (80011c4 <homing+0x54c>)
 8001126:	f004 fe95 	bl	8005e54 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0e7      	beq.n	8001100 <homing+0x488>

            }

            Stop_PWM_MOTOR_2;
 8001130:	2100      	movs	r1, #0
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <homing+0x544>)
 8001134:	f007 fd3c 	bl	8008bb0 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <homing+0x564>)
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	2204      	movs	r2, #4
 8001144:	4927      	ldr	r1, [pc, #156]	; (80011e4 <homing+0x56c>)
 8001146:	4824      	ldr	r0, [pc, #144]	; (80011d8 <homing+0x560>)
 8001148:	f009 fa2a 	bl	800a5a0 <HAL_UART_Transmit>
            HAL_Delay(30);
 800114c:	201e      	movs	r0, #30
 800114e:	f003 fdfb 	bl	8004d48 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 8001152:	2101      	movs	r1, #1
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <homing+0x54c>)
 8001156:	f004 fe7d 	bl	8005e54 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <homing+0x4fa>
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <homing+0x554>)
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <homing+0x4fa>
 800116a:	2100      	movs	r1, #0
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <homing+0x540>)
 800116e:	f007 fc11 	bl	8008994 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001172:	2110      	movs	r1, #16
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <homing+0x54c>)
 8001176:	f004 fe6d 	bl	8005e54 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <homing+0x51a>
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <homing+0x568>)
 8001182:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <homing+0x51a>
 800118a:	2100      	movs	r1, #0
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <homing+0x548>)
 800118e:	f007 fc01 	bl	8008994 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001192:	2110      	movs	r1, #16
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <homing+0x54c>)
 8001196:	f004 fe5d 	bl	8005e54 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d16c      	bne.n	800127a <homing+0x602>

            Stop_PWM_MOTOR_1;
 80011a0:	2100      	movs	r1, #0
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <homing+0x540>)
 80011a4:	f007 fd04 	bl	8008bb0 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 80011a8:	2100      	movs	r1, #0
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <homing+0x544>)
 80011ac:	f007 fd00 	bl	8008bb0 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 80011b0:	201e      	movs	r0, #30
 80011b2:	f003 fdc9 	bl	8004d48 <HAL_Delay>

            while(ES3s_PRESSED){
 80011b6:	e028      	b.n	800120a <homing+0x592>
 80011b8:	240006a0 	.word	0x240006a0
 80011bc:	240006ec 	.word	0x240006ec
 80011c0:	24000738 	.word	0x24000738
 80011c4:	58021000 	.word	0x58021000
 80011c8:	24000264 	.word	0x24000264
 80011cc:	24000350 	.word	0x24000350
 80011d0:	58020800 	.word	0x58020800
 80011d4:	080101d0 	.word	0x080101d0
 80011d8:	24000954 	.word	0x24000954
 80011dc:	24000390 	.word	0x24000390
 80011e0:	240003d0 	.word	0x240003d0
 80011e4:	080101d4 	.word	0x080101d4

                negative_Dir_MOTOR_3;
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4833      	ldr	r0, [pc, #204]	; (80012bc <homing+0x644>)
 80011f0:	f004 fe48 	bl	8005e84 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f003 fda7 	bl	8004d48 <HAL_Delay>
                Start_PWM_MOTOR_3;
 80011fa:	2100      	movs	r1, #0
 80011fc:	4830      	ldr	r0, [pc, #192]	; (80012c0 <homing+0x648>)
 80011fe:	f007 fbc9 	bl	8008994 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f003 fd9f 	bl	8004d48 <HAL_Delay>
            while(ES3s_PRESSED){
 800120a:	2110      	movs	r1, #16
 800120c:	482d      	ldr	r0, [pc, #180]	; (80012c4 <homing+0x64c>)
 800120e:	f004 fe21 	bl	8005e54 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0e7      	beq.n	80011e8 <homing+0x570>
            }

            Stop_PWM_MOTOR_3;
 8001218:	2100      	movs	r1, #0
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <homing+0x648>)
 800121c:	f007 fcc8 	bl	8008bb0 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <homing+0x650>)
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	2204      	movs	r2, #4
 800122c:	4927      	ldr	r1, [pc, #156]	; (80012cc <homing+0x654>)
 800122e:	4828      	ldr	r0, [pc, #160]	; (80012d0 <homing+0x658>)
 8001230:	f009 f9b6 	bl	800a5a0 <HAL_UART_Transmit>
			HAL_Delay(30);
 8001234:	201e      	movs	r0, #30
 8001236:	f003 fd87 	bl	8004d48 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 800123a:	2101      	movs	r1, #1
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <homing+0x64c>)
 800123e:	f004 fe09 	bl	8005e54 <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <homing+0x5e2>
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <homing+0x65c>)
 800124a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <homing+0x5e2>
 8001252:	2100      	movs	r1, #0
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <homing+0x660>)
 8001256:	f007 fb9d 	bl	8008994 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 800125a:	2104      	movs	r1, #4
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <homing+0x64c>)
 800125e:	f004 fdf9 	bl	8005e54 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <homing+0x602>
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <homing+0x664>)
 800126a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <homing+0x602>
 8001272:	2100      	movs	r1, #0
 8001274:	481a      	ldr	r0, [pc, #104]	; (80012e0 <homing+0x668>)
 8001276:	f007 fb8d 	bl	8008994 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <homing+0x65c>)
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d012      	beq.n	80012aa <homing+0x632>
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <homing+0x664>)
 8001286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00d      	beq.n	80012aa <homing+0x632>
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <homing+0x650>)
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <homing+0x632>
        	homFin=true;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <homing+0x66c>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 800129e:	2364      	movs	r3, #100	; 0x64
 80012a0:	2204      	movs	r2, #4
 80012a2:	4911      	ldr	r1, [pc, #68]	; (80012e8 <homing+0x670>)
 80012a4:	480a      	ldr	r0, [pc, #40]	; (80012d0 <homing+0x658>)
 80012a6:	f009 f97b 	bl	800a5a0 <HAL_UART_Transmit>
    while (!homFin){
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <homing+0x66c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f43f aead 	beq.w	800100e <homing+0x396>
        }
       }


    }
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	58020800 	.word	0x58020800
 80012c0:	24000738 	.word	0x24000738
 80012c4:	58021000 	.word	0x58021000
 80012c8:	240003d0 	.word	0x240003d0
 80012cc:	080101d8 	.word	0x080101d8
 80012d0:	24000954 	.word	0x24000954
 80012d4:	24000350 	.word	0x24000350
 80012d8:	240006a0 	.word	0x240006a0
 80012dc:	24000390 	.word	0x24000390
 80012e0:	240006ec 	.word	0x240006ec
 80012e4:	24000429 	.word	0x24000429
 80012e8:	080101dc 	.word	0x080101dc

080012ec <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80012f2:	4b6e      	ldr	r3, [pc, #440]	; (80014ac <interpretaComando+0x1c0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b70      	cmp	r3, #112	; 0x70
 80012f8:	d010      	beq.n	800131c <interpretaComando+0x30>
 80012fa:	2b70      	cmp	r3, #112	; 0x70
 80012fc:	f300 80d1 	bgt.w	80014a2 <interpretaComando+0x1b6>
 8001300:	2b68      	cmp	r3, #104	; 0x68
 8001302:	d007      	beq.n	8001314 <interpretaComando+0x28>
 8001304:	2b68      	cmp	r3, #104	; 0x68
 8001306:	f300 80cc 	bgt.w	80014a2 <interpretaComando+0x1b6>
 800130a:	2b48      	cmp	r3, #72	; 0x48
 800130c:	d002      	beq.n	8001314 <interpretaComando+0x28>
 800130e:	2b50      	cmp	r3, #80	; 0x50
 8001310:	d004      	beq.n	800131c <interpretaComando+0x30>



	}

}
 8001312:	e0c6      	b.n	80014a2 <interpretaComando+0x1b6>
		state = HOME;
 8001314:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <interpretaComando+0x1c4>)
 8001316:	2203      	movs	r2, #3
 8001318:	701a      	strb	r2, [r3, #0]
	break;
 800131a:	e0c2      	b.n	80014a2 <interpretaComando+0x1b6>
		flagErrorEndStop = 0;
 800131c:	4965      	ldr	r1, [pc, #404]	; (80014b4 <interpretaComando+0x1c8>)
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 8001332:	e0ac      	b.n	800148e <interpretaComando+0x1a2>
			if(rx_buffer[i] == 'x'){
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4a5d      	ldr	r2, [pc, #372]	; (80014ac <interpretaComando+0x1c0>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	2b78      	cmp	r3, #120	; 0x78
 800133c:	d133      	bne.n	80013a6 <interpretaComando+0xba>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800133e:	e00c      	b.n	800135a <interpretaComando+0x6e>
					auxString[j] = rx_buffer[i+1];
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	4959      	ldr	r1, [pc, #356]	; (80014ac <interpretaComando+0x1c0>)
 8001348:	5c89      	ldrb	r1, [r1, r2]
 800134a:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <interpretaComando+0x1cc>)
 800134c:	54d1      	strb	r1, [r2, r3]
					j++;
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	3301      	adds	r3, #1
 8001352:	73bb      	strb	r3, [r7, #14]
					i++;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3301      	adds	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	4a53      	ldr	r2, [pc, #332]	; (80014ac <interpretaComando+0x1c0>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	2b20      	cmp	r3, #32
 8001364:	d1ec      	bne.n	8001340 <interpretaComando+0x54>
				Pfin.x = strtod(&auxString[0], NULL);
 8001366:	2100      	movs	r1, #0
 8001368:	4853      	ldr	r0, [pc, #332]	; (80014b8 <interpretaComando+0x1cc>)
 800136a:	f00c fa2b 	bl	800d7c4 <strtod>
 800136e:	eeb0 7b40 	vmov.f64	d7, d0
 8001372:	4b52      	ldr	r3, [pc, #328]	; (80014bc <interpretaComando+0x1d0>)
 8001374:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e007      	b.n	800138e <interpretaComando+0xa2>
					auxString[k] = 0;
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <interpretaComando+0x1cc>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4413      	add	r3, r2
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3301      	adds	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b0a      	cmp	r3, #10
 8001392:	ddf4      	ble.n	800137e <interpretaComando+0x92>
				j=0;
 8001394:	2300      	movs	r3, #0
 8001396:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	2207      	movs	r2, #7
 800139c:	4948      	ldr	r1, [pc, #288]	; (80014c0 <interpretaComando+0x1d4>)
 800139e:	4849      	ldr	r0, [pc, #292]	; (80014c4 <interpretaComando+0x1d8>)
 80013a0:	f009 f8fe 	bl	800a5a0 <HAL_UART_Transmit>
 80013a4:	e070      	b.n	8001488 <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'y'){
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4a40      	ldr	r2, [pc, #256]	; (80014ac <interpretaComando+0x1c0>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	2b79      	cmp	r3, #121	; 0x79
 80013ae:	d133      	bne.n	8001418 <interpretaComando+0x12c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013b0:	e00c      	b.n	80013cc <interpretaComando+0xe0>
					auxString[j] = rx_buffer[i+1];
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	493c      	ldr	r1, [pc, #240]	; (80014ac <interpretaComando+0x1c0>)
 80013ba:	5c89      	ldrb	r1, [r1, r2]
 80013bc:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <interpretaComando+0x1cc>)
 80013be:	54d1      	strb	r1, [r2, r3]
					j++;
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73bb      	strb	r3, [r7, #14]
					i++;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3301      	adds	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a36      	ldr	r2, [pc, #216]	; (80014ac <interpretaComando+0x1c0>)
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d1ec      	bne.n	80013b2 <interpretaComando+0xc6>
				Pfin.y = strtod(&auxString[0], NULL);
 80013d8:	2100      	movs	r1, #0
 80013da:	4837      	ldr	r0, [pc, #220]	; (80014b8 <interpretaComando+0x1cc>)
 80013dc:	f00c f9f2 	bl	800d7c4 <strtod>
 80013e0:	eeb0 7b40 	vmov.f64	d7, d0
 80013e4:	4b35      	ldr	r3, [pc, #212]	; (80014bc <interpretaComando+0x1d0>)
 80013e6:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	e007      	b.n	8001400 <interpretaComando+0x114>
					auxString[k] = 0;
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <interpretaComando+0x1cc>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3301      	adds	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	ddf4      	ble.n	80013f0 <interpretaComando+0x104>
				j=0;
 8001406:	2300      	movs	r3, #0
 8001408:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	2207      	movs	r2, #7
 800140e:	492e      	ldr	r1, [pc, #184]	; (80014c8 <interpretaComando+0x1dc>)
 8001410:	482c      	ldr	r0, [pc, #176]	; (80014c4 <interpretaComando+0x1d8>)
 8001412:	f009 f8c5 	bl	800a5a0 <HAL_UART_Transmit>
 8001416:	e037      	b.n	8001488 <interpretaComando+0x19c>
			else if(rx_buffer[i] == 'z'){
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <interpretaComando+0x1c0>)
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	2b7a      	cmp	r3, #122	; 0x7a
 8001420:	d132      	bne.n	8001488 <interpretaComando+0x19c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001422:	e00c      	b.n	800143e <interpretaComando+0x152>
					auxString[j] = rx_buffer[i+1];
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	4920      	ldr	r1, [pc, #128]	; (80014ac <interpretaComando+0x1c0>)
 800142c:	5c89      	ldrb	r1, [r1, r2]
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <interpretaComando+0x1cc>)
 8001430:	54d1      	strb	r1, [r2, r3]
					j++;
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	3301      	adds	r3, #1
 8001436:	73bb      	strb	r3, [r7, #14]
					i++;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <interpretaComando+0x1c0>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	2b20      	cmp	r3, #32
 8001448:	d1ec      	bne.n	8001424 <interpretaComando+0x138>
				Pfin.z = strtod(&auxString[0], NULL);
 800144a:	2100      	movs	r1, #0
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <interpretaComando+0x1cc>)
 800144e:	f00c f9b9 	bl	800d7c4 <strtod>
 8001452:	eeb0 7b40 	vmov.f64	d7, d0
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <interpretaComando+0x1d0>)
 8001458:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	e007      	b.n	8001472 <interpretaComando+0x186>
					auxString[k] = 0;
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <interpretaComando+0x1cc>)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b0a      	cmp	r3, #10
 8001476:	ddf4      	ble.n	8001462 <interpretaComando+0x176>
				j=0;
 8001478:	2300      	movs	r3, #0
 800147a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	2207      	movs	r2, #7
 8001480:	4912      	ldr	r1, [pc, #72]	; (80014cc <interpretaComando+0x1e0>)
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <interpretaComando+0x1d8>)
 8001484:	f009 f88c 	bl	800a5a0 <HAL_UART_Transmit>
			i++;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	3301      	adds	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <interpretaComando+0x1c0>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f af4d 	bne.w	8001334 <interpretaComando+0x48>
		receptionFlag = true;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <interpretaComando+0x1e4>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
		break;
 80014a0:	bf00      	nop
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2400053c 	.word	0x2400053c
 80014b0:	24000428 	.word	0x24000428
 80014b4:	24000560 	.word	0x24000560
 80014b8:	24000268 	.word	0x24000268
 80014bc:	24000470 	.word	0x24000470
 80014c0:	080101e0 	.word	0x080101e0
 80014c4:	24000954 	.word	0x24000954
 80014c8:	080101e8 	.word	0x080101e8
 80014cc:	080101f0 	.word	0x080101f0
 80014d0:	2400055b 	.word	0x2400055b
 80014d4:	00000000 	.word	0x00000000

080014d8 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	ed2d 8b04 	vpush	{d8-d9}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	eeb0 5b40 	vmov.f64	d5, d0
 80014e6:	eeb0 6b41 	vmov.f64	d6, d1
 80014ea:	eeb0 7b42 	vmov.f64	d7, d2
 80014ee:	ed87 5b00 	vstr	d5, [r7]
 80014f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80014f6:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 80014fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80014fe:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80018b8 <inverseKinematic+0x3e0>
 8001502:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001506:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80018c0 <inverseKinematic+0x3e8>
 800150a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800150e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001512:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001516:	ed97 7b04 	vldr	d7, [r7, #16]
 800151a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800151e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001522:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001526:	eeb0 0b45 	vmov.f64	d0, d5
 800152a:	f00e fa15 	bl	800f958 <pow>
 800152e:	eeb0 7b40 	vmov.f64	d7, d0
 8001532:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001536:	ee37 7b06 	vadd.f64	d7, d7, d6
 800153a:	4bf9      	ldr	r3, [pc, #996]	; (8001920 <inverseKinematic+0x448>)
 800153c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001540:	ed97 7b00 	vldr	d7, [r7]
 8001544:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018c8 <inverseKinematic+0x3f0>
 8001548:	ee37 7b06 	vadd.f64	d7, d7, d6
 800154c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018d0 <inverseKinematic+0x3f8>
 8001550:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001554:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80018d8 <inverseKinematic+0x400>
 8001558:	ee36 6b47 	vsub.f64	d6, d6, d7
 800155c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001560:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 80018e0 <inverseKinematic+0x408>
 8001564:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001568:	ee37 7b07 	vadd.f64	d7, d7, d7
 800156c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001570:	ed97 7b04 	vldr	d7, [r7, #16]
 8001574:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001578:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800157c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001580:	eeb0 0b45 	vmov.f64	d0, d5
 8001584:	f00e f9e8 	bl	800f958 <pow>
 8001588:	eeb0 7b40 	vmov.f64	d7, d0
 800158c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001590:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001594:	4be3      	ldr	r3, [pc, #908]	; (8001924 <inverseKinematic+0x44c>)
 8001596:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 800159a:	ed97 7b00 	vldr	d7, [r7]
 800159e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80018c8 <inverseKinematic+0x3f0>
 80015a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80015a6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80018d0 <inverseKinematic+0x3f8>
 80015aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b2:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 80018e0 <inverseKinematic+0x408>
 80015b6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80015ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015c2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80018e8 <inverseKinematic+0x410>
 80015c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015ca:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 80018c0 <inverseKinematic+0x3e8>
 80015ce:	ee37 6b06 	vadd.f64	d6, d7, d6
 80015d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80015d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015da:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80015de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015e2:	eeb0 0b45 	vmov.f64	d0, d5
 80015e6:	f00e f9b7 	bl	800f958 <pow>
 80015ea:	eeb0 7b40 	vmov.f64	d7, d0
 80015ee:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80015f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015f6:	4bcc      	ldr	r3, [pc, #816]	; (8001928 <inverseKinematic+0x450>)
 80015f8:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 80015fc:	ed97 7b02 	vldr	d7, [r7, #8]
 8001600:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80018b8 <inverseKinematic+0x3e0>
 8001604:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001608:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80018c0 <inverseKinematic+0x3e8>
 800160c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001610:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001614:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001618:	ed97 7b04 	vldr	d7, [r7, #16]
 800161c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001620:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001624:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001628:	ed97 7b02 	vldr	d7, [r7, #8]
 800162c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80018b8 <inverseKinematic+0x3e0>
 8001630:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001634:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001638:	eeb0 0b47 	vmov.f64	d0, d7
 800163c:	f00e f98c 	bl	800f958 <pow>
 8001640:	eeb0 7b40 	vmov.f64	d7, d0
 8001644:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80018f0 <inverseKinematic+0x418>
 8001648:	ee37 9b06 	vadd.f64	d9, d7, d6
 800164c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001650:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001654:	eeb0 0b47 	vmov.f64	d0, d7
 8001658:	f00e f97e 	bl	800f958 <pow>
 800165c:	eeb0 7b40 	vmov.f64	d7, d0
 8001660:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001664:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80018f8 <inverseKinematic+0x420>
 8001668:	ee37 9b46 	vsub.f64	d9, d7, d6
 800166c:	ed97 7b00 	vldr	d7, [r7]
 8001670:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001674:	eeb0 0b47 	vmov.f64	d0, d7
 8001678:	f00e f96e 	bl	800f958 <pow>
 800167c:	eeb0 7b40 	vmov.f64	d7, d0
 8001680:	ee39 5b07 	vadd.f64	d5, d9, d7
 8001684:	ed97 7b04 	vldr	d7, [r7, #16]
 8001688:	ee37 6b07 	vadd.f64	d6, d7, d7
 800168c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001690:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001694:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001900 <inverseKinematic+0x428>
 8001698:	ee37 7b06 	vadd.f64	d7, d7, d6
 800169c:	4ba3      	ldr	r3, [pc, #652]	; (800192c <inverseKinematic+0x454>)
 800169e:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80016a2:	ed97 7b00 	vldr	d7, [r7]
 80016a6:	ed9f 6b88 	vldr	d6, [pc, #544]	; 80018c8 <inverseKinematic+0x3f0>
 80016aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016ae:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001908 <inverseKinematic+0x430>
 80016b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ba:	ed9f 5b89 	vldr	d5, [pc, #548]	; 80018e0 <inverseKinematic+0x408>
 80016be:	ee37 7b05 	vadd.f64	d7, d7, d5
 80016c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016ca:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80018d8 <inverseKinematic+0x400>
 80016ce:	ee37 5b06 	vadd.f64	d5, d7, d6
 80016d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80016d6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80016da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016de:	ee37 8b07 	vadd.f64	d8, d7, d7
 80016e2:	ed97 7b00 	vldr	d7, [r7]
 80016e6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80018c8 <inverseKinematic+0x3f0>
 80016ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016ee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016f2:	eeb0 0b47 	vmov.f64	d0, d7
 80016f6:	f00e f92f 	bl	800f958 <pow>
 80016fa:	eeb0 7b40 	vmov.f64	d7, d0
 80016fe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80018f0 <inverseKinematic+0x418>
 8001702:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001706:	ed97 7b02 	vldr	d7, [r7, #8]
 800170a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 80018e0 <inverseKinematic+0x408>
 800170e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001712:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001716:	eeb0 0b47 	vmov.f64	d0, d7
 800171a:	f00e f91d 	bl	800f958 <pow>
 800171e:	eeb0 7b40 	vmov.f64	d7, d0
 8001722:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001726:	ed97 7b04 	vldr	d7, [r7, #16]
 800172a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800172e:	eeb0 0b47 	vmov.f64	d0, d7
 8001732:	f00e f911 	bl	800f958 <pow>
 8001736:	eeb0 7b40 	vmov.f64	d7, d0
 800173a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800173e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80018f8 <inverseKinematic+0x420>
 8001742:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001746:	ed97 7b04 	vldr	d7, [r7, #16]
 800174a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800174e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001752:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001756:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80018d8 <inverseKinematic+0x400>
 800175a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <inverseKinematic+0x458>)
 8001760:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001764:	ed97 7b00 	vldr	d7, [r7]
 8001768:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80018c8 <inverseKinematic+0x3f0>
 800176c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001770:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80018d0 <inverseKinematic+0x3f8>
 8001774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001778:	ed97 7b02 	vldr	d7, [r7, #8]
 800177c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 80018e0 <inverseKinematic+0x408>
 8001780:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001784:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001788:	ee36 7b47 	vsub.f64	d7, d6, d7
 800178c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80018e8 <inverseKinematic+0x410>
 8001790:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001794:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80018c0 <inverseKinematic+0x3e8>
 8001798:	ee37 5b06 	vadd.f64	d5, d7, d6
 800179c:	ed97 7b04 	vldr	d7, [r7, #16]
 80017a0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017a8:	ee37 8b07 	vadd.f64	d8, d7, d7
 80017ac:	ed97 7b00 	vldr	d7, [r7]
 80017b0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80018c8 <inverseKinematic+0x3f0>
 80017b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017bc:	eeb0 0b47 	vmov.f64	d0, d7
 80017c0:	f00e f8ca 	bl	800f958 <pow>
 80017c4:	eeb0 9b40 	vmov.f64	d9, d0
 80017c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80017cc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80018e0 <inverseKinematic+0x408>
 80017d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017d8:	eeb0 0b47 	vmov.f64	d0, d7
 80017dc:	f00e f8bc 	bl	800f958 <pow>
 80017e0:	eeb0 7b40 	vmov.f64	d7, d0
 80017e4:	ee39 9b07 	vadd.f64	d9, d9, d7
 80017e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80017ec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f0:	eeb0 0b47 	vmov.f64	d0, d7
 80017f4:	f00e f8b0 	bl	800f958 <pow>
 80017f8:	eeb0 7b40 	vmov.f64	d7, d0
 80017fc:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001800:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80018f8 <inverseKinematic+0x420>
 8001804:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001808:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001910 <inverseKinematic+0x438>
 800180c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001810:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001918 <inverseKinematic+0x440>
 8001814:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001818:	ed97 7b04 	vldr	d7, [r7, #16]
 800181c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001820:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001824:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001828:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80018d8 <inverseKinematic+0x400>
 800182c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <inverseKinematic+0x45c>)
 8001832:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8001836:	ed97 7b02 	vldr	d7, [r7, #8]
 800183a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80018b8 <inverseKinematic+0x3e0>
 800183e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001842:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001846:	eeb0 0b47 	vmov.f64	d0, d7
 800184a:	f00e f885 	bl	800f958 <pow>
 800184e:	eeb0 8b40 	vmov.f64	d8, d0
 8001852:	ed97 7b04 	vldr	d7, [r7, #16]
 8001856:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800185a:	eeb0 0b47 	vmov.f64	d0, d7
 800185e:	f00e f87b 	bl	800f958 <pow>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	ee38 7b07 	vadd.f64	d7, d8, d7
 800186a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80018f8 <inverseKinematic+0x420>
 800186e:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001872:	ed97 7b00 	vldr	d7, [r7]
 8001876:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800187a:	eeb0 0b47 	vmov.f64	d0, d7
 800187e:	f00e f86b 	bl	800f958 <pow>
 8001882:	eeb0 7b40 	vmov.f64	d7, d0
 8001886:	ee38 7b07 	vadd.f64	d7, d8, d7
 800188a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001910 <inverseKinematic+0x438>
 800188e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001892:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001918 <inverseKinematic+0x440>
 8001896:	ee37 6b06 	vadd.f64	d6, d7, d6
 800189a:	ed97 7b04 	vldr	d7, [r7, #16]
 800189e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80018a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018aa:	eeb0 0b45 	vmov.f64	d0, d5
 80018ae:	f00e f853 	bl	800f958 <pow>
 80018b2:	eeb0 7b40 	vmov.f64	d7, d0
 80018b6:	e03f      	b.n	8001938 <inverseKinematic+0x460>
 80018b8:	1eb851ec 	.word	0x1eb851ec
 80018bc:	3fb1eb85 	.word	0x3fb1eb85
 80018c0:	24dd2f1b 	.word	0x24dd2f1b
 80018c4:	3fc58106 	.word	0x3fc58106
 80018c8:	5625749b 	.word	0x5625749b
 80018cc:	3faf09d1 	.word	0x3faf09d1
 80018d0:	e8584caa 	.word	0xe8584caa
 80018d4:	400bb67a 	.word	0x400bb67a
 80018d8:	24dd2f1d 	.word	0x24dd2f1d
 80018dc:	3fe58106 	.word	0x3fe58106
 80018e0:	1eb851ec 	.word	0x1eb851ec
 80018e4:	3fa1eb85 	.word	0x3fa1eb85
 80018e8:	9ba5e356 	.word	0x9ba5e356
 80018ec:	3fe020c4 	.word	0x3fe020c4
 80018f0:	f705857e 	.word	0xf705857e
 80018f4:	3f881e03 	.word	0x3f881e03
 80018f8:	70a3d70a 	.word	0x70a3d70a
 80018fc:	3fd70a3d 	.word	0x3fd70a3d
 8001900:	24dd2f1b 	.word	0x24dd2f1b
 8001904:	3fd58106 	.word	0x3fd58106
 8001908:	e8584caa 	.word	0xe8584caa
 800190c:	c00bb67a 	.word	0xc00bb67a
 8001910:	93d96639 	.word	0x93d96639
 8001914:	3f9ce6c0 	.word	0x3f9ce6c0
 8001918:	47ae147c 	.word	0x47ae147c
 800191c:	3fa47ae1 	.word	0x3fa47ae1
 8001920:	24000278 	.word	0x24000278
 8001924:	240002c0 	.word	0x240002c0
 8001928:	24000308 	.word	0x24000308
 800192c:	24000280 	.word	0x24000280
 8001930:	240002c8 	.word	0x240002c8
 8001934:	24000310 	.word	0x24000310
 8001938:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001cb8 <inverseKinematic+0x7e0>
 800193c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001940:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001cc0 <inverseKinematic+0x7e8>
 8001944:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001948:	4be7      	ldr	r3, [pc, #924]	; (8001ce8 <inverseKinematic+0x810>)
 800194a:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 800194e:	ed97 7b00 	vldr	d7, [r7]
 8001952:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001cc8 <inverseKinematic+0x7f0>
 8001956:	ee37 7b06 	vadd.f64	d7, d7, d6
 800195a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800195e:	eeb0 0b47 	vmov.f64	d0, d7
 8001962:	f00d fff9 	bl	800f958 <pow>
 8001966:	eeb0 7b40 	vmov.f64	d7, d0
 800196a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001cd0 <inverseKinematic+0x7f8>
 800196e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001972:	ed97 7b02 	vldr	d7, [r7, #8]
 8001976:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001cd8 <inverseKinematic+0x800>
 800197a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800197e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001982:	eeb0 0b47 	vmov.f64	d0, d7
 8001986:	f00d ffe7 	bl	800f958 <pow>
 800198a:	eeb0 7b40 	vmov.f64	d7, d0
 800198e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001992:	ed97 7b04 	vldr	d7, [r7, #16]
 8001996:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800199a:	eeb0 0b47 	vmov.f64	d0, d7
 800199e:	f00d ffdb 	bl	800f958 <pow>
 80019a2:	eeb0 7b40 	vmov.f64	d7, d0
 80019a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019aa:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001ce0 <inverseKinematic+0x808>
 80019ae:	ee37 6b46 	vsub.f64	d6, d7, d6
 80019b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019ba:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80019be:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019c2:	eeb0 0b45 	vmov.f64	d0, d5
 80019c6:	f00d ffc7 	bl	800f958 <pow>
 80019ca:	eeb0 7b40 	vmov.f64	d7, d0
 80019ce:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001cd0 <inverseKinematic+0x7f8>
 80019d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019d6:	4bc5      	ldr	r3, [pc, #788]	; (8001cec <inverseKinematic+0x814>)
 80019d8:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 80019dc:	ed97 7b00 	vldr	d7, [r7]
 80019e0:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001cc8 <inverseKinematic+0x7f0>
 80019e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019ec:	eeb0 0b47 	vmov.f64	d0, d7
 80019f0:	f00d ffb2 	bl	800f958 <pow>
 80019f4:	eeb0 8b40 	vmov.f64	d8, d0
 80019f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80019fc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001cd8 <inverseKinematic+0x800>
 8001a00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a04:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a08:	eeb0 0b47 	vmov.f64	d0, d7
 8001a0c:	f00d ffa4 	bl	800f958 <pow>
 8001a10:	eeb0 7b40 	vmov.f64	d7, d0
 8001a14:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001a18:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a20:	eeb0 0b47 	vmov.f64	d0, d7
 8001a24:	f00d ff98 	bl	800f958 <pow>
 8001a28:	eeb0 7b40 	vmov.f64	d7, d0
 8001a2c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a30:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001ce0 <inverseKinematic+0x808>
 8001a34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a38:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001cc0 <inverseKinematic+0x7e8>
 8001a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a40:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001cb8 <inverseKinematic+0x7e0>
 8001a44:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a48:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a4c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a50:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a58:	eeb0 0b45 	vmov.f64	d0, d5
 8001a5c:	f00d ff7c 	bl	800f958 <pow>
 8001a60:	eeb0 7b40 	vmov.f64	d7, d0
 8001a64:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001cd0 <inverseKinematic+0x7f8>
 8001a68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a6c:	4ba0      	ldr	r3, [pc, #640]	; (8001cf0 <inverseKinematic+0x818>)
 8001a6e:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001a72:	4ba0      	ldr	r3, [pc, #640]	; (8001cf4 <inverseKinematic+0x81c>)
 8001a74:	ed93 7b00 	vldr	d7, [r3]
 8001a78:	eeb1 8b47 	vneg.f64	d8, d7
 8001a7c:	4b9d      	ldr	r3, [pc, #628]	; (8001cf4 <inverseKinematic+0x81c>)
 8001a7e:	ed93 7b00 	vldr	d7, [r3]
 8001a82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a86:	eeb0 0b47 	vmov.f64	d0, d7
 8001a8a:	f00d ff65 	bl	800f958 <pow>
 8001a8e:	eeb0 5b40 	vmov.f64	d5, d0
 8001a92:	4b99      	ldr	r3, [pc, #612]	; (8001cf8 <inverseKinematic+0x820>)
 8001a94:	ed93 7b00 	vldr	d7, [r3]
 8001a98:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001a9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001aa0:	4b91      	ldr	r3, [pc, #580]	; (8001ce8 <inverseKinematic+0x810>)
 8001aa2:	ed93 7b00 	vldr	d7, [r3]
 8001aa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001aaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001aae:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab2:	f00e f9d1 	bl	800fe58 <sqrt>
 8001ab6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aba:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001abe:	4b8e      	ldr	r3, [pc, #568]	; (8001cf8 <inverseKinematic+0x820>)
 8001ac0:	ed93 7b00 	vldr	d7, [r3]
 8001ac4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001ac8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001acc:	4b8b      	ldr	r3, [pc, #556]	; (8001cfc <inverseKinematic+0x824>)
 8001ace:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <inverseKinematic+0x81c>)
 8001ad4:	ed93 7b00 	vldr	d7, [r3]
 8001ad8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001adc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ae0:	f00d ff3a 	bl	800f958 <pow>
 8001ae4:	eeb0 5b40 	vmov.f64	d5, d0
 8001ae8:	4b83      	ldr	r3, [pc, #524]	; (8001cf8 <inverseKinematic+0x820>)
 8001aea:	ed93 7b00 	vldr	d7, [r3]
 8001aee:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001af2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001af6:	4b7c      	ldr	r3, [pc, #496]	; (8001ce8 <inverseKinematic+0x810>)
 8001af8:	ed93 7b00 	vldr	d7, [r3]
 8001afc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b00:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b04:	eeb0 0b47 	vmov.f64	d0, d7
 8001b08:	f00e f9a6 	bl	800fe58 <sqrt>
 8001b0c:	eeb0 6b40 	vmov.f64	d6, d0
 8001b10:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <inverseKinematic+0x81c>)
 8001b12:	ed93 7b00 	vldr	d7, [r3]
 8001b16:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001b1a:	4b77      	ldr	r3, [pc, #476]	; (8001cf8 <inverseKinematic+0x820>)
 8001b1c:	ed93 7b00 	vldr	d7, [r3]
 8001b20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001b24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <inverseKinematic+0x828>)
 8001b2a:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001b2e:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <inverseKinematic+0x82c>)
 8001b30:	ed93 7b00 	vldr	d7, [r3]
 8001b34:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b38:	eeb0 0b47 	vmov.f64	d0, d7
 8001b3c:	f00d ff0c 	bl	800f958 <pow>
 8001b40:	eeb0 5b40 	vmov.f64	d5, d0
 8001b44:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <inverseKinematic+0x830>)
 8001b46:	ed93 7b00 	vldr	d7, [r3]
 8001b4a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001b4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b52:	4b66      	ldr	r3, [pc, #408]	; (8001cec <inverseKinematic+0x814>)
 8001b54:	ed93 7b00 	vldr	d7, [r3]
 8001b58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001b60:	eeb0 0b47 	vmov.f64	d0, d7
 8001b64:	f00e f978 	bl	800fe58 <sqrt>
 8001b68:	eeb0 6b40 	vmov.f64	d6, d0
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <inverseKinematic+0x82c>)
 8001b6e:	ed93 7b00 	vldr	d7, [r3]
 8001b72:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001b76:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <inverseKinematic+0x830>)
 8001b78:	ed93 7b00 	vldr	d7, [r3]
 8001b7c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001b80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b84:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <inverseKinematic+0x834>)
 8001b86:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <inverseKinematic+0x82c>)
 8001b8c:	ed93 7b00 	vldr	d7, [r3]
 8001b90:	eeb1 8b47 	vneg.f64	d8, d7
 8001b94:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <inverseKinematic+0x82c>)
 8001b96:	ed93 7b00 	vldr	d7, [r3]
 8001b9a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba2:	f00d fed9 	bl	800f958 <pow>
 8001ba6:	eeb0 5b40 	vmov.f64	d5, d0
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <inverseKinematic+0x830>)
 8001bac:	ed93 7b00 	vldr	d7, [r3]
 8001bb0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001bb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <inverseKinematic+0x814>)
 8001bba:	ed93 7b00 	vldr	d7, [r3]
 8001bbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8001bca:	f00e f945 	bl	800fe58 <sqrt>
 8001bce:	eeb0 7b40 	vmov.f64	d7, d0
 8001bd2:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <inverseKinematic+0x830>)
 8001bd8:	ed93 7b00 	vldr	d7, [r3]
 8001bdc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001be0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <inverseKinematic+0x838>)
 8001be6:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <inverseKinematic+0x83c>)
 8001bec:	ed93 7b00 	vldr	d7, [r3]
 8001bf0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bf8:	f00d feae 	bl	800f958 <pow>
 8001bfc:	eeb0 5b40 	vmov.f64	d5, d0
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <inverseKinematic+0x840>)
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <inverseKinematic+0x818>)
 8001c10:	ed93 7b00 	vldr	d7, [r3]
 8001c14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c20:	f00e f91a 	bl	800fe58 <sqrt>
 8001c24:	eeb0 6b40 	vmov.f64	d6, d0
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <inverseKinematic+0x83c>)
 8001c2a:	ed93 7b00 	vldr	d7, [r3]
 8001c2e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <inverseKinematic+0x840>)
 8001c34:	ed93 7b00 	vldr	d7, [r3]
 8001c38:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c3c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <inverseKinematic+0x844>)
 8001c42:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001c46:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <inverseKinematic+0x83c>)
 8001c48:	ed93 7b00 	vldr	d7, [r3]
 8001c4c:	eeb1 8b47 	vneg.f64	d8, d7
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <inverseKinematic+0x83c>)
 8001c52:	ed93 7b00 	vldr	d7, [r3]
 8001c56:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c5a:	eeb0 0b47 	vmov.f64	d0, d7
 8001c5e:	f00d fe7b 	bl	800f958 <pow>
 8001c62:	eeb0 5b40 	vmov.f64	d5, d0
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <inverseKinematic+0x840>)
 8001c68:	ed93 7b00 	vldr	d7, [r3]
 8001c6c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <inverseKinematic+0x818>)
 8001c76:	ed93 7b00 	vldr	d7, [r3]
 8001c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c7e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c82:	eeb0 0b47 	vmov.f64	d0, d7
 8001c86:	f00e f8e7 	bl	800fe58 <sqrt>
 8001c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <inverseKinematic+0x840>)
 8001c94:	ed93 7b00 	vldr	d7, [r3]
 8001c98:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <inverseKinematic+0x848>)
 8001ca2:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001ca6:	491f      	ldr	r1, [pc, #124]	; (8001d24 <inverseKinematic+0x84c>)
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9c1 2300 	strd	r2, r3, [r1]
 8001cb4:	e038      	b.n	8001d28 <inverseKinematic+0x850>
 8001cb6:	bf00      	nop
 8001cb8:	47ae147c 	.word	0x47ae147c
 8001cbc:	3fa47ae1 	.word	0x3fa47ae1
 8001cc0:	93d96639 	.word	0x93d96639
 8001cc4:	3f9ce6c0 	.word	0x3f9ce6c0
 8001cc8:	5625749b 	.word	0x5625749b
 8001ccc:	3faf09d1 	.word	0x3faf09d1
 8001cd0:	f705857e 	.word	0xf705857e
 8001cd4:	3f881e03 	.word	0x3f881e03
 8001cd8:	1eb851ec 	.word	0x1eb851ec
 8001cdc:	3fa1eb85 	.word	0x3fa1eb85
 8001ce0:	70a3d70a 	.word	0x70a3d70a
 8001ce4:	3fd70a3d 	.word	0x3fd70a3d
 8001ce8:	24000288 	.word	0x24000288
 8001cec:	240002d0 	.word	0x240002d0
 8001cf0:	24000318 	.word	0x24000318
 8001cf4:	24000280 	.word	0x24000280
 8001cf8:	24000278 	.word	0x24000278
 8001cfc:	240002a0 	.word	0x240002a0
 8001d00:	240002a8 	.word	0x240002a8
 8001d04:	240002c8 	.word	0x240002c8
 8001d08:	240002c0 	.word	0x240002c0
 8001d0c:	240002e8 	.word	0x240002e8
 8001d10:	240002f0 	.word	0x240002f0
 8001d14:	24000310 	.word	0x24000310
 8001d18:	24000308 	.word	0x24000308
 8001d1c:	24000330 	.word	0x24000330
 8001d20:	24000338 	.word	0x24000338
 8001d24:	24000290 	.word	0x24000290
	XJ1_2 = 0;
 8001d28:	49f1      	ldr	r1, [pc, #964]	; (80020f0 <inverseKinematic+0xc18>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001d36:	4bef      	ldr	r3, [pc, #956]	; (80020f4 <inverseKinematic+0xc1c>)
 8001d38:	ed93 7b00 	vldr	d7, [r3]
 8001d3c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002088 <inverseKinematic+0xbb0>
 8001d40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d44:	4bec      	ldr	r3, [pc, #944]	; (80020f8 <inverseKinematic+0xc20>)
 8001d46:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001d4a:	4bec      	ldr	r3, [pc, #944]	; (80020fc <inverseKinematic+0xc24>)
 8001d4c:	ed93 7b00 	vldr	d7, [r3]
 8001d50:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002088 <inverseKinematic+0xbb0>
 8001d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d58:	4be9      	ldr	r3, [pc, #932]	; (8002100 <inverseKinematic+0xc28>)
 8001d5a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001d5e:	4be9      	ldr	r3, [pc, #932]	; (8002104 <inverseKinematic+0xc2c>)
 8001d60:	ed93 7b00 	vldr	d7, [r3]
 8001d64:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002090 <inverseKinematic+0xbb8>
 8001d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d6c:	4be6      	ldr	r3, [pc, #920]	; (8002108 <inverseKinematic+0xc30>)
 8001d6e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001d72:	4be6      	ldr	r3, [pc, #920]	; (800210c <inverseKinematic+0xc34>)
 8001d74:	ed93 7b00 	vldr	d7, [r3]
 8001d78:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002090 <inverseKinematic+0xbb8>
 8001d7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d80:	4be3      	ldr	r3, [pc, #908]	; (8002110 <inverseKinematic+0xc38>)
 8001d82:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001d86:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d8a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002098 <inverseKinematic+0xbc0>
 8001d8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d92:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80020a0 <inverseKinematic+0xbc8>
 8001d96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d9a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001d9e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001da2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001da6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001daa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001dae:	4bd9      	ldr	r3, [pc, #868]	; (8002114 <inverseKinematic+0xc3c>)
 8001db0:	ed93 7b00 	vldr	d7, [r3]
 8001db4:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001db8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dbc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002098 <inverseKinematic+0xbc0>
 8001dc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001dcc:	f00d fdc4 	bl	800f958 <pow>
 8001dd0:	eeb0 9b40 	vmov.f64	d9, d0
 8001dd4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001dd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8001de0:	f00d fdba 	bl	800f958 <pow>
 8001de4:	eeb0 7b40 	vmov.f64	d7, d0
 8001de8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001dec:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80020a8 <inverseKinematic+0xbd0>
 8001df0:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001df4:	ed97 7b00 	vldr	d7, [r7]
 8001df8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dfc:	eeb0 0b47 	vmov.f64	d0, d7
 8001e00:	f00d fdaa 	bl	800f958 <pow>
 8001e04:	eeb0 7b40 	vmov.f64	d7, d0
 8001e08:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e0c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80020b0 <inverseKinematic+0xbd8>
 8001e10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e14:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80020b8 <inverseKinematic+0xbe0>
 8001e18:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001e1c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e28:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001e2c:	4bba      	ldr	r3, [pc, #744]	; (8002118 <inverseKinematic+0xc40>)
 8001e2e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001e32:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e36:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002098 <inverseKinematic+0xbc0>
 8001e3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e3e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80020a0 <inverseKinematic+0xbc8>
 8001e42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e46:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001e4a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001e4e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001e5a:	4bb0      	ldr	r3, [pc, #704]	; (800211c <inverseKinematic+0xc44>)
 8001e5c:	ed93 7b00 	vldr	d7, [r3]
 8001e60:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001e64:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e68:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002098 <inverseKinematic+0xbc0>
 8001e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e74:	eeb0 0b47 	vmov.f64	d0, d7
 8001e78:	f00d fd6e 	bl	800f958 <pow>
 8001e7c:	eeb0 9b40 	vmov.f64	d9, d0
 8001e80:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e84:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e88:	eeb0 0b47 	vmov.f64	d0, d7
 8001e8c:	f00d fd64 	bl	800f958 <pow>
 8001e90:	eeb0 7b40 	vmov.f64	d7, d0
 8001e94:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e98:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80020a8 <inverseKinematic+0xbd0>
 8001e9c:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001ea0:	ed97 7b00 	vldr	d7, [r7]
 8001ea4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8001eac:	f00d fd54 	bl	800f958 <pow>
 8001eb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001eb4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001eb8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80020b0 <inverseKinematic+0xbd8>
 8001ebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ec0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80020b8 <inverseKinematic+0xbe0>
 8001ec4:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001ec8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ecc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001ed0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ed4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001ed8:	4b91      	ldr	r3, [pc, #580]	; (8002120 <inverseKinematic+0xc48>)
 8001eda:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001ede:	ed97 7b00 	vldr	d7, [r7]
 8001ee2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80020c0 <inverseKinematic+0xbe8>
 8001ee6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80020c8 <inverseKinematic+0xbf0>
 8001eee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ef2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ef6:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80020d0 <inverseKinematic+0xbf8>
 8001efa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001efe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f06:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80020d8 <inverseKinematic+0xc00>
 8001f0a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001f0e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f16:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f1a:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <inverseKinematic+0xc1c>)
 8001f1c:	ed93 7b00 	vldr	d7, [r3]
 8001f20:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001f24:	ed97 7b00 	vldr	d7, [r7]
 8001f28:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80020c0 <inverseKinematic+0xbe8>
 8001f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f30:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f34:	eeb0 0b47 	vmov.f64	d0, d7
 8001f38:	f00d fd0e 	bl	800f958 <pow>
 8001f3c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f40:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80020e0 <inverseKinematic+0xc08>
 8001f44:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001f48:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f4c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80020d0 <inverseKinematic+0xbf8>
 8001f50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f58:	eeb0 0b47 	vmov.f64	d0, d7
 8001f5c:	f00d fcfc 	bl	800f958 <pow>
 8001f60:	eeb0 7b40 	vmov.f64	d7, d0
 8001f64:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001f68:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f70:	eeb0 0b47 	vmov.f64	d0, d7
 8001f74:	f00d fcf0 	bl	800f958 <pow>
 8001f78:	eeb0 7b40 	vmov.f64	d7, d0
 8001f7c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f80:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80020a8 <inverseKinematic+0xbd0>
 8001f84:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001f88:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f8c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001f90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f94:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <inverseKinematic+0xc4c>)
 8001f9a:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001f9e:	ed97 7b00 	vldr	d7, [r7]
 8001fa2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80020c0 <inverseKinematic+0xbe8>
 8001fa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001faa:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80020c8 <inverseKinematic+0xbf0>
 8001fae:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fb2:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fb6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80020d0 <inverseKinematic+0xbf8>
 8001fba:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001fbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fc6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80020d8 <inverseKinematic+0xc00>
 8001fca:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001fce:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fd6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <inverseKinematic+0xc24>)
 8001fdc:	ed93 7b00 	vldr	d7, [r3]
 8001fe0:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fe4:	ed97 7b00 	vldr	d7, [r7]
 8001fe8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80020c0 <inverseKinematic+0xbe8>
 8001fec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ff0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ff4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff8:	f00d fcae 	bl	800f958 <pow>
 8001ffc:	eeb0 7b40 	vmov.f64	d7, d0
 8002000:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80020e0 <inverseKinematic+0xc08>
 8002004:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002008:	ed97 7b02 	vldr	d7, [r7, #8]
 800200c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80020d0 <inverseKinematic+0xbf8>
 8002010:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002014:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002018:	eeb0 0b47 	vmov.f64	d0, d7
 800201c:	f00d fc9c 	bl	800f958 <pow>
 8002020:	eeb0 7b40 	vmov.f64	d7, d0
 8002024:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002028:	ed97 7b04 	vldr	d7, [r7, #16]
 800202c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002030:	eeb0 0b47 	vmov.f64	d0, d7
 8002034:	f00d fc90 	bl	800f958 <pow>
 8002038:	eeb0 7b40 	vmov.f64	d7, d0
 800203c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002040:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80020a8 <inverseKinematic+0xbd0>
 8002044:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002048:	ed97 7b04 	vldr	d7, [r7, #16]
 800204c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002054:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002058:	4b33      	ldr	r3, [pc, #204]	; (8002128 <inverseKinematic+0xc50>)
 800205a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800205e:	ed97 7b00 	vldr	d7, [r7]
 8002062:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80020c0 <inverseKinematic+0xbe8>
 8002066:	ee37 7b46 	vsub.f64	d7, d7, d6
 800206a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80020e8 <inverseKinematic+0xc10>
 800206e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002072:	ed97 7b02 	vldr	d7, [r7, #8]
 8002076:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80020d0 <inverseKinematic+0xbf8>
 800207a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800207e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002082:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002086:	e051      	b.n	800212c <inverseKinematic+0xc54>
 8002088:	e8584caa 	.word	0xe8584caa
 800208c:	3ffbb67a 	.word	0x3ffbb67a
 8002090:	e8584caa 	.word	0xe8584caa
 8002094:	bffbb67a 	.word	0xbffbb67a
 8002098:	1eb851ec 	.word	0x1eb851ec
 800209c:	3fb1eb85 	.word	0x3fb1eb85
 80020a0:	24dd2f1b 	.word	0x24dd2f1b
 80020a4:	3fc58106 	.word	0x3fc58106
 80020a8:	70a3d70a 	.word	0x70a3d70a
 80020ac:	3fd70a3d 	.word	0x3fd70a3d
 80020b0:	93d96639 	.word	0x93d96639
 80020b4:	3f9ce6c0 	.word	0x3f9ce6c0
 80020b8:	47ae147c 	.word	0x47ae147c
 80020bc:	3fa47ae1 	.word	0x3fa47ae1
 80020c0:	5625749b 	.word	0x5625749b
 80020c4:	3faf09d1 	.word	0x3faf09d1
 80020c8:	e8584caa 	.word	0xe8584caa
 80020cc:	c00bb67a 	.word	0xc00bb67a
 80020d0:	1eb851ec 	.word	0x1eb851ec
 80020d4:	3fa1eb85 	.word	0x3fa1eb85
 80020d8:	24dd2f1d 	.word	0x24dd2f1d
 80020dc:	3fe58106 	.word	0x3fe58106
 80020e0:	f705857e 	.word	0xf705857e
 80020e4:	3f881e03 	.word	0x3f881e03
 80020e8:	e8584caa 	.word	0xe8584caa
 80020ec:	400bb67a 	.word	0x400bb67a
 80020f0:	24000298 	.word	0x24000298
 80020f4:	240002e8 	.word	0x240002e8
 80020f8:	240002d8 	.word	0x240002d8
 80020fc:	240002f0 	.word	0x240002f0
 8002100:	240002e0 	.word	0x240002e0
 8002104:	24000330 	.word	0x24000330
 8002108:	24000320 	.word	0x24000320
 800210c:	24000338 	.word	0x24000338
 8002110:	24000328 	.word	0x24000328
 8002114:	240002a0 	.word	0x240002a0
 8002118:	240002b0 	.word	0x240002b0
 800211c:	240002a8 	.word	0x240002a8
 8002120:	240002b8 	.word	0x240002b8
 8002124:	240002f8 	.word	0x240002f8
 8002128:	24000300 	.word	0x24000300
 800212c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002370 <inverseKinematic+0xe98>
 8002130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002134:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002378 <inverseKinematic+0xea0>
 8002138:	ee37 5b06 	vadd.f64	d5, d7, d6
 800213c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002140:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002144:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002148:	4b9f      	ldr	r3, [pc, #636]	; (80023c8 <inverseKinematic+0xef0>)
 800214a:	ed93 7b00 	vldr	d7, [r3]
 800214e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002152:	ed97 7b00 	vldr	d7, [r7]
 8002156:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002380 <inverseKinematic+0xea8>
 800215a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800215e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002162:	eeb0 0b47 	vmov.f64	d0, d7
 8002166:	f00d fbf7 	bl	800f958 <pow>
 800216a:	eeb0 9b40 	vmov.f64	d9, d0
 800216e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002172:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002388 <inverseKinematic+0xeb0>
 8002176:	ee37 7b06 	vadd.f64	d7, d7, d6
 800217a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800217e:	eeb0 0b47 	vmov.f64	d0, d7
 8002182:	f00d fbe9 	bl	800f958 <pow>
 8002186:	eeb0 7b40 	vmov.f64	d7, d0
 800218a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800218e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002192:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002196:	eeb0 0b47 	vmov.f64	d0, d7
 800219a:	f00d fbdd 	bl	800f958 <pow>
 800219e:	eeb0 7b40 	vmov.f64	d7, d0
 80021a2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80021a6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002390 <inverseKinematic+0xeb8>
 80021aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021ae:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002398 <inverseKinematic+0xec0>
 80021b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80023a0 <inverseKinematic+0xec8>
 80021ba:	ee37 5b06 	vadd.f64	d5, d7, d6
 80021be:	ed97 7b04 	vldr	d7, [r7, #16]
 80021c2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021ca:	ee38 7b07 	vadd.f64	d7, d8, d7
 80021ce:	4b7f      	ldr	r3, [pc, #508]	; (80023cc <inverseKinematic+0xef4>)
 80021d0:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80021d4:	ed97 7b00 	vldr	d7, [r7]
 80021d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002380 <inverseKinematic+0xea8>
 80021dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021e0:	ed9f 6b71 	vldr	d6, [pc, #452]	; 80023a8 <inverseKinematic+0xed0>
 80021e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021e8:	ed97 7b02 	vldr	d7, [r7, #8]
 80021ec:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002388 <inverseKinematic+0xeb0>
 80021f0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021fc:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002370 <inverseKinematic+0xe98>
 8002200:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002204:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002378 <inverseKinematic+0xea0>
 8002208:	ee37 5b06 	vadd.f64	d5, d7, d6
 800220c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002210:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002214:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002218:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <inverseKinematic+0xef8>)
 800221a:	ed93 7b00 	vldr	d7, [r3]
 800221e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002222:	ed97 7b00 	vldr	d7, [r7]
 8002226:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002380 <inverseKinematic+0xea8>
 800222a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002232:	eeb0 0b47 	vmov.f64	d0, d7
 8002236:	f00d fb8f 	bl	800f958 <pow>
 800223a:	eeb0 9b40 	vmov.f64	d9, d0
 800223e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002242:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002388 <inverseKinematic+0xeb0>
 8002246:	ee37 7b06 	vadd.f64	d7, d7, d6
 800224a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800224e:	eeb0 0b47 	vmov.f64	d0, d7
 8002252:	f00d fb81 	bl	800f958 <pow>
 8002256:	eeb0 7b40 	vmov.f64	d7, d0
 800225a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800225e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002262:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002266:	eeb0 0b47 	vmov.f64	d0, d7
 800226a:	f00d fb75 	bl	800f958 <pow>
 800226e:	eeb0 7b40 	vmov.f64	d7, d0
 8002272:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002276:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002390 <inverseKinematic+0xeb8>
 800227a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800227e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002398 <inverseKinematic+0xec0>
 8002282:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002286:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80023a0 <inverseKinematic+0xec8>
 800228a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800228e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002292:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002296:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800229a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <inverseKinematic+0xefc>)
 80022a0:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <inverseKinematic+0xf00>)
 80022a6:	ed93 7b00 	vldr	d7, [r3]
 80022aa:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80023b0 <inverseKinematic+0xed8>
 80022ae:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022b2:	eeb0 0b46 	vmov.f64	d0, d6
 80022b6:	f00d fda1 	bl	800fdfc <asin>
 80022ba:	eeb0 7b40 	vmov.f64	d7, d0
 80022be:	eeb1 7b47 	vneg.f64	d7, d7
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <inverseKinematic+0xf04>)
 80022c4:	ed83 7b02 	vstr	d7, [r3, #8]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 80022c8:	4b44      	ldr	r3, [pc, #272]	; (80023dc <inverseKinematic+0xf04>)
 80022ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80022ce:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80023b8 <inverseKinematic+0xee0>
 80022d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022d6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 80023c0 <inverseKinematic+0xee8>
 80022da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <inverseKinematic+0xf04>)
 80022e0:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 80022e4:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <inverseKinematic+0xf08>)
 80022e6:	ed93 7b00 	vldr	d7, [r3]
 80022ea:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80023b0 <inverseKinematic+0xed8>
 80022ee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022f2:	eeb0 0b46 	vmov.f64	d0, d6
 80022f6:	f00d fd81 	bl	800fdfc <asin>
 80022fa:	eeb0 7b40 	vmov.f64	d7, d0
 80022fe:	eeb1 7b47 	vneg.f64	d7, d7
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <inverseKinematic+0xf0c>)
 8002304:	ed83 7b02 	vstr	d7, [r3, #8]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <inverseKinematic+0xf0c>)
 800230a:	ed93 7b02 	vldr	d7, [r3, #8]
 800230e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80023b8 <inverseKinematic+0xee0>
 8002312:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002316:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80023c0 <inverseKinematic+0xee8>
 800231a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <inverseKinematic+0xf0c>)
 8002320:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <inverseKinematic+0xef4>)
 8002326:	ed93 7b00 	vldr	d7, [r3]
 800232a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80023b0 <inverseKinematic+0xed8>
 800232e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002332:	eeb0 0b46 	vmov.f64	d0, d6
 8002336:	f00d fd61 	bl	800fdfc <asin>
 800233a:	eeb0 7b40 	vmov.f64	d7, d0
 800233e:	eeb1 7b47 	vneg.f64	d7, d7
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <inverseKinematic+0xf10>)
 8002344:	ed83 7b02 	vstr	d7, [r3, #8]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <inverseKinematic+0xf10>)
 800234a:	ed93 7b02 	vldr	d7, [r3, #8]
 800234e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80023b8 <inverseKinematic+0xee0>
 8002352:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002356:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80023c0 <inverseKinematic+0xee8>
 800235a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <inverseKinematic+0xf10>)
 8002360:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	ecbd 8b04 	vpop	{d8-d9}
 800236e:	bd80      	pop	{r7, pc}
 8002370:	9ba5e356 	.word	0x9ba5e356
 8002374:	3fe020c4 	.word	0x3fe020c4
 8002378:	24dd2f1b 	.word	0x24dd2f1b
 800237c:	3fc58106 	.word	0x3fc58106
 8002380:	5625749b 	.word	0x5625749b
 8002384:	3faf09d1 	.word	0x3faf09d1
 8002388:	1eb851ec 	.word	0x1eb851ec
 800238c:	3fa1eb85 	.word	0x3fa1eb85
 8002390:	70a3d70a 	.word	0x70a3d70a
 8002394:	3fd70a3d 	.word	0x3fd70a3d
 8002398:	93d96639 	.word	0x93d96639
 800239c:	3f9ce6c0 	.word	0x3f9ce6c0
 80023a0:	47ae147c 	.word	0x47ae147c
 80023a4:	3fa47ae1 	.word	0x3fa47ae1
 80023a8:	e8584caa 	.word	0xe8584caa
 80023ac:	400bb67a 	.word	0x400bb67a
 80023b0:	9999999a 	.word	0x9999999a
 80023b4:	3fc99999 	.word	0x3fc99999
 80023b8:	00000000 	.word	0x00000000
 80023bc:	40668000 	.word	0x40668000
 80023c0:	54442eea 	.word	0x54442eea
 80023c4:	400921fb 	.word	0x400921fb
 80023c8:	24000330 	.word	0x24000330
 80023cc:	24000340 	.word	0x24000340
 80023d0:	24000338 	.word	0x24000338
 80023d4:	24000348 	.word	0x24000348
 80023d8:	240002b0 	.word	0x240002b0
 80023dc:	24000350 	.word	0x24000350
 80023e0:	240002f8 	.word	0x240002f8
 80023e4:	24000390 	.word	0x24000390
 80023e8:	240003d0 	.word	0x240003d0

080023ec <robotInitialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robotInitialization(void){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <robotInitialization+0x7c>)
 80023f2:	f006 f92f 	bl	8008654 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 80023f6:	481d      	ldr	r0, [pc, #116]	; (800246c <robotInitialization+0x80>)
 80023f8:	f006 f92c 	bl	8008654 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 80023fc:	481c      	ldr	r0, [pc, #112]	; (8002470 <robotInitialization+0x84>)
 80023fe:	f006 f929 	bl	8008654 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2110      	movs	r1, #16
 8002406:	481b      	ldr	r0, [pc, #108]	; (8002474 <robotInitialization+0x88>)
 8002408:	f003 fd3c 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2120      	movs	r1, #32
 8002410:	4818      	ldr	r0, [pc, #96]	; (8002474 <robotInitialization+0x88>)
 8002412:	f003 fd37 	bl	8005e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	4816      	ldr	r0, [pc, #88]	; (8002474 <robotInitialization+0x88>)
 800241c:	f003 fd32 	bl	8005e84 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002420:	2032      	movs	r0, #50	; 0x32
 8002422:	f002 fc91 	bl	8004d48 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242c:	4812      	ldr	r0, [pc, #72]	; (8002478 <robotInitialization+0x8c>)
 800242e:	f003 fd29 	bl	8005e84 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <robotInitialization+0x8c>)
 800243a:	f003 fd23 	bl	8005e84 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <robotInitialization+0x8c>)
 8002446:	f003 fd1d 	bl	8005e84 <HAL_GPIO_WritePin>
    Stop_PWM_MOTOR_1;
    Stop_PWM_MOTOR_2;
    Stop_PWM_MOTOR_3;

    */
	motor1.stepReached = false;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <robotInitialization+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor2.stepReached = false;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <robotInitialization+0x94>)
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	motor3.stepReached = false;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <robotInitialization+0x98>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	240006a0 	.word	0x240006a0
 800246c:	240006ec 	.word	0x240006ec
 8002470:	24000738 	.word	0x24000738
 8002474:	58020c00 	.word	0x58020c00
 8002478:	58020800 	.word	0x58020800
 800247c:	24000350 	.word	0x24000350
 8002480:	24000390 	.word	0x24000390
 8002484:	240003d0 	.word	0x240003d0

08002488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800248c:	f002 fbca 	bl	8004c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002490:	f000 fa6c 	bl	800296c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002494:	f7fe faf2 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002498:	f000 feca 	bl	8003230 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800249c:	f002 fa20 	bl	80048e0 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80024a0:	f001 f868 	bl	8003574 <MX_TIM12_Init>
  MX_TIM13_Init();
 80024a4:	f001 f8c8 	bl	8003638 <MX_TIM13_Init>
  MX_TIM14_Init();
 80024a8:	f001 f912 	bl	80036d0 <MX_TIM14_Init>
  MX_TIM5_Init();
 80024ac:	f001 f814 	bl	80034d8 <MX_TIM5_Init>
  MX_TIM15_Init();
 80024b0:	f001 f95a 	bl	8003768 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80024b4:	f002 f9c8 	bl	8004848 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80024b8:	f002 f97a 	bl	80047b0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80024bc:	f000 ff9a 	bl	80033f4 <MX_TIM4_Init>
  MX_TIM3_Init();
 80024c0:	f000 ff26 	bl	8003310 <MX_TIM3_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (state){
 80024c4:	4b9e      	ldr	r3, [pc, #632]	; (8002740 <main+0x2b8>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	f200 821e 	bhi.w	800290a <main+0x482>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <main+0x4c>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	0800279d 	.word	0x0800279d
 80024dc:	080025fd 	.word	0x080025fd
 80024e0:	08002517 	.word	0x08002517
 80024e4:	0800290b 	.word	0x0800290b

		case INIT:

			  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 80024e8:	2364      	movs	r3, #100	; 0x64
 80024ea:	221c      	movs	r2, #28
 80024ec:	4995      	ldr	r1, [pc, #596]	; (8002744 <main+0x2bc>)
 80024ee:	4896      	ldr	r0, [pc, #600]	; (8002748 <main+0x2c0>)
 80024f0:	f008 f856 	bl	800a5a0 <HAL_UART_Transmit>
			  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80024f4:	2201      	movs	r2, #1
 80024f6:	4995      	ldr	r1, [pc, #596]	; (800274c <main+0x2c4>)
 80024f8:	4893      	ldr	r0, [pc, #588]	; (8002748 <main+0x2c0>)
 80024fa:	f008 f8e7 	bl	800a6cc <HAL_UART_Receive_IT>
			  robotInitialization();
 80024fe:	f7ff ff75 	bl	80023ec <robotInitialization>
			  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002502:	2364      	movs	r3, #100	; 0x64
 8002504:	2227      	movs	r2, #39	; 0x27
 8002506:	4992      	ldr	r1, [pc, #584]	; (8002750 <main+0x2c8>)
 8002508:	488f      	ldr	r0, [pc, #572]	; (8002748 <main+0x2c0>)
 800250a:	f008 f849 	bl	800a5a0 <HAL_UART_Transmit>

			  state = READY;
 800250e:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <main+0x2b8>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]

			break;
 8002514:	e1fe      	b.n	8002914 <main+0x48c>

		case HOME:

			receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002516:	4b8f      	ldr	r3, [pc, #572]	; (8002754 <main+0x2cc>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]

			//Ponemos el enable en bajo para habilitar el driver

			HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	2110      	movs	r1, #16
 8002520:	488d      	ldr	r0, [pc, #564]	; (8002758 <main+0x2d0>)
 8002522:	f003 fcaf 	bl	8005e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	2120      	movs	r1, #32
 800252a:	488b      	ldr	r0, [pc, #556]	; (8002758 <main+0x2d0>)
 800252c:	f003 fcaa 	bl	8005e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	4888      	ldr	r0, [pc, #544]	; (8002758 <main+0x2d0>)
 8002536:	f003 fca5 	bl	8005e84 <HAL_GPIO_WritePin>

			HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f002 fc04 	bl	8004d48 <HAL_Delay>

			homing();
 8002540:	f7fe fb9a 	bl	8000c78 <homing>

	        if(homFin){
 8002544:	4b85      	ldr	r3, [pc, #532]	; (800275c <main+0x2d4>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 81e0 	beq.w	800290e <main+0x486>

	        	homFin = false;
 800254e:	4b83      	ldr	r3, [pc, #524]	; (800275c <main+0x2d4>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]

	        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002554:	2006      	movs	r0, #6
 8002556:	f002 fd40 	bl	8004fda <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 800255a:	2007      	movs	r0, #7
 800255c:	f002 fd3d 	bl	8004fda <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002560:	2008      	movs	r0, #8
 8002562:	f002 fd3a 	bl	8004fda <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002566:	2009      	movs	r0, #9
 8002568:	f002 fd37 	bl	8004fda <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 800256c:	200a      	movs	r0, #10
 800256e:	f002 fd34 	bl	8004fda <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002572:	2017      	movs	r0, #23
 8002574:	f002 fd31 	bl	8004fda <HAL_NVIC_EnableIRQ>

				Pini.x=0;
 8002578:	4979      	ldr	r1, [pc, #484]	; (8002760 <main+0x2d8>)
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9c1 2300 	strd	r2, r3, [r1]
				Pini.y=0;
 8002586:	4976      	ldr	r1, [pc, #472]	; (8002760 <main+0x2d8>)
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Pini.z =-0.5208; //antes era -0.33
 8002594:	4972      	ldr	r1, [pc, #456]	; (8002760 <main+0x2d8>)
 8002596:	a368      	add	r3, pc, #416	; (adr r3, 8002738 <main+0x2b0>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	e9c1 2304 	strd	r2, r3, [r1, #16]

				motor1.theta = 0.0;
 80025a0:	4970      	ldr	r1, [pc, #448]	; (8002764 <main+0x2dc>)
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor2.theta = 0.0;
 80025ae:	496e      	ldr	r1, [pc, #440]	; (8002768 <main+0x2e0>)
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				motor3.theta = 0.0;
 80025bc:	496b      	ldr	r1, [pc, #428]	; (800276c <main+0x2e4>)
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9c1 2302 	strd	r2, r3, [r1, #8]

				motor1.currentAngle = 0.0;
 80025ca:	4966      	ldr	r1, [pc, #408]	; (8002764 <main+0x2dc>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor2.currentAngle = 0.0;
 80025d8:	4963      	ldr	r1, [pc, #396]	; (8002768 <main+0x2e0>)
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				motor3.currentAngle = 0.0;
 80025e6:	4961      	ldr	r1, [pc, #388]	; (800276c <main+0x2e4>)
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

				state = READY;
 80025f4:	4b52      	ldr	r3, [pc, #328]	; (8002740 <main+0x2b8>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]

	        }


			break;
 80025fa:	e188      	b.n	800290e <main+0x486>

		case WORKING:

			receptionFlag = false;
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <main+0x2cc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002602:	e040      	b.n	8002686 <main+0x1fe>

				if (motor1.stepReached) {
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <main+0x2dc>)
 8002606:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <main+0x198>
					Stop_PWM_MOTOR_1;
 800260e:	2100      	movs	r1, #0
 8002610:	4857      	ldr	r0, [pc, #348]	; (8002770 <main+0x2e8>)
 8002612:	f006 facd 	bl	8008bb0 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002616:	2100      	movs	r1, #0
 8002618:	4856      	ldr	r0, [pc, #344]	; (8002774 <main+0x2ec>)
 800261a:	f006 fbc0 	bl	8008d9e <HAL_TIM_IC_Stop>
 800261e:	e01a      	b.n	8002656 <main+0x1ce>
				}else if (motor2.stepReached) {
 8002620:	4b51      	ldr	r3, [pc, #324]	; (8002768 <main+0x2e0>)
 8002622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <main+0x1b4>
					Stop_PWM_MOTOR_2;
 800262a:	2100      	movs	r1, #0
 800262c:	4852      	ldr	r0, [pc, #328]	; (8002778 <main+0x2f0>)
 800262e:	f006 fabf 	bl	8008bb0 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002632:	2100      	movs	r1, #0
 8002634:	4851      	ldr	r0, [pc, #324]	; (800277c <main+0x2f4>)
 8002636:	f006 fbb2 	bl	8008d9e <HAL_TIM_IC_Stop>
 800263a:	e00c      	b.n	8002656 <main+0x1ce>
				}else if (motor3.stepReached){
 800263c:	4b4b      	ldr	r3, [pc, #300]	; (800276c <main+0x2e4>)
 800263e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <main+0x1ce>
					Stop_PWM_MOTOR_3;
 8002646:	2100      	movs	r1, #0
 8002648:	484d      	ldr	r0, [pc, #308]	; (8002780 <main+0x2f8>)
 800264a:	f006 fab1 	bl	8008bb0 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800264e:	2100      	movs	r1, #0
 8002650:	484c      	ldr	r0, [pc, #304]	; (8002784 <main+0x2fc>)
 8002652:	f006 fba4 	bl	8008d9e <HAL_TIM_IC_Stop>
				dRecta3D[2] = 0 + qd * vDirector[2];

				inverseJacobian(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
				*/

				setProfilTimer();
 8002656:	f001 ff9b 	bl	8004590 <setProfilTimer>


				if(startMotors){
 800265a:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <main+0x300>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <main+0x1f8>
					startMotors = false;
 8002662:	4b49      	ldr	r3, [pc, #292]	; (8002788 <main+0x300>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
					Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8002668:	2100      	movs	r1, #0
 800266a:	4841      	ldr	r0, [pc, #260]	; (8002770 <main+0x2e8>)
 800266c:	f006 f992 	bl	8008994 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_2;	// Activar generacion de pwm
 8002670:	2100      	movs	r1, #0
 8002672:	4841      	ldr	r0, [pc, #260]	; (8002778 <main+0x2f0>)
 8002674:	f006 f98e 	bl	8008994 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_3;	// Activar generacion de pwm
 8002678:	2100      	movs	r1, #0
 800267a:	4841      	ldr	r0, [pc, #260]	; (8002780 <main+0x2f8>)
 800267c:	f006 f98a 	bl	8008994 <HAL_TIM_PWM_Start>
				}

				stopMotors = true;
 8002680:	4b42      	ldr	r3, [pc, #264]	; (800278c <main+0x304>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <main+0x2dc>)
 8002688:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0b9      	beq.n	8002604 <main+0x17c>
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <main+0x2e0>)
 8002692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0b4      	beq.n	8002604 <main+0x17c>
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <main+0x2e4>)
 800269c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0af      	beq.n	8002604 <main+0x17c>

			}// End while


			if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <main+0x304>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d029      	beq.n	8002700 <main+0x278>

				startMotors = false;
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <main+0x300>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80026b2:	2100      	movs	r1, #0
 80026b4:	482f      	ldr	r0, [pc, #188]	; (8002774 <main+0x2ec>)
 80026b6:	f006 fb72 	bl	8008d9e <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80026ba:	2100      	movs	r1, #0
 80026bc:	482f      	ldr	r0, [pc, #188]	; (800277c <main+0x2f4>)
 80026be:	f006 fb6e 	bl	8008d9e <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80026c2:	2100      	movs	r1, #0
 80026c4:	482f      	ldr	r0, [pc, #188]	; (8002784 <main+0x2fc>)
 80026c6:	f006 fb6a 	bl	8008d9e <HAL_TIM_IC_Stop>

				if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <main+0x2dc>)
 80026cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <main+0x254>
 80026d4:	2100      	movs	r1, #0
 80026d6:	4826      	ldr	r0, [pc, #152]	; (8002770 <main+0x2e8>)
 80026d8:	f006 fa6a 	bl	8008bb0 <HAL_TIM_PWM_Stop>
				if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <main+0x2e0>)
 80026de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <main+0x266>
 80026e6:	2100      	movs	r1, #0
 80026e8:	4823      	ldr	r0, [pc, #140]	; (8002778 <main+0x2f0>)
 80026ea:	f006 fa61 	bl	8008bb0 <HAL_TIM_PWM_Stop>
				if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <main+0x2e4>)
 80026f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <main+0x278>
 80026f8:	2100      	movs	r1, #0
 80026fa:	4821      	ldr	r0, [pc, #132]	; (8002780 <main+0x2f8>)
 80026fc:	f006 fa58 	bl	8008bb0 <HAL_TIM_PWM_Stop>
			}

			//Update coordinantes
			Pini.x = Pfin.x;
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <main+0x308>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	4916      	ldr	r1, [pc, #88]	; (8002760 <main+0x2d8>)
 8002708:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 800270c:	4b20      	ldr	r3, [pc, #128]	; (8002790 <main+0x308>)
 800270e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002712:	4913      	ldr	r1, [pc, #76]	; (8002760 <main+0x2d8>)
 8002714:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <main+0x308>)
 800271a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800271e:	4910      	ldr	r1, [pc, #64]	; (8002760 <main+0x2d8>)
 8002720:	e9c1 2304 	strd	r2, r3, [r1, #16]
			//TODO: Ver si esta bien liberar la memoria en este punto
			//free(arrayParams1);
			//free(arrayParams2);
			//free(arrayParams3);

			HAL_TIM_Base_Stop_IT(&htim15);
 8002724:	481b      	ldr	r0, [pc, #108]	; (8002794 <main+0x30c>)
 8002726:	f006 f8a5 	bl	8008874 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 800272a:	481b      	ldr	r0, [pc, #108]	; (8002798 <main+0x310>)
 800272c:	f006 f802 	bl	8008734 <HAL_TIM_Base_Stop>


			state = READY;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <main+0x2b8>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]

			break;
 8002736:	e0ed      	b.n	8002914 <main+0x48c>
 8002738:	c2f837b5 	.word	0xc2f837b5
 800273c:	bfe0aa64 	.word	0xbfe0aa64
 8002740:	24000428 	.word	0x24000428
 8002744:	24000020 	.word	0x24000020
 8002748:	24000954 	.word	0x24000954
 800274c:	2400055a 	.word	0x2400055a
 8002750:	2400003c 	.word	0x2400003c
 8002754:	2400055b 	.word	0x2400055b
 8002758:	58020c00 	.word	0x58020c00
 800275c:	24000429 	.word	0x24000429
 8002760:	24000458 	.word	0x24000458
 8002764:	24000350 	.word	0x24000350
 8002768:	24000390 	.word	0x24000390
 800276c:	240003d0 	.word	0x240003d0
 8002770:	240006a0 	.word	0x240006a0
 8002774:	24000570 	.word	0x24000570
 8002778:	240006ec 	.word	0x240006ec
 800277c:	240005bc 	.word	0x240005bc
 8002780:	24000738 	.word	0x24000738
 8002784:	24000608 	.word	0x24000608
 8002788:	2400042a 	.word	0x2400042a
 800278c:	2400042b 	.word	0x2400042b
 8002790:	24000470 	.word	0x24000470
 8002794:	24000784 	.word	0x24000784
 8002798:	24000654 	.word	0x24000654

		case READY:

			if (receptionFlag){
 800279c:	4b5e      	ldr	r3, [pc, #376]	; (8002918 <main+0x490>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b6 	beq.w	8002912 <main+0x48a>

				receptionFlag = false;
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <main+0x490>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]

				startMotors = true;
 80027ac:	4b5b      	ldr	r3, [pc, #364]	; (800291c <main+0x494>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80027b2:	2100      	movs	r1, #0
 80027b4:	485a      	ldr	r0, [pc, #360]	; (8002920 <main+0x498>)
 80027b6:	f006 fb63 	bl	8008e80 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80027ba:	2100      	movs	r1, #0
 80027bc:	4859      	ldr	r0, [pc, #356]	; (8002924 <main+0x49c>)
 80027be:	f006 fb5f 	bl	8008e80 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80027c2:	2100      	movs	r1, #0
 80027c4:	4858      	ldr	r0, [pc, #352]	; (8002928 <main+0x4a0>)
 80027c6:	f006 fb5b 	bl	8008e80 <HAL_TIM_IC_Start_IT>
				vDirector[0] = (Pfin.x - Pini.x) / euclideanDistance;	//Vector director en X
				vDirector[1] = (Pfin.y - Pini.y) / euclideanDistance;	//Vector director en Y
				vDirector[2] = (Pfin.z - Pini.z) / euclideanDistance;	//Vector director en Z
				*/

				inverseKinematic(Pfin);
 80027ca:	4b58      	ldr	r3, [pc, #352]	; (800292c <main+0x4a4>)
 80027cc:	ed93 5b00 	vldr	d5, [r3]
 80027d0:	ed93 6b02 	vldr	d6, [r3, #8]
 80027d4:	ed93 7b04 	vldr	d7, [r3, #16]
 80027d8:	eeb0 0b45 	vmov.f64	d0, d5
 80027dc:	eeb0 1b46 	vmov.f64	d1, d6
 80027e0:	eeb0 2b47 	vmov.f64	d2, d7
 80027e4:	f7fe fe78 	bl	80014d8 <inverseKinematic>

				configMotor(&motor1,1);
 80027e8:	2101      	movs	r1, #1
 80027ea:	4851      	ldr	r0, [pc, #324]	; (8002930 <main+0x4a8>)
 80027ec:	f000 fa64 	bl	8002cb8 <configMotor>
				configMotor(&motor2,2);
 80027f0:	2102      	movs	r1, #2
 80027f2:	4850      	ldr	r0, [pc, #320]	; (8002934 <main+0x4ac>)
 80027f4:	f000 fa60 	bl	8002cb8 <configMotor>
				configMotor(&motor3,3);
 80027f8:	2103      	movs	r1, #3
 80027fa:	484f      	ldr	r0, [pc, #316]	; (8002938 <main+0x4b0>)
 80027fc:	f000 fa5c 	bl	8002cb8 <configMotor>

				update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 8002800:	4b4b      	ldr	r3, [pc, #300]	; (8002930 <main+0x4a8>)
 8002802:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <main+0x4a8>)
 8002808:	ed93 1b02 	vldr	d1, [r3, #8]
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <main+0x4b4>)
 800280e:	ed93 2b00 	vldr	d2, [r3]
 8002812:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <main+0x4b8>)
 8002814:	ed93 3b00 	vldr	d3, [r3]
 8002818:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <main+0x4bc>)
 800281a:	ed93 4b00 	vldr	d4, [r3]
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <main+0x4c0>)
 8002820:	ed93 5b00 	vldr	d5, [r3]
 8002824:	4b49      	ldr	r3, [pc, #292]	; (800294c <main+0x4c4>)
 8002826:	ed93 6b00 	vldr	d6, [r3]
 800282a:	4849      	ldr	r0, [pc, #292]	; (8002950 <main+0x4c8>)
 800282c:	eeb0 0b47 	vmov.f64	d0, d7
 8002830:	f001 f9c6 	bl	8003bc0 <update_ScurveTraj>
				update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 8002834:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <main+0x4ac>)
 8002836:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <main+0x4ac>)
 800283c:	ed93 1b02 	vldr	d1, [r3, #8]
 8002840:	4b3e      	ldr	r3, [pc, #248]	; (800293c <main+0x4b4>)
 8002842:	ed93 2b00 	vldr	d2, [r3]
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <main+0x4b8>)
 8002848:	ed93 3b00 	vldr	d3, [r3]
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <main+0x4bc>)
 800284e:	ed93 4b00 	vldr	d4, [r3]
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <main+0x4c0>)
 8002854:	ed93 5b00 	vldr	d5, [r3]
 8002858:	4b3c      	ldr	r3, [pc, #240]	; (800294c <main+0x4c4>)
 800285a:	ed93 6b00 	vldr	d6, [r3]
 800285e:	483d      	ldr	r0, [pc, #244]	; (8002954 <main+0x4cc>)
 8002860:	eeb0 0b47 	vmov.f64	d0, d7
 8002864:	f001 f9ac 	bl	8003bc0 <update_ScurveTraj>
				update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <main+0x4b0>)
 800286a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <main+0x4b0>)
 8002870:	ed93 1b02 	vldr	d1, [r3, #8]
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <main+0x4b4>)
 8002876:	ed93 2b00 	vldr	d2, [r3]
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <main+0x4b8>)
 800287c:	ed93 3b00 	vldr	d3, [r3]
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <main+0x4bc>)
 8002882:	ed93 4b00 	vldr	d4, [r3]
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <main+0x4c0>)
 8002888:	ed93 5b00 	vldr	d5, [r3]
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <main+0x4c4>)
 800288e:	ed93 6b00 	vldr	d6, [r3]
 8002892:	4831      	ldr	r0, [pc, #196]	; (8002958 <main+0x4d0>)
 8002894:	eeb0 0b47 	vmov.f64	d0, d7
 8002898:	f001 f992 	bl	8003bc0 <update_ScurveTraj>

				timeFlag = false;
 800289c:	4b2f      	ldr	r3, [pc, #188]	; (800295c <main+0x4d4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]

				motor1.pMotor = 0;
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <main+0x4a8>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
				motor2.pMotor = 0;
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <main+0x4ac>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
				motor3.pMotor = 0;
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <main+0x4b0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

				motor1.stepReached = false;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <main+0x4a8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor2.stepReached = false;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <main+0x4ac>)
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				motor3.stepReached = false;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <main+0x4b0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				motor1.rpm = 0;
 80028cc:	4918      	ldr	r1, [pc, #96]	; (8002930 <main+0x4a8>)
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
				motor2.rpm = 0;
 80028da:	4916      	ldr	r1, [pc, #88]	; (8002934 <main+0x4ac>)
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
				motor3.rpm = 0;
 80028e8:	4913      	ldr	r1, [pc, #76]	; (8002938 <main+0x4b0>)
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

				HAL_TIM_Base_Start(&htim5);
 80028f6:	481a      	ldr	r0, [pc, #104]	; (8002960 <main+0x4d8>)
 80028f8:	f005 feac 	bl	8008654 <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start_IT(&htim15);
 80028fc:	4819      	ldr	r0, [pc, #100]	; (8002964 <main+0x4dc>)
 80028fe:	f005 ff41 	bl	8008784 <HAL_TIM_Base_Start_IT>


				state = WORKING;
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <main+0x4e0>)
 8002904:	2202      	movs	r2, #2
 8002906:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002908:	e003      	b.n	8002912 <main+0x48a>
		case FAULT:


			break;

		default:break;
 800290a:	bf00      	nop
 800290c:	e5da      	b.n	80024c4 <main+0x3c>
			break;
 800290e:	bf00      	nop
 8002910:	e5d8      	b.n	80024c4 <main+0x3c>
			break;
 8002912:	bf00      	nop
		switch (state){
 8002914:	e5d6      	b.n	80024c4 <main+0x3c>
 8002916:	bf00      	nop
 8002918:	2400055b 	.word	0x2400055b
 800291c:	2400042a 	.word	0x2400042a
 8002920:	24000570 	.word	0x24000570
 8002924:	240005bc 	.word	0x240005bc
 8002928:	24000608 	.word	0x24000608
 800292c:	24000470 	.word	0x24000470
 8002930:	24000350 	.word	0x24000350
 8002934:	24000390 	.word	0x24000390
 8002938:	240003d0 	.word	0x240003d0
 800293c:	24000440 	.word	0x24000440
 8002940:	24000448 	.word	0x24000448
 8002944:	24000010 	.word	0x24000010
 8002948:	24000018 	.word	0x24000018
 800294c:	24000008 	.word	0x24000008
 8002950:	24000488 	.word	0x24000488
 8002954:	240004c0 	.word	0x240004c0
 8002958:	240004f8 	.word	0x240004f8
 800295c:	24000569 	.word	0x24000569
 8002960:	24000654 	.word	0x24000654
 8002964:	24000784 	.word	0x24000784
 8002968:	24000428 	.word	0x24000428

0800296c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b09c      	sub	sp, #112	; 0x70
 8002970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002976:	224c      	movs	r2, #76	; 0x4c
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f00a f948 	bl	800cc10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2220      	movs	r2, #32
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f00a f942 	bl	800cc10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800298c:	2002      	movs	r0, #2
 800298e:	f003 faad 	bl	8005eec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002992:	2300      	movs	r3, #0
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <SystemClock_Config+0xf4>)
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <SystemClock_Config+0xf4>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80029a2:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <SystemClock_Config+0xf4>)
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <SystemClock_Config+0xf8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <SystemClock_Config+0xf8>)
 80029b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <SystemClock_Config+0xf8>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029c8:	bf00      	nop
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <SystemClock_Config+0xf8>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d1f8      	bne.n	80029ca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029d8:	2302      	movs	r3, #2
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80029dc:	2301      	movs	r3, #1
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e4:	2302      	movs	r3, #2
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029e8:	2300      	movs	r3, #0
 80029ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029ec:	2304      	movs	r3, #4
 80029ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80029f0:	2310      	movs	r3, #16
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80029f4:	2302      	movs	r3, #2
 80029f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80029f8:	2302      	movs	r3, #2
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80029fc:	2302      	movs	r3, #2
 80029fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002a00:	230c      	movs	r3, #12
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 faa5 	bl	8005f60 <HAL_RCC_OscConfig>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002a1c:	f000 f944 	bl	8002ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a20:	233f      	movs	r3, #63	; 0x3f
 8002a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a24:	2303      	movs	r3, #3
 8002a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 feb8 	bl	80067bc <HAL_RCC_ClockConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002a52:	f000 f929 	bl	8002ca8 <Error_Handler>
  }
}
 8002a56:	bf00      	nop
 8002a58:	3770      	adds	r7, #112	; 0x70
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	58000400 	.word	0x58000400
 8002a64:	58024800 	.word	0x58024800

08002a68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/


}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <HAL_UART_RxCpltCallback+0xd0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d14d      	bne.n	8002b2e <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_UART_RxCpltCallback+0xd4>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b3a      	cmp	r3, #58	; 0x3a
 8002a9c:	d006      	beq.n	8002aac <HAL_UART_RxCpltCallback+0x2c>
 8002a9e:	2b3a      	cmp	r3, #58	; 0x3a
 8002aa0:	dc36      	bgt.n	8002b10 <HAL_UART_RxCpltCallback+0x90>
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d009      	beq.n	8002aba <HAL_UART_RxCpltCallback+0x3a>
 8002aa6:	2b0d      	cmp	r3, #13
 8002aa8:	d01e      	beq.n	8002ae8 <HAL_UART_RxCpltCallback+0x68>
 8002aaa:	e031      	b.n	8002b10 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_UART_RxCpltCallback+0xdc>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
			break;
 8002ab8:	e040      	b.n	8002b3c <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d037      	beq.n	8002b32 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002acc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002ace:	e030      	b.n	8002b32 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_UART_RxCpltCallback+0xe0>)
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002ae6:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b1e      	cmp	r3, #30
 8002aee:	d1ef      	bne.n	8002ad0 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_UART_RxCpltCallback+0xdc>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d11e      	bne.n	8002b36 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_UART_RxCpltCallback+0xe0>)
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002b04:	f7fe fbf2 	bl	80012ec <interpretaComando>
				cm0 = 0;
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_UART_RxCpltCallback+0xdc>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002b0e:	e012      	b.n	8002b36 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b1d      	cmp	r3, #29
 8002b16:	d810      	bhi.n	8002b3a <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	b2d1      	uxtb	r1, r2
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <HAL_UART_RxCpltCallback+0xd8>)
 8002b22:	7011      	strb	r1, [r2, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_UART_RxCpltCallback+0xe0>)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002b2c:	e005      	b.n	8002b3a <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002b2e:	bf00      	nop
 8002b30:	e004      	b.n	8002b3c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002b3a:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	4905      	ldr	r1, [pc, #20]	; (8002b54 <HAL_UART_RxCpltCallback+0xd4>)
 8002b40:	4808      	ldr	r0, [pc, #32]	; (8002b64 <HAL_UART_RxCpltCallback+0xe4>)
 8002b42:	f007 fdc3 	bl	800a6cc <HAL_UART_Receive_IT>
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40004800 	.word	0x40004800
 8002b54:	2400055a 	.word	0x2400055a
 8002b58:	24000538 	.word	0x24000538
 8002b5c:	24000568 	.word	0x24000568
 8002b60:	2400053c 	.word	0x2400053c
 8002b64:	24000954 	.word	0x24000954

08002b68 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	__NOP();
 8002b70:	bf00      	nop
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d110      	bne.n	8002bb4 <HAL_TIM_IC_CaptureCallback+0x34>
		if (motor1.pMotor == motor1.numStep) {
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d104      	bne.n	8002ba8 <HAL_TIM_IC_CaptureCallback+0x28>
			motor1.stepReached = true;
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			}
		}
		else{}
	}
	*/
}
 8002ba6:	e030      	b.n	8002c0a <HAL_TIM_IC_CaptureCallback+0x8a>
			motor1.pMotor++;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002bb0:	6013      	str	r3, [r2, #0]
}
 8002bb2:	e02a      	b.n	8002c0a <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM3){
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d110      	bne.n	8002be0 <HAL_TIM_IC_CaptureCallback+0x60>
		if (motor2.pMotor == motor2.numStep) {
 8002bbe:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d104      	bne.n	8002bd4 <HAL_TIM_IC_CaptureCallback+0x54>
			motor2.stepReached = true;
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002bd2:	e01a      	b.n	8002c0a <HAL_TIM_IC_CaptureCallback+0x8a>
			motor2.pMotor++;
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	e014      	b.n	8002c0a <HAL_TIM_IC_CaptureCallback+0x8a>
	}else if (htim->Instance == TIM4){
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10f      	bne.n	8002c0a <HAL_TIM_IC_CaptureCallback+0x8a>
		if (motor3.pMotor == motor3.numStep) {
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d104      	bne.n	8002c00 <HAL_TIM_IC_CaptureCallback+0x80>
			motor3.stepReached = true;
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002bfe:	e004      	b.n	8002c0a <HAL_TIM_IC_CaptureCallback+0x8a>
			motor3.pMotor++;
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002c08:	6013      	str	r3, [r2, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	24000350 	.word	0x24000350
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	24000390 	.word	0x24000390
 8002c24:	40000800 	.word	0x40000800
 8002c28:	240003d0 	.word	0x240003d0
 8002c2c:	00000000 	.word	0x00000000

08002c30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d11f      	bne.n	8002c80 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	3301      	adds	r3, #1
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002c6e:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002c90 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002c72:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002c76:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c7c:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	f3af 8000 	nop.w
 8002c90:	00000000 	.word	0x00000000
 8002c94:	418e8480 	.word	0x418e8480
 8002c98:	24000784 	.word	0x24000784
 8002c9c:	24000569 	.word	0x24000569
 8002ca0:	40000c00 	.word	0x40000c00
 8002ca4:	24000530 	.word	0x24000530

08002ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	ed93 6b02 	vldr	d6, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002cd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	db39      	blt.n	8002d52 <configMotor+0x9a>
		if(ES1i_PRESSED){
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4861      	ldr	r0, [pc, #388]	; (8002e68 <configMotor+0x1b0>)
 8002ce2:	f003 f8b7 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <configMotor+0x42>
			flagErrorEndStop = 1;
 8002cec:	495f      	ldr	r1, [pc, #380]	; (8002e6c <configMotor+0x1b4>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	; (8002e70 <configMotor+0x1b8>)
 8002cf4:	e9c1 2300 	strd	r2, r3, [r1]
 8002cf8:	e064      	b.n	8002dc4 <configMotor+0x10c>
		} else {
			diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	ed93 6b02 	vldr	d6, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002d06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d0a:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <configMotor+0x74>
 8002d20:	2201      	movs	r2, #1
 8002d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d26:	4853      	ldr	r0, [pc, #332]	; (8002e74 <configMotor+0x1bc>)
 8002d28:	f003 f8ac 	bl	8005e84 <HAL_GPIO_WritePin>
            if (i==1) negative_Dir_MOTOR_2;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <configMotor+0x86>
 8002d32:	2201      	movs	r2, #1
 8002d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d38:	484e      	ldr	r0, [pc, #312]	; (8002e74 <configMotor+0x1bc>)
 8002d3a:	f003 f8a3 	bl	8005e84 <HAL_GPIO_WritePin>
            if (i==2) negative_Dir_MOTOR_3;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d13f      	bne.n	8002dc4 <configMotor+0x10c>
 8002d44:	2201      	movs	r2, #1
 8002d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d4a:	484a      	ldr	r0, [pc, #296]	; (8002e74 <configMotor+0x1bc>)
 8002d4c:	f003 f89a 	bl	8005e84 <HAL_GPIO_WritePin>
 8002d50:	e038      	b.n	8002dc4 <configMotor+0x10c>
		}
	} else {
		if(ES1s_PRESSED){
 8002d52:	2101      	movs	r1, #1
 8002d54:	4844      	ldr	r0, [pc, #272]	; (8002e68 <configMotor+0x1b0>)
 8002d56:	f003 f87d 	bl	8005e54 <HAL_GPIO_ReadPin>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <configMotor+0xb6>
			flagErrorEndStop = 1;
 8002d60:	4942      	ldr	r1, [pc, #264]	; (8002e6c <configMotor+0x1b4>)
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <configMotor+0x1b8>)
 8002d68:	e9c1 2300 	strd	r2, r3, [r1]
 8002d6c:	e02a      	b.n	8002dc4 <configMotor+0x10c>
		} else {
			diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	ed93 7b02 	vldr	d7, [r3, #8]
 8002d7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d7e:	ed87 7b02 	vstr	d7, [r7, #8]
			motor->currentAngle = motor->theta;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

			if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <configMotor+0xe8>
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d9a:	4836      	ldr	r0, [pc, #216]	; (8002e74 <configMotor+0x1bc>)
 8002d9c:	f003 f872 	bl	8005e84 <HAL_GPIO_WritePin>
            if (i==1) positive_Dir_MOTOR_2;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <configMotor+0xfa>
 8002da6:	2200      	movs	r2, #0
 8002da8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dac:	4831      	ldr	r0, [pc, #196]	; (8002e74 <configMotor+0x1bc>)
 8002dae:	f003 f869 	bl	8005e84 <HAL_GPIO_WritePin>
            if (i==2) positive_Dir_MOTOR_3;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d105      	bne.n	8002dc4 <configMotor+0x10c>
 8002db8:	2200      	movs	r2, #0
 8002dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dbe:	482d      	ldr	r0, [pc, #180]	; (8002e74 <configMotor+0x1bc>)
 8002dc0:	f003 f860 	bl	8005e84 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	motor->calcStep = (diffAngles * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8002dc4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002dc8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002e58 <configMotor+0x1a0>
 8002dcc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002dd0:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002e60 <configMotor+0x1a8>
 8002dd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	motor->numStep = (uint32_t) motor->calcStep;	// cuando pasa la unidad lo sumo al numero de pasos para
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002de4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002de8:	ee17 2a90 	vmov	r2, s15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	605a      	str	r2, [r3, #4]
	motor->remanente = motor->remanente + (motor->calcStep - motor->numStep);// que el error no se amplifique.
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e08:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002e0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remanente >= 1) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002e1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002e20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	da00      	bge.n	8002e2c <configMotor+0x174>
		motor->remanente = motor->remanente - 1;
		motor->numStep = motor->numStep + 1;
	}

}
 8002e2a:	e00e      	b.n	8002e4a <configMotor+0x192>
		motor->remanente = motor->remanente - 1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002e32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002e36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep = motor->numStep + 1;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	f3af 8000 	nop.w
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	40bf4000 	.word	0x40bf4000
 8002e60:	00000000 	.word	0x00000000
 8002e64:	40768000 	.word	0x40768000
 8002e68:	58021000 	.word	0x58021000
 8002e6c:	24000560 	.word	0x24000560
 8002e70:	3ff00000 	.word	0x3ff00000
 8002e74:	58020800 	.word	0x58020800

08002e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_MspInit+0x44>)
 8002e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_MspInit+0x44>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_MspInit+0x44>)
 8002e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002e9c:	2005      	movs	r0, #5
 8002e9e:	f002 f877 	bl	8004f90 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2051      	movs	r0, #81	; 0x51
 8002ea8:	f002 f87d 	bl	8004fa6 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002eac:	2051      	movs	r0, #81	; 0x51
 8002eae:	f002 f894 	bl	8004fda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	58024400 	.word	0x58024400

08002ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <HardFault_Handler+0x4>

08002ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <MemManage_Handler+0x4>

08002eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ede:	e7fe      	b.n	8002ede <BusFault_Handler+0x4>

08002ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <UsageFault_Handler+0x4>

08002ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f14:	f001 fef8 	bl	8004d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f002 ffc8 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f002 ffc1 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8002f3c:	2004      	movs	r0, #4
 8002f3e:	f002 ffba 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8002f4a:	2008      	movs	r0, #8
 8002f4c:	f002 ffb3 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8002f58:	2010      	movs	r0, #16
 8002f5a:	f002 ffac 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8002f66:	2020      	movs	r0, #32
 8002f68:	f002 ffa5 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <TIM2_IRQHandler+0x10>)
 8002f76:	f006 f8d3 	bl	8009120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	24000570 	.word	0x24000570

08002f84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <TIM3_IRQHandler+0x10>)
 8002f8a:	f006 f8c9 	bl	8009120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	240005bc 	.word	0x240005bc

08002f98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <TIM4_IRQHandler+0x10>)
 8002f9e:	f006 f8bf 	bl	8009120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	24000608 	.word	0x24000608

08002fac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <USART3_IRQHandler+0x10>)
 8002fb2:	f007 fbe1 	bl	800a778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	24000954 	.word	0x24000954

08002fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002fc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fc8:	f002 ff75 	bl	8005eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <TIM15_IRQHandler+0x10>)
 8002fe6:	f006 f89b 	bl	8009120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	24000784 	.word	0x24000784

08002ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	return 1;
 8002ff8:	2301      	movs	r3, #1
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_kill>:

int _kill(int pid, int sig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800300e:	f009 fdd5 	bl	800cbbc <__errno>
 8003012:	4603      	mov	r3, r0
 8003014:	2216      	movs	r2, #22
 8003016:	601a      	str	r2, [r3, #0]
	return -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_exit>:

void _exit (int status)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003036:	e7fe      	b.n	8003036 <_exit+0x12>

08003038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e00a      	b.n	8003060 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800304a:	f3af 8000 	nop.w
 800304e:	4601      	mov	r1, r0
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	60ba      	str	r2, [r7, #8]
 8003056:	b2ca      	uxtb	r2, r1
 8003058:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	dbf0      	blt.n	800304a <_read+0x12>
	}

return len;
 8003068:	687b      	ldr	r3, [r7, #4]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e009      	b.n	8003098 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	dbf1      	blt.n	8003084 <_write+0x12>
	}
	return len;
 80030a0:	687b      	ldr	r3, [r7, #4]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <_close>:

int _close(int file)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
	return -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d2:	605a      	str	r2, [r3, #4]
	return 0;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_isatty>:

int _isatty(int file)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
	return 1;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
	return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <_sbrk+0x50>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x16>
		heap_end = &end;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <_sbrk+0x50>)
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <_sbrk+0x54>)
 8003128:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <_sbrk+0x50>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <_sbrk+0x50>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	466a      	mov	r2, sp
 800313a:	4293      	cmp	r3, r2
 800313c:	d907      	bls.n	800314e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800313e:	f009 fd3d 	bl	800cbbc <__errno>
 8003142:	4603      	mov	r3, r0
 8003144:	220c      	movs	r2, #12
 8003146:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	e006      	b.n	800315c <_sbrk+0x48>
	}

	heap_end += incr;
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <_sbrk+0x50>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <_sbrk+0x50>)
 8003158:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2400056c 	.word	0x2400056c
 8003168:	240009f8 	.word	0x240009f8

0800316c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003170:	4b29      	ldr	r3, [pc, #164]	; (8003218 <SystemInit+0xac>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	4a28      	ldr	r2, [pc, #160]	; (8003218 <SystemInit+0xac>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003180:	4b26      	ldr	r3, [pc, #152]	; (800321c <SystemInit+0xb0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a25      	ldr	r2, [pc, #148]	; (800321c <SystemInit+0xb0>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800318c:	4b23      	ldr	r3, [pc, #140]	; (800321c <SystemInit+0xb0>)
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <SystemInit+0xb0>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4921      	ldr	r1, [pc, #132]	; (800321c <SystemInit+0xb0>)
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <SystemInit+0xb4>)
 800319a:	4013      	ands	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <SystemInit+0xb0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <SystemInit+0xb0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <SystemInit+0xb0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <SystemInit+0xb0>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <SystemInit+0xb0>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <SystemInit+0xb0>)
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80031c2:	4b16      	ldr	r3, [pc, #88]	; (800321c <SystemInit+0xb0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <SystemInit+0xb0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <SystemInit+0xb0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <SystemInit+0xb0>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <SystemInit+0xb0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <SystemInit+0xb0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <SystemInit+0xb0>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <SystemInit+0xb0>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <SystemInit+0xb8>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <SystemInit+0xbc>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fe:	d202      	bcs.n	8003206 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003200:	4b0a      	ldr	r3, [pc, #40]	; (800322c <SystemInit+0xc0>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SystemInit+0xac>)
 8003208:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800320c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00
 800321c:	58024400 	.word	0x58024400
 8003220:	eaf6ed7f 	.word	0xeaf6ed7f
 8003224:	5c001000 	.word	0x5c001000
 8003228:	ffff0000 	.word	0xffff0000
 800322c:	51008108 	.word	0x51008108

08003230 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	; 0x30
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003236:	f107 0320 	add.w	r3, r7, #32
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <MX_TIM2_Init+0xdc>)
 800325e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <MX_TIM2_Init+0xdc>)
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <MX_TIM2_Init+0xdc>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8003270:	4b26      	ldr	r3, [pc, #152]	; (800330c <MX_TIM2_Init+0xdc>)
 8003272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <MX_TIM2_Init+0xdc>)
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <MX_TIM2_Init+0xdc>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003284:	4821      	ldr	r0, [pc, #132]	; (800330c <MX_TIM2_Init+0xdc>)
 8003286:	f005 f98d 	bl	80085a4 <HAL_TIM_Base_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003290:	f7ff fd0a 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003298:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800329a:	f107 0320 	add.w	r3, r7, #32
 800329e:	4619      	mov	r1, r3
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <MX_TIM2_Init+0xdc>)
 80032a2:	f006 fa0d 	bl	80096c0 <HAL_TIM_ConfigClockSource>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80032ac:	f7ff fcfc 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80032b0:	4816      	ldr	r0, [pc, #88]	; (800330c <MX_TIM2_Init+0xdc>)
 80032b2:	f005 fd13 	bl	8008cdc <HAL_TIM_IC_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80032bc:	f7ff fcf4 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	480f      	ldr	r0, [pc, #60]	; (800330c <MX_TIM2_Init+0xdc>)
 80032d0:	f007 f86a 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80032da:	f7ff fce5 	bl	8002ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032e2:	2301      	movs	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2200      	movs	r2, #0
 80032f2:	4619      	mov	r1, r3
 80032f4:	4805      	ldr	r0, [pc, #20]	; (800330c <MX_TIM2_Init+0xdc>)
 80032f6:	f006 f832 	bl	800935e <HAL_TIM_IC_ConfigChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003300:	f7ff fcd2 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003304:	bf00      	nop
 8003306:	3730      	adds	r7, #48	; 0x30
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	24000570 	.word	0x24000570

08003310 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003316:	f107 0320 	add.w	r3, r7, #32
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <MX_TIM3_Init+0xdc>)
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <MX_TIM3_Init+0xe0>)
 8003340:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <MX_TIM3_Init+0xdc>)
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <MX_TIM3_Init+0xdc>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 800334e:	4b27      	ldr	r3, [pc, #156]	; (80033ec <MX_TIM3_Init+0xdc>)
 8003350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003354:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <MX_TIM3_Init+0xdc>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <MX_TIM3_Init+0xdc>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003362:	4822      	ldr	r0, [pc, #136]	; (80033ec <MX_TIM3_Init+0xdc>)
 8003364:	f005 f91e 	bl	80085a4 <HAL_TIM_Base_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800336e:	f7ff fc9b 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003376:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003378:	f107 0320 	add.w	r3, r7, #32
 800337c:	4619      	mov	r1, r3
 800337e:	481b      	ldr	r0, [pc, #108]	; (80033ec <MX_TIM3_Init+0xdc>)
 8003380:	f006 f99e 	bl	80096c0 <HAL_TIM_ConfigClockSource>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800338a:	f7ff fc8d 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800338e:	4817      	ldr	r0, [pc, #92]	; (80033ec <MX_TIM3_Init+0xdc>)
 8003390:	f005 fca4 	bl	8008cdc <HAL_TIM_IC_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800339a:	f7ff fc85 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4619      	mov	r1, r3
 80033ac:	480f      	ldr	r0, [pc, #60]	; (80033ec <MX_TIM3_Init+0xdc>)
 80033ae:	f006 fffb 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80033b8:	f7ff fc76 	bl	8002ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80033bc:	2300      	movs	r3, #0
 80033be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80033c0:	2301      	movs	r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	2200      	movs	r2, #0
 80033d0:	4619      	mov	r1, r3
 80033d2:	4806      	ldr	r0, [pc, #24]	; (80033ec <MX_TIM3_Init+0xdc>)
 80033d4:	f005 ffc3 	bl	800935e <HAL_TIM_IC_ConfigChannel>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80033de:	f7ff fc63 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033e2:	bf00      	nop
 80033e4:	3730      	adds	r7, #48	; 0x30
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	240005bc 	.word	0x240005bc
 80033f0:	40000400 	.word	0x40000400

080033f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033fa:	f107 0320 	add.w	r3, r7, #32
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003422:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <MX_TIM4_Init+0xe0>)
 8003424:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003428:	2200      	movs	r2, #0
 800342a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <MX_TIM4_Init+0xdc>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003432:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003438:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <MX_TIM4_Init+0xdc>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003440:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003446:	4822      	ldr	r0, [pc, #136]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003448:	f005 f8ac 	bl	80085a4 <HAL_TIM_Base_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003452:	f7ff fc29 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800345a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800345c:	f107 0320 	add.w	r3, r7, #32
 8003460:	4619      	mov	r1, r3
 8003462:	481b      	ldr	r0, [pc, #108]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003464:	f006 f92c 	bl	80096c0 <HAL_TIM_ConfigClockSource>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800346e:	f7ff fc1b 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003472:	4817      	ldr	r0, [pc, #92]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003474:	f005 fc32 	bl	8008cdc <HAL_TIM_IC_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800347e:	f7ff fc13 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	480f      	ldr	r0, [pc, #60]	; (80034d0 <MX_TIM4_Init+0xdc>)
 8003492:	f006 ff89 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800349c:	f7ff fc04 	bl	8002ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034a0:	2300      	movs	r3, #0
 80034a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034a4:	2301      	movs	r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	2200      	movs	r2, #0
 80034b4:	4619      	mov	r1, r3
 80034b6:	4806      	ldr	r0, [pc, #24]	; (80034d0 <MX_TIM4_Init+0xdc>)
 80034b8:	f005 ff51 	bl	800935e <HAL_TIM_IC_ConfigChannel>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80034c2:	f7ff fbf1 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034c6:	bf00      	nop
 80034c8:	3730      	adds	r7, #48	; 0x30
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	24000608 	.word	0x24000608
 80034d4:	40000800 	.word	0x40000800

080034d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80034f6:	4b1d      	ldr	r3, [pc, #116]	; (800356c <MX_TIM5_Init+0x94>)
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <MX_TIM5_Init+0x98>)
 80034fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <MX_TIM5_Init+0x94>)
 80034fe:	2200      	movs	r2, #0
 8003500:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <MX_TIM5_Init+0x94>)
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <MX_TIM5_Init+0x94>)
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <MX_TIM5_Init+0x94>)
 8003512:	2200      	movs	r2, #0
 8003514:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <MX_TIM5_Init+0x94>)
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800351c:	4813      	ldr	r0, [pc, #76]	; (800356c <MX_TIM5_Init+0x94>)
 800351e:	f005 f841 	bl	80085a4 <HAL_TIM_Base_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003528:	f7ff fbbe 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800352c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003530:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003532:	f107 0310 	add.w	r3, r7, #16
 8003536:	4619      	mov	r1, r3
 8003538:	480c      	ldr	r0, [pc, #48]	; (800356c <MX_TIM5_Init+0x94>)
 800353a:	f006 f8c1 	bl	80096c0 <HAL_TIM_ConfigClockSource>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003544:	f7ff fbb0 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4805      	ldr	r0, [pc, #20]	; (800356c <MX_TIM5_Init+0x94>)
 8003556:	f006 ff27 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003560:	f7ff fba2 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003564:	bf00      	nop
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	24000654 	.word	0x24000654
 8003570:	40000c00 	.word	0x40000c00

08003574 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08c      	sub	sp, #48	; 0x30
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800357a:	f107 0320 	add.w	r3, r7, #32
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800359a:	4b25      	ldr	r3, [pc, #148]	; (8003630 <MX_TIM12_Init+0xbc>)
 800359c:	4a25      	ldr	r2, [pc, #148]	; (8003634 <MX_TIM12_Init+0xc0>)
 800359e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035a2:	223f      	movs	r2, #63	; 0x3f
 80035a4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a6:	4b22      	ldr	r3, [pc, #136]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80035ac:	4b20      	ldr	r3, [pc, #128]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80035be:	481c      	ldr	r0, [pc, #112]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035c0:	f004 fff0 	bl	80085a4 <HAL_TIM_Base_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80035ca:	f7ff fb6d 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80035d4:	f107 0320 	add.w	r3, r7, #32
 80035d8:	4619      	mov	r1, r3
 80035da:	4815      	ldr	r0, [pc, #84]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035dc:	f006 f870 	bl	80096c0 <HAL_TIM_ConfigClockSource>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80035e6:	f7ff fb5f 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80035ea:	4811      	ldr	r0, [pc, #68]	; (8003630 <MX_TIM12_Init+0xbc>)
 80035ec:	f005 f971 	bl	80088d2 <HAL_TIM_PWM_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80035f6:	f7ff fb57 	bl	8002ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fa:	2360      	movs	r3, #96	; 0x60
 80035fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	2200      	movs	r2, #0
 800360e:	4619      	mov	r1, r3
 8003610:	4807      	ldr	r0, [pc, #28]	; (8003630 <MX_TIM12_Init+0xbc>)
 8003612:	f005 ff41 	bl	8009498 <HAL_TIM_PWM_ConfigChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 800361c:	f7ff fb44 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003620:	4803      	ldr	r0, [pc, #12]	; (8003630 <MX_TIM12_Init+0xbc>)
 8003622:	f000 fa3d 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 8003626:	bf00      	nop
 8003628:	3730      	adds	r7, #48	; 0x30
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	240006a0 	.word	0x240006a0
 8003634:	40001800 	.word	0x40001800

08003638 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
 800364c:	615a      	str	r2, [r3, #20]
 800364e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <MX_TIM13_Init+0x90>)
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <MX_TIM13_Init+0x94>)
 8003654:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <MX_TIM13_Init+0x90>)
 8003658:	223f      	movs	r2, #63	; 0x3f
 800365a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <MX_TIM13_Init+0x90>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <MX_TIM13_Init+0x90>)
 8003664:	2200      	movs	r2, #0
 8003666:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <MX_TIM13_Init+0x90>)
 800366a:	2200      	movs	r2, #0
 800366c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800366e:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <MX_TIM13_Init+0x90>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003674:	4814      	ldr	r0, [pc, #80]	; (80036c8 <MX_TIM13_Init+0x90>)
 8003676:	f004 ff95 	bl	80085a4 <HAL_TIM_Base_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8003680:	f7ff fb12 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003684:	4810      	ldr	r0, [pc, #64]	; (80036c8 <MX_TIM13_Init+0x90>)
 8003686:	f005 f924 	bl	80088d2 <HAL_TIM_PWM_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8003690:	f7ff fb0a 	bl	8002ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003694:	2360      	movs	r3, #96	; 0x60
 8003696:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	2200      	movs	r2, #0
 80036a8:	4619      	mov	r1, r3
 80036aa:	4807      	ldr	r0, [pc, #28]	; (80036c8 <MX_TIM13_Init+0x90>)
 80036ac:	f005 fef4 	bl	8009498 <HAL_TIM_PWM_ConfigChannel>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 80036b6:	f7ff faf7 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80036ba:	4803      	ldr	r0, [pc, #12]	; (80036c8 <MX_TIM13_Init+0x90>)
 80036bc:	f000 f9f0 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 80036c0:	bf00      	nop
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	240006ec 	.word	0x240006ec
 80036cc:	40001c00 	.word	0x40001c00

080036d0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
 80036e4:	615a      	str	r2, [r3, #20]
 80036e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <MX_TIM14_Init+0x90>)
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <MX_TIM14_Init+0x94>)
 80036ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <MX_TIM14_Init+0x90>)
 80036f0:	223f      	movs	r2, #63	; 0x3f
 80036f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <MX_TIM14_Init+0x90>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <MX_TIM14_Init+0x90>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <MX_TIM14_Init+0x90>)
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <MX_TIM14_Init+0x90>)
 8003708:	2200      	movs	r2, #0
 800370a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800370c:	4814      	ldr	r0, [pc, #80]	; (8003760 <MX_TIM14_Init+0x90>)
 800370e:	f004 ff49 	bl	80085a4 <HAL_TIM_Base_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8003718:	f7ff fac6 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800371c:	4810      	ldr	r0, [pc, #64]	; (8003760 <MX_TIM14_Init+0x90>)
 800371e:	f005 f8d8 	bl	80088d2 <HAL_TIM_PWM_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8003728:	f7ff fabe 	bl	8002ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800372c:	2360      	movs	r3, #96	; 0x60
 800372e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	2200      	movs	r2, #0
 8003740:	4619      	mov	r1, r3
 8003742:	4807      	ldr	r0, [pc, #28]	; (8003760 <MX_TIM14_Init+0x90>)
 8003744:	f005 fea8 	bl	8009498 <HAL_TIM_PWM_ConfigChannel>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800374e:	f7ff faab 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8003752:	4803      	ldr	r0, [pc, #12]	; (8003760 <MX_TIM14_Init+0x90>)
 8003754:	f000 f9a4 	bl	8003aa0 <HAL_TIM_MspPostInit>

}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	24000738 	.word	0x24000738
 8003764:	40002000 	.word	0x40002000

08003768 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800376e:	f107 0310 	add.w	r3, r7, #16
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003786:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <MX_TIM15_Init+0x9c>)
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <MX_TIM15_Init+0xa0>)
 800378a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <MX_TIM15_Init+0x9c>)
 800378e:	2200      	movs	r2, #0
 8003790:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <MX_TIM15_Init+0x9c>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <MX_TIM15_Init+0x9c>)
 800379a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800379e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a0:	4b18      	ldr	r3, [pc, #96]	; (8003804 <MX_TIM15_Init+0x9c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <MX_TIM15_Init+0x9c>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <MX_TIM15_Init+0x9c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80037b2:	4814      	ldr	r0, [pc, #80]	; (8003804 <MX_TIM15_Init+0x9c>)
 80037b4:	f004 fef6 	bl	80085a4 <HAL_TIM_Base_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80037be:	f7ff fa73 	bl	8002ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80037c8:	f107 0310 	add.w	r3, r7, #16
 80037cc:	4619      	mov	r1, r3
 80037ce:	480d      	ldr	r0, [pc, #52]	; (8003804 <MX_TIM15_Init+0x9c>)
 80037d0:	f005 ff76 	bl	80096c0 <HAL_TIM_ConfigClockSource>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80037da:	f7ff fa65 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4806      	ldr	r0, [pc, #24]	; (8003804 <MX_TIM15_Init+0x9c>)
 80037ec:	f006 fddc 	bl	800a3a8 <HAL_TIMEx_MasterConfigSynchronization>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80037f6:	f7ff fa57 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	24000784 	.word	0x24000784
 8003808:	40014000 	.word	0x40014000

0800380c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b092      	sub	sp, #72	; 0x48
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d136      	bne.n	800389c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800382e:	4b92      	ldr	r3, [pc, #584]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003834:	4a90      	ldr	r2, [pc, #576]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800383e:	4b8e      	ldr	r3, [pc, #568]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384c:	4b8a      	ldr	r3, [pc, #552]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 800384e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003852:	4a89      	ldr	r2, [pc, #548]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800385c:	4b86      	ldr	r3, [pc, #536]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 800385e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800386a:	2301      	movs	r3, #1
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003876:	2300      	movs	r3, #0
 8003878:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800387a:	2301      	movs	r3, #1
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003882:	4619      	mov	r1, r3
 8003884:	487d      	ldr	r0, [pc, #500]	; (8003a7c <HAL_TIM_Base_MspInit+0x270>)
 8003886:	f002 f935 	bl	8005af4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2101      	movs	r1, #1
 800388e:	201c      	movs	r0, #28
 8003890:	f001 fb89 	bl	8004fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003894:	201c      	movs	r0, #28
 8003896:	f001 fba0 	bl	8004fda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800389a:	e0e8      	b.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a77      	ldr	r2, [pc, #476]	; (8003a80 <HAL_TIM_Base_MspInit+0x274>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d136      	bne.n	8003914 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038a6:	4b74      	ldr	r3, [pc, #464]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80038a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ac:	4a72      	ldr	r2, [pc, #456]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038b6:	4b70      	ldr	r3, [pc, #448]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80038b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c4:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ca:	4a6b      	ldr	r2, [pc, #428]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d4:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80038d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038e2:	2340      	movs	r3, #64	; 0x40
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038f2:	2302      	movs	r3, #2
 80038f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038fa:	4619      	mov	r1, r3
 80038fc:	485f      	ldr	r0, [pc, #380]	; (8003a7c <HAL_TIM_Base_MspInit+0x270>)
 80038fe:	f002 f8f9 	bl	8005af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	2101      	movs	r1, #1
 8003906:	201d      	movs	r0, #29
 8003908:	f001 fb4d 	bl	8004fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800390c:	201d      	movs	r0, #29
 800390e:	f001 fb64 	bl	8004fda <HAL_NVIC_EnableIRQ>
}
 8003912:	e0ac      	b.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5a      	ldr	r2, [pc, #360]	; (8003a84 <HAL_TIM_Base_MspInit+0x278>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d137      	bne.n	800398e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800391e:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003924:	4a54      	ldr	r2, [pc, #336]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800392e:	4b52      	ldr	r3, [pc, #328]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800393c:	4b4e      	ldr	r3, [pc, #312]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 800393e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003942:	4a4d      	ldr	r2, [pc, #308]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800394c:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 800394e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800395a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800396c:	2302      	movs	r3, #2
 800396e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003974:	4619      	mov	r1, r3
 8003976:	4844      	ldr	r0, [pc, #272]	; (8003a88 <HAL_TIM_Base_MspInit+0x27c>)
 8003978:	f002 f8bc 	bl	8005af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800397c:	2200      	movs	r2, #0
 800397e:	2101      	movs	r1, #1
 8003980:	201e      	movs	r0, #30
 8003982:	f001 fb10 	bl	8004fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003986:	201e      	movs	r0, #30
 8003988:	f001 fb27 	bl	8004fda <HAL_NVIC_EnableIRQ>
}
 800398c:	e06f      	b.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <HAL_TIM_Base_MspInit+0x280>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d10f      	bne.n	80039b8 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003998:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 800399a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800399e:	4a36      	ldr	r2, [pc, #216]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039a0:	f043 0308 	orr.w	r3, r3, #8
 80039a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039a8:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	69bb      	ldr	r3, [r7, #24]
}
 80039b6:	e05a      	b.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a34      	ldr	r2, [pc, #208]	; (8003a90 <HAL_TIM_Base_MspInit+0x284>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10f      	bne.n	80039e2 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039c8:	4a2b      	ldr	r2, [pc, #172]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
}
 80039e0:	e045      	b.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <HAL_TIM_Base_MspInit+0x288>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10f      	bne.n	8003a0c <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80039ec:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039f2:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 80039fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	693b      	ldr	r3, [r7, #16]
}
 8003a0a:	e030      	b.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_TIM_Base_MspInit+0x28c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10f      	bne.n	8003a36 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003a16:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a1c:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	e01b      	b.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_TIM_Base_MspInit+0x290>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d116      	bne.n	8003a6e <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_TIM_Base_MspInit+0x26c>)
 8003a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2101      	movs	r1, #1
 8003a62:	2074      	movs	r0, #116	; 0x74
 8003a64:	f001 fa9f 	bl	8004fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003a68:	2074      	movs	r0, #116	; 0x74
 8003a6a:	f001 fab6 	bl	8004fda <HAL_NVIC_EnableIRQ>
}
 8003a6e:	bf00      	nop
 8003a70:	3748      	adds	r7, #72	; 0x48
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	58020000 	.word	0x58020000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	58020c00 	.word	0x58020c00
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40001800 	.word	0x40001800
 8003a94:	40001c00 	.word	0x40001c00
 8003a98:	40002000 	.word	0x40002000
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a39      	ldr	r2, [pc, #228]	; (8003ba4 <HAL_TIM_MspPostInit+0x104>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d120      	bne.n	8003b04 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac8:	4a37      	ldr	r2, [pc, #220]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8003ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aea:	2302      	movs	r3, #2
 8003aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003af2:	2302      	movs	r3, #2
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	4619      	mov	r1, r3
 8003afc:	482b      	ldr	r0, [pc, #172]	; (8003bac <HAL_TIM_MspPostInit+0x10c>)
 8003afe:	f001 fff9 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003b02:	e04a      	b.n	8003b9a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <HAL_TIM_MspPostInit+0x110>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d120      	bne.n	8003b50 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b14:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003b16:	f043 0320 	orr.w	r3, r3, #32
 8003b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8003b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b36:	2302      	movs	r3, #2
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003b3e:	2309      	movs	r3, #9
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4619      	mov	r1, r3
 8003b48:	481a      	ldr	r0, [pc, #104]	; (8003bb4 <HAL_TIM_MspPostInit+0x114>)
 8003b4a:	f001 ffd3 	bl	8005af4 <HAL_GPIO_Init>
}
 8003b4e:	e024      	b.n	8003b9a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_TIM_MspPostInit+0x118>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d11f      	bne.n	8003b9a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b60:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003b62:	f043 0320 	orr.w	r3, r3, #32
 8003b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <HAL_TIM_MspPostInit+0x108>)
 8003b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8003b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b82:	2302      	movs	r3, #2
 8003b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003b8a:	2309      	movs	r3, #9
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	4619      	mov	r1, r3
 8003b94:	4807      	ldr	r0, [pc, #28]	; (8003bb4 <HAL_TIM_MspPostInit+0x114>)
 8003b96:	f001 ffad 	bl	8005af4 <HAL_GPIO_Init>
}
 8003b9a:	bf00      	nop
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40001800 	.word	0x40001800
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	58020400 	.word	0x58020400
 8003bb0:	40001c00 	.word	0x40001c00
 8003bb4:	58021400 	.word	0x58021400
 8003bb8:	40002000 	.word	0x40002000
 8003bbc:	00000000 	.word	0x00000000

08003bc0 <update_ScurveTraj>:

    return qd;
}


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax,double *params){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	ed2d 8b04 	vpush	{d8-d9}
 8003bc6:	b092      	sub	sp, #72	; 0x48
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8003bce:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8003bd2:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8003bd6:	ed87 3b08 	vstr	d3, [r7, #32]
 8003bda:	ed87 4b06 	vstr	d4, [r7, #24]
 8003bde:	ed87 5b04 	vstr	d5, [r7, #16]
 8003be2:	ed87 6b02 	vstr	d6, [r7, #8]
 8003be6:	6078      	str	r0, [r7, #4]


	//int nbSegment = 7; //Number of profil segments
	//*params = (double*)malloc(nbSegment * sizeof(double));

	jmin = -jmax;
 8003be8:	ed97 7b02 	vldr	d7, [r7, #8]
 8003bec:	eeb1 7b47 	vneg.f64	d7, d7
 8003bf0:	4b9e      	ldr	r3, [pc, #632]	; (8003e6c <update_ScurveTraj+0x2ac>)
 8003bf2:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 8003bf6:	ed97 7b04 	vldr	d7, [r7, #16]
 8003bfa:	eeb1 7b47 	vneg.f64	d7, d7
 8003bfe:	4b9c      	ldr	r3, [pc, #624]	; (8003e70 <update_ScurveTraj+0x2b0>)
 8003c00:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 8003c04:	ed97 7b06 	vldr	d7, [r7, #24]
 8003c08:	eeb1 7b47 	vneg.f64	d7, d7
 8003c0c:	4b99      	ldr	r3, [pc, #612]	; (8003e74 <update_ScurveTraj+0x2b4>)
 8003c0e:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8003c12:	4999      	ldr	r1, [pc, #612]	; (8003e78 <update_ScurveTraj+0x2b8>)
 8003c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c18:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8003c1c:	4997      	ldr	r1, [pc, #604]	; (8003e7c <update_ScurveTraj+0x2bc>)
 8003c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c22:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8003c26:	4b95      	ldr	r3, [pc, #596]	; (8003e7c <update_ScurveTraj+0x2bc>)
 8003c28:	ed93 6b00 	vldr	d6, [r3]
 8003c2c:	4b92      	ldr	r3, [pc, #584]	; (8003e78 <update_ScurveTraj+0x2b8>)
 8003c2e:	ed93 7b00 	vldr	d7, [r3]
 8003c32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	d548      	bpl.n	8003cce <update_ScurveTraj+0x10e>

		flagInv = true;
 8003c3c:	4b90      	ldr	r3, [pc, #576]	; (8003e80 <update_ScurveTraj+0x2c0>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 8003c42:	4b8d      	ldr	r3, [pc, #564]	; (8003e78 <update_ScurveTraj+0x2b8>)
 8003c44:	ed93 7b00 	vldr	d7, [r3]
 8003c48:	eeb1 7b47 	vneg.f64	d7, d7
 8003c4c:	4b8a      	ldr	r3, [pc, #552]	; (8003e78 <update_ScurveTraj+0x2b8>)
 8003c4e:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 8003c52:	4b8a      	ldr	r3, [pc, #552]	; (8003e7c <update_ScurveTraj+0x2bc>)
 8003c54:	ed93 7b00 	vldr	d7, [r3]
 8003c58:	eeb1 7b47 	vneg.f64	d7, d7
 8003c5c:	4b87      	ldr	r3, [pc, #540]	; (8003e7c <update_ScurveTraj+0x2bc>)
 8003c5e:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 8003c62:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003c66:	eeb1 7b47 	vneg.f64	d7, d7
 8003c6a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 8003c6e:	ed97 7b08 	vldr	d7, [r7, #32]
 8003c72:	eeb1 7b47 	vneg.f64	d7, d7
 8003c76:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 8003c7a:	4b7e      	ldr	r3, [pc, #504]	; (8003e74 <update_ScurveTraj+0x2b4>)
 8003c7c:	ed93 7b00 	vldr	d7, [r3]
 8003c80:	eeb1 7b47 	vneg.f64	d7, d7
 8003c84:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 8003c88:	ed97 7b06 	vldr	d7, [r7, #24]
 8003c8c:	eeb1 7b47 	vneg.f64	d7, d7
 8003c90:	4b78      	ldr	r3, [pc, #480]	; (8003e74 <update_ScurveTraj+0x2b4>)
 8003c92:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <update_ScurveTraj+0x2b0>)
 8003c98:	ed93 7b00 	vldr	d7, [r3]
 8003c9c:	eeb1 7b47 	vneg.f64	d7, d7
 8003ca0:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 8003ca4:	ed97 7b04 	vldr	d7, [r7, #16]
 8003ca8:	eeb1 7b47 	vneg.f64	d7, d7
 8003cac:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <update_ScurveTraj+0x2b0>)
 8003cae:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8003cb2:	4b6e      	ldr	r3, [pc, #440]	; (8003e6c <update_ScurveTraj+0x2ac>)
 8003cb4:	ed93 7b00 	vldr	d7, [r3]
 8003cb8:	eeb1 7b47 	vneg.f64	d7, d7
 8003cbc:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 8003cc0:	ed97 7b02 	vldr	d7, [r7, #8]
 8003cc4:	eeb1 7b47 	vneg.f64	d7, d7
 8003cc8:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <update_ScurveTraj+0x2ac>)
 8003cca:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 8003cce:	ed97 6b08 	vldr	d6, [r7, #32]
 8003cd2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003cd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003cda:	eeb0 6bc7 	vabs.f64	d6, d7
 8003cde:	ed97 7b02 	vldr	d7, [r7, #8]
 8003ce2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003ce6:	eeb0 0b45 	vmov.f64	d0, d5
 8003cea:	f00c f8b5 	bl	800fe58 <sqrt>
 8003cee:	eeb0 4b40 	vmov.f64	d4, d0
 8003cf2:	ed97 5b04 	vldr	d5, [r7, #16]
 8003cf6:	ed97 6b02 	vldr	d6, [r7, #8]
 8003cfa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003cfe:	eeb4 4bc7 	vcmpe.f64	d4, d7
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	d512      	bpl.n	8003d2e <update_ScurveTraj+0x16e>
 8003d08:	ed97 6b08 	vldr	d6, [r7, #32]
 8003d0c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003d10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d14:	eeb0 6bc7 	vabs.f64	d6, d7
 8003d18:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d1c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003d20:	eeb0 0b45 	vmov.f64	d0, d5
 8003d24:	f00c f898 	bl	800fe58 <sqrt>
 8003d28:	eeb0 7b40 	vmov.f64	d7, d0
 8003d2c:	e005      	b.n	8003d3a <update_ScurveTraj+0x17a>
 8003d2e:	ed97 5b04 	vldr	d5, [r7, #16]
 8003d32:	ed97 6b02 	vldr	d6, [r7, #8]
 8003d36:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d3e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 8003d42:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d46:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003d4a:	ed97 4b04 	vldr	d4, [r7, #16]
 8003d4e:	ed97 5b02 	vldr	d5, [r7, #8]
 8003d52:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003d56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5e:	d400      	bmi.n	8003d62 <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8003d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8003d62:	ed97 6b06 	vldr	d6, [r7, #24]
 8003d66:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003d6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003d6e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d72:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003d76:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003d7a:	ed97 0b04 	vldr	d0, [r7, #16]
 8003d7e:	f00b fdeb 	bl	800f958 <pow>
 8003d82:	eeb0 7b40 	vmov.f64	d7, d0
 8003d86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8003d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8e:	d51d      	bpl.n	8003dcc <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8003d90:	ed97 6b06 	vldr	d6, [r7, #24]
 8003d94:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003d98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d9c:	eeb0 6bc7 	vabs.f64	d6, d7
 8003da0:	ed97 7b02 	vldr	d7, [r7, #8]
 8003da4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003da8:	eeb0 0b45 	vmov.f64	d0, d5
 8003dac:	f00c f854 	bl	800fe58 <sqrt>
 8003db0:	eeb0 7b40 	vmov.f64	d7, d0
 8003db4:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <update_ScurveTraj+0x2c4>)
 8003db6:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 8003dba:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <update_ScurveTraj+0x2c4>)
 8003dbc:	ed93 7b00 	vldr	d7, [r3]
 8003dc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003dc4:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <update_ScurveTraj+0x2c8>)
 8003dc6:	ed83 7b00 	vstr	d7, [r3]
 8003dca:	e01a      	b.n	8003e02 <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8003dcc:	ed97 5b04 	vldr	d5, [r7, #16]
 8003dd0:	ed97 6b02 	vldr	d6, [r7, #8]
 8003dd4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <update_ScurveTraj+0x2c4>)
 8003dda:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 8003dde:	ed97 6b06 	vldr	d6, [r7, #24]
 8003de2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003de6:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003dea:	ed97 7b04 	vldr	d7, [r7, #16]
 8003dee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <update_ScurveTraj+0x2c4>)
 8003df4:	ed93 7b00 	vldr	d7, [r3]
 8003df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dfc:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <update_ScurveTraj+0x2c8>)
 8003dfe:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 8003e02:	ed97 6b06 	vldr	d6, [r7, #24]
 8003e06:	ed97 7b08 	vldr	d7, [r7, #32]
 8003e0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003e0e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003e12:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003e16:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003e1a:	ed97 0b04 	vldr	d0, [r7, #16]
 8003e1e:	f00b fd9b 	bl	800f958 <pow>
 8003e22:	eeb0 7b40 	vmov.f64	d7, d0
 8003e26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8003e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2e:	d531      	bpl.n	8003e94 <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 8003e30:	ed97 6b06 	vldr	d6, [r7, #24]
 8003e34:	ed97 7b08 	vldr	d7, [r7, #32]
 8003e38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003e3c:	eeb0 6bc7 	vabs.f64	d6, d7
 8003e40:	ed97 7b02 	vldr	d7, [r7, #8]
 8003e44:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003e48:	eeb0 0b45 	vmov.f64	d0, d5
 8003e4c:	f00c f804 	bl	800fe58 <sqrt>
 8003e50:	eeb0 7b40 	vmov.f64	d7, d0
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <update_ScurveTraj+0x2cc>)
 8003e56:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <update_ScurveTraj+0x2cc>)
 8003e5c:	ed93 7b00 	vldr	d7, [r3]
 8003e60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <update_ScurveTraj+0x2d0>)
 8003e66:	ed83 7b00 	vstr	d7, [r3]
 8003e6a:	e02e      	b.n	8003eca <update_ScurveTraj+0x30a>
 8003e6c:	24000430 	.word	0x24000430
 8003e70:	24000450 	.word	0x24000450
 8003e74:	24000438 	.word	0x24000438
 8003e78:	24000818 	.word	0x24000818
 8003e7c:	24000820 	.word	0x24000820
 8003e80:	240007d0 	.word	0x240007d0
 8003e84:	240007f8 	.word	0x240007f8
 8003e88:	240007e0 	.word	0x240007e0
 8003e8c:	24000800 	.word	0x24000800
 8003e90:	240007e8 	.word	0x240007e8
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8003e94:	ed97 5b04 	vldr	d5, [r7, #16]
 8003e98:	ed97 6b02 	vldr	d6, [r7, #8]
 8003e9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003ea0:	4b95      	ldr	r3, [pc, #596]	; (80040f8 <update_ScurveTraj+0x538>)
 8003ea2:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 8003ea6:	ed97 6b06 	vldr	d6, [r7, #24]
 8003eaa:	ed97 7b08 	vldr	d7, [r7, #32]
 8003eae:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003eb2:	ed97 7b04 	vldr	d7, [r7, #16]
 8003eb6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003eba:	4b8f      	ldr	r3, [pc, #572]	; (80040f8 <update_ScurveTraj+0x538>)
 8003ebc:	ed93 7b00 	vldr	d7, [r3]
 8003ec0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ec4:	4b8d      	ldr	r3, [pc, #564]	; (80040fc <update_ScurveTraj+0x53c>)
 8003ec6:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - Ta/2*(1+vi/vmax)-Td/2*(1+vf/vmax);
 8003eca:	4b8d      	ldr	r3, [pc, #564]	; (8004100 <update_ScurveTraj+0x540>)
 8003ecc:	ed93 6b00 	vldr	d6, [r3]
 8003ed0:	4b8c      	ldr	r3, [pc, #560]	; (8004104 <update_ScurveTraj+0x544>)
 8003ed2:	ed93 7b00 	vldr	d7, [r3]
 8003ed6:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003eda:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ede:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003ee2:	4b89      	ldr	r3, [pc, #548]	; (8004108 <update_ScurveTraj+0x548>)
 8003ee4:	ed93 7b00 	vldr	d7, [r3]
 8003ee8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8003eec:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8003ef0:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8003ef4:	ed97 4b06 	vldr	d4, [r7, #24]
 8003ef8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003efc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8003f00:	ee37 7b04 	vadd.f64	d7, d7, d4
 8003f04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f08:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003f0c:	4b7b      	ldr	r3, [pc, #492]	; (80040fc <update_ScurveTraj+0x53c>)
 8003f0e:	ed93 7b00 	vldr	d7, [r3]
 8003f12:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8003f16:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8003f1a:	ed97 3b08 	vldr	d3, [r7, #32]
 8003f1e:	ed97 4b06 	vldr	d4, [r7, #24]
 8003f22:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003f26:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8003f2a:	ee37 7b04 	vadd.f64	d7, d7, d4
 8003f2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003f36:	4b75      	ldr	r3, [pc, #468]	; (800410c <update_ScurveTraj+0x54c>)
 8003f38:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 8003f3c:	4b73      	ldr	r3, [pc, #460]	; (800410c <update_ScurveTraj+0x54c>)
 8003f3e:	ed93 7b00 	vldr	d7, [r3]
 8003f42:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	f300 82d5 	bgt.w	80044f8 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 8003f4e:	ed97 5b04 	vldr	d5, [r7, #16]
 8003f52:	ed97 6b02 	vldr	d6, [r7, #8]
 8003f56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	; (8004110 <update_ScurveTraj+0x550>)
 8003f5c:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 8003f60:	4b6b      	ldr	r3, [pc, #428]	; (8004110 <update_ScurveTraj+0x550>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	4964      	ldr	r1, [pc, #400]	; (80040f8 <update_ScurveTraj+0x538>)
 8003f68:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <update_ScurveTraj+0x550>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	4968      	ldr	r1, [pc, #416]	; (8004114 <update_ScurveTraj+0x554>)
 8003f74:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8003f78:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8003f7c:	ed97 0b04 	vldr	d0, [r7, #16]
 8003f80:	f00b fcea 	bl	800f958 <pow>
 8003f84:	eeb0 9b40 	vmov.f64	d9, d0
 8003f88:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003f8c:	ed97 0b02 	vldr	d0, [r7, #8]
 8003f90:	f00b fce2 	bl	800f958 <pow>
 8003f94:	eeb0 7b40 	vmov.f64	d7, d0
 8003f98:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8003f9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003fa0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003fa4:	f00b fcd8 	bl	800f958 <pow>
 8003fa8:	eeb0 9b40 	vmov.f64	d9, d0
 8003fac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8003fb0:	ed97 0b08 	vldr	d0, [r7, #32]
 8003fb4:	f00b fcd0 	bl	800f958 <pow>
 8003fb8:	eeb0 7b40 	vmov.f64	d7, d0
 8003fbc:	ee39 7b07 	vadd.f64	d7, d9, d7
 8003fc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003fc4:	ee38 6b07 	vadd.f64	d6, d8, d7
 8003fc8:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <update_ScurveTraj+0x540>)
 8003fca:	ed93 5b00 	vldr	d5, [r3]
 8003fce:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <update_ScurveTraj+0x544>)
 8003fd0:	ed93 7b00 	vldr	d7, [r3]
 8003fd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003fd8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003fdc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003fe0:	ed97 3b04 	vldr	d3, [r7, #16]
 8003fe4:	ed97 4b02 	vldr	d4, [r7, #8]
 8003fe8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8003fec:	ee37 4b07 	vadd.f64	d4, d7, d7
 8003ff0:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8003ff4:	ed97 7b08 	vldr	d7, [r7, #32]
 8003ff8:	ee33 7b07 	vadd.f64	d7, d3, d7
 8003ffc:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004000:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004004:	ed97 7b04 	vldr	d7, [r7, #16]
 8004008:	ee25 7b07 	vmul.f64	d7, d5, d7
 800400c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004010:	4b41      	ldr	r3, [pc, #260]	; (8004118 <update_ScurveTraj+0x558>)
 8004012:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8004016:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800401a:	ed97 0b04 	vldr	d0, [r7, #16]
 800401e:	f00b fc9b 	bl	800f958 <pow>
 8004022:	eeb0 5b40 	vmov.f64	d5, d0
 8004026:	ed97 7b02 	vldr	d7, [r7, #8]
 800402a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800402e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004032:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004036:	ee36 8b47 	vsub.f64	d8, d6, d7
 800403a:	4b37      	ldr	r3, [pc, #220]	; (8004118 <update_ScurveTraj+0x558>)
 800403c:	ed93 7b00 	vldr	d7, [r3]
 8004040:	eeb0 0b47 	vmov.f64	d0, d7
 8004044:	f00b ff08 	bl	800fe58 <sqrt>
 8004048:	eeb0 7b40 	vmov.f64	d7, d0
 800404c:	ee38 5b07 	vadd.f64	d5, d8, d7
 8004050:	ed97 7b04 	vldr	d7, [r7, #16]
 8004054:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004058:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800405c:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <update_ScurveTraj+0x548>)
 800405e:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8004062:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004066:	ed97 0b04 	vldr	d0, [r7, #16]
 800406a:	f00b fc75 	bl	800f958 <pow>
 800406e:	eeb0 5b40 	vmov.f64	d5, d0
 8004072:	ed97 7b02 	vldr	d7, [r7, #8]
 8004076:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800407a:	ed97 7b08 	vldr	d7, [r7, #32]
 800407e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004082:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <update_ScurveTraj+0x558>)
 8004088:	ed93 7b00 	vldr	d7, [r3]
 800408c:	eeb0 0b47 	vmov.f64	d0, d7
 8004090:	f00b fee2 	bl	800fe58 <sqrt>
 8004094:	eeb0 7b40 	vmov.f64	d7, d0
 8004098:	ee38 5b07 	vadd.f64	d5, d8, d7
 800409c:	ed97 7b04 	vldr	d7, [r7, #16]
 80040a0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80040a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <update_ScurveTraj+0x53c>)
 80040aa:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 80040ae:	4917      	ldr	r1, [pc, #92]	; (800410c <update_ScurveTraj+0x54c>)
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <update_ScurveTraj+0x554>)
 80040be:	ed93 7b00 	vldr	d7, [r3]
 80040c2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <update_ScurveTraj+0x548>)
 80040c8:	ed93 7b00 	vldr	d7, [r3]
 80040cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	f300 81e4 	bgt.w	80044a0 <update_ScurveTraj+0x8e0>
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <update_ScurveTraj+0x554>)
 80040da:	ed93 7b00 	vldr	d7, [r3]
 80040de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <update_ScurveTraj+0x53c>)
 80040e4:	ed93 7b00 	vldr	d7, [r3]
 80040e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80040ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f0:	f340 8202 	ble.w	80044f8 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 80040f4:	e1d4      	b.n	80044a0 <update_ScurveTraj+0x8e0>
 80040f6:	bf00      	nop
 80040f8:	24000800 	.word	0x24000800
 80040fc:	240007e8 	.word	0x240007e8
 8004100:	24000820 	.word	0x24000820
 8004104:	24000818 	.word	0x24000818
 8004108:	240007e0 	.word	0x240007e0
 800410c:	240007f0 	.word	0x240007f0
 8004110:	240007f8 	.word	0x240007f8
 8004114:	24000808 	.word	0x24000808
 8004118:	24000810 	.word	0x24000810

				amax=amax*0.99;
 800411c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004120:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8004478 <update_ScurveTraj+0x8b8>
 8004124:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004128:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 800412c:	ed97 5b04 	vldr	d5, [r7, #16]
 8004130:	ed97 6b02 	vldr	d6, [r7, #8]
 8004134:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004138:	4bd1      	ldr	r3, [pc, #836]	; (8004480 <update_ScurveTraj+0x8c0>)
 800413a:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 800413e:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8004142:	ed97 0b04 	vldr	d0, [r7, #16]
 8004146:	f00b fc07 	bl	800f958 <pow>
 800414a:	eeb0 9b40 	vmov.f64	d9, d0
 800414e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004152:	ed97 0b02 	vldr	d0, [r7, #8]
 8004156:	f00b fbff 	bl	800f958 <pow>
 800415a:	eeb0 7b40 	vmov.f64	d7, d0
 800415e:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8004162:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004166:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800416a:	f00b fbf5 	bl	800f958 <pow>
 800416e:	eeb0 9b40 	vmov.f64	d9, d0
 8004172:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004176:	ed97 0b08 	vldr	d0, [r7, #32]
 800417a:	f00b fbed 	bl	800f958 <pow>
 800417e:	eeb0 7b40 	vmov.f64	d7, d0
 8004182:	ee39 7b07 	vadd.f64	d7, d9, d7
 8004186:	ee37 7b07 	vadd.f64	d7, d7, d7
 800418a:	ee38 6b07 	vadd.f64	d6, d8, d7
 800418e:	4bbd      	ldr	r3, [pc, #756]	; (8004484 <update_ScurveTraj+0x8c4>)
 8004190:	ed93 5b00 	vldr	d5, [r3]
 8004194:	4bbc      	ldr	r3, [pc, #752]	; (8004488 <update_ScurveTraj+0x8c8>)
 8004196:	ed93 7b00 	vldr	d7, [r3]
 800419a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800419e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80041a2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80041a6:	ed97 3b04 	vldr	d3, [r7, #16]
 80041aa:	ed97 4b02 	vldr	d4, [r7, #8]
 80041ae:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80041b2:	ee37 4b07 	vadd.f64	d4, d7, d7
 80041b6:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80041ba:	ed97 7b08 	vldr	d7, [r7, #32]
 80041be:	ee33 7b07 	vadd.f64	d7, d3, d7
 80041c2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80041c6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80041ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80041ce:	ee25 7b07 	vmul.f64	d7, d5, d7
 80041d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041d6:	4bad      	ldr	r3, [pc, #692]	; (800448c <update_ScurveTraj+0x8cc>)
 80041d8:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80041dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80041e0:	ed97 0b04 	vldr	d0, [r7, #16]
 80041e4:	f00b fbb8 	bl	800f958 <pow>
 80041e8:	eeb0 5b40 	vmov.f64	d5, d0
 80041ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80041f0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80041f4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80041f8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80041fc:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004200:	4ba2      	ldr	r3, [pc, #648]	; (800448c <update_ScurveTraj+0x8cc>)
 8004202:	ed93 7b00 	vldr	d7, [r3]
 8004206:	eeb0 0b47 	vmov.f64	d0, d7
 800420a:	f00b fe25 	bl	800fe58 <sqrt>
 800420e:	eeb0 7b40 	vmov.f64	d7, d0
 8004212:	ee38 5b07 	vadd.f64	d5, d8, d7
 8004216:	ed97 7b04 	vldr	d7, [r7, #16]
 800421a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800421e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004222:	4b9b      	ldr	r3, [pc, #620]	; (8004490 <update_ScurveTraj+0x8d0>)
 8004224:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8004228:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800422c:	ed97 0b04 	vldr	d0, [r7, #16]
 8004230:	f00b fb92 	bl	800f958 <pow>
 8004234:	eeb0 5b40 	vmov.f64	d5, d0
 8004238:	ed97 7b02 	vldr	d7, [r7, #8]
 800423c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004240:	ed97 7b08 	vldr	d7, [r7, #32]
 8004244:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004248:	ee36 8b47 	vsub.f64	d8, d6, d7
 800424c:	4b8f      	ldr	r3, [pc, #572]	; (800448c <update_ScurveTraj+0x8cc>)
 800424e:	ed93 7b00 	vldr	d7, [r3]
 8004252:	eeb0 0b47 	vmov.f64	d0, d7
 8004256:	f00b fdff 	bl	800fe58 <sqrt>
 800425a:	eeb0 7b40 	vmov.f64	d7, d0
 800425e:	ee38 5b07 	vadd.f64	d5, d8, d7
 8004262:	ed97 7b04 	vldr	d7, [r7, #16]
 8004266:	ee37 6b07 	vadd.f64	d6, d7, d7
 800426a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800426e:	4b89      	ldr	r3, [pc, #548]	; (8004494 <update_ScurveTraj+0x8d4>)
 8004270:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 8004274:	4b86      	ldr	r3, [pc, #536]	; (8004490 <update_ScurveTraj+0x8d0>)
 8004276:	ed93 7b00 	vldr	d7, [r3]
 800427a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004282:	d576      	bpl.n	8004372 <update_ScurveTraj+0x7b2>
					Ta=0;
 8004284:	4982      	ldr	r1, [pc, #520]	; (8004490 <update_ScurveTraj+0x8d0>)
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8004292:	4981      	ldr	r1, [pc, #516]	; (8004498 <update_ScurveTraj+0x8d8>)
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 80042a0:	4b78      	ldr	r3, [pc, #480]	; (8004484 <update_ScurveTraj+0x8c4>)
 80042a2:	ed93 6b00 	vldr	d6, [r3]
 80042a6:	4b78      	ldr	r3, [pc, #480]	; (8004488 <update_ScurveTraj+0x8c8>)
 80042a8:	ed93 7b00 	vldr	d7, [r3]
 80042ac:	ee36 5b47 	vsub.f64	d5, d6, d7
 80042b0:	ed97 6b08 	vldr	d6, [r7, #32]
 80042b4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80042b8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80042bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80042c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80042c4:	4b73      	ldr	r3, [pc, #460]	; (8004494 <update_ScurveTraj+0x8d4>)
 80042c6:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 80042ca:	4b6e      	ldr	r3, [pc, #440]	; (8004484 <update_ScurveTraj+0x8c4>)
 80042cc:	ed93 6b00 	vldr	d6, [r3]
 80042d0:	4b6d      	ldr	r3, [pc, #436]	; (8004488 <update_ScurveTraj+0x8c8>)
 80042d2:	ed93 7b00 	vldr	d7, [r3]
 80042d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80042da:	ed97 7b02 	vldr	d7, [r7, #8]
 80042de:	ee26 8b07 	vmul.f64	d8, d6, d7
 80042e2:	4b68      	ldr	r3, [pc, #416]	; (8004484 <update_ScurveTraj+0x8c4>)
 80042e4:	ed93 6b00 	vldr	d6, [r3]
 80042e8:	4b67      	ldr	r3, [pc, #412]	; (8004488 <update_ScurveTraj+0x8c8>)
 80042ea:	ed93 7b00 	vldr	d7, [r3]
 80042ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80042f2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80042f6:	eeb0 0b47 	vmov.f64	d0, d7
 80042fa:	f00b fb2d 	bl	800f958 <pow>
 80042fe:	eeb0 6b40 	vmov.f64	d6, d0
 8004302:	ed97 7b02 	vldr	d7, [r7, #8]
 8004306:	ee26 9b07 	vmul.f64	d9, d6, d7
 800430a:	ed97 6b08 	vldr	d6, [r7, #32]
 800430e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004312:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004316:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800431a:	eeb0 0b47 	vmov.f64	d0, d7
 800431e:	f00b fb1b 	bl	800f958 <pow>
 8004322:	eeb0 5b40 	vmov.f64	d5, d0
 8004326:	ed97 6b08 	vldr	d6, [r7, #32]
 800432a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800432e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004332:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004336:	ee39 6b07 	vadd.f64	d6, d9, d7
 800433a:	ed97 7b02 	vldr	d7, [r7, #8]
 800433e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004342:	eeb0 0b47 	vmov.f64	d0, d7
 8004346:	f00b fd87 	bl	800fe58 <sqrt>
 800434a:	eeb0 7b40 	vmov.f64	d7, d0
 800434e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8004352:	ed97 6b08 	vldr	d6, [r7, #32]
 8004356:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800435a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800435e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004362:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004366:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800436a:	4b4c      	ldr	r3, [pc, #304]	; (800449c <update_ScurveTraj+0x8dc>)
 800436c:	ed83 7b00 	vstr	d7, [r3]
					break;
 8004370:	e0c2      	b.n	80044f8 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 8004372:	4b48      	ldr	r3, [pc, #288]	; (8004494 <update_ScurveTraj+0x8d4>)
 8004374:	ed93 7b00 	vldr	d7, [r3]
 8004378:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004380:	d400      	bmi.n	8004384 <update_ScurveTraj+0x7c4>
 8004382:	e08d      	b.n	80044a0 <update_ScurveTraj+0x8e0>
					Td=0;
 8004384:	4943      	ldr	r1, [pc, #268]	; (8004494 <update_ScurveTraj+0x8d4>)
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8004392:	4b3c      	ldr	r3, [pc, #240]	; (8004484 <update_ScurveTraj+0x8c4>)
 8004394:	ed93 6b00 	vldr	d6, [r3]
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <update_ScurveTraj+0x8c8>)
 800439a:	ed93 7b00 	vldr	d7, [r3]
 800439e:	ee36 5b47 	vsub.f64	d5, d6, d7
 80043a2:	ed97 6b08 	vldr	d6, [r7, #32]
 80043a6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80043aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80043ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80043b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <update_ScurveTraj+0x8d0>)
 80043b8:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <update_ScurveTraj+0x8c4>)
 80043be:	ed93 6b00 	vldr	d6, [r3]
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <update_ScurveTraj+0x8c8>)
 80043c4:	ed93 7b00 	vldr	d7, [r3]
 80043c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80043cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80043d0:	ee26 8b07 	vmul.f64	d8, d6, d7
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <update_ScurveTraj+0x8c4>)
 80043d6:	ed93 6b00 	vldr	d6, [r3]
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <update_ScurveTraj+0x8c8>)
 80043dc:	ed93 7b00 	vldr	d7, [r3]
 80043e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80043e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80043e8:	eeb0 0b47 	vmov.f64	d0, d7
 80043ec:	f00b fab4 	bl	800f958 <pow>
 80043f0:	eeb0 6b40 	vmov.f64	d6, d0
 80043f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80043f8:	ee26 9b07 	vmul.f64	d9, d6, d7
 80043fc:	ed97 6b08 	vldr	d6, [r7, #32]
 8004400:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004404:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004408:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800440c:	eeb0 0b47 	vmov.f64	d0, d7
 8004410:	f00b faa2 	bl	800f958 <pow>
 8004414:	eeb0 5b40 	vmov.f64	d5, d0
 8004418:	ed97 6b08 	vldr	d6, [r7, #32]
 800441c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004420:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004424:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004428:	ee39 6b47 	vsub.f64	d6, d9, d7
 800442c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004430:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004434:	eeb0 0b47 	vmov.f64	d0, d7
 8004438:	f00b fd0e 	bl	800fe58 <sqrt>
 800443c:	eeb0 7b40 	vmov.f64	d7, d0
 8004440:	ee38 5b47 	vsub.f64	d5, d8, d7
 8004444:	ed97 6b08 	vldr	d6, [r7, #32]
 8004448:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800444c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004450:	ed97 7b02 	vldr	d7, [r7, #8]
 8004454:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004458:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800445c:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <update_ScurveTraj+0x8d8>)
 800445e:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 8004462:	490e      	ldr	r1, [pc, #56]	; (800449c <update_ScurveTraj+0x8dc>)
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8004470:	e042      	b.n	80044f8 <update_ScurveTraj+0x938>
 8004472:	bf00      	nop
 8004474:	f3af 8000 	nop.w
 8004478:	7ae147ae 	.word	0x7ae147ae
 800447c:	3fefae14 	.word	0x3fefae14
 8004480:	24000808 	.word	0x24000808
 8004484:	24000820 	.word	0x24000820
 8004488:	24000818 	.word	0x24000818
 800448c:	24000810 	.word	0x24000810
 8004490:	240007e0 	.word	0x240007e0
 8004494:	240007e8 	.word	0x240007e8
 8004498:	240007f8 	.word	0x240007f8
 800449c:	24000800 	.word	0x24000800
			while (!(Ta>2*Tj && Td>2*Tj)){
 80044a0:	4b33      	ldr	r3, [pc, #204]	; (8004570 <update_ScurveTraj+0x9b0>)
 80044a2:	ed93 7b00 	vldr	d7, [r3]
 80044a6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80044aa:	4b32      	ldr	r3, [pc, #200]	; (8004574 <update_ScurveTraj+0x9b4>)
 80044ac:	ed93 7b00 	vldr	d7, [r3]
 80044b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf4c      	ite	mi
 80044ba:	2301      	movmi	r3, #1
 80044bc:	2300      	movpl	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f083 0301 	eor.w	r3, r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f47f ae28 	bne.w	800411c <update_ScurveTraj+0x55c>
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <update_ScurveTraj+0x9b0>)
 80044ce:	ed93 7b00 	vldr	d7, [r3]
 80044d2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80044d6:	4b28      	ldr	r3, [pc, #160]	; (8004578 <update_ScurveTraj+0x9b8>)
 80044d8:	ed93 7b00 	vldr	d7, [r3]
 80044dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80044e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e4:	bf4c      	ite	mi
 80044e6:	2301      	movmi	r3, #1
 80044e8:	2300      	movpl	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f083 0301 	eor.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f47f ae12 	bne.w	800411c <update_ScurveTraj+0x55c>
		}
	}

	//double values[]={Tj1,Tj2,Tj,Ta,Td,Tv,T};

	*(params) = Tj1;
 80044f8:	4b20      	ldr	r3, [pc, #128]	; (800457c <update_ScurveTraj+0x9bc>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f103 0108 	add.w	r1, r3, #8
 800450a:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <update_ScurveTraj+0x9c0>)
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f103 0110 	add.w	r1, r3, #16
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <update_ScurveTraj+0x9b0>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f103 0118 	add.w	r1, r3, #24
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <update_ScurveTraj+0x9b4>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f103 0120 	add.w	r1, r3, #32
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <update_ScurveTraj+0x9b8>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <update_ScurveTraj+0x9c4>)
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <update_ScurveTraj+0x9c8>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	e9c1 2300 	strd	r2, r3, [r1]


}
 8004564:	bf00      	nop
 8004566:	3748      	adds	r7, #72	; 0x48
 8004568:	46bd      	mov	sp, r7
 800456a:	ecbd 8b04 	vpop	{d8-d9}
 800456e:	bd80      	pop	{r7, pc}
 8004570:	24000808 	.word	0x24000808
 8004574:	240007e0 	.word	0x240007e0
 8004578:	240007e8 	.word	0x240007e8
 800457c:	240007f8 	.word	0x240007f8
 8004580:	24000800 	.word	0x24000800
 8004584:	240007f0 	.word	0x240007f0
 8004588:	240007d8 	.word	0x240007d8
 800458c:	00000000 	.word	0x00000000

08004590 <setProfilTimer>:


void setProfilTimer(void){
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8004594:	4b78      	ldr	r3, [pc, #480]	; (8004778 <setProfilTimer+0x1e8>)
 8004596:	ed93 7b04 	vldr	d7, [r3, #16]
 800459a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8004758 <setProfilTimer+0x1c8>
 800459e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045a2:	4b75      	ldr	r3, [pc, #468]	; (8004778 <setProfilTimer+0x1e8>)
 80045a4:	ed83 7b06 	vstr	d7, [r3, #24]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 80045a8:	4b74      	ldr	r3, [pc, #464]	; (800477c <setProfilTimer+0x1ec>)
 80045aa:	ed93 7b04 	vldr	d7, [r3, #16]
 80045ae:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8004758 <setProfilTimer+0x1c8>
 80045b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045b6:	4b71      	ldr	r3, [pc, #452]	; (800477c <setProfilTimer+0x1ec>)
 80045b8:	ed83 7b06 	vstr	d7, [r3, #24]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 80045bc:	4b70      	ldr	r3, [pc, #448]	; (8004780 <setProfilTimer+0x1f0>)
 80045be:	ed93 7b04 	vldr	d7, [r3, #16]
 80045c2:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8004758 <setProfilTimer+0x1c8>
 80045c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045ca:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <setProfilTimer+0x1f0>)
 80045cc:	ed83 7b06 	vstr	d7, [r3, #24]
	if(rpm3<=0.1){
		rpm3=0.1;
	}
	*/

	rpm1 = 4.0;   //HARDCODE PARA HACER PRUEBAS A BAJA VELOCIDAD
 80045d0:	496c      	ldr	r1, [pc, #432]	; (8004784 <setProfilTimer+0x1f4>)
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	4b6c      	ldr	r3, [pc, #432]	; (8004788 <setProfilTimer+0x1f8>)
 80045d8:	e9c1 2300 	strd	r2, r3, [r1]
	rpm2 = 1.0 ;
 80045dc:	496b      	ldr	r1, [pc, #428]	; (800478c <setProfilTimer+0x1fc>)
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	4b6b      	ldr	r3, [pc, #428]	; (8004790 <setProfilTimer+0x200>)
 80045e4:	e9c1 2300 	strd	r2, r3, [r1]
	rpm3 = 1.0;
 80045e8:	496a      	ldr	r1, [pc, #424]	; (8004794 <setProfilTimer+0x204>)
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	4b68      	ldr	r3, [pc, #416]	; (8004790 <setProfilTimer+0x200>)
 80045f0:	e9c1 2300 	strd	r2, r3, [r1]


	_peri1= COUNTERPERIOD(rpm1);
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <setProfilTimer+0x208>)
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004600:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004604:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004608:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8004760 <setProfilTimer+0x1d0>
 800460c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004610:	4b5c      	ldr	r3, [pc, #368]	; (8004784 <setProfilTimer+0x1f4>)
 8004612:	ed93 7b00 	vldr	d7, [r3]
 8004616:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8004768 <setProfilTimer+0x1d8>
 800461a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800461e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8004770 <setProfilTimer+0x1e0>
 8004622:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800462a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800462e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004632:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004636:	ee17 2a90 	vmov	r2, s15
 800463a:	4b58      	ldr	r3, [pc, #352]	; (800479c <setProfilTimer+0x20c>)
 800463c:	601a      	str	r2, [r3, #0]
	_peri2= COUNTERPERIOD(rpm2);
 800463e:	4b56      	ldr	r3, [pc, #344]	; (8004798 <setProfilTimer+0x208>)
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800464a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800464e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004652:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8004760 <setProfilTimer+0x1d0>
 8004656:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800465a:	4b4c      	ldr	r3, [pc, #304]	; (800478c <setProfilTimer+0x1fc>)
 800465c:	ed93 7b00 	vldr	d7, [r3]
 8004660:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8004768 <setProfilTimer+0x1d8>
 8004664:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004668:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8004770 <setProfilTimer+0x1e0>
 800466c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004670:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004674:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004678:	ee37 7b46 	vsub.f64	d7, d7, d6
 800467c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004680:	ee17 2a90 	vmov	r2, s15
 8004684:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <setProfilTimer+0x210>)
 8004686:	601a      	str	r2, [r3, #0]
	_peri3= COUNTERPERIOD(rpm3);
 8004688:	4b43      	ldr	r3, [pc, #268]	; (8004798 <setProfilTimer+0x208>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004694:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004698:	ee37 7b06 	vadd.f64	d7, d7, d6
 800469c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8004760 <setProfilTimer+0x1d0>
 80046a0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <setProfilTimer+0x204>)
 80046a6:	ed93 7b00 	vldr	d7, [r3]
 80046aa:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8004768 <setProfilTimer+0x1d8>
 80046ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 80046b2:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 8004770 <setProfilTimer+0x1e0>
 80046b6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80046ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80046be:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80046c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80046ca:	ee17 2a90 	vmov	r2, s15
 80046ce:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <setProfilTimer+0x214>)
 80046d0:	601a      	str	r2, [r3, #0]




	TIM12->ARR = _peri1;
 80046d2:	4a31      	ldr	r2, [pc, #196]	; (8004798 <setProfilTimer+0x208>)
 80046d4:	4b31      	ldr	r3, [pc, #196]	; (800479c <setProfilTimer+0x20c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM13->ARR = _peri2;
 80046da:	4a33      	ldr	r2, [pc, #204]	; (80047a8 <setProfilTimer+0x218>)
 80046dc:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <setProfilTimer+0x210>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM14->ARR = _peri3;
 80046e2:	4a32      	ldr	r2, [pc, #200]	; (80047ac <setProfilTimer+0x21c>)
 80046e4:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <setProfilTimer+0x214>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	62d3      	str	r3, [r2, #44]	; 0x2c



	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <setProfilTimer+0x208>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80046f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80046fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <setProfilTimer+0x208>)
 8004700:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004704:	ee17 2a90 	vmov	r2, s15
 8004708:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 800470a:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <setProfilTimer+0x218>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8004716:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800471a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800471e:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <setProfilTimer+0x218>)
 8004720:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004724:	ee17 2a90 	vmov	r2, s15
 8004728:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <setProfilTimer+0x21c>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8004736:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800473a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <setProfilTimer+0x21c>)
 8004740:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004744:	ee17 2a90 	vmov	r2, s15
 8004748:	635a      	str	r2, [r3, #52]	; 0x34
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		*/


}
 800474a:	bf00      	nop
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	f3af 8000 	nop.w
 8004758:	66ed2a99 	.word	0x66ed2a99
 800475c:	4023193d 	.word	0x4023193d
 8004760:	00000000 	.word	0x00000000
 8004764:	418e8480 	.word	0x418e8480
 8004768:	00000000 	.word	0x00000000
 800476c:	40bf4000 	.word	0x40bf4000
 8004770:	00000000 	.word	0x00000000
 8004774:	404e0000 	.word	0x404e0000
 8004778:	24000350 	.word	0x24000350
 800477c:	24000390 	.word	0x24000390
 8004780:	240003d0 	.word	0x240003d0
 8004784:	24000410 	.word	0x24000410
 8004788:	40100000 	.word	0x40100000
 800478c:	24000418 	.word	0x24000418
 8004790:	3ff00000 	.word	0x3ff00000
 8004794:	24000420 	.word	0x24000420
 8004798:	40001800 	.word	0x40001800
 800479c:	24000828 	.word	0x24000828
 80047a0:	2400082c 	.word	0x2400082c
 80047a4:	24000830 	.word	0x24000830
 80047a8:	40001c00 	.word	0x40001c00
 80047ac:	40002000 	.word	0x40002000

080047b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047b4:	4b22      	ldr	r3, [pc, #136]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047b6:	4a23      	ldr	r2, [pc, #140]	; (8004844 <MX_USART1_UART_Init+0x94>)
 80047b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80047ba:	4b21      	ldr	r3, [pc, #132]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80047c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047c2:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047d6:	220c      	movs	r2, #12
 80047d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047da:	4b19      	ldr	r3, [pc, #100]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047dc:	2200      	movs	r2, #0
 80047de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047e6:	4b16      	ldr	r3, [pc, #88]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047f8:	4811      	ldr	r0, [pc, #68]	; (8004840 <MX_USART1_UART_Init+0x90>)
 80047fa:	f005 fe81 	bl	800a500 <HAL_UART_Init>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004804:	f7fe fa50 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004808:	2100      	movs	r1, #0
 800480a:	480d      	ldr	r0, [pc, #52]	; (8004840 <MX_USART1_UART_Init+0x90>)
 800480c:	f008 f90b 	bl	800ca26 <HAL_UARTEx_SetTxFifoThreshold>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004816:	f7fe fa47 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800481a:	2100      	movs	r1, #0
 800481c:	4808      	ldr	r0, [pc, #32]	; (8004840 <MX_USART1_UART_Init+0x90>)
 800481e:	f008 f940 	bl	800caa2 <HAL_UARTEx_SetRxFifoThreshold>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004828:	f7fe fa3e 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800482c:	4804      	ldr	r0, [pc, #16]	; (8004840 <MX_USART1_UART_Init+0x90>)
 800482e:	f008 f8c1 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004838:	f7fe fa36 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800483c:	bf00      	nop
 800483e:	bd80      	pop	{r7, pc}
 8004840:	24000834 	.word	0x24000834
 8004844:	40011000 	.word	0x40011000

08004848 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800484c:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 800484e:	4a23      	ldr	r2, [pc, #140]	; (80048dc <MX_USART2_UART_Init+0x94>)
 8004850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004852:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 8004854:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800485a:	4b1f      	ldr	r3, [pc, #124]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 800486e:	220c      	movs	r2, #12
 8004870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004872:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 8004874:	2200      	movs	r2, #0
 8004876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 8004880:	2200      	movs	r2, #0
 8004882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 8004886:	2200      	movs	r2, #0
 8004888:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 800488c:	2200      	movs	r2, #0
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004890:	4811      	ldr	r0, [pc, #68]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 8004892:	f005 fe35 	bl	800a500 <HAL_UART_Init>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800489c:	f7fe fa04 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048a0:	2100      	movs	r1, #0
 80048a2:	480d      	ldr	r0, [pc, #52]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 80048a4:	f008 f8bf 	bl	800ca26 <HAL_UARTEx_SetTxFifoThreshold>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80048ae:	f7fe f9fb 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048b2:	2100      	movs	r1, #0
 80048b4:	4808      	ldr	r0, [pc, #32]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 80048b6:	f008 f8f4 	bl	800caa2 <HAL_UARTEx_SetRxFifoThreshold>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80048c0:	f7fe f9f2 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80048c4:	4804      	ldr	r0, [pc, #16]	; (80048d8 <MX_USART2_UART_Init+0x90>)
 80048c6:	f008 f875 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80048d0:	f7fe f9ea 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048d4:	bf00      	nop
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	240008c4 	.word	0x240008c4
 80048dc:	40004400 	.word	0x40004400

080048e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048e4:	4b22      	ldr	r3, [pc, #136]	; (8004970 <MX_USART3_UART_Init+0x90>)
 80048e6:	4a23      	ldr	r2, [pc, #140]	; (8004974 <MX_USART3_UART_Init+0x94>)
 80048e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <MX_USART3_UART_Init+0x90>)
 80048ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80048f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048f2:	4b1f      	ldr	r3, [pc, #124]	; (8004970 <MX_USART3_UART_Init+0x90>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <MX_USART3_UART_Init+0x90>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <MX_USART3_UART_Init+0x90>)
 8004900:	2200      	movs	r2, #0
 8004902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <MX_USART3_UART_Init+0x90>)
 8004906:	220c      	movs	r2, #12
 8004908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <MX_USART3_UART_Init+0x90>)
 800490c:	2200      	movs	r2, #0
 800490e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004910:	4b17      	ldr	r3, [pc, #92]	; (8004970 <MX_USART3_UART_Init+0x90>)
 8004912:	2200      	movs	r2, #0
 8004914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004916:	4b16      	ldr	r3, [pc, #88]	; (8004970 <MX_USART3_UART_Init+0x90>)
 8004918:	2200      	movs	r2, #0
 800491a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <MX_USART3_UART_Init+0x90>)
 800491e:	2200      	movs	r2, #0
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <MX_USART3_UART_Init+0x90>)
 8004924:	2200      	movs	r2, #0
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004928:	4811      	ldr	r0, [pc, #68]	; (8004970 <MX_USART3_UART_Init+0x90>)
 800492a:	f005 fde9 	bl	800a500 <HAL_UART_Init>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004934:	f7fe f9b8 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004938:	2100      	movs	r1, #0
 800493a:	480d      	ldr	r0, [pc, #52]	; (8004970 <MX_USART3_UART_Init+0x90>)
 800493c:	f008 f873 	bl	800ca26 <HAL_UARTEx_SetTxFifoThreshold>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004946:	f7fe f9af 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800494a:	2100      	movs	r1, #0
 800494c:	4808      	ldr	r0, [pc, #32]	; (8004970 <MX_USART3_UART_Init+0x90>)
 800494e:	f008 f8a8 	bl	800caa2 <HAL_UARTEx_SetRxFifoThreshold>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004958:	f7fe f9a6 	bl	8002ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800495c:	4804      	ldr	r0, [pc, #16]	; (8004970 <MX_USART3_UART_Init+0x90>)
 800495e:	f008 f829 	bl	800c9b4 <HAL_UARTEx_DisableFifoMode>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004968:	f7fe f99e 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800496c:	bf00      	nop
 800496e:	bd80      	pop	{r7, pc}
 8004970:	24000954 	.word	0x24000954
 8004974:	40004800 	.word	0x40004800

08004978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b0be      	sub	sp, #248	; 0xf8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004980:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004994:	22bc      	movs	r2, #188	; 0xbc
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f008 f939 	bl	800cc10 <memset>
  if(uartHandle->Instance==USART1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a84      	ldr	r2, [pc, #528]	; (8004bb4 <HAL_UART_MspInit+0x23c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d168      	bne.n	8004a7a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049a8:	2301      	movs	r3, #1
 80049aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049b6:	4618      	mov	r0, r3
 80049b8:	f002 fa8c 	bl	8006ed4 <HAL_RCCEx_PeriphCLKConfig>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80049c2:	f7fe f971 	bl	8002ca8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049c6:	4b7c      	ldr	r3, [pc, #496]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 80049c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049cc:	4a7a      	ldr	r2, [pc, #488]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 80049ce:	f043 0310 	orr.w	r3, r3, #16
 80049d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80049d6:	4b78      	ldr	r3, [pc, #480]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 80049d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e4:	4b74      	ldr	r3, [pc, #464]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ea:	4a73      	ldr	r2, [pc, #460]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049f4:	4b70      	ldr	r3, [pc, #448]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 80049f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	623b      	str	r3, [r7, #32]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a02:	4b6d      	ldr	r3, [pc, #436]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a08:	4a6b      	ldr	r2, [pc, #428]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a12:	4b69      	ldr	r3, [pc, #420]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8004a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8004a40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a44:	4619      	mov	r1, r3
 8004a46:	485d      	ldr	r0, [pc, #372]	; (8004bbc <HAL_UART_MspInit+0x244>)
 8004a48:	f001 f854 	bl	8005af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8004a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a66:	2307      	movs	r3, #7
 8004a68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8004a6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4853      	ldr	r0, [pc, #332]	; (8004bc0 <HAL_UART_MspInit+0x248>)
 8004a74:	f001 f83e 	bl	8005af4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004a78:	e097      	b.n	8004baa <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a51      	ldr	r2, [pc, #324]	; (8004bc4 <HAL_UART_MspInit+0x24c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d142      	bne.n	8004b0a <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004a84:	2302      	movs	r3, #2
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a92:	4618      	mov	r0, r3
 8004a94:	f002 fa1e 	bl	8006ed4 <HAL_RCCEx_PeriphCLKConfig>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8004a9e:	f7fe f903 	bl	8002ca8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004aa2:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004aa8:	4a43      	ldr	r2, [pc, #268]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac0:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac6:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ad0:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8004ade:	230c      	movs	r3, #12
 8004ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004af6:	2307      	movs	r3, #7
 8004af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b00:	4619      	mov	r1, r3
 8004b02:	482f      	ldr	r0, [pc, #188]	; (8004bc0 <HAL_UART_MspInit+0x248>)
 8004b04:	f000 fff6 	bl	8005af4 <HAL_GPIO_Init>
}
 8004b08:	e04f      	b.n	8004baa <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2e      	ldr	r2, [pc, #184]	; (8004bc8 <HAL_UART_MspInit+0x250>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d14a      	bne.n	8004baa <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004b14:	2302      	movs	r3, #2
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b22:	4618      	mov	r0, r3
 8004b24:	f002 f9d6 	bl	8006ed4 <HAL_RCCEx_PeriphCLKConfig>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8004b2e:	f7fe f8bb 	bl	8002ca8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b32:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b38:	4a1f      	ldr	r2, [pc, #124]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b60:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <HAL_UART_MspInit+0x240>)
 8004b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8004b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b76:	2302      	movs	r3, #2
 8004b78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b88:	2307      	movs	r3, #7
 8004b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004b92:	4619      	mov	r1, r3
 8004b94:	480d      	ldr	r0, [pc, #52]	; (8004bcc <HAL_UART_MspInit+0x254>)
 8004b96:	f000 ffad 	bl	8005af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	2027      	movs	r0, #39	; 0x27
 8004ba0:	f000 fa01 	bl	8004fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004ba4:	2027      	movs	r0, #39	; 0x27
 8004ba6:	f000 fa18 	bl	8004fda <HAL_NVIC_EnableIRQ>
}
 8004baa:	bf00      	nop
 8004bac:	37f8      	adds	r7, #248	; 0xf8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	58020400 	.word	0x58020400
 8004bc0:	58020000 	.word	0x58020000
 8004bc4:	40004400 	.word	0x40004400
 8004bc8:	40004800 	.word	0x40004800
 8004bcc:	58020c00 	.word	0x58020c00

08004bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bd6:	e003      	b.n	8004be0 <LoopCopyDataInit>

08004bd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bde:	3104      	adds	r1, #4

08004be0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004be0:	480b      	ldr	r0, [pc, #44]	; (8004c10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004be4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004be6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004be8:	d3f6      	bcc.n	8004bd8 <CopyDataInit>
  ldr  r2, =_sbss
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004bec:	e002      	b.n	8004bf4 <LoopFillZerobss>

08004bee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004bee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004bf0:	f842 3b04 	str.w	r3, [r2], #4

08004bf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bf8:	d3f9      	bcc.n	8004bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bfa:	f7fe fab7 	bl	800316c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bfe:	f007 ffe3 	bl	800cbc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c02:	f7fd fc41 	bl	8002488 <main>
  bx  lr    
 8004c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c08:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004c0c:	08011f28 	.word	0x08011f28
  ldr  r0, =_sdata
 8004c10:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004c14:	24000248 	.word	0x24000248
  ldr  r2, =_sbss
 8004c18:	24000248 	.word	0x24000248
  ldr  r3, = _ebss
 8004c1c:	240009f8 	.word	0x240009f8

08004c20 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c20:	e7fe      	b.n	8004c20 <ADC3_IRQHandler>
	...

08004c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c2a:	2003      	movs	r0, #3
 8004c2c:	f000 f9b0 	bl	8004f90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c30:	f001 ff7a 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <HAL_Init+0x68>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	4913      	ldr	r1, [pc, #76]	; (8004c90 <HAL_Init+0x6c>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <HAL_Init+0x68>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_Init+0x6c>)
 8004c58:	5cd3      	ldrb	r3, [r2, r3]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <HAL_Init+0x70>)
 8004c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c68:	4a0b      	ldr	r2, [pc, #44]	; (8004c98 <HAL_Init+0x74>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f000 f814 	bl	8004c9c <HAL_InitTick>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e002      	b.n	8004c84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c7e:	f7fe f8fb 	bl	8002e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	080101f8 	.word	0x080101f8
 8004c94:	24000068 	.word	0x24000068
 8004c98:	24000064 	.word	0x24000064

08004c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_InitTick+0x60>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e021      	b.n	8004cf4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_InitTick+0x64>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_InitTick+0x60>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f9a3 	bl	8005012 <HAL_SYSTICK_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e00e      	b.n	8004cf4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b0f      	cmp	r3, #15
 8004cda:	d80a      	bhi.n	8004cf2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	f000 f95f 	bl	8004fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ce8:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <HAL_InitTick+0x68>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e000      	b.n	8004cf4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	24000070 	.word	0x24000070
 8004d00:	24000064 	.word	0x24000064
 8004d04:	2400006c 	.word	0x2400006c

08004d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_IncTick+0x20>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_IncTick+0x24>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4413      	add	r3, r2
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_IncTick+0x24>)
 8004d1a:	6013      	str	r3, [r2, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	24000070 	.word	0x24000070
 8004d2c:	240009e4 	.word	0x240009e4

08004d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return uwTick;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <HAL_GetTick+0x14>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	240009e4 	.word	0x240009e4

08004d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d50:	f7ff ffee 	bl	8004d30 <HAL_GetTick>
 8004d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d005      	beq.n	8004d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_Delay+0x44>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d6e:	bf00      	nop
 8004d70:	f7ff ffde 	bl	8004d30 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d8f7      	bhi.n	8004d70 <HAL_Delay+0x28>
  {
  }
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	24000070 	.word	0x24000070

08004d90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_GetREVID+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0c1b      	lsrs	r3, r3, #16
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	5c001000 	.word	0x5c001000

08004da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <__NVIC_SetPriorityGrouping+0x40>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <__NVIC_SetPriorityGrouping+0x44>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dd6:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <__NVIC_SetPriorityGrouping+0x40>)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	60d3      	str	r3, [r2, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00
 8004dec:	05fa0000 	.word	0x05fa0000

08004df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <__NVIC_GetPriorityGrouping+0x18>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	f003 0307 	and.w	r3, r3, #7
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	db0b      	blt.n	8004e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	f003 021f 	and.w	r2, r3, #31
 8004e24:	4907      	ldr	r1, [pc, #28]	; (8004e44 <__NVIC_EnableIRQ+0x38>)
 8004e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	e000e100 	.word	0xe000e100

08004e48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	db12      	blt.n	8004e80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	f003 021f 	and.w	r2, r3, #31
 8004e60:	490a      	ldr	r1, [pc, #40]	; (8004e8c <__NVIC_DisableIRQ+0x44>)
 8004e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2001      	movs	r0, #1
 8004e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e6e:	3320      	adds	r3, #32
 8004e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004e74:	f3bf 8f4f 	dsb	sy
}
 8004e78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e7a:	f3bf 8f6f 	isb	sy
}
 8004e7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	e000e100 	.word	0xe000e100

08004e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	6039      	str	r1, [r7, #0]
 8004e9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	db0a      	blt.n	8004eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	490c      	ldr	r1, [pc, #48]	; (8004edc <__NVIC_SetPriority+0x4c>)
 8004eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eae:	0112      	lsls	r2, r2, #4
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eb8:	e00a      	b.n	8004ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	4908      	ldr	r1, [pc, #32]	; (8004ee0 <__NVIC_SetPriority+0x50>)
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	3b04      	subs	r3, #4
 8004ec8:	0112      	lsls	r2, r2, #4
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	440b      	add	r3, r1
 8004ece:	761a      	strb	r2, [r3, #24]
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	e000e100 	.word	0xe000e100
 8004ee0:	e000ed00 	.word	0xe000ed00

08004ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	; 0x24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f1c3 0307 	rsb	r3, r3, #7
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	bf28      	it	cs
 8004f02:	2304      	movcs	r3, #4
 8004f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d902      	bls.n	8004f14 <NVIC_EncodePriority+0x30>
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3b03      	subs	r3, #3
 8004f12:	e000      	b.n	8004f16 <NVIC_EncodePriority+0x32>
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43da      	mvns	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	401a      	ands	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	43d9      	mvns	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f3c:	4313      	orrs	r3, r2
         );
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f5c:	d301      	bcc.n	8004f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e00f      	b.n	8004f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f62:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <SysTick_Config+0x40>)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f6a:	210f      	movs	r1, #15
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	f7ff ff8e 	bl	8004e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <SysTick_Config+0x40>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f7a:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <SysTick_Config+0x40>)
 8004f7c:	2207      	movs	r2, #7
 8004f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	e000e010 	.word	0xe000e010

08004f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ff05 	bl	8004da8 <__NVIC_SetPriorityGrouping>
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	4603      	mov	r3, r0
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fb4:	f7ff ff1c 	bl	8004df0 <__NVIC_GetPriorityGrouping>
 8004fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7ff ff90 	bl	8004ee4 <NVIC_EncodePriority>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff ff5f 	bl	8004e90 <__NVIC_SetPriority>
}
 8004fd2:	bf00      	nop
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff0f 	bl	8004e0c <__NVIC_EnableIRQ>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff1f 	bl	8004e48 <__NVIC_DisableIRQ>
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ff96 	bl	8004f4c <SysTick_Config>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005034:	f7ff fe7c 	bl	8004d30 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e2dc      	b.n	80055fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d008      	beq.n	8005062 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e2cd      	b.n	80055fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a76      	ldr	r2, [pc, #472]	; (8005240 <HAL_DMA_Abort+0x214>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d04a      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a74      	ldr	r2, [pc, #464]	; (8005244 <HAL_DMA_Abort+0x218>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d045      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a73      	ldr	r2, [pc, #460]	; (8005248 <HAL_DMA_Abort+0x21c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d040      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a71      	ldr	r2, [pc, #452]	; (800524c <HAL_DMA_Abort+0x220>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d03b      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a70      	ldr	r2, [pc, #448]	; (8005250 <HAL_DMA_Abort+0x224>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d036      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a6e      	ldr	r2, [pc, #440]	; (8005254 <HAL_DMA_Abort+0x228>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d031      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a6d      	ldr	r2, [pc, #436]	; (8005258 <HAL_DMA_Abort+0x22c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d02c      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6b      	ldr	r2, [pc, #428]	; (800525c <HAL_DMA_Abort+0x230>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d027      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6a      	ldr	r2, [pc, #424]	; (8005260 <HAL_DMA_Abort+0x234>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a68      	ldr	r2, [pc, #416]	; (8005264 <HAL_DMA_Abort+0x238>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01d      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a67      	ldr	r2, [pc, #412]	; (8005268 <HAL_DMA_Abort+0x23c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a65      	ldr	r2, [pc, #404]	; (800526c <HAL_DMA_Abort+0x240>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a64      	ldr	r2, [pc, #400]	; (8005270 <HAL_DMA_Abort+0x244>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a62      	ldr	r2, [pc, #392]	; (8005274 <HAL_DMA_Abort+0x248>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a61      	ldr	r2, [pc, #388]	; (8005278 <HAL_DMA_Abort+0x24c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_Abort+0xd6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a5f      	ldr	r2, [pc, #380]	; (800527c <HAL_DMA_Abort+0x250>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_DMA_Abort+0xda>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_DMA_Abort+0xdc>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 021e 	bic.w	r2, r2, #30
 800511a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800512a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e00a      	b.n	800514a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 020e 	bic.w	r2, r2, #14
 8005142:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <HAL_DMA_Abort+0x214>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d072      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a3a      	ldr	r2, [pc, #232]	; (8005244 <HAL_DMA_Abort+0x218>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d06d      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a39      	ldr	r2, [pc, #228]	; (8005248 <HAL_DMA_Abort+0x21c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d068      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a37      	ldr	r2, [pc, #220]	; (800524c <HAL_DMA_Abort+0x220>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d063      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a36      	ldr	r2, [pc, #216]	; (8005250 <HAL_DMA_Abort+0x224>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d05e      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a34      	ldr	r2, [pc, #208]	; (8005254 <HAL_DMA_Abort+0x228>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d059      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a33      	ldr	r2, [pc, #204]	; (8005258 <HAL_DMA_Abort+0x22c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d054      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a31      	ldr	r2, [pc, #196]	; (800525c <HAL_DMA_Abort+0x230>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d04f      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a30      	ldr	r2, [pc, #192]	; (8005260 <HAL_DMA_Abort+0x234>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d04a      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2e      	ldr	r2, [pc, #184]	; (8005264 <HAL_DMA_Abort+0x238>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d045      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2d      	ldr	r2, [pc, #180]	; (8005268 <HAL_DMA_Abort+0x23c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d040      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2b      	ldr	r2, [pc, #172]	; (800526c <HAL_DMA_Abort+0x240>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d03b      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2a      	ldr	r2, [pc, #168]	; (8005270 <HAL_DMA_Abort+0x244>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d036      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a28      	ldr	r2, [pc, #160]	; (8005274 <HAL_DMA_Abort+0x248>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d031      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a27      	ldr	r2, [pc, #156]	; (8005278 <HAL_DMA_Abort+0x24c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d02c      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <HAL_DMA_Abort+0x250>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d027      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a24      	ldr	r2, [pc, #144]	; (8005280 <HAL_DMA_Abort+0x254>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a22      	ldr	r2, [pc, #136]	; (8005284 <HAL_DMA_Abort+0x258>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01d      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a21      	ldr	r2, [pc, #132]	; (8005288 <HAL_DMA_Abort+0x25c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <HAL_DMA_Abort+0x260>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_DMA_Abort+0x264>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_DMA_Abort+0x268>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_DMA_Abort+0x26c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_DMA_Abort+0x20e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <HAL_DMA_Abort+0x270>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d132      	bne.n	80052a0 <HAL_DMA_Abort+0x274>
 800523a:	2301      	movs	r3, #1
 800523c:	e031      	b.n	80052a2 <HAL_DMA_Abort+0x276>
 800523e:	bf00      	nop
 8005240:	40020010 	.word	0x40020010
 8005244:	40020028 	.word	0x40020028
 8005248:	40020040 	.word	0x40020040
 800524c:	40020058 	.word	0x40020058
 8005250:	40020070 	.word	0x40020070
 8005254:	40020088 	.word	0x40020088
 8005258:	400200a0 	.word	0x400200a0
 800525c:	400200b8 	.word	0x400200b8
 8005260:	40020410 	.word	0x40020410
 8005264:	40020428 	.word	0x40020428
 8005268:	40020440 	.word	0x40020440
 800526c:	40020458 	.word	0x40020458
 8005270:	40020470 	.word	0x40020470
 8005274:	40020488 	.word	0x40020488
 8005278:	400204a0 	.word	0x400204a0
 800527c:	400204b8 	.word	0x400204b8
 8005280:	58025408 	.word	0x58025408
 8005284:	5802541c 	.word	0x5802541c
 8005288:	58025430 	.word	0x58025430
 800528c:	58025444 	.word	0x58025444
 8005290:	58025458 	.word	0x58025458
 8005294:	5802546c 	.word	0x5802546c
 8005298:	58025480 	.word	0x58025480
 800529c:	58025494 	.word	0x58025494
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6d      	ldr	r2, [pc, #436]	; (8005470 <HAL_DMA_Abort+0x444>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d04a      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a6b      	ldr	r2, [pc, #428]	; (8005474 <HAL_DMA_Abort+0x448>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d045      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a6a      	ldr	r2, [pc, #424]	; (8005478 <HAL_DMA_Abort+0x44c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d040      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a68      	ldr	r2, [pc, #416]	; (800547c <HAL_DMA_Abort+0x450>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d03b      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a67      	ldr	r2, [pc, #412]	; (8005480 <HAL_DMA_Abort+0x454>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d036      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a65      	ldr	r2, [pc, #404]	; (8005484 <HAL_DMA_Abort+0x458>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d031      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a64      	ldr	r2, [pc, #400]	; (8005488 <HAL_DMA_Abort+0x45c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d02c      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a62      	ldr	r2, [pc, #392]	; (800548c <HAL_DMA_Abort+0x460>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d027      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a61      	ldr	r2, [pc, #388]	; (8005490 <HAL_DMA_Abort+0x464>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d022      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5f      	ldr	r2, [pc, #380]	; (8005494 <HAL_DMA_Abort+0x468>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01d      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a5e      	ldr	r2, [pc, #376]	; (8005498 <HAL_DMA_Abort+0x46c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d018      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a5c      	ldr	r2, [pc, #368]	; (800549c <HAL_DMA_Abort+0x470>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a5b      	ldr	r2, [pc, #364]	; (80054a0 <HAL_DMA_Abort+0x474>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00e      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a59      	ldr	r2, [pc, #356]	; (80054a4 <HAL_DMA_Abort+0x478>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a58      	ldr	r2, [pc, #352]	; (80054a8 <HAL_DMA_Abort+0x47c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_DMA_Abort+0x32a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a56      	ldr	r2, [pc, #344]	; (80054ac <HAL_DMA_Abort+0x480>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <HAL_DMA_Abort+0x33c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e007      	b.n	8005378 <HAL_DMA_Abort+0x34c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005378:	e013      	b.n	80053a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800537a:	f7ff fcd9 	bl	8004d30 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b05      	cmp	r3, #5
 8005386:	d90c      	bls.n	80053a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2203      	movs	r2, #3
 8005392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e12d      	b.n	80055fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e5      	bne.n	800537a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <HAL_DMA_Abort+0x444>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d04a      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a2d      	ldr	r2, [pc, #180]	; (8005474 <HAL_DMA_Abort+0x448>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d045      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a2c      	ldr	r2, [pc, #176]	; (8005478 <HAL_DMA_Abort+0x44c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d040      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	; (800547c <HAL_DMA_Abort+0x450>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d03b      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a29      	ldr	r2, [pc, #164]	; (8005480 <HAL_DMA_Abort+0x454>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d036      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a27      	ldr	r2, [pc, #156]	; (8005484 <HAL_DMA_Abort+0x458>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d031      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a26      	ldr	r2, [pc, #152]	; (8005488 <HAL_DMA_Abort+0x45c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d02c      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a24      	ldr	r2, [pc, #144]	; (800548c <HAL_DMA_Abort+0x460>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d027      	beq.n	800544e <HAL_DMA_Abort+0x422>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a23      	ldr	r2, [pc, #140]	; (8005490 <HAL_DMA_Abort+0x464>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d022      	beq.n	800544e <HAL_DMA_Abort+0x422>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_DMA_Abort+0x468>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01d      	beq.n	800544e <HAL_DMA_Abort+0x422>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a20      	ldr	r2, [pc, #128]	; (8005498 <HAL_DMA_Abort+0x46c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d018      	beq.n	800544e <HAL_DMA_Abort+0x422>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1e      	ldr	r2, [pc, #120]	; (800549c <HAL_DMA_Abort+0x470>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_DMA_Abort+0x422>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <HAL_DMA_Abort+0x474>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_DMA_Abort+0x422>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_DMA_Abort+0x478>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_DMA_Abort+0x422>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <HAL_DMA_Abort+0x47c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_DMA_Abort+0x422>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_DMA_Abort+0x480>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d101      	bne.n	8005452 <HAL_DMA_Abort+0x426>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_DMA_Abort+0x428>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02b      	beq.n	80054b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	223f      	movs	r2, #63	; 0x3f
 8005468:	409a      	lsls	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	609a      	str	r2, [r3, #8]
 800546e:	e02a      	b.n	80054c6 <HAL_DMA_Abort+0x49a>
 8005470:	40020010 	.word	0x40020010
 8005474:	40020028 	.word	0x40020028
 8005478:	40020040 	.word	0x40020040
 800547c:	40020058 	.word	0x40020058
 8005480:	40020070 	.word	0x40020070
 8005484:	40020088 	.word	0x40020088
 8005488:	400200a0 	.word	0x400200a0
 800548c:	400200b8 	.word	0x400200b8
 8005490:	40020410 	.word	0x40020410
 8005494:	40020428 	.word	0x40020428
 8005498:	40020440 	.word	0x40020440
 800549c:	40020458 	.word	0x40020458
 80054a0:	40020470 	.word	0x40020470
 80054a4:	40020488 	.word	0x40020488
 80054a8:	400204a0 	.word	0x400204a0
 80054ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	2201      	movs	r2, #1
 80054c0:	409a      	lsls	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a4f      	ldr	r2, [pc, #316]	; (8005608 <HAL_DMA_Abort+0x5dc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d072      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a4d      	ldr	r2, [pc, #308]	; (800560c <HAL_DMA_Abort+0x5e0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d06d      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a4c      	ldr	r2, [pc, #304]	; (8005610 <HAL_DMA_Abort+0x5e4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d068      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a4a      	ldr	r2, [pc, #296]	; (8005614 <HAL_DMA_Abort+0x5e8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d063      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a49      	ldr	r2, [pc, #292]	; (8005618 <HAL_DMA_Abort+0x5ec>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d05e      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a47      	ldr	r2, [pc, #284]	; (800561c <HAL_DMA_Abort+0x5f0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d059      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a46      	ldr	r2, [pc, #280]	; (8005620 <HAL_DMA_Abort+0x5f4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d054      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a44      	ldr	r2, [pc, #272]	; (8005624 <HAL_DMA_Abort+0x5f8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d04f      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a43      	ldr	r2, [pc, #268]	; (8005628 <HAL_DMA_Abort+0x5fc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d04a      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a41      	ldr	r2, [pc, #260]	; (800562c <HAL_DMA_Abort+0x600>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d045      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a40      	ldr	r2, [pc, #256]	; (8005630 <HAL_DMA_Abort+0x604>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d040      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a3e      	ldr	r2, [pc, #248]	; (8005634 <HAL_DMA_Abort+0x608>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d03b      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3d      	ldr	r2, [pc, #244]	; (8005638 <HAL_DMA_Abort+0x60c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d036      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3b      	ldr	r2, [pc, #236]	; (800563c <HAL_DMA_Abort+0x610>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d031      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a3a      	ldr	r2, [pc, #232]	; (8005640 <HAL_DMA_Abort+0x614>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d02c      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a38      	ldr	r2, [pc, #224]	; (8005644 <HAL_DMA_Abort+0x618>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d027      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a37      	ldr	r2, [pc, #220]	; (8005648 <HAL_DMA_Abort+0x61c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a35      	ldr	r2, [pc, #212]	; (800564c <HAL_DMA_Abort+0x620>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01d      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a34      	ldr	r2, [pc, #208]	; (8005650 <HAL_DMA_Abort+0x624>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d018      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a32      	ldr	r2, [pc, #200]	; (8005654 <HAL_DMA_Abort+0x628>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a31      	ldr	r2, [pc, #196]	; (8005658 <HAL_DMA_Abort+0x62c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2f      	ldr	r2, [pc, #188]	; (800565c <HAL_DMA_Abort+0x630>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2e      	ldr	r2, [pc, #184]	; (8005660 <HAL_DMA_Abort+0x634>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_DMA_Abort+0x58a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2c      	ldr	r2, [pc, #176]	; (8005664 <HAL_DMA_Abort+0x638>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d101      	bne.n	80055ba <HAL_DMA_Abort+0x58e>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <HAL_DMA_Abort+0x590>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40020010 	.word	0x40020010
 800560c:	40020028 	.word	0x40020028
 8005610:	40020040 	.word	0x40020040
 8005614:	40020058 	.word	0x40020058
 8005618:	40020070 	.word	0x40020070
 800561c:	40020088 	.word	0x40020088
 8005620:	400200a0 	.word	0x400200a0
 8005624:	400200b8 	.word	0x400200b8
 8005628:	40020410 	.word	0x40020410
 800562c:	40020428 	.word	0x40020428
 8005630:	40020440 	.word	0x40020440
 8005634:	40020458 	.word	0x40020458
 8005638:	40020470 	.word	0x40020470
 800563c:	40020488 	.word	0x40020488
 8005640:	400204a0 	.word	0x400204a0
 8005644:	400204b8 	.word	0x400204b8
 8005648:	58025408 	.word	0x58025408
 800564c:	5802541c 	.word	0x5802541c
 8005650:	58025430 	.word	0x58025430
 8005654:	58025444 	.word	0x58025444
 8005658:	58025458 	.word	0x58025458
 800565c:	5802546c 	.word	0x5802546c
 8005660:	58025480 	.word	0x58025480
 8005664:	58025494 	.word	0x58025494

08005668 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e237      	b.n	8005aea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d004      	beq.n	8005690 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2280      	movs	r2, #128	; 0x80
 800568a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e22c      	b.n	8005aea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5c      	ldr	r2, [pc, #368]	; (8005808 <HAL_DMA_Abort_IT+0x1a0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d04a      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a5b      	ldr	r2, [pc, #364]	; (800580c <HAL_DMA_Abort_IT+0x1a4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d045      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a59      	ldr	r2, [pc, #356]	; (8005810 <HAL_DMA_Abort_IT+0x1a8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d040      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a58      	ldr	r2, [pc, #352]	; (8005814 <HAL_DMA_Abort_IT+0x1ac>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d03b      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a56      	ldr	r2, [pc, #344]	; (8005818 <HAL_DMA_Abort_IT+0x1b0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d036      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a55      	ldr	r2, [pc, #340]	; (800581c <HAL_DMA_Abort_IT+0x1b4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d031      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a53      	ldr	r2, [pc, #332]	; (8005820 <HAL_DMA_Abort_IT+0x1b8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02c      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a52      	ldr	r2, [pc, #328]	; (8005824 <HAL_DMA_Abort_IT+0x1bc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d027      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a50      	ldr	r2, [pc, #320]	; (8005828 <HAL_DMA_Abort_IT+0x1c0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4f      	ldr	r2, [pc, #316]	; (800582c <HAL_DMA_Abort_IT+0x1c4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01d      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4d      	ldr	r2, [pc, #308]	; (8005830 <HAL_DMA_Abort_IT+0x1c8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4c      	ldr	r2, [pc, #304]	; (8005834 <HAL_DMA_Abort_IT+0x1cc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4a      	ldr	r2, [pc, #296]	; (8005838 <HAL_DMA_Abort_IT+0x1d0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a49      	ldr	r2, [pc, #292]	; (800583c <HAL_DMA_Abort_IT+0x1d4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a47      	ldr	r2, [pc, #284]	; (8005840 <HAL_DMA_Abort_IT+0x1d8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_DMA_Abort_IT+0xc8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <HAL_DMA_Abort_IT+0x1dc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d101      	bne.n	8005734 <HAL_DMA_Abort_IT+0xcc>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_DMA_Abort_IT+0xce>
 8005734:	2300      	movs	r3, #0
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8086 	beq.w	8005848 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2204      	movs	r2, #4
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <HAL_DMA_Abort_IT+0x1a0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d04a      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2e      	ldr	r2, [pc, #184]	; (800580c <HAL_DMA_Abort_IT+0x1a4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d045      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <HAL_DMA_Abort_IT+0x1a8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d040      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <HAL_DMA_Abort_IT+0x1ac>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d03b      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <HAL_DMA_Abort_IT+0x1b0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d036      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a28      	ldr	r2, [pc, #160]	; (800581c <HAL_DMA_Abort_IT+0x1b4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d031      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <HAL_DMA_Abort_IT+0x1b8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d02c      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a25      	ldr	r2, [pc, #148]	; (8005824 <HAL_DMA_Abort_IT+0x1bc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d027      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a23      	ldr	r2, [pc, #140]	; (8005828 <HAL_DMA_Abort_IT+0x1c0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d022      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_DMA_Abort_IT+0x1c4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d01d      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a20      	ldr	r2, [pc, #128]	; (8005830 <HAL_DMA_Abort_IT+0x1c8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d018      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <HAL_DMA_Abort_IT+0x1cc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_DMA_Abort_IT+0x1d0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00e      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_DMA_Abort_IT+0x1d4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <HAL_DMA_Abort_IT+0x1d8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_DMA_Abort_IT+0x17c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_DMA_Abort_IT+0x1dc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d108      	bne.n	80057f6 <HAL_DMA_Abort_IT+0x18e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e178      	b.n	8005ae8 <HAL_DMA_Abort_IT+0x480>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e16f      	b.n	8005ae8 <HAL_DMA_Abort_IT+0x480>
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 020e 	bic.w	r2, r2, #14
 8005856:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6c      	ldr	r2, [pc, #432]	; (8005a10 <HAL_DMA_Abort_IT+0x3a8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d04a      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6b      	ldr	r2, [pc, #428]	; (8005a14 <HAL_DMA_Abort_IT+0x3ac>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d045      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a69      	ldr	r2, [pc, #420]	; (8005a18 <HAL_DMA_Abort_IT+0x3b0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d040      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a68      	ldr	r2, [pc, #416]	; (8005a1c <HAL_DMA_Abort_IT+0x3b4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d03b      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a66      	ldr	r2, [pc, #408]	; (8005a20 <HAL_DMA_Abort_IT+0x3b8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d036      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a65      	ldr	r2, [pc, #404]	; (8005a24 <HAL_DMA_Abort_IT+0x3bc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d031      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a63      	ldr	r2, [pc, #396]	; (8005a28 <HAL_DMA_Abort_IT+0x3c0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d02c      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a62      	ldr	r2, [pc, #392]	; (8005a2c <HAL_DMA_Abort_IT+0x3c4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d027      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a60      	ldr	r2, [pc, #384]	; (8005a30 <HAL_DMA_Abort_IT+0x3c8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d022      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a5f      	ldr	r2, [pc, #380]	; (8005a34 <HAL_DMA_Abort_IT+0x3cc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d01d      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a5d      	ldr	r2, [pc, #372]	; (8005a38 <HAL_DMA_Abort_IT+0x3d0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a5c      	ldr	r2, [pc, #368]	; (8005a3c <HAL_DMA_Abort_IT+0x3d4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5a      	ldr	r2, [pc, #360]	; (8005a40 <HAL_DMA_Abort_IT+0x3d8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <HAL_DMA_Abort_IT+0x3dc>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a57      	ldr	r2, [pc, #348]	; (8005a48 <HAL_DMA_Abort_IT+0x3e0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_DMA_Abort_IT+0x290>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a56      	ldr	r2, [pc, #344]	; (8005a4c <HAL_DMA_Abort_IT+0x3e4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d108      	bne.n	800590a <HAL_DMA_Abort_IT+0x2a2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e007      	b.n	800591a <HAL_DMA_Abort_IT+0x2b2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a3c      	ldr	r2, [pc, #240]	; (8005a10 <HAL_DMA_Abort_IT+0x3a8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d072      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a3a      	ldr	r2, [pc, #232]	; (8005a14 <HAL_DMA_Abort_IT+0x3ac>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d06d      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a39      	ldr	r2, [pc, #228]	; (8005a18 <HAL_DMA_Abort_IT+0x3b0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d068      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a37      	ldr	r2, [pc, #220]	; (8005a1c <HAL_DMA_Abort_IT+0x3b4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d063      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a36      	ldr	r2, [pc, #216]	; (8005a20 <HAL_DMA_Abort_IT+0x3b8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d05e      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a34      	ldr	r2, [pc, #208]	; (8005a24 <HAL_DMA_Abort_IT+0x3bc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d059      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a33      	ldr	r2, [pc, #204]	; (8005a28 <HAL_DMA_Abort_IT+0x3c0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d054      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a31      	ldr	r2, [pc, #196]	; (8005a2c <HAL_DMA_Abort_IT+0x3c4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d04f      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a30      	ldr	r2, [pc, #192]	; (8005a30 <HAL_DMA_Abort_IT+0x3c8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d04a      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <HAL_DMA_Abort_IT+0x3cc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d045      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <HAL_DMA_Abort_IT+0x3d0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d040      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <HAL_DMA_Abort_IT+0x3d4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d03b      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <HAL_DMA_Abort_IT+0x3d8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d036      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <HAL_DMA_Abort_IT+0x3dc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d031      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a27      	ldr	r2, [pc, #156]	; (8005a48 <HAL_DMA_Abort_IT+0x3e0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d02c      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a25      	ldr	r2, [pc, #148]	; (8005a4c <HAL_DMA_Abort_IT+0x3e4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d027      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a24      	ldr	r2, [pc, #144]	; (8005a50 <HAL_DMA_Abort_IT+0x3e8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d022      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <HAL_DMA_Abort_IT+0x3ec>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01d      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a21      	ldr	r2, [pc, #132]	; (8005a58 <HAL_DMA_Abort_IT+0x3f0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <HAL_DMA_Abort_IT+0x3f4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <HAL_DMA_Abort_IT+0x3f8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_DMA_Abort_IT+0x3fc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <HAL_DMA_Abort_IT+0x400>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_DMA_Abort_IT+0x3a2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <HAL_DMA_Abort_IT+0x404>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d132      	bne.n	8005a70 <HAL_DMA_Abort_IT+0x408>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e031      	b.n	8005a72 <HAL_DMA_Abort_IT+0x40a>
 8005a0e:	bf00      	nop
 8005a10:	40020010 	.word	0x40020010
 8005a14:	40020028 	.word	0x40020028
 8005a18:	40020040 	.word	0x40020040
 8005a1c:	40020058 	.word	0x40020058
 8005a20:	40020070 	.word	0x40020070
 8005a24:	40020088 	.word	0x40020088
 8005a28:	400200a0 	.word	0x400200a0
 8005a2c:	400200b8 	.word	0x400200b8
 8005a30:	40020410 	.word	0x40020410
 8005a34:	40020428 	.word	0x40020428
 8005a38:	40020440 	.word	0x40020440
 8005a3c:	40020458 	.word	0x40020458
 8005a40:	40020470 	.word	0x40020470
 8005a44:	40020488 	.word	0x40020488
 8005a48:	400204a0 	.word	0x400204a0
 8005a4c:	400204b8 	.word	0x400204b8
 8005a50:	58025408 	.word	0x58025408
 8005a54:	5802541c 	.word	0x5802541c
 8005a58:	58025430 	.word	0x58025430
 8005a5c:	58025444 	.word	0x58025444
 8005a60:	58025458 	.word	0x58025458
 8005a64:	5802546c 	.word	0x5802546c
 8005a68:	58025480 	.word	0x58025480
 8005a6c:	58025494 	.word	0x58025494
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d028      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	2201      	movs	r2, #1
 8005a96:	409a      	lsls	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005aa4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005abc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ac6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop

08005af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b02:	4b89      	ldr	r3, [pc, #548]	; (8005d28 <HAL_GPIO_Init+0x234>)
 8005b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b06:	e194      	b.n	8005e32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	4013      	ands	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 8186 	beq.w	8005e2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d005      	beq.n	8005b38 <HAL_GPIO_Init+0x44>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d130      	bne.n	8005b9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	2203      	movs	r2, #3
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b6e:	2201      	movs	r2, #1
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	f003 0201 	and.w	r2, r3, #1
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d017      	beq.n	8005bd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d123      	bne.n	8005c2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	08da      	lsrs	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3208      	adds	r2, #8
 8005bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	08da      	lsrs	r2, r3, #3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3208      	adds	r2, #8
 8005c24:	69b9      	ldr	r1, [r7, #24]
 8005c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	2203      	movs	r2, #3
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0203 	and.w	r2, r3, #3
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80e0 	beq.w	8005e2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6c:	4b2f      	ldr	r3, [pc, #188]	; (8005d2c <HAL_GPIO_Init+0x238>)
 8005c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c72:	4a2e      	ldr	r2, [pc, #184]	; (8005d2c <HAL_GPIO_Init+0x238>)
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <HAL_GPIO_Init+0x238>)
 8005c7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c8a:	4a29      	ldr	r2, [pc, #164]	; (8005d30 <HAL_GPIO_Init+0x23c>)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	3302      	adds	r3, #2
 8005c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a20      	ldr	r2, [pc, #128]	; (8005d34 <HAL_GPIO_Init+0x240>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d052      	beq.n	8005d5c <HAL_GPIO_Init+0x268>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_GPIO_Init+0x244>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d031      	beq.n	8005d22 <HAL_GPIO_Init+0x22e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <HAL_GPIO_Init+0x248>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d02b      	beq.n	8005d1e <HAL_GPIO_Init+0x22a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <HAL_GPIO_Init+0x24c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d025      	beq.n	8005d1a <HAL_GPIO_Init+0x226>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <HAL_GPIO_Init+0x250>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01f      	beq.n	8005d16 <HAL_GPIO_Init+0x222>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_GPIO_Init+0x254>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d019      	beq.n	8005d12 <HAL_GPIO_Init+0x21e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <HAL_GPIO_Init+0x258>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_GPIO_Init+0x21a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_GPIO_Init+0x25c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00d      	beq.n	8005d0a <HAL_GPIO_Init+0x216>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <HAL_GPIO_Init+0x260>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <HAL_GPIO_Init+0x212>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <HAL_GPIO_Init+0x264>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d101      	bne.n	8005d02 <HAL_GPIO_Init+0x20e>
 8005cfe:	2309      	movs	r3, #9
 8005d00:	e02d      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d02:	230a      	movs	r3, #10
 8005d04:	e02b      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d06:	2308      	movs	r3, #8
 8005d08:	e029      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d0a:	2307      	movs	r3, #7
 8005d0c:	e027      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d0e:	2306      	movs	r3, #6
 8005d10:	e025      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d12:	2305      	movs	r3, #5
 8005d14:	e023      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d16:	2304      	movs	r3, #4
 8005d18:	e021      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e01f      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e01d      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e01b      	b.n	8005d5e <HAL_GPIO_Init+0x26a>
 8005d26:	bf00      	nop
 8005d28:	58000080 	.word	0x58000080
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	58000400 	.word	0x58000400
 8005d34:	58020000 	.word	0x58020000
 8005d38:	58020400 	.word	0x58020400
 8005d3c:	58020800 	.word	0x58020800
 8005d40:	58020c00 	.word	0x58020c00
 8005d44:	58021000 	.word	0x58021000
 8005d48:	58021400 	.word	0x58021400
 8005d4c:	58021800 	.word	0x58021800
 8005d50:	58021c00 	.word	0x58021c00
 8005d54:	58022000 	.word	0x58022000
 8005d58:	58022400 	.word	0x58022400
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	f002 0203 	and.w	r2, r2, #3
 8005d64:	0092      	lsls	r2, r2, #2
 8005d66:	4093      	lsls	r3, r2
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d6e:	4938      	ldr	r1, [pc, #224]	; (8005e50 <HAL_GPIO_Init+0x35c>)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	3302      	adds	r3, #2
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	43db      	mvns	r3, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4013      	ands	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f ae63 	bne.w	8005b08 <HAL_GPIO_Init+0x14>
  }
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	3724      	adds	r7, #36	; 0x24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	58000400 	.word	0x58000400

08005e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	887b      	ldrh	r3, [r7, #2]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
 8005e70:	e001      	b.n	8005e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
 8005e90:	4613      	mov	r3, r2
 8005e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e94:	787b      	ldrb	r3, [r7, #1]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ea0:	e003      	b.n	8005eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ea2:	887b      	ldrh	r3, [r7, #2]
 8005ea4:	041a      	lsls	r2, r3, #16
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	619a      	str	r2, [r3, #24]
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fc fdc3 	bl	8002a68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <HAL_PWREx_ConfigSupply+0x70>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d00a      	beq.n	8005f16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f00:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <HAL_PWREx_ConfigSupply+0x70>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d001      	beq.n	8005f12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e01f      	b.n	8005f52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e01d      	b.n	8005f52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <HAL_PWREx_ConfigSupply+0x70>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f023 0207 	bic.w	r2, r3, #7
 8005f1e:	490f      	ldr	r1, [pc, #60]	; (8005f5c <HAL_PWREx_ConfigSupply+0x70>)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f26:	f7fe ff03 	bl	8004d30 <HAL_GetTick>
 8005f2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f2c:	e009      	b.n	8005f42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f2e:	f7fe feff 	bl	8004d30 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f3c:	d901      	bls.n	8005f42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e007      	b.n	8005f52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_PWREx_ConfigSupply+0x70>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4e:	d1ee      	bne.n	8005f2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	58024800 	.word	0x58024800

08005f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f000 bc1d 	b.w	80067ae <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8087 	beq.w	8006090 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f82:	4b99      	ldr	r3, [pc, #612]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f8c:	4b96      	ldr	r3, [pc, #600]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d007      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x48>
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	2b18      	cmp	r3, #24
 8005f9c:	d110      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x60>
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d10b      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa8:	4b8f      	ldr	r3, [pc, #572]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d06c      	beq.n	800608e <HAL_RCC_OscConfig+0x12e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d168      	bne.n	800608e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e3f6      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc8:	d106      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x78>
 8005fca:	4b87      	ldr	r3, [pc, #540]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a86      	ldr	r2, [pc, #536]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e02e      	b.n	8006036 <HAL_RCC_OscConfig+0xd6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10c      	bne.n	8005ffa <HAL_RCC_OscConfig+0x9a>
 8005fe0:	4b81      	ldr	r3, [pc, #516]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a80      	ldr	r2, [pc, #512]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	4b7e      	ldr	r3, [pc, #504]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a7d      	ldr	r2, [pc, #500]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e01d      	b.n	8006036 <HAL_RCC_OscConfig+0xd6>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006002:	d10c      	bne.n	800601e <HAL_RCC_OscConfig+0xbe>
 8006004:	4b78      	ldr	r3, [pc, #480]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a77      	ldr	r2, [pc, #476]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800600a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	4b75      	ldr	r3, [pc, #468]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a74      	ldr	r2, [pc, #464]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e00b      	b.n	8006036 <HAL_RCC_OscConfig+0xd6>
 800601e:	4b72      	ldr	r3, [pc, #456]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a71      	ldr	r2, [pc, #452]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a6e      	ldr	r2, [pc, #440]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006034:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d013      	beq.n	8006066 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fe fe77 	bl	8004d30 <HAL_GetTick>
 8006042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006046:	f7fe fe73 	bl	8004d30 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b64      	cmp	r3, #100	; 0x64
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e3aa      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006058:	4b63      	ldr	r3, [pc, #396]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0xe6>
 8006064:	e014      	b.n	8006090 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fe fe63 	bl	8004d30 <HAL_GetTick>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800606e:	f7fe fe5f 	bl	8004d30 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b64      	cmp	r3, #100	; 0x64
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e396      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006080:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <HAL_RCC_OscConfig+0x10e>
 800608c:	e000      	b.n	8006090 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80cb 	beq.w	8006234 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800609e:	4b52      	ldr	r3, [pc, #328]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060a8:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <HAL_RCC_OscConfig+0x164>
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b18      	cmp	r3, #24
 80060b8:	d156      	bne.n	8006168 <HAL_RCC_OscConfig+0x208>
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d151      	bne.n	8006168 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060c4:	4b48      	ldr	r3, [pc, #288]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_OscConfig+0x17c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e368      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060dc:	4b42      	ldr	r3, [pc, #264]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 0219 	bic.w	r2, r3, #25
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	493f      	ldr	r1, [pc, #252]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060ee:	f7fe fe1f 	bl	8004d30 <HAL_GetTick>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060f6:	f7fe fe1b 	bl	8004d30 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e352      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006108:	4b37      	ldr	r3, [pc, #220]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006114:	f7fe fe3c 	bl	8004d90 <HAL_GetREVID>
 8006118:	4603      	mov	r3, r0
 800611a:	f241 0203 	movw	r2, #4099	; 0x1003
 800611e:	4293      	cmp	r3, r2
 8006120:	d817      	bhi.n	8006152 <HAL_RCC_OscConfig+0x1f2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b40      	cmp	r3, #64	; 0x40
 8006128:	d108      	bne.n	800613c <HAL_RCC_OscConfig+0x1dc>
 800612a:	4b2f      	ldr	r3, [pc, #188]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006132:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006138:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800613a:	e07b      	b.n	8006234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613c:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	4927      	ldr	r1, [pc, #156]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800614c:	4313      	orrs	r3, r2
 800614e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006150:	e070      	b.n	8006234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006152:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	061b      	lsls	r3, r3, #24
 8006160:	4921      	ldr	r1, [pc, #132]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006162:	4313      	orrs	r3, r2
 8006164:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006166:	e065      	b.n	8006234 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d048      	beq.n	8006202 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006170:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 0219 	bic.w	r2, r3, #25
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	491a      	ldr	r1, [pc, #104]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006182:	f7fe fdd5 	bl	8004d30 <HAL_GetTick>
 8006186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800618a:	f7fe fdd1 	bl	8004d30 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e308      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800619c:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a8:	f7fe fdf2 	bl	8004d90 <HAL_GetREVID>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d81a      	bhi.n	80061ec <HAL_RCC_OscConfig+0x28c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d108      	bne.n	80061d0 <HAL_RCC_OscConfig+0x270>
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061c6:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80061c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061cc:	6053      	str	r3, [r2, #4]
 80061ce:	e031      	b.n	8006234 <HAL_RCC_OscConfig+0x2d4>
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	031b      	lsls	r3, r3, #12
 80061de:	4902      	ldr	r1, [pc, #8]	; (80061e8 <HAL_RCC_OscConfig+0x288>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	604b      	str	r3, [r1, #4]
 80061e4:	e026      	b.n	8006234 <HAL_RCC_OscConfig+0x2d4>
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
 80061ec:	4b9a      	ldr	r3, [pc, #616]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	061b      	lsls	r3, r3, #24
 80061fa:	4997      	ldr	r1, [pc, #604]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	e018      	b.n	8006234 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006202:	4b95      	ldr	r3, [pc, #596]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a94      	ldr	r2, [pc, #592]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fe fd8f 	bl	8004d30 <HAL_GetTick>
 8006212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006216:	f7fe fd8b 	bl	8004d30 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e2c2      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006228:	4b8b      	ldr	r3, [pc, #556]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f0      	bne.n	8006216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80a9 	beq.w	8006394 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006242:	4b85      	ldr	r3, [pc, #532]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800624a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800624c:	4b82      	ldr	r3, [pc, #520]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b08      	cmp	r3, #8
 8006256:	d007      	beq.n	8006268 <HAL_RCC_OscConfig+0x308>
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b18      	cmp	r3, #24
 800625c:	d13a      	bne.n	80062d4 <HAL_RCC_OscConfig+0x374>
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d135      	bne.n	80062d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006268:	4b7b      	ldr	r3, [pc, #492]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_RCC_OscConfig+0x320>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	2b80      	cmp	r3, #128	; 0x80
 800627a:	d001      	beq.n	8006280 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e296      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006280:	f7fe fd86 	bl	8004d90 <HAL_GetREVID>
 8006284:	4603      	mov	r3, r0
 8006286:	f241 0203 	movw	r2, #4099	; 0x1003
 800628a:	4293      	cmp	r3, r2
 800628c:	d817      	bhi.n	80062be <HAL_RCC_OscConfig+0x35e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	2b20      	cmp	r3, #32
 8006294:	d108      	bne.n	80062a8 <HAL_RCC_OscConfig+0x348>
 8006296:	4b70      	ldr	r3, [pc, #448]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800629e:	4a6e      	ldr	r2, [pc, #440]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80062a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062a6:	e075      	b.n	8006394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062a8:	4b6b      	ldr	r3, [pc, #428]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	069b      	lsls	r3, r3, #26
 80062b6:	4968      	ldr	r1, [pc, #416]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062bc:	e06a      	b.n	8006394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062be:	4b66      	ldr	r3, [pc, #408]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	061b      	lsls	r3, r3, #24
 80062cc:	4962      	ldr	r1, [pc, #392]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062d2:	e05f      	b.n	8006394 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d042      	beq.n	8006362 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062dc:	4b5e      	ldr	r3, [pc, #376]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a5d      	ldr	r2, [pc, #372]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e8:	f7fe fd22 	bl	8004d30 <HAL_GetTick>
 80062ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062f0:	f7fe fd1e 	bl	8004d30 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e255      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006302:	4b55      	ldr	r3, [pc, #340]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0f0      	beq.n	80062f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800630e:	f7fe fd3f 	bl	8004d90 <HAL_GetREVID>
 8006312:	4603      	mov	r3, r0
 8006314:	f241 0203 	movw	r2, #4099	; 0x1003
 8006318:	4293      	cmp	r3, r2
 800631a:	d817      	bhi.n	800634c <HAL_RCC_OscConfig+0x3ec>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	2b20      	cmp	r3, #32
 8006322:	d108      	bne.n	8006336 <HAL_RCC_OscConfig+0x3d6>
 8006324:	4b4c      	ldr	r3, [pc, #304]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800632c:	4a4a      	ldr	r2, [pc, #296]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800632e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006332:	6053      	str	r3, [r2, #4]
 8006334:	e02e      	b.n	8006394 <HAL_RCC_OscConfig+0x434>
 8006336:	4b48      	ldr	r3, [pc, #288]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	069b      	lsls	r3, r3, #26
 8006344:	4944      	ldr	r1, [pc, #272]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006346:	4313      	orrs	r3, r2
 8006348:	604b      	str	r3, [r1, #4]
 800634a:	e023      	b.n	8006394 <HAL_RCC_OscConfig+0x434>
 800634c:	4b42      	ldr	r3, [pc, #264]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	061b      	lsls	r3, r3, #24
 800635a:	493f      	ldr	r1, [pc, #252]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800635c:	4313      	orrs	r3, r2
 800635e:	60cb      	str	r3, [r1, #12]
 8006360:	e018      	b.n	8006394 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006362:	4b3d      	ldr	r3, [pc, #244]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a3c      	ldr	r2, [pc, #240]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7fe fcdf 	bl	8004d30 <HAL_GetTick>
 8006372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006376:	f7fe fcdb 	bl	8004d30 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e212      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006388:	4b33      	ldr	r3, [pc, #204]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f0      	bne.n	8006376 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d036      	beq.n	800640e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d019      	beq.n	80063dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a8:	4b2b      	ldr	r3, [pc, #172]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ac:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b4:	f7fe fcbc 	bl	8004d30 <HAL_GetTick>
 80063b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063bc:	f7fe fcb8 	bl	8004d30 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e1ef      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063ce:	4b22      	ldr	r3, [pc, #136]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80063d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x45c>
 80063da:	e018      	b.n	800640e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063dc:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80063de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e0:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fe fca2 	bl	8004d30 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f0:	f7fe fc9e 	bl	8004d30 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e1d5      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d039      	beq.n	800648e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01c      	beq.n	800645c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006422:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a0c      	ldr	r2, [pc, #48]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 8006428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800642c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800642e:	f7fe fc7f 	bl	8004d30 <HAL_GetTick>
 8006432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006436:	f7fe fc7b 	bl	8004d30 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e1b2      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006448:	4b03      	ldr	r3, [pc, #12]	; (8006458 <HAL_RCC_OscConfig+0x4f8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x4d6>
 8006454:	e01b      	b.n	800648e <HAL_RCC_OscConfig+0x52e>
 8006456:	bf00      	nop
 8006458:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800645c:	4b9b      	ldr	r3, [pc, #620]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a9a      	ldr	r2, [pc, #616]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006466:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006468:	f7fe fc62 	bl	8004d30 <HAL_GetTick>
 800646c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006470:	f7fe fc5e 	bl	8004d30 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e195      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006482:	4b92      	ldr	r3, [pc, #584]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8081 	beq.w	800659e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800649c:	4b8c      	ldr	r3, [pc, #560]	; (80066d0 <HAL_RCC_OscConfig+0x770>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a8b      	ldr	r2, [pc, #556]	; (80066d0 <HAL_RCC_OscConfig+0x770>)
 80064a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064a8:	f7fe fc42 	bl	8004d30 <HAL_GetTick>
 80064ac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064b0:	f7fe fc3e 	bl	8004d30 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b64      	cmp	r3, #100	; 0x64
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e175      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064c2:	4b83      	ldr	r3, [pc, #524]	; (80066d0 <HAL_RCC_OscConfig+0x770>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d106      	bne.n	80064e4 <HAL_RCC_OscConfig+0x584>
 80064d6:	4b7d      	ldr	r3, [pc, #500]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4a7c      	ldr	r2, [pc, #496]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80064dc:	f043 0301 	orr.w	r3, r3, #1
 80064e0:	6713      	str	r3, [r2, #112]	; 0x70
 80064e2:	e02d      	b.n	8006540 <HAL_RCC_OscConfig+0x5e0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10c      	bne.n	8006506 <HAL_RCC_OscConfig+0x5a6>
 80064ec:	4b77      	ldr	r3, [pc, #476]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80064ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f0:	4a76      	ldr	r2, [pc, #472]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	6713      	str	r3, [r2, #112]	; 0x70
 80064f8:	4b74      	ldr	r3, [pc, #464]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	4a73      	ldr	r2, [pc, #460]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80064fe:	f023 0304 	bic.w	r3, r3, #4
 8006502:	6713      	str	r3, [r2, #112]	; 0x70
 8006504:	e01c      	b.n	8006540 <HAL_RCC_OscConfig+0x5e0>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b05      	cmp	r3, #5
 800650c:	d10c      	bne.n	8006528 <HAL_RCC_OscConfig+0x5c8>
 800650e:	4b6f      	ldr	r3, [pc, #444]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	4a6e      	ldr	r2, [pc, #440]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006514:	f043 0304 	orr.w	r3, r3, #4
 8006518:	6713      	str	r3, [r2, #112]	; 0x70
 800651a:	4b6c      	ldr	r3, [pc, #432]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a6b      	ldr	r2, [pc, #428]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	6713      	str	r3, [r2, #112]	; 0x70
 8006526:	e00b      	b.n	8006540 <HAL_RCC_OscConfig+0x5e0>
 8006528:	4b68      	ldr	r3, [pc, #416]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	4a67      	ldr	r2, [pc, #412]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	6713      	str	r3, [r2, #112]	; 0x70
 8006534:	4b65      	ldr	r3, [pc, #404]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006538:	4a64      	ldr	r2, [pc, #400]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800653a:	f023 0304 	bic.w	r3, r3, #4
 800653e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fe fbf2 	bl	8004d30 <HAL_GetTick>
 800654c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800654e:	e00a      	b.n	8006566 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fe fbee 	bl	8004d30 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	; 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e123      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006566:	4b59      	ldr	r3, [pc, #356]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ee      	beq.n	8006550 <HAL_RCC_OscConfig+0x5f0>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006574:	f7fe fbdc 	bl	8004d30 <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800657a:	e00a      	b.n	8006592 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fe fbd8 	bl	8004d30 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	; 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e10d      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006592:	4b4e      	ldr	r3, [pc, #312]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ee      	bne.n	800657c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8102 	beq.w	80067ac <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065a8:	4b48      	ldr	r3, [pc, #288]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b0:	2b18      	cmp	r3, #24
 80065b2:	f000 80bd 	beq.w	8006730 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	f040 809e 	bne.w	80066fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c0:	4b42      	ldr	r3, [pc, #264]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a41      	ldr	r2, [pc, #260]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80065c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065cc:	f7fe fbb0 	bl	8004d30 <HAL_GetTick>
 80065d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065d4:	f7fe fbac 	bl	8004d30 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e0e3      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e6:	4b39      	ldr	r3, [pc, #228]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065f2:	4b36      	ldr	r3, [pc, #216]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80065f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <HAL_RCC_OscConfig+0x774>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006602:	0112      	lsls	r2, r2, #4
 8006604:	430a      	orrs	r2, r1
 8006606:	4931      	ldr	r1, [pc, #196]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006608:	4313      	orrs	r3, r2
 800660a:	628b      	str	r3, [r1, #40]	; 0x28
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	3b01      	subs	r3, #1
 8006612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661a:	3b01      	subs	r3, #1
 800661c:	025b      	lsls	r3, r3, #9
 800661e:	b29b      	uxth	r3, r3
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	3b01      	subs	r3, #1
 8006628:	041b      	lsls	r3, r3, #16
 800662a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006634:	3b01      	subs	r3, #1
 8006636:	061b      	lsls	r3, r3, #24
 8006638:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800663c:	4923      	ldr	r1, [pc, #140]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800663e:	4313      	orrs	r3, r2
 8006640:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	4a21      	ldr	r2, [pc, #132]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800664e:	4b1f      	ldr	r3, [pc, #124]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006652:	4b21      	ldr	r3, [pc, #132]	; (80066d8 <HAL_RCC_OscConfig+0x778>)
 8006654:	4013      	ands	r3, r2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800665a:	00d2      	lsls	r2, r2, #3
 800665c:	491b      	ldr	r1, [pc, #108]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800665e:	4313      	orrs	r3, r2
 8006660:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006662:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	f023 020c 	bic.w	r2, r3, #12
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	4917      	ldr	r1, [pc, #92]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006670:	4313      	orrs	r3, r2
 8006672:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	f023 0202 	bic.w	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	4912      	ldr	r1, [pc, #72]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006686:	4b11      	ldr	r3, [pc, #68]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006690:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006692:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 8006698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80066a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	4a07      	ldr	r2, [pc, #28]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a04      	ldr	r2, [pc, #16]	; (80066cc <HAL_RCC_OscConfig+0x76c>)
 80066bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c2:	f7fe fb35 	bl	8004d30 <HAL_GetTick>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066c8:	e011      	b.n	80066ee <HAL_RCC_OscConfig+0x78e>
 80066ca:	bf00      	nop
 80066cc:	58024400 	.word	0x58024400
 80066d0:	58024800 	.word	0x58024800
 80066d4:	fffffc0c 	.word	0xfffffc0c
 80066d8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066dc:	f7fe fb28 	bl	8004d30 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e05f      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066ee:	4b32      	ldr	r3, [pc, #200]	; (80067b8 <HAL_RCC_OscConfig+0x858>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x77c>
 80066fa:	e057      	b.n	80067ac <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fc:	4b2e      	ldr	r3, [pc, #184]	; (80067b8 <HAL_RCC_OscConfig+0x858>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <HAL_RCC_OscConfig+0x858>)
 8006702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fe fb12 	bl	8004d30 <HAL_GetTick>
 800670c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006710:	f7fe fb0e 	bl	8004d30 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e045      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006722:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <HAL_RCC_OscConfig+0x858>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x7b0>
 800672e:	e03d      	b.n	80067ac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006730:	4b21      	ldr	r3, [pc, #132]	; (80067b8 <HAL_RCC_OscConfig+0x858>)
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006736:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <HAL_RCC_OscConfig+0x858>)
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	2b01      	cmp	r3, #1
 8006742:	d031      	beq.n	80067a8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f003 0203 	and.w	r2, r3, #3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d12a      	bne.n	80067a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	091b      	lsrs	r3, r3, #4
 8006756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675e:	429a      	cmp	r2, r3
 8006760:	d122      	bne.n	80067a8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d11a      	bne.n	80067a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	0a5b      	lsrs	r3, r3, #9
 8006776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006780:	429a      	cmp	r2, r3
 8006782:	d111      	bne.n	80067a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	0c1b      	lsrs	r3, r3, #16
 8006788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d108      	bne.n	80067a8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	0e1b      	lsrs	r3, r3, #24
 800679a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d001      	beq.n	80067ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3730      	adds	r7, #48	; 0x30
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400

080067bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e19c      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067d0:	4b8a      	ldr	r3, [pc, #552]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d910      	bls.n	8006800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b87      	ldr	r3, [pc, #540]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 020f 	bic.w	r2, r3, #15
 80067e6:	4985      	ldr	r1, [pc, #532]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b83      	ldr	r3, [pc, #524]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e184      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d010      	beq.n	800682e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	4b7b      	ldr	r3, [pc, #492]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006818:	429a      	cmp	r2, r3
 800681a:	d908      	bls.n	800682e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800681c:	4b78      	ldr	r3, [pc, #480]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4975      	ldr	r1, [pc, #468]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800682a:	4313      	orrs	r3, r2
 800682c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	4b70      	ldr	r3, [pc, #448]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006846:	429a      	cmp	r2, r3
 8006848:	d908      	bls.n	800685c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800684a:	4b6d      	ldr	r3, [pc, #436]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	496a      	ldr	r1, [pc, #424]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 8006858:	4313      	orrs	r3, r2
 800685a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d010      	beq.n	800688a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	4b64      	ldr	r3, [pc, #400]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006874:	429a      	cmp	r2, r3
 8006876:	d908      	bls.n	800688a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006878:	4b61      	ldr	r3, [pc, #388]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	495e      	ldr	r1, [pc, #376]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 8006886:	4313      	orrs	r3, r2
 8006888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d010      	beq.n	80068b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69da      	ldr	r2, [r3, #28]
 800689a:	4b59      	ldr	r3, [pc, #356]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d908      	bls.n	80068b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068a6:	4b56      	ldr	r3, [pc, #344]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	4953      	ldr	r1, [pc, #332]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d010      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	4b4d      	ldr	r3, [pc, #308]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d908      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d4:	4b4a      	ldr	r3, [pc, #296]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f023 020f 	bic.w	r2, r3, #15
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4947      	ldr	r1, [pc, #284]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d055      	beq.n	800699e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80068f2:	4b43      	ldr	r3, [pc, #268]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	4940      	ldr	r1, [pc, #256]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 8006900:	4313      	orrs	r3, r2
 8006902:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d107      	bne.n	800691c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800690c:	4b3c      	ldr	r3, [pc, #240]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d121      	bne.n	800695c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0f6      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b03      	cmp	r3, #3
 8006922:	d107      	bne.n	8006934 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006924:	4b36      	ldr	r3, [pc, #216]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d115      	bne.n	800695c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e0ea      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d107      	bne.n	800694c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800693c:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0de      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800694c:	4b2c      	ldr	r3, [pc, #176]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0d6      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f023 0207 	bic.w	r2, r3, #7
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4925      	ldr	r1, [pc, #148]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800696a:	4313      	orrs	r3, r2
 800696c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696e:	f7fe f9df 	bl	8004d30 <HAL_GetTick>
 8006972:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006974:	e00a      	b.n	800698c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006976:	f7fe f9db 	bl	8004d30 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	f241 3288 	movw	r2, #5000	; 0x1388
 8006984:	4293      	cmp	r3, r2
 8006986:	d901      	bls.n	800698c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e0be      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698c:	4b1c      	ldr	r3, [pc, #112]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	429a      	cmp	r2, r3
 800699c:	d1eb      	bne.n	8006976 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d010      	beq.n	80069cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d208      	bcs.n	80069cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ba:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f023 020f 	bic.w	r2, r3, #15
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	490e      	ldr	r1, [pc, #56]	; (8006a00 <HAL_RCC_ClockConfig+0x244>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069cc:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d214      	bcs.n	8006a04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069da:	4b08      	ldr	r3, [pc, #32]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 020f 	bic.w	r2, r3, #15
 80069e2:	4906      	ldr	r1, [pc, #24]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ea:	4b04      	ldr	r3, [pc, #16]	; (80069fc <HAL_RCC_ClockConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e086      	b.n	8006b0a <HAL_RCC_ClockConfig+0x34e>
 80069fc:	52002000 	.word	0x52002000
 8006a00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d010      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	4b3f      	ldr	r3, [pc, #252]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d208      	bcs.n	8006a32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a20:	4b3c      	ldr	r3, [pc, #240]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	4939      	ldr	r1, [pc, #228]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695a      	ldr	r2, [r3, #20]
 8006a42:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d208      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a4e:	4b31      	ldr	r3, [pc, #196]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	492e      	ldr	r1, [pc, #184]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0310 	and.w	r3, r3, #16
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d010      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	4b28      	ldr	r3, [pc, #160]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d208      	bcs.n	8006a8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a7c:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	4922      	ldr	r1, [pc, #136]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d010      	beq.n	8006abc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69da      	ldr	r2, [r3, #28]
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d208      	bcs.n	8006abc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	4917      	ldr	r1, [pc, #92]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006abc:	f000 f834 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	4912      	ldr	r1, [pc, #72]	; (8006b18 <HAL_RCC_ClockConfig+0x35c>)
 8006ace:	5ccb      	ldrb	r3, [r1, r3]
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ada:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <HAL_RCC_ClockConfig+0x358>)
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	4a0d      	ldr	r2, [pc, #52]	; (8006b18 <HAL_RCC_ClockConfig+0x35c>)
 8006ae4:	5cd3      	ldrb	r3, [r2, r3]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <HAL_RCC_ClockConfig+0x360>)
 8006af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006af4:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <HAL_RCC_ClockConfig+0x364>)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <HAL_RCC_ClockConfig+0x368>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe f8cc 	bl	8004c9c <HAL_InitTick>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	58024400 	.word	0x58024400
 8006b18:	080101f8 	.word	0x080101f8
 8006b1c:	24000068 	.word	0x24000068
 8006b20:	24000064 	.word	0x24000064
 8006b24:	2400006c 	.word	0x2400006c

08006b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b089      	sub	sp, #36	; 0x24
 8006b2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b2e:	4bb3      	ldr	r3, [pc, #716]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b36:	2b18      	cmp	r3, #24
 8006b38:	f200 8155 	bhi.w	8006de6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006ba9 	.word	0x08006ba9
 8006b48:	08006de7 	.word	0x08006de7
 8006b4c:	08006de7 	.word	0x08006de7
 8006b50:	08006de7 	.word	0x08006de7
 8006b54:	08006de7 	.word	0x08006de7
 8006b58:	08006de7 	.word	0x08006de7
 8006b5c:	08006de7 	.word	0x08006de7
 8006b60:	08006de7 	.word	0x08006de7
 8006b64:	08006bcf 	.word	0x08006bcf
 8006b68:	08006de7 	.word	0x08006de7
 8006b6c:	08006de7 	.word	0x08006de7
 8006b70:	08006de7 	.word	0x08006de7
 8006b74:	08006de7 	.word	0x08006de7
 8006b78:	08006de7 	.word	0x08006de7
 8006b7c:	08006de7 	.word	0x08006de7
 8006b80:	08006de7 	.word	0x08006de7
 8006b84:	08006bd5 	.word	0x08006bd5
 8006b88:	08006de7 	.word	0x08006de7
 8006b8c:	08006de7 	.word	0x08006de7
 8006b90:	08006de7 	.word	0x08006de7
 8006b94:	08006de7 	.word	0x08006de7
 8006b98:	08006de7 	.word	0x08006de7
 8006b9c:	08006de7 	.word	0x08006de7
 8006ba0:	08006de7 	.word	0x08006de7
 8006ba4:	08006bdb 	.word	0x08006bdb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ba8:	4b94      	ldr	r3, [pc, #592]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bb4:	4b91      	ldr	r3, [pc, #580]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	08db      	lsrs	r3, r3, #3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	4a90      	ldr	r2, [pc, #576]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006bc6:	e111      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bc8:	4b8d      	ldr	r3, [pc, #564]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bca:	61bb      	str	r3, [r7, #24]
    break;
 8006bcc:	e10e      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006bce:	4b8d      	ldr	r3, [pc, #564]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bd0:	61bb      	str	r3, [r7, #24]
    break;
 8006bd2:	e10b      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006bd4:	4b8c      	ldr	r3, [pc, #560]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006bd6:	61bb      	str	r3, [r7, #24]
    break;
 8006bd8:	e108      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bda:	4b88      	ldr	r3, [pc, #544]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006be4:	4b85      	ldr	r3, [pc, #532]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	091b      	lsrs	r3, r3, #4
 8006bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006bf0:	4b82      	ldr	r3, [pc, #520]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006bfa:	4b80      	ldr	r3, [pc, #512]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfe:	08db      	lsrs	r3, r3, #3
 8006c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	fb02 f303 	mul.w	r3, r2, r3
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80e1 	beq.w	8006de0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	f000 8083 	beq.w	8006d2c <HAL_RCC_GetSysClockFreq+0x204>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	f200 80a1 	bhi.w	8006d70 <HAL_RCC_GetSysClockFreq+0x248>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x114>
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d056      	beq.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c3a:	e099      	b.n	8006d70 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c3c:	4b6f      	ldr	r3, [pc, #444]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02d      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c48:	4b6c      	ldr	r3, [pc, #432]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	08db      	lsrs	r3, r3, #3
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	4a6b      	ldr	r2, [pc, #428]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c54:	fa22 f303 	lsr.w	r3, r2, r3
 8006c58:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	ee07 3a90 	vmov	s15, r3
 8006c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c72:	4b62      	ldr	r3, [pc, #392]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c86:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ca2:	e087      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb6:	4b51      	ldr	r3, [pc, #324]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce6:	e065      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfa:	4b40      	ldr	r3, [pc, #256]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d2a:	e043      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3e:	4b2f      	ldr	r3, [pc, #188]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6e:	e021      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d82:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006e0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	0a5b      	lsrs	r3, r3, #9
 8006dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd8:	ee17 3a90 	vmov	r3, s15
 8006ddc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006dde:	e005      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
    break;
 8006de4:	e002      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006de8:	61bb      	str	r3, [r7, #24]
    break;
 8006dea:	bf00      	nop
  }

  return sysclockfreq;
 8006dec:	69bb      	ldr	r3, [r7, #24]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3724      	adds	r7, #36	; 0x24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	03d09000 	.word	0x03d09000
 8006e04:	003d0900 	.word	0x003d0900
 8006e08:	017d7840 	.word	0x017d7840
 8006e0c:	46000000 	.word	0x46000000
 8006e10:	4c742400 	.word	0x4c742400
 8006e14:	4a742400 	.word	0x4a742400
 8006e18:	4bbebc20 	.word	0x4bbebc20

08006e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e22:	f7ff fe81 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	490f      	ldr	r1, [pc, #60]	; (8006e70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e34:	5ccb      	ldrb	r3, [r1, r3]
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e4a:	5cd3      	ldrb	r3, [r2, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	fa22 f303 	lsr.w	r3, r2, r3
 8006e56:	4a07      	ldr	r2, [pc, #28]	; (8006e74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e5a:	4a07      	ldr	r2, [pc, #28]	; (8006e78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e62:	681b      	ldr	r3, [r3, #0]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	080101f8 	.word	0x080101f8
 8006e74:	24000068 	.word	0x24000068
 8006e78:	24000064 	.word	0x24000064

08006e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e80:	f7ff ffcc 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006e84:	4602      	mov	r2, r0
 8006e86:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	091b      	lsrs	r3, r3, #4
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	4904      	ldr	r1, [pc, #16]	; (8006ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e92:	5ccb      	ldrb	r3, [r1, r3]
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	080101f8 	.word	0x080101f8

08006ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006eac:	f7ff ffb6 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	4904      	ldr	r1, [pc, #16]	; (8006ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ebe:	5ccb      	ldrb	r3, [r1, r3]
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	58024400 	.word	0x58024400
 8006ed0:	080101f8 	.word	0x080101f8

08006ed4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d03f      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ef8:	d02a      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006efa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006efe:	d824      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f04:	d018      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0a:	d81e      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f14:	d007      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f16:	e018      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f18:	4ba3      	ldr	r3, [pc, #652]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	4aa2      	ldr	r2, [pc, #648]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f24:	e015      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 f9d5 	bl	80082dc <RCCEx_PLL2_Config>
 8006f32:	4603      	mov	r3, r0
 8006f34:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f36:	e00c      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3324      	adds	r3, #36	; 0x24
 8006f3c:	2102      	movs	r1, #2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 fa7e 	bl	8008440 <RCCEx_PLL3_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f48:	e003      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f58:	4b93      	ldr	r3, [pc, #588]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f64:	4990      	ldr	r1, [pc, #576]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	650b      	str	r3, [r1, #80]	; 0x50
 8006f6a:	e001      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d03d      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d826      	bhi.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f84:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08006fa1 	.word	0x08006fa1
 8006f90:	08006faf 	.word	0x08006faf
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	08006fd9 	.word	0x08006fd9
 8006f9c:	08006fd9 	.word	0x08006fd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa0:	4b81      	ldr	r3, [pc, #516]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	4a80      	ldr	r2, [pc, #512]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006faa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fac:	e015      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 f991 	bl	80082dc <RCCEx_PLL2_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fbe:	e00c      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3324      	adds	r3, #36	; 0x24
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 fa3a 	bl	8008440 <RCCEx_PLL3_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fd0:	e003      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd6:	e000      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d109      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fe0:	4b71      	ldr	r3, [pc, #452]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe4:	f023 0207 	bic.w	r2, r3, #7
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fec:	496e      	ldr	r1, [pc, #440]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ff2:	e001      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007000:	2b00      	cmp	r3, #0
 8007002:	d042      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700c:	d02b      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800700e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007012:	d825      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007014:	2bc0      	cmp	r3, #192	; 0xc0
 8007016:	d028      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007018:	2bc0      	cmp	r3, #192	; 0xc0
 800701a:	d821      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800701c:	2b80      	cmp	r3, #128	; 0x80
 800701e:	d016      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d81d      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d007      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800702c:	e018      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702e:	4b5e      	ldr	r3, [pc, #376]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4a5d      	ldr	r2, [pc, #372]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800703a:	e017      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f001 f94a 	bl	80082dc <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800704c:	e00e      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3324      	adds	r3, #36	; 0x24
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f001 f9f3 	bl	8008440 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800705e:	e005      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
      break;
 8007064:	e002      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800706a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800706c:	7dfb      	ldrb	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007072:	4b4d      	ldr	r3, [pc, #308]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007076:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707e:	494a      	ldr	r1, [pc, #296]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007080:	4313      	orrs	r3, r2
 8007082:	650b      	str	r3, [r1, #80]	; 0x50
 8007084:	e001      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007092:	2b00      	cmp	r3, #0
 8007094:	d049      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800709c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070a0:	d030      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80070a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070a6:	d82a      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070ac:	d02c      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80070ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070b2:	d824      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b8:	d018      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80070ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070be:	d81e      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80070c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c8:	d007      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x206>
 80070ca:	e018      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070cc:	4b36      	ldr	r3, [pc, #216]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	4a35      	ldr	r2, [pc, #212]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070d8:	e017      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3304      	adds	r3, #4
 80070de:	2100      	movs	r1, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 f8fb 	bl	80082dc <RCCEx_PLL2_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070ea:	e00e      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3324      	adds	r3, #36	; 0x24
 80070f0:	2100      	movs	r1, #0
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 f9a4 	bl	8008440 <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070fc:	e005      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
      break;
 8007102:	e002      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007104:	bf00      	nop
 8007106:	e000      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007110:	4b25      	ldr	r3, [pc, #148]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007114:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800711e:	4922      	ldr	r1, [pc, #136]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007120:	4313      	orrs	r3, r2
 8007122:	658b      	str	r3, [r1, #88]	; 0x58
 8007124:	e001      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007132:	2b00      	cmp	r3, #0
 8007134:	d04b      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800713c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007140:	d030      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007146:	d82a      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007148:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800714c:	d02e      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800714e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007152:	d824      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007158:	d018      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800715a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800715e:	d81e      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007168:	d007      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800716a:	e018      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800716c:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	4a0d      	ldr	r2, [pc, #52]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007178:	e019      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	2100      	movs	r1, #0
 8007180:	4618      	mov	r0, r3
 8007182:	f001 f8ab 	bl	80082dc <RCCEx_PLL2_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800718a:	e010      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3324      	adds	r3, #36	; 0x24
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f001 f954 	bl	8008440 <RCCEx_PLL3_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800719c:	e007      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
      break;
 80071a2:	e004      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80071a4:	bf00      	nop
 80071a6:	e002      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80071a8:	58024400 	.word	0x58024400
      break;
 80071ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071b4:	4b99      	ldr	r3, [pc, #612]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071c2:	4996      	ldr	r1, [pc, #600]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	658b      	str	r3, [r1, #88]	; 0x58
 80071c8:	e001      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d032      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071de:	2b30      	cmp	r3, #48	; 0x30
 80071e0:	d01c      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80071e2:	2b30      	cmp	r3, #48	; 0x30
 80071e4:	d817      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d00c      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d813      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d016      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d10f      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f6:	4b89      	ldr	r3, [pc, #548]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a88      	ldr	r2, [pc, #544]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007202:	e00e      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3304      	adds	r3, #4
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f001 f866 	bl	80082dc <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007214:	e005      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	75fb      	strb	r3, [r7, #23]
      break;
 800721a:	e002      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007228:	4b7c      	ldr	r3, [pc, #496]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800722a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007234:	4979      	ldr	r1, [pc, #484]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007236:	4313      	orrs	r3, r2
 8007238:	64cb      	str	r3, [r1, #76]	; 0x4c
 800723a:	e001      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d047      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007254:	d030      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725a:	d82a      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800725c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007260:	d02c      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007262:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007266:	d824      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800726c:	d018      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800726e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007272:	d81e      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727c:	d007      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800727e:	e018      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007280:	4b66      	ldr	r3, [pc, #408]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4a65      	ldr	r2, [pc, #404]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800728c:	e017      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3304      	adds	r3, #4
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f001 f821 	bl	80082dc <RCCEx_PLL2_Config>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800729e:	e00e      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3324      	adds	r3, #36	; 0x24
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 f8ca 	bl	8008440 <RCCEx_PLL3_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80072b0:	e005      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
      break;
 80072b6:	e002      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80072bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072c4:	4b55      	ldr	r3, [pc, #340]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d0:	4952      	ldr	r1, [pc, #328]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	650b      	str	r3, [r1, #80]	; 0x50
 80072d6:	e001      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d049      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072f0:	d02e      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80072f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072f6:	d828      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80072f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072fc:	d02a      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80072fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007302:	d822      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007304:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007308:	d026      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800730a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800730e:	d81c      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007314:	d010      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731a:	d816      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01d      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007324:	d111      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3304      	adds	r3, #4
 800732a:	2101      	movs	r1, #1
 800732c:	4618      	mov	r0, r3
 800732e:	f000 ffd5 	bl	80082dc <RCCEx_PLL2_Config>
 8007332:	4603      	mov	r3, r0
 8007334:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007336:	e012      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3324      	adds	r3, #36	; 0x24
 800733c:	2101      	movs	r1, #1
 800733e:	4618      	mov	r0, r3
 8007340:	f001 f87e 	bl	8008440 <RCCEx_PLL3_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007348:	e009      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
      break;
 800734e:	e006      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007350:	bf00      	nop
 8007352:	e004      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007354:	bf00      	nop
 8007356:	e002      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800735c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007364:	4b2d      	ldr	r3, [pc, #180]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007368:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007370:	492a      	ldr	r1, [pc, #168]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007372:	4313      	orrs	r3, r2
 8007374:	650b      	str	r3, [r1, #80]	; 0x50
 8007376:	e001      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d04d      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800738e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007392:	d02e      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007398:	d828      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739e:	d02a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d822      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80073a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073aa:	d026      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x526>
 80073ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073b0:	d81c      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80073b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b6:	d010      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x506>
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073bc:	d816      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x518>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01d      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80073c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c6:	d111      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	2101      	movs	r1, #1
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 ff84 	bl	80082dc <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073d8:	e012      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3324      	adds	r3, #36	; 0x24
 80073de:	2101      	movs	r1, #1
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 f82d 	bl	8008440 <RCCEx_PLL3_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80073ea:	e009      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
      break;
 80073f0:	e006      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073f2:	bf00      	nop
 80073f4:	e004      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073f6:	bf00      	nop
 80073f8:	e002      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80073fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10c      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007414:	4901      	ldr	r1, [pc, #4]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007416:	4313      	orrs	r3, r2
 8007418:	658b      	str	r3, [r1, #88]	; 0x58
 800741a:	e003      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800741c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d02f      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007438:	d00e      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743e:	d814      	bhi.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d015      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007448:	d10f      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800744a:	4baf      	ldr	r3, [pc, #700]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	4aae      	ldr	r2, [pc, #696]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007454:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007456:	e00c      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f000 ff3c 	bl	80082dc <RCCEx_PLL2_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007468:	e003      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	75fb      	strb	r3, [r7, #23]
      break;
 800746e:	e000      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d109      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007478:	4ba3      	ldr	r3, [pc, #652]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007484:	49a0      	ldr	r1, [pc, #640]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007486:	4313      	orrs	r3, r2
 8007488:	650b      	str	r3, [r1, #80]	; 0x50
 800748a:	e001      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d032      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d81b      	bhi.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074e3 	.word	0x080074e3
 80074b0:	080074bd 	.word	0x080074bd
 80074b4:	080074cb 	.word	0x080074cb
 80074b8:	080074e3 	.word	0x080074e3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074bc:	4b92      	ldr	r3, [pc, #584]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	4a91      	ldr	r2, [pc, #580]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074c8:	e00c      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3304      	adds	r3, #4
 80074ce:	2102      	movs	r1, #2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 ff03 	bl	80082dc <RCCEx_PLL2_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80074da:	e003      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]
      break;
 80074e0:	e000      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80074e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074ea:	4b87      	ldr	r3, [pc, #540]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ee:	f023 0203 	bic.w	r2, r3, #3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f6:	4984      	ldr	r1, [pc, #528]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074fc:	e001      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 8086 	beq.w	800761c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007510:	4b7e      	ldr	r3, [pc, #504]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a7d      	ldr	r2, [pc, #500]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800751a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800751c:	f7fd fc08 	bl	8004d30 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007522:	e009      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007524:	f7fd fc04 	bl	8004d30 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b64      	cmp	r3, #100	; 0x64
 8007530:	d902      	bls.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	75fb      	strb	r3, [r7, #23]
        break;
 8007536:	e005      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007538:	4b74      	ldr	r3, [pc, #464]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0ef      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d166      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800754a:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800754c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007554:	4053      	eors	r3, r2
 8007556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755a:	2b00      	cmp	r3, #0
 800755c:	d013      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800755e:	4b6a      	ldr	r3, [pc, #424]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007566:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007568:	4b67      	ldr	r3, [pc, #412]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800756a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756c:	4a66      	ldr	r2, [pc, #408]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800756e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007572:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007574:	4b64      	ldr	r3, [pc, #400]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007578:	4a63      	ldr	r2, [pc, #396]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800757a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800757e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007580:	4a61      	ldr	r2, [pc, #388]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800758c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007590:	d115      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007592:	f7fd fbcd 	bl	8004d30 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007598:	e00b      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800759a:	f7fd fbc9 	bl	8004d30 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d902      	bls.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	75fb      	strb	r3, [r7, #23]
            break;
 80075b0:	e005      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075b2:	4b55      	ldr	r3, [pc, #340]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0ed      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d126      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075d2:	d10d      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80075d4:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075e2:	0919      	lsrs	r1, r3, #4
 80075e4:	4b4a      	ldr	r3, [pc, #296]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80075e6:	400b      	ands	r3, r1
 80075e8:	4947      	ldr	r1, [pc, #284]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	610b      	str	r3, [r1, #16]
 80075ee:	e005      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80075f0:	4b45      	ldr	r3, [pc, #276]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	4a44      	ldr	r2, [pc, #272]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80075fa:	6113      	str	r3, [r2, #16]
 80075fc:	4b42      	ldr	r3, [pc, #264]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80075fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800760a:	493f      	ldr	r1, [pc, #252]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800760c:	4313      	orrs	r3, r2
 800760e:	670b      	str	r3, [r1, #112]	; 0x70
 8007610:	e004      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	75bb      	strb	r3, [r7, #22]
 8007616:	e001      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8085 	beq.w	8007734 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800762e:	2b28      	cmp	r3, #40	; 0x28
 8007630:	d866      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007715 	.word	0x08007715
 800763c:	08007701 	.word	0x08007701
 8007640:	08007701 	.word	0x08007701
 8007644:	08007701 	.word	0x08007701
 8007648:	08007701 	.word	0x08007701
 800764c:	08007701 	.word	0x08007701
 8007650:	08007701 	.word	0x08007701
 8007654:	08007701 	.word	0x08007701
 8007658:	080076dd 	.word	0x080076dd
 800765c:	08007701 	.word	0x08007701
 8007660:	08007701 	.word	0x08007701
 8007664:	08007701 	.word	0x08007701
 8007668:	08007701 	.word	0x08007701
 800766c:	08007701 	.word	0x08007701
 8007670:	08007701 	.word	0x08007701
 8007674:	08007701 	.word	0x08007701
 8007678:	080076ef 	.word	0x080076ef
 800767c:	08007701 	.word	0x08007701
 8007680:	08007701 	.word	0x08007701
 8007684:	08007701 	.word	0x08007701
 8007688:	08007701 	.word	0x08007701
 800768c:	08007701 	.word	0x08007701
 8007690:	08007701 	.word	0x08007701
 8007694:	08007701 	.word	0x08007701
 8007698:	08007715 	.word	0x08007715
 800769c:	08007701 	.word	0x08007701
 80076a0:	08007701 	.word	0x08007701
 80076a4:	08007701 	.word	0x08007701
 80076a8:	08007701 	.word	0x08007701
 80076ac:	08007701 	.word	0x08007701
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007701 	.word	0x08007701
 80076b8:	08007715 	.word	0x08007715
 80076bc:	08007701 	.word	0x08007701
 80076c0:	08007701 	.word	0x08007701
 80076c4:	08007701 	.word	0x08007701
 80076c8:	08007701 	.word	0x08007701
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007701 	.word	0x08007701
 80076d4:	08007701 	.word	0x08007701
 80076d8:	08007715 	.word	0x08007715
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	2101      	movs	r1, #1
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fdfa 	bl	80082dc <RCCEx_PLL2_Config>
 80076e8:	4603      	mov	r3, r0
 80076ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076ec:	e013      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3324      	adds	r3, #36	; 0x24
 80076f2:	2101      	movs	r1, #1
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fea3 	bl	8008440 <RCCEx_PLL3_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80076fe:	e00a      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	e007      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007706:	bf00      	nop
 8007708:	58024400 	.word	0x58024400
 800770c:	58024800 	.word	0x58024800
 8007710:	00ffffcf 	.word	0x00ffffcf
      break;
 8007714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d109      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800771c:	4b96      	ldr	r3, [pc, #600]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007728:	4993      	ldr	r1, [pc, #588]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800772a:	4313      	orrs	r3, r2
 800772c:	654b      	str	r3, [r1, #84]	; 0x54
 800772e:	e001      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d038      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007744:	2b05      	cmp	r3, #5
 8007746:	d821      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007748:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800774a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774e:	bf00      	nop
 8007750:	08007793 	.word	0x08007793
 8007754:	08007769 	.word	0x08007769
 8007758:	0800777b 	.word	0x0800777b
 800775c:	08007793 	.word	0x08007793
 8007760:	08007793 	.word	0x08007793
 8007764:	08007793 	.word	0x08007793
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3304      	adds	r3, #4
 800776c:	2101      	movs	r1, #1
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fdb4 	bl	80082dc <RCCEx_PLL2_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007778:	e00c      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3324      	adds	r3, #36	; 0x24
 800777e:	2101      	movs	r1, #1
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fe5d 	bl	8008440 <RCCEx_PLL3_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800778a:	e003      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	75fb      	strb	r3, [r7, #23]
      break;
 8007790:	e000      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800779a:	4b77      	ldr	r3, [pc, #476]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800779c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779e:	f023 0207 	bic.w	r2, r3, #7
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a6:	4974      	ldr	r1, [pc, #464]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	654b      	str	r3, [r1, #84]	; 0x54
 80077ac:	e001      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d03a      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	2b05      	cmp	r3, #5
 80077c6:	d821      	bhi.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	08007813 	.word	0x08007813
 80077d4:	080077e9 	.word	0x080077e9
 80077d8:	080077fb 	.word	0x080077fb
 80077dc:	08007813 	.word	0x08007813
 80077e0:	08007813 	.word	0x08007813
 80077e4:	08007813 	.word	0x08007813
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fd74 	bl	80082dc <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80077f8:	e00c      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3324      	adds	r3, #36	; 0x24
 80077fe:	2101      	movs	r1, #1
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fe1d 	bl	8008440 <RCCEx_PLL3_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800780a:	e003      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800781a:	4b57      	ldr	r3, [pc, #348]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800781c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781e:	f023 0207 	bic.w	r2, r3, #7
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007828:	4953      	ldr	r1, [pc, #332]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800782a:	4313      	orrs	r3, r2
 800782c:	658b      	str	r3, [r1, #88]	; 0x58
 800782e:	e001      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d04b      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800784a:	d02e      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800784c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007850:	d828      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007856:	d02a      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d822      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800785e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007862:	d026      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007868:	d81c      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800786a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800786e:	d010      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007874:	d816      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01d      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800787a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787e:	d111      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fd28 	bl	80082dc <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007890:	e012      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3324      	adds	r3, #36	; 0x24
 8007896:	2102      	movs	r1, #2
 8007898:	4618      	mov	r0, r3
 800789a:	f000 fdd1 	bl	8008440 <RCCEx_PLL3_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078a2:	e009      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
      break;
 80078a8:	e006      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078aa:	bf00      	nop
 80078ac:	e004      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80078b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078be:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078cc:	492a      	ldr	r1, [pc, #168]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	654b      	str	r3, [r1, #84]	; 0x54
 80078d2:	e001      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04d      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078ee:	d02e      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80078f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078f4:	d828      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fa:	d02a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007900:	d822      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007906:	d026      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800790c:	d81c      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800790e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007912:	d010      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007918:	d816      	bhi.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01d      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800791e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007922:	d111      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fcd6 	bl	80082dc <RCCEx_PLL2_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007934:	e012      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3324      	adds	r3, #36	; 0x24
 800793a:	2102      	movs	r1, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fd7f 	bl	8008440 <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007946:	e009      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	75fb      	strb	r3, [r7, #23]
      break;
 800794c:	e006      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800794e:	bf00      	nop
 8007950:	e004      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007952:	bf00      	nop
 8007954:	e002      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007956:	bf00      	nop
 8007958:	e000      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800795a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10c      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007966:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007970:	4901      	ldr	r1, [pc, #4]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007972:	4313      	orrs	r3, r2
 8007974:	658b      	str	r3, [r1, #88]	; 0x58
 8007976:	e003      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007988:	2b00      	cmp	r3, #0
 800798a:	d04b      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007992:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007996:	d02e      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007998:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800799c:	d828      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800799e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a2:	d02a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80079a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a8:	d822      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80079aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079ae:	d026      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80079b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079b4:	d81c      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80079b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ba:	d010      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80079bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079c0:	d816      	bhi.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01d      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80079c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ca:	d111      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3304      	adds	r3, #4
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fc82 	bl	80082dc <RCCEx_PLL2_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079dc:	e012      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3324      	adds	r3, #36	; 0x24
 80079e2:	2102      	movs	r1, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fd2b 	bl	8008440 <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80079ee:	e009      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
      break;
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80079f6:	bf00      	nop
 80079f8:	e004      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80079fa:	bf00      	nop
 80079fc:	e002      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a0a:	4b9d      	ldr	r3, [pc, #628]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a18:	4999      	ldr	r1, [pc, #612]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a1e:	e001      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3a:	d10a      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3324      	adds	r3, #36	; 0x24
 8007a40:	2102      	movs	r1, #2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fcfc 	bl	8008440 <RCCEx_PLL3_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a52:	4b8b      	ldr	r3, [pc, #556]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a60:	4987      	ldr	r1, [pc, #540]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01a      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7c:	d10a      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3324      	adds	r3, #36	; 0x24
 8007a82:	2102      	movs	r1, #2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fcdb 	bl	8008440 <RCCEx_PLL3_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a94:	4b7a      	ldr	r3, [pc, #488]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aa2:	4977      	ldr	r1, [pc, #476]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d034      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007abe:	d01d      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ac4:	d817      	bhi.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ace:	d009      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007ad0:	e011      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 fbff 	bl	80082dc <RCCEx_PLL2_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ae2:	e00c      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	2102      	movs	r1, #2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fca8 	bl	8008440 <RCCEx_PLL3_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007af4:	e003      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
      break;
 8007afa:	e000      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b04:	4b5e      	ldr	r3, [pc, #376]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b12:	495b      	ldr	r1, [pc, #364]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	658b      	str	r3, [r1, #88]	; 0x58
 8007b18:	e001      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d033      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b34:	d01c      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b3a:	d816      	bhi.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b46:	d007      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007b48:	e00f      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4a:	4b4d      	ldr	r3, [pc, #308]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	4a4c      	ldr	r2, [pc, #304]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b56:	e00c      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3324      	adds	r3, #36	; 0x24
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fc6e 	bl	8008440 <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6e:	e000      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b78:	4b41      	ldr	r3, [pc, #260]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b86:	493e      	ldr	r1, [pc, #248]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b8c:	e001      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d029      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007baa:	d007      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007bac:	e00f      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bae:	4b34      	ldr	r3, [pc, #208]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	4a33      	ldr	r2, [pc, #204]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bba:	e00b      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	2102      	movs	r1, #2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fb8a 	bl	80082dc <RCCEx_PLL2_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bcc:	e002      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bda:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be6:	4926      	ldr	r1, [pc, #152]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007bec:	e001      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3324      	adds	r3, #36	; 0x24
 8007c02:	2102      	movs	r1, #2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fc1b 	bl	8008440 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d033      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c28:	d017      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c2e:	d811      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c34:	d013      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3a:	d80b      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d010      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c44:	d106      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c46:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c52:	e007      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	75fb      	strb	r3, [r7, #23]
      break;
 8007c58:	e004      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10c      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c6a:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c76:	4902      	ldr	r1, [pc, #8]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	654b      	str	r3, [r1, #84]	; 0x54
 8007c7c:	e004      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007c7e:	bf00      	nop
 8007c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c94:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca0:	492e      	ldr	r1, [pc, #184]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cb2:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cc0:	4926      	ldr	r1, [pc, #152]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cd2:	4b22      	ldr	r3, [pc, #136]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cde:	491f      	ldr	r1, [pc, #124]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00d      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cf0:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cfa:	6113      	str	r3, [r2, #16]
 8007cfc:	4b17      	ldr	r3, [pc, #92]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d06:	4915      	ldr	r1, [pc, #84]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	da08      	bge.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d14:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d20:	490e      	ldr	r1, [pc, #56]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d009      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d40:	4906      	ldr	r1, [pc, #24]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007d46:	7dbb      	ldrb	r3, [r7, #22]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e000      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400

08007d60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d64:	f7ff f85a 	bl	8006e1c <HAL_RCC_GetHCLKFreq>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	091b      	lsrs	r3, r3, #4
 8007d70:	f003 0307 	and.w	r3, r3, #7
 8007d74:	4904      	ldr	r1, [pc, #16]	; (8007d88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d76:	5ccb      	ldrb	r3, [r1, r3]
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	58024400 	.word	0x58024400
 8007d88:	080101f8 	.word	0x080101f8

08007d8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b089      	sub	sp, #36	; 0x24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d94:	4ba1      	ldr	r3, [pc, #644]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	f003 0303 	and.w	r3, r3, #3
 8007d9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d9e:	4b9f      	ldr	r3, [pc, #636]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	0b1b      	lsrs	r3, r3, #12
 8007da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007da8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007daa:	4b9c      	ldr	r3, [pc, #624]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	091b      	lsrs	r3, r3, #4
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007db6:	4b99      	ldr	r3, [pc, #612]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dba:	08db      	lsrs	r3, r3, #3
 8007dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8111 	beq.w	8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	f000 8083 	beq.w	8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	f200 80a1 	bhi.w	8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d056      	beq.n	8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007df6:	e099      	b.n	8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007df8:	4b88      	ldr	r3, [pc, #544]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d02d      	beq.n	8007e60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e04:	4b85      	ldr	r3, [pc, #532]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	4a84      	ldr	r2, [pc, #528]	; (8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
 8007e14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	ee07 3a90 	vmov	s15, r3
 8007e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2e:	4b7b      	ldr	r3, [pc, #492]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e5e:	e087      	b.n	8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008028 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e72:	4b6a      	ldr	r3, [pc, #424]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ea2:	e065      	b.n	8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800802c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb6:	4b59      	ldr	r3, [pc, #356]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ee6:	e043      	b.n	8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007efa:	4b48      	ldr	r3, [pc, #288]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f2a:	e021      	b.n	8007f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800802c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f3e:	4b37      	ldr	r3, [pc, #220]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f70:	4b2a      	ldr	r3, [pc, #168]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	0a5b      	lsrs	r3, r3, #9
 8007f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f96:	ee17 2a90 	vmov	r2, s15
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f9e:	4b1f      	ldr	r3, [pc, #124]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc4:	ee17 2a90 	vmov	r2, s15
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007fcc:	4b13      	ldr	r3, [pc, #76]	; (800801c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	0e1b      	lsrs	r3, r3, #24
 8007fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff2:	ee17 2a90 	vmov	r2, s15
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ffa:	e008      	b.n	800800e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	609a      	str	r2, [r3, #8]
}
 800800e:	bf00      	nop
 8008010:	3724      	adds	r7, #36	; 0x24
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	58024400 	.word	0x58024400
 8008020:	03d09000 	.word	0x03d09000
 8008024:	46000000 	.word	0x46000000
 8008028:	4c742400 	.word	0x4c742400
 800802c:	4a742400 	.word	0x4a742400
 8008030:	4bbebc20 	.word	0x4bbebc20

08008034 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008034:	b480      	push	{r7}
 8008036:	b089      	sub	sp, #36	; 0x24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800803c:	4ba1      	ldr	r3, [pc, #644]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008046:	4b9f      	ldr	r3, [pc, #636]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	0d1b      	lsrs	r3, r3, #20
 800804c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008050:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008052:	4b9c      	ldr	r3, [pc, #624]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	0a1b      	lsrs	r3, r3, #8
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800805e:	4b99      	ldr	r3, [pc, #612]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008062:	08db      	lsrs	r3, r3, #3
 8008064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8111 	beq.w	80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b02      	cmp	r3, #2
 8008086:	f000 8083 	beq.w	8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b02      	cmp	r3, #2
 800808e:	f200 80a1 	bhi.w	80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d056      	beq.n	800814c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800809e:	e099      	b.n	80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080a0:	4b88      	ldr	r3, [pc, #544]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0320 	and.w	r3, r3, #32
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d02d      	beq.n	8008108 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080ac:	4b85      	ldr	r3, [pc, #532]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	08db      	lsrs	r3, r3, #3
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	4a84      	ldr	r2, [pc, #528]	; (80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
 80080bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d6:	4b7b      	ldr	r3, [pc, #492]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008102:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008106:	e087      	b.n	8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811a:	4b6a      	ldr	r3, [pc, #424]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812a:	ed97 6a03 	vldr	s12, [r7, #12]
 800812e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800813e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800814a:	e065      	b.n	8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008156:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800815a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800815e:	4b59      	ldr	r3, [pc, #356]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800816e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008172:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800818e:	e043      	b.n	8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800819e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a2:	4b48      	ldr	r3, [pc, #288]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081aa:	ee07 3a90 	vmov	s15, r3
 80081ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081d2:	e021      	b.n	8008218 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e6:	4b37      	ldr	r3, [pc, #220]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008216:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008218:	4b2a      	ldr	r3, [pc, #168]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	0a5b      	lsrs	r3, r3, #9
 800821e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800822e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008232:	edd7 6a07 	vldr	s13, [r7, #28]
 8008236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800823a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800823e:	ee17 2a90 	vmov	r2, s15
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008246:	4b1f      	ldr	r3, [pc, #124]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	0c1b      	lsrs	r3, r3, #16
 800824c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800825c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008260:	edd7 6a07 	vldr	s13, [r7, #28]
 8008264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800826c:	ee17 2a90 	vmov	r2, s15
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008274:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	0e1b      	lsrs	r3, r3, #24
 800827a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800828a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800828e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800829a:	ee17 2a90 	vmov	r2, s15
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082a2:	e008      	b.n	80082b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	609a      	str	r2, [r3, #8]
}
 80082b6:	bf00      	nop
 80082b8:	3724      	adds	r7, #36	; 0x24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	58024400 	.word	0x58024400
 80082c8:	03d09000 	.word	0x03d09000
 80082cc:	46000000 	.word	0x46000000
 80082d0:	4c742400 	.word	0x4c742400
 80082d4:	4a742400 	.word	0x4a742400
 80082d8:	4bbebc20 	.word	0x4bbebc20

080082dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ea:	4b53      	ldr	r3, [pc, #332]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80082ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d101      	bne.n	80082fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e099      	b.n	800842e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082fa:	4b4f      	ldr	r3, [pc, #316]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a4e      	ldr	r2, [pc, #312]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008300:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008306:	f7fc fd13 	bl	8004d30 <HAL_GetTick>
 800830a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800830c:	e008      	b.n	8008320 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800830e:	f7fc fd0f 	bl	8004d30 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e086      	b.n	800842e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008320:	4b45      	ldr	r3, [pc, #276]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f0      	bne.n	800830e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800832c:	4b42      	ldr	r3, [pc, #264]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	031b      	lsls	r3, r3, #12
 800833a:	493f      	ldr	r1, [pc, #252]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 800833c:	4313      	orrs	r3, r2
 800833e:	628b      	str	r3, [r1, #40]	; 0x28
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	3b01      	subs	r3, #1
 8008346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	3b01      	subs	r3, #1
 8008350:	025b      	lsls	r3, r3, #9
 8008352:	b29b      	uxth	r3, r3
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	3b01      	subs	r3, #1
 800835c:	041b      	lsls	r3, r3, #16
 800835e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	3b01      	subs	r3, #1
 800836a:	061b      	lsls	r3, r3, #24
 800836c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008370:	4931      	ldr	r1, [pc, #196]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008372:	4313      	orrs	r3, r2
 8008374:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008376:	4b30      	ldr	r3, [pc, #192]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	492d      	ldr	r1, [pc, #180]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008384:	4313      	orrs	r3, r2
 8008386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008388:	4b2b      	ldr	r3, [pc, #172]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	f023 0220 	bic.w	r2, r3, #32
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	4928      	ldr	r1, [pc, #160]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800839a:	4b27      	ldr	r3, [pc, #156]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	4a26      	ldr	r2, [pc, #152]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083a0:	f023 0310 	bic.w	r3, r3, #16
 80083a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083a6:	4b24      	ldr	r3, [pc, #144]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083aa:	4b24      	ldr	r3, [pc, #144]	; (800843c <RCCEx_PLL2_Config+0x160>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	69d2      	ldr	r2, [r2, #28]
 80083b2:	00d2      	lsls	r2, r2, #3
 80083b4:	4920      	ldr	r1, [pc, #128]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083ba:	4b1f      	ldr	r3, [pc, #124]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	4a1e      	ldr	r2, [pc, #120]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083c0:	f043 0310 	orr.w	r3, r3, #16
 80083c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d106      	bne.n	80083da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083cc:	4b1a      	ldr	r3, [pc, #104]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	4a19      	ldr	r2, [pc, #100]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083d8:	e00f      	b.n	80083fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d106      	bne.n	80083ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083e0:	4b15      	ldr	r3, [pc, #84]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a14      	ldr	r2, [pc, #80]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083ec:	e005      	b.n	80083fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	4a11      	ldr	r2, [pc, #68]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083fa:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a0e      	ldr	r2, [pc, #56]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008400:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008406:	f7fc fc93 	bl	8004d30 <HAL_GetTick>
 800840a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800840c:	e008      	b.n	8008420 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800840e:	f7fc fc8f 	bl	8004d30 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	d901      	bls.n	8008420 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e006      	b.n	800842e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <RCCEx_PLL2_Config+0x15c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0f0      	beq.n	800840e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	58024400 	.word	0x58024400
 800843c:	ffff0007 	.word	0xffff0007

08008440 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800844e:	4b53      	ldr	r3, [pc, #332]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b03      	cmp	r3, #3
 8008458:	d101      	bne.n	800845e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e099      	b.n	8008592 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800845e:	4b4f      	ldr	r3, [pc, #316]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a4e      	ldr	r2, [pc, #312]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800846a:	f7fc fc61 	bl	8004d30 <HAL_GetTick>
 800846e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008470:	e008      	b.n	8008484 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008472:	f7fc fc5d 	bl	8004d30 <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d901      	bls.n	8008484 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e086      	b.n	8008592 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008484:	4b45      	ldr	r3, [pc, #276]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f0      	bne.n	8008472 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008490:	4b42      	ldr	r3, [pc, #264]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	051b      	lsls	r3, r3, #20
 800849e:	493f      	ldr	r1, [pc, #252]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	628b      	str	r3, [r1, #40]	; 0x28
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	025b      	lsls	r3, r3, #9
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	3b01      	subs	r3, #1
 80084c0:	041b      	lsls	r3, r3, #16
 80084c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	061b      	lsls	r3, r3, #24
 80084d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084d4:	4931      	ldr	r1, [pc, #196]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084da:	4b30      	ldr	r3, [pc, #192]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	492d      	ldr	r1, [pc, #180]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084ec:	4b2b      	ldr	r3, [pc, #172]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	4928      	ldr	r1, [pc, #160]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084fe:	4b27      	ldr	r3, [pc, #156]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	4a26      	ldr	r2, [pc, #152]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800850a:	4b24      	ldr	r3, [pc, #144]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 800850c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800850e:	4b24      	ldr	r3, [pc, #144]	; (80085a0 <RCCEx_PLL3_Config+0x160>)
 8008510:	4013      	ands	r3, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	69d2      	ldr	r2, [r2, #28]
 8008516:	00d2      	lsls	r2, r2, #3
 8008518:	4920      	ldr	r1, [pc, #128]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 800851a:	4313      	orrs	r3, r2
 800851c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800851e:	4b1f      	ldr	r3, [pc, #124]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	4a1e      	ldr	r2, [pc, #120]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008528:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d106      	bne.n	800853e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008530:	4b1a      	ldr	r3, [pc, #104]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	4a19      	ldr	r2, [pc, #100]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008536:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800853a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800853c:	e00f      	b.n	800855e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d106      	bne.n	8008552 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008544:	4b15      	ldr	r3, [pc, #84]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	4a14      	ldr	r2, [pc, #80]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 800854a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800854e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008550:	e005      	b.n	800855e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008552:	4b12      	ldr	r3, [pc, #72]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	4a11      	ldr	r2, [pc, #68]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800855c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a0e      	ldr	r2, [pc, #56]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800856a:	f7fc fbe1 	bl	8004d30 <HAL_GetTick>
 800856e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008570:	e008      	b.n	8008584 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008572:	f7fc fbdd 	bl	8004d30 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e006      	b.n	8008592 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <RCCEx_PLL3_Config+0x15c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0f0      	beq.n	8008572 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008590:	7bfb      	ldrb	r3, [r7, #15]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	58024400 	.word	0x58024400
 80085a0:	ffff0007 	.word	0xffff0007

080085a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e049      	b.n	800864a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d106      	bne.n	80085d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7fb f91e 	bl	800380c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f001 f982 	bl	80098ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d001      	beq.n	800866c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e04c      	b.n	8008706 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a26      	ldr	r2, [pc, #152]	; (8008714 <HAL_TIM_Base_Start+0xc0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d022      	beq.n	80086c4 <HAL_TIM_Base_Start+0x70>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008686:	d01d      	beq.n	80086c4 <HAL_TIM_Base_Start+0x70>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a22      	ldr	r2, [pc, #136]	; (8008718 <HAL_TIM_Base_Start+0xc4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d018      	beq.n	80086c4 <HAL_TIM_Base_Start+0x70>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a21      	ldr	r2, [pc, #132]	; (800871c <HAL_TIM_Base_Start+0xc8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d013      	beq.n	80086c4 <HAL_TIM_Base_Start+0x70>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1f      	ldr	r2, [pc, #124]	; (8008720 <HAL_TIM_Base_Start+0xcc>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00e      	beq.n	80086c4 <HAL_TIM_Base_Start+0x70>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a1e      	ldr	r2, [pc, #120]	; (8008724 <HAL_TIM_Base_Start+0xd0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d009      	beq.n	80086c4 <HAL_TIM_Base_Start+0x70>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a1c      	ldr	r2, [pc, #112]	; (8008728 <HAL_TIM_Base_Start+0xd4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d004      	beq.n	80086c4 <HAL_TIM_Base_Start+0x70>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a1b      	ldr	r2, [pc, #108]	; (800872c <HAL_TIM_Base_Start+0xd8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d115      	bne.n	80086f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	4b19      	ldr	r3, [pc, #100]	; (8008730 <HAL_TIM_Base_Start+0xdc>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b06      	cmp	r3, #6
 80086d4:	d015      	beq.n	8008702 <HAL_TIM_Base_Start+0xae>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d011      	beq.n	8008702 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0201 	orr.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ee:	e008      	b.n	8008702 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f042 0201 	orr.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	e000      	b.n	8008704 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40010000 	.word	0x40010000
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40010400 	.word	0x40010400
 8008728:	40001800 	.word	0x40001800
 800872c:	40014000 	.word	0x40014000
 8008730:	00010007 	.word	0x00010007

08008734 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	f241 1311 	movw	r3, #4369	; 0x1111
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10f      	bne.n	800876c <HAL_TIM_Base_Stop+0x38>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6a1a      	ldr	r2, [r3, #32]
 8008752:	f240 4344 	movw	r3, #1092	; 0x444
 8008756:	4013      	ands	r3, r2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d107      	bne.n	800876c <HAL_TIM_Base_Stop+0x38>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0201 	bic.w	r2, r2, #1
 800876a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	d001      	beq.n	800879c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e054      	b.n	8008846 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a26      	ldr	r2, [pc, #152]	; (8008854 <HAL_TIM_Base_Start_IT+0xd0>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d022      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c6:	d01d      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a22      	ldr	r2, [pc, #136]	; (8008858 <HAL_TIM_Base_Start_IT+0xd4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d018      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a21      	ldr	r2, [pc, #132]	; (800885c <HAL_TIM_Base_Start_IT+0xd8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d013      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1f      	ldr	r2, [pc, #124]	; (8008860 <HAL_TIM_Base_Start_IT+0xdc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00e      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <HAL_TIM_Base_Start_IT+0xe0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d009      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1c      	ldr	r2, [pc, #112]	; (8008868 <HAL_TIM_Base_Start_IT+0xe4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d004      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a1b      	ldr	r2, [pc, #108]	; (800886c <HAL_TIM_Base_Start_IT+0xe8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d115      	bne.n	8008830 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	4b19      	ldr	r3, [pc, #100]	; (8008870 <HAL_TIM_Base_Start_IT+0xec>)
 800880c:	4013      	ands	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b06      	cmp	r3, #6
 8008814:	d015      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0xbe>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881c:	d011      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0201 	orr.w	r2, r2, #1
 800882c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882e:	e008      	b.n	8008842 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e000      	b.n	8008844 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40010400 	.word	0x40010400
 8008868:	40001800 	.word	0x40001800
 800886c:	40014000 	.word	0x40014000
 8008870:	00010007 	.word	0x00010007

08008874 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0201 	bic.w	r2, r2, #1
 800888a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6a1a      	ldr	r2, [r3, #32]
 8008892:	f241 1311 	movw	r3, #4369	; 0x1111
 8008896:	4013      	ands	r3, r2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10f      	bne.n	80088bc <HAL_TIM_Base_Stop_IT+0x48>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a1a      	ldr	r2, [r3, #32]
 80088a2:	f240 4344 	movw	r3, #1092	; 0x444
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d107      	bne.n	80088bc <HAL_TIM_Base_Stop_IT+0x48>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0201 	bic.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e049      	b.n	8008978 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f841 	bl	8008980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f000 ffeb 	bl	80098ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <HAL_TIM_PWM_Start+0x24>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	bf14      	ite	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	2300      	moveq	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	e03c      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d109      	bne.n	80089d2 <HAL_TIM_PWM_Start+0x3e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	bf14      	ite	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	2300      	moveq	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	e02f      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d109      	bne.n	80089ec <HAL_TIM_PWM_Start+0x58>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e022      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b0c      	cmp	r3, #12
 80089f0:	d109      	bne.n	8008a06 <HAL_TIM_PWM_Start+0x72>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	bf14      	ite	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	2300      	moveq	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	e015      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d109      	bne.n	8008a20 <HAL_TIM_PWM_Start+0x8c>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf14      	ite	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	e008      	b.n	8008a32 <HAL_TIM_PWM_Start+0x9e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	bf14      	ite	ne
 8008a2c:	2301      	movne	r3, #1
 8008a2e:	2300      	moveq	r3, #0
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e0a1      	b.n	8008b7e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <HAL_TIM_PWM_Start+0xb6>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a48:	e023      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d104      	bne.n	8008a5a <HAL_TIM_PWM_Start+0xc6>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a58:	e01b      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d104      	bne.n	8008a6a <HAL_TIM_PWM_Start+0xd6>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a68:	e013      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b0c      	cmp	r3, #12
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_PWM_Start+0xe6>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a78:	e00b      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_PWM_Start+0xf6>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a88:	e003      	b.n	8008a92 <HAL_TIM_PWM_Start+0xfe>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2201      	movs	r2, #1
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fc5e 	bl	800a35c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a38      	ldr	r2, [pc, #224]	; (8008b88 <HAL_TIM_PWM_Start+0x1f4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d013      	beq.n	8008ad2 <HAL_TIM_PWM_Start+0x13e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a37      	ldr	r2, [pc, #220]	; (8008b8c <HAL_TIM_PWM_Start+0x1f8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00e      	beq.n	8008ad2 <HAL_TIM_PWM_Start+0x13e>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a35      	ldr	r2, [pc, #212]	; (8008b90 <HAL_TIM_PWM_Start+0x1fc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d009      	beq.n	8008ad2 <HAL_TIM_PWM_Start+0x13e>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a34      	ldr	r2, [pc, #208]	; (8008b94 <HAL_TIM_PWM_Start+0x200>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d004      	beq.n	8008ad2 <HAL_TIM_PWM_Start+0x13e>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a32      	ldr	r2, [pc, #200]	; (8008b98 <HAL_TIM_PWM_Start+0x204>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d101      	bne.n	8008ad6 <HAL_TIM_PWM_Start+0x142>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e000      	b.n	8008ad8 <HAL_TIM_PWM_Start+0x144>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008aea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a25      	ldr	r2, [pc, #148]	; (8008b88 <HAL_TIM_PWM_Start+0x1f4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d022      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afe:	d01d      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a25      	ldr	r2, [pc, #148]	; (8008b9c <HAL_TIM_PWM_Start+0x208>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d018      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a24      	ldr	r2, [pc, #144]	; (8008ba0 <HAL_TIM_PWM_Start+0x20c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d013      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a22      	ldr	r2, [pc, #136]	; (8008ba4 <HAL_TIM_PWM_Start+0x210>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d00e      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a1a      	ldr	r2, [pc, #104]	; (8008b8c <HAL_TIM_PWM_Start+0x1f8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d009      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a1e      	ldr	r2, [pc, #120]	; (8008ba8 <HAL_TIM_PWM_Start+0x214>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d004      	beq.n	8008b3c <HAL_TIM_PWM_Start+0x1a8>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <HAL_TIM_PWM_Start+0x1fc>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d115      	bne.n	8008b68 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <HAL_TIM_PWM_Start+0x218>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b06      	cmp	r3, #6
 8008b4c:	d015      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x1e6>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b54:	d011      	beq.n	8008b7a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f042 0201 	orr.w	r2, r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b66:	e008      	b.n	8008b7a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e000      	b.n	8008b7c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40010000 	.word	0x40010000
 8008b8c:	40010400 	.word	0x40010400
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40014400 	.word	0x40014400
 8008b98:	40014800 	.word	0x40014800
 8008b9c:	40000400 	.word	0x40000400
 8008ba0:	40000800 	.word	0x40000800
 8008ba4:	40000c00 	.word	0x40000c00
 8008ba8:	40001800 	.word	0x40001800
 8008bac:	00010007 	.word	0x00010007

08008bb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 fbca 	bl	800a35c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a3e      	ldr	r2, [pc, #248]	; (8008cc8 <HAL_TIM_PWM_Stop+0x118>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <HAL_TIM_PWM_Stop+0x4a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a3d      	ldr	r2, [pc, #244]	; (8008ccc <HAL_TIM_PWM_Stop+0x11c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00e      	beq.n	8008bfa <HAL_TIM_PWM_Stop+0x4a>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a3b      	ldr	r2, [pc, #236]	; (8008cd0 <HAL_TIM_PWM_Stop+0x120>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d009      	beq.n	8008bfa <HAL_TIM_PWM_Stop+0x4a>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a3a      	ldr	r2, [pc, #232]	; (8008cd4 <HAL_TIM_PWM_Stop+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d004      	beq.n	8008bfa <HAL_TIM_PWM_Stop+0x4a>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a38      	ldr	r2, [pc, #224]	; (8008cd8 <HAL_TIM_PWM_Stop+0x128>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d101      	bne.n	8008bfe <HAL_TIM_PWM_Stop+0x4e>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <HAL_TIM_PWM_Stop+0x50>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d017      	beq.n	8008c34 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6a1a      	ldr	r2, [r3, #32]
 8008c0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10f      	bne.n	8008c34 <HAL_TIM_PWM_Stop+0x84>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6a1a      	ldr	r2, [r3, #32]
 8008c1a:	f240 4344 	movw	r3, #1092	; 0x444
 8008c1e:	4013      	ands	r3, r2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d107      	bne.n	8008c34 <HAL_TIM_PWM_Stop+0x84>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6a1a      	ldr	r2, [r3, #32]
 8008c3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c3e:	4013      	ands	r3, r2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10f      	bne.n	8008c64 <HAL_TIM_PWM_Stop+0xb4>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6a1a      	ldr	r2, [r3, #32]
 8008c4a:	f240 4344 	movw	r3, #1092	; 0x444
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d107      	bne.n	8008c64 <HAL_TIM_PWM_Stop+0xb4>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0201 	bic.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <HAL_TIM_PWM_Stop+0xc4>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c72:	e023      	b.n	8008cbc <HAL_TIM_PWM_Stop+0x10c>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d104      	bne.n	8008c84 <HAL_TIM_PWM_Stop+0xd4>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c82:	e01b      	b.n	8008cbc <HAL_TIM_PWM_Stop+0x10c>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d104      	bne.n	8008c94 <HAL_TIM_PWM_Stop+0xe4>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c92:	e013      	b.n	8008cbc <HAL_TIM_PWM_Stop+0x10c>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b0c      	cmp	r3, #12
 8008c98:	d104      	bne.n	8008ca4 <HAL_TIM_PWM_Stop+0xf4>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ca2:	e00b      	b.n	8008cbc <HAL_TIM_PWM_Stop+0x10c>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b10      	cmp	r3, #16
 8008ca8:	d104      	bne.n	8008cb4 <HAL_TIM_PWM_Stop+0x104>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cb2:	e003      	b.n	8008cbc <HAL_TIM_PWM_Stop+0x10c>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	40010000 	.word	0x40010000
 8008ccc:	40010400 	.word	0x40010400
 8008cd0:	40014000 	.word	0x40014000
 8008cd4:	40014400 	.word	0x40014400
 8008cd8:	40014800 	.word	0x40014800

08008cdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e049      	b.n	8008d82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f841 	bl	8008d8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 fde6 	bl	80098ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 fad3 	bl	800a35c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6a1a      	ldr	r2, [r3, #32]
 8008dbc:	f241 1311 	movw	r3, #4369	; 0x1111
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10f      	bne.n	8008de6 <HAL_TIM_IC_Stop+0x48>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6a1a      	ldr	r2, [r3, #32]
 8008dcc:	f240 4344 	movw	r3, #1092	; 0x444
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d107      	bne.n	8008de6 <HAL_TIM_IC_Stop+0x48>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0201 	bic.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d104      	bne.n	8008df6 <HAL_TIM_IC_Stop+0x58>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008df4:	e023      	b.n	8008e3e <HAL_TIM_IC_Stop+0xa0>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d104      	bne.n	8008e06 <HAL_TIM_IC_Stop+0x68>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e04:	e01b      	b.n	8008e3e <HAL_TIM_IC_Stop+0xa0>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d104      	bne.n	8008e16 <HAL_TIM_IC_Stop+0x78>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e14:	e013      	b.n	8008e3e <HAL_TIM_IC_Stop+0xa0>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b0c      	cmp	r3, #12
 8008e1a:	d104      	bne.n	8008e26 <HAL_TIM_IC_Stop+0x88>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e24:	e00b      	b.n	8008e3e <HAL_TIM_IC_Stop+0xa0>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d104      	bne.n	8008e36 <HAL_TIM_IC_Stop+0x98>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e34:	e003      	b.n	8008e3e <HAL_TIM_IC_Stop+0xa0>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <HAL_TIM_IC_Stop+0xb0>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4c:	e013      	b.n	8008e76 <HAL_TIM_IC_Stop+0xd8>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d104      	bne.n	8008e5e <HAL_TIM_IC_Stop+0xc0>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e5c:	e00b      	b.n	8008e76 <HAL_TIM_IC_Stop+0xd8>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d104      	bne.n	8008e6e <HAL_TIM_IC_Stop+0xd0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e6c:	e003      	b.n	8008e76 <HAL_TIM_IC_Stop+0xd8>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <HAL_TIM_IC_Start_IT+0x1e>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	e023      	b.n	8008ee6 <HAL_TIM_IC_Start_IT+0x66>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d104      	bne.n	8008eae <HAL_TIM_IC_Start_IT+0x2e>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	e01b      	b.n	8008ee6 <HAL_TIM_IC_Start_IT+0x66>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d104      	bne.n	8008ebe <HAL_TIM_IC_Start_IT+0x3e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	e013      	b.n	8008ee6 <HAL_TIM_IC_Start_IT+0x66>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b0c      	cmp	r3, #12
 8008ec2:	d104      	bne.n	8008ece <HAL_TIM_IC_Start_IT+0x4e>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	e00b      	b.n	8008ee6 <HAL_TIM_IC_Start_IT+0x66>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b10      	cmp	r3, #16
 8008ed2:	d104      	bne.n	8008ede <HAL_TIM_IC_Start_IT+0x5e>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	e003      	b.n	8008ee6 <HAL_TIM_IC_Start_IT+0x66>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d104      	bne.n	8008ef8 <HAL_TIM_IC_Start_IT+0x78>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	e013      	b.n	8008f20 <HAL_TIM_IC_Start_IT+0xa0>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d104      	bne.n	8008f08 <HAL_TIM_IC_Start_IT+0x88>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	e00b      	b.n	8008f20 <HAL_TIM_IC_Start_IT+0xa0>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b08      	cmp	r3, #8
 8008f0c:	d104      	bne.n	8008f18 <HAL_TIM_IC_Start_IT+0x98>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	e003      	b.n	8008f20 <HAL_TIM_IC_Start_IT+0xa0>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d102      	bne.n	8008f2e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f28:	7b7b      	ldrb	r3, [r7, #13]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d001      	beq.n	8008f32 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e0e2      	b.n	80090f8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d104      	bne.n	8008f42 <HAL_TIM_IC_Start_IT+0xc2>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f40:	e023      	b.n	8008f8a <HAL_TIM_IC_Start_IT+0x10a>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d104      	bne.n	8008f52 <HAL_TIM_IC_Start_IT+0xd2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f50:	e01b      	b.n	8008f8a <HAL_TIM_IC_Start_IT+0x10a>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d104      	bne.n	8008f62 <HAL_TIM_IC_Start_IT+0xe2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f60:	e013      	b.n	8008f8a <HAL_TIM_IC_Start_IT+0x10a>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b0c      	cmp	r3, #12
 8008f66:	d104      	bne.n	8008f72 <HAL_TIM_IC_Start_IT+0xf2>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f70:	e00b      	b.n	8008f8a <HAL_TIM_IC_Start_IT+0x10a>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b10      	cmp	r3, #16
 8008f76:	d104      	bne.n	8008f82 <HAL_TIM_IC_Start_IT+0x102>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f80:	e003      	b.n	8008f8a <HAL_TIM_IC_Start_IT+0x10a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d104      	bne.n	8008f9a <HAL_TIM_IC_Start_IT+0x11a>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f98:	e013      	b.n	8008fc2 <HAL_TIM_IC_Start_IT+0x142>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d104      	bne.n	8008faa <HAL_TIM_IC_Start_IT+0x12a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fa8:	e00b      	b.n	8008fc2 <HAL_TIM_IC_Start_IT+0x142>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d104      	bne.n	8008fba <HAL_TIM_IC_Start_IT+0x13a>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fb8:	e003      	b.n	8008fc2 <HAL_TIM_IC_Start_IT+0x142>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b0c      	cmp	r3, #12
 8008fc6:	d841      	bhi.n	800904c <HAL_TIM_IC_Start_IT+0x1cc>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <HAL_TIM_IC_Start_IT+0x150>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08009005 	.word	0x08009005
 8008fd4:	0800904d 	.word	0x0800904d
 8008fd8:	0800904d 	.word	0x0800904d
 8008fdc:	0800904d 	.word	0x0800904d
 8008fe0:	08009017 	.word	0x08009017
 8008fe4:	0800904d 	.word	0x0800904d
 8008fe8:	0800904d 	.word	0x0800904d
 8008fec:	0800904d 	.word	0x0800904d
 8008ff0:	08009029 	.word	0x08009029
 8008ff4:	0800904d 	.word	0x0800904d
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	0800904d 	.word	0x0800904d
 8009000:	0800903b 	.word	0x0800903b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0202 	orr.w	r2, r2, #2
 8009012:	60da      	str	r2, [r3, #12]
      break;
 8009014:	e01d      	b.n	8009052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0204 	orr.w	r2, r2, #4
 8009024:	60da      	str	r2, [r3, #12]
      break;
 8009026:	e014      	b.n	8009052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0208 	orr.w	r2, r2, #8
 8009036:	60da      	str	r2, [r3, #12]
      break;
 8009038:	e00b      	b.n	8009052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0210 	orr.w	r2, r2, #16
 8009048:	60da      	str	r2, [r3, #12]
      break;
 800904a:	e002      	b.n	8009052 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
      break;
 8009050:	bf00      	nop
  }

  if (status == HAL_OK)
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d14e      	bne.n	80090f6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2201      	movs	r2, #1
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f001 f97b 	bl	800a35c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a25      	ldr	r2, [pc, #148]	; (8009100 <HAL_TIM_IC_Start_IT+0x280>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d022      	beq.n	80090b6 <HAL_TIM_IC_Start_IT+0x236>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009078:	d01d      	beq.n	80090b6 <HAL_TIM_IC_Start_IT+0x236>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a21      	ldr	r2, [pc, #132]	; (8009104 <HAL_TIM_IC_Start_IT+0x284>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d018      	beq.n	80090b6 <HAL_TIM_IC_Start_IT+0x236>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1f      	ldr	r2, [pc, #124]	; (8009108 <HAL_TIM_IC_Start_IT+0x288>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d013      	beq.n	80090b6 <HAL_TIM_IC_Start_IT+0x236>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a1e      	ldr	r2, [pc, #120]	; (800910c <HAL_TIM_IC_Start_IT+0x28c>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d00e      	beq.n	80090b6 <HAL_TIM_IC_Start_IT+0x236>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a1c      	ldr	r2, [pc, #112]	; (8009110 <HAL_TIM_IC_Start_IT+0x290>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d009      	beq.n	80090b6 <HAL_TIM_IC_Start_IT+0x236>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a1b      	ldr	r2, [pc, #108]	; (8009114 <HAL_TIM_IC_Start_IT+0x294>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d004      	beq.n	80090b6 <HAL_TIM_IC_Start_IT+0x236>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a19      	ldr	r2, [pc, #100]	; (8009118 <HAL_TIM_IC_Start_IT+0x298>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d115      	bne.n	80090e2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	4b17      	ldr	r3, [pc, #92]	; (800911c <HAL_TIM_IC_Start_IT+0x29c>)
 80090be:	4013      	ands	r3, r2
 80090c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2b06      	cmp	r3, #6
 80090c6:	d015      	beq.n	80090f4 <HAL_TIM_IC_Start_IT+0x274>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ce:	d011      	beq.n	80090f4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0201 	orr.w	r2, r2, #1
 80090de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e0:	e008      	b.n	80090f4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	e000      	b.n	80090f6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	40010000 	.word	0x40010000
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40000c00 	.word	0x40000c00
 8009110:	40010400 	.word	0x40010400
 8009114:	40001800 	.word	0x40001800
 8009118:	40014000 	.word	0x40014000
 800911c:	00010007 	.word	0x00010007

08009120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b02      	cmp	r3, #2
 8009134:	d122      	bne.n	800917c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b02      	cmp	r3, #2
 8009142:	d11b      	bne.n	800917c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f06f 0202 	mvn.w	r2, #2
 800914c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7f9 fd0c 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8009168:	e005      	b.n	8009176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fba0 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fba7 	bl	80098c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	2b04      	cmp	r3, #4
 8009188:	d122      	bne.n	80091d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b04      	cmp	r3, #4
 8009196:	d11b      	bne.n	80091d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0204 	mvn.w	r2, #4
 80091a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2202      	movs	r2, #2
 80091a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7f9 fce2 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 80091bc:	e005      	b.n	80091ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fb76 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fb7d 	bl	80098c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0308 	and.w	r3, r3, #8
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d122      	bne.n	8009224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f003 0308 	and.w	r3, r3, #8
 80091e8:	2b08      	cmp	r3, #8
 80091ea:	d11b      	bne.n	8009224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f06f 0208 	mvn.w	r2, #8
 80091f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2204      	movs	r2, #4
 80091fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7f9 fcb8 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8009210:	e005      	b.n	800921e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fb4c 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fb53 	bl	80098c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b10      	cmp	r3, #16
 8009230:	d122      	bne.n	8009278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b10      	cmp	r3, #16
 800923e:	d11b      	bne.n	8009278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f06f 0210 	mvn.w	r2, #16
 8009248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2208      	movs	r2, #8
 800924e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7f9 fc8e 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8009264:	e005      	b.n	8009272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fb22 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fb29 	bl	80098c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b01      	cmp	r3, #1
 8009284:	d10e      	bne.n	80092a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b01      	cmp	r3, #1
 8009292:	d107      	bne.n	80092a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f06f 0201 	mvn.w	r2, #1
 800929c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7f9 fcc6 	bl	8002c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ae:	2b80      	cmp	r3, #128	; 0x80
 80092b0:	d10e      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092bc:	2b80      	cmp	r3, #128	; 0x80
 80092be:	d107      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 f904 	bl	800a4d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092de:	d10e      	bne.n	80092fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ea:	2b80      	cmp	r3, #128	; 0x80
 80092ec:	d107      	bne.n	80092fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 f8f7 	bl	800a4ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b40      	cmp	r3, #64	; 0x40
 800930a:	d10e      	bne.n	800932a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009316:	2b40      	cmp	r3, #64	; 0x40
 8009318:	d107      	bne.n	800932a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fad7 	bl	80098d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b20      	cmp	r3, #32
 8009336:	d10e      	bne.n	8009356 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b20      	cmp	r3, #32
 8009344:	d107      	bne.n	8009356 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f06f 0220 	mvn.w	r2, #32
 800934e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f8b7 	bl	800a4c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b086      	sub	sp, #24
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009374:	2b01      	cmp	r3, #1
 8009376:	d101      	bne.n	800937c <HAL_TIM_IC_ConfigChannel+0x1e>
 8009378:	2302      	movs	r3, #2
 800937a:	e088      	b.n	800948e <HAL_TIM_IC_ConfigChannel+0x130>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11b      	bne.n	80093c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6818      	ldr	r0, [r3, #0]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6819      	ldr	r1, [r3, #0]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	f000 fe17 	bl	8009fcc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699a      	ldr	r2, [r3, #24]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f022 020c 	bic.w	r2, r2, #12
 80093ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6999      	ldr	r1, [r3, #24]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	619a      	str	r2, [r3, #24]
 80093c0:	e060      	b.n	8009484 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d11c      	bne.n	8009402 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	6819      	ldr	r1, [r3, #0]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f000 fe9b 	bl	800a112 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80093ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6999      	ldr	r1, [r3, #24]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	021a      	lsls	r2, r3, #8
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	619a      	str	r2, [r3, #24]
 8009400:	e040      	b.n	8009484 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b08      	cmp	r3, #8
 8009406:	d11b      	bne.n	8009440 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	6819      	ldr	r1, [r3, #0]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f000 fee8 	bl	800a1ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	69da      	ldr	r2, [r3, #28]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 020c 	bic.w	r2, r2, #12
 800942a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69d9      	ldr	r1, [r3, #28]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	61da      	str	r2, [r3, #28]
 800943e:	e021      	b.n	8009484 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b0c      	cmp	r3, #12
 8009444:	d11c      	bne.n	8009480 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	6819      	ldr	r1, [r3, #0]
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f000 ff05 	bl	800a264 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009468:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69d9      	ldr	r1, [r3, #28]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	021a      	lsls	r2, r3, #8
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	61da      	str	r2, [r3, #28]
 800947e:	e001      	b.n	8009484 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e0ff      	b.n	80096b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b14      	cmp	r3, #20
 80094c2:	f200 80f0 	bhi.w	80096a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094c6:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	08009521 	.word	0x08009521
 80094d0:	080096a7 	.word	0x080096a7
 80094d4:	080096a7 	.word	0x080096a7
 80094d8:	080096a7 	.word	0x080096a7
 80094dc:	08009561 	.word	0x08009561
 80094e0:	080096a7 	.word	0x080096a7
 80094e4:	080096a7 	.word	0x080096a7
 80094e8:	080096a7 	.word	0x080096a7
 80094ec:	080095a3 	.word	0x080095a3
 80094f0:	080096a7 	.word	0x080096a7
 80094f4:	080096a7 	.word	0x080096a7
 80094f8:	080096a7 	.word	0x080096a7
 80094fc:	080095e3 	.word	0x080095e3
 8009500:	080096a7 	.word	0x080096a7
 8009504:	080096a7 	.word	0x080096a7
 8009508:	080096a7 	.word	0x080096a7
 800950c:	08009625 	.word	0x08009625
 8009510:	080096a7 	.word	0x080096a7
 8009514:	080096a7 	.word	0x080096a7
 8009518:	080096a7 	.word	0x080096a7
 800951c:	08009665 	.word	0x08009665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68b9      	ldr	r1, [r7, #8]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fa7a 	bl	8009a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0208 	orr.w	r2, r2, #8
 800953a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	699a      	ldr	r2, [r3, #24]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0204 	bic.w	r2, r2, #4
 800954a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6999      	ldr	r1, [r3, #24]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	691a      	ldr	r2, [r3, #16]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	619a      	str	r2, [r3, #24]
      break;
 800955e:	e0a5      	b.n	80096ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	4618      	mov	r0, r3
 8009568:	f000 faea 	bl	8009b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800957a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	699a      	ldr	r2, [r3, #24]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800958a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6999      	ldr	r1, [r3, #24]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	021a      	lsls	r2, r3, #8
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	619a      	str	r2, [r3, #24]
      break;
 80095a0:	e084      	b.n	80096ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fb53 	bl	8009c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0208 	orr.w	r2, r2, #8
 80095bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69da      	ldr	r2, [r3, #28]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0204 	bic.w	r2, r2, #4
 80095cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69d9      	ldr	r1, [r3, #28]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	61da      	str	r2, [r3, #28]
      break;
 80095e0:	e064      	b.n	80096ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fbbb 	bl	8009d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69da      	ldr	r2, [r3, #28]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800960c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69d9      	ldr	r1, [r3, #28]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	021a      	lsls	r2, r3, #8
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	61da      	str	r2, [r3, #28]
      break;
 8009622:	e043      	b.n	80096ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68b9      	ldr	r1, [r7, #8]
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fc04 	bl	8009e38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0208 	orr.w	r2, r2, #8
 800963e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0204 	bic.w	r2, r2, #4
 800964e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009662:	e023      	b.n	80096ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68b9      	ldr	r1, [r7, #8]
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fc48 	bl	8009f00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800967e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800968e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	021a      	lsls	r2, r3, #8
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80096a4:	e002      	b.n	80096ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
      break;
 80096aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop

080096c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <HAL_TIM_ConfigClockSource+0x1c>
 80096d8:	2302      	movs	r3, #2
 80096da:	e0dc      	b.n	8009896 <HAL_TIM_ConfigClockSource+0x1d6>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	4b6a      	ldr	r3, [pc, #424]	; (80098a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a64      	ldr	r2, [pc, #400]	; (80098a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	f000 80a9 	beq.w	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 8009718:	4a62      	ldr	r2, [pc, #392]	; (80098a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	f200 80ae 	bhi.w	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 8009720:	4a61      	ldr	r2, [pc, #388]	; (80098a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009722:	4293      	cmp	r3, r2
 8009724:	f000 80a1 	beq.w	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 8009728:	4a5f      	ldr	r2, [pc, #380]	; (80098a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800972a:	4293      	cmp	r3, r2
 800972c:	f200 80a6 	bhi.w	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 8009730:	4a5e      	ldr	r2, [pc, #376]	; (80098ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8009732:	4293      	cmp	r3, r2
 8009734:	f000 8099 	beq.w	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 8009738:	4a5c      	ldr	r2, [pc, #368]	; (80098ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800973a:	4293      	cmp	r3, r2
 800973c:	f200 809e 	bhi.w	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 8009740:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009744:	f000 8091 	beq.w	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 8009748:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800974c:	f200 8096 	bhi.w	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 8009750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009754:	f000 8089 	beq.w	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 8009758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800975c:	f200 808e 	bhi.w	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 8009760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009764:	d03e      	beq.n	80097e4 <HAL_TIM_ConfigClockSource+0x124>
 8009766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976a:	f200 8087 	bhi.w	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 800976e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009772:	f000 8086 	beq.w	8009882 <HAL_TIM_ConfigClockSource+0x1c2>
 8009776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977a:	d87f      	bhi.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 800977c:	2b70      	cmp	r3, #112	; 0x70
 800977e:	d01a      	beq.n	80097b6 <HAL_TIM_ConfigClockSource+0xf6>
 8009780:	2b70      	cmp	r3, #112	; 0x70
 8009782:	d87b      	bhi.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 8009784:	2b60      	cmp	r3, #96	; 0x60
 8009786:	d050      	beq.n	800982a <HAL_TIM_ConfigClockSource+0x16a>
 8009788:	2b60      	cmp	r3, #96	; 0x60
 800978a:	d877      	bhi.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 800978c:	2b50      	cmp	r3, #80	; 0x50
 800978e:	d03c      	beq.n	800980a <HAL_TIM_ConfigClockSource+0x14a>
 8009790:	2b50      	cmp	r3, #80	; 0x50
 8009792:	d873      	bhi.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 8009794:	2b40      	cmp	r3, #64	; 0x40
 8009796:	d058      	beq.n	800984a <HAL_TIM_ConfigClockSource+0x18a>
 8009798:	2b40      	cmp	r3, #64	; 0x40
 800979a:	d86f      	bhi.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 800979c:	2b30      	cmp	r3, #48	; 0x30
 800979e:	d064      	beq.n	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 80097a0:	2b30      	cmp	r3, #48	; 0x30
 80097a2:	d86b      	bhi.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 80097a4:	2b20      	cmp	r3, #32
 80097a6:	d060      	beq.n	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d867      	bhi.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d05c      	beq.n	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 80097b0:	2b10      	cmp	r3, #16
 80097b2:	d05a      	beq.n	800986a <HAL_TIM_ConfigClockSource+0x1aa>
 80097b4:	e062      	b.n	800987c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	6899      	ldr	r1, [r3, #8]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f000 fda9 	bl	800a31c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	609a      	str	r2, [r3, #8]
      break;
 80097e2:	e04f      	b.n	8009884 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	6899      	ldr	r1, [r3, #8]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f000 fd92 	bl	800a31c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009806:	609a      	str	r2, [r3, #8]
      break;
 8009808:	e03c      	b.n	8009884 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6859      	ldr	r1, [r3, #4]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	461a      	mov	r2, r3
 8009818:	f000 fc4c 	bl	800a0b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2150      	movs	r1, #80	; 0x50
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fd5c 	bl	800a2e0 <TIM_ITRx_SetConfig>
      break;
 8009828:	e02c      	b.n	8009884 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	6859      	ldr	r1, [r3, #4]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	461a      	mov	r2, r3
 8009838:	f000 fca8 	bl	800a18c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2160      	movs	r1, #96	; 0x60
 8009842:	4618      	mov	r0, r3
 8009844:	f000 fd4c 	bl	800a2e0 <TIM_ITRx_SetConfig>
      break;
 8009848:	e01c      	b.n	8009884 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	6859      	ldr	r1, [r3, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	461a      	mov	r2, r3
 8009858:	f000 fc2c 	bl	800a0b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2140      	movs	r1, #64	; 0x40
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fd3c 	bl	800a2e0 <TIM_ITRx_SetConfig>
      break;
 8009868:	e00c      	b.n	8009884 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4619      	mov	r1, r3
 8009874:	4610      	mov	r0, r2
 8009876:	f000 fd33 	bl	800a2e0 <TIM_ITRx_SetConfig>
      break;
 800987a:	e003      	b.n	8009884 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
      break;
 8009880:	e000      	b.n	8009884 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	ffceff88 	.word	0xffceff88
 80098a4:	00100040 	.word	0x00100040
 80098a8:	00100030 	.word	0x00100030
 80098ac:	00100020 	.word	0x00100020

080098b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a40      	ldr	r2, [pc, #256]	; (8009a00 <TIM_Base_SetConfig+0x114>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d013      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800990a:	d00f      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a3d      	ldr	r2, [pc, #244]	; (8009a04 <TIM_Base_SetConfig+0x118>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00b      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a3c      	ldr	r2, [pc, #240]	; (8009a08 <TIM_Base_SetConfig+0x11c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d007      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a3b      	ldr	r2, [pc, #236]	; (8009a0c <TIM_Base_SetConfig+0x120>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_Base_SetConfig+0x40>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a3a      	ldr	r2, [pc, #232]	; (8009a10 <TIM_Base_SetConfig+0x124>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d108      	bne.n	800993e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a2f      	ldr	r2, [pc, #188]	; (8009a00 <TIM_Base_SetConfig+0x114>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d01f      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994c:	d01b      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a2c      	ldr	r2, [pc, #176]	; (8009a04 <TIM_Base_SetConfig+0x118>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d017      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a2b      	ldr	r2, [pc, #172]	; (8009a08 <TIM_Base_SetConfig+0x11c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d013      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a2a      	ldr	r2, [pc, #168]	; (8009a0c <TIM_Base_SetConfig+0x120>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d00f      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a29      	ldr	r2, [pc, #164]	; (8009a10 <TIM_Base_SetConfig+0x124>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d00b      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a28      	ldr	r2, [pc, #160]	; (8009a14 <TIM_Base_SetConfig+0x128>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d007      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a27      	ldr	r2, [pc, #156]	; (8009a18 <TIM_Base_SetConfig+0x12c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d003      	beq.n	8009986 <TIM_Base_SetConfig+0x9a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a26      	ldr	r2, [pc, #152]	; (8009a1c <TIM_Base_SetConfig+0x130>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d108      	bne.n	8009998 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800998c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a10      	ldr	r2, [pc, #64]	; (8009a00 <TIM_Base_SetConfig+0x114>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00f      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a12      	ldr	r2, [pc, #72]	; (8009a10 <TIM_Base_SetConfig+0x124>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00b      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a11      	ldr	r2, [pc, #68]	; (8009a14 <TIM_Base_SetConfig+0x128>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d007      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <TIM_Base_SetConfig+0x12c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d003      	beq.n	80099e4 <TIM_Base_SetConfig+0xf8>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a0f      	ldr	r2, [pc, #60]	; (8009a1c <TIM_Base_SetConfig+0x130>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d103      	bne.n	80099ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	691a      	ldr	r2, [r3, #16]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	615a      	str	r2, [r3, #20]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	40010000 	.word	0x40010000
 8009a04:	40000400 	.word	0x40000400
 8009a08:	40000800 	.word	0x40000800
 8009a0c:	40000c00 	.word	0x40000c00
 8009a10:	40010400 	.word	0x40010400
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40014400 	.word	0x40014400
 8009a1c:	40014800 	.word	0x40014800

08009a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	f023 0201 	bic.w	r2, r3, #1
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4b37      	ldr	r3, [pc, #220]	; (8009b28 <TIM_OC1_SetConfig+0x108>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 0303 	bic.w	r3, r3, #3
 8009a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f023 0302 	bic.w	r3, r3, #2
 8009a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a2d      	ldr	r2, [pc, #180]	; (8009b2c <TIM_OC1_SetConfig+0x10c>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d00f      	beq.n	8009a9c <TIM_OC1_SetConfig+0x7c>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a2c      	ldr	r2, [pc, #176]	; (8009b30 <TIM_OC1_SetConfig+0x110>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00b      	beq.n	8009a9c <TIM_OC1_SetConfig+0x7c>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a2b      	ldr	r2, [pc, #172]	; (8009b34 <TIM_OC1_SetConfig+0x114>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d007      	beq.n	8009a9c <TIM_OC1_SetConfig+0x7c>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <TIM_OC1_SetConfig+0x118>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d003      	beq.n	8009a9c <TIM_OC1_SetConfig+0x7c>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a29      	ldr	r2, [pc, #164]	; (8009b3c <TIM_OC1_SetConfig+0x11c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d10c      	bne.n	8009ab6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f023 0308 	bic.w	r3, r3, #8
 8009aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f023 0304 	bic.w	r3, r3, #4
 8009ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a1c      	ldr	r2, [pc, #112]	; (8009b2c <TIM_OC1_SetConfig+0x10c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d00f      	beq.n	8009ade <TIM_OC1_SetConfig+0xbe>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a1b      	ldr	r2, [pc, #108]	; (8009b30 <TIM_OC1_SetConfig+0x110>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d00b      	beq.n	8009ade <TIM_OC1_SetConfig+0xbe>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <TIM_OC1_SetConfig+0x114>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d007      	beq.n	8009ade <TIM_OC1_SetConfig+0xbe>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a19      	ldr	r2, [pc, #100]	; (8009b38 <TIM_OC1_SetConfig+0x118>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d003      	beq.n	8009ade <TIM_OC1_SetConfig+0xbe>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a18      	ldr	r2, [pc, #96]	; (8009b3c <TIM_OC1_SetConfig+0x11c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d111      	bne.n	8009b02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	621a      	str	r2, [r3, #32]
}
 8009b1c:	bf00      	nop
 8009b1e:	371c      	adds	r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	fffeff8f 	.word	0xfffeff8f
 8009b2c:	40010000 	.word	0x40010000
 8009b30:	40010400 	.word	0x40010400
 8009b34:	40014000 	.word	0x40014000
 8009b38:	40014400 	.word	0x40014400
 8009b3c:	40014800 	.word	0x40014800

08009b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	f023 0210 	bic.w	r2, r3, #16
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4b34      	ldr	r3, [pc, #208]	; (8009c3c <TIM_OC2_SetConfig+0xfc>)
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	021b      	lsls	r3, r3, #8
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f023 0320 	bic.w	r3, r3, #32
 8009b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a29      	ldr	r2, [pc, #164]	; (8009c40 <TIM_OC2_SetConfig+0x100>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d003      	beq.n	8009ba8 <TIM_OC2_SetConfig+0x68>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a28      	ldr	r2, [pc, #160]	; (8009c44 <TIM_OC2_SetConfig+0x104>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d10d      	bne.n	8009bc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a1e      	ldr	r2, [pc, #120]	; (8009c40 <TIM_OC2_SetConfig+0x100>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d00f      	beq.n	8009bec <TIM_OC2_SetConfig+0xac>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <TIM_OC2_SetConfig+0x104>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d00b      	beq.n	8009bec <TIM_OC2_SetConfig+0xac>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a1c      	ldr	r2, [pc, #112]	; (8009c48 <TIM_OC2_SetConfig+0x108>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d007      	beq.n	8009bec <TIM_OC2_SetConfig+0xac>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a1b      	ldr	r2, [pc, #108]	; (8009c4c <TIM_OC2_SetConfig+0x10c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d003      	beq.n	8009bec <TIM_OC2_SetConfig+0xac>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a1a      	ldr	r2, [pc, #104]	; (8009c50 <TIM_OC2_SetConfig+0x110>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d113      	bne.n	8009c14 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	621a      	str	r2, [r3, #32]
}
 8009c2e:	bf00      	nop
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	feff8fff 	.word	0xfeff8fff
 8009c40:	40010000 	.word	0x40010000
 8009c44:	40010400 	.word	0x40010400
 8009c48:	40014000 	.word	0x40014000
 8009c4c:	40014400 	.word	0x40014400
 8009c50:	40014800 	.word	0x40014800

08009c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4b33      	ldr	r3, [pc, #204]	; (8009d4c <TIM_OC3_SetConfig+0xf8>)
 8009c80:	4013      	ands	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0303 	bic.w	r3, r3, #3
 8009c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a28      	ldr	r2, [pc, #160]	; (8009d50 <TIM_OC3_SetConfig+0xfc>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d003      	beq.n	8009cba <TIM_OC3_SetConfig+0x66>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a27      	ldr	r2, [pc, #156]	; (8009d54 <TIM_OC3_SetConfig+0x100>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10d      	bne.n	8009cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a1d      	ldr	r2, [pc, #116]	; (8009d50 <TIM_OC3_SetConfig+0xfc>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00f      	beq.n	8009cfe <TIM_OC3_SetConfig+0xaa>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a1c      	ldr	r2, [pc, #112]	; (8009d54 <TIM_OC3_SetConfig+0x100>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00b      	beq.n	8009cfe <TIM_OC3_SetConfig+0xaa>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a1b      	ldr	r2, [pc, #108]	; (8009d58 <TIM_OC3_SetConfig+0x104>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d007      	beq.n	8009cfe <TIM_OC3_SetConfig+0xaa>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <TIM_OC3_SetConfig+0x108>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d003      	beq.n	8009cfe <TIM_OC3_SetConfig+0xaa>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a19      	ldr	r2, [pc, #100]	; (8009d60 <TIM_OC3_SetConfig+0x10c>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d113      	bne.n	8009d26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	621a      	str	r2, [r3, #32]
}
 8009d40:	bf00      	nop
 8009d42:	371c      	adds	r7, #28
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	fffeff8f 	.word	0xfffeff8f
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40010400 	.word	0x40010400
 8009d58:	40014000 	.word	0x40014000
 8009d5c:	40014400 	.word	0x40014400
 8009d60:	40014800 	.word	0x40014800

08009d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4b24      	ldr	r3, [pc, #144]	; (8009e20 <TIM_OC4_SetConfig+0xbc>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	021b      	lsls	r3, r3, #8
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	031b      	lsls	r3, r3, #12
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a19      	ldr	r2, [pc, #100]	; (8009e24 <TIM_OC4_SetConfig+0xc0>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00f      	beq.n	8009de4 <TIM_OC4_SetConfig+0x80>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a18      	ldr	r2, [pc, #96]	; (8009e28 <TIM_OC4_SetConfig+0xc4>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00b      	beq.n	8009de4 <TIM_OC4_SetConfig+0x80>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a17      	ldr	r2, [pc, #92]	; (8009e2c <TIM_OC4_SetConfig+0xc8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d007      	beq.n	8009de4 <TIM_OC4_SetConfig+0x80>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a16      	ldr	r2, [pc, #88]	; (8009e30 <TIM_OC4_SetConfig+0xcc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d003      	beq.n	8009de4 <TIM_OC4_SetConfig+0x80>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a15      	ldr	r2, [pc, #84]	; (8009e34 <TIM_OC4_SetConfig+0xd0>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d109      	bne.n	8009df8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	019b      	lsls	r3, r3, #6
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	621a      	str	r2, [r3, #32]
}
 8009e12:	bf00      	nop
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	feff8fff 	.word	0xfeff8fff
 8009e24:	40010000 	.word	0x40010000
 8009e28:	40010400 	.word	0x40010400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	40014800 	.word	0x40014800

08009e38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	4b21      	ldr	r3, [pc, #132]	; (8009ee8 <TIM_OC5_SetConfig+0xb0>)
 8009e64:	4013      	ands	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a18      	ldr	r2, [pc, #96]	; (8009eec <TIM_OC5_SetConfig+0xb4>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00f      	beq.n	8009eae <TIM_OC5_SetConfig+0x76>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a17      	ldr	r2, [pc, #92]	; (8009ef0 <TIM_OC5_SetConfig+0xb8>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00b      	beq.n	8009eae <TIM_OC5_SetConfig+0x76>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a16      	ldr	r2, [pc, #88]	; (8009ef4 <TIM_OC5_SetConfig+0xbc>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d007      	beq.n	8009eae <TIM_OC5_SetConfig+0x76>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <TIM_OC5_SetConfig+0xc0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d003      	beq.n	8009eae <TIM_OC5_SetConfig+0x76>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a14      	ldr	r2, [pc, #80]	; (8009efc <TIM_OC5_SetConfig+0xc4>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d109      	bne.n	8009ec2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	621a      	str	r2, [r3, #32]
}
 8009edc:	bf00      	nop
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	fffeff8f 	.word	0xfffeff8f
 8009eec:	40010000 	.word	0x40010000
 8009ef0:	40010400 	.word	0x40010400
 8009ef4:	40014000 	.word	0x40014000
 8009ef8:	40014400 	.word	0x40014400
 8009efc:	40014800 	.word	0x40014800

08009f00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4b22      	ldr	r3, [pc, #136]	; (8009fb4 <TIM_OC6_SetConfig+0xb4>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	051b      	lsls	r3, r3, #20
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a19      	ldr	r2, [pc, #100]	; (8009fb8 <TIM_OC6_SetConfig+0xb8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00f      	beq.n	8009f78 <TIM_OC6_SetConfig+0x78>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a18      	ldr	r2, [pc, #96]	; (8009fbc <TIM_OC6_SetConfig+0xbc>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00b      	beq.n	8009f78 <TIM_OC6_SetConfig+0x78>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a17      	ldr	r2, [pc, #92]	; (8009fc0 <TIM_OC6_SetConfig+0xc0>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d007      	beq.n	8009f78 <TIM_OC6_SetConfig+0x78>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a16      	ldr	r2, [pc, #88]	; (8009fc4 <TIM_OC6_SetConfig+0xc4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d003      	beq.n	8009f78 <TIM_OC6_SetConfig+0x78>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a15      	ldr	r2, [pc, #84]	; (8009fc8 <TIM_OC6_SetConfig+0xc8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d109      	bne.n	8009f8c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	029b      	lsls	r3, r3, #10
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	feff8fff 	.word	0xfeff8fff
 8009fb8:	40010000 	.word	0x40010000
 8009fbc:	40010400 	.word	0x40010400
 8009fc0:	40014000 	.word	0x40014000
 8009fc4:	40014400 	.word	0x40014400
 8009fc8:	40014800 	.word	0x40014800

08009fcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	f023 0201 	bic.w	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4a28      	ldr	r2, [pc, #160]	; (800a098 <TIM_TI1_SetConfig+0xcc>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d01b      	beq.n	800a032 <TIM_TI1_SetConfig+0x66>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a000:	d017      	beq.n	800a032 <TIM_TI1_SetConfig+0x66>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	4a25      	ldr	r2, [pc, #148]	; (800a09c <TIM_TI1_SetConfig+0xd0>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d013      	beq.n	800a032 <TIM_TI1_SetConfig+0x66>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4a24      	ldr	r2, [pc, #144]	; (800a0a0 <TIM_TI1_SetConfig+0xd4>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d00f      	beq.n	800a032 <TIM_TI1_SetConfig+0x66>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a23      	ldr	r2, [pc, #140]	; (800a0a4 <TIM_TI1_SetConfig+0xd8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d00b      	beq.n	800a032 <TIM_TI1_SetConfig+0x66>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <TIM_TI1_SetConfig+0xdc>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d007      	beq.n	800a032 <TIM_TI1_SetConfig+0x66>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	4a21      	ldr	r2, [pc, #132]	; (800a0ac <TIM_TI1_SetConfig+0xe0>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d003      	beq.n	800a032 <TIM_TI1_SetConfig+0x66>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4a20      	ldr	r2, [pc, #128]	; (800a0b0 <TIM_TI1_SetConfig+0xe4>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d101      	bne.n	800a036 <TIM_TI1_SetConfig+0x6a>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <TIM_TI1_SetConfig+0x6c>
 800a036:	2300      	movs	r3, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d008      	beq.n	800a04e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f023 0303 	bic.w	r3, r3, #3
 800a042:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4313      	orrs	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	e003      	b.n	800a056 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f043 0301 	orr.w	r3, r3, #1
 800a054:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a05c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	b2db      	uxtb	r3, r3
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f023 030a 	bic.w	r3, r3, #10
 800a070:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f003 030a 	and.w	r3, r3, #10
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	621a      	str	r2, [r3, #32]
}
 800a08a:	bf00      	nop
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	40010000 	.word	0x40010000
 800a09c:	40000400 	.word	0x40000400
 800a0a0:	40000800 	.word	0x40000800
 800a0a4:	40000c00 	.word	0x40000c00
 800a0a8:	40010400 	.word	0x40010400
 800a0ac:	40001800 	.word	0x40001800
 800a0b0:	40014000 	.word	0x40014000

0800a0b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6a1b      	ldr	r3, [r3, #32]
 800a0c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	f023 0201 	bic.w	r2, r3, #1
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f023 030a 	bic.w	r3, r3, #10
 800a0f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	621a      	str	r2, [r3, #32]
}
 800a106:	bf00      	nop
 800a108:	371c      	adds	r7, #28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a112:	b480      	push	{r7}
 800a114:	b087      	sub	sp, #28
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]
 800a11e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	f023 0210 	bic.w	r2, r3, #16
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	031b      	lsls	r3, r3, #12
 800a156:	b29b      	uxth	r3, r3
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a164:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	4313      	orrs	r3, r2
 800a172:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	621a      	str	r2, [r3, #32]
}
 800a180:	bf00      	nop
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	f023 0210 	bic.w	r2, r3, #16
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	031b      	lsls	r3, r3, #12
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	011b      	lsls	r3, r3, #4
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	621a      	str	r2, [r3, #32]
}
 800a1e0:	bf00      	nop
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f023 0303 	bic.w	r3, r3, #3
 800a218:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4313      	orrs	r3, r2
 800a220:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	011b      	lsls	r3, r3, #4
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a23c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	621a      	str	r2, [r3, #32]
}
 800a258:	bf00      	nop
 800a25a:	371c      	adds	r7, #28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	031b      	lsls	r3, r3, #12
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a2b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	031b      	lsls	r3, r3, #12
 800a2bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	4b09      	ldr	r3, [pc, #36]	; (800a318 <TIM_ITRx_SetConfig+0x38>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	f043 0307 	orr.w	r3, r3, #7
 800a302:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	609a      	str	r2, [r3, #8]
}
 800a30a:	bf00      	nop
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	ffcfff8f 	.word	0xffcfff8f

0800a31c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	021a      	lsls	r2, r3, #8
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	431a      	orrs	r2, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	4313      	orrs	r3, r2
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	4313      	orrs	r3, r2
 800a348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	609a      	str	r2, [r3, #8]
}
 800a350:	bf00      	nop
 800a352:	371c      	adds	r7, #28
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f003 031f 	and.w	r3, r3, #31
 800a36e:	2201      	movs	r2, #1
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a1a      	ldr	r2, [r3, #32]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	43db      	mvns	r3, r3
 800a37e:	401a      	ands	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a1a      	ldr	r2, [r3, #32]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	fa01 f303 	lsl.w	r3, r1, r3
 800a394:	431a      	orrs	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	621a      	str	r2, [r3, #32]
}
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d101      	bne.n	800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e06d      	b.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a30      	ldr	r2, [pc, #192]	; (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d004      	beq.n	800a3f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a2f      	ldr	r2, [pc, #188]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d108      	bne.n	800a406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a20      	ldr	r2, [pc, #128]	; (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d022      	beq.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a432:	d01d      	beq.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a1d      	ldr	r2, [pc, #116]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d018      	beq.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a1c      	ldr	r2, [pc, #112]	; (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d013      	beq.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a1a      	ldr	r2, [pc, #104]	; (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d00e      	beq.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a15      	ldr	r2, [pc, #84]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d009      	beq.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a16      	ldr	r2, [pc, #88]	; (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d004      	beq.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a15      	ldr	r2, [pc, #84]	; (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d10c      	bne.n	800a48a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	4313      	orrs	r3, r2
 800a480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	40010000 	.word	0x40010000
 800a4ac:	40010400 	.word	0x40010400
 800a4b0:	40000400 	.word	0x40000400
 800a4b4:	40000800 	.word	0x40000800
 800a4b8:	40000c00 	.word	0x40000c00
 800a4bc:	40001800 	.word	0x40001800
 800a4c0:	40014000 	.word	0x40014000

0800a4c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e042      	b.n	800a598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fa fa27 	bl	8004978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2224      	movs	r2, #36	; 0x24
 800a52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0201 	bic.w	r2, r2, #1
 800a540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fccc 	bl	800aee0 <UART_SetConfig>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e022      	b.n	800a598 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a556:	2b00      	cmp	r3, #0
 800a558:	d002      	beq.n	800a560 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 fa28 	bl	800b9b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a56e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a57e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0201 	orr.w	r2, r2, #1
 800a58e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 faaf 	bl	800baf4 <UART_CheckIdleState>
 800a596:	4603      	mov	r3, r0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af02      	add	r7, sp, #8
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5b6:	2b20      	cmp	r3, #32
 800a5b8:	f040 8083 	bne.w	800a6c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <HAL_UART_Transmit+0x28>
 800a5c2:	88fb      	ldrh	r3, [r7, #6]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e07b      	b.n	800a6c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d101      	bne.n	800a5da <HAL_UART_Transmit+0x3a>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e074      	b.n	800a6c4 <HAL_UART_Transmit+0x124>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2221      	movs	r2, #33	; 0x21
 800a5ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5f2:	f7fa fb9d 	bl	8004d30 <HAL_GetTick>
 800a5f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	88fa      	ldrh	r2, [r7, #6]
 800a5fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	88fa      	ldrh	r2, [r7, #6]
 800a604:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a610:	d108      	bne.n	800a624 <HAL_UART_Transmit+0x84>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d104      	bne.n	800a624 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	61bb      	str	r3, [r7, #24]
 800a622:	e003      	b.n	800a62c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a634:	e02c      	b.n	800a690 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2200      	movs	r2, #0
 800a63e:	2180      	movs	r1, #128	; 0x80
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f001 faa2 	bl	800bb8a <UART_WaitOnFlagUntilTimeout>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e039      	b.n	800a6c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10b      	bne.n	800a66e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a664:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	3302      	adds	r3, #2
 800a66a:	61bb      	str	r3, [r7, #24]
 800a66c:	e007      	b.n	800a67e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	781a      	ldrb	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	3301      	adds	r3, #1
 800a67c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a684:	b29b      	uxth	r3, r3
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a696:	b29b      	uxth	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1cc      	bne.n	800a636 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2140      	movs	r1, #64	; 0x40
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f001 fa6f 	bl	800bb8a <UART_WaitOnFlagUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e006      	b.n	800a6c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e000      	b.n	800a6c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a6c2:	2302      	movs	r3, #2
  }
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	; 0x28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	d142      	bne.n	800a76a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <HAL_UART_Receive_IT+0x24>
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e03b      	b.n	800a76c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_UART_Receive_IT+0x36>
 800a6fe:	2302      	movs	r3, #2
 800a700:	e034      	b.n	800a76c <HAL_UART_Receive_IT+0xa0>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a17      	ldr	r2, [pc, #92]	; (800a774 <HAL_UART_Receive_IT+0xa8>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d01f      	beq.n	800a75a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d018      	beq.n	800a75a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	613b      	str	r3, [r7, #16]
   return(result);
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	623b      	str	r3, [r7, #32]
 800a748:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	69f9      	ldr	r1, [r7, #28]
 800a74c:	6a3a      	ldr	r2, [r7, #32]
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	61bb      	str	r3, [r7, #24]
   return(result);
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e6      	bne.n	800a728 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a75a:	88fb      	ldrh	r3, [r7, #6]
 800a75c:	461a      	mov	r2, r3
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f001 fadb 	bl	800bd1c <UART_Start_Receive_IT>
 800a766:	4603      	mov	r3, r0
 800a768:	e000      	b.n	800a76c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a76a:	2302      	movs	r3, #2
  }
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3728      	adds	r7, #40	; 0x28
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	58000c00 	.word	0x58000c00

0800a778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b0ba      	sub	sp, #232	; 0xe8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a79e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a7a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a7ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d11b      	bne.n	800a7ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d015      	beq.n	800a7ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d009      	beq.n	800a7ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 835a 	beq.w	800ae96 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
      }
      return;
 800a7ea:	e354      	b.n	800ae96 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 811f 	beq.w	800aa34 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a7fa:	4b8b      	ldr	r3, [pc, #556]	; (800aa28 <HAL_UART_IRQHandler+0x2b0>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d106      	bne.n	800a810 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a802:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a806:	4b89      	ldr	r3, [pc, #548]	; (800aa2c <HAL_UART_IRQHandler+0x2b4>)
 800a808:	4013      	ands	r3, r2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 8112 	beq.w	800aa34 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d011      	beq.n	800a840 <HAL_UART_IRQHandler+0xc8>
 800a81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00b      	beq.n	800a840 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2201      	movs	r2, #1
 800a82e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a836:	f043 0201 	orr.w	r2, r3, #1
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d011      	beq.n	800a870 <HAL_UART_IRQHandler+0xf8>
 800a84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2202      	movs	r2, #2
 800a85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a866:	f043 0204 	orr.w	r2, r3, #4
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d011      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x128>
 800a87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00b      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2204      	movs	r2, #4
 800a88e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a896:	f043 0202 	orr.w	r2, r3, #2
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a4:	f003 0308 	and.w	r3, r3, #8
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d017      	beq.n	800a8dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b0:	f003 0320 	and.w	r3, r3, #32
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d105      	bne.n	800a8c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a8b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a8bc:	4b5a      	ldr	r3, [pc, #360]	; (800aa28 <HAL_UART_IRQHandler+0x2b0>)
 800a8be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00b      	beq.n	800a8dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8d2:	f043 0208 	orr.w	r2, r3, #8
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d012      	beq.n	800a90e <HAL_UART_IRQHandler+0x196>
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00c      	beq.n	800a90e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a904:	f043 0220 	orr.w	r2, r3, #32
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 82c0 	beq.w	800ae9a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	d013      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d105      	bne.n	800a93e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a954:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a962:	2b40      	cmp	r3, #64	; 0x40
 800a964:	d005      	beq.n	800a972 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a96a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d04f      	beq.n	800aa12 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 fafc 	bl	800bf70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a982:	2b40      	cmp	r3, #64	; 0x40
 800a984:	d141      	bne.n	800aa0a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3308      	adds	r3, #8
 800a98c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a99c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a9b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a9b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a9be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9c2:	e841 2300 	strex	r3, r2, [r1]
 800a9c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1d9      	bne.n	800a986 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d013      	beq.n	800aa02 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9de:	4a14      	ldr	r2, [pc, #80]	; (800aa30 <HAL_UART_IRQHandler+0x2b8>)
 800a9e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fa fe3e 	bl	8005668 <HAL_DMA_Abort_IT>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d017      	beq.n	800aa22 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa00:	e00f      	b.n	800aa22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa56 	bl	800aeb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa08:	e00b      	b.n	800aa22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa52 	bl	800aeb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa10:	e007      	b.n	800aa22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fa4e 	bl	800aeb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800aa20:	e23b      	b.n	800ae9a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa22:	bf00      	nop
    return;
 800aa24:	e239      	b.n	800ae9a <HAL_UART_IRQHandler+0x722>
 800aa26:	bf00      	nop
 800aa28:	10000001 	.word	0x10000001
 800aa2c:	04000120 	.word	0x04000120
 800aa30:	0800c03d 	.word	0x0800c03d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	f040 81ce 	bne.w	800adda <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa42:	f003 0310 	and.w	r3, r3, #16
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 81c7 	beq.w	800adda <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 81c0 	beq.w	800adda <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2210      	movs	r2, #16
 800aa60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6c:	2b40      	cmp	r3, #64	; 0x40
 800aa6e:	f040 813b 	bne.w	800ace8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a8b      	ldr	r2, [pc, #556]	; (800aca8 <HAL_UART_IRQHandler+0x530>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d059      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a89      	ldr	r2, [pc, #548]	; (800acac <HAL_UART_IRQHandler+0x534>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d053      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a87      	ldr	r2, [pc, #540]	; (800acb0 <HAL_UART_IRQHandler+0x538>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d04d      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a85      	ldr	r2, [pc, #532]	; (800acb4 <HAL_UART_IRQHandler+0x53c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d047      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a83      	ldr	r2, [pc, #524]	; (800acb8 <HAL_UART_IRQHandler+0x540>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d041      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a81      	ldr	r2, [pc, #516]	; (800acbc <HAL_UART_IRQHandler+0x544>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d03b      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a7f      	ldr	r2, [pc, #508]	; (800acc0 <HAL_UART_IRQHandler+0x548>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d035      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a7d      	ldr	r2, [pc, #500]	; (800acc4 <HAL_UART_IRQHandler+0x54c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d02f      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a7b      	ldr	r2, [pc, #492]	; (800acc8 <HAL_UART_IRQHandler+0x550>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d029      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a79      	ldr	r2, [pc, #484]	; (800accc <HAL_UART_IRQHandler+0x554>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d023      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a77      	ldr	r2, [pc, #476]	; (800acd0 <HAL_UART_IRQHandler+0x558>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d01d      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a75      	ldr	r2, [pc, #468]	; (800acd4 <HAL_UART_IRQHandler+0x55c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d017      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a73      	ldr	r2, [pc, #460]	; (800acd8 <HAL_UART_IRQHandler+0x560>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d011      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a71      	ldr	r2, [pc, #452]	; (800acdc <HAL_UART_IRQHandler+0x564>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d00b      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a6f      	ldr	r2, [pc, #444]	; (800ace0 <HAL_UART_IRQHandler+0x568>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d005      	beq.n	800ab32 <HAL_UART_IRQHandler+0x3ba>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a6d      	ldr	r2, [pc, #436]	; (800ace4 <HAL_UART_IRQHandler+0x56c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d105      	bne.n	800ab3e <HAL_UART_IRQHandler+0x3c6>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	e004      	b.n	800ab48 <HAL_UART_IRQHandler+0x3d0>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 81a4 	beq.w	800ae9e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab60:	429a      	cmp	r2, r3
 800ab62:	f080 819c 	bcs.w	800ae9e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7a:	f000 8086 	beq.w	800ac8a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab8a:	e853 3f00 	ldrex	r3, [r3]
 800ab8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ab92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800abb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800abc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1da      	bne.n	800ab7e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800abd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abda:	f023 0301 	bic.w	r3, r3, #1
 800abde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3308      	adds	r3, #8
 800abe8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800abec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800abf0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800abf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800abfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e1      	bne.n	800abc8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3308      	adds	r3, #8
 800ac0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3308      	adds	r3, #8
 800ac24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac28:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac30:	e841 2300 	strex	r3, r2, [r1]
 800ac34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1e3      	bne.n	800ac04 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac52:	e853 3f00 	ldrex	r3, [r3]
 800ac56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac5a:	f023 0310 	bic.w	r3, r3, #16
 800ac5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e4      	bne.n	800ac4a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fa f9d1 	bl	800502c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f912 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aca4:	e0fb      	b.n	800ae9e <HAL_UART_IRQHandler+0x726>
 800aca6:	bf00      	nop
 800aca8:	40020010 	.word	0x40020010
 800acac:	40020028 	.word	0x40020028
 800acb0:	40020040 	.word	0x40020040
 800acb4:	40020058 	.word	0x40020058
 800acb8:	40020070 	.word	0x40020070
 800acbc:	40020088 	.word	0x40020088
 800acc0:	400200a0 	.word	0x400200a0
 800acc4:	400200b8 	.word	0x400200b8
 800acc8:	40020410 	.word	0x40020410
 800accc:	40020428 	.word	0x40020428
 800acd0:	40020440 	.word	0x40020440
 800acd4:	40020458 	.word	0x40020458
 800acd8:	40020470 	.word	0x40020470
 800acdc:	40020488 	.word	0x40020488
 800ace0:	400204a0 	.word	0x400204a0
 800ace4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80cc 	beq.w	800aea2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ad0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 80c7 	beq.w	800aea2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad36:	647b      	str	r3, [r7, #68]	; 0x44
 800ad38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad3e:	e841 2300 	strex	r3, r2, [r1]
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1e4      	bne.n	800ad14 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	3308      	adds	r3, #8
 800ad50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad54:	e853 3f00 	ldrex	r3, [r3]
 800ad58:	623b      	str	r3, [r7, #32]
   return(result);
 800ad5a:	6a3a      	ldr	r2, [r7, #32]
 800ad5c:	4b54      	ldr	r3, [pc, #336]	; (800aeb0 <HAL_UART_IRQHandler+0x738>)
 800ad5e:	4013      	ands	r3, r2
 800ad60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad6e:	633a      	str	r2, [r7, #48]	; 0x30
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e3      	bne.n	800ad4a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0310 	bic.w	r3, r3, #16
 800adaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbc:	69b9      	ldr	r1, [r7, #24]
 800adbe:	69fa      	ldr	r2, [r7, #28]
 800adc0:	e841 2300 	strex	r3, r2, [r1]
 800adc4:	617b      	str	r3, [r7, #20]
   return(result);
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e4      	bne.n	800ad96 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f878 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800add8:	e063      	b.n	800aea2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800adda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00e      	beq.n	800ae04 <HAL_UART_IRQHandler+0x68c>
 800ade6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d008      	beq.n	800ae04 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800adfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fdbb 	bl	800c978 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae02:	e051      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d014      	beq.n	800ae3a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d105      	bne.n	800ae28 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d008      	beq.n	800ae3a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d03a      	beq.n	800aea6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	4798      	blx	r3
    }
    return;
 800ae38:	e035      	b.n	800aea6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d009      	beq.n	800ae5a <HAL_UART_IRQHandler+0x6e2>
 800ae46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f001 f908 	bl	800c068 <UART_EndTransmit_IT>
    return;
 800ae58:	e026      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d009      	beq.n	800ae7a <HAL_UART_IRQHandler+0x702>
 800ae66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 fd94 	bl	800c9a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae78:	e016      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d010      	beq.n	800aea8 <HAL_UART_IRQHandler+0x730>
 800ae86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da0c      	bge.n	800aea8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f001 fd7c 	bl	800c98c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae94:	e008      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
      return;
 800ae96:	bf00      	nop
 800ae98:	e006      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
    return;
 800ae9a:	bf00      	nop
 800ae9c:	e004      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
      return;
 800ae9e:	bf00      	nop
 800aea0:	e002      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
      return;
 800aea2:	bf00      	nop
 800aea4:	e000      	b.n	800aea8 <HAL_UART_IRQHandler+0x730>
    return;
 800aea6:	bf00      	nop
  }
}
 800aea8:	37e8      	adds	r7, #232	; 0xe8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	effffffe 	.word	0xeffffffe

0800aeb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aee4:	b092      	sub	sp, #72	; 0x48
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	431a      	orrs	r2, r3
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	431a      	orrs	r2, r3
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	4313      	orrs	r3, r2
 800af06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	4bbe      	ldr	r3, [pc, #760]	; (800b208 <UART_SetConfig+0x328>)
 800af10:	4013      	ands	r3, r2
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	6812      	ldr	r2, [r2, #0]
 800af16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af18:	430b      	orrs	r3, r1
 800af1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	68da      	ldr	r2, [r3, #12]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	430a      	orrs	r2, r1
 800af30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4ab3      	ldr	r2, [pc, #716]	; (800b20c <UART_SetConfig+0x32c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d004      	beq.n	800af4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af48:	4313      	orrs	r3, r2
 800af4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689a      	ldr	r2, [r3, #8]
 800af52:	4baf      	ldr	r3, [pc, #700]	; (800b210 <UART_SetConfig+0x330>)
 800af54:	4013      	ands	r3, r2
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	6812      	ldr	r2, [r2, #0]
 800af5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af5c:	430b      	orrs	r3, r1
 800af5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af66:	f023 010f 	bic.w	r1, r3, #15
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4aa6      	ldr	r2, [pc, #664]	; (800b214 <UART_SetConfig+0x334>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d177      	bne.n	800b070 <UART_SetConfig+0x190>
 800af80:	4ba5      	ldr	r3, [pc, #660]	; (800b218 <UART_SetConfig+0x338>)
 800af82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af88:	2b28      	cmp	r3, #40	; 0x28
 800af8a:	d86d      	bhi.n	800b068 <UART_SetConfig+0x188>
 800af8c:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <UART_SetConfig+0xb4>)
 800af8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af92:	bf00      	nop
 800af94:	0800b039 	.word	0x0800b039
 800af98:	0800b069 	.word	0x0800b069
 800af9c:	0800b069 	.word	0x0800b069
 800afa0:	0800b069 	.word	0x0800b069
 800afa4:	0800b069 	.word	0x0800b069
 800afa8:	0800b069 	.word	0x0800b069
 800afac:	0800b069 	.word	0x0800b069
 800afb0:	0800b069 	.word	0x0800b069
 800afb4:	0800b041 	.word	0x0800b041
 800afb8:	0800b069 	.word	0x0800b069
 800afbc:	0800b069 	.word	0x0800b069
 800afc0:	0800b069 	.word	0x0800b069
 800afc4:	0800b069 	.word	0x0800b069
 800afc8:	0800b069 	.word	0x0800b069
 800afcc:	0800b069 	.word	0x0800b069
 800afd0:	0800b069 	.word	0x0800b069
 800afd4:	0800b049 	.word	0x0800b049
 800afd8:	0800b069 	.word	0x0800b069
 800afdc:	0800b069 	.word	0x0800b069
 800afe0:	0800b069 	.word	0x0800b069
 800afe4:	0800b069 	.word	0x0800b069
 800afe8:	0800b069 	.word	0x0800b069
 800afec:	0800b069 	.word	0x0800b069
 800aff0:	0800b069 	.word	0x0800b069
 800aff4:	0800b051 	.word	0x0800b051
 800aff8:	0800b069 	.word	0x0800b069
 800affc:	0800b069 	.word	0x0800b069
 800b000:	0800b069 	.word	0x0800b069
 800b004:	0800b069 	.word	0x0800b069
 800b008:	0800b069 	.word	0x0800b069
 800b00c:	0800b069 	.word	0x0800b069
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b059 	.word	0x0800b059
 800b018:	0800b069 	.word	0x0800b069
 800b01c:	0800b069 	.word	0x0800b069
 800b020:	0800b069 	.word	0x0800b069
 800b024:	0800b069 	.word	0x0800b069
 800b028:	0800b069 	.word	0x0800b069
 800b02c:	0800b069 	.word	0x0800b069
 800b030:	0800b069 	.word	0x0800b069
 800b034:	0800b061 	.word	0x0800b061
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b03e:	e222      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b040:	2304      	movs	r3, #4
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b046:	e21e      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b048:	2308      	movs	r3, #8
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b04e:	e21a      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b050:	2310      	movs	r3, #16
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b056:	e216      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b058:	2320      	movs	r3, #32
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05e:	e212      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b060:	2340      	movs	r3, #64	; 0x40
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b066:	e20e      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b068:	2380      	movs	r3, #128	; 0x80
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06e:	e20a      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a69      	ldr	r2, [pc, #420]	; (800b21c <UART_SetConfig+0x33c>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d130      	bne.n	800b0dc <UART_SetConfig+0x1fc>
 800b07a:	4b67      	ldr	r3, [pc, #412]	; (800b218 <UART_SetConfig+0x338>)
 800b07c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	2b05      	cmp	r3, #5
 800b084:	d826      	bhi.n	800b0d4 <UART_SetConfig+0x1f4>
 800b086:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <UART_SetConfig+0x1ac>)
 800b088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08c:	0800b0a5 	.word	0x0800b0a5
 800b090:	0800b0ad 	.word	0x0800b0ad
 800b094:	0800b0b5 	.word	0x0800b0b5
 800b098:	0800b0bd 	.word	0x0800b0bd
 800b09c:	0800b0c5 	.word	0x0800b0c5
 800b0a0:	0800b0cd 	.word	0x0800b0cd
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0aa:	e1ec      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b2:	e1e8      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b0b4:	2308      	movs	r3, #8
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ba:	e1e4      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b0bc:	2310      	movs	r3, #16
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c2:	e1e0      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b0c4:	2320      	movs	r3, #32
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ca:	e1dc      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b0cc:	2340      	movs	r3, #64	; 0x40
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d2:	e1d8      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b0d4:	2380      	movs	r3, #128	; 0x80
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0da:	e1d4      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a4f      	ldr	r2, [pc, #316]	; (800b220 <UART_SetConfig+0x340>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d130      	bne.n	800b148 <UART_SetConfig+0x268>
 800b0e6:	4b4c      	ldr	r3, [pc, #304]	; (800b218 <UART_SetConfig+0x338>)
 800b0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ea:	f003 0307 	and.w	r3, r3, #7
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	d826      	bhi.n	800b140 <UART_SetConfig+0x260>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <UART_SetConfig+0x218>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b111 	.word	0x0800b111
 800b0fc:	0800b119 	.word	0x0800b119
 800b100:	0800b121 	.word	0x0800b121
 800b104:	0800b129 	.word	0x0800b129
 800b108:	0800b131 	.word	0x0800b131
 800b10c:	0800b139 	.word	0x0800b139
 800b110:	2300      	movs	r3, #0
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b116:	e1b6      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b118:	2304      	movs	r3, #4
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b11e:	e1b2      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b120:	2308      	movs	r3, #8
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b126:	e1ae      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b128:	2310      	movs	r3, #16
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12e:	e1aa      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b130:	2320      	movs	r3, #32
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b136:	e1a6      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b138:	2340      	movs	r3, #64	; 0x40
 800b13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b13e:	e1a2      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b140:	2380      	movs	r3, #128	; 0x80
 800b142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b146:	e19e      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a35      	ldr	r2, [pc, #212]	; (800b224 <UART_SetConfig+0x344>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d130      	bne.n	800b1b4 <UART_SetConfig+0x2d4>
 800b152:	4b31      	ldr	r3, [pc, #196]	; (800b218 <UART_SetConfig+0x338>)
 800b154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	2b05      	cmp	r3, #5
 800b15c:	d826      	bhi.n	800b1ac <UART_SetConfig+0x2cc>
 800b15e:	a201      	add	r2, pc, #4	; (adr r2, 800b164 <UART_SetConfig+0x284>)
 800b160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b164:	0800b17d 	.word	0x0800b17d
 800b168:	0800b185 	.word	0x0800b185
 800b16c:	0800b18d 	.word	0x0800b18d
 800b170:	0800b195 	.word	0x0800b195
 800b174:	0800b19d 	.word	0x0800b19d
 800b178:	0800b1a5 	.word	0x0800b1a5
 800b17c:	2300      	movs	r3, #0
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b182:	e180      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b184:	2304      	movs	r3, #4
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18a:	e17c      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b18c:	2308      	movs	r3, #8
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b192:	e178      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b194:	2310      	movs	r3, #16
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19a:	e174      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b19c:	2320      	movs	r3, #32
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a2:	e170      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b1a4:	2340      	movs	r3, #64	; 0x40
 800b1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1aa:	e16c      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b1ac:	2380      	movs	r3, #128	; 0x80
 800b1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1b2:	e168      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a1b      	ldr	r2, [pc, #108]	; (800b228 <UART_SetConfig+0x348>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d142      	bne.n	800b244 <UART_SetConfig+0x364>
 800b1be:	4b16      	ldr	r3, [pc, #88]	; (800b218 <UART_SetConfig+0x338>)
 800b1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b05      	cmp	r3, #5
 800b1c8:	d838      	bhi.n	800b23c <UART_SetConfig+0x35c>
 800b1ca:	a201      	add	r2, pc, #4	; (adr r2, 800b1d0 <UART_SetConfig+0x2f0>)
 800b1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d0:	0800b1e9 	.word	0x0800b1e9
 800b1d4:	0800b1f1 	.word	0x0800b1f1
 800b1d8:	0800b1f9 	.word	0x0800b1f9
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b22d 	.word	0x0800b22d
 800b1e4:	0800b235 	.word	0x0800b235
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ee:	e14a      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b1f0:	2304      	movs	r3, #4
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f6:	e146      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b1f8:	2308      	movs	r3, #8
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fe:	e142      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b200:	2310      	movs	r3, #16
 800b202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b206:	e13e      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b208:	cfff69f3 	.word	0xcfff69f3
 800b20c:	58000c00 	.word	0x58000c00
 800b210:	11fff4ff 	.word	0x11fff4ff
 800b214:	40011000 	.word	0x40011000
 800b218:	58024400 	.word	0x58024400
 800b21c:	40004400 	.word	0x40004400
 800b220:	40004800 	.word	0x40004800
 800b224:	40004c00 	.word	0x40004c00
 800b228:	40005000 	.word	0x40005000
 800b22c:	2320      	movs	r3, #32
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b232:	e128      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b234:	2340      	movs	r3, #64	; 0x40
 800b236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b23a:	e124      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b23c:	2380      	movs	r3, #128	; 0x80
 800b23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b242:	e120      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4acb      	ldr	r2, [pc, #812]	; (800b578 <UART_SetConfig+0x698>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d176      	bne.n	800b33c <UART_SetConfig+0x45c>
 800b24e:	4bcb      	ldr	r3, [pc, #812]	; (800b57c <UART_SetConfig+0x69c>)
 800b250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b256:	2b28      	cmp	r3, #40	; 0x28
 800b258:	d86c      	bhi.n	800b334 <UART_SetConfig+0x454>
 800b25a:	a201      	add	r2, pc, #4	; (adr r2, 800b260 <UART_SetConfig+0x380>)
 800b25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b260:	0800b305 	.word	0x0800b305
 800b264:	0800b335 	.word	0x0800b335
 800b268:	0800b335 	.word	0x0800b335
 800b26c:	0800b335 	.word	0x0800b335
 800b270:	0800b335 	.word	0x0800b335
 800b274:	0800b335 	.word	0x0800b335
 800b278:	0800b335 	.word	0x0800b335
 800b27c:	0800b335 	.word	0x0800b335
 800b280:	0800b30d 	.word	0x0800b30d
 800b284:	0800b335 	.word	0x0800b335
 800b288:	0800b335 	.word	0x0800b335
 800b28c:	0800b335 	.word	0x0800b335
 800b290:	0800b335 	.word	0x0800b335
 800b294:	0800b335 	.word	0x0800b335
 800b298:	0800b335 	.word	0x0800b335
 800b29c:	0800b335 	.word	0x0800b335
 800b2a0:	0800b315 	.word	0x0800b315
 800b2a4:	0800b335 	.word	0x0800b335
 800b2a8:	0800b335 	.word	0x0800b335
 800b2ac:	0800b335 	.word	0x0800b335
 800b2b0:	0800b335 	.word	0x0800b335
 800b2b4:	0800b335 	.word	0x0800b335
 800b2b8:	0800b335 	.word	0x0800b335
 800b2bc:	0800b335 	.word	0x0800b335
 800b2c0:	0800b31d 	.word	0x0800b31d
 800b2c4:	0800b335 	.word	0x0800b335
 800b2c8:	0800b335 	.word	0x0800b335
 800b2cc:	0800b335 	.word	0x0800b335
 800b2d0:	0800b335 	.word	0x0800b335
 800b2d4:	0800b335 	.word	0x0800b335
 800b2d8:	0800b335 	.word	0x0800b335
 800b2dc:	0800b335 	.word	0x0800b335
 800b2e0:	0800b325 	.word	0x0800b325
 800b2e4:	0800b335 	.word	0x0800b335
 800b2e8:	0800b335 	.word	0x0800b335
 800b2ec:	0800b335 	.word	0x0800b335
 800b2f0:	0800b335 	.word	0x0800b335
 800b2f4:	0800b335 	.word	0x0800b335
 800b2f8:	0800b335 	.word	0x0800b335
 800b2fc:	0800b335 	.word	0x0800b335
 800b300:	0800b32d 	.word	0x0800b32d
 800b304:	2301      	movs	r3, #1
 800b306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b30a:	e0bc      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b30c:	2304      	movs	r3, #4
 800b30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b312:	e0b8      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b314:	2308      	movs	r3, #8
 800b316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b31a:	e0b4      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b31c:	2310      	movs	r3, #16
 800b31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b322:	e0b0      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b324:	2320      	movs	r3, #32
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32a:	e0ac      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b32c:	2340      	movs	r3, #64	; 0x40
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b332:	e0a8      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b334:	2380      	movs	r3, #128	; 0x80
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e0a4      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a8f      	ldr	r2, [pc, #572]	; (800b580 <UART_SetConfig+0x6a0>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d130      	bne.n	800b3a8 <UART_SetConfig+0x4c8>
 800b346:	4b8d      	ldr	r3, [pc, #564]	; (800b57c <UART_SetConfig+0x69c>)
 800b348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b34a:	f003 0307 	and.w	r3, r3, #7
 800b34e:	2b05      	cmp	r3, #5
 800b350:	d826      	bhi.n	800b3a0 <UART_SetConfig+0x4c0>
 800b352:	a201      	add	r2, pc, #4	; (adr r2, 800b358 <UART_SetConfig+0x478>)
 800b354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b358:	0800b371 	.word	0x0800b371
 800b35c:	0800b379 	.word	0x0800b379
 800b360:	0800b381 	.word	0x0800b381
 800b364:	0800b389 	.word	0x0800b389
 800b368:	0800b391 	.word	0x0800b391
 800b36c:	0800b399 	.word	0x0800b399
 800b370:	2300      	movs	r3, #0
 800b372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b376:	e086      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b378:	2304      	movs	r3, #4
 800b37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37e:	e082      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b380:	2308      	movs	r3, #8
 800b382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b386:	e07e      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b388:	2310      	movs	r3, #16
 800b38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b38e:	e07a      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b390:	2320      	movs	r3, #32
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b396:	e076      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b398:	2340      	movs	r3, #64	; 0x40
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39e:	e072      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b3a0:	2380      	movs	r3, #128	; 0x80
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e06e      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a75      	ldr	r2, [pc, #468]	; (800b584 <UART_SetConfig+0x6a4>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d130      	bne.n	800b414 <UART_SetConfig+0x534>
 800b3b2:	4b72      	ldr	r3, [pc, #456]	; (800b57c <UART_SetConfig+0x69c>)
 800b3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	2b05      	cmp	r3, #5
 800b3bc:	d826      	bhi.n	800b40c <UART_SetConfig+0x52c>
 800b3be:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <UART_SetConfig+0x4e4>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b3dd 	.word	0x0800b3dd
 800b3c8:	0800b3e5 	.word	0x0800b3e5
 800b3cc:	0800b3ed 	.word	0x0800b3ed
 800b3d0:	0800b3f5 	.word	0x0800b3f5
 800b3d4:	0800b3fd 	.word	0x0800b3fd
 800b3d8:	0800b405 	.word	0x0800b405
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e2:	e050      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b3e4:	2304      	movs	r3, #4
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ea:	e04c      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b3ec:	2308      	movs	r3, #8
 800b3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f2:	e048      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b3f4:	2310      	movs	r3, #16
 800b3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fa:	e044      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b3fc:	2320      	movs	r3, #32
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b402:	e040      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b404:	2340      	movs	r3, #64	; 0x40
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40a:	e03c      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b40c:	2380      	movs	r3, #128	; 0x80
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e038      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a5b      	ldr	r2, [pc, #364]	; (800b588 <UART_SetConfig+0x6a8>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d130      	bne.n	800b480 <UART_SetConfig+0x5a0>
 800b41e:	4b57      	ldr	r3, [pc, #348]	; (800b57c <UART_SetConfig+0x69c>)
 800b420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b422:	f003 0307 	and.w	r3, r3, #7
 800b426:	2b05      	cmp	r3, #5
 800b428:	d826      	bhi.n	800b478 <UART_SetConfig+0x598>
 800b42a:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <UART_SetConfig+0x550>)
 800b42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b430:	0800b449 	.word	0x0800b449
 800b434:	0800b451 	.word	0x0800b451
 800b438:	0800b459 	.word	0x0800b459
 800b43c:	0800b461 	.word	0x0800b461
 800b440:	0800b469 	.word	0x0800b469
 800b444:	0800b471 	.word	0x0800b471
 800b448:	2302      	movs	r3, #2
 800b44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44e:	e01a      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b450:	2304      	movs	r3, #4
 800b452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b456:	e016      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b458:	2308      	movs	r3, #8
 800b45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45e:	e012      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b460:	2310      	movs	r3, #16
 800b462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b466:	e00e      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b468:	2320      	movs	r3, #32
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46e:	e00a      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b470:	2340      	movs	r3, #64	; 0x40
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b476:	e006      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b478:	2380      	movs	r3, #128	; 0x80
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47e:	e002      	b.n	800b486 <UART_SetConfig+0x5a6>
 800b480:	2380      	movs	r3, #128	; 0x80
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a3f      	ldr	r2, [pc, #252]	; (800b588 <UART_SetConfig+0x6a8>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	f040 80f8 	bne.w	800b682 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b496:	2b20      	cmp	r3, #32
 800b498:	dc46      	bgt.n	800b528 <UART_SetConfig+0x648>
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	f2c0 8082 	blt.w	800b5a4 <UART_SetConfig+0x6c4>
 800b4a0:	3b02      	subs	r3, #2
 800b4a2:	2b1e      	cmp	r3, #30
 800b4a4:	d87e      	bhi.n	800b5a4 <UART_SetConfig+0x6c4>
 800b4a6:	a201      	add	r2, pc, #4	; (adr r2, 800b4ac <UART_SetConfig+0x5cc>)
 800b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ac:	0800b52f 	.word	0x0800b52f
 800b4b0:	0800b5a5 	.word	0x0800b5a5
 800b4b4:	0800b537 	.word	0x0800b537
 800b4b8:	0800b5a5 	.word	0x0800b5a5
 800b4bc:	0800b5a5 	.word	0x0800b5a5
 800b4c0:	0800b5a5 	.word	0x0800b5a5
 800b4c4:	0800b547 	.word	0x0800b547
 800b4c8:	0800b5a5 	.word	0x0800b5a5
 800b4cc:	0800b5a5 	.word	0x0800b5a5
 800b4d0:	0800b5a5 	.word	0x0800b5a5
 800b4d4:	0800b5a5 	.word	0x0800b5a5
 800b4d8:	0800b5a5 	.word	0x0800b5a5
 800b4dc:	0800b5a5 	.word	0x0800b5a5
 800b4e0:	0800b5a5 	.word	0x0800b5a5
 800b4e4:	0800b557 	.word	0x0800b557
 800b4e8:	0800b5a5 	.word	0x0800b5a5
 800b4ec:	0800b5a5 	.word	0x0800b5a5
 800b4f0:	0800b5a5 	.word	0x0800b5a5
 800b4f4:	0800b5a5 	.word	0x0800b5a5
 800b4f8:	0800b5a5 	.word	0x0800b5a5
 800b4fc:	0800b5a5 	.word	0x0800b5a5
 800b500:	0800b5a5 	.word	0x0800b5a5
 800b504:	0800b5a5 	.word	0x0800b5a5
 800b508:	0800b5a5 	.word	0x0800b5a5
 800b50c:	0800b5a5 	.word	0x0800b5a5
 800b510:	0800b5a5 	.word	0x0800b5a5
 800b514:	0800b5a5 	.word	0x0800b5a5
 800b518:	0800b5a5 	.word	0x0800b5a5
 800b51c:	0800b5a5 	.word	0x0800b5a5
 800b520:	0800b5a5 	.word	0x0800b5a5
 800b524:	0800b597 	.word	0x0800b597
 800b528:	2b40      	cmp	r3, #64	; 0x40
 800b52a:	d037      	beq.n	800b59c <UART_SetConfig+0x6bc>
 800b52c:	e03a      	b.n	800b5a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b52e:	f7fc fc17 	bl	8007d60 <HAL_RCCEx_GetD3PCLK1Freq>
 800b532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b534:	e03c      	b.n	800b5b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fc fc26 	bl	8007d8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b544:	e034      	b.n	800b5b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b546:	f107 0318 	add.w	r3, r7, #24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fc fd72 	bl	8008034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b554:	e02c      	b.n	800b5b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <UART_SetConfig+0x69c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0320 	and.w	r3, r3, #32
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d016      	beq.n	800b590 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b562:	4b06      	ldr	r3, [pc, #24]	; (800b57c <UART_SetConfig+0x69c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	08db      	lsrs	r3, r3, #3
 800b568:	f003 0303 	and.w	r3, r3, #3
 800b56c:	4a07      	ldr	r2, [pc, #28]	; (800b58c <UART_SetConfig+0x6ac>)
 800b56e:	fa22 f303 	lsr.w	r3, r2, r3
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b574:	e01c      	b.n	800b5b0 <UART_SetConfig+0x6d0>
 800b576:	bf00      	nop
 800b578:	40011400 	.word	0x40011400
 800b57c:	58024400 	.word	0x58024400
 800b580:	40007800 	.word	0x40007800
 800b584:	40007c00 	.word	0x40007c00
 800b588:	58000c00 	.word	0x58000c00
 800b58c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b590:	4b9d      	ldr	r3, [pc, #628]	; (800b808 <UART_SetConfig+0x928>)
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b594:	e00c      	b.n	800b5b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b596:	4b9d      	ldr	r3, [pc, #628]	; (800b80c <UART_SetConfig+0x92c>)
 800b598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b59a:	e009      	b.n	800b5b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b59c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a2:	e005      	b.n	800b5b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b5ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 81de 	beq.w	800b974 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5bc:	4a94      	ldr	r2, [pc, #592]	; (800b810 <UART_SetConfig+0x930>)
 800b5be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	4413      	add	r3, r2
 800b5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d305      	bcc.n	800b5e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d903      	bls.n	800b5f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b5ee:	e1c1      	b.n	800b974 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	60bb      	str	r3, [r7, #8]
 800b5f6:	60fa      	str	r2, [r7, #12]
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	4a84      	ldr	r2, [pc, #528]	; (800b810 <UART_SetConfig+0x930>)
 800b5fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b602:	b29b      	uxth	r3, r3
 800b604:	2200      	movs	r2, #0
 800b606:	603b      	str	r3, [r7, #0]
 800b608:	607a      	str	r2, [r7, #4]
 800b60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b612:	f7f5 f879 	bl	8000708 <__aeabi_uldivmod>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4610      	mov	r0, r2
 800b61c:	4619      	mov	r1, r3
 800b61e:	f04f 0200 	mov.w	r2, #0
 800b622:	f04f 0300 	mov.w	r3, #0
 800b626:	020b      	lsls	r3, r1, #8
 800b628:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b62c:	0202      	lsls	r2, r0, #8
 800b62e:	6979      	ldr	r1, [r7, #20]
 800b630:	6849      	ldr	r1, [r1, #4]
 800b632:	0849      	lsrs	r1, r1, #1
 800b634:	2000      	movs	r0, #0
 800b636:	460c      	mov	r4, r1
 800b638:	4605      	mov	r5, r0
 800b63a:	eb12 0804 	adds.w	r8, r2, r4
 800b63e:	eb43 0905 	adc.w	r9, r3, r5
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	469a      	mov	sl, r3
 800b64a:	4693      	mov	fp, r2
 800b64c:	4652      	mov	r2, sl
 800b64e:	465b      	mov	r3, fp
 800b650:	4640      	mov	r0, r8
 800b652:	4649      	mov	r1, r9
 800b654:	f7f5 f858 	bl	8000708 <__aeabi_uldivmod>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4613      	mov	r3, r2
 800b65e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b666:	d308      	bcc.n	800b67a <UART_SetConfig+0x79a>
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b66e:	d204      	bcs.n	800b67a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b676:	60da      	str	r2, [r3, #12]
 800b678:	e17c      	b.n	800b974 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b680:	e178      	b.n	800b974 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b68a:	f040 80c5 	bne.w	800b818 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b68e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b692:	2b20      	cmp	r3, #32
 800b694:	dc48      	bgt.n	800b728 <UART_SetConfig+0x848>
 800b696:	2b00      	cmp	r3, #0
 800b698:	db7b      	blt.n	800b792 <UART_SetConfig+0x8b2>
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	d879      	bhi.n	800b792 <UART_SetConfig+0x8b2>
 800b69e:	a201      	add	r2, pc, #4	; (adr r2, 800b6a4 <UART_SetConfig+0x7c4>)
 800b6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a4:	0800b72f 	.word	0x0800b72f
 800b6a8:	0800b737 	.word	0x0800b737
 800b6ac:	0800b793 	.word	0x0800b793
 800b6b0:	0800b793 	.word	0x0800b793
 800b6b4:	0800b73f 	.word	0x0800b73f
 800b6b8:	0800b793 	.word	0x0800b793
 800b6bc:	0800b793 	.word	0x0800b793
 800b6c0:	0800b793 	.word	0x0800b793
 800b6c4:	0800b74f 	.word	0x0800b74f
 800b6c8:	0800b793 	.word	0x0800b793
 800b6cc:	0800b793 	.word	0x0800b793
 800b6d0:	0800b793 	.word	0x0800b793
 800b6d4:	0800b793 	.word	0x0800b793
 800b6d8:	0800b793 	.word	0x0800b793
 800b6dc:	0800b793 	.word	0x0800b793
 800b6e0:	0800b793 	.word	0x0800b793
 800b6e4:	0800b75f 	.word	0x0800b75f
 800b6e8:	0800b793 	.word	0x0800b793
 800b6ec:	0800b793 	.word	0x0800b793
 800b6f0:	0800b793 	.word	0x0800b793
 800b6f4:	0800b793 	.word	0x0800b793
 800b6f8:	0800b793 	.word	0x0800b793
 800b6fc:	0800b793 	.word	0x0800b793
 800b700:	0800b793 	.word	0x0800b793
 800b704:	0800b793 	.word	0x0800b793
 800b708:	0800b793 	.word	0x0800b793
 800b70c:	0800b793 	.word	0x0800b793
 800b710:	0800b793 	.word	0x0800b793
 800b714:	0800b793 	.word	0x0800b793
 800b718:	0800b793 	.word	0x0800b793
 800b71c:	0800b793 	.word	0x0800b793
 800b720:	0800b793 	.word	0x0800b793
 800b724:	0800b785 	.word	0x0800b785
 800b728:	2b40      	cmp	r3, #64	; 0x40
 800b72a:	d02e      	beq.n	800b78a <UART_SetConfig+0x8aa>
 800b72c:	e031      	b.n	800b792 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b72e:	f7fb fba5 	bl	8006e7c <HAL_RCC_GetPCLK1Freq>
 800b732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b734:	e033      	b.n	800b79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b736:	f7fb fbb7 	bl	8006ea8 <HAL_RCC_GetPCLK2Freq>
 800b73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b73c:	e02f      	b.n	800b79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b742:	4618      	mov	r0, r3
 800b744:	f7fc fb22 	bl	8007d8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b74c:	e027      	b.n	800b79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b74e:	f107 0318 	add.w	r3, r7, #24
 800b752:	4618      	mov	r0, r3
 800b754:	f7fc fc6e 	bl	8008034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b75c:	e01f      	b.n	800b79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b75e:	4b2d      	ldr	r3, [pc, #180]	; (800b814 <UART_SetConfig+0x934>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 0320 	and.w	r3, r3, #32
 800b766:	2b00      	cmp	r3, #0
 800b768:	d009      	beq.n	800b77e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b76a:	4b2a      	ldr	r3, [pc, #168]	; (800b814 <UART_SetConfig+0x934>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	08db      	lsrs	r3, r3, #3
 800b770:	f003 0303 	and.w	r3, r3, #3
 800b774:	4a24      	ldr	r2, [pc, #144]	; (800b808 <UART_SetConfig+0x928>)
 800b776:	fa22 f303 	lsr.w	r3, r2, r3
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b77c:	e00f      	b.n	800b79e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b77e:	4b22      	ldr	r3, [pc, #136]	; (800b808 <UART_SetConfig+0x928>)
 800b780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b782:	e00c      	b.n	800b79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b784:	4b21      	ldr	r3, [pc, #132]	; (800b80c <UART_SetConfig+0x92c>)
 800b786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b788:	e009      	b.n	800b79e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b790:	e005      	b.n	800b79e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b79c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 80e7 	beq.w	800b974 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	4a19      	ldr	r2, [pc, #100]	; (800b810 <UART_SetConfig+0x930>)
 800b7ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7b8:	005a      	lsls	r2, r3, #1
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	085b      	lsrs	r3, r3, #1
 800b7c0:	441a      	add	r2, r3
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	2b0f      	cmp	r3, #15
 800b7d0:	d916      	bls.n	800b800 <UART_SetConfig+0x920>
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d8:	d212      	bcs.n	800b800 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	f023 030f 	bic.w	r3, r3, #15
 800b7e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	085b      	lsrs	r3, r3, #1
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	f003 0307 	and.w	r3, r3, #7
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b7fc:	60da      	str	r2, [r3, #12]
 800b7fe:	e0b9      	b.n	800b974 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b806:	e0b5      	b.n	800b974 <UART_SetConfig+0xa94>
 800b808:	03d09000 	.word	0x03d09000
 800b80c:	003d0900 	.word	0x003d0900
 800b810:	08010208 	.word	0x08010208
 800b814:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b818:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	dc49      	bgt.n	800b8b4 <UART_SetConfig+0x9d4>
 800b820:	2b00      	cmp	r3, #0
 800b822:	db7c      	blt.n	800b91e <UART_SetConfig+0xa3e>
 800b824:	2b20      	cmp	r3, #32
 800b826:	d87a      	bhi.n	800b91e <UART_SetConfig+0xa3e>
 800b828:	a201      	add	r2, pc, #4	; (adr r2, 800b830 <UART_SetConfig+0x950>)
 800b82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82e:	bf00      	nop
 800b830:	0800b8bb 	.word	0x0800b8bb
 800b834:	0800b8c3 	.word	0x0800b8c3
 800b838:	0800b91f 	.word	0x0800b91f
 800b83c:	0800b91f 	.word	0x0800b91f
 800b840:	0800b8cb 	.word	0x0800b8cb
 800b844:	0800b91f 	.word	0x0800b91f
 800b848:	0800b91f 	.word	0x0800b91f
 800b84c:	0800b91f 	.word	0x0800b91f
 800b850:	0800b8db 	.word	0x0800b8db
 800b854:	0800b91f 	.word	0x0800b91f
 800b858:	0800b91f 	.word	0x0800b91f
 800b85c:	0800b91f 	.word	0x0800b91f
 800b860:	0800b91f 	.word	0x0800b91f
 800b864:	0800b91f 	.word	0x0800b91f
 800b868:	0800b91f 	.word	0x0800b91f
 800b86c:	0800b91f 	.word	0x0800b91f
 800b870:	0800b8eb 	.word	0x0800b8eb
 800b874:	0800b91f 	.word	0x0800b91f
 800b878:	0800b91f 	.word	0x0800b91f
 800b87c:	0800b91f 	.word	0x0800b91f
 800b880:	0800b91f 	.word	0x0800b91f
 800b884:	0800b91f 	.word	0x0800b91f
 800b888:	0800b91f 	.word	0x0800b91f
 800b88c:	0800b91f 	.word	0x0800b91f
 800b890:	0800b91f 	.word	0x0800b91f
 800b894:	0800b91f 	.word	0x0800b91f
 800b898:	0800b91f 	.word	0x0800b91f
 800b89c:	0800b91f 	.word	0x0800b91f
 800b8a0:	0800b91f 	.word	0x0800b91f
 800b8a4:	0800b91f 	.word	0x0800b91f
 800b8a8:	0800b91f 	.word	0x0800b91f
 800b8ac:	0800b91f 	.word	0x0800b91f
 800b8b0:	0800b911 	.word	0x0800b911
 800b8b4:	2b40      	cmp	r3, #64	; 0x40
 800b8b6:	d02e      	beq.n	800b916 <UART_SetConfig+0xa36>
 800b8b8:	e031      	b.n	800b91e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ba:	f7fb fadf 	bl	8006e7c <HAL_RCC_GetPCLK1Freq>
 800b8be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8c0:	e033      	b.n	800b92a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8c2:	f7fb faf1 	bl	8006ea8 <HAL_RCC_GetPCLK2Freq>
 800b8c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8c8:	e02f      	b.n	800b92a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fc fa5c 	bl	8007d8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d8:	e027      	b.n	800b92a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8da:	f107 0318 	add.w	r3, r7, #24
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fc fba8 	bl	8008034 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e8:	e01f      	b.n	800b92a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ea:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <UART_SetConfig+0xac0>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d009      	beq.n	800b90a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8f6:	4b2a      	ldr	r3, [pc, #168]	; (800b9a0 <UART_SetConfig+0xac0>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	08db      	lsrs	r3, r3, #3
 800b8fc:	f003 0303 	and.w	r3, r3, #3
 800b900:	4a28      	ldr	r2, [pc, #160]	; (800b9a4 <UART_SetConfig+0xac4>)
 800b902:	fa22 f303 	lsr.w	r3, r2, r3
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b908:	e00f      	b.n	800b92a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b90a:	4b26      	ldr	r3, [pc, #152]	; (800b9a4 <UART_SetConfig+0xac4>)
 800b90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b90e:	e00c      	b.n	800b92a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b910:	4b25      	ldr	r3, [pc, #148]	; (800b9a8 <UART_SetConfig+0xac8>)
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b914:	e009      	b.n	800b92a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b91c:	e005      	b.n	800b92a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b91e:	2300      	movs	r3, #0
 800b920:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b928:	bf00      	nop
    }

    if (pclk != 0U)
 800b92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d021      	beq.n	800b974 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b934:	4a1d      	ldr	r2, [pc, #116]	; (800b9ac <UART_SetConfig+0xacc>)
 800b936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b93a:	461a      	mov	r2, r3
 800b93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	085b      	lsrs	r3, r3, #1
 800b948:	441a      	add	r2, r3
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b952:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	2b0f      	cmp	r3, #15
 800b958:	d909      	bls.n	800b96e <UART_SetConfig+0xa8e>
 800b95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b960:	d205      	bcs.n	800b96e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b964:	b29a      	uxth	r2, r3
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60da      	str	r2, [r3, #12]
 800b96c:	e002      	b.n	800b974 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2201      	movs	r2, #1
 800b978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2201      	movs	r2, #1
 800b980:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2200      	movs	r2, #0
 800b988:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2200      	movs	r2, #0
 800b98e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b990:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b994:	4618      	mov	r0, r3
 800b996:	3748      	adds	r7, #72	; 0x48
 800b998:	46bd      	mov	sp, r7
 800b99a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b99e:	bf00      	nop
 800b9a0:	58024400 	.word	0x58024400
 800b9a4:	03d09000 	.word	0x03d09000
 800b9a8:	003d0900 	.word	0x003d0900
 800b9ac:	08010208 	.word	0x08010208

0800b9b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00a      	beq.n	800b9da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	f003 0302 	and.w	r3, r3, #2
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00a      	beq.n	800ba1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba44:	f003 0310 	and.w	r3, r3, #16
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00a      	beq.n	800ba62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	f003 0320 	and.w	r3, r3, #32
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	430a      	orrs	r2, r1
 800ba82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d01a      	beq.n	800bac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baae:	d10a      	bne.n	800bac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	605a      	str	r2, [r3, #4]
  }
}
 800bae8:	bf00      	nop
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af02      	add	r7, sp, #8
 800bafa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb04:	f7f9 f914 	bl	8004d30 <HAL_GetTick>
 800bb08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d10e      	bne.n	800bb36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f82f 	bl	800bb8a <UART_WaitOnFlagUntilTimeout>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e025      	b.n	800bb82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 0304 	and.w	r3, r3, #4
 800bb40:	2b04      	cmp	r3, #4
 800bb42:	d10e      	bne.n	800bb62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f819 	bl	800bb8a <UART_WaitOnFlagUntilTimeout>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e00f      	b.n	800bb82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2220      	movs	r2, #32
 800bb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b09c      	sub	sp, #112	; 0x70
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	603b      	str	r3, [r7, #0]
 800bb96:	4613      	mov	r3, r2
 800bb98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb9a:	e0a9      	b.n	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba2:	f000 80a5 	beq.w	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bba6:	f7f9 f8c3 	bl	8004d30 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d302      	bcc.n	800bbbc <UART_WaitOnFlagUntilTimeout+0x32>
 800bbb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d140      	bne.n	800bc3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
 800bbc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbd0:	667b      	str	r3, [r7, #100]	; 0x64
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbdc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bbe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1e6      	bne.n	800bbbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	f023 0301 	bic.w	r3, r3, #1
 800bc04:	663b      	str	r3, [r7, #96]	; 0x60
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc0e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc16:	e841 2300 	strex	r3, r2, [r1]
 800bc1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1e5      	bne.n	800bbee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2220      	movs	r2, #32
 800bc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e069      	b.n	800bd12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d051      	beq.n	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc5a:	d149      	bne.n	800bcf0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	461a      	mov	r2, r3
 800bc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
 800bc86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc8c:	e841 2300 	strex	r3, r2, [r1]
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e6      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	e853 3f00 	ldrex	r3, [r3]
 800bca6:	613b      	str	r3, [r7, #16]
   return(result);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f023 0301 	bic.w	r3, r3, #1
 800bcae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bcb8:	623a      	str	r2, [r7, #32]
 800bcba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbc:	69f9      	ldr	r1, [r7, #28]
 800bcbe:	6a3a      	ldr	r2, [r7, #32]
 800bcc0:	e841 2300 	strex	r3, r2, [r1]
 800bcc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1e5      	bne.n	800bc98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e010      	b.n	800bd12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	69da      	ldr	r2, [r3, #28]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	bf0c      	ite	eq
 800bd00:	2301      	moveq	r3, #1
 800bd02:	2300      	movne	r3, #0
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	461a      	mov	r2, r3
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	f43f af46 	beq.w	800bb9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3770      	adds	r7, #112	; 0x70
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b0a3      	sub	sp, #140	; 0x8c
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	4613      	mov	r3, r2
 800bd28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	88fa      	ldrh	r2, [r7, #6]
 800bd34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	88fa      	ldrh	r2, [r7, #6]
 800bd3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4e:	d10e      	bne.n	800bd6e <UART_Start_Receive_IT+0x52>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d105      	bne.n	800bd64 <UART_Start_Receive_IT+0x48>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bd5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd62:	e02d      	b.n	800bdc0 <UART_Start_Receive_IT+0xa4>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	22ff      	movs	r2, #255	; 0xff
 800bd68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd6c:	e028      	b.n	800bdc0 <UART_Start_Receive_IT+0xa4>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10d      	bne.n	800bd92 <UART_Start_Receive_IT+0x76>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d104      	bne.n	800bd88 <UART_Start_Receive_IT+0x6c>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	22ff      	movs	r2, #255	; 0xff
 800bd82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd86:	e01b      	b.n	800bdc0 <UART_Start_Receive_IT+0xa4>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	227f      	movs	r2, #127	; 0x7f
 800bd8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd90:	e016      	b.n	800bdc0 <UART_Start_Receive_IT+0xa4>
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd9a:	d10d      	bne.n	800bdb8 <UART_Start_Receive_IT+0x9c>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d104      	bne.n	800bdae <UART_Start_Receive_IT+0x92>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	227f      	movs	r2, #127	; 0x7f
 800bda8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdac:	e008      	b.n	800bdc0 <UART_Start_Receive_IT+0xa4>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	223f      	movs	r2, #63	; 0x3f
 800bdb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdb6:	e003      	b.n	800bdc0 <UART_Start_Receive_IT+0xa4>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2222      	movs	r2, #34	; 0x22
 800bdcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdda:	e853 3f00 	ldrex	r3, [r3]
 800bdde:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bde0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bde2:	f043 0301 	orr.w	r3, r3, #1
 800bde6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bdf4:	673a      	str	r2, [r7, #112]	; 0x70
 800bdf6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bdfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bdfc:	e841 2300 	strex	r3, r2, [r1]
 800be00:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800be02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e3      	bne.n	800bdd0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be10:	d153      	bne.n	800beba <UART_Start_Receive_IT+0x19e>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be18:	88fa      	ldrh	r2, [r7, #6]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d34d      	bcc.n	800beba <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be26:	d107      	bne.n	800be38 <UART_Start_Receive_IT+0x11c>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4a4b      	ldr	r2, [pc, #300]	; (800bf60 <UART_Start_Receive_IT+0x244>)
 800be34:	671a      	str	r2, [r3, #112]	; 0x70
 800be36:	e002      	b.n	800be3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4a4a      	ldr	r2, [pc, #296]	; (800bf64 <UART_Start_Receive_IT+0x248>)
 800be3c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d01a      	beq.n	800be84 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be78:	e841 2300 	strex	r3, r2, [r1]
 800be7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800be7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e4      	bne.n	800be4e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3308      	adds	r3, #8
 800be8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3308      	adds	r3, #8
 800bea2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bea4:	64ba      	str	r2, [r7, #72]	; 0x48
 800bea6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800beaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800beb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e5      	bne.n	800be84 <UART_Start_Receive_IT+0x168>
 800beb8:	e04a      	b.n	800bf50 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bec2:	d107      	bne.n	800bed4 <UART_Start_Receive_IT+0x1b8>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d103      	bne.n	800bed4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4a26      	ldr	r2, [pc, #152]	; (800bf68 <UART_Start_Receive_IT+0x24c>)
 800bed0:	671a      	str	r2, [r3, #112]	; 0x70
 800bed2:	e002      	b.n	800beda <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4a25      	ldr	r2, [pc, #148]	; (800bf6c <UART_Start_Receive_IT+0x250>)
 800bed8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d019      	beq.n	800bf1e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	e853 3f00 	ldrex	r3, [r3]
 800bef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800befe:	677b      	str	r3, [r7, #116]	; 0x74
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf08:	637b      	str	r3, [r7, #52]	; 0x34
 800bf0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e6      	bne.n	800beea <UART_Start_Receive_IT+0x1ce>
 800bf1c:	e018      	b.n	800bf50 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f043 0320 	orr.w	r3, r3, #32
 800bf32:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf3c:	623b      	str	r3, [r7, #32]
 800bf3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf40:	69f9      	ldr	r1, [r7, #28]
 800bf42:	6a3a      	ldr	r2, [r7, #32]
 800bf44:	e841 2300 	strex	r3, r2, [r1]
 800bf48:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e6      	bne.n	800bf1e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	378c      	adds	r7, #140	; 0x8c
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	0800c679 	.word	0x0800c679
 800bf64:	0800c381 	.word	0x0800c381
 800bf68:	0800c21f 	.word	0x0800c21f
 800bf6c:	0800c0bf 	.word	0x0800c0bf

0800bf70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b095      	sub	sp, #84	; 0x54
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf80:	e853 3f00 	ldrex	r3, [r3]
 800bf84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf96:	643b      	str	r3, [r7, #64]	; 0x40
 800bf98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf9e:	e841 2300 	strex	r3, r2, [r1]
 800bfa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1e6      	bne.n	800bf78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3308      	adds	r3, #8
 800bfb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	e853 3f00 	ldrex	r3, [r3]
 800bfb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfba:	69fa      	ldr	r2, [r7, #28]
 800bfbc:	4b1e      	ldr	r3, [pc, #120]	; (800c038 <UART_EndRxTransfer+0xc8>)
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3308      	adds	r3, #8
 800bfc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e5      	bne.n	800bfaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d118      	bne.n	800c018 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f023 0310 	bic.w	r3, r3, #16
 800bffa:	647b      	str	r3, [r7, #68]	; 0x44
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c004:	61bb      	str	r3, [r7, #24]
 800c006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6979      	ldr	r1, [r7, #20]
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	613b      	str	r3, [r7, #16]
   return(result);
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c02c:	bf00      	nop
 800c02e:	3754      	adds	r7, #84	; 0x54
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr
 800c038:	effffffe 	.word	0xeffffffe

0800c03c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c048:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7fe ff2a 	bl	800aeb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c060:	bf00      	nop
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	e853 3f00 	ldrex	r3, [r3]
 800c07c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c084:	61fb      	str	r3, [r7, #28]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	61bb      	str	r3, [r7, #24]
 800c090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c092:	6979      	ldr	r1, [r7, #20]
 800c094:	69ba      	ldr	r2, [r7, #24]
 800c096:	e841 2300 	strex	r3, r2, [r1]
 800c09a:	613b      	str	r3, [r7, #16]
   return(result);
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1e6      	bne.n	800c070 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2220      	movs	r2, #32
 800c0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7f6 fd59 	bl	8002b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0b6:	bf00      	nop
 800c0b8:	3720      	adds	r7, #32
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b096      	sub	sp, #88	; 0x58
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0d6:	2b22      	cmp	r3, #34	; 0x22
 800c0d8:	f040 8095 	bne.w	800c206 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c0ea:	b2d9      	uxtb	r1, r3
 800c0ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f6:	400a      	ands	r2, r1
 800c0f8:	b2d2      	uxtb	r2, r2
 800c0fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c100:	1c5a      	adds	r2, r3, #1
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	3b01      	subs	r3, #1
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c11e:	b29b      	uxth	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d178      	bne.n	800c216 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c138:	653b      	str	r3, [r7, #80]	; 0x50
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c142:	647b      	str	r3, [r7, #68]	; 0x44
 800c144:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e6      	bne.n	800c124 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3308      	adds	r3, #8
 800c15c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c160:	e853 3f00 	ldrex	r3, [r3]
 800c164:	623b      	str	r3, [r7, #32]
   return(result);
 800c166:	6a3b      	ldr	r3, [r7, #32]
 800c168:	f023 0301 	bic.w	r3, r3, #1
 800c16c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3308      	adds	r3, #8
 800c174:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c176:	633a      	str	r2, [r7, #48]	; 0x30
 800c178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c17c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c17e:	e841 2300 	strex	r3, r2, [r1]
 800c182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1e5      	bne.n	800c156 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2220      	movs	r2, #32
 800c18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d12e      	bne.n	800c1fe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	e853 3f00 	ldrex	r3, [r3]
 800c1b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 0310 	bic.w	r3, r3, #16
 800c1ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c4:	61fb      	str	r3, [r7, #28]
 800c1c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c8:	69b9      	ldr	r1, [r7, #24]
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	e841 2300 	strex	r3, r2, [r1]
 800c1d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1e6      	bne.n	800c1a6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	f003 0310 	and.w	r3, r3, #16
 800c1e2:	2b10      	cmp	r3, #16
 800c1e4:	d103      	bne.n	800c1ee <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2210      	movs	r2, #16
 800c1ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7fe fe66 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1fc:	e00b      	b.n	800c216 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7f6 fc3e 	bl	8002a80 <HAL_UART_RxCpltCallback>
}
 800c204:	e007      	b.n	800c216 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	699a      	ldr	r2, [r3, #24]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f042 0208 	orr.w	r2, r2, #8
 800c214:	619a      	str	r2, [r3, #24]
}
 800c216:	bf00      	nop
 800c218:	3758      	adds	r7, #88	; 0x58
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b096      	sub	sp, #88	; 0x58
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c22c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c236:	2b22      	cmp	r3, #34	; 0x22
 800c238:	f040 8095 	bne.w	800c366 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c24a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c24c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c250:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c254:	4013      	ands	r3, r2
 800c256:	b29a      	uxth	r2, r3
 800c258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c25a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c260:	1c9a      	adds	r2, r3, #2
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	3b01      	subs	r3, #1
 800c270:	b29a      	uxth	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c27e:	b29b      	uxth	r3, r3
 800c280:	2b00      	cmp	r3, #0
 800c282:	d178      	bne.n	800c376 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a2:	643b      	str	r3, [r7, #64]	; 0x40
 800c2a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2aa:	e841 2300 	strex	r3, r2, [r1]
 800c2ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1e6      	bne.n	800c284 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	e853 3f00 	ldrex	r3, [r3]
 800c2c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	f023 0301 	bic.w	r3, r3, #1
 800c2cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3308      	adds	r3, #8
 800c2d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2de:	e841 2300 	strex	r3, r2, [r1]
 800c2e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1e5      	bne.n	800c2b6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2220      	movs	r2, #32
 800c2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d12e      	bne.n	800c35e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	e853 3f00 	ldrex	r3, [r3]
 800c312:	60bb      	str	r3, [r7, #8]
   return(result);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f023 0310 	bic.w	r3, r3, #16
 800c31a:	647b      	str	r3, [r7, #68]	; 0x44
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	461a      	mov	r2, r3
 800c322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c324:	61bb      	str	r3, [r7, #24]
 800c326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c328:	6979      	ldr	r1, [r7, #20]
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	e841 2300 	strex	r3, r2, [r1]
 800c330:	613b      	str	r3, [r7, #16]
   return(result);
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1e6      	bne.n	800c306 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	f003 0310 	and.w	r3, r3, #16
 800c342:	2b10      	cmp	r3, #16
 800c344:	d103      	bne.n	800c34e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2210      	movs	r2, #16
 800c34c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7fe fdb6 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c35c:	e00b      	b.n	800c376 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7f6 fb8e 	bl	8002a80 <HAL_UART_RxCpltCallback>
}
 800c364:	e007      	b.n	800c376 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	699a      	ldr	r2, [r3, #24]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f042 0208 	orr.w	r2, r2, #8
 800c374:	619a      	str	r2, [r3, #24]
}
 800c376:	bf00      	nop
 800c378:	3758      	adds	r7, #88	; 0x58
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b0a6      	sub	sp, #152	; 0x98
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c38e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	69db      	ldr	r3, [r3, #28]
 800c398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b6:	2b22      	cmp	r3, #34	; 0x22
 800c3b8:	f040 814d 	bne.w	800c656 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3c6:	e0f4      	b.n	800c5b2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ce:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c3d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c3d6:	b2d9      	uxtb	r1, r3
 800c3d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e2:	400a      	ands	r2, r1
 800c3e4:	b2d2      	uxtb	r2, r2
 800c3e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ec:	1c5a      	adds	r2, r3, #1
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c40e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c412:	f003 0307 	and.w	r3, r3, #7
 800c416:	2b00      	cmp	r3, #0
 800c418:	d053      	beq.n	800c4c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c41a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c41e:	f003 0301 	and.w	r3, r3, #1
 800c422:	2b00      	cmp	r3, #0
 800c424:	d011      	beq.n	800c44a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00b      	beq.n	800c44a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2201      	movs	r2, #1
 800c438:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c440:	f043 0201 	orr.w	r2, r3, #1
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c44a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c44e:	f003 0302 	and.w	r3, r3, #2
 800c452:	2b00      	cmp	r3, #0
 800c454:	d011      	beq.n	800c47a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00b      	beq.n	800c47a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2202      	movs	r2, #2
 800c468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c470:	f043 0204 	orr.w	r2, r3, #4
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c47a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c47e:	f003 0304 	and.w	r3, r3, #4
 800c482:	2b00      	cmp	r3, #0
 800c484:	d011      	beq.n	800c4aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00b      	beq.n	800c4aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2204      	movs	r2, #4
 800c498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4a0:	f043 0202 	orr.w	r2, r3, #2
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d006      	beq.n	800c4c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7fe fcfd 	bl	800aeb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d171      	bne.n	800c5b2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4d6:	e853 3f00 	ldrex	r3, [r3]
 800c4da:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c4dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4f2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c4f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4f8:	e841 2300 	strex	r3, r2, [r1]
 800c4fc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c4fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1e4      	bne.n	800c4ce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	3308      	adds	r3, #8
 800c50a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c50e:	e853 3f00 	ldrex	r3, [r3]
 800c512:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c516:	4b56      	ldr	r3, [pc, #344]	; (800c670 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800c518:	4013      	ands	r3, r2
 800c51a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	3308      	adds	r3, #8
 800c522:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c524:	657a      	str	r2, [r7, #84]	; 0x54
 800c526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c528:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c52a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c52c:	e841 2300 	strex	r3, r2, [r1]
 800c530:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1e5      	bne.n	800c504 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d12e      	bne.n	800c5ac <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55c:	e853 3f00 	ldrex	r3, [r3]
 800c560:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	f023 0310 	bic.w	r3, r3, #16
 800c568:	67bb      	str	r3, [r7, #120]	; 0x78
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c572:	643b      	str	r3, [r7, #64]	; 0x40
 800c574:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c57a:	e841 2300 	strex	r3, r2, [r1]
 800c57e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1e6      	bne.n	800c554 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	f003 0310 	and.w	r3, r3, #16
 800c590:	2b10      	cmp	r3, #16
 800c592:	d103      	bne.n	800c59c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2210      	movs	r2, #16
 800c59a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7fe fc8f 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
 800c5aa:	e002      	b.n	800c5b2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7f6 fa67 	bl	8002a80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c5b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d006      	beq.n	800c5c8 <UART_RxISR_8BIT_FIFOEN+0x248>
 800c5ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5be:	f003 0320 	and.w	r3, r3, #32
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f47f af00 	bne.w	800c3c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c5d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d045      	beq.n	800c666 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d23e      	bcs.n	800c666 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	e853 3f00 	ldrex	r3, [r3]
 800c5f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5fe:	673b      	str	r3, [r7, #112]	; 0x70
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3308      	adds	r3, #8
 800c606:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c60a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c60e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c610:	e841 2300 	strex	r3, r2, [r1]
 800c614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e5      	bne.n	800c5e8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a15      	ldr	r2, [pc, #84]	; (800c674 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c620:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	e853 3f00 	ldrex	r3, [r3]
 800c62e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	f043 0320 	orr.w	r3, r3, #32
 800c636:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	461a      	mov	r2, r3
 800c63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c640:	61bb      	str	r3, [r7, #24]
 800c642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c644:	6979      	ldr	r1, [r7, #20]
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	e841 2300 	strex	r3, r2, [r1]
 800c64c:	613b      	str	r3, [r7, #16]
   return(result);
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e6      	bne.n	800c622 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c654:	e007      	b.n	800c666 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	699a      	ldr	r2, [r3, #24]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f042 0208 	orr.w	r2, r2, #8
 800c664:	619a      	str	r2, [r3, #24]
}
 800c666:	bf00      	nop
 800c668:	3798      	adds	r7, #152	; 0x98
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	effffffe 	.word	0xeffffffe
 800c674:	0800c0bf 	.word	0x0800c0bf

0800c678 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b0a8      	sub	sp, #160	; 0xa0
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c686:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	69db      	ldr	r3, [r3, #28]
 800c690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ae:	2b22      	cmp	r3, #34	; 0x22
 800c6b0:	f040 8151 	bne.w	800c956 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c6be:	e0f8      	b.n	800c8b2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c6d2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c6d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c6da:	4013      	ands	r3, r2
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6e8:	1c9a      	adds	r2, r3, #2
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	69db      	ldr	r3, [r3, #28]
 800c706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c70a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c70e:	f003 0307 	and.w	r3, r3, #7
 800c712:	2b00      	cmp	r3, #0
 800c714:	d053      	beq.n	800c7be <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d011      	beq.n	800c746 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2201      	movs	r2, #1
 800c734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c73c:	f043 0201 	orr.w	r2, r3, #1
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c74a:	f003 0302 	and.w	r3, r3, #2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d011      	beq.n	800c776 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c756:	f003 0301 	and.w	r3, r3, #1
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00b      	beq.n	800c776 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2202      	movs	r2, #2
 800c764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c76c:	f043 0204 	orr.w	r2, r3, #4
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c77a:	f003 0304 	and.w	r3, r3, #4
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d011      	beq.n	800c7a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2204      	movs	r2, #4
 800c794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c79c:	f043 0202 	orr.w	r2, r3, #2
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d006      	beq.n	800c7be <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7fe fb7f 	bl	800aeb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d173      	bne.n	800c8b2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7d2:	e853 3f00 	ldrex	r3, [r3]
 800c7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c7d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c7ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7ee:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c7f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c7f4:	e841 2300 	strex	r3, r2, [r1]
 800c7f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c7fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e4      	bne.n	800c7ca <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3308      	adds	r3, #8
 800c806:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c80a:	e853 3f00 	ldrex	r3, [r3]
 800c80e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c812:	4b57      	ldr	r3, [pc, #348]	; (800c970 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800c814:	4013      	ands	r3, r2
 800c816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	3308      	adds	r3, #8
 800c820:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c824:	65ba      	str	r2, [r7, #88]	; 0x58
 800c826:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c828:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c82a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c82c:	e841 2300 	strex	r3, r2, [r1]
 800c830:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1e3      	bne.n	800c800 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2220      	movs	r2, #32
 800c83c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d12e      	bne.n	800c8ac <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85c:	e853 3f00 	ldrex	r3, [r3]
 800c860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c864:	f023 0310 	bic.w	r3, r3, #16
 800c868:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	461a      	mov	r2, r3
 800c870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c872:	647b      	str	r3, [r7, #68]	; 0x44
 800c874:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c87a:	e841 2300 	strex	r3, r2, [r1]
 800c87e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1e6      	bne.n	800c854 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	f003 0310 	and.w	r3, r3, #16
 800c890:	2b10      	cmp	r3, #16
 800c892:	d103      	bne.n	800c89c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2210      	movs	r2, #16
 800c89a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7fe fb0f 	bl	800aec8 <HAL_UARTEx_RxEventCallback>
 800c8aa:	e002      	b.n	800c8b2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7f6 f8e7 	bl	8002a80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <UART_RxISR_16BIT_FIFOEN+0x250>
 800c8ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8be:	f003 0320 	and.w	r3, r3, #32
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f47f aefc 	bne.w	800c6c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8ce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d045      	beq.n	800c966 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8e0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d23e      	bcs.n	800c966 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3308      	adds	r3, #8
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	623b      	str	r3, [r7, #32]
   return(result);
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8fe:	677b      	str	r3, [r7, #116]	; 0x74
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3308      	adds	r3, #8
 800c906:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c908:	633a      	str	r2, [r7, #48]	; 0x30
 800c90a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e5      	bne.n	800c8e8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a15      	ldr	r2, [pc, #84]	; (800c974 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c920:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	e853 3f00 	ldrex	r3, [r3]
 800c92e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f043 0320 	orr.w	r3, r3, #32
 800c936:	673b      	str	r3, [r7, #112]	; 0x70
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c940:	61fb      	str	r3, [r7, #28]
 800c942:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c944:	69b9      	ldr	r1, [r7, #24]
 800c946:	69fa      	ldr	r2, [r7, #28]
 800c948:	e841 2300 	strex	r3, r2, [r1]
 800c94c:	617b      	str	r3, [r7, #20]
   return(result);
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1e6      	bne.n	800c922 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c954:	e007      	b.n	800c966 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	699a      	ldr	r2, [r3, #24]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f042 0208 	orr.w	r2, r2, #8
 800c964:	619a      	str	r2, [r3, #24]
}
 800c966:	bf00      	nop
 800c968:	37a0      	adds	r7, #160	; 0xa0
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	effffffe 	.word	0xeffffffe
 800c974:	0800c21f 	.word	0x0800c21f

0800c978 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d101      	bne.n	800c9ca <HAL_UARTEx_DisableFifoMode+0x16>
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	e027      	b.n	800ca1a <HAL_UARTEx_DisableFifoMode+0x66>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2224      	movs	r2, #36	; 0x24
 800c9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f022 0201 	bic.w	r2, r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c9f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2220      	movs	r2, #32
 800ca0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d101      	bne.n	800ca3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	e02d      	b.n	800ca9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2224      	movs	r2, #36	; 0x24
 800ca4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f022 0201 	bic.w	r2, r2, #1
 800ca64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	430a      	orrs	r2, r1
 800ca78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f850 	bl	800cb20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2220      	movs	r2, #32
 800ca8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d101      	bne.n	800caba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cab6:	2302      	movs	r3, #2
 800cab8:	e02d      	b.n	800cb16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2224      	movs	r2, #36	; 0x24
 800cac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f022 0201 	bic.w	r2, r2, #1
 800cae0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	430a      	orrs	r2, r1
 800caf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f812 	bl	800cb20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2220      	movs	r2, #32
 800cb08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
	...

0800cb20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d108      	bne.n	800cb42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb40:	e031      	b.n	800cba6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb42:	2310      	movs	r3, #16
 800cb44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb46:	2310      	movs	r3, #16
 800cb48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	0e5b      	lsrs	r3, r3, #25
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	f003 0307 	and.w	r3, r3, #7
 800cb58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	0f5b      	lsrs	r3, r3, #29
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	f003 0307 	and.w	r3, r3, #7
 800cb68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb6a:	7bbb      	ldrb	r3, [r7, #14]
 800cb6c:	7b3a      	ldrb	r2, [r7, #12]
 800cb6e:	4911      	ldr	r1, [pc, #68]	; (800cbb4 <UARTEx_SetNbDataToProcess+0x94>)
 800cb70:	5c8a      	ldrb	r2, [r1, r2]
 800cb72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb76:	7b3a      	ldrb	r2, [r7, #12]
 800cb78:	490f      	ldr	r1, [pc, #60]	; (800cbb8 <UARTEx_SetNbDataToProcess+0x98>)
 800cb7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
 800cb8a:	7b7a      	ldrb	r2, [r7, #13]
 800cb8c:	4909      	ldr	r1, [pc, #36]	; (800cbb4 <UARTEx_SetNbDataToProcess+0x94>)
 800cb8e:	5c8a      	ldrb	r2, [r1, r2]
 800cb90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb94:	7b7a      	ldrb	r2, [r7, #13]
 800cb96:	4908      	ldr	r1, [pc, #32]	; (800cbb8 <UARTEx_SetNbDataToProcess+0x98>)
 800cb98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cba6:	bf00      	nop
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	08010220 	.word	0x08010220
 800cbb8:	08010228 	.word	0x08010228

0800cbbc <__errno>:
 800cbbc:	4b01      	ldr	r3, [pc, #4]	; (800cbc4 <__errno+0x8>)
 800cbbe:	6818      	ldr	r0, [r3, #0]
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	24000074 	.word	0x24000074

0800cbc8 <__libc_init_array>:
 800cbc8:	b570      	push	{r4, r5, r6, lr}
 800cbca:	4d0d      	ldr	r5, [pc, #52]	; (800cc00 <__libc_init_array+0x38>)
 800cbcc:	4c0d      	ldr	r4, [pc, #52]	; (800cc04 <__libc_init_array+0x3c>)
 800cbce:	1b64      	subs	r4, r4, r5
 800cbd0:	10a4      	asrs	r4, r4, #2
 800cbd2:	2600      	movs	r6, #0
 800cbd4:	42a6      	cmp	r6, r4
 800cbd6:	d109      	bne.n	800cbec <__libc_init_array+0x24>
 800cbd8:	4d0b      	ldr	r5, [pc, #44]	; (800cc08 <__libc_init_array+0x40>)
 800cbda:	4c0c      	ldr	r4, [pc, #48]	; (800cc0c <__libc_init_array+0x44>)
 800cbdc:	f003 faea 	bl	80101b4 <_init>
 800cbe0:	1b64      	subs	r4, r4, r5
 800cbe2:	10a4      	asrs	r4, r4, #2
 800cbe4:	2600      	movs	r6, #0
 800cbe6:	42a6      	cmp	r6, r4
 800cbe8:	d105      	bne.n	800cbf6 <__libc_init_array+0x2e>
 800cbea:	bd70      	pop	{r4, r5, r6, pc}
 800cbec:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbf0:	4798      	blx	r3
 800cbf2:	3601      	adds	r6, #1
 800cbf4:	e7ee      	b.n	800cbd4 <__libc_init_array+0xc>
 800cbf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbfa:	4798      	blx	r3
 800cbfc:	3601      	adds	r6, #1
 800cbfe:	e7f2      	b.n	800cbe6 <__libc_init_array+0x1e>
 800cc00:	08011f20 	.word	0x08011f20
 800cc04:	08011f20 	.word	0x08011f20
 800cc08:	08011f20 	.word	0x08011f20
 800cc0c:	08011f24 	.word	0x08011f24

0800cc10 <memset>:
 800cc10:	4402      	add	r2, r0
 800cc12:	4603      	mov	r3, r0
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d100      	bne.n	800cc1a <memset+0xa>
 800cc18:	4770      	bx	lr
 800cc1a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc1e:	e7f9      	b.n	800cc14 <memset+0x4>

0800cc20 <sulp>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	460d      	mov	r5, r1
 800cc26:	4616      	mov	r6, r2
 800cc28:	ec45 4b10 	vmov	d0, r4, r5
 800cc2c:	f001 fcd8 	bl	800e5e0 <__ulp>
 800cc30:	b17e      	cbz	r6, 800cc52 <sulp+0x32>
 800cc32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dd09      	ble.n	800cc52 <sulp+0x32>
 800cc3e:	051b      	lsls	r3, r3, #20
 800cc40:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800cc44:	2000      	movs	r0, #0
 800cc46:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800cc4a:	ec41 0b17 	vmov	d7, r0, r1
 800cc4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cc52:	bd70      	pop	{r4, r5, r6, pc}
 800cc54:	0000      	movs	r0, r0
	...

0800cc58 <_strtod_l>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	ed2d 8b0e 	vpush	{d8-d14}
 800cc60:	b097      	sub	sp, #92	; 0x5c
 800cc62:	461f      	mov	r7, r3
 800cc64:	2300      	movs	r3, #0
 800cc66:	9312      	str	r3, [sp, #72]	; 0x48
 800cc68:	4ba1      	ldr	r3, [pc, #644]	; (800cef0 <_strtod_l+0x298>)
 800cc6a:	920d      	str	r2, [sp, #52]	; 0x34
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	9307      	str	r3, [sp, #28]
 800cc70:	4604      	mov	r4, r0
 800cc72:	4618      	mov	r0, r3
 800cc74:	468b      	mov	fp, r1
 800cc76:	f7f3 fb33 	bl	80002e0 <strlen>
 800cc7a:	f04f 0800 	mov.w	r8, #0
 800cc7e:	4605      	mov	r5, r0
 800cc80:	f04f 0900 	mov.w	r9, #0
 800cc84:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800cc88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc8a:	7813      	ldrb	r3, [r2, #0]
 800cc8c:	2b2b      	cmp	r3, #43	; 0x2b
 800cc8e:	d04d      	beq.n	800cd2c <_strtod_l+0xd4>
 800cc90:	d83a      	bhi.n	800cd08 <_strtod_l+0xb0>
 800cc92:	2b0d      	cmp	r3, #13
 800cc94:	d833      	bhi.n	800ccfe <_strtod_l+0xa6>
 800cc96:	2b08      	cmp	r3, #8
 800cc98:	d833      	bhi.n	800cd02 <_strtod_l+0xaa>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d03d      	beq.n	800cd1a <_strtod_l+0xc2>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9308      	str	r3, [sp, #32]
 800cca2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800cca4:	7833      	ldrb	r3, [r6, #0]
 800cca6:	2b30      	cmp	r3, #48	; 0x30
 800cca8:	f040 80b0 	bne.w	800ce0c <_strtod_l+0x1b4>
 800ccac:	7873      	ldrb	r3, [r6, #1]
 800ccae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ccb2:	2b58      	cmp	r3, #88	; 0x58
 800ccb4:	d167      	bne.n	800cd86 <_strtod_l+0x12e>
 800ccb6:	9b08      	ldr	r3, [sp, #32]
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	ab12      	add	r3, sp, #72	; 0x48
 800ccbc:	9702      	str	r7, [sp, #8]
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	4a8c      	ldr	r2, [pc, #560]	; (800cef4 <_strtod_l+0x29c>)
 800ccc2:	ab13      	add	r3, sp, #76	; 0x4c
 800ccc4:	a911      	add	r1, sp, #68	; 0x44
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 fdf0 	bl	800d8ac <__gethex>
 800cccc:	f010 0507 	ands.w	r5, r0, #7
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	d005      	beq.n	800cce0 <_strtod_l+0x88>
 800ccd4:	2d06      	cmp	r5, #6
 800ccd6:	d12b      	bne.n	800cd30 <_strtod_l+0xd8>
 800ccd8:	3601      	adds	r6, #1
 800ccda:	2300      	movs	r3, #0
 800ccdc:	9611      	str	r6, [sp, #68]	; 0x44
 800ccde:	9308      	str	r3, [sp, #32]
 800cce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f040 854e 	bne.w	800d784 <_strtod_l+0xb2c>
 800cce8:	9b08      	ldr	r3, [sp, #32]
 800ccea:	b1e3      	cbz	r3, 800cd26 <_strtod_l+0xce>
 800ccec:	ec49 8b17 	vmov	d7, r8, r9
 800ccf0:	eeb1 0b47 	vneg.f64	d0, d7
 800ccf4:	b017      	add	sp, #92	; 0x5c
 800ccf6:	ecbd 8b0e 	vpop	{d8-d14}
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	2b20      	cmp	r3, #32
 800cd00:	d1cd      	bne.n	800cc9e <_strtod_l+0x46>
 800cd02:	3201      	adds	r2, #1
 800cd04:	9211      	str	r2, [sp, #68]	; 0x44
 800cd06:	e7bf      	b.n	800cc88 <_strtod_l+0x30>
 800cd08:	2b2d      	cmp	r3, #45	; 0x2d
 800cd0a:	d1c8      	bne.n	800cc9e <_strtod_l+0x46>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	9308      	str	r3, [sp, #32]
 800cd10:	1c53      	adds	r3, r2, #1
 800cd12:	9311      	str	r3, [sp, #68]	; 0x44
 800cd14:	7853      	ldrb	r3, [r2, #1]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1c3      	bne.n	800cca2 <_strtod_l+0x4a>
 800cd1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd1c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f040 852d 	bne.w	800d780 <_strtod_l+0xb28>
 800cd26:	ec49 8b10 	vmov	d0, r8, r9
 800cd2a:	e7e3      	b.n	800ccf4 <_strtod_l+0x9c>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	e7ee      	b.n	800cd0e <_strtod_l+0xb6>
 800cd30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd32:	b13a      	cbz	r2, 800cd44 <_strtod_l+0xec>
 800cd34:	2135      	movs	r1, #53	; 0x35
 800cd36:	a814      	add	r0, sp, #80	; 0x50
 800cd38:	f001 fd5a 	bl	800e7f0 <__copybits>
 800cd3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f001 f91c 	bl	800df7c <_Bfree>
 800cd44:	3d01      	subs	r5, #1
 800cd46:	2d04      	cmp	r5, #4
 800cd48:	d806      	bhi.n	800cd58 <_strtod_l+0x100>
 800cd4a:	e8df f005 	tbb	[pc, r5]
 800cd4e:	030a      	.short	0x030a
 800cd50:	1714      	.short	0x1714
 800cd52:	0a          	.byte	0x0a
 800cd53:	00          	.byte	0x00
 800cd54:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800cd58:	073f      	lsls	r7, r7, #28
 800cd5a:	d5c1      	bpl.n	800cce0 <_strtod_l+0x88>
 800cd5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800cd60:	e7be      	b.n	800cce0 <_strtod_l+0x88>
 800cd62:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800cd66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cd70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cd74:	e7f0      	b.n	800cd58 <_strtod_l+0x100>
 800cd76:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800cef8 <_strtod_l+0x2a0>
 800cd7a:	e7ed      	b.n	800cd58 <_strtod_l+0x100>
 800cd7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cd80:	f04f 38ff 	mov.w	r8, #4294967295
 800cd84:	e7e8      	b.n	800cd58 <_strtod_l+0x100>
 800cd86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	9211      	str	r2, [sp, #68]	; 0x44
 800cd8c:	785b      	ldrb	r3, [r3, #1]
 800cd8e:	2b30      	cmp	r3, #48	; 0x30
 800cd90:	d0f9      	beq.n	800cd86 <_strtod_l+0x12e>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0a4      	beq.n	800cce0 <_strtod_l+0x88>
 800cd96:	2301      	movs	r3, #1
 800cd98:	f04f 0a00 	mov.w	sl, #0
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cda0:	930a      	str	r3, [sp, #40]	; 0x28
 800cda2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cda6:	f8cd a018 	str.w	sl, [sp, #24]
 800cdaa:	220a      	movs	r2, #10
 800cdac:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cdae:	7807      	ldrb	r7, [r0, #0]
 800cdb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800cdb4:	b2d9      	uxtb	r1, r3
 800cdb6:	2909      	cmp	r1, #9
 800cdb8:	d92a      	bls.n	800ce10 <_strtod_l+0x1b8>
 800cdba:	9907      	ldr	r1, [sp, #28]
 800cdbc:	462a      	mov	r2, r5
 800cdbe:	f001 fe1f 	bl	800ea00 <strncmp>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d033      	beq.n	800ce2e <_strtod_l+0x1d6>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	9b06      	ldr	r3, [sp, #24]
 800cdca:	463a      	mov	r2, r7
 800cdcc:	4601      	mov	r1, r0
 800cdce:	4607      	mov	r7, r0
 800cdd0:	2a65      	cmp	r2, #101	; 0x65
 800cdd2:	d001      	beq.n	800cdd8 <_strtod_l+0x180>
 800cdd4:	2a45      	cmp	r2, #69	; 0x45
 800cdd6:	d117      	bne.n	800ce08 <_strtod_l+0x1b0>
 800cdd8:	b91b      	cbnz	r3, 800cde2 <_strtod_l+0x18a>
 800cdda:	9b04      	ldr	r3, [sp, #16]
 800cddc:	4303      	orrs	r3, r0
 800cdde:	d09c      	beq.n	800cd1a <_strtod_l+0xc2>
 800cde0:	2300      	movs	r3, #0
 800cde2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800cde6:	f10b 0201 	add.w	r2, fp, #1
 800cdea:	9211      	str	r2, [sp, #68]	; 0x44
 800cdec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800cdf0:	2a2b      	cmp	r2, #43	; 0x2b
 800cdf2:	d071      	beq.n	800ced8 <_strtod_l+0x280>
 800cdf4:	2a2d      	cmp	r2, #45	; 0x2d
 800cdf6:	d077      	beq.n	800cee8 <_strtod_l+0x290>
 800cdf8:	f04f 0e00 	mov.w	lr, #0
 800cdfc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ce00:	2d09      	cmp	r5, #9
 800ce02:	d97f      	bls.n	800cf04 <_strtod_l+0x2ac>
 800ce04:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ce08:	2500      	movs	r5, #0
 800ce0a:	e09b      	b.n	800cf44 <_strtod_l+0x2ec>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e7c3      	b.n	800cd98 <_strtod_l+0x140>
 800ce10:	9906      	ldr	r1, [sp, #24]
 800ce12:	2908      	cmp	r1, #8
 800ce14:	bfdd      	ittte	le
 800ce16:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ce18:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce1c:	9309      	strle	r3, [sp, #36]	; 0x24
 800ce1e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ce22:	9b06      	ldr	r3, [sp, #24]
 800ce24:	3001      	adds	r0, #1
 800ce26:	3301      	adds	r3, #1
 800ce28:	9306      	str	r3, [sp, #24]
 800ce2a:	9011      	str	r0, [sp, #68]	; 0x44
 800ce2c:	e7be      	b.n	800cdac <_strtod_l+0x154>
 800ce2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce30:	195a      	adds	r2, r3, r5
 800ce32:	9211      	str	r2, [sp, #68]	; 0x44
 800ce34:	5d5a      	ldrb	r2, [r3, r5]
 800ce36:	9b06      	ldr	r3, [sp, #24]
 800ce38:	b3a3      	cbz	r3, 800cea4 <_strtod_l+0x24c>
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ce40:	2909      	cmp	r1, #9
 800ce42:	d912      	bls.n	800ce6a <_strtod_l+0x212>
 800ce44:	2101      	movs	r1, #1
 800ce46:	e7c3      	b.n	800cdd0 <_strtod_l+0x178>
 800ce48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	9211      	str	r2, [sp, #68]	; 0x44
 800ce4e:	785a      	ldrb	r2, [r3, #1]
 800ce50:	3001      	adds	r0, #1
 800ce52:	2a30      	cmp	r2, #48	; 0x30
 800ce54:	d0f8      	beq.n	800ce48 <_strtod_l+0x1f0>
 800ce56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ce5a:	2b08      	cmp	r3, #8
 800ce5c:	f200 8497 	bhi.w	800d78e <_strtod_l+0xb36>
 800ce60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce62:	930a      	str	r3, [sp, #40]	; 0x28
 800ce64:	4607      	mov	r7, r0
 800ce66:	2000      	movs	r0, #0
 800ce68:	4603      	mov	r3, r0
 800ce6a:	3a30      	subs	r2, #48	; 0x30
 800ce6c:	f100 0101 	add.w	r1, r0, #1
 800ce70:	d012      	beq.n	800ce98 <_strtod_l+0x240>
 800ce72:	440f      	add	r7, r1
 800ce74:	eb00 0c03 	add.w	ip, r0, r3
 800ce78:	4619      	mov	r1, r3
 800ce7a:	250a      	movs	r5, #10
 800ce7c:	4561      	cmp	r1, ip
 800ce7e:	d113      	bne.n	800cea8 <_strtod_l+0x250>
 800ce80:	1819      	adds	r1, r3, r0
 800ce82:	2908      	cmp	r1, #8
 800ce84:	f103 0301 	add.w	r3, r3, #1
 800ce88:	4403      	add	r3, r0
 800ce8a:	dc1c      	bgt.n	800cec6 <_strtod_l+0x26e>
 800ce8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce8e:	210a      	movs	r1, #10
 800ce90:	fb01 2200 	mla	r2, r1, r0, r2
 800ce94:	9209      	str	r2, [sp, #36]	; 0x24
 800ce96:	2100      	movs	r1, #0
 800ce98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce9a:	1c50      	adds	r0, r2, #1
 800ce9c:	9011      	str	r0, [sp, #68]	; 0x44
 800ce9e:	7852      	ldrb	r2, [r2, #1]
 800cea0:	4608      	mov	r0, r1
 800cea2:	e7cb      	b.n	800ce3c <_strtod_l+0x1e4>
 800cea4:	9806      	ldr	r0, [sp, #24]
 800cea6:	e7d4      	b.n	800ce52 <_strtod_l+0x1fa>
 800cea8:	2908      	cmp	r1, #8
 800ceaa:	dc04      	bgt.n	800ceb6 <_strtod_l+0x25e>
 800ceac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ceae:	436e      	muls	r6, r5
 800ceb0:	9609      	str	r6, [sp, #36]	; 0x24
 800ceb2:	3101      	adds	r1, #1
 800ceb4:	e7e2      	b.n	800ce7c <_strtod_l+0x224>
 800ceb6:	f101 0e01 	add.w	lr, r1, #1
 800ceba:	f1be 0f10 	cmp.w	lr, #16
 800cebe:	bfd8      	it	le
 800cec0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800cec4:	e7f5      	b.n	800ceb2 <_strtod_l+0x25a>
 800cec6:	2b10      	cmp	r3, #16
 800cec8:	bfdc      	itt	le
 800ceca:	210a      	movle	r1, #10
 800cecc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800ced0:	e7e1      	b.n	800ce96 <_strtod_l+0x23e>
 800ced2:	2700      	movs	r7, #0
 800ced4:	2101      	movs	r1, #1
 800ced6:	e780      	b.n	800cdda <_strtod_l+0x182>
 800ced8:	f04f 0e00 	mov.w	lr, #0
 800cedc:	f10b 0202 	add.w	r2, fp, #2
 800cee0:	9211      	str	r2, [sp, #68]	; 0x44
 800cee2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800cee6:	e789      	b.n	800cdfc <_strtod_l+0x1a4>
 800cee8:	f04f 0e01 	mov.w	lr, #1
 800ceec:	e7f6      	b.n	800cedc <_strtod_l+0x284>
 800ceee:	bf00      	nop
 800cef0:	08010308 	.word	0x08010308
 800cef4:	08010240 	.word	0x08010240
 800cef8:	7ff00000 	.word	0x7ff00000
 800cefc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cefe:	1c55      	adds	r5, r2, #1
 800cf00:	9511      	str	r5, [sp, #68]	; 0x44
 800cf02:	7852      	ldrb	r2, [r2, #1]
 800cf04:	2a30      	cmp	r2, #48	; 0x30
 800cf06:	d0f9      	beq.n	800cefc <_strtod_l+0x2a4>
 800cf08:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800cf0c:	2d08      	cmp	r5, #8
 800cf0e:	f63f af7b 	bhi.w	800ce08 <_strtod_l+0x1b0>
 800cf12:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800cf16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf18:	9207      	str	r2, [sp, #28]
 800cf1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf1c:	1c55      	adds	r5, r2, #1
 800cf1e:	9511      	str	r5, [sp, #68]	; 0x44
 800cf20:	7852      	ldrb	r2, [r2, #1]
 800cf22:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cf26:	2e09      	cmp	r6, #9
 800cf28:	d937      	bls.n	800cf9a <_strtod_l+0x342>
 800cf2a:	9e07      	ldr	r6, [sp, #28]
 800cf2c:	1bad      	subs	r5, r5, r6
 800cf2e:	2d08      	cmp	r5, #8
 800cf30:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800cf34:	dc02      	bgt.n	800cf3c <_strtod_l+0x2e4>
 800cf36:	4565      	cmp	r5, ip
 800cf38:	bfa8      	it	ge
 800cf3a:	4665      	movge	r5, ip
 800cf3c:	f1be 0f00 	cmp.w	lr, #0
 800cf40:	d000      	beq.n	800cf44 <_strtod_l+0x2ec>
 800cf42:	426d      	negs	r5, r5
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d14d      	bne.n	800cfe4 <_strtod_l+0x38c>
 800cf48:	9b04      	ldr	r3, [sp, #16]
 800cf4a:	4303      	orrs	r3, r0
 800cf4c:	f47f aec8 	bne.w	800cce0 <_strtod_l+0x88>
 800cf50:	2900      	cmp	r1, #0
 800cf52:	f47f aee2 	bne.w	800cd1a <_strtod_l+0xc2>
 800cf56:	2a69      	cmp	r2, #105	; 0x69
 800cf58:	d027      	beq.n	800cfaa <_strtod_l+0x352>
 800cf5a:	dc24      	bgt.n	800cfa6 <_strtod_l+0x34e>
 800cf5c:	2a49      	cmp	r2, #73	; 0x49
 800cf5e:	d024      	beq.n	800cfaa <_strtod_l+0x352>
 800cf60:	2a4e      	cmp	r2, #78	; 0x4e
 800cf62:	f47f aeda 	bne.w	800cd1a <_strtod_l+0xc2>
 800cf66:	4996      	ldr	r1, [pc, #600]	; (800d1c0 <_strtod_l+0x568>)
 800cf68:	a811      	add	r0, sp, #68	; 0x44
 800cf6a:	f000 fef7 	bl	800dd5c <__match>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f43f aed3 	beq.w	800cd1a <_strtod_l+0xc2>
 800cf74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b28      	cmp	r3, #40	; 0x28
 800cf7a:	d12d      	bne.n	800cfd8 <_strtod_l+0x380>
 800cf7c:	4991      	ldr	r1, [pc, #580]	; (800d1c4 <_strtod_l+0x56c>)
 800cf7e:	aa14      	add	r2, sp, #80	; 0x50
 800cf80:	a811      	add	r0, sp, #68	; 0x44
 800cf82:	f000 feff 	bl	800dd84 <__hexnan>
 800cf86:	2805      	cmp	r0, #5
 800cf88:	d126      	bne.n	800cfd8 <_strtod_l+0x380>
 800cf8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf8c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cf90:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800cf94:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800cf98:	e6a2      	b.n	800cce0 <_strtod_l+0x88>
 800cf9a:	250a      	movs	r5, #10
 800cf9c:	fb05 250c 	mla	r5, r5, ip, r2
 800cfa0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800cfa4:	e7b9      	b.n	800cf1a <_strtod_l+0x2c2>
 800cfa6:	2a6e      	cmp	r2, #110	; 0x6e
 800cfa8:	e7db      	b.n	800cf62 <_strtod_l+0x30a>
 800cfaa:	4987      	ldr	r1, [pc, #540]	; (800d1c8 <_strtod_l+0x570>)
 800cfac:	a811      	add	r0, sp, #68	; 0x44
 800cfae:	f000 fed5 	bl	800dd5c <__match>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	f43f aeb1 	beq.w	800cd1a <_strtod_l+0xc2>
 800cfb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfba:	4984      	ldr	r1, [pc, #528]	; (800d1cc <_strtod_l+0x574>)
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	a811      	add	r0, sp, #68	; 0x44
 800cfc0:	9311      	str	r3, [sp, #68]	; 0x44
 800cfc2:	f000 fecb 	bl	800dd5c <__match>
 800cfc6:	b910      	cbnz	r0, 800cfce <_strtod_l+0x376>
 800cfc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfca:	3301      	adds	r3, #1
 800cfcc:	9311      	str	r3, [sp, #68]	; 0x44
 800cfce:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800d1e0 <_strtod_l+0x588>
 800cfd2:	f04f 0800 	mov.w	r8, #0
 800cfd6:	e683      	b.n	800cce0 <_strtod_l+0x88>
 800cfd8:	487d      	ldr	r0, [pc, #500]	; (800d1d0 <_strtod_l+0x578>)
 800cfda:	f001 fcf9 	bl	800e9d0 <nan>
 800cfde:	ec59 8b10 	vmov	r8, r9, d0
 800cfe2:	e67d      	b.n	800cce0 <_strtod_l+0x88>
 800cfe4:	1bea      	subs	r2, r5, r7
 800cfe6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800cfea:	9207      	str	r2, [sp, #28]
 800cfec:	9a06      	ldr	r2, [sp, #24]
 800cfee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cff2:	2a00      	cmp	r2, #0
 800cff4:	bf08      	it	eq
 800cff6:	461a      	moveq	r2, r3
 800cff8:	2b10      	cmp	r3, #16
 800cffa:	9206      	str	r2, [sp, #24]
 800cffc:	461a      	mov	r2, r3
 800cffe:	bfa8      	it	ge
 800d000:	2210      	movge	r2, #16
 800d002:	2b09      	cmp	r3, #9
 800d004:	ec59 8b17 	vmov	r8, r9, d7
 800d008:	dd0c      	ble.n	800d024 <_strtod_l+0x3cc>
 800d00a:	4972      	ldr	r1, [pc, #456]	; (800d1d4 <_strtod_l+0x57c>)
 800d00c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d010:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800d014:	ee06 aa90 	vmov	s13, sl
 800d018:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d01c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d020:	ec59 8b16 	vmov	r8, r9, d6
 800d024:	2b0f      	cmp	r3, #15
 800d026:	dc36      	bgt.n	800d096 <_strtod_l+0x43e>
 800d028:	9907      	ldr	r1, [sp, #28]
 800d02a:	2900      	cmp	r1, #0
 800d02c:	f43f ae58 	beq.w	800cce0 <_strtod_l+0x88>
 800d030:	dd23      	ble.n	800d07a <_strtod_l+0x422>
 800d032:	2916      	cmp	r1, #22
 800d034:	dc0b      	bgt.n	800d04e <_strtod_l+0x3f6>
 800d036:	4b67      	ldr	r3, [pc, #412]	; (800d1d4 <_strtod_l+0x57c>)
 800d038:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d03c:	ed93 7b00 	vldr	d7, [r3]
 800d040:	ec49 8b16 	vmov	d6, r8, r9
 800d044:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d048:	ec59 8b17 	vmov	r8, r9, d7
 800d04c:	e648      	b.n	800cce0 <_strtod_l+0x88>
 800d04e:	9807      	ldr	r0, [sp, #28]
 800d050:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800d054:	4281      	cmp	r1, r0
 800d056:	db1e      	blt.n	800d096 <_strtod_l+0x43e>
 800d058:	4a5e      	ldr	r2, [pc, #376]	; (800d1d4 <_strtod_l+0x57c>)
 800d05a:	f1c3 030f 	rsb	r3, r3, #15
 800d05e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d062:	ed91 7b00 	vldr	d7, [r1]
 800d066:	ec49 8b16 	vmov	d6, r8, r9
 800d06a:	1ac3      	subs	r3, r0, r3
 800d06c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d070:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d074:	ed92 6b00 	vldr	d6, [r2]
 800d078:	e7e4      	b.n	800d044 <_strtod_l+0x3ec>
 800d07a:	9907      	ldr	r1, [sp, #28]
 800d07c:	3116      	adds	r1, #22
 800d07e:	db0a      	blt.n	800d096 <_strtod_l+0x43e>
 800d080:	4b54      	ldr	r3, [pc, #336]	; (800d1d4 <_strtod_l+0x57c>)
 800d082:	1b7d      	subs	r5, r7, r5
 800d084:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d088:	ed95 7b00 	vldr	d7, [r5]
 800d08c:	ec49 8b16 	vmov	d6, r8, r9
 800d090:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d094:	e7d8      	b.n	800d048 <_strtod_l+0x3f0>
 800d096:	9907      	ldr	r1, [sp, #28]
 800d098:	1a9a      	subs	r2, r3, r2
 800d09a:	440a      	add	r2, r1
 800d09c:	2a00      	cmp	r2, #0
 800d09e:	dd6f      	ble.n	800d180 <_strtod_l+0x528>
 800d0a0:	f012 000f 	ands.w	r0, r2, #15
 800d0a4:	d00a      	beq.n	800d0bc <_strtod_l+0x464>
 800d0a6:	494b      	ldr	r1, [pc, #300]	; (800d1d4 <_strtod_l+0x57c>)
 800d0a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d0ac:	ed91 7b00 	vldr	d7, [r1]
 800d0b0:	ec49 8b16 	vmov	d6, r8, r9
 800d0b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0b8:	ec59 8b17 	vmov	r8, r9, d7
 800d0bc:	f032 020f 	bics.w	r2, r2, #15
 800d0c0:	d04f      	beq.n	800d162 <_strtod_l+0x50a>
 800d0c2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800d0c6:	dd22      	ble.n	800d10e <_strtod_l+0x4b6>
 800d0c8:	2500      	movs	r5, #0
 800d0ca:	462e      	mov	r6, r5
 800d0cc:	9506      	str	r5, [sp, #24]
 800d0ce:	462f      	mov	r7, r5
 800d0d0:	2322      	movs	r3, #34	; 0x22
 800d0d2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800d1e0 <_strtod_l+0x588>
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	f04f 0800 	mov.w	r8, #0
 800d0dc:	9b06      	ldr	r3, [sp, #24]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f43f adfe 	beq.w	800cce0 <_strtod_l+0x88>
 800d0e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f000 ff48 	bl	800df7c <_Bfree>
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f000 ff44 	bl	800df7c <_Bfree>
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f000 ff40 	bl	800df7c <_Bfree>
 800d0fc:	9906      	ldr	r1, [sp, #24]
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 ff3c 	bl	800df7c <_Bfree>
 800d104:	4629      	mov	r1, r5
 800d106:	4620      	mov	r0, r4
 800d108:	f000 ff38 	bl	800df7c <_Bfree>
 800d10c:	e5e8      	b.n	800cce0 <_strtod_l+0x88>
 800d10e:	2000      	movs	r0, #0
 800d110:	ec49 8b17 	vmov	d7, r8, r9
 800d114:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800d1d8 <_strtod_l+0x580>
 800d118:	1112      	asrs	r2, r2, #4
 800d11a:	4601      	mov	r1, r0
 800d11c:	2a01      	cmp	r2, #1
 800d11e:	dc23      	bgt.n	800d168 <_strtod_l+0x510>
 800d120:	b108      	cbz	r0, 800d126 <_strtod_l+0x4ce>
 800d122:	ec59 8b17 	vmov	r8, r9, d7
 800d126:	4a2c      	ldr	r2, [pc, #176]	; (800d1d8 <_strtod_l+0x580>)
 800d128:	482c      	ldr	r0, [pc, #176]	; (800d1dc <_strtod_l+0x584>)
 800d12a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d12e:	ed92 7b00 	vldr	d7, [r2]
 800d132:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d136:	ec49 8b16 	vmov	d6, r8, r9
 800d13a:	4a29      	ldr	r2, [pc, #164]	; (800d1e0 <_strtod_l+0x588>)
 800d13c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d140:	ee17 1a90 	vmov	r1, s15
 800d144:	400a      	ands	r2, r1
 800d146:	4282      	cmp	r2, r0
 800d148:	ec59 8b17 	vmov	r8, r9, d7
 800d14c:	d8bc      	bhi.n	800d0c8 <_strtod_l+0x470>
 800d14e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800d152:	4282      	cmp	r2, r0
 800d154:	bf86      	itte	hi
 800d156:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800d1e4 <_strtod_l+0x58c>
 800d15a:	f04f 38ff 	movhi.w	r8, #4294967295
 800d15e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800d162:	2200      	movs	r2, #0
 800d164:	9204      	str	r2, [sp, #16]
 800d166:	e078      	b.n	800d25a <_strtod_l+0x602>
 800d168:	07d6      	lsls	r6, r2, #31
 800d16a:	d504      	bpl.n	800d176 <_strtod_l+0x51e>
 800d16c:	ed9c 6b00 	vldr	d6, [ip]
 800d170:	2001      	movs	r0, #1
 800d172:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d176:	3101      	adds	r1, #1
 800d178:	1052      	asrs	r2, r2, #1
 800d17a:	f10c 0c08 	add.w	ip, ip, #8
 800d17e:	e7cd      	b.n	800d11c <_strtod_l+0x4c4>
 800d180:	d0ef      	beq.n	800d162 <_strtod_l+0x50a>
 800d182:	4252      	negs	r2, r2
 800d184:	f012 000f 	ands.w	r0, r2, #15
 800d188:	d00a      	beq.n	800d1a0 <_strtod_l+0x548>
 800d18a:	4912      	ldr	r1, [pc, #72]	; (800d1d4 <_strtod_l+0x57c>)
 800d18c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d190:	ed91 7b00 	vldr	d7, [r1]
 800d194:	ec49 8b16 	vmov	d6, r8, r9
 800d198:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d19c:	ec59 8b17 	vmov	r8, r9, d7
 800d1a0:	1112      	asrs	r2, r2, #4
 800d1a2:	d0de      	beq.n	800d162 <_strtod_l+0x50a>
 800d1a4:	2a1f      	cmp	r2, #31
 800d1a6:	dd1f      	ble.n	800d1e8 <_strtod_l+0x590>
 800d1a8:	2500      	movs	r5, #0
 800d1aa:	462e      	mov	r6, r5
 800d1ac:	9506      	str	r5, [sp, #24]
 800d1ae:	462f      	mov	r7, r5
 800d1b0:	2322      	movs	r3, #34	; 0x22
 800d1b2:	f04f 0800 	mov.w	r8, #0
 800d1b6:	f04f 0900 	mov.w	r9, #0
 800d1ba:	6023      	str	r3, [r4, #0]
 800d1bc:	e78e      	b.n	800d0dc <_strtod_l+0x484>
 800d1be:	bf00      	nop
 800d1c0:	0801023d 	.word	0x0801023d
 800d1c4:	08010254 	.word	0x08010254
 800d1c8:	08010234 	.word	0x08010234
 800d1cc:	08010237 	.word	0x08010237
 800d1d0:	080104c7 	.word	0x080104c7
 800d1d4:	080103b8 	.word	0x080103b8
 800d1d8:	08010390 	.word	0x08010390
 800d1dc:	7ca00000 	.word	0x7ca00000
 800d1e0:	7ff00000 	.word	0x7ff00000
 800d1e4:	7fefffff 	.word	0x7fefffff
 800d1e8:	f012 0110 	ands.w	r1, r2, #16
 800d1ec:	bf18      	it	ne
 800d1ee:	216a      	movne	r1, #106	; 0x6a
 800d1f0:	9104      	str	r1, [sp, #16]
 800d1f2:	ec49 8b17 	vmov	d7, r8, r9
 800d1f6:	49be      	ldr	r1, [pc, #760]	; (800d4f0 <_strtod_l+0x898>)
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	07d6      	lsls	r6, r2, #31
 800d1fc:	d504      	bpl.n	800d208 <_strtod_l+0x5b0>
 800d1fe:	ed91 6b00 	vldr	d6, [r1]
 800d202:	2001      	movs	r0, #1
 800d204:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d208:	1052      	asrs	r2, r2, #1
 800d20a:	f101 0108 	add.w	r1, r1, #8
 800d20e:	d1f4      	bne.n	800d1fa <_strtod_l+0x5a2>
 800d210:	b108      	cbz	r0, 800d216 <_strtod_l+0x5be>
 800d212:	ec59 8b17 	vmov	r8, r9, d7
 800d216:	9a04      	ldr	r2, [sp, #16]
 800d218:	b1c2      	cbz	r2, 800d24c <_strtod_l+0x5f4>
 800d21a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800d21e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800d222:	2a00      	cmp	r2, #0
 800d224:	4648      	mov	r0, r9
 800d226:	dd11      	ble.n	800d24c <_strtod_l+0x5f4>
 800d228:	2a1f      	cmp	r2, #31
 800d22a:	f340 812e 	ble.w	800d48a <_strtod_l+0x832>
 800d22e:	2a34      	cmp	r2, #52	; 0x34
 800d230:	bfde      	ittt	le
 800d232:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800d236:	f04f 32ff 	movle.w	r2, #4294967295
 800d23a:	fa02 f101 	lslle.w	r1, r2, r1
 800d23e:	f04f 0800 	mov.w	r8, #0
 800d242:	bfcc      	ite	gt
 800d244:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d248:	ea01 0900 	andle.w	r9, r1, r0
 800d24c:	ec49 8b17 	vmov	d7, r8, r9
 800d250:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d258:	d0a6      	beq.n	800d1a8 <_strtod_l+0x550>
 800d25a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d25c:	9200      	str	r2, [sp, #0]
 800d25e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d260:	9a06      	ldr	r2, [sp, #24]
 800d262:	4620      	mov	r0, r4
 800d264:	f000 fef2 	bl	800e04c <__s2b>
 800d268:	9006      	str	r0, [sp, #24]
 800d26a:	2800      	cmp	r0, #0
 800d26c:	f43f af2c 	beq.w	800d0c8 <_strtod_l+0x470>
 800d270:	9b07      	ldr	r3, [sp, #28]
 800d272:	1b7d      	subs	r5, r7, r5
 800d274:	2b00      	cmp	r3, #0
 800d276:	bfb4      	ite	lt
 800d278:	462b      	movlt	r3, r5
 800d27a:	2300      	movge	r3, #0
 800d27c:	9309      	str	r3, [sp, #36]	; 0x24
 800d27e:	9b07      	ldr	r3, [sp, #28]
 800d280:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800d4d0 <_strtod_l+0x878>
 800d284:	ed9f ab94 	vldr	d10, [pc, #592]	; 800d4d8 <_strtod_l+0x880>
 800d288:	ed9f bb95 	vldr	d11, [pc, #596]	; 800d4e0 <_strtod_l+0x888>
 800d28c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d290:	2500      	movs	r5, #0
 800d292:	930c      	str	r3, [sp, #48]	; 0x30
 800d294:	462e      	mov	r6, r5
 800d296:	9b06      	ldr	r3, [sp, #24]
 800d298:	4620      	mov	r0, r4
 800d29a:	6859      	ldr	r1, [r3, #4]
 800d29c:	f000 fe2e 	bl	800defc <_Balloc>
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	f43f af14 	beq.w	800d0d0 <_strtod_l+0x478>
 800d2a8:	9b06      	ldr	r3, [sp, #24]
 800d2aa:	691a      	ldr	r2, [r3, #16]
 800d2ac:	3202      	adds	r2, #2
 800d2ae:	f103 010c 	add.w	r1, r3, #12
 800d2b2:	0092      	lsls	r2, r2, #2
 800d2b4:	300c      	adds	r0, #12
 800d2b6:	f000 fe13 	bl	800dee0 <memcpy>
 800d2ba:	ec49 8b10 	vmov	d0, r8, r9
 800d2be:	aa14      	add	r2, sp, #80	; 0x50
 800d2c0:	a913      	add	r1, sp, #76	; 0x4c
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f001 fa08 	bl	800e6d8 <__d2b>
 800d2c8:	ec49 8b18 	vmov	d8, r8, r9
 800d2cc:	9012      	str	r0, [sp, #72]	; 0x48
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f43f aefe 	beq.w	800d0d0 <_strtod_l+0x478>
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 ff52 	bl	800e180 <__i2b>
 800d2dc:	4606      	mov	r6, r0
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	f43f aef6 	beq.w	800d0d0 <_strtod_l+0x478>
 800d2e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	bfab      	itete	ge
 800d2ec:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800d2ee:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800d2f0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800d2f4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800d2f8:	bfac      	ite	ge
 800d2fa:	eb03 0b02 	addge.w	fp, r3, r2
 800d2fe:	eba2 0a03 	sublt.w	sl, r2, r3
 800d302:	9a04      	ldr	r2, [sp, #16]
 800d304:	1a9b      	subs	r3, r3, r2
 800d306:	440b      	add	r3, r1
 800d308:	4a7a      	ldr	r2, [pc, #488]	; (800d4f4 <_strtod_l+0x89c>)
 800d30a:	3b01      	subs	r3, #1
 800d30c:	4293      	cmp	r3, r2
 800d30e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800d312:	f280 80cd 	bge.w	800d4b0 <_strtod_l+0x858>
 800d316:	1ad2      	subs	r2, r2, r3
 800d318:	2a1f      	cmp	r2, #31
 800d31a:	eba1 0102 	sub.w	r1, r1, r2
 800d31e:	f04f 0001 	mov.w	r0, #1
 800d322:	f300 80b9 	bgt.w	800d498 <_strtod_l+0x840>
 800d326:	fa00 f302 	lsl.w	r3, r0, r2
 800d32a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d32c:	2300      	movs	r3, #0
 800d32e:	930a      	str	r3, [sp, #40]	; 0x28
 800d330:	eb0b 0301 	add.w	r3, fp, r1
 800d334:	9a04      	ldr	r2, [sp, #16]
 800d336:	459b      	cmp	fp, r3
 800d338:	448a      	add	sl, r1
 800d33a:	4492      	add	sl, r2
 800d33c:	465a      	mov	r2, fp
 800d33e:	bfa8      	it	ge
 800d340:	461a      	movge	r2, r3
 800d342:	4552      	cmp	r2, sl
 800d344:	bfa8      	it	ge
 800d346:	4652      	movge	r2, sl
 800d348:	2a00      	cmp	r2, #0
 800d34a:	bfc2      	ittt	gt
 800d34c:	1a9b      	subgt	r3, r3, r2
 800d34e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800d352:	ebab 0b02 	subgt.w	fp, fp, r2
 800d356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d358:	2a00      	cmp	r2, #0
 800d35a:	dd18      	ble.n	800d38e <_strtod_l+0x736>
 800d35c:	4631      	mov	r1, r6
 800d35e:	4620      	mov	r0, r4
 800d360:	930f      	str	r3, [sp, #60]	; 0x3c
 800d362:	f000 ffcd 	bl	800e300 <__pow5mult>
 800d366:	4606      	mov	r6, r0
 800d368:	2800      	cmp	r0, #0
 800d36a:	f43f aeb1 	beq.w	800d0d0 <_strtod_l+0x478>
 800d36e:	4601      	mov	r1, r0
 800d370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d372:	4620      	mov	r0, r4
 800d374:	f000 ff1a 	bl	800e1ac <__multiply>
 800d378:	900e      	str	r0, [sp, #56]	; 0x38
 800d37a:	2800      	cmp	r0, #0
 800d37c:	f43f aea8 	beq.w	800d0d0 <_strtod_l+0x478>
 800d380:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d382:	4620      	mov	r0, r4
 800d384:	f000 fdfa 	bl	800df7c <_Bfree>
 800d388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d38a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d38c:	9212      	str	r2, [sp, #72]	; 0x48
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f300 8093 	bgt.w	800d4ba <_strtod_l+0x862>
 800d394:	9b07      	ldr	r3, [sp, #28]
 800d396:	2b00      	cmp	r3, #0
 800d398:	dd08      	ble.n	800d3ac <_strtod_l+0x754>
 800d39a:	4639      	mov	r1, r7
 800d39c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f000 ffae 	bl	800e300 <__pow5mult>
 800d3a4:	4607      	mov	r7, r0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	f43f ae92 	beq.w	800d0d0 <_strtod_l+0x478>
 800d3ac:	f1ba 0f00 	cmp.w	sl, #0
 800d3b0:	dd08      	ble.n	800d3c4 <_strtod_l+0x76c>
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	4652      	mov	r2, sl
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 fffc 	bl	800e3b4 <__lshift>
 800d3bc:	4607      	mov	r7, r0
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f43f ae86 	beq.w	800d0d0 <_strtod_l+0x478>
 800d3c4:	f1bb 0f00 	cmp.w	fp, #0
 800d3c8:	dd08      	ble.n	800d3dc <_strtod_l+0x784>
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	465a      	mov	r2, fp
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 fff0 	bl	800e3b4 <__lshift>
 800d3d4:	4606      	mov	r6, r0
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	f43f ae7a 	beq.w	800d0d0 <_strtod_l+0x478>
 800d3dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d3de:	463a      	mov	r2, r7
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f001 f873 	bl	800e4cc <__mdiff>
 800d3e6:	4605      	mov	r5, r0
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	f43f ae71 	beq.w	800d0d0 <_strtod_l+0x478>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800d3f4:	60c3      	str	r3, [r0, #12]
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	f001 f84c 	bl	800e494 <__mcmp>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	da7d      	bge.n	800d4fc <_strtod_l+0x8a4>
 800d400:	ea5a 0308 	orrs.w	r3, sl, r8
 800d404:	f040 80a3 	bne.w	800d54e <_strtod_l+0x8f6>
 800d408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f040 809e 	bne.w	800d54e <_strtod_l+0x8f6>
 800d412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d416:	0d1b      	lsrs	r3, r3, #20
 800d418:	051b      	lsls	r3, r3, #20
 800d41a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d41e:	f240 8096 	bls.w	800d54e <_strtod_l+0x8f6>
 800d422:	696b      	ldr	r3, [r5, #20]
 800d424:	b91b      	cbnz	r3, 800d42e <_strtod_l+0x7d6>
 800d426:	692b      	ldr	r3, [r5, #16]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	f340 8090 	ble.w	800d54e <_strtod_l+0x8f6>
 800d42e:	4629      	mov	r1, r5
 800d430:	2201      	movs	r2, #1
 800d432:	4620      	mov	r0, r4
 800d434:	f000 ffbe 	bl	800e3b4 <__lshift>
 800d438:	4631      	mov	r1, r6
 800d43a:	4605      	mov	r5, r0
 800d43c:	f001 f82a 	bl	800e494 <__mcmp>
 800d440:	2800      	cmp	r0, #0
 800d442:	f340 8084 	ble.w	800d54e <_strtod_l+0x8f6>
 800d446:	9904      	ldr	r1, [sp, #16]
 800d448:	4a2b      	ldr	r2, [pc, #172]	; (800d4f8 <_strtod_l+0x8a0>)
 800d44a:	464b      	mov	r3, r9
 800d44c:	2900      	cmp	r1, #0
 800d44e:	f000 809d 	beq.w	800d58c <_strtod_l+0x934>
 800d452:	ea02 0109 	and.w	r1, r2, r9
 800d456:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d45a:	f300 8097 	bgt.w	800d58c <_strtod_l+0x934>
 800d45e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d462:	f77f aea5 	ble.w	800d1b0 <_strtod_l+0x558>
 800d466:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800d4e8 <_strtod_l+0x890>
 800d46a:	ec49 8b16 	vmov	d6, r8, r9
 800d46e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d472:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d476:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	bf08      	it	eq
 800d47e:	2322      	moveq	r3, #34	; 0x22
 800d480:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d484:	bf08      	it	eq
 800d486:	6023      	streq	r3, [r4, #0]
 800d488:	e62c      	b.n	800d0e4 <_strtod_l+0x48c>
 800d48a:	f04f 31ff 	mov.w	r1, #4294967295
 800d48e:	fa01 f202 	lsl.w	r2, r1, r2
 800d492:	ea02 0808 	and.w	r8, r2, r8
 800d496:	e6d9      	b.n	800d24c <_strtod_l+0x5f4>
 800d498:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800d49c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d4a0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800d4a4:	33e2      	adds	r3, #226	; 0xe2
 800d4a6:	fa00 f303 	lsl.w	r3, r0, r3
 800d4aa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800d4ae:	e73f      	b.n	800d330 <_strtod_l+0x6d8>
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d4b8:	e73a      	b.n	800d330 <_strtod_l+0x6d8>
 800d4ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f000 ff78 	bl	800e3b4 <__lshift>
 800d4c4:	9012      	str	r0, [sp, #72]	; 0x48
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f47f af64 	bne.w	800d394 <_strtod_l+0x73c>
 800d4cc:	e600      	b.n	800d0d0 <_strtod_l+0x478>
 800d4ce:	bf00      	nop
 800d4d0:	94a03595 	.word	0x94a03595
 800d4d4:	3fcfffff 	.word	0x3fcfffff
 800d4d8:	94a03595 	.word	0x94a03595
 800d4dc:	3fdfffff 	.word	0x3fdfffff
 800d4e0:	35afe535 	.word	0x35afe535
 800d4e4:	3fe00000 	.word	0x3fe00000
 800d4e8:	00000000 	.word	0x00000000
 800d4ec:	39500000 	.word	0x39500000
 800d4f0:	08010268 	.word	0x08010268
 800d4f4:	fffffc02 	.word	0xfffffc02
 800d4f8:	7ff00000 	.word	0x7ff00000
 800d4fc:	46cb      	mov	fp, r9
 800d4fe:	d15f      	bne.n	800d5c0 <_strtod_l+0x968>
 800d500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d504:	f1ba 0f00 	cmp.w	sl, #0
 800d508:	d02a      	beq.n	800d560 <_strtod_l+0x908>
 800d50a:	4aa7      	ldr	r2, [pc, #668]	; (800d7a8 <_strtod_l+0xb50>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d12b      	bne.n	800d568 <_strtod_l+0x910>
 800d510:	9b04      	ldr	r3, [sp, #16]
 800d512:	4642      	mov	r2, r8
 800d514:	b1fb      	cbz	r3, 800d556 <_strtod_l+0x8fe>
 800d516:	4ba5      	ldr	r3, [pc, #660]	; (800d7ac <_strtod_l+0xb54>)
 800d518:	ea09 0303 	and.w	r3, r9, r3
 800d51c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d520:	f04f 31ff 	mov.w	r1, #4294967295
 800d524:	d81a      	bhi.n	800d55c <_strtod_l+0x904>
 800d526:	0d1b      	lsrs	r3, r3, #20
 800d528:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d52c:	fa01 f303 	lsl.w	r3, r1, r3
 800d530:	429a      	cmp	r2, r3
 800d532:	d119      	bne.n	800d568 <_strtod_l+0x910>
 800d534:	4b9e      	ldr	r3, [pc, #632]	; (800d7b0 <_strtod_l+0xb58>)
 800d536:	459b      	cmp	fp, r3
 800d538:	d102      	bne.n	800d540 <_strtod_l+0x8e8>
 800d53a:	3201      	adds	r2, #1
 800d53c:	f43f adc8 	beq.w	800d0d0 <_strtod_l+0x478>
 800d540:	4b9a      	ldr	r3, [pc, #616]	; (800d7ac <_strtod_l+0xb54>)
 800d542:	ea0b 0303 	and.w	r3, fp, r3
 800d546:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d54a:	f04f 0800 	mov.w	r8, #0
 800d54e:	9b04      	ldr	r3, [sp, #16]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d188      	bne.n	800d466 <_strtod_l+0x80e>
 800d554:	e5c6      	b.n	800d0e4 <_strtod_l+0x48c>
 800d556:	f04f 33ff 	mov.w	r3, #4294967295
 800d55a:	e7e9      	b.n	800d530 <_strtod_l+0x8d8>
 800d55c:	460b      	mov	r3, r1
 800d55e:	e7e7      	b.n	800d530 <_strtod_l+0x8d8>
 800d560:	ea53 0308 	orrs.w	r3, r3, r8
 800d564:	f43f af6f 	beq.w	800d446 <_strtod_l+0x7ee>
 800d568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d56a:	b1cb      	cbz	r3, 800d5a0 <_strtod_l+0x948>
 800d56c:	ea13 0f0b 	tst.w	r3, fp
 800d570:	d0ed      	beq.n	800d54e <_strtod_l+0x8f6>
 800d572:	9a04      	ldr	r2, [sp, #16]
 800d574:	4640      	mov	r0, r8
 800d576:	4649      	mov	r1, r9
 800d578:	f1ba 0f00 	cmp.w	sl, #0
 800d57c:	d014      	beq.n	800d5a8 <_strtod_l+0x950>
 800d57e:	f7ff fb4f 	bl	800cc20 <sulp>
 800d582:	ee38 7b00 	vadd.f64	d7, d8, d0
 800d586:	ec59 8b17 	vmov	r8, r9, d7
 800d58a:	e7e0      	b.n	800d54e <_strtod_l+0x8f6>
 800d58c:	4013      	ands	r3, r2
 800d58e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d592:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d596:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d59a:	f04f 38ff 	mov.w	r8, #4294967295
 800d59e:	e7d6      	b.n	800d54e <_strtod_l+0x8f6>
 800d5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a2:	ea13 0f08 	tst.w	r3, r8
 800d5a6:	e7e3      	b.n	800d570 <_strtod_l+0x918>
 800d5a8:	f7ff fb3a 	bl	800cc20 <sulp>
 800d5ac:	ee38 0b40 	vsub.f64	d0, d8, d0
 800d5b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b8:	ec59 8b10 	vmov	r8, r9, d0
 800d5bc:	d1c7      	bne.n	800d54e <_strtod_l+0x8f6>
 800d5be:	e5f7      	b.n	800d1b0 <_strtod_l+0x558>
 800d5c0:	4631      	mov	r1, r6
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f001 f8e4 	bl	800e790 <__ratio>
 800d5c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800d5cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d4:	d865      	bhi.n	800d6a2 <_strtod_l+0xa4a>
 800d5d6:	f1ba 0f00 	cmp.w	sl, #0
 800d5da:	d042      	beq.n	800d662 <_strtod_l+0xa0a>
 800d5dc:	4b75      	ldr	r3, [pc, #468]	; (800d7b4 <_strtod_l+0xb5c>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800d5e4:	4871      	ldr	r0, [pc, #452]	; (800d7ac <_strtod_l+0xb54>)
 800d5e6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800d7c0 <_strtod_l+0xb68>
 800d5ea:	ea0b 0100 	and.w	r1, fp, r0
 800d5ee:	4561      	cmp	r1, ip
 800d5f0:	f040 808e 	bne.w	800d710 <_strtod_l+0xab8>
 800d5f4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800d5f8:	ec49 8b10 	vmov	d0, r8, r9
 800d5fc:	ec43 2b1c 	vmov	d12, r2, r3
 800d600:	910a      	str	r1, [sp, #40]	; 0x28
 800d602:	f000 ffed 	bl	800e5e0 <__ulp>
 800d606:	ec49 8b1e 	vmov	d14, r8, r9
 800d60a:	4868      	ldr	r0, [pc, #416]	; (800d7ac <_strtod_l+0xb54>)
 800d60c:	eeac eb00 	vfma.f64	d14, d12, d0
 800d610:	ee1e 3a90 	vmov	r3, s29
 800d614:	4a68      	ldr	r2, [pc, #416]	; (800d7b8 <_strtod_l+0xb60>)
 800d616:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d618:	4018      	ands	r0, r3
 800d61a:	4290      	cmp	r0, r2
 800d61c:	ec59 8b1e 	vmov	r8, r9, d14
 800d620:	d94e      	bls.n	800d6c0 <_strtod_l+0xa68>
 800d622:	ee18 3a90 	vmov	r3, s17
 800d626:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d104      	bne.n	800d638 <_strtod_l+0x9e0>
 800d62e:	ee18 3a10 	vmov	r3, s16
 800d632:	3301      	adds	r3, #1
 800d634:	f43f ad4c 	beq.w	800d0d0 <_strtod_l+0x478>
 800d638:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800d7b0 <_strtod_l+0xb58>
 800d63c:	f04f 38ff 	mov.w	r8, #4294967295
 800d640:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d642:	4620      	mov	r0, r4
 800d644:	f000 fc9a 	bl	800df7c <_Bfree>
 800d648:	4639      	mov	r1, r7
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 fc96 	bl	800df7c <_Bfree>
 800d650:	4631      	mov	r1, r6
 800d652:	4620      	mov	r0, r4
 800d654:	f000 fc92 	bl	800df7c <_Bfree>
 800d658:	4629      	mov	r1, r5
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 fc8e 	bl	800df7c <_Bfree>
 800d660:	e619      	b.n	800d296 <_strtod_l+0x63e>
 800d662:	f1b8 0f00 	cmp.w	r8, #0
 800d666:	d112      	bne.n	800d68e <_strtod_l+0xa36>
 800d668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d66c:	b9b3      	cbnz	r3, 800d69c <_strtod_l+0xa44>
 800d66e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d672:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800d67e:	bf58      	it	pl
 800d680:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800d684:	eeb1 7b4d 	vneg.f64	d7, d13
 800d688:	ec53 2b17 	vmov	r2, r3, d7
 800d68c:	e7aa      	b.n	800d5e4 <_strtod_l+0x98c>
 800d68e:	f1b8 0f01 	cmp.w	r8, #1
 800d692:	d103      	bne.n	800d69c <_strtod_l+0xa44>
 800d694:	f1b9 0f00 	cmp.w	r9, #0
 800d698:	f43f ad8a 	beq.w	800d1b0 <_strtod_l+0x558>
 800d69c:	4b47      	ldr	r3, [pc, #284]	; (800d7bc <_strtod_l+0xb64>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	e79e      	b.n	800d5e0 <_strtod_l+0x988>
 800d6a2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800d6a6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800d6aa:	f1ba 0f00 	cmp.w	sl, #0
 800d6ae:	d104      	bne.n	800d6ba <_strtod_l+0xa62>
 800d6b0:	eeb1 7b4d 	vneg.f64	d7, d13
 800d6b4:	ec53 2b17 	vmov	r2, r3, d7
 800d6b8:	e794      	b.n	800d5e4 <_strtod_l+0x98c>
 800d6ba:	eeb0 7b4d 	vmov.f64	d7, d13
 800d6be:	e7f9      	b.n	800d6b4 <_strtod_l+0xa5c>
 800d6c0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d6c4:	9b04      	ldr	r3, [sp, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1ba      	bne.n	800d640 <_strtod_l+0x9e8>
 800d6ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d6ce:	0d1b      	lsrs	r3, r3, #20
 800d6d0:	051b      	lsls	r3, r3, #20
 800d6d2:	4299      	cmp	r1, r3
 800d6d4:	d1b4      	bne.n	800d640 <_strtod_l+0x9e8>
 800d6d6:	ec51 0b1d 	vmov	r0, r1, d13
 800d6da:	f7f3 f82d 	bl	8000738 <__aeabi_d2lz>
 800d6de:	f7f2 ffe5 	bl	80006ac <__aeabi_l2d>
 800d6e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6e6:	ec41 0b17 	vmov	d7, r0, r1
 800d6ea:	ea43 0308 	orr.w	r3, r3, r8
 800d6ee:	ea53 030a 	orrs.w	r3, r3, sl
 800d6f2:	ee3d db47 	vsub.f64	d13, d13, d7
 800d6f6:	d03c      	beq.n	800d772 <_strtod_l+0xb1a>
 800d6f8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800d6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d700:	f53f acf0 	bmi.w	800d0e4 <_strtod_l+0x48c>
 800d704:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70c:	dd98      	ble.n	800d640 <_strtod_l+0x9e8>
 800d70e:	e4e9      	b.n	800d0e4 <_strtod_l+0x48c>
 800d710:	9804      	ldr	r0, [sp, #16]
 800d712:	b1f0      	cbz	r0, 800d752 <_strtod_l+0xafa>
 800d714:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800d718:	d81b      	bhi.n	800d752 <_strtod_l+0xafa>
 800d71a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d7a0 <_strtod_l+0xb48>
 800d71e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800d722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d726:	d811      	bhi.n	800d74c <_strtod_l+0xaf4>
 800d728:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800d72c:	ee1d 3a10 	vmov	r3, s26
 800d730:	2b01      	cmp	r3, #1
 800d732:	bf38      	it	cc
 800d734:	2301      	movcc	r3, #1
 800d736:	ee0d 3a10 	vmov	s26, r3
 800d73a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800d73e:	f1ba 0f00 	cmp.w	sl, #0
 800d742:	d113      	bne.n	800d76c <_strtod_l+0xb14>
 800d744:	eeb1 7b4d 	vneg.f64	d7, d13
 800d748:	ec53 2b17 	vmov	r2, r3, d7
 800d74c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800d750:	1a43      	subs	r3, r0, r1
 800d752:	eeb0 0b48 	vmov.f64	d0, d8
 800d756:	ec43 2b1c 	vmov	d12, r2, r3
 800d75a:	910a      	str	r1, [sp, #40]	; 0x28
 800d75c:	f000 ff40 	bl	800e5e0 <__ulp>
 800d760:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d762:	eeac 8b00 	vfma.f64	d8, d12, d0
 800d766:	ec59 8b18 	vmov	r8, r9, d8
 800d76a:	e7ab      	b.n	800d6c4 <_strtod_l+0xa6c>
 800d76c:	eeb0 7b4d 	vmov.f64	d7, d13
 800d770:	e7ea      	b.n	800d748 <_strtod_l+0xaf0>
 800d772:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800d776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77a:	f57f af61 	bpl.w	800d640 <_strtod_l+0x9e8>
 800d77e:	e4b1      	b.n	800d0e4 <_strtod_l+0x48c>
 800d780:	2300      	movs	r3, #0
 800d782:	9308      	str	r3, [sp, #32]
 800d784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d788:	6013      	str	r3, [r2, #0]
 800d78a:	f7ff baad 	b.w	800cce8 <_strtod_l+0x90>
 800d78e:	2a65      	cmp	r2, #101	; 0x65
 800d790:	f43f ab9f 	beq.w	800ced2 <_strtod_l+0x27a>
 800d794:	2a45      	cmp	r2, #69	; 0x45
 800d796:	f43f ab9c 	beq.w	800ced2 <_strtod_l+0x27a>
 800d79a:	2101      	movs	r1, #1
 800d79c:	f7ff bbd4 	b.w	800cf48 <_strtod_l+0x2f0>
 800d7a0:	ffc00000 	.word	0xffc00000
 800d7a4:	41dfffff 	.word	0x41dfffff
 800d7a8:	000fffff 	.word	0x000fffff
 800d7ac:	7ff00000 	.word	0x7ff00000
 800d7b0:	7fefffff 	.word	0x7fefffff
 800d7b4:	3ff00000 	.word	0x3ff00000
 800d7b8:	7c9fffff 	.word	0x7c9fffff
 800d7bc:	bff00000 	.word	0xbff00000
 800d7c0:	7fe00000 	.word	0x7fe00000

0800d7c4 <strtod>:
 800d7c4:	460a      	mov	r2, r1
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	4802      	ldr	r0, [pc, #8]	; (800d7d4 <strtod+0x10>)
 800d7ca:	4b03      	ldr	r3, [pc, #12]	; (800d7d8 <strtod+0x14>)
 800d7cc:	6800      	ldr	r0, [r0, #0]
 800d7ce:	f7ff ba43 	b.w	800cc58 <_strtod_l>
 800d7d2:	bf00      	nop
 800d7d4:	24000074 	.word	0x24000074
 800d7d8:	240000dc 	.word	0x240000dc

0800d7dc <rshift>:
 800d7dc:	6903      	ldr	r3, [r0, #16]
 800d7de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d7e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d7ea:	f100 0414 	add.w	r4, r0, #20
 800d7ee:	dd45      	ble.n	800d87c <rshift+0xa0>
 800d7f0:	f011 011f 	ands.w	r1, r1, #31
 800d7f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7fc:	d10c      	bne.n	800d818 <rshift+0x3c>
 800d7fe:	f100 0710 	add.w	r7, r0, #16
 800d802:	4629      	mov	r1, r5
 800d804:	42b1      	cmp	r1, r6
 800d806:	d334      	bcc.n	800d872 <rshift+0x96>
 800d808:	1a9b      	subs	r3, r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	1eea      	subs	r2, r5, #3
 800d80e:	4296      	cmp	r6, r2
 800d810:	bf38      	it	cc
 800d812:	2300      	movcc	r3, #0
 800d814:	4423      	add	r3, r4
 800d816:	e015      	b.n	800d844 <rshift+0x68>
 800d818:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d81c:	f1c1 0820 	rsb	r8, r1, #32
 800d820:	40cf      	lsrs	r7, r1
 800d822:	f105 0e04 	add.w	lr, r5, #4
 800d826:	46a1      	mov	r9, r4
 800d828:	4576      	cmp	r6, lr
 800d82a:	46f4      	mov	ip, lr
 800d82c:	d815      	bhi.n	800d85a <rshift+0x7e>
 800d82e:	1a9a      	subs	r2, r3, r2
 800d830:	0092      	lsls	r2, r2, #2
 800d832:	3a04      	subs	r2, #4
 800d834:	3501      	adds	r5, #1
 800d836:	42ae      	cmp	r6, r5
 800d838:	bf38      	it	cc
 800d83a:	2200      	movcc	r2, #0
 800d83c:	18a3      	adds	r3, r4, r2
 800d83e:	50a7      	str	r7, [r4, r2]
 800d840:	b107      	cbz	r7, 800d844 <rshift+0x68>
 800d842:	3304      	adds	r3, #4
 800d844:	1b1a      	subs	r2, r3, r4
 800d846:	42a3      	cmp	r3, r4
 800d848:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d84c:	bf08      	it	eq
 800d84e:	2300      	moveq	r3, #0
 800d850:	6102      	str	r2, [r0, #16]
 800d852:	bf08      	it	eq
 800d854:	6143      	streq	r3, [r0, #20]
 800d856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85a:	f8dc c000 	ldr.w	ip, [ip]
 800d85e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d862:	ea4c 0707 	orr.w	r7, ip, r7
 800d866:	f849 7b04 	str.w	r7, [r9], #4
 800d86a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d86e:	40cf      	lsrs	r7, r1
 800d870:	e7da      	b.n	800d828 <rshift+0x4c>
 800d872:	f851 cb04 	ldr.w	ip, [r1], #4
 800d876:	f847 cf04 	str.w	ip, [r7, #4]!
 800d87a:	e7c3      	b.n	800d804 <rshift+0x28>
 800d87c:	4623      	mov	r3, r4
 800d87e:	e7e1      	b.n	800d844 <rshift+0x68>

0800d880 <__hexdig_fun>:
 800d880:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d884:	2b09      	cmp	r3, #9
 800d886:	d802      	bhi.n	800d88e <__hexdig_fun+0xe>
 800d888:	3820      	subs	r0, #32
 800d88a:	b2c0      	uxtb	r0, r0
 800d88c:	4770      	bx	lr
 800d88e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d892:	2b05      	cmp	r3, #5
 800d894:	d801      	bhi.n	800d89a <__hexdig_fun+0x1a>
 800d896:	3847      	subs	r0, #71	; 0x47
 800d898:	e7f7      	b.n	800d88a <__hexdig_fun+0xa>
 800d89a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d89e:	2b05      	cmp	r3, #5
 800d8a0:	d801      	bhi.n	800d8a6 <__hexdig_fun+0x26>
 800d8a2:	3827      	subs	r0, #39	; 0x27
 800d8a4:	e7f1      	b.n	800d88a <__hexdig_fun+0xa>
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	4770      	bx	lr
	...

0800d8ac <__gethex>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	ed2d 8b02 	vpush	{d8}
 800d8b4:	b089      	sub	sp, #36	; 0x24
 800d8b6:	ee08 0a10 	vmov	s16, r0
 800d8ba:	9304      	str	r3, [sp, #16]
 800d8bc:	4bb4      	ldr	r3, [pc, #720]	; (800db90 <__gethex+0x2e4>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	468b      	mov	fp, r1
 800d8c6:	4690      	mov	r8, r2
 800d8c8:	f7f2 fd0a 	bl	80002e0 <strlen>
 800d8cc:	9b01      	ldr	r3, [sp, #4]
 800d8ce:	f8db 2000 	ldr.w	r2, [fp]
 800d8d2:	4403      	add	r3, r0
 800d8d4:	4682      	mov	sl, r0
 800d8d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d8da:	9305      	str	r3, [sp, #20]
 800d8dc:	1c93      	adds	r3, r2, #2
 800d8de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d8e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d8e6:	32fe      	adds	r2, #254	; 0xfe
 800d8e8:	18d1      	adds	r1, r2, r3
 800d8ea:	461f      	mov	r7, r3
 800d8ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8f0:	9100      	str	r1, [sp, #0]
 800d8f2:	2830      	cmp	r0, #48	; 0x30
 800d8f4:	d0f8      	beq.n	800d8e8 <__gethex+0x3c>
 800d8f6:	f7ff ffc3 	bl	800d880 <__hexdig_fun>
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d13a      	bne.n	800d976 <__gethex+0xca>
 800d900:	9901      	ldr	r1, [sp, #4]
 800d902:	4652      	mov	r2, sl
 800d904:	4638      	mov	r0, r7
 800d906:	f001 f87b 	bl	800ea00 <strncmp>
 800d90a:	4605      	mov	r5, r0
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d168      	bne.n	800d9e2 <__gethex+0x136>
 800d910:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d914:	eb07 060a 	add.w	r6, r7, sl
 800d918:	f7ff ffb2 	bl	800d880 <__hexdig_fun>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d062      	beq.n	800d9e6 <__gethex+0x13a>
 800d920:	4633      	mov	r3, r6
 800d922:	7818      	ldrb	r0, [r3, #0]
 800d924:	2830      	cmp	r0, #48	; 0x30
 800d926:	461f      	mov	r7, r3
 800d928:	f103 0301 	add.w	r3, r3, #1
 800d92c:	d0f9      	beq.n	800d922 <__gethex+0x76>
 800d92e:	f7ff ffa7 	bl	800d880 <__hexdig_fun>
 800d932:	2301      	movs	r3, #1
 800d934:	fab0 f480 	clz	r4, r0
 800d938:	0964      	lsrs	r4, r4, #5
 800d93a:	4635      	mov	r5, r6
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	463a      	mov	r2, r7
 800d940:	4616      	mov	r6, r2
 800d942:	3201      	adds	r2, #1
 800d944:	7830      	ldrb	r0, [r6, #0]
 800d946:	f7ff ff9b 	bl	800d880 <__hexdig_fun>
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d1f8      	bne.n	800d940 <__gethex+0x94>
 800d94e:	9901      	ldr	r1, [sp, #4]
 800d950:	4652      	mov	r2, sl
 800d952:	4630      	mov	r0, r6
 800d954:	f001 f854 	bl	800ea00 <strncmp>
 800d958:	b980      	cbnz	r0, 800d97c <__gethex+0xd0>
 800d95a:	b94d      	cbnz	r5, 800d970 <__gethex+0xc4>
 800d95c:	eb06 050a 	add.w	r5, r6, sl
 800d960:	462a      	mov	r2, r5
 800d962:	4616      	mov	r6, r2
 800d964:	3201      	adds	r2, #1
 800d966:	7830      	ldrb	r0, [r6, #0]
 800d968:	f7ff ff8a 	bl	800d880 <__hexdig_fun>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d1f8      	bne.n	800d962 <__gethex+0xb6>
 800d970:	1bad      	subs	r5, r5, r6
 800d972:	00ad      	lsls	r5, r5, #2
 800d974:	e004      	b.n	800d980 <__gethex+0xd4>
 800d976:	2400      	movs	r4, #0
 800d978:	4625      	mov	r5, r4
 800d97a:	e7e0      	b.n	800d93e <__gethex+0x92>
 800d97c:	2d00      	cmp	r5, #0
 800d97e:	d1f7      	bne.n	800d970 <__gethex+0xc4>
 800d980:	7833      	ldrb	r3, [r6, #0]
 800d982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d986:	2b50      	cmp	r3, #80	; 0x50
 800d988:	d13b      	bne.n	800da02 <__gethex+0x156>
 800d98a:	7873      	ldrb	r3, [r6, #1]
 800d98c:	2b2b      	cmp	r3, #43	; 0x2b
 800d98e:	d02c      	beq.n	800d9ea <__gethex+0x13e>
 800d990:	2b2d      	cmp	r3, #45	; 0x2d
 800d992:	d02e      	beq.n	800d9f2 <__gethex+0x146>
 800d994:	1c71      	adds	r1, r6, #1
 800d996:	f04f 0900 	mov.w	r9, #0
 800d99a:	7808      	ldrb	r0, [r1, #0]
 800d99c:	f7ff ff70 	bl	800d880 <__hexdig_fun>
 800d9a0:	1e43      	subs	r3, r0, #1
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b18      	cmp	r3, #24
 800d9a6:	d82c      	bhi.n	800da02 <__gethex+0x156>
 800d9a8:	f1a0 0210 	sub.w	r2, r0, #16
 800d9ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9b0:	f7ff ff66 	bl	800d880 <__hexdig_fun>
 800d9b4:	1e43      	subs	r3, r0, #1
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b18      	cmp	r3, #24
 800d9ba:	d91d      	bls.n	800d9f8 <__gethex+0x14c>
 800d9bc:	f1b9 0f00 	cmp.w	r9, #0
 800d9c0:	d000      	beq.n	800d9c4 <__gethex+0x118>
 800d9c2:	4252      	negs	r2, r2
 800d9c4:	4415      	add	r5, r2
 800d9c6:	f8cb 1000 	str.w	r1, [fp]
 800d9ca:	b1e4      	cbz	r4, 800da06 <__gethex+0x15a>
 800d9cc:	9b00      	ldr	r3, [sp, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	bf14      	ite	ne
 800d9d2:	2700      	movne	r7, #0
 800d9d4:	2706      	moveq	r7, #6
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	b009      	add	sp, #36	; 0x24
 800d9da:	ecbd 8b02 	vpop	{d8}
 800d9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e2:	463e      	mov	r6, r7
 800d9e4:	4625      	mov	r5, r4
 800d9e6:	2401      	movs	r4, #1
 800d9e8:	e7ca      	b.n	800d980 <__gethex+0xd4>
 800d9ea:	f04f 0900 	mov.w	r9, #0
 800d9ee:	1cb1      	adds	r1, r6, #2
 800d9f0:	e7d3      	b.n	800d99a <__gethex+0xee>
 800d9f2:	f04f 0901 	mov.w	r9, #1
 800d9f6:	e7fa      	b.n	800d9ee <__gethex+0x142>
 800d9f8:	230a      	movs	r3, #10
 800d9fa:	fb03 0202 	mla	r2, r3, r2, r0
 800d9fe:	3a10      	subs	r2, #16
 800da00:	e7d4      	b.n	800d9ac <__gethex+0x100>
 800da02:	4631      	mov	r1, r6
 800da04:	e7df      	b.n	800d9c6 <__gethex+0x11a>
 800da06:	1bf3      	subs	r3, r6, r7
 800da08:	3b01      	subs	r3, #1
 800da0a:	4621      	mov	r1, r4
 800da0c:	2b07      	cmp	r3, #7
 800da0e:	dc0b      	bgt.n	800da28 <__gethex+0x17c>
 800da10:	ee18 0a10 	vmov	r0, s16
 800da14:	f000 fa72 	bl	800defc <_Balloc>
 800da18:	4604      	mov	r4, r0
 800da1a:	b940      	cbnz	r0, 800da2e <__gethex+0x182>
 800da1c:	4b5d      	ldr	r3, [pc, #372]	; (800db94 <__gethex+0x2e8>)
 800da1e:	4602      	mov	r2, r0
 800da20:	21de      	movs	r1, #222	; 0xde
 800da22:	485d      	ldr	r0, [pc, #372]	; (800db98 <__gethex+0x2ec>)
 800da24:	f001 f80e 	bl	800ea44 <__assert_func>
 800da28:	3101      	adds	r1, #1
 800da2a:	105b      	asrs	r3, r3, #1
 800da2c:	e7ee      	b.n	800da0c <__gethex+0x160>
 800da2e:	f100 0914 	add.w	r9, r0, #20
 800da32:	f04f 0b00 	mov.w	fp, #0
 800da36:	f1ca 0301 	rsb	r3, sl, #1
 800da3a:	f8cd 9008 	str.w	r9, [sp, #8]
 800da3e:	f8cd b000 	str.w	fp, [sp]
 800da42:	9306      	str	r3, [sp, #24]
 800da44:	42b7      	cmp	r7, r6
 800da46:	d340      	bcc.n	800daca <__gethex+0x21e>
 800da48:	9802      	ldr	r0, [sp, #8]
 800da4a:	9b00      	ldr	r3, [sp, #0]
 800da4c:	f840 3b04 	str.w	r3, [r0], #4
 800da50:	eba0 0009 	sub.w	r0, r0, r9
 800da54:	1080      	asrs	r0, r0, #2
 800da56:	0146      	lsls	r6, r0, #5
 800da58:	6120      	str	r0, [r4, #16]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 fb40 	bl	800e0e0 <__hi0bits>
 800da60:	1a30      	subs	r0, r6, r0
 800da62:	f8d8 6000 	ldr.w	r6, [r8]
 800da66:	42b0      	cmp	r0, r6
 800da68:	dd63      	ble.n	800db32 <__gethex+0x286>
 800da6a:	1b87      	subs	r7, r0, r6
 800da6c:	4639      	mov	r1, r7
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 fee1 	bl	800e836 <__any_on>
 800da74:	4682      	mov	sl, r0
 800da76:	b1a8      	cbz	r0, 800daa4 <__gethex+0x1f8>
 800da78:	1e7b      	subs	r3, r7, #1
 800da7a:	1159      	asrs	r1, r3, #5
 800da7c:	f003 021f 	and.w	r2, r3, #31
 800da80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da84:	f04f 0a01 	mov.w	sl, #1
 800da88:	fa0a f202 	lsl.w	r2, sl, r2
 800da8c:	420a      	tst	r2, r1
 800da8e:	d009      	beq.n	800daa4 <__gethex+0x1f8>
 800da90:	4553      	cmp	r3, sl
 800da92:	dd05      	ble.n	800daa0 <__gethex+0x1f4>
 800da94:	1eb9      	subs	r1, r7, #2
 800da96:	4620      	mov	r0, r4
 800da98:	f000 fecd 	bl	800e836 <__any_on>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d145      	bne.n	800db2c <__gethex+0x280>
 800daa0:	f04f 0a02 	mov.w	sl, #2
 800daa4:	4639      	mov	r1, r7
 800daa6:	4620      	mov	r0, r4
 800daa8:	f7ff fe98 	bl	800d7dc <rshift>
 800daac:	443d      	add	r5, r7
 800daae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dab2:	42ab      	cmp	r3, r5
 800dab4:	da4c      	bge.n	800db50 <__gethex+0x2a4>
 800dab6:	ee18 0a10 	vmov	r0, s16
 800daba:	4621      	mov	r1, r4
 800dabc:	f000 fa5e 	bl	800df7c <_Bfree>
 800dac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dac2:	2300      	movs	r3, #0
 800dac4:	6013      	str	r3, [r2, #0]
 800dac6:	27a3      	movs	r7, #163	; 0xa3
 800dac8:	e785      	b.n	800d9d6 <__gethex+0x12a>
 800daca:	1e73      	subs	r3, r6, #1
 800dacc:	9a05      	ldr	r2, [sp, #20]
 800dace:	9303      	str	r3, [sp, #12]
 800dad0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d019      	beq.n	800db0c <__gethex+0x260>
 800dad8:	f1bb 0f20 	cmp.w	fp, #32
 800dadc:	d107      	bne.n	800daee <__gethex+0x242>
 800dade:	9b02      	ldr	r3, [sp, #8]
 800dae0:	9a00      	ldr	r2, [sp, #0]
 800dae2:	f843 2b04 	str.w	r2, [r3], #4
 800dae6:	9302      	str	r3, [sp, #8]
 800dae8:	2300      	movs	r3, #0
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	469b      	mov	fp, r3
 800daee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800daf2:	f7ff fec5 	bl	800d880 <__hexdig_fun>
 800daf6:	9b00      	ldr	r3, [sp, #0]
 800daf8:	f000 000f 	and.w	r0, r0, #15
 800dafc:	fa00 f00b 	lsl.w	r0, r0, fp
 800db00:	4303      	orrs	r3, r0
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	f10b 0b04 	add.w	fp, fp, #4
 800db08:	9b03      	ldr	r3, [sp, #12]
 800db0a:	e00d      	b.n	800db28 <__gethex+0x27c>
 800db0c:	9b03      	ldr	r3, [sp, #12]
 800db0e:	9a06      	ldr	r2, [sp, #24]
 800db10:	4413      	add	r3, r2
 800db12:	42bb      	cmp	r3, r7
 800db14:	d3e0      	bcc.n	800dad8 <__gethex+0x22c>
 800db16:	4618      	mov	r0, r3
 800db18:	9901      	ldr	r1, [sp, #4]
 800db1a:	9307      	str	r3, [sp, #28]
 800db1c:	4652      	mov	r2, sl
 800db1e:	f000 ff6f 	bl	800ea00 <strncmp>
 800db22:	9b07      	ldr	r3, [sp, #28]
 800db24:	2800      	cmp	r0, #0
 800db26:	d1d7      	bne.n	800dad8 <__gethex+0x22c>
 800db28:	461e      	mov	r6, r3
 800db2a:	e78b      	b.n	800da44 <__gethex+0x198>
 800db2c:	f04f 0a03 	mov.w	sl, #3
 800db30:	e7b8      	b.n	800daa4 <__gethex+0x1f8>
 800db32:	da0a      	bge.n	800db4a <__gethex+0x29e>
 800db34:	1a37      	subs	r7, r6, r0
 800db36:	4621      	mov	r1, r4
 800db38:	ee18 0a10 	vmov	r0, s16
 800db3c:	463a      	mov	r2, r7
 800db3e:	f000 fc39 	bl	800e3b4 <__lshift>
 800db42:	1bed      	subs	r5, r5, r7
 800db44:	4604      	mov	r4, r0
 800db46:	f100 0914 	add.w	r9, r0, #20
 800db4a:	f04f 0a00 	mov.w	sl, #0
 800db4e:	e7ae      	b.n	800daae <__gethex+0x202>
 800db50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db54:	42a8      	cmp	r0, r5
 800db56:	dd72      	ble.n	800dc3e <__gethex+0x392>
 800db58:	1b45      	subs	r5, r0, r5
 800db5a:	42ae      	cmp	r6, r5
 800db5c:	dc36      	bgt.n	800dbcc <__gethex+0x320>
 800db5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db62:	2b02      	cmp	r3, #2
 800db64:	d02a      	beq.n	800dbbc <__gethex+0x310>
 800db66:	2b03      	cmp	r3, #3
 800db68:	d02c      	beq.n	800dbc4 <__gethex+0x318>
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d11c      	bne.n	800dba8 <__gethex+0x2fc>
 800db6e:	42ae      	cmp	r6, r5
 800db70:	d11a      	bne.n	800dba8 <__gethex+0x2fc>
 800db72:	2e01      	cmp	r6, #1
 800db74:	d112      	bne.n	800db9c <__gethex+0x2f0>
 800db76:	9a04      	ldr	r2, [sp, #16]
 800db78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db7c:	6013      	str	r3, [r2, #0]
 800db7e:	2301      	movs	r3, #1
 800db80:	6123      	str	r3, [r4, #16]
 800db82:	f8c9 3000 	str.w	r3, [r9]
 800db86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db88:	2762      	movs	r7, #98	; 0x62
 800db8a:	601c      	str	r4, [r3, #0]
 800db8c:	e723      	b.n	800d9d6 <__gethex+0x12a>
 800db8e:	bf00      	nop
 800db90:	08010308 	.word	0x08010308
 800db94:	08010290 	.word	0x08010290
 800db98:	080102a1 	.word	0x080102a1
 800db9c:	1e71      	subs	r1, r6, #1
 800db9e:	4620      	mov	r0, r4
 800dba0:	f000 fe49 	bl	800e836 <__any_on>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d1e6      	bne.n	800db76 <__gethex+0x2ca>
 800dba8:	ee18 0a10 	vmov	r0, s16
 800dbac:	4621      	mov	r1, r4
 800dbae:	f000 f9e5 	bl	800df7c <_Bfree>
 800dbb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	2750      	movs	r7, #80	; 0x50
 800dbba:	e70c      	b.n	800d9d6 <__gethex+0x12a>
 800dbbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1f2      	bne.n	800dba8 <__gethex+0x2fc>
 800dbc2:	e7d8      	b.n	800db76 <__gethex+0x2ca>
 800dbc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1d5      	bne.n	800db76 <__gethex+0x2ca>
 800dbca:	e7ed      	b.n	800dba8 <__gethex+0x2fc>
 800dbcc:	1e6f      	subs	r7, r5, #1
 800dbce:	f1ba 0f00 	cmp.w	sl, #0
 800dbd2:	d131      	bne.n	800dc38 <__gethex+0x38c>
 800dbd4:	b127      	cbz	r7, 800dbe0 <__gethex+0x334>
 800dbd6:	4639      	mov	r1, r7
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f000 fe2c 	bl	800e836 <__any_on>
 800dbde:	4682      	mov	sl, r0
 800dbe0:	117b      	asrs	r3, r7, #5
 800dbe2:	2101      	movs	r1, #1
 800dbe4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dbe8:	f007 071f 	and.w	r7, r7, #31
 800dbec:	fa01 f707 	lsl.w	r7, r1, r7
 800dbf0:	421f      	tst	r7, r3
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	bf18      	it	ne
 800dbf8:	f04a 0a02 	orrne.w	sl, sl, #2
 800dbfc:	1b76      	subs	r6, r6, r5
 800dbfe:	f7ff fded 	bl	800d7dc <rshift>
 800dc02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dc06:	2702      	movs	r7, #2
 800dc08:	f1ba 0f00 	cmp.w	sl, #0
 800dc0c:	d048      	beq.n	800dca0 <__gethex+0x3f4>
 800dc0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d015      	beq.n	800dc42 <__gethex+0x396>
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d017      	beq.n	800dc4a <__gethex+0x39e>
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d109      	bne.n	800dc32 <__gethex+0x386>
 800dc1e:	f01a 0f02 	tst.w	sl, #2
 800dc22:	d006      	beq.n	800dc32 <__gethex+0x386>
 800dc24:	f8d9 0000 	ldr.w	r0, [r9]
 800dc28:	ea4a 0a00 	orr.w	sl, sl, r0
 800dc2c:	f01a 0f01 	tst.w	sl, #1
 800dc30:	d10e      	bne.n	800dc50 <__gethex+0x3a4>
 800dc32:	f047 0710 	orr.w	r7, r7, #16
 800dc36:	e033      	b.n	800dca0 <__gethex+0x3f4>
 800dc38:	f04f 0a01 	mov.w	sl, #1
 800dc3c:	e7d0      	b.n	800dbe0 <__gethex+0x334>
 800dc3e:	2701      	movs	r7, #1
 800dc40:	e7e2      	b.n	800dc08 <__gethex+0x35c>
 800dc42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc44:	f1c3 0301 	rsb	r3, r3, #1
 800dc48:	9315      	str	r3, [sp, #84]	; 0x54
 800dc4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0f0      	beq.n	800dc32 <__gethex+0x386>
 800dc50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc54:	f104 0314 	add.w	r3, r4, #20
 800dc58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc60:	f04f 0c00 	mov.w	ip, #0
 800dc64:	4618      	mov	r0, r3
 800dc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc6e:	d01c      	beq.n	800dcaa <__gethex+0x3fe>
 800dc70:	3201      	adds	r2, #1
 800dc72:	6002      	str	r2, [r0, #0]
 800dc74:	2f02      	cmp	r7, #2
 800dc76:	f104 0314 	add.w	r3, r4, #20
 800dc7a:	d13f      	bne.n	800dcfc <__gethex+0x450>
 800dc7c:	f8d8 2000 	ldr.w	r2, [r8]
 800dc80:	3a01      	subs	r2, #1
 800dc82:	42b2      	cmp	r2, r6
 800dc84:	d10a      	bne.n	800dc9c <__gethex+0x3f0>
 800dc86:	1171      	asrs	r1, r6, #5
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc8e:	f006 061f 	and.w	r6, r6, #31
 800dc92:	fa02 f606 	lsl.w	r6, r2, r6
 800dc96:	421e      	tst	r6, r3
 800dc98:	bf18      	it	ne
 800dc9a:	4617      	movne	r7, r2
 800dc9c:	f047 0720 	orr.w	r7, r7, #32
 800dca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dca2:	601c      	str	r4, [r3, #0]
 800dca4:	9b04      	ldr	r3, [sp, #16]
 800dca6:	601d      	str	r5, [r3, #0]
 800dca8:	e695      	b.n	800d9d6 <__gethex+0x12a>
 800dcaa:	4299      	cmp	r1, r3
 800dcac:	f843 cc04 	str.w	ip, [r3, #-4]
 800dcb0:	d8d8      	bhi.n	800dc64 <__gethex+0x3b8>
 800dcb2:	68a3      	ldr	r3, [r4, #8]
 800dcb4:	459b      	cmp	fp, r3
 800dcb6:	db19      	blt.n	800dcec <__gethex+0x440>
 800dcb8:	6861      	ldr	r1, [r4, #4]
 800dcba:	ee18 0a10 	vmov	r0, s16
 800dcbe:	3101      	adds	r1, #1
 800dcc0:	f000 f91c 	bl	800defc <_Balloc>
 800dcc4:	4681      	mov	r9, r0
 800dcc6:	b918      	cbnz	r0, 800dcd0 <__gethex+0x424>
 800dcc8:	4b1a      	ldr	r3, [pc, #104]	; (800dd34 <__gethex+0x488>)
 800dcca:	4602      	mov	r2, r0
 800dccc:	2184      	movs	r1, #132	; 0x84
 800dcce:	e6a8      	b.n	800da22 <__gethex+0x176>
 800dcd0:	6922      	ldr	r2, [r4, #16]
 800dcd2:	3202      	adds	r2, #2
 800dcd4:	f104 010c 	add.w	r1, r4, #12
 800dcd8:	0092      	lsls	r2, r2, #2
 800dcda:	300c      	adds	r0, #12
 800dcdc:	f000 f900 	bl	800dee0 <memcpy>
 800dce0:	4621      	mov	r1, r4
 800dce2:	ee18 0a10 	vmov	r0, s16
 800dce6:	f000 f949 	bl	800df7c <_Bfree>
 800dcea:	464c      	mov	r4, r9
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcf4:	6122      	str	r2, [r4, #16]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	615a      	str	r2, [r3, #20]
 800dcfa:	e7bb      	b.n	800dc74 <__gethex+0x3c8>
 800dcfc:	6922      	ldr	r2, [r4, #16]
 800dcfe:	455a      	cmp	r2, fp
 800dd00:	dd0b      	ble.n	800dd1a <__gethex+0x46e>
 800dd02:	2101      	movs	r1, #1
 800dd04:	4620      	mov	r0, r4
 800dd06:	f7ff fd69 	bl	800d7dc <rshift>
 800dd0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd0e:	3501      	adds	r5, #1
 800dd10:	42ab      	cmp	r3, r5
 800dd12:	f6ff aed0 	blt.w	800dab6 <__gethex+0x20a>
 800dd16:	2701      	movs	r7, #1
 800dd18:	e7c0      	b.n	800dc9c <__gethex+0x3f0>
 800dd1a:	f016 061f 	ands.w	r6, r6, #31
 800dd1e:	d0fa      	beq.n	800dd16 <__gethex+0x46a>
 800dd20:	4453      	add	r3, sl
 800dd22:	f1c6 0620 	rsb	r6, r6, #32
 800dd26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd2a:	f000 f9d9 	bl	800e0e0 <__hi0bits>
 800dd2e:	42b0      	cmp	r0, r6
 800dd30:	dbe7      	blt.n	800dd02 <__gethex+0x456>
 800dd32:	e7f0      	b.n	800dd16 <__gethex+0x46a>
 800dd34:	08010290 	.word	0x08010290

0800dd38 <L_shift>:
 800dd38:	f1c2 0208 	rsb	r2, r2, #8
 800dd3c:	0092      	lsls	r2, r2, #2
 800dd3e:	b570      	push	{r4, r5, r6, lr}
 800dd40:	f1c2 0620 	rsb	r6, r2, #32
 800dd44:	6843      	ldr	r3, [r0, #4]
 800dd46:	6804      	ldr	r4, [r0, #0]
 800dd48:	fa03 f506 	lsl.w	r5, r3, r6
 800dd4c:	432c      	orrs	r4, r5
 800dd4e:	40d3      	lsrs	r3, r2
 800dd50:	6004      	str	r4, [r0, #0]
 800dd52:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd56:	4288      	cmp	r0, r1
 800dd58:	d3f4      	bcc.n	800dd44 <L_shift+0xc>
 800dd5a:	bd70      	pop	{r4, r5, r6, pc}

0800dd5c <__match>:
 800dd5c:	b530      	push	{r4, r5, lr}
 800dd5e:	6803      	ldr	r3, [r0, #0]
 800dd60:	3301      	adds	r3, #1
 800dd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd66:	b914      	cbnz	r4, 800dd6e <__match+0x12>
 800dd68:	6003      	str	r3, [r0, #0]
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	bd30      	pop	{r4, r5, pc}
 800dd6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd76:	2d19      	cmp	r5, #25
 800dd78:	bf98      	it	ls
 800dd7a:	3220      	addls	r2, #32
 800dd7c:	42a2      	cmp	r2, r4
 800dd7e:	d0f0      	beq.n	800dd62 <__match+0x6>
 800dd80:	2000      	movs	r0, #0
 800dd82:	e7f3      	b.n	800dd6c <__match+0x10>

0800dd84 <__hexnan>:
 800dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd88:	680b      	ldr	r3, [r1, #0]
 800dd8a:	115e      	asrs	r6, r3, #5
 800dd8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd90:	f013 031f 	ands.w	r3, r3, #31
 800dd94:	b087      	sub	sp, #28
 800dd96:	bf18      	it	ne
 800dd98:	3604      	addne	r6, #4
 800dd9a:	2500      	movs	r5, #0
 800dd9c:	1f37      	subs	r7, r6, #4
 800dd9e:	4690      	mov	r8, r2
 800dda0:	6802      	ldr	r2, [r0, #0]
 800dda2:	9301      	str	r3, [sp, #4]
 800dda4:	4682      	mov	sl, r0
 800dda6:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddaa:	46b9      	mov	r9, r7
 800ddac:	463c      	mov	r4, r7
 800ddae:	9502      	str	r5, [sp, #8]
 800ddb0:	46ab      	mov	fp, r5
 800ddb2:	7851      	ldrb	r1, [r2, #1]
 800ddb4:	1c53      	adds	r3, r2, #1
 800ddb6:	9303      	str	r3, [sp, #12]
 800ddb8:	b341      	cbz	r1, 800de0c <__hexnan+0x88>
 800ddba:	4608      	mov	r0, r1
 800ddbc:	9205      	str	r2, [sp, #20]
 800ddbe:	9104      	str	r1, [sp, #16]
 800ddc0:	f7ff fd5e 	bl	800d880 <__hexdig_fun>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d14f      	bne.n	800de68 <__hexnan+0xe4>
 800ddc8:	9904      	ldr	r1, [sp, #16]
 800ddca:	9a05      	ldr	r2, [sp, #20]
 800ddcc:	2920      	cmp	r1, #32
 800ddce:	d818      	bhi.n	800de02 <__hexnan+0x7e>
 800ddd0:	9b02      	ldr	r3, [sp, #8]
 800ddd2:	459b      	cmp	fp, r3
 800ddd4:	dd13      	ble.n	800ddfe <__hexnan+0x7a>
 800ddd6:	454c      	cmp	r4, r9
 800ddd8:	d206      	bcs.n	800dde8 <__hexnan+0x64>
 800ddda:	2d07      	cmp	r5, #7
 800dddc:	dc04      	bgt.n	800dde8 <__hexnan+0x64>
 800ddde:	462a      	mov	r2, r5
 800dde0:	4649      	mov	r1, r9
 800dde2:	4620      	mov	r0, r4
 800dde4:	f7ff ffa8 	bl	800dd38 <L_shift>
 800dde8:	4544      	cmp	r4, r8
 800ddea:	d950      	bls.n	800de8e <__hexnan+0x10a>
 800ddec:	2300      	movs	r3, #0
 800ddee:	f1a4 0904 	sub.w	r9, r4, #4
 800ddf2:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddf6:	f8cd b008 	str.w	fp, [sp, #8]
 800ddfa:	464c      	mov	r4, r9
 800ddfc:	461d      	mov	r5, r3
 800ddfe:	9a03      	ldr	r2, [sp, #12]
 800de00:	e7d7      	b.n	800ddb2 <__hexnan+0x2e>
 800de02:	2929      	cmp	r1, #41	; 0x29
 800de04:	d156      	bne.n	800deb4 <__hexnan+0x130>
 800de06:	3202      	adds	r2, #2
 800de08:	f8ca 2000 	str.w	r2, [sl]
 800de0c:	f1bb 0f00 	cmp.w	fp, #0
 800de10:	d050      	beq.n	800deb4 <__hexnan+0x130>
 800de12:	454c      	cmp	r4, r9
 800de14:	d206      	bcs.n	800de24 <__hexnan+0xa0>
 800de16:	2d07      	cmp	r5, #7
 800de18:	dc04      	bgt.n	800de24 <__hexnan+0xa0>
 800de1a:	462a      	mov	r2, r5
 800de1c:	4649      	mov	r1, r9
 800de1e:	4620      	mov	r0, r4
 800de20:	f7ff ff8a 	bl	800dd38 <L_shift>
 800de24:	4544      	cmp	r4, r8
 800de26:	d934      	bls.n	800de92 <__hexnan+0x10e>
 800de28:	f1a8 0204 	sub.w	r2, r8, #4
 800de2c:	4623      	mov	r3, r4
 800de2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800de32:	f842 1f04 	str.w	r1, [r2, #4]!
 800de36:	429f      	cmp	r7, r3
 800de38:	d2f9      	bcs.n	800de2e <__hexnan+0xaa>
 800de3a:	1b3b      	subs	r3, r7, r4
 800de3c:	f023 0303 	bic.w	r3, r3, #3
 800de40:	3304      	adds	r3, #4
 800de42:	3401      	adds	r4, #1
 800de44:	3e03      	subs	r6, #3
 800de46:	42b4      	cmp	r4, r6
 800de48:	bf88      	it	hi
 800de4a:	2304      	movhi	r3, #4
 800de4c:	4443      	add	r3, r8
 800de4e:	2200      	movs	r2, #0
 800de50:	f843 2b04 	str.w	r2, [r3], #4
 800de54:	429f      	cmp	r7, r3
 800de56:	d2fb      	bcs.n	800de50 <__hexnan+0xcc>
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	b91b      	cbnz	r3, 800de64 <__hexnan+0xe0>
 800de5c:	4547      	cmp	r7, r8
 800de5e:	d127      	bne.n	800deb0 <__hexnan+0x12c>
 800de60:	2301      	movs	r3, #1
 800de62:	603b      	str	r3, [r7, #0]
 800de64:	2005      	movs	r0, #5
 800de66:	e026      	b.n	800deb6 <__hexnan+0x132>
 800de68:	3501      	adds	r5, #1
 800de6a:	2d08      	cmp	r5, #8
 800de6c:	f10b 0b01 	add.w	fp, fp, #1
 800de70:	dd06      	ble.n	800de80 <__hexnan+0xfc>
 800de72:	4544      	cmp	r4, r8
 800de74:	d9c3      	bls.n	800ddfe <__hexnan+0x7a>
 800de76:	2300      	movs	r3, #0
 800de78:	f844 3c04 	str.w	r3, [r4, #-4]
 800de7c:	2501      	movs	r5, #1
 800de7e:	3c04      	subs	r4, #4
 800de80:	6822      	ldr	r2, [r4, #0]
 800de82:	f000 000f 	and.w	r0, r0, #15
 800de86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800de8a:	6022      	str	r2, [r4, #0]
 800de8c:	e7b7      	b.n	800ddfe <__hexnan+0x7a>
 800de8e:	2508      	movs	r5, #8
 800de90:	e7b5      	b.n	800ddfe <__hexnan+0x7a>
 800de92:	9b01      	ldr	r3, [sp, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d0df      	beq.n	800de58 <__hexnan+0xd4>
 800de98:	f04f 32ff 	mov.w	r2, #4294967295
 800de9c:	f1c3 0320 	rsb	r3, r3, #32
 800dea0:	fa22 f303 	lsr.w	r3, r2, r3
 800dea4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dea8:	401a      	ands	r2, r3
 800deaa:	f846 2c04 	str.w	r2, [r6, #-4]
 800deae:	e7d3      	b.n	800de58 <__hexnan+0xd4>
 800deb0:	3f04      	subs	r7, #4
 800deb2:	e7d1      	b.n	800de58 <__hexnan+0xd4>
 800deb4:	2004      	movs	r0, #4
 800deb6:	b007      	add	sp, #28
 800deb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800debc <__ascii_mbtowc>:
 800debc:	b082      	sub	sp, #8
 800debe:	b901      	cbnz	r1, 800dec2 <__ascii_mbtowc+0x6>
 800dec0:	a901      	add	r1, sp, #4
 800dec2:	b142      	cbz	r2, 800ded6 <__ascii_mbtowc+0x1a>
 800dec4:	b14b      	cbz	r3, 800deda <__ascii_mbtowc+0x1e>
 800dec6:	7813      	ldrb	r3, [r2, #0]
 800dec8:	600b      	str	r3, [r1, #0]
 800deca:	7812      	ldrb	r2, [r2, #0]
 800decc:	1e10      	subs	r0, r2, #0
 800dece:	bf18      	it	ne
 800ded0:	2001      	movne	r0, #1
 800ded2:	b002      	add	sp, #8
 800ded4:	4770      	bx	lr
 800ded6:	4610      	mov	r0, r2
 800ded8:	e7fb      	b.n	800ded2 <__ascii_mbtowc+0x16>
 800deda:	f06f 0001 	mvn.w	r0, #1
 800dede:	e7f8      	b.n	800ded2 <__ascii_mbtowc+0x16>

0800dee0 <memcpy>:
 800dee0:	440a      	add	r2, r1
 800dee2:	4291      	cmp	r1, r2
 800dee4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dee8:	d100      	bne.n	800deec <memcpy+0xc>
 800deea:	4770      	bx	lr
 800deec:	b510      	push	{r4, lr}
 800deee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800def2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def6:	4291      	cmp	r1, r2
 800def8:	d1f9      	bne.n	800deee <memcpy+0xe>
 800defa:	bd10      	pop	{r4, pc}

0800defc <_Balloc>:
 800defc:	b570      	push	{r4, r5, r6, lr}
 800defe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df00:	4604      	mov	r4, r0
 800df02:	460d      	mov	r5, r1
 800df04:	b976      	cbnz	r6, 800df24 <_Balloc+0x28>
 800df06:	2010      	movs	r0, #16
 800df08:	f000 fdcc 	bl	800eaa4 <malloc>
 800df0c:	4602      	mov	r2, r0
 800df0e:	6260      	str	r0, [r4, #36]	; 0x24
 800df10:	b920      	cbnz	r0, 800df1c <_Balloc+0x20>
 800df12:	4b18      	ldr	r3, [pc, #96]	; (800df74 <_Balloc+0x78>)
 800df14:	4818      	ldr	r0, [pc, #96]	; (800df78 <_Balloc+0x7c>)
 800df16:	2166      	movs	r1, #102	; 0x66
 800df18:	f000 fd94 	bl	800ea44 <__assert_func>
 800df1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df20:	6006      	str	r6, [r0, #0]
 800df22:	60c6      	str	r6, [r0, #12]
 800df24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df26:	68f3      	ldr	r3, [r6, #12]
 800df28:	b183      	cbz	r3, 800df4c <_Balloc+0x50>
 800df2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df32:	b9b8      	cbnz	r0, 800df64 <_Balloc+0x68>
 800df34:	2101      	movs	r1, #1
 800df36:	fa01 f605 	lsl.w	r6, r1, r5
 800df3a:	1d72      	adds	r2, r6, #5
 800df3c:	0092      	lsls	r2, r2, #2
 800df3e:	4620      	mov	r0, r4
 800df40:	f000 fc9a 	bl	800e878 <_calloc_r>
 800df44:	b160      	cbz	r0, 800df60 <_Balloc+0x64>
 800df46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df4a:	e00e      	b.n	800df6a <_Balloc+0x6e>
 800df4c:	2221      	movs	r2, #33	; 0x21
 800df4e:	2104      	movs	r1, #4
 800df50:	4620      	mov	r0, r4
 800df52:	f000 fc91 	bl	800e878 <_calloc_r>
 800df56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df58:	60f0      	str	r0, [r6, #12]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1e4      	bne.n	800df2a <_Balloc+0x2e>
 800df60:	2000      	movs	r0, #0
 800df62:	bd70      	pop	{r4, r5, r6, pc}
 800df64:	6802      	ldr	r2, [r0, #0]
 800df66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df6a:	2300      	movs	r3, #0
 800df6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df70:	e7f7      	b.n	800df62 <_Balloc+0x66>
 800df72:	bf00      	nop
 800df74:	0801031c 	.word	0x0801031c
 800df78:	08010333 	.word	0x08010333

0800df7c <_Bfree>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df80:	4605      	mov	r5, r0
 800df82:	460c      	mov	r4, r1
 800df84:	b976      	cbnz	r6, 800dfa4 <_Bfree+0x28>
 800df86:	2010      	movs	r0, #16
 800df88:	f000 fd8c 	bl	800eaa4 <malloc>
 800df8c:	4602      	mov	r2, r0
 800df8e:	6268      	str	r0, [r5, #36]	; 0x24
 800df90:	b920      	cbnz	r0, 800df9c <_Bfree+0x20>
 800df92:	4b09      	ldr	r3, [pc, #36]	; (800dfb8 <_Bfree+0x3c>)
 800df94:	4809      	ldr	r0, [pc, #36]	; (800dfbc <_Bfree+0x40>)
 800df96:	218a      	movs	r1, #138	; 0x8a
 800df98:	f000 fd54 	bl	800ea44 <__assert_func>
 800df9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfa0:	6006      	str	r6, [r0, #0]
 800dfa2:	60c6      	str	r6, [r0, #12]
 800dfa4:	b13c      	cbz	r4, 800dfb6 <_Bfree+0x3a>
 800dfa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dfa8:	6862      	ldr	r2, [r4, #4]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfb0:	6021      	str	r1, [r4, #0]
 800dfb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	0801031c 	.word	0x0801031c
 800dfbc:	08010333 	.word	0x08010333

0800dfc0 <__multadd>:
 800dfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc4:	690d      	ldr	r5, [r1, #16]
 800dfc6:	4607      	mov	r7, r0
 800dfc8:	460c      	mov	r4, r1
 800dfca:	461e      	mov	r6, r3
 800dfcc:	f101 0c14 	add.w	ip, r1, #20
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	f8dc 3000 	ldr.w	r3, [ip]
 800dfd6:	b299      	uxth	r1, r3
 800dfd8:	fb02 6101 	mla	r1, r2, r1, r6
 800dfdc:	0c1e      	lsrs	r6, r3, #16
 800dfde:	0c0b      	lsrs	r3, r1, #16
 800dfe0:	fb02 3306 	mla	r3, r2, r6, r3
 800dfe4:	b289      	uxth	r1, r1
 800dfe6:	3001      	adds	r0, #1
 800dfe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfec:	4285      	cmp	r5, r0
 800dfee:	f84c 1b04 	str.w	r1, [ip], #4
 800dff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dff6:	dcec      	bgt.n	800dfd2 <__multadd+0x12>
 800dff8:	b30e      	cbz	r6, 800e03e <__multadd+0x7e>
 800dffa:	68a3      	ldr	r3, [r4, #8]
 800dffc:	42ab      	cmp	r3, r5
 800dffe:	dc19      	bgt.n	800e034 <__multadd+0x74>
 800e000:	6861      	ldr	r1, [r4, #4]
 800e002:	4638      	mov	r0, r7
 800e004:	3101      	adds	r1, #1
 800e006:	f7ff ff79 	bl	800defc <_Balloc>
 800e00a:	4680      	mov	r8, r0
 800e00c:	b928      	cbnz	r0, 800e01a <__multadd+0x5a>
 800e00e:	4602      	mov	r2, r0
 800e010:	4b0c      	ldr	r3, [pc, #48]	; (800e044 <__multadd+0x84>)
 800e012:	480d      	ldr	r0, [pc, #52]	; (800e048 <__multadd+0x88>)
 800e014:	21b5      	movs	r1, #181	; 0xb5
 800e016:	f000 fd15 	bl	800ea44 <__assert_func>
 800e01a:	6922      	ldr	r2, [r4, #16]
 800e01c:	3202      	adds	r2, #2
 800e01e:	f104 010c 	add.w	r1, r4, #12
 800e022:	0092      	lsls	r2, r2, #2
 800e024:	300c      	adds	r0, #12
 800e026:	f7ff ff5b 	bl	800dee0 <memcpy>
 800e02a:	4621      	mov	r1, r4
 800e02c:	4638      	mov	r0, r7
 800e02e:	f7ff ffa5 	bl	800df7c <_Bfree>
 800e032:	4644      	mov	r4, r8
 800e034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e038:	3501      	adds	r5, #1
 800e03a:	615e      	str	r6, [r3, #20]
 800e03c:	6125      	str	r5, [r4, #16]
 800e03e:	4620      	mov	r0, r4
 800e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e044:	08010290 	.word	0x08010290
 800e048:	08010333 	.word	0x08010333

0800e04c <__s2b>:
 800e04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e050:	460c      	mov	r4, r1
 800e052:	4615      	mov	r5, r2
 800e054:	461f      	mov	r7, r3
 800e056:	2209      	movs	r2, #9
 800e058:	3308      	adds	r3, #8
 800e05a:	4606      	mov	r6, r0
 800e05c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e060:	2100      	movs	r1, #0
 800e062:	2201      	movs	r2, #1
 800e064:	429a      	cmp	r2, r3
 800e066:	db09      	blt.n	800e07c <__s2b+0x30>
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff ff47 	bl	800defc <_Balloc>
 800e06e:	b940      	cbnz	r0, 800e082 <__s2b+0x36>
 800e070:	4602      	mov	r2, r0
 800e072:	4b19      	ldr	r3, [pc, #100]	; (800e0d8 <__s2b+0x8c>)
 800e074:	4819      	ldr	r0, [pc, #100]	; (800e0dc <__s2b+0x90>)
 800e076:	21ce      	movs	r1, #206	; 0xce
 800e078:	f000 fce4 	bl	800ea44 <__assert_func>
 800e07c:	0052      	lsls	r2, r2, #1
 800e07e:	3101      	adds	r1, #1
 800e080:	e7f0      	b.n	800e064 <__s2b+0x18>
 800e082:	9b08      	ldr	r3, [sp, #32]
 800e084:	6143      	str	r3, [r0, #20]
 800e086:	2d09      	cmp	r5, #9
 800e088:	f04f 0301 	mov.w	r3, #1
 800e08c:	6103      	str	r3, [r0, #16]
 800e08e:	dd16      	ble.n	800e0be <__s2b+0x72>
 800e090:	f104 0909 	add.w	r9, r4, #9
 800e094:	46c8      	mov	r8, r9
 800e096:	442c      	add	r4, r5
 800e098:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e09c:	4601      	mov	r1, r0
 800e09e:	3b30      	subs	r3, #48	; 0x30
 800e0a0:	220a      	movs	r2, #10
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f7ff ff8c 	bl	800dfc0 <__multadd>
 800e0a8:	45a0      	cmp	r8, r4
 800e0aa:	d1f5      	bne.n	800e098 <__s2b+0x4c>
 800e0ac:	f1a5 0408 	sub.w	r4, r5, #8
 800e0b0:	444c      	add	r4, r9
 800e0b2:	1b2d      	subs	r5, r5, r4
 800e0b4:	1963      	adds	r3, r4, r5
 800e0b6:	42bb      	cmp	r3, r7
 800e0b8:	db04      	blt.n	800e0c4 <__s2b+0x78>
 800e0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0be:	340a      	adds	r4, #10
 800e0c0:	2509      	movs	r5, #9
 800e0c2:	e7f6      	b.n	800e0b2 <__s2b+0x66>
 800e0c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0c8:	4601      	mov	r1, r0
 800e0ca:	3b30      	subs	r3, #48	; 0x30
 800e0cc:	220a      	movs	r2, #10
 800e0ce:	4630      	mov	r0, r6
 800e0d0:	f7ff ff76 	bl	800dfc0 <__multadd>
 800e0d4:	e7ee      	b.n	800e0b4 <__s2b+0x68>
 800e0d6:	bf00      	nop
 800e0d8:	08010290 	.word	0x08010290
 800e0dc:	08010333 	.word	0x08010333

0800e0e0 <__hi0bits>:
 800e0e0:	0c03      	lsrs	r3, r0, #16
 800e0e2:	041b      	lsls	r3, r3, #16
 800e0e4:	b9d3      	cbnz	r3, 800e11c <__hi0bits+0x3c>
 800e0e6:	0400      	lsls	r0, r0, #16
 800e0e8:	2310      	movs	r3, #16
 800e0ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0ee:	bf04      	itt	eq
 800e0f0:	0200      	lsleq	r0, r0, #8
 800e0f2:	3308      	addeq	r3, #8
 800e0f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0f8:	bf04      	itt	eq
 800e0fa:	0100      	lsleq	r0, r0, #4
 800e0fc:	3304      	addeq	r3, #4
 800e0fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e102:	bf04      	itt	eq
 800e104:	0080      	lsleq	r0, r0, #2
 800e106:	3302      	addeq	r3, #2
 800e108:	2800      	cmp	r0, #0
 800e10a:	db05      	blt.n	800e118 <__hi0bits+0x38>
 800e10c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e110:	f103 0301 	add.w	r3, r3, #1
 800e114:	bf08      	it	eq
 800e116:	2320      	moveq	r3, #32
 800e118:	4618      	mov	r0, r3
 800e11a:	4770      	bx	lr
 800e11c:	2300      	movs	r3, #0
 800e11e:	e7e4      	b.n	800e0ea <__hi0bits+0xa>

0800e120 <__lo0bits>:
 800e120:	6803      	ldr	r3, [r0, #0]
 800e122:	f013 0207 	ands.w	r2, r3, #7
 800e126:	4601      	mov	r1, r0
 800e128:	d00b      	beq.n	800e142 <__lo0bits+0x22>
 800e12a:	07da      	lsls	r2, r3, #31
 800e12c:	d423      	bmi.n	800e176 <__lo0bits+0x56>
 800e12e:	0798      	lsls	r0, r3, #30
 800e130:	bf49      	itett	mi
 800e132:	085b      	lsrmi	r3, r3, #1
 800e134:	089b      	lsrpl	r3, r3, #2
 800e136:	2001      	movmi	r0, #1
 800e138:	600b      	strmi	r3, [r1, #0]
 800e13a:	bf5c      	itt	pl
 800e13c:	600b      	strpl	r3, [r1, #0]
 800e13e:	2002      	movpl	r0, #2
 800e140:	4770      	bx	lr
 800e142:	b298      	uxth	r0, r3
 800e144:	b9a8      	cbnz	r0, 800e172 <__lo0bits+0x52>
 800e146:	0c1b      	lsrs	r3, r3, #16
 800e148:	2010      	movs	r0, #16
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	b90a      	cbnz	r2, 800e152 <__lo0bits+0x32>
 800e14e:	3008      	adds	r0, #8
 800e150:	0a1b      	lsrs	r3, r3, #8
 800e152:	071a      	lsls	r2, r3, #28
 800e154:	bf04      	itt	eq
 800e156:	091b      	lsreq	r3, r3, #4
 800e158:	3004      	addeq	r0, #4
 800e15a:	079a      	lsls	r2, r3, #30
 800e15c:	bf04      	itt	eq
 800e15e:	089b      	lsreq	r3, r3, #2
 800e160:	3002      	addeq	r0, #2
 800e162:	07da      	lsls	r2, r3, #31
 800e164:	d403      	bmi.n	800e16e <__lo0bits+0x4e>
 800e166:	085b      	lsrs	r3, r3, #1
 800e168:	f100 0001 	add.w	r0, r0, #1
 800e16c:	d005      	beq.n	800e17a <__lo0bits+0x5a>
 800e16e:	600b      	str	r3, [r1, #0]
 800e170:	4770      	bx	lr
 800e172:	4610      	mov	r0, r2
 800e174:	e7e9      	b.n	800e14a <__lo0bits+0x2a>
 800e176:	2000      	movs	r0, #0
 800e178:	4770      	bx	lr
 800e17a:	2020      	movs	r0, #32
 800e17c:	4770      	bx	lr
	...

0800e180 <__i2b>:
 800e180:	b510      	push	{r4, lr}
 800e182:	460c      	mov	r4, r1
 800e184:	2101      	movs	r1, #1
 800e186:	f7ff feb9 	bl	800defc <_Balloc>
 800e18a:	4602      	mov	r2, r0
 800e18c:	b928      	cbnz	r0, 800e19a <__i2b+0x1a>
 800e18e:	4b05      	ldr	r3, [pc, #20]	; (800e1a4 <__i2b+0x24>)
 800e190:	4805      	ldr	r0, [pc, #20]	; (800e1a8 <__i2b+0x28>)
 800e192:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e196:	f000 fc55 	bl	800ea44 <__assert_func>
 800e19a:	2301      	movs	r3, #1
 800e19c:	6144      	str	r4, [r0, #20]
 800e19e:	6103      	str	r3, [r0, #16]
 800e1a0:	bd10      	pop	{r4, pc}
 800e1a2:	bf00      	nop
 800e1a4:	08010290 	.word	0x08010290
 800e1a8:	08010333 	.word	0x08010333

0800e1ac <__multiply>:
 800e1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b0:	4691      	mov	r9, r2
 800e1b2:	690a      	ldr	r2, [r1, #16]
 800e1b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	bfb8      	it	lt
 800e1bc:	460b      	movlt	r3, r1
 800e1be:	460c      	mov	r4, r1
 800e1c0:	bfbc      	itt	lt
 800e1c2:	464c      	movlt	r4, r9
 800e1c4:	4699      	movlt	r9, r3
 800e1c6:	6927      	ldr	r7, [r4, #16]
 800e1c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1cc:	68a3      	ldr	r3, [r4, #8]
 800e1ce:	6861      	ldr	r1, [r4, #4]
 800e1d0:	eb07 060a 	add.w	r6, r7, sl
 800e1d4:	42b3      	cmp	r3, r6
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	bfb8      	it	lt
 800e1da:	3101      	addlt	r1, #1
 800e1dc:	f7ff fe8e 	bl	800defc <_Balloc>
 800e1e0:	b930      	cbnz	r0, 800e1f0 <__multiply+0x44>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	4b44      	ldr	r3, [pc, #272]	; (800e2f8 <__multiply+0x14c>)
 800e1e6:	4845      	ldr	r0, [pc, #276]	; (800e2fc <__multiply+0x150>)
 800e1e8:	f240 115d 	movw	r1, #349	; 0x15d
 800e1ec:	f000 fc2a 	bl	800ea44 <__assert_func>
 800e1f0:	f100 0514 	add.w	r5, r0, #20
 800e1f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1f8:	462b      	mov	r3, r5
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	4543      	cmp	r3, r8
 800e1fe:	d321      	bcc.n	800e244 <__multiply+0x98>
 800e200:	f104 0314 	add.w	r3, r4, #20
 800e204:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e208:	f109 0314 	add.w	r3, r9, #20
 800e20c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e210:	9202      	str	r2, [sp, #8]
 800e212:	1b3a      	subs	r2, r7, r4
 800e214:	3a15      	subs	r2, #21
 800e216:	f022 0203 	bic.w	r2, r2, #3
 800e21a:	3204      	adds	r2, #4
 800e21c:	f104 0115 	add.w	r1, r4, #21
 800e220:	428f      	cmp	r7, r1
 800e222:	bf38      	it	cc
 800e224:	2204      	movcc	r2, #4
 800e226:	9201      	str	r2, [sp, #4]
 800e228:	9a02      	ldr	r2, [sp, #8]
 800e22a:	9303      	str	r3, [sp, #12]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d80c      	bhi.n	800e24a <__multiply+0x9e>
 800e230:	2e00      	cmp	r6, #0
 800e232:	dd03      	ble.n	800e23c <__multiply+0x90>
 800e234:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d05a      	beq.n	800e2f2 <__multiply+0x146>
 800e23c:	6106      	str	r6, [r0, #16]
 800e23e:	b005      	add	sp, #20
 800e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e244:	f843 2b04 	str.w	r2, [r3], #4
 800e248:	e7d8      	b.n	800e1fc <__multiply+0x50>
 800e24a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e24e:	f1ba 0f00 	cmp.w	sl, #0
 800e252:	d024      	beq.n	800e29e <__multiply+0xf2>
 800e254:	f104 0e14 	add.w	lr, r4, #20
 800e258:	46a9      	mov	r9, r5
 800e25a:	f04f 0c00 	mov.w	ip, #0
 800e25e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e262:	f8d9 1000 	ldr.w	r1, [r9]
 800e266:	fa1f fb82 	uxth.w	fp, r2
 800e26a:	b289      	uxth	r1, r1
 800e26c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e270:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e274:	f8d9 2000 	ldr.w	r2, [r9]
 800e278:	4461      	add	r1, ip
 800e27a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e27e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e282:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e286:	b289      	uxth	r1, r1
 800e288:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e28c:	4577      	cmp	r7, lr
 800e28e:	f849 1b04 	str.w	r1, [r9], #4
 800e292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e296:	d8e2      	bhi.n	800e25e <__multiply+0xb2>
 800e298:	9a01      	ldr	r2, [sp, #4]
 800e29a:	f845 c002 	str.w	ip, [r5, r2]
 800e29e:	9a03      	ldr	r2, [sp, #12]
 800e2a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	f1b9 0f00 	cmp.w	r9, #0
 800e2aa:	d020      	beq.n	800e2ee <__multiply+0x142>
 800e2ac:	6829      	ldr	r1, [r5, #0]
 800e2ae:	f104 0c14 	add.w	ip, r4, #20
 800e2b2:	46ae      	mov	lr, r5
 800e2b4:	f04f 0a00 	mov.w	sl, #0
 800e2b8:	f8bc b000 	ldrh.w	fp, [ip]
 800e2bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2c0:	fb09 220b 	mla	r2, r9, fp, r2
 800e2c4:	4492      	add	sl, r2
 800e2c6:	b289      	uxth	r1, r1
 800e2c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e2cc:	f84e 1b04 	str.w	r1, [lr], #4
 800e2d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2d4:	f8be 1000 	ldrh.w	r1, [lr]
 800e2d8:	0c12      	lsrs	r2, r2, #16
 800e2da:	fb09 1102 	mla	r1, r9, r2, r1
 800e2de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2e2:	4567      	cmp	r7, ip
 800e2e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2e8:	d8e6      	bhi.n	800e2b8 <__multiply+0x10c>
 800e2ea:	9a01      	ldr	r2, [sp, #4]
 800e2ec:	50a9      	str	r1, [r5, r2]
 800e2ee:	3504      	adds	r5, #4
 800e2f0:	e79a      	b.n	800e228 <__multiply+0x7c>
 800e2f2:	3e01      	subs	r6, #1
 800e2f4:	e79c      	b.n	800e230 <__multiply+0x84>
 800e2f6:	bf00      	nop
 800e2f8:	08010290 	.word	0x08010290
 800e2fc:	08010333 	.word	0x08010333

0800e300 <__pow5mult>:
 800e300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e304:	4615      	mov	r5, r2
 800e306:	f012 0203 	ands.w	r2, r2, #3
 800e30a:	4606      	mov	r6, r0
 800e30c:	460f      	mov	r7, r1
 800e30e:	d007      	beq.n	800e320 <__pow5mult+0x20>
 800e310:	4c25      	ldr	r4, [pc, #148]	; (800e3a8 <__pow5mult+0xa8>)
 800e312:	3a01      	subs	r2, #1
 800e314:	2300      	movs	r3, #0
 800e316:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e31a:	f7ff fe51 	bl	800dfc0 <__multadd>
 800e31e:	4607      	mov	r7, r0
 800e320:	10ad      	asrs	r5, r5, #2
 800e322:	d03d      	beq.n	800e3a0 <__pow5mult+0xa0>
 800e324:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e326:	b97c      	cbnz	r4, 800e348 <__pow5mult+0x48>
 800e328:	2010      	movs	r0, #16
 800e32a:	f000 fbbb 	bl	800eaa4 <malloc>
 800e32e:	4602      	mov	r2, r0
 800e330:	6270      	str	r0, [r6, #36]	; 0x24
 800e332:	b928      	cbnz	r0, 800e340 <__pow5mult+0x40>
 800e334:	4b1d      	ldr	r3, [pc, #116]	; (800e3ac <__pow5mult+0xac>)
 800e336:	481e      	ldr	r0, [pc, #120]	; (800e3b0 <__pow5mult+0xb0>)
 800e338:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e33c:	f000 fb82 	bl	800ea44 <__assert_func>
 800e340:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e344:	6004      	str	r4, [r0, #0]
 800e346:	60c4      	str	r4, [r0, #12]
 800e348:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e34c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e350:	b94c      	cbnz	r4, 800e366 <__pow5mult+0x66>
 800e352:	f240 2171 	movw	r1, #625	; 0x271
 800e356:	4630      	mov	r0, r6
 800e358:	f7ff ff12 	bl	800e180 <__i2b>
 800e35c:	2300      	movs	r3, #0
 800e35e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e362:	4604      	mov	r4, r0
 800e364:	6003      	str	r3, [r0, #0]
 800e366:	f04f 0900 	mov.w	r9, #0
 800e36a:	07eb      	lsls	r3, r5, #31
 800e36c:	d50a      	bpl.n	800e384 <__pow5mult+0x84>
 800e36e:	4639      	mov	r1, r7
 800e370:	4622      	mov	r2, r4
 800e372:	4630      	mov	r0, r6
 800e374:	f7ff ff1a 	bl	800e1ac <__multiply>
 800e378:	4639      	mov	r1, r7
 800e37a:	4680      	mov	r8, r0
 800e37c:	4630      	mov	r0, r6
 800e37e:	f7ff fdfd 	bl	800df7c <_Bfree>
 800e382:	4647      	mov	r7, r8
 800e384:	106d      	asrs	r5, r5, #1
 800e386:	d00b      	beq.n	800e3a0 <__pow5mult+0xa0>
 800e388:	6820      	ldr	r0, [r4, #0]
 800e38a:	b938      	cbnz	r0, 800e39c <__pow5mult+0x9c>
 800e38c:	4622      	mov	r2, r4
 800e38e:	4621      	mov	r1, r4
 800e390:	4630      	mov	r0, r6
 800e392:	f7ff ff0b 	bl	800e1ac <__multiply>
 800e396:	6020      	str	r0, [r4, #0]
 800e398:	f8c0 9000 	str.w	r9, [r0]
 800e39c:	4604      	mov	r4, r0
 800e39e:	e7e4      	b.n	800e36a <__pow5mult+0x6a>
 800e3a0:	4638      	mov	r0, r7
 800e3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a6:	bf00      	nop
 800e3a8:	08010480 	.word	0x08010480
 800e3ac:	0801031c 	.word	0x0801031c
 800e3b0:	08010333 	.word	0x08010333

0800e3b4 <__lshift>:
 800e3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	6849      	ldr	r1, [r1, #4]
 800e3bc:	6923      	ldr	r3, [r4, #16]
 800e3be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3c2:	68a3      	ldr	r3, [r4, #8]
 800e3c4:	4607      	mov	r7, r0
 800e3c6:	4691      	mov	r9, r2
 800e3c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3cc:	f108 0601 	add.w	r6, r8, #1
 800e3d0:	42b3      	cmp	r3, r6
 800e3d2:	db0b      	blt.n	800e3ec <__lshift+0x38>
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f7ff fd91 	bl	800defc <_Balloc>
 800e3da:	4605      	mov	r5, r0
 800e3dc:	b948      	cbnz	r0, 800e3f2 <__lshift+0x3e>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	4b2a      	ldr	r3, [pc, #168]	; (800e48c <__lshift+0xd8>)
 800e3e2:	482b      	ldr	r0, [pc, #172]	; (800e490 <__lshift+0xdc>)
 800e3e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3e8:	f000 fb2c 	bl	800ea44 <__assert_func>
 800e3ec:	3101      	adds	r1, #1
 800e3ee:	005b      	lsls	r3, r3, #1
 800e3f0:	e7ee      	b.n	800e3d0 <__lshift+0x1c>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	f100 0114 	add.w	r1, r0, #20
 800e3f8:	f100 0210 	add.w	r2, r0, #16
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	4553      	cmp	r3, sl
 800e400:	db37      	blt.n	800e472 <__lshift+0xbe>
 800e402:	6920      	ldr	r0, [r4, #16]
 800e404:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e408:	f104 0314 	add.w	r3, r4, #20
 800e40c:	f019 091f 	ands.w	r9, r9, #31
 800e410:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e414:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e418:	d02f      	beq.n	800e47a <__lshift+0xc6>
 800e41a:	f1c9 0e20 	rsb	lr, r9, #32
 800e41e:	468a      	mov	sl, r1
 800e420:	f04f 0c00 	mov.w	ip, #0
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	fa02 f209 	lsl.w	r2, r2, r9
 800e42a:	ea42 020c 	orr.w	r2, r2, ip
 800e42e:	f84a 2b04 	str.w	r2, [sl], #4
 800e432:	f853 2b04 	ldr.w	r2, [r3], #4
 800e436:	4298      	cmp	r0, r3
 800e438:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e43c:	d8f2      	bhi.n	800e424 <__lshift+0x70>
 800e43e:	1b03      	subs	r3, r0, r4
 800e440:	3b15      	subs	r3, #21
 800e442:	f023 0303 	bic.w	r3, r3, #3
 800e446:	3304      	adds	r3, #4
 800e448:	f104 0215 	add.w	r2, r4, #21
 800e44c:	4290      	cmp	r0, r2
 800e44e:	bf38      	it	cc
 800e450:	2304      	movcc	r3, #4
 800e452:	f841 c003 	str.w	ip, [r1, r3]
 800e456:	f1bc 0f00 	cmp.w	ip, #0
 800e45a:	d001      	beq.n	800e460 <__lshift+0xac>
 800e45c:	f108 0602 	add.w	r6, r8, #2
 800e460:	3e01      	subs	r6, #1
 800e462:	4638      	mov	r0, r7
 800e464:	612e      	str	r6, [r5, #16]
 800e466:	4621      	mov	r1, r4
 800e468:	f7ff fd88 	bl	800df7c <_Bfree>
 800e46c:	4628      	mov	r0, r5
 800e46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e472:	f842 0f04 	str.w	r0, [r2, #4]!
 800e476:	3301      	adds	r3, #1
 800e478:	e7c1      	b.n	800e3fe <__lshift+0x4a>
 800e47a:	3904      	subs	r1, #4
 800e47c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e480:	f841 2f04 	str.w	r2, [r1, #4]!
 800e484:	4298      	cmp	r0, r3
 800e486:	d8f9      	bhi.n	800e47c <__lshift+0xc8>
 800e488:	e7ea      	b.n	800e460 <__lshift+0xac>
 800e48a:	bf00      	nop
 800e48c:	08010290 	.word	0x08010290
 800e490:	08010333 	.word	0x08010333

0800e494 <__mcmp>:
 800e494:	b530      	push	{r4, r5, lr}
 800e496:	6902      	ldr	r2, [r0, #16]
 800e498:	690c      	ldr	r4, [r1, #16]
 800e49a:	1b12      	subs	r2, r2, r4
 800e49c:	d10e      	bne.n	800e4bc <__mcmp+0x28>
 800e49e:	f100 0314 	add.w	r3, r0, #20
 800e4a2:	3114      	adds	r1, #20
 800e4a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4b4:	42a5      	cmp	r5, r4
 800e4b6:	d003      	beq.n	800e4c0 <__mcmp+0x2c>
 800e4b8:	d305      	bcc.n	800e4c6 <__mcmp+0x32>
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	4610      	mov	r0, r2
 800e4be:	bd30      	pop	{r4, r5, pc}
 800e4c0:	4283      	cmp	r3, r0
 800e4c2:	d3f3      	bcc.n	800e4ac <__mcmp+0x18>
 800e4c4:	e7fa      	b.n	800e4bc <__mcmp+0x28>
 800e4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ca:	e7f7      	b.n	800e4bc <__mcmp+0x28>

0800e4cc <__mdiff>:
 800e4cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	4611      	mov	r1, r2
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	4690      	mov	r8, r2
 800e4da:	f7ff ffdb 	bl	800e494 <__mcmp>
 800e4de:	1e05      	subs	r5, r0, #0
 800e4e0:	d110      	bne.n	800e504 <__mdiff+0x38>
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f7ff fd09 	bl	800defc <_Balloc>
 800e4ea:	b930      	cbnz	r0, 800e4fa <__mdiff+0x2e>
 800e4ec:	4b3a      	ldr	r3, [pc, #232]	; (800e5d8 <__mdiff+0x10c>)
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	f240 2132 	movw	r1, #562	; 0x232
 800e4f4:	4839      	ldr	r0, [pc, #228]	; (800e5dc <__mdiff+0x110>)
 800e4f6:	f000 faa5 	bl	800ea44 <__assert_func>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e504:	bfa4      	itt	ge
 800e506:	4643      	movge	r3, r8
 800e508:	46a0      	movge	r8, r4
 800e50a:	4630      	mov	r0, r6
 800e50c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e510:	bfa6      	itte	ge
 800e512:	461c      	movge	r4, r3
 800e514:	2500      	movge	r5, #0
 800e516:	2501      	movlt	r5, #1
 800e518:	f7ff fcf0 	bl	800defc <_Balloc>
 800e51c:	b920      	cbnz	r0, 800e528 <__mdiff+0x5c>
 800e51e:	4b2e      	ldr	r3, [pc, #184]	; (800e5d8 <__mdiff+0x10c>)
 800e520:	4602      	mov	r2, r0
 800e522:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e526:	e7e5      	b.n	800e4f4 <__mdiff+0x28>
 800e528:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e52c:	6926      	ldr	r6, [r4, #16]
 800e52e:	60c5      	str	r5, [r0, #12]
 800e530:	f104 0914 	add.w	r9, r4, #20
 800e534:	f108 0514 	add.w	r5, r8, #20
 800e538:	f100 0e14 	add.w	lr, r0, #20
 800e53c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e540:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e544:	f108 0210 	add.w	r2, r8, #16
 800e548:	46f2      	mov	sl, lr
 800e54a:	2100      	movs	r1, #0
 800e54c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e550:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e554:	fa1f f883 	uxth.w	r8, r3
 800e558:	fa11 f18b 	uxtah	r1, r1, fp
 800e55c:	0c1b      	lsrs	r3, r3, #16
 800e55e:	eba1 0808 	sub.w	r8, r1, r8
 800e562:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e566:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e56a:	fa1f f888 	uxth.w	r8, r8
 800e56e:	1419      	asrs	r1, r3, #16
 800e570:	454e      	cmp	r6, r9
 800e572:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e576:	f84a 3b04 	str.w	r3, [sl], #4
 800e57a:	d8e7      	bhi.n	800e54c <__mdiff+0x80>
 800e57c:	1b33      	subs	r3, r6, r4
 800e57e:	3b15      	subs	r3, #21
 800e580:	f023 0303 	bic.w	r3, r3, #3
 800e584:	3304      	adds	r3, #4
 800e586:	3415      	adds	r4, #21
 800e588:	42a6      	cmp	r6, r4
 800e58a:	bf38      	it	cc
 800e58c:	2304      	movcc	r3, #4
 800e58e:	441d      	add	r5, r3
 800e590:	4473      	add	r3, lr
 800e592:	469e      	mov	lr, r3
 800e594:	462e      	mov	r6, r5
 800e596:	4566      	cmp	r6, ip
 800e598:	d30e      	bcc.n	800e5b8 <__mdiff+0xec>
 800e59a:	f10c 0203 	add.w	r2, ip, #3
 800e59e:	1b52      	subs	r2, r2, r5
 800e5a0:	f022 0203 	bic.w	r2, r2, #3
 800e5a4:	3d03      	subs	r5, #3
 800e5a6:	45ac      	cmp	ip, r5
 800e5a8:	bf38      	it	cc
 800e5aa:	2200      	movcc	r2, #0
 800e5ac:	441a      	add	r2, r3
 800e5ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5b2:	b17b      	cbz	r3, 800e5d4 <__mdiff+0x108>
 800e5b4:	6107      	str	r7, [r0, #16]
 800e5b6:	e7a3      	b.n	800e500 <__mdiff+0x34>
 800e5b8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5bc:	fa11 f288 	uxtah	r2, r1, r8
 800e5c0:	1414      	asrs	r4, r2, #16
 800e5c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5c6:	b292      	uxth	r2, r2
 800e5c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5cc:	f84e 2b04 	str.w	r2, [lr], #4
 800e5d0:	1421      	asrs	r1, r4, #16
 800e5d2:	e7e0      	b.n	800e596 <__mdiff+0xca>
 800e5d4:	3f01      	subs	r7, #1
 800e5d6:	e7ea      	b.n	800e5ae <__mdiff+0xe2>
 800e5d8:	08010290 	.word	0x08010290
 800e5dc:	08010333 	.word	0x08010333

0800e5e0 <__ulp>:
 800e5e0:	b082      	sub	sp, #8
 800e5e2:	ed8d 0b00 	vstr	d0, [sp]
 800e5e6:	9b01      	ldr	r3, [sp, #4]
 800e5e8:	4912      	ldr	r1, [pc, #72]	; (800e634 <__ulp+0x54>)
 800e5ea:	4019      	ands	r1, r3
 800e5ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e5f0:	2900      	cmp	r1, #0
 800e5f2:	dd05      	ble.n	800e600 <__ulp+0x20>
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	ec43 2b10 	vmov	d0, r2, r3
 800e5fc:	b002      	add	sp, #8
 800e5fe:	4770      	bx	lr
 800e600:	4249      	negs	r1, r1
 800e602:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e606:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e60a:	f04f 0200 	mov.w	r2, #0
 800e60e:	f04f 0300 	mov.w	r3, #0
 800e612:	da04      	bge.n	800e61e <__ulp+0x3e>
 800e614:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e618:	fa41 f300 	asr.w	r3, r1, r0
 800e61c:	e7ec      	b.n	800e5f8 <__ulp+0x18>
 800e61e:	f1a0 0114 	sub.w	r1, r0, #20
 800e622:	291e      	cmp	r1, #30
 800e624:	bfda      	itte	le
 800e626:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e62a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e62e:	2101      	movgt	r1, #1
 800e630:	460a      	mov	r2, r1
 800e632:	e7e1      	b.n	800e5f8 <__ulp+0x18>
 800e634:	7ff00000 	.word	0x7ff00000

0800e638 <__b2d>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	6905      	ldr	r5, [r0, #16]
 800e63c:	f100 0714 	add.w	r7, r0, #20
 800e640:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e644:	1f2e      	subs	r6, r5, #4
 800e646:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e64a:	4620      	mov	r0, r4
 800e64c:	f7ff fd48 	bl	800e0e0 <__hi0bits>
 800e650:	f1c0 0320 	rsb	r3, r0, #32
 800e654:	280a      	cmp	r0, #10
 800e656:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e6d4 <__b2d+0x9c>
 800e65a:	600b      	str	r3, [r1, #0]
 800e65c:	dc14      	bgt.n	800e688 <__b2d+0x50>
 800e65e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e662:	fa24 f10e 	lsr.w	r1, r4, lr
 800e666:	42b7      	cmp	r7, r6
 800e668:	ea41 030c 	orr.w	r3, r1, ip
 800e66c:	bf34      	ite	cc
 800e66e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e672:	2100      	movcs	r1, #0
 800e674:	3015      	adds	r0, #21
 800e676:	fa04 f000 	lsl.w	r0, r4, r0
 800e67a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e67e:	ea40 0201 	orr.w	r2, r0, r1
 800e682:	ec43 2b10 	vmov	d0, r2, r3
 800e686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e688:	42b7      	cmp	r7, r6
 800e68a:	bf3a      	itte	cc
 800e68c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e690:	f1a5 0608 	subcc.w	r6, r5, #8
 800e694:	2100      	movcs	r1, #0
 800e696:	380b      	subs	r0, #11
 800e698:	d017      	beq.n	800e6ca <__b2d+0x92>
 800e69a:	f1c0 0c20 	rsb	ip, r0, #32
 800e69e:	fa04 f500 	lsl.w	r5, r4, r0
 800e6a2:	42be      	cmp	r6, r7
 800e6a4:	fa21 f40c 	lsr.w	r4, r1, ip
 800e6a8:	ea45 0504 	orr.w	r5, r5, r4
 800e6ac:	bf8c      	ite	hi
 800e6ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e6b2:	2400      	movls	r4, #0
 800e6b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e6b8:	fa01 f000 	lsl.w	r0, r1, r0
 800e6bc:	fa24 f40c 	lsr.w	r4, r4, ip
 800e6c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e6c4:	ea40 0204 	orr.w	r2, r0, r4
 800e6c8:	e7db      	b.n	800e682 <__b2d+0x4a>
 800e6ca:	ea44 030c 	orr.w	r3, r4, ip
 800e6ce:	460a      	mov	r2, r1
 800e6d0:	e7d7      	b.n	800e682 <__b2d+0x4a>
 800e6d2:	bf00      	nop
 800e6d4:	3ff00000 	.word	0x3ff00000

0800e6d8 <__d2b>:
 800e6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	4689      	mov	r9, r1
 800e6de:	2101      	movs	r1, #1
 800e6e0:	ec57 6b10 	vmov	r6, r7, d0
 800e6e4:	4690      	mov	r8, r2
 800e6e6:	f7ff fc09 	bl	800defc <_Balloc>
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	b930      	cbnz	r0, 800e6fc <__d2b+0x24>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	4b25      	ldr	r3, [pc, #148]	; (800e788 <__d2b+0xb0>)
 800e6f2:	4826      	ldr	r0, [pc, #152]	; (800e78c <__d2b+0xb4>)
 800e6f4:	f240 310a 	movw	r1, #778	; 0x30a
 800e6f8:	f000 f9a4 	bl	800ea44 <__assert_func>
 800e6fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e700:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e704:	bb35      	cbnz	r5, 800e754 <__d2b+0x7c>
 800e706:	2e00      	cmp	r6, #0
 800e708:	9301      	str	r3, [sp, #4]
 800e70a:	d028      	beq.n	800e75e <__d2b+0x86>
 800e70c:	4668      	mov	r0, sp
 800e70e:	9600      	str	r6, [sp, #0]
 800e710:	f7ff fd06 	bl	800e120 <__lo0bits>
 800e714:	9900      	ldr	r1, [sp, #0]
 800e716:	b300      	cbz	r0, 800e75a <__d2b+0x82>
 800e718:	9a01      	ldr	r2, [sp, #4]
 800e71a:	f1c0 0320 	rsb	r3, r0, #32
 800e71e:	fa02 f303 	lsl.w	r3, r2, r3
 800e722:	430b      	orrs	r3, r1
 800e724:	40c2      	lsrs	r2, r0
 800e726:	6163      	str	r3, [r4, #20]
 800e728:	9201      	str	r2, [sp, #4]
 800e72a:	9b01      	ldr	r3, [sp, #4]
 800e72c:	61a3      	str	r3, [r4, #24]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	bf14      	ite	ne
 800e732:	2202      	movne	r2, #2
 800e734:	2201      	moveq	r2, #1
 800e736:	6122      	str	r2, [r4, #16]
 800e738:	b1d5      	cbz	r5, 800e770 <__d2b+0x98>
 800e73a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e73e:	4405      	add	r5, r0
 800e740:	f8c9 5000 	str.w	r5, [r9]
 800e744:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e748:	f8c8 0000 	str.w	r0, [r8]
 800e74c:	4620      	mov	r0, r4
 800e74e:	b003      	add	sp, #12
 800e750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e758:	e7d5      	b.n	800e706 <__d2b+0x2e>
 800e75a:	6161      	str	r1, [r4, #20]
 800e75c:	e7e5      	b.n	800e72a <__d2b+0x52>
 800e75e:	a801      	add	r0, sp, #4
 800e760:	f7ff fcde 	bl	800e120 <__lo0bits>
 800e764:	9b01      	ldr	r3, [sp, #4]
 800e766:	6163      	str	r3, [r4, #20]
 800e768:	2201      	movs	r2, #1
 800e76a:	6122      	str	r2, [r4, #16]
 800e76c:	3020      	adds	r0, #32
 800e76e:	e7e3      	b.n	800e738 <__d2b+0x60>
 800e770:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e778:	f8c9 0000 	str.w	r0, [r9]
 800e77c:	6918      	ldr	r0, [r3, #16]
 800e77e:	f7ff fcaf 	bl	800e0e0 <__hi0bits>
 800e782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e786:	e7df      	b.n	800e748 <__d2b+0x70>
 800e788:	08010290 	.word	0x08010290
 800e78c:	08010333 	.word	0x08010333

0800e790 <__ratio>:
 800e790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	4688      	mov	r8, r1
 800e796:	4669      	mov	r1, sp
 800e798:	4681      	mov	r9, r0
 800e79a:	f7ff ff4d 	bl	800e638 <__b2d>
 800e79e:	a901      	add	r1, sp, #4
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	ec55 4b10 	vmov	r4, r5, d0
 800e7a6:	ee10 aa10 	vmov	sl, s0
 800e7aa:	f7ff ff45 	bl	800e638 <__b2d>
 800e7ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e7b6:	1a59      	subs	r1, r3, r1
 800e7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e7c2:	ec57 6b10 	vmov	r6, r7, d0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	bfd6      	itet	le
 800e7ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7ce:	462a      	movgt	r2, r5
 800e7d0:	463a      	movle	r2, r7
 800e7d2:	46ab      	mov	fp, r5
 800e7d4:	bfd6      	itet	le
 800e7d6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e7da:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e7de:	ee00 3a90 	vmovle	s1, r3
 800e7e2:	ec4b ab17 	vmov	d7, sl, fp
 800e7e6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e7ea:	b003      	add	sp, #12
 800e7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7f0 <__copybits>:
 800e7f0:	3901      	subs	r1, #1
 800e7f2:	b570      	push	{r4, r5, r6, lr}
 800e7f4:	1149      	asrs	r1, r1, #5
 800e7f6:	6914      	ldr	r4, [r2, #16]
 800e7f8:	3101      	adds	r1, #1
 800e7fa:	f102 0314 	add.w	r3, r2, #20
 800e7fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e806:	1f05      	subs	r5, r0, #4
 800e808:	42a3      	cmp	r3, r4
 800e80a:	d30c      	bcc.n	800e826 <__copybits+0x36>
 800e80c:	1aa3      	subs	r3, r4, r2
 800e80e:	3b11      	subs	r3, #17
 800e810:	f023 0303 	bic.w	r3, r3, #3
 800e814:	3211      	adds	r2, #17
 800e816:	42a2      	cmp	r2, r4
 800e818:	bf88      	it	hi
 800e81a:	2300      	movhi	r3, #0
 800e81c:	4418      	add	r0, r3
 800e81e:	2300      	movs	r3, #0
 800e820:	4288      	cmp	r0, r1
 800e822:	d305      	bcc.n	800e830 <__copybits+0x40>
 800e824:	bd70      	pop	{r4, r5, r6, pc}
 800e826:	f853 6b04 	ldr.w	r6, [r3], #4
 800e82a:	f845 6f04 	str.w	r6, [r5, #4]!
 800e82e:	e7eb      	b.n	800e808 <__copybits+0x18>
 800e830:	f840 3b04 	str.w	r3, [r0], #4
 800e834:	e7f4      	b.n	800e820 <__copybits+0x30>

0800e836 <__any_on>:
 800e836:	f100 0214 	add.w	r2, r0, #20
 800e83a:	6900      	ldr	r0, [r0, #16]
 800e83c:	114b      	asrs	r3, r1, #5
 800e83e:	4298      	cmp	r0, r3
 800e840:	b510      	push	{r4, lr}
 800e842:	db11      	blt.n	800e868 <__any_on+0x32>
 800e844:	dd0a      	ble.n	800e85c <__any_on+0x26>
 800e846:	f011 011f 	ands.w	r1, r1, #31
 800e84a:	d007      	beq.n	800e85c <__any_on+0x26>
 800e84c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e850:	fa24 f001 	lsr.w	r0, r4, r1
 800e854:	fa00 f101 	lsl.w	r1, r0, r1
 800e858:	428c      	cmp	r4, r1
 800e85a:	d10b      	bne.n	800e874 <__any_on+0x3e>
 800e85c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e860:	4293      	cmp	r3, r2
 800e862:	d803      	bhi.n	800e86c <__any_on+0x36>
 800e864:	2000      	movs	r0, #0
 800e866:	bd10      	pop	{r4, pc}
 800e868:	4603      	mov	r3, r0
 800e86a:	e7f7      	b.n	800e85c <__any_on+0x26>
 800e86c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e870:	2900      	cmp	r1, #0
 800e872:	d0f5      	beq.n	800e860 <__any_on+0x2a>
 800e874:	2001      	movs	r0, #1
 800e876:	e7f6      	b.n	800e866 <__any_on+0x30>

0800e878 <_calloc_r>:
 800e878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e87a:	fba1 2402 	umull	r2, r4, r1, r2
 800e87e:	b94c      	cbnz	r4, 800e894 <_calloc_r+0x1c>
 800e880:	4611      	mov	r1, r2
 800e882:	9201      	str	r2, [sp, #4]
 800e884:	f000 f82e 	bl	800e8e4 <_malloc_r>
 800e888:	9a01      	ldr	r2, [sp, #4]
 800e88a:	4605      	mov	r5, r0
 800e88c:	b930      	cbnz	r0, 800e89c <_calloc_r+0x24>
 800e88e:	4628      	mov	r0, r5
 800e890:	b003      	add	sp, #12
 800e892:	bd30      	pop	{r4, r5, pc}
 800e894:	220c      	movs	r2, #12
 800e896:	6002      	str	r2, [r0, #0]
 800e898:	2500      	movs	r5, #0
 800e89a:	e7f8      	b.n	800e88e <_calloc_r+0x16>
 800e89c:	4621      	mov	r1, r4
 800e89e:	f7fe f9b7 	bl	800cc10 <memset>
 800e8a2:	e7f4      	b.n	800e88e <_calloc_r+0x16>

0800e8a4 <sbrk_aligned>:
 800e8a4:	b570      	push	{r4, r5, r6, lr}
 800e8a6:	4e0e      	ldr	r6, [pc, #56]	; (800e8e0 <sbrk_aligned+0x3c>)
 800e8a8:	460c      	mov	r4, r1
 800e8aa:	6831      	ldr	r1, [r6, #0]
 800e8ac:	4605      	mov	r5, r0
 800e8ae:	b911      	cbnz	r1, 800e8b6 <sbrk_aligned+0x12>
 800e8b0:	f000 f896 	bl	800e9e0 <_sbrk_r>
 800e8b4:	6030      	str	r0, [r6, #0]
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f000 f891 	bl	800e9e0 <_sbrk_r>
 800e8be:	1c43      	adds	r3, r0, #1
 800e8c0:	d00a      	beq.n	800e8d8 <sbrk_aligned+0x34>
 800e8c2:	1cc4      	adds	r4, r0, #3
 800e8c4:	f024 0403 	bic.w	r4, r4, #3
 800e8c8:	42a0      	cmp	r0, r4
 800e8ca:	d007      	beq.n	800e8dc <sbrk_aligned+0x38>
 800e8cc:	1a21      	subs	r1, r4, r0
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f000 f886 	bl	800e9e0 <_sbrk_r>
 800e8d4:	3001      	adds	r0, #1
 800e8d6:	d101      	bne.n	800e8dc <sbrk_aligned+0x38>
 800e8d8:	f04f 34ff 	mov.w	r4, #4294967295
 800e8dc:	4620      	mov	r0, r4
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	240009ec 	.word	0x240009ec

0800e8e4 <_malloc_r>:
 800e8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e8:	1ccd      	adds	r5, r1, #3
 800e8ea:	f025 0503 	bic.w	r5, r5, #3
 800e8ee:	3508      	adds	r5, #8
 800e8f0:	2d0c      	cmp	r5, #12
 800e8f2:	bf38      	it	cc
 800e8f4:	250c      	movcc	r5, #12
 800e8f6:	2d00      	cmp	r5, #0
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	db01      	blt.n	800e900 <_malloc_r+0x1c>
 800e8fc:	42a9      	cmp	r1, r5
 800e8fe:	d905      	bls.n	800e90c <_malloc_r+0x28>
 800e900:	230c      	movs	r3, #12
 800e902:	603b      	str	r3, [r7, #0]
 800e904:	2600      	movs	r6, #0
 800e906:	4630      	mov	r0, r6
 800e908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e90c:	4e2e      	ldr	r6, [pc, #184]	; (800e9c8 <_malloc_r+0xe4>)
 800e90e:	f000 f8d1 	bl	800eab4 <__malloc_lock>
 800e912:	6833      	ldr	r3, [r6, #0]
 800e914:	461c      	mov	r4, r3
 800e916:	bb34      	cbnz	r4, 800e966 <_malloc_r+0x82>
 800e918:	4629      	mov	r1, r5
 800e91a:	4638      	mov	r0, r7
 800e91c:	f7ff ffc2 	bl	800e8a4 <sbrk_aligned>
 800e920:	1c43      	adds	r3, r0, #1
 800e922:	4604      	mov	r4, r0
 800e924:	d14d      	bne.n	800e9c2 <_malloc_r+0xde>
 800e926:	6834      	ldr	r4, [r6, #0]
 800e928:	4626      	mov	r6, r4
 800e92a:	2e00      	cmp	r6, #0
 800e92c:	d140      	bne.n	800e9b0 <_malloc_r+0xcc>
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	4631      	mov	r1, r6
 800e932:	4638      	mov	r0, r7
 800e934:	eb04 0803 	add.w	r8, r4, r3
 800e938:	f000 f852 	bl	800e9e0 <_sbrk_r>
 800e93c:	4580      	cmp	r8, r0
 800e93e:	d13a      	bne.n	800e9b6 <_malloc_r+0xd2>
 800e940:	6821      	ldr	r1, [r4, #0]
 800e942:	3503      	adds	r5, #3
 800e944:	1a6d      	subs	r5, r5, r1
 800e946:	f025 0503 	bic.w	r5, r5, #3
 800e94a:	3508      	adds	r5, #8
 800e94c:	2d0c      	cmp	r5, #12
 800e94e:	bf38      	it	cc
 800e950:	250c      	movcc	r5, #12
 800e952:	4629      	mov	r1, r5
 800e954:	4638      	mov	r0, r7
 800e956:	f7ff ffa5 	bl	800e8a4 <sbrk_aligned>
 800e95a:	3001      	adds	r0, #1
 800e95c:	d02b      	beq.n	800e9b6 <_malloc_r+0xd2>
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	442b      	add	r3, r5
 800e962:	6023      	str	r3, [r4, #0]
 800e964:	e00e      	b.n	800e984 <_malloc_r+0xa0>
 800e966:	6822      	ldr	r2, [r4, #0]
 800e968:	1b52      	subs	r2, r2, r5
 800e96a:	d41e      	bmi.n	800e9aa <_malloc_r+0xc6>
 800e96c:	2a0b      	cmp	r2, #11
 800e96e:	d916      	bls.n	800e99e <_malloc_r+0xba>
 800e970:	1961      	adds	r1, r4, r5
 800e972:	42a3      	cmp	r3, r4
 800e974:	6025      	str	r5, [r4, #0]
 800e976:	bf18      	it	ne
 800e978:	6059      	strne	r1, [r3, #4]
 800e97a:	6863      	ldr	r3, [r4, #4]
 800e97c:	bf08      	it	eq
 800e97e:	6031      	streq	r1, [r6, #0]
 800e980:	5162      	str	r2, [r4, r5]
 800e982:	604b      	str	r3, [r1, #4]
 800e984:	4638      	mov	r0, r7
 800e986:	f104 060b 	add.w	r6, r4, #11
 800e98a:	f000 f899 	bl	800eac0 <__malloc_unlock>
 800e98e:	f026 0607 	bic.w	r6, r6, #7
 800e992:	1d23      	adds	r3, r4, #4
 800e994:	1af2      	subs	r2, r6, r3
 800e996:	d0b6      	beq.n	800e906 <_malloc_r+0x22>
 800e998:	1b9b      	subs	r3, r3, r6
 800e99a:	50a3      	str	r3, [r4, r2]
 800e99c:	e7b3      	b.n	800e906 <_malloc_r+0x22>
 800e99e:	6862      	ldr	r2, [r4, #4]
 800e9a0:	42a3      	cmp	r3, r4
 800e9a2:	bf0c      	ite	eq
 800e9a4:	6032      	streq	r2, [r6, #0]
 800e9a6:	605a      	strne	r2, [r3, #4]
 800e9a8:	e7ec      	b.n	800e984 <_malloc_r+0xa0>
 800e9aa:	4623      	mov	r3, r4
 800e9ac:	6864      	ldr	r4, [r4, #4]
 800e9ae:	e7b2      	b.n	800e916 <_malloc_r+0x32>
 800e9b0:	4634      	mov	r4, r6
 800e9b2:	6876      	ldr	r6, [r6, #4]
 800e9b4:	e7b9      	b.n	800e92a <_malloc_r+0x46>
 800e9b6:	230c      	movs	r3, #12
 800e9b8:	603b      	str	r3, [r7, #0]
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	f000 f880 	bl	800eac0 <__malloc_unlock>
 800e9c0:	e7a1      	b.n	800e906 <_malloc_r+0x22>
 800e9c2:	6025      	str	r5, [r4, #0]
 800e9c4:	e7de      	b.n	800e984 <_malloc_r+0xa0>
 800e9c6:	bf00      	nop
 800e9c8:	240009e8 	.word	0x240009e8
 800e9cc:	00000000 	.word	0x00000000

0800e9d0 <nan>:
 800e9d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e9d8 <nan+0x8>
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	7ff80000 	.word	0x7ff80000

0800e9e0 <_sbrk_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d06      	ldr	r5, [pc, #24]	; (800e9fc <_sbrk_r+0x1c>)
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	602b      	str	r3, [r5, #0]
 800e9ec:	f7f4 fb92 	bl	8003114 <_sbrk>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_sbrk_r+0x1a>
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_sbrk_r+0x1a>
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	240009f0 	.word	0x240009f0

0800ea00 <strncmp>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	b17a      	cbz	r2, 800ea24 <strncmp+0x24>
 800ea04:	4603      	mov	r3, r0
 800ea06:	3901      	subs	r1, #1
 800ea08:	1884      	adds	r4, r0, r2
 800ea0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea12:	4290      	cmp	r0, r2
 800ea14:	d101      	bne.n	800ea1a <strncmp+0x1a>
 800ea16:	42a3      	cmp	r3, r4
 800ea18:	d101      	bne.n	800ea1e <strncmp+0x1e>
 800ea1a:	1a80      	subs	r0, r0, r2
 800ea1c:	bd10      	pop	{r4, pc}
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	d1f3      	bne.n	800ea0a <strncmp+0xa>
 800ea22:	e7fa      	b.n	800ea1a <strncmp+0x1a>
 800ea24:	4610      	mov	r0, r2
 800ea26:	e7f9      	b.n	800ea1c <strncmp+0x1c>

0800ea28 <__ascii_wctomb>:
 800ea28:	b149      	cbz	r1, 800ea3e <__ascii_wctomb+0x16>
 800ea2a:	2aff      	cmp	r2, #255	; 0xff
 800ea2c:	bf85      	ittet	hi
 800ea2e:	238a      	movhi	r3, #138	; 0x8a
 800ea30:	6003      	strhi	r3, [r0, #0]
 800ea32:	700a      	strbls	r2, [r1, #0]
 800ea34:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea38:	bf98      	it	ls
 800ea3a:	2001      	movls	r0, #1
 800ea3c:	4770      	bx	lr
 800ea3e:	4608      	mov	r0, r1
 800ea40:	4770      	bx	lr
	...

0800ea44 <__assert_func>:
 800ea44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea46:	4614      	mov	r4, r2
 800ea48:	461a      	mov	r2, r3
 800ea4a:	4b09      	ldr	r3, [pc, #36]	; (800ea70 <__assert_func+0x2c>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4605      	mov	r5, r0
 800ea50:	68d8      	ldr	r0, [r3, #12]
 800ea52:	b14c      	cbz	r4, 800ea68 <__assert_func+0x24>
 800ea54:	4b07      	ldr	r3, [pc, #28]	; (800ea74 <__assert_func+0x30>)
 800ea56:	9100      	str	r1, [sp, #0]
 800ea58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea5c:	4906      	ldr	r1, [pc, #24]	; (800ea78 <__assert_func+0x34>)
 800ea5e:	462b      	mov	r3, r5
 800ea60:	f000 f80e 	bl	800ea80 <fiprintf>
 800ea64:	f000 fc2c 	bl	800f2c0 <abort>
 800ea68:	4b04      	ldr	r3, [pc, #16]	; (800ea7c <__assert_func+0x38>)
 800ea6a:	461c      	mov	r4, r3
 800ea6c:	e7f3      	b.n	800ea56 <__assert_func+0x12>
 800ea6e:	bf00      	nop
 800ea70:	24000074 	.word	0x24000074
 800ea74:	0801048c 	.word	0x0801048c
 800ea78:	08010499 	.word	0x08010499
 800ea7c:	080104c7 	.word	0x080104c7

0800ea80 <fiprintf>:
 800ea80:	b40e      	push	{r1, r2, r3}
 800ea82:	b503      	push	{r0, r1, lr}
 800ea84:	4601      	mov	r1, r0
 800ea86:	ab03      	add	r3, sp, #12
 800ea88:	4805      	ldr	r0, [pc, #20]	; (800eaa0 <fiprintf+0x20>)
 800ea8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea8e:	6800      	ldr	r0, [r0, #0]
 800ea90:	9301      	str	r3, [sp, #4]
 800ea92:	f000 f891 	bl	800ebb8 <_vfiprintf_r>
 800ea96:	b002      	add	sp, #8
 800ea98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea9c:	b003      	add	sp, #12
 800ea9e:	4770      	bx	lr
 800eaa0:	24000074 	.word	0x24000074

0800eaa4 <malloc>:
 800eaa4:	4b02      	ldr	r3, [pc, #8]	; (800eab0 <malloc+0xc>)
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f7ff bf1b 	b.w	800e8e4 <_malloc_r>
 800eaae:	bf00      	nop
 800eab0:	24000074 	.word	0x24000074

0800eab4 <__malloc_lock>:
 800eab4:	4801      	ldr	r0, [pc, #4]	; (800eabc <__malloc_lock+0x8>)
 800eab6:	f000 bdc3 	b.w	800f640 <__retarget_lock_acquire_recursive>
 800eaba:	bf00      	nop
 800eabc:	240009f4 	.word	0x240009f4

0800eac0 <__malloc_unlock>:
 800eac0:	4801      	ldr	r0, [pc, #4]	; (800eac8 <__malloc_unlock+0x8>)
 800eac2:	f000 bdbe 	b.w	800f642 <__retarget_lock_release_recursive>
 800eac6:	bf00      	nop
 800eac8:	240009f4 	.word	0x240009f4

0800eacc <_free_r>:
 800eacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eace:	2900      	cmp	r1, #0
 800ead0:	d044      	beq.n	800eb5c <_free_r+0x90>
 800ead2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ead6:	9001      	str	r0, [sp, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f1a1 0404 	sub.w	r4, r1, #4
 800eade:	bfb8      	it	lt
 800eae0:	18e4      	addlt	r4, r4, r3
 800eae2:	f7ff ffe7 	bl	800eab4 <__malloc_lock>
 800eae6:	4a1e      	ldr	r2, [pc, #120]	; (800eb60 <_free_r+0x94>)
 800eae8:	9801      	ldr	r0, [sp, #4]
 800eaea:	6813      	ldr	r3, [r2, #0]
 800eaec:	b933      	cbnz	r3, 800eafc <_free_r+0x30>
 800eaee:	6063      	str	r3, [r4, #4]
 800eaf0:	6014      	str	r4, [r2, #0]
 800eaf2:	b003      	add	sp, #12
 800eaf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eaf8:	f7ff bfe2 	b.w	800eac0 <__malloc_unlock>
 800eafc:	42a3      	cmp	r3, r4
 800eafe:	d908      	bls.n	800eb12 <_free_r+0x46>
 800eb00:	6825      	ldr	r5, [r4, #0]
 800eb02:	1961      	adds	r1, r4, r5
 800eb04:	428b      	cmp	r3, r1
 800eb06:	bf01      	itttt	eq
 800eb08:	6819      	ldreq	r1, [r3, #0]
 800eb0a:	685b      	ldreq	r3, [r3, #4]
 800eb0c:	1949      	addeq	r1, r1, r5
 800eb0e:	6021      	streq	r1, [r4, #0]
 800eb10:	e7ed      	b.n	800eaee <_free_r+0x22>
 800eb12:	461a      	mov	r2, r3
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	b10b      	cbz	r3, 800eb1c <_free_r+0x50>
 800eb18:	42a3      	cmp	r3, r4
 800eb1a:	d9fa      	bls.n	800eb12 <_free_r+0x46>
 800eb1c:	6811      	ldr	r1, [r2, #0]
 800eb1e:	1855      	adds	r5, r2, r1
 800eb20:	42a5      	cmp	r5, r4
 800eb22:	d10b      	bne.n	800eb3c <_free_r+0x70>
 800eb24:	6824      	ldr	r4, [r4, #0]
 800eb26:	4421      	add	r1, r4
 800eb28:	1854      	adds	r4, r2, r1
 800eb2a:	42a3      	cmp	r3, r4
 800eb2c:	6011      	str	r1, [r2, #0]
 800eb2e:	d1e0      	bne.n	800eaf2 <_free_r+0x26>
 800eb30:	681c      	ldr	r4, [r3, #0]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	6053      	str	r3, [r2, #4]
 800eb36:	4421      	add	r1, r4
 800eb38:	6011      	str	r1, [r2, #0]
 800eb3a:	e7da      	b.n	800eaf2 <_free_r+0x26>
 800eb3c:	d902      	bls.n	800eb44 <_free_r+0x78>
 800eb3e:	230c      	movs	r3, #12
 800eb40:	6003      	str	r3, [r0, #0]
 800eb42:	e7d6      	b.n	800eaf2 <_free_r+0x26>
 800eb44:	6825      	ldr	r5, [r4, #0]
 800eb46:	1961      	adds	r1, r4, r5
 800eb48:	428b      	cmp	r3, r1
 800eb4a:	bf04      	itt	eq
 800eb4c:	6819      	ldreq	r1, [r3, #0]
 800eb4e:	685b      	ldreq	r3, [r3, #4]
 800eb50:	6063      	str	r3, [r4, #4]
 800eb52:	bf04      	itt	eq
 800eb54:	1949      	addeq	r1, r1, r5
 800eb56:	6021      	streq	r1, [r4, #0]
 800eb58:	6054      	str	r4, [r2, #4]
 800eb5a:	e7ca      	b.n	800eaf2 <_free_r+0x26>
 800eb5c:	b003      	add	sp, #12
 800eb5e:	bd30      	pop	{r4, r5, pc}
 800eb60:	240009e8 	.word	0x240009e8

0800eb64 <__sfputc_r>:
 800eb64:	6893      	ldr	r3, [r2, #8]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	b410      	push	{r4}
 800eb6c:	6093      	str	r3, [r2, #8]
 800eb6e:	da08      	bge.n	800eb82 <__sfputc_r+0x1e>
 800eb70:	6994      	ldr	r4, [r2, #24]
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	db01      	blt.n	800eb7a <__sfputc_r+0x16>
 800eb76:	290a      	cmp	r1, #10
 800eb78:	d103      	bne.n	800eb82 <__sfputc_r+0x1e>
 800eb7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb7e:	f000 badf 	b.w	800f140 <__swbuf_r>
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	1c58      	adds	r0, r3, #1
 800eb86:	6010      	str	r0, [r2, #0]
 800eb88:	7019      	strb	r1, [r3, #0]
 800eb8a:	4608      	mov	r0, r1
 800eb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <__sfputs_r>:
 800eb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	4614      	mov	r4, r2
 800eb9a:	18d5      	adds	r5, r2, r3
 800eb9c:	42ac      	cmp	r4, r5
 800eb9e:	d101      	bne.n	800eba4 <__sfputs_r+0x12>
 800eba0:	2000      	movs	r0, #0
 800eba2:	e007      	b.n	800ebb4 <__sfputs_r+0x22>
 800eba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba8:	463a      	mov	r2, r7
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f7ff ffda 	bl	800eb64 <__sfputc_r>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d1f3      	bne.n	800eb9c <__sfputs_r+0xa>
 800ebb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebb8 <_vfiprintf_r>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	460d      	mov	r5, r1
 800ebbe:	b09d      	sub	sp, #116	; 0x74
 800ebc0:	4614      	mov	r4, r2
 800ebc2:	4698      	mov	r8, r3
 800ebc4:	4606      	mov	r6, r0
 800ebc6:	b118      	cbz	r0, 800ebd0 <_vfiprintf_r+0x18>
 800ebc8:	6983      	ldr	r3, [r0, #24]
 800ebca:	b90b      	cbnz	r3, 800ebd0 <_vfiprintf_r+0x18>
 800ebcc:	f000 fc9a 	bl	800f504 <__sinit>
 800ebd0:	4b89      	ldr	r3, [pc, #548]	; (800edf8 <_vfiprintf_r+0x240>)
 800ebd2:	429d      	cmp	r5, r3
 800ebd4:	d11b      	bne.n	800ec0e <_vfiprintf_r+0x56>
 800ebd6:	6875      	ldr	r5, [r6, #4]
 800ebd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebda:	07d9      	lsls	r1, r3, #31
 800ebdc:	d405      	bmi.n	800ebea <_vfiprintf_r+0x32>
 800ebde:	89ab      	ldrh	r3, [r5, #12]
 800ebe0:	059a      	lsls	r2, r3, #22
 800ebe2:	d402      	bmi.n	800ebea <_vfiprintf_r+0x32>
 800ebe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebe6:	f000 fd2b 	bl	800f640 <__retarget_lock_acquire_recursive>
 800ebea:	89ab      	ldrh	r3, [r5, #12]
 800ebec:	071b      	lsls	r3, r3, #28
 800ebee:	d501      	bpl.n	800ebf4 <_vfiprintf_r+0x3c>
 800ebf0:	692b      	ldr	r3, [r5, #16]
 800ebf2:	b9eb      	cbnz	r3, 800ec30 <_vfiprintf_r+0x78>
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	f000 faf4 	bl	800f1e4 <__swsetup_r>
 800ebfc:	b1c0      	cbz	r0, 800ec30 <_vfiprintf_r+0x78>
 800ebfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec00:	07dc      	lsls	r4, r3, #31
 800ec02:	d50e      	bpl.n	800ec22 <_vfiprintf_r+0x6a>
 800ec04:	f04f 30ff 	mov.w	r0, #4294967295
 800ec08:	b01d      	add	sp, #116	; 0x74
 800ec0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0e:	4b7b      	ldr	r3, [pc, #492]	; (800edfc <_vfiprintf_r+0x244>)
 800ec10:	429d      	cmp	r5, r3
 800ec12:	d101      	bne.n	800ec18 <_vfiprintf_r+0x60>
 800ec14:	68b5      	ldr	r5, [r6, #8]
 800ec16:	e7df      	b.n	800ebd8 <_vfiprintf_r+0x20>
 800ec18:	4b79      	ldr	r3, [pc, #484]	; (800ee00 <_vfiprintf_r+0x248>)
 800ec1a:	429d      	cmp	r5, r3
 800ec1c:	bf08      	it	eq
 800ec1e:	68f5      	ldreq	r5, [r6, #12]
 800ec20:	e7da      	b.n	800ebd8 <_vfiprintf_r+0x20>
 800ec22:	89ab      	ldrh	r3, [r5, #12]
 800ec24:	0598      	lsls	r0, r3, #22
 800ec26:	d4ed      	bmi.n	800ec04 <_vfiprintf_r+0x4c>
 800ec28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec2a:	f000 fd0a 	bl	800f642 <__retarget_lock_release_recursive>
 800ec2e:	e7e9      	b.n	800ec04 <_vfiprintf_r+0x4c>
 800ec30:	2300      	movs	r3, #0
 800ec32:	9309      	str	r3, [sp, #36]	; 0x24
 800ec34:	2320      	movs	r3, #32
 800ec36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec3e:	2330      	movs	r3, #48	; 0x30
 800ec40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee04 <_vfiprintf_r+0x24c>
 800ec44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec48:	f04f 0901 	mov.w	r9, #1
 800ec4c:	4623      	mov	r3, r4
 800ec4e:	469a      	mov	sl, r3
 800ec50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec54:	b10a      	cbz	r2, 800ec5a <_vfiprintf_r+0xa2>
 800ec56:	2a25      	cmp	r2, #37	; 0x25
 800ec58:	d1f9      	bne.n	800ec4e <_vfiprintf_r+0x96>
 800ec5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ec5e:	d00b      	beq.n	800ec78 <_vfiprintf_r+0xc0>
 800ec60:	465b      	mov	r3, fp
 800ec62:	4622      	mov	r2, r4
 800ec64:	4629      	mov	r1, r5
 800ec66:	4630      	mov	r0, r6
 800ec68:	f7ff ff93 	bl	800eb92 <__sfputs_r>
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	f000 80aa 	beq.w	800edc6 <_vfiprintf_r+0x20e>
 800ec72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec74:	445a      	add	r2, fp
 800ec76:	9209      	str	r2, [sp, #36]	; 0x24
 800ec78:	f89a 3000 	ldrb.w	r3, [sl]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f000 80a2 	beq.w	800edc6 <_vfiprintf_r+0x20e>
 800ec82:	2300      	movs	r3, #0
 800ec84:	f04f 32ff 	mov.w	r2, #4294967295
 800ec88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec8c:	f10a 0a01 	add.w	sl, sl, #1
 800ec90:	9304      	str	r3, [sp, #16]
 800ec92:	9307      	str	r3, [sp, #28]
 800ec94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec98:	931a      	str	r3, [sp, #104]	; 0x68
 800ec9a:	4654      	mov	r4, sl
 800ec9c:	2205      	movs	r2, #5
 800ec9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca2:	4858      	ldr	r0, [pc, #352]	; (800ee04 <_vfiprintf_r+0x24c>)
 800eca4:	f7f1 fb24 	bl	80002f0 <memchr>
 800eca8:	9a04      	ldr	r2, [sp, #16]
 800ecaa:	b9d8      	cbnz	r0, 800ece4 <_vfiprintf_r+0x12c>
 800ecac:	06d1      	lsls	r1, r2, #27
 800ecae:	bf44      	itt	mi
 800ecb0:	2320      	movmi	r3, #32
 800ecb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecb6:	0713      	lsls	r3, r2, #28
 800ecb8:	bf44      	itt	mi
 800ecba:	232b      	movmi	r3, #43	; 0x2b
 800ecbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecc0:	f89a 3000 	ldrb.w	r3, [sl]
 800ecc4:	2b2a      	cmp	r3, #42	; 0x2a
 800ecc6:	d015      	beq.n	800ecf4 <_vfiprintf_r+0x13c>
 800ecc8:	9a07      	ldr	r2, [sp, #28]
 800ecca:	4654      	mov	r4, sl
 800eccc:	2000      	movs	r0, #0
 800ecce:	f04f 0c0a 	mov.w	ip, #10
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd8:	3b30      	subs	r3, #48	; 0x30
 800ecda:	2b09      	cmp	r3, #9
 800ecdc:	d94e      	bls.n	800ed7c <_vfiprintf_r+0x1c4>
 800ecde:	b1b0      	cbz	r0, 800ed0e <_vfiprintf_r+0x156>
 800ece0:	9207      	str	r2, [sp, #28]
 800ece2:	e014      	b.n	800ed0e <_vfiprintf_r+0x156>
 800ece4:	eba0 0308 	sub.w	r3, r0, r8
 800ece8:	fa09 f303 	lsl.w	r3, r9, r3
 800ecec:	4313      	orrs	r3, r2
 800ecee:	9304      	str	r3, [sp, #16]
 800ecf0:	46a2      	mov	sl, r4
 800ecf2:	e7d2      	b.n	800ec9a <_vfiprintf_r+0xe2>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	1d19      	adds	r1, r3, #4
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	9103      	str	r1, [sp, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	bfbb      	ittet	lt
 800ed00:	425b      	neglt	r3, r3
 800ed02:	f042 0202 	orrlt.w	r2, r2, #2
 800ed06:	9307      	strge	r3, [sp, #28]
 800ed08:	9307      	strlt	r3, [sp, #28]
 800ed0a:	bfb8      	it	lt
 800ed0c:	9204      	strlt	r2, [sp, #16]
 800ed0e:	7823      	ldrb	r3, [r4, #0]
 800ed10:	2b2e      	cmp	r3, #46	; 0x2e
 800ed12:	d10c      	bne.n	800ed2e <_vfiprintf_r+0x176>
 800ed14:	7863      	ldrb	r3, [r4, #1]
 800ed16:	2b2a      	cmp	r3, #42	; 0x2a
 800ed18:	d135      	bne.n	800ed86 <_vfiprintf_r+0x1ce>
 800ed1a:	9b03      	ldr	r3, [sp, #12]
 800ed1c:	1d1a      	adds	r2, r3, #4
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	9203      	str	r2, [sp, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	bfb8      	it	lt
 800ed26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed2a:	3402      	adds	r4, #2
 800ed2c:	9305      	str	r3, [sp, #20]
 800ed2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee14 <_vfiprintf_r+0x25c>
 800ed32:	7821      	ldrb	r1, [r4, #0]
 800ed34:	2203      	movs	r2, #3
 800ed36:	4650      	mov	r0, sl
 800ed38:	f7f1 fada 	bl	80002f0 <memchr>
 800ed3c:	b140      	cbz	r0, 800ed50 <_vfiprintf_r+0x198>
 800ed3e:	2340      	movs	r3, #64	; 0x40
 800ed40:	eba0 000a 	sub.w	r0, r0, sl
 800ed44:	fa03 f000 	lsl.w	r0, r3, r0
 800ed48:	9b04      	ldr	r3, [sp, #16]
 800ed4a:	4303      	orrs	r3, r0
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	9304      	str	r3, [sp, #16]
 800ed50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed54:	482c      	ldr	r0, [pc, #176]	; (800ee08 <_vfiprintf_r+0x250>)
 800ed56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed5a:	2206      	movs	r2, #6
 800ed5c:	f7f1 fac8 	bl	80002f0 <memchr>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d03f      	beq.n	800ede4 <_vfiprintf_r+0x22c>
 800ed64:	4b29      	ldr	r3, [pc, #164]	; (800ee0c <_vfiprintf_r+0x254>)
 800ed66:	bb1b      	cbnz	r3, 800edb0 <_vfiprintf_r+0x1f8>
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	3307      	adds	r3, #7
 800ed6c:	f023 0307 	bic.w	r3, r3, #7
 800ed70:	3308      	adds	r3, #8
 800ed72:	9303      	str	r3, [sp, #12]
 800ed74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed76:	443b      	add	r3, r7
 800ed78:	9309      	str	r3, [sp, #36]	; 0x24
 800ed7a:	e767      	b.n	800ec4c <_vfiprintf_r+0x94>
 800ed7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed80:	460c      	mov	r4, r1
 800ed82:	2001      	movs	r0, #1
 800ed84:	e7a5      	b.n	800ecd2 <_vfiprintf_r+0x11a>
 800ed86:	2300      	movs	r3, #0
 800ed88:	3401      	adds	r4, #1
 800ed8a:	9305      	str	r3, [sp, #20]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	f04f 0c0a 	mov.w	ip, #10
 800ed92:	4620      	mov	r0, r4
 800ed94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed98:	3a30      	subs	r2, #48	; 0x30
 800ed9a:	2a09      	cmp	r2, #9
 800ed9c:	d903      	bls.n	800eda6 <_vfiprintf_r+0x1ee>
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d0c5      	beq.n	800ed2e <_vfiprintf_r+0x176>
 800eda2:	9105      	str	r1, [sp, #20]
 800eda4:	e7c3      	b.n	800ed2e <_vfiprintf_r+0x176>
 800eda6:	fb0c 2101 	mla	r1, ip, r1, r2
 800edaa:	4604      	mov	r4, r0
 800edac:	2301      	movs	r3, #1
 800edae:	e7f0      	b.n	800ed92 <_vfiprintf_r+0x1da>
 800edb0:	ab03      	add	r3, sp, #12
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	462a      	mov	r2, r5
 800edb6:	4b16      	ldr	r3, [pc, #88]	; (800ee10 <_vfiprintf_r+0x258>)
 800edb8:	a904      	add	r1, sp, #16
 800edba:	4630      	mov	r0, r6
 800edbc:	f3af 8000 	nop.w
 800edc0:	4607      	mov	r7, r0
 800edc2:	1c78      	adds	r0, r7, #1
 800edc4:	d1d6      	bne.n	800ed74 <_vfiprintf_r+0x1bc>
 800edc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc8:	07d9      	lsls	r1, r3, #31
 800edca:	d405      	bmi.n	800edd8 <_vfiprintf_r+0x220>
 800edcc:	89ab      	ldrh	r3, [r5, #12]
 800edce:	059a      	lsls	r2, r3, #22
 800edd0:	d402      	bmi.n	800edd8 <_vfiprintf_r+0x220>
 800edd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edd4:	f000 fc35 	bl	800f642 <__retarget_lock_release_recursive>
 800edd8:	89ab      	ldrh	r3, [r5, #12]
 800edda:	065b      	lsls	r3, r3, #25
 800eddc:	f53f af12 	bmi.w	800ec04 <_vfiprintf_r+0x4c>
 800ede0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ede2:	e711      	b.n	800ec08 <_vfiprintf_r+0x50>
 800ede4:	ab03      	add	r3, sp, #12
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	462a      	mov	r2, r5
 800edea:	4b09      	ldr	r3, [pc, #36]	; (800ee10 <_vfiprintf_r+0x258>)
 800edec:	a904      	add	r1, sp, #16
 800edee:	4630      	mov	r0, r6
 800edf0:	f000 f880 	bl	800eef4 <_printf_i>
 800edf4:	e7e4      	b.n	800edc0 <_vfiprintf_r+0x208>
 800edf6:	bf00      	nop
 800edf8:	0801061c 	.word	0x0801061c
 800edfc:	0801063c 	.word	0x0801063c
 800ee00:	080105fc 	.word	0x080105fc
 800ee04:	080105c9 	.word	0x080105c9
 800ee08:	080105d3 	.word	0x080105d3
 800ee0c:	00000000 	.word	0x00000000
 800ee10:	0800eb93 	.word	0x0800eb93
 800ee14:	080105cf 	.word	0x080105cf

0800ee18 <_printf_common>:
 800ee18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee1c:	4616      	mov	r6, r2
 800ee1e:	4699      	mov	r9, r3
 800ee20:	688a      	ldr	r2, [r1, #8]
 800ee22:	690b      	ldr	r3, [r1, #16]
 800ee24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	bfb8      	it	lt
 800ee2c:	4613      	movlt	r3, r2
 800ee2e:	6033      	str	r3, [r6, #0]
 800ee30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee34:	4607      	mov	r7, r0
 800ee36:	460c      	mov	r4, r1
 800ee38:	b10a      	cbz	r2, 800ee3e <_printf_common+0x26>
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	6033      	str	r3, [r6, #0]
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	0699      	lsls	r1, r3, #26
 800ee42:	bf42      	ittt	mi
 800ee44:	6833      	ldrmi	r3, [r6, #0]
 800ee46:	3302      	addmi	r3, #2
 800ee48:	6033      	strmi	r3, [r6, #0]
 800ee4a:	6825      	ldr	r5, [r4, #0]
 800ee4c:	f015 0506 	ands.w	r5, r5, #6
 800ee50:	d106      	bne.n	800ee60 <_printf_common+0x48>
 800ee52:	f104 0a19 	add.w	sl, r4, #25
 800ee56:	68e3      	ldr	r3, [r4, #12]
 800ee58:	6832      	ldr	r2, [r6, #0]
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	42ab      	cmp	r3, r5
 800ee5e:	dc26      	bgt.n	800eeae <_printf_common+0x96>
 800ee60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee64:	1e13      	subs	r3, r2, #0
 800ee66:	6822      	ldr	r2, [r4, #0]
 800ee68:	bf18      	it	ne
 800ee6a:	2301      	movne	r3, #1
 800ee6c:	0692      	lsls	r2, r2, #26
 800ee6e:	d42b      	bmi.n	800eec8 <_printf_common+0xb0>
 800ee70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee74:	4649      	mov	r1, r9
 800ee76:	4638      	mov	r0, r7
 800ee78:	47c0      	blx	r8
 800ee7a:	3001      	adds	r0, #1
 800ee7c:	d01e      	beq.n	800eebc <_printf_common+0xa4>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	68e5      	ldr	r5, [r4, #12]
 800ee82:	6832      	ldr	r2, [r6, #0]
 800ee84:	f003 0306 	and.w	r3, r3, #6
 800ee88:	2b04      	cmp	r3, #4
 800ee8a:	bf08      	it	eq
 800ee8c:	1aad      	subeq	r5, r5, r2
 800ee8e:	68a3      	ldr	r3, [r4, #8]
 800ee90:	6922      	ldr	r2, [r4, #16]
 800ee92:	bf0c      	ite	eq
 800ee94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee98:	2500      	movne	r5, #0
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	bfc4      	itt	gt
 800ee9e:	1a9b      	subgt	r3, r3, r2
 800eea0:	18ed      	addgt	r5, r5, r3
 800eea2:	2600      	movs	r6, #0
 800eea4:	341a      	adds	r4, #26
 800eea6:	42b5      	cmp	r5, r6
 800eea8:	d11a      	bne.n	800eee0 <_printf_common+0xc8>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e008      	b.n	800eec0 <_printf_common+0xa8>
 800eeae:	2301      	movs	r3, #1
 800eeb0:	4652      	mov	r2, sl
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	47c0      	blx	r8
 800eeb8:	3001      	adds	r0, #1
 800eeba:	d103      	bne.n	800eec4 <_printf_common+0xac>
 800eebc:	f04f 30ff 	mov.w	r0, #4294967295
 800eec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec4:	3501      	adds	r5, #1
 800eec6:	e7c6      	b.n	800ee56 <_printf_common+0x3e>
 800eec8:	18e1      	adds	r1, r4, r3
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	2030      	movs	r0, #48	; 0x30
 800eece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eed2:	4422      	add	r2, r4
 800eed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eedc:	3302      	adds	r3, #2
 800eede:	e7c7      	b.n	800ee70 <_printf_common+0x58>
 800eee0:	2301      	movs	r3, #1
 800eee2:	4622      	mov	r2, r4
 800eee4:	4649      	mov	r1, r9
 800eee6:	4638      	mov	r0, r7
 800eee8:	47c0      	blx	r8
 800eeea:	3001      	adds	r0, #1
 800eeec:	d0e6      	beq.n	800eebc <_printf_common+0xa4>
 800eeee:	3601      	adds	r6, #1
 800eef0:	e7d9      	b.n	800eea6 <_printf_common+0x8e>
	...

0800eef4 <_printf_i>:
 800eef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eef8:	7e0f      	ldrb	r7, [r1, #24]
 800eefa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eefc:	2f78      	cmp	r7, #120	; 0x78
 800eefe:	4691      	mov	r9, r2
 800ef00:	4680      	mov	r8, r0
 800ef02:	460c      	mov	r4, r1
 800ef04:	469a      	mov	sl, r3
 800ef06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef0a:	d807      	bhi.n	800ef1c <_printf_i+0x28>
 800ef0c:	2f62      	cmp	r7, #98	; 0x62
 800ef0e:	d80a      	bhi.n	800ef26 <_printf_i+0x32>
 800ef10:	2f00      	cmp	r7, #0
 800ef12:	f000 80d8 	beq.w	800f0c6 <_printf_i+0x1d2>
 800ef16:	2f58      	cmp	r7, #88	; 0x58
 800ef18:	f000 80a3 	beq.w	800f062 <_printf_i+0x16e>
 800ef1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef24:	e03a      	b.n	800ef9c <_printf_i+0xa8>
 800ef26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef2a:	2b15      	cmp	r3, #21
 800ef2c:	d8f6      	bhi.n	800ef1c <_printf_i+0x28>
 800ef2e:	a101      	add	r1, pc, #4	; (adr r1, 800ef34 <_printf_i+0x40>)
 800ef30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef34:	0800ef8d 	.word	0x0800ef8d
 800ef38:	0800efa1 	.word	0x0800efa1
 800ef3c:	0800ef1d 	.word	0x0800ef1d
 800ef40:	0800ef1d 	.word	0x0800ef1d
 800ef44:	0800ef1d 	.word	0x0800ef1d
 800ef48:	0800ef1d 	.word	0x0800ef1d
 800ef4c:	0800efa1 	.word	0x0800efa1
 800ef50:	0800ef1d 	.word	0x0800ef1d
 800ef54:	0800ef1d 	.word	0x0800ef1d
 800ef58:	0800ef1d 	.word	0x0800ef1d
 800ef5c:	0800ef1d 	.word	0x0800ef1d
 800ef60:	0800f0ad 	.word	0x0800f0ad
 800ef64:	0800efd1 	.word	0x0800efd1
 800ef68:	0800f08f 	.word	0x0800f08f
 800ef6c:	0800ef1d 	.word	0x0800ef1d
 800ef70:	0800ef1d 	.word	0x0800ef1d
 800ef74:	0800f0cf 	.word	0x0800f0cf
 800ef78:	0800ef1d 	.word	0x0800ef1d
 800ef7c:	0800efd1 	.word	0x0800efd1
 800ef80:	0800ef1d 	.word	0x0800ef1d
 800ef84:	0800ef1d 	.word	0x0800ef1d
 800ef88:	0800f097 	.word	0x0800f097
 800ef8c:	682b      	ldr	r3, [r5, #0]
 800ef8e:	1d1a      	adds	r2, r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	602a      	str	r2, [r5, #0]
 800ef94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e0a3      	b.n	800f0e8 <_printf_i+0x1f4>
 800efa0:	6820      	ldr	r0, [r4, #0]
 800efa2:	6829      	ldr	r1, [r5, #0]
 800efa4:	0606      	lsls	r6, r0, #24
 800efa6:	f101 0304 	add.w	r3, r1, #4
 800efaa:	d50a      	bpl.n	800efc2 <_printf_i+0xce>
 800efac:	680e      	ldr	r6, [r1, #0]
 800efae:	602b      	str	r3, [r5, #0]
 800efb0:	2e00      	cmp	r6, #0
 800efb2:	da03      	bge.n	800efbc <_printf_i+0xc8>
 800efb4:	232d      	movs	r3, #45	; 0x2d
 800efb6:	4276      	negs	r6, r6
 800efb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efbc:	485e      	ldr	r0, [pc, #376]	; (800f138 <_printf_i+0x244>)
 800efbe:	230a      	movs	r3, #10
 800efc0:	e019      	b.n	800eff6 <_printf_i+0x102>
 800efc2:	680e      	ldr	r6, [r1, #0]
 800efc4:	602b      	str	r3, [r5, #0]
 800efc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efca:	bf18      	it	ne
 800efcc:	b236      	sxthne	r6, r6
 800efce:	e7ef      	b.n	800efb0 <_printf_i+0xbc>
 800efd0:	682b      	ldr	r3, [r5, #0]
 800efd2:	6820      	ldr	r0, [r4, #0]
 800efd4:	1d19      	adds	r1, r3, #4
 800efd6:	6029      	str	r1, [r5, #0]
 800efd8:	0601      	lsls	r1, r0, #24
 800efda:	d501      	bpl.n	800efe0 <_printf_i+0xec>
 800efdc:	681e      	ldr	r6, [r3, #0]
 800efde:	e002      	b.n	800efe6 <_printf_i+0xf2>
 800efe0:	0646      	lsls	r6, r0, #25
 800efe2:	d5fb      	bpl.n	800efdc <_printf_i+0xe8>
 800efe4:	881e      	ldrh	r6, [r3, #0]
 800efe6:	4854      	ldr	r0, [pc, #336]	; (800f138 <_printf_i+0x244>)
 800efe8:	2f6f      	cmp	r7, #111	; 0x6f
 800efea:	bf0c      	ite	eq
 800efec:	2308      	moveq	r3, #8
 800efee:	230a      	movne	r3, #10
 800eff0:	2100      	movs	r1, #0
 800eff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eff6:	6865      	ldr	r5, [r4, #4]
 800eff8:	60a5      	str	r5, [r4, #8]
 800effa:	2d00      	cmp	r5, #0
 800effc:	bfa2      	ittt	ge
 800effe:	6821      	ldrge	r1, [r4, #0]
 800f000:	f021 0104 	bicge.w	r1, r1, #4
 800f004:	6021      	strge	r1, [r4, #0]
 800f006:	b90e      	cbnz	r6, 800f00c <_printf_i+0x118>
 800f008:	2d00      	cmp	r5, #0
 800f00a:	d04d      	beq.n	800f0a8 <_printf_i+0x1b4>
 800f00c:	4615      	mov	r5, r2
 800f00e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f012:	fb03 6711 	mls	r7, r3, r1, r6
 800f016:	5dc7      	ldrb	r7, [r0, r7]
 800f018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f01c:	4637      	mov	r7, r6
 800f01e:	42bb      	cmp	r3, r7
 800f020:	460e      	mov	r6, r1
 800f022:	d9f4      	bls.n	800f00e <_printf_i+0x11a>
 800f024:	2b08      	cmp	r3, #8
 800f026:	d10b      	bne.n	800f040 <_printf_i+0x14c>
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	07de      	lsls	r6, r3, #31
 800f02c:	d508      	bpl.n	800f040 <_printf_i+0x14c>
 800f02e:	6923      	ldr	r3, [r4, #16]
 800f030:	6861      	ldr	r1, [r4, #4]
 800f032:	4299      	cmp	r1, r3
 800f034:	bfde      	ittt	le
 800f036:	2330      	movle	r3, #48	; 0x30
 800f038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f03c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f040:	1b52      	subs	r2, r2, r5
 800f042:	6122      	str	r2, [r4, #16]
 800f044:	f8cd a000 	str.w	sl, [sp]
 800f048:	464b      	mov	r3, r9
 800f04a:	aa03      	add	r2, sp, #12
 800f04c:	4621      	mov	r1, r4
 800f04e:	4640      	mov	r0, r8
 800f050:	f7ff fee2 	bl	800ee18 <_printf_common>
 800f054:	3001      	adds	r0, #1
 800f056:	d14c      	bne.n	800f0f2 <_printf_i+0x1fe>
 800f058:	f04f 30ff 	mov.w	r0, #4294967295
 800f05c:	b004      	add	sp, #16
 800f05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f062:	4835      	ldr	r0, [pc, #212]	; (800f138 <_printf_i+0x244>)
 800f064:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f068:	6829      	ldr	r1, [r5, #0]
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f070:	6029      	str	r1, [r5, #0]
 800f072:	061d      	lsls	r5, r3, #24
 800f074:	d514      	bpl.n	800f0a0 <_printf_i+0x1ac>
 800f076:	07df      	lsls	r7, r3, #31
 800f078:	bf44      	itt	mi
 800f07a:	f043 0320 	orrmi.w	r3, r3, #32
 800f07e:	6023      	strmi	r3, [r4, #0]
 800f080:	b91e      	cbnz	r6, 800f08a <_printf_i+0x196>
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	f023 0320 	bic.w	r3, r3, #32
 800f088:	6023      	str	r3, [r4, #0]
 800f08a:	2310      	movs	r3, #16
 800f08c:	e7b0      	b.n	800eff0 <_printf_i+0xfc>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	f043 0320 	orr.w	r3, r3, #32
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	2378      	movs	r3, #120	; 0x78
 800f098:	4828      	ldr	r0, [pc, #160]	; (800f13c <_printf_i+0x248>)
 800f09a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f09e:	e7e3      	b.n	800f068 <_printf_i+0x174>
 800f0a0:	0659      	lsls	r1, r3, #25
 800f0a2:	bf48      	it	mi
 800f0a4:	b2b6      	uxthmi	r6, r6
 800f0a6:	e7e6      	b.n	800f076 <_printf_i+0x182>
 800f0a8:	4615      	mov	r5, r2
 800f0aa:	e7bb      	b.n	800f024 <_printf_i+0x130>
 800f0ac:	682b      	ldr	r3, [r5, #0]
 800f0ae:	6826      	ldr	r6, [r4, #0]
 800f0b0:	6961      	ldr	r1, [r4, #20]
 800f0b2:	1d18      	adds	r0, r3, #4
 800f0b4:	6028      	str	r0, [r5, #0]
 800f0b6:	0635      	lsls	r5, r6, #24
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	d501      	bpl.n	800f0c0 <_printf_i+0x1cc>
 800f0bc:	6019      	str	r1, [r3, #0]
 800f0be:	e002      	b.n	800f0c6 <_printf_i+0x1d2>
 800f0c0:	0670      	lsls	r0, r6, #25
 800f0c2:	d5fb      	bpl.n	800f0bc <_printf_i+0x1c8>
 800f0c4:	8019      	strh	r1, [r3, #0]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6123      	str	r3, [r4, #16]
 800f0ca:	4615      	mov	r5, r2
 800f0cc:	e7ba      	b.n	800f044 <_printf_i+0x150>
 800f0ce:	682b      	ldr	r3, [r5, #0]
 800f0d0:	1d1a      	adds	r2, r3, #4
 800f0d2:	602a      	str	r2, [r5, #0]
 800f0d4:	681d      	ldr	r5, [r3, #0]
 800f0d6:	6862      	ldr	r2, [r4, #4]
 800f0d8:	2100      	movs	r1, #0
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f7f1 f908 	bl	80002f0 <memchr>
 800f0e0:	b108      	cbz	r0, 800f0e6 <_printf_i+0x1f2>
 800f0e2:	1b40      	subs	r0, r0, r5
 800f0e4:	6060      	str	r0, [r4, #4]
 800f0e6:	6863      	ldr	r3, [r4, #4]
 800f0e8:	6123      	str	r3, [r4, #16]
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0f0:	e7a8      	b.n	800f044 <_printf_i+0x150>
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	462a      	mov	r2, r5
 800f0f6:	4649      	mov	r1, r9
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	47d0      	blx	sl
 800f0fc:	3001      	adds	r0, #1
 800f0fe:	d0ab      	beq.n	800f058 <_printf_i+0x164>
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	079b      	lsls	r3, r3, #30
 800f104:	d413      	bmi.n	800f12e <_printf_i+0x23a>
 800f106:	68e0      	ldr	r0, [r4, #12]
 800f108:	9b03      	ldr	r3, [sp, #12]
 800f10a:	4298      	cmp	r0, r3
 800f10c:	bfb8      	it	lt
 800f10e:	4618      	movlt	r0, r3
 800f110:	e7a4      	b.n	800f05c <_printf_i+0x168>
 800f112:	2301      	movs	r3, #1
 800f114:	4632      	mov	r2, r6
 800f116:	4649      	mov	r1, r9
 800f118:	4640      	mov	r0, r8
 800f11a:	47d0      	blx	sl
 800f11c:	3001      	adds	r0, #1
 800f11e:	d09b      	beq.n	800f058 <_printf_i+0x164>
 800f120:	3501      	adds	r5, #1
 800f122:	68e3      	ldr	r3, [r4, #12]
 800f124:	9903      	ldr	r1, [sp, #12]
 800f126:	1a5b      	subs	r3, r3, r1
 800f128:	42ab      	cmp	r3, r5
 800f12a:	dcf2      	bgt.n	800f112 <_printf_i+0x21e>
 800f12c:	e7eb      	b.n	800f106 <_printf_i+0x212>
 800f12e:	2500      	movs	r5, #0
 800f130:	f104 0619 	add.w	r6, r4, #25
 800f134:	e7f5      	b.n	800f122 <_printf_i+0x22e>
 800f136:	bf00      	nop
 800f138:	080105da 	.word	0x080105da
 800f13c:	080105eb 	.word	0x080105eb

0800f140 <__swbuf_r>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	460e      	mov	r6, r1
 800f144:	4614      	mov	r4, r2
 800f146:	4605      	mov	r5, r0
 800f148:	b118      	cbz	r0, 800f152 <__swbuf_r+0x12>
 800f14a:	6983      	ldr	r3, [r0, #24]
 800f14c:	b90b      	cbnz	r3, 800f152 <__swbuf_r+0x12>
 800f14e:	f000 f9d9 	bl	800f504 <__sinit>
 800f152:	4b21      	ldr	r3, [pc, #132]	; (800f1d8 <__swbuf_r+0x98>)
 800f154:	429c      	cmp	r4, r3
 800f156:	d12b      	bne.n	800f1b0 <__swbuf_r+0x70>
 800f158:	686c      	ldr	r4, [r5, #4]
 800f15a:	69a3      	ldr	r3, [r4, #24]
 800f15c:	60a3      	str	r3, [r4, #8]
 800f15e:	89a3      	ldrh	r3, [r4, #12]
 800f160:	071a      	lsls	r2, r3, #28
 800f162:	d52f      	bpl.n	800f1c4 <__swbuf_r+0x84>
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	b36b      	cbz	r3, 800f1c4 <__swbuf_r+0x84>
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	6820      	ldr	r0, [r4, #0]
 800f16c:	1ac0      	subs	r0, r0, r3
 800f16e:	6963      	ldr	r3, [r4, #20]
 800f170:	b2f6      	uxtb	r6, r6
 800f172:	4283      	cmp	r3, r0
 800f174:	4637      	mov	r7, r6
 800f176:	dc04      	bgt.n	800f182 <__swbuf_r+0x42>
 800f178:	4621      	mov	r1, r4
 800f17a:	4628      	mov	r0, r5
 800f17c:	f000 f92e 	bl	800f3dc <_fflush_r>
 800f180:	bb30      	cbnz	r0, 800f1d0 <__swbuf_r+0x90>
 800f182:	68a3      	ldr	r3, [r4, #8]
 800f184:	3b01      	subs	r3, #1
 800f186:	60a3      	str	r3, [r4, #8]
 800f188:	6823      	ldr	r3, [r4, #0]
 800f18a:	1c5a      	adds	r2, r3, #1
 800f18c:	6022      	str	r2, [r4, #0]
 800f18e:	701e      	strb	r6, [r3, #0]
 800f190:	6963      	ldr	r3, [r4, #20]
 800f192:	3001      	adds	r0, #1
 800f194:	4283      	cmp	r3, r0
 800f196:	d004      	beq.n	800f1a2 <__swbuf_r+0x62>
 800f198:	89a3      	ldrh	r3, [r4, #12]
 800f19a:	07db      	lsls	r3, r3, #31
 800f19c:	d506      	bpl.n	800f1ac <__swbuf_r+0x6c>
 800f19e:	2e0a      	cmp	r6, #10
 800f1a0:	d104      	bne.n	800f1ac <__swbuf_r+0x6c>
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f000 f919 	bl	800f3dc <_fflush_r>
 800f1aa:	b988      	cbnz	r0, 800f1d0 <__swbuf_r+0x90>
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b0:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <__swbuf_r+0x9c>)
 800f1b2:	429c      	cmp	r4, r3
 800f1b4:	d101      	bne.n	800f1ba <__swbuf_r+0x7a>
 800f1b6:	68ac      	ldr	r4, [r5, #8]
 800f1b8:	e7cf      	b.n	800f15a <__swbuf_r+0x1a>
 800f1ba:	4b09      	ldr	r3, [pc, #36]	; (800f1e0 <__swbuf_r+0xa0>)
 800f1bc:	429c      	cmp	r4, r3
 800f1be:	bf08      	it	eq
 800f1c0:	68ec      	ldreq	r4, [r5, #12]
 800f1c2:	e7ca      	b.n	800f15a <__swbuf_r+0x1a>
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f000 f80c 	bl	800f1e4 <__swsetup_r>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d0cb      	beq.n	800f168 <__swbuf_r+0x28>
 800f1d0:	f04f 37ff 	mov.w	r7, #4294967295
 800f1d4:	e7ea      	b.n	800f1ac <__swbuf_r+0x6c>
 800f1d6:	bf00      	nop
 800f1d8:	0801061c 	.word	0x0801061c
 800f1dc:	0801063c 	.word	0x0801063c
 800f1e0:	080105fc 	.word	0x080105fc

0800f1e4 <__swsetup_r>:
 800f1e4:	4b32      	ldr	r3, [pc, #200]	; (800f2b0 <__swsetup_r+0xcc>)
 800f1e6:	b570      	push	{r4, r5, r6, lr}
 800f1e8:	681d      	ldr	r5, [r3, #0]
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460c      	mov	r4, r1
 800f1ee:	b125      	cbz	r5, 800f1fa <__swsetup_r+0x16>
 800f1f0:	69ab      	ldr	r3, [r5, #24]
 800f1f2:	b913      	cbnz	r3, 800f1fa <__swsetup_r+0x16>
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f000 f985 	bl	800f504 <__sinit>
 800f1fa:	4b2e      	ldr	r3, [pc, #184]	; (800f2b4 <__swsetup_r+0xd0>)
 800f1fc:	429c      	cmp	r4, r3
 800f1fe:	d10f      	bne.n	800f220 <__swsetup_r+0x3c>
 800f200:	686c      	ldr	r4, [r5, #4]
 800f202:	89a3      	ldrh	r3, [r4, #12]
 800f204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f208:	0719      	lsls	r1, r3, #28
 800f20a:	d42c      	bmi.n	800f266 <__swsetup_r+0x82>
 800f20c:	06dd      	lsls	r5, r3, #27
 800f20e:	d411      	bmi.n	800f234 <__swsetup_r+0x50>
 800f210:	2309      	movs	r3, #9
 800f212:	6033      	str	r3, [r6, #0]
 800f214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f218:	81a3      	strh	r3, [r4, #12]
 800f21a:	f04f 30ff 	mov.w	r0, #4294967295
 800f21e:	e03e      	b.n	800f29e <__swsetup_r+0xba>
 800f220:	4b25      	ldr	r3, [pc, #148]	; (800f2b8 <__swsetup_r+0xd4>)
 800f222:	429c      	cmp	r4, r3
 800f224:	d101      	bne.n	800f22a <__swsetup_r+0x46>
 800f226:	68ac      	ldr	r4, [r5, #8]
 800f228:	e7eb      	b.n	800f202 <__swsetup_r+0x1e>
 800f22a:	4b24      	ldr	r3, [pc, #144]	; (800f2bc <__swsetup_r+0xd8>)
 800f22c:	429c      	cmp	r4, r3
 800f22e:	bf08      	it	eq
 800f230:	68ec      	ldreq	r4, [r5, #12]
 800f232:	e7e6      	b.n	800f202 <__swsetup_r+0x1e>
 800f234:	0758      	lsls	r0, r3, #29
 800f236:	d512      	bpl.n	800f25e <__swsetup_r+0x7a>
 800f238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f23a:	b141      	cbz	r1, 800f24e <__swsetup_r+0x6a>
 800f23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f240:	4299      	cmp	r1, r3
 800f242:	d002      	beq.n	800f24a <__swsetup_r+0x66>
 800f244:	4630      	mov	r0, r6
 800f246:	f7ff fc41 	bl	800eacc <_free_r>
 800f24a:	2300      	movs	r3, #0
 800f24c:	6363      	str	r3, [r4, #52]	; 0x34
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f254:	81a3      	strh	r3, [r4, #12]
 800f256:	2300      	movs	r3, #0
 800f258:	6063      	str	r3, [r4, #4]
 800f25a:	6923      	ldr	r3, [r4, #16]
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	89a3      	ldrh	r3, [r4, #12]
 800f260:	f043 0308 	orr.w	r3, r3, #8
 800f264:	81a3      	strh	r3, [r4, #12]
 800f266:	6923      	ldr	r3, [r4, #16]
 800f268:	b94b      	cbnz	r3, 800f27e <__swsetup_r+0x9a>
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f274:	d003      	beq.n	800f27e <__swsetup_r+0x9a>
 800f276:	4621      	mov	r1, r4
 800f278:	4630      	mov	r0, r6
 800f27a:	f000 fa09 	bl	800f690 <__smakebuf_r>
 800f27e:	89a0      	ldrh	r0, [r4, #12]
 800f280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f284:	f010 0301 	ands.w	r3, r0, #1
 800f288:	d00a      	beq.n	800f2a0 <__swsetup_r+0xbc>
 800f28a:	2300      	movs	r3, #0
 800f28c:	60a3      	str	r3, [r4, #8]
 800f28e:	6963      	ldr	r3, [r4, #20]
 800f290:	425b      	negs	r3, r3
 800f292:	61a3      	str	r3, [r4, #24]
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	b943      	cbnz	r3, 800f2aa <__swsetup_r+0xc6>
 800f298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f29c:	d1ba      	bne.n	800f214 <__swsetup_r+0x30>
 800f29e:	bd70      	pop	{r4, r5, r6, pc}
 800f2a0:	0781      	lsls	r1, r0, #30
 800f2a2:	bf58      	it	pl
 800f2a4:	6963      	ldrpl	r3, [r4, #20]
 800f2a6:	60a3      	str	r3, [r4, #8]
 800f2a8:	e7f4      	b.n	800f294 <__swsetup_r+0xb0>
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	e7f7      	b.n	800f29e <__swsetup_r+0xba>
 800f2ae:	bf00      	nop
 800f2b0:	24000074 	.word	0x24000074
 800f2b4:	0801061c 	.word	0x0801061c
 800f2b8:	0801063c 	.word	0x0801063c
 800f2bc:	080105fc 	.word	0x080105fc

0800f2c0 <abort>:
 800f2c0:	b508      	push	{r3, lr}
 800f2c2:	2006      	movs	r0, #6
 800f2c4:	f000 fa4c 	bl	800f760 <raise>
 800f2c8:	2001      	movs	r0, #1
 800f2ca:	f7f3 feab 	bl	8003024 <_exit>
	...

0800f2d0 <__sflush_r>:
 800f2d0:	898a      	ldrh	r2, [r1, #12]
 800f2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	0710      	lsls	r0, r2, #28
 800f2da:	460c      	mov	r4, r1
 800f2dc:	d458      	bmi.n	800f390 <__sflush_r+0xc0>
 800f2de:	684b      	ldr	r3, [r1, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dc05      	bgt.n	800f2f0 <__sflush_r+0x20>
 800f2e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	dc02      	bgt.n	800f2f0 <__sflush_r+0x20>
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2f2:	2e00      	cmp	r6, #0
 800f2f4:	d0f9      	beq.n	800f2ea <__sflush_r+0x1a>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2fc:	682f      	ldr	r7, [r5, #0]
 800f2fe:	602b      	str	r3, [r5, #0]
 800f300:	d032      	beq.n	800f368 <__sflush_r+0x98>
 800f302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	075a      	lsls	r2, r3, #29
 800f308:	d505      	bpl.n	800f316 <__sflush_r+0x46>
 800f30a:	6863      	ldr	r3, [r4, #4]
 800f30c:	1ac0      	subs	r0, r0, r3
 800f30e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f310:	b10b      	cbz	r3, 800f316 <__sflush_r+0x46>
 800f312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f314:	1ac0      	subs	r0, r0, r3
 800f316:	2300      	movs	r3, #0
 800f318:	4602      	mov	r2, r0
 800f31a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f31c:	6a21      	ldr	r1, [r4, #32]
 800f31e:	4628      	mov	r0, r5
 800f320:	47b0      	blx	r6
 800f322:	1c43      	adds	r3, r0, #1
 800f324:	89a3      	ldrh	r3, [r4, #12]
 800f326:	d106      	bne.n	800f336 <__sflush_r+0x66>
 800f328:	6829      	ldr	r1, [r5, #0]
 800f32a:	291d      	cmp	r1, #29
 800f32c:	d82c      	bhi.n	800f388 <__sflush_r+0xb8>
 800f32e:	4a2a      	ldr	r2, [pc, #168]	; (800f3d8 <__sflush_r+0x108>)
 800f330:	40ca      	lsrs	r2, r1
 800f332:	07d6      	lsls	r6, r2, #31
 800f334:	d528      	bpl.n	800f388 <__sflush_r+0xb8>
 800f336:	2200      	movs	r2, #0
 800f338:	6062      	str	r2, [r4, #4]
 800f33a:	04d9      	lsls	r1, r3, #19
 800f33c:	6922      	ldr	r2, [r4, #16]
 800f33e:	6022      	str	r2, [r4, #0]
 800f340:	d504      	bpl.n	800f34c <__sflush_r+0x7c>
 800f342:	1c42      	adds	r2, r0, #1
 800f344:	d101      	bne.n	800f34a <__sflush_r+0x7a>
 800f346:	682b      	ldr	r3, [r5, #0]
 800f348:	b903      	cbnz	r3, 800f34c <__sflush_r+0x7c>
 800f34a:	6560      	str	r0, [r4, #84]	; 0x54
 800f34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f34e:	602f      	str	r7, [r5, #0]
 800f350:	2900      	cmp	r1, #0
 800f352:	d0ca      	beq.n	800f2ea <__sflush_r+0x1a>
 800f354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f358:	4299      	cmp	r1, r3
 800f35a:	d002      	beq.n	800f362 <__sflush_r+0x92>
 800f35c:	4628      	mov	r0, r5
 800f35e:	f7ff fbb5 	bl	800eacc <_free_r>
 800f362:	2000      	movs	r0, #0
 800f364:	6360      	str	r0, [r4, #52]	; 0x34
 800f366:	e7c1      	b.n	800f2ec <__sflush_r+0x1c>
 800f368:	6a21      	ldr	r1, [r4, #32]
 800f36a:	2301      	movs	r3, #1
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b0      	blx	r6
 800f370:	1c41      	adds	r1, r0, #1
 800f372:	d1c7      	bne.n	800f304 <__sflush_r+0x34>
 800f374:	682b      	ldr	r3, [r5, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d0c4      	beq.n	800f304 <__sflush_r+0x34>
 800f37a:	2b1d      	cmp	r3, #29
 800f37c:	d001      	beq.n	800f382 <__sflush_r+0xb2>
 800f37e:	2b16      	cmp	r3, #22
 800f380:	d101      	bne.n	800f386 <__sflush_r+0xb6>
 800f382:	602f      	str	r7, [r5, #0]
 800f384:	e7b1      	b.n	800f2ea <__sflush_r+0x1a>
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f38c:	81a3      	strh	r3, [r4, #12]
 800f38e:	e7ad      	b.n	800f2ec <__sflush_r+0x1c>
 800f390:	690f      	ldr	r7, [r1, #16]
 800f392:	2f00      	cmp	r7, #0
 800f394:	d0a9      	beq.n	800f2ea <__sflush_r+0x1a>
 800f396:	0793      	lsls	r3, r2, #30
 800f398:	680e      	ldr	r6, [r1, #0]
 800f39a:	bf08      	it	eq
 800f39c:	694b      	ldreq	r3, [r1, #20]
 800f39e:	600f      	str	r7, [r1, #0]
 800f3a0:	bf18      	it	ne
 800f3a2:	2300      	movne	r3, #0
 800f3a4:	eba6 0807 	sub.w	r8, r6, r7
 800f3a8:	608b      	str	r3, [r1, #8]
 800f3aa:	f1b8 0f00 	cmp.w	r8, #0
 800f3ae:	dd9c      	ble.n	800f2ea <__sflush_r+0x1a>
 800f3b0:	6a21      	ldr	r1, [r4, #32]
 800f3b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f3b4:	4643      	mov	r3, r8
 800f3b6:	463a      	mov	r2, r7
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	47b0      	blx	r6
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	dc06      	bgt.n	800f3ce <__sflush_r+0xfe>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3c6:	81a3      	strh	r3, [r4, #12]
 800f3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3cc:	e78e      	b.n	800f2ec <__sflush_r+0x1c>
 800f3ce:	4407      	add	r7, r0
 800f3d0:	eba8 0800 	sub.w	r8, r8, r0
 800f3d4:	e7e9      	b.n	800f3aa <__sflush_r+0xda>
 800f3d6:	bf00      	nop
 800f3d8:	20400001 	.word	0x20400001

0800f3dc <_fflush_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	690b      	ldr	r3, [r1, #16]
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	b913      	cbnz	r3, 800f3ec <_fflush_r+0x10>
 800f3e6:	2500      	movs	r5, #0
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	b118      	cbz	r0, 800f3f6 <_fflush_r+0x1a>
 800f3ee:	6983      	ldr	r3, [r0, #24]
 800f3f0:	b90b      	cbnz	r3, 800f3f6 <_fflush_r+0x1a>
 800f3f2:	f000 f887 	bl	800f504 <__sinit>
 800f3f6:	4b14      	ldr	r3, [pc, #80]	; (800f448 <_fflush_r+0x6c>)
 800f3f8:	429c      	cmp	r4, r3
 800f3fa:	d11b      	bne.n	800f434 <_fflush_r+0x58>
 800f3fc:	686c      	ldr	r4, [r5, #4]
 800f3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d0ef      	beq.n	800f3e6 <_fflush_r+0xa>
 800f406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f408:	07d0      	lsls	r0, r2, #31
 800f40a:	d404      	bmi.n	800f416 <_fflush_r+0x3a>
 800f40c:	0599      	lsls	r1, r3, #22
 800f40e:	d402      	bmi.n	800f416 <_fflush_r+0x3a>
 800f410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f412:	f000 f915 	bl	800f640 <__retarget_lock_acquire_recursive>
 800f416:	4628      	mov	r0, r5
 800f418:	4621      	mov	r1, r4
 800f41a:	f7ff ff59 	bl	800f2d0 <__sflush_r>
 800f41e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f420:	07da      	lsls	r2, r3, #31
 800f422:	4605      	mov	r5, r0
 800f424:	d4e0      	bmi.n	800f3e8 <_fflush_r+0xc>
 800f426:	89a3      	ldrh	r3, [r4, #12]
 800f428:	059b      	lsls	r3, r3, #22
 800f42a:	d4dd      	bmi.n	800f3e8 <_fflush_r+0xc>
 800f42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f42e:	f000 f908 	bl	800f642 <__retarget_lock_release_recursive>
 800f432:	e7d9      	b.n	800f3e8 <_fflush_r+0xc>
 800f434:	4b05      	ldr	r3, [pc, #20]	; (800f44c <_fflush_r+0x70>)
 800f436:	429c      	cmp	r4, r3
 800f438:	d101      	bne.n	800f43e <_fflush_r+0x62>
 800f43a:	68ac      	ldr	r4, [r5, #8]
 800f43c:	e7df      	b.n	800f3fe <_fflush_r+0x22>
 800f43e:	4b04      	ldr	r3, [pc, #16]	; (800f450 <_fflush_r+0x74>)
 800f440:	429c      	cmp	r4, r3
 800f442:	bf08      	it	eq
 800f444:	68ec      	ldreq	r4, [r5, #12]
 800f446:	e7da      	b.n	800f3fe <_fflush_r+0x22>
 800f448:	0801061c 	.word	0x0801061c
 800f44c:	0801063c 	.word	0x0801063c
 800f450:	080105fc 	.word	0x080105fc

0800f454 <std>:
 800f454:	2300      	movs	r3, #0
 800f456:	b510      	push	{r4, lr}
 800f458:	4604      	mov	r4, r0
 800f45a:	e9c0 3300 	strd	r3, r3, [r0]
 800f45e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f462:	6083      	str	r3, [r0, #8]
 800f464:	8181      	strh	r1, [r0, #12]
 800f466:	6643      	str	r3, [r0, #100]	; 0x64
 800f468:	81c2      	strh	r2, [r0, #14]
 800f46a:	6183      	str	r3, [r0, #24]
 800f46c:	4619      	mov	r1, r3
 800f46e:	2208      	movs	r2, #8
 800f470:	305c      	adds	r0, #92	; 0x5c
 800f472:	f7fd fbcd 	bl	800cc10 <memset>
 800f476:	4b05      	ldr	r3, [pc, #20]	; (800f48c <std+0x38>)
 800f478:	6263      	str	r3, [r4, #36]	; 0x24
 800f47a:	4b05      	ldr	r3, [pc, #20]	; (800f490 <std+0x3c>)
 800f47c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f47e:	4b05      	ldr	r3, [pc, #20]	; (800f494 <std+0x40>)
 800f480:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f482:	4b05      	ldr	r3, [pc, #20]	; (800f498 <std+0x44>)
 800f484:	6224      	str	r4, [r4, #32]
 800f486:	6323      	str	r3, [r4, #48]	; 0x30
 800f488:	bd10      	pop	{r4, pc}
 800f48a:	bf00      	nop
 800f48c:	0800f799 	.word	0x0800f799
 800f490:	0800f7bb 	.word	0x0800f7bb
 800f494:	0800f7f3 	.word	0x0800f7f3
 800f498:	0800f817 	.word	0x0800f817

0800f49c <_cleanup_r>:
 800f49c:	4901      	ldr	r1, [pc, #4]	; (800f4a4 <_cleanup_r+0x8>)
 800f49e:	f000 b8af 	b.w	800f600 <_fwalk_reent>
 800f4a2:	bf00      	nop
 800f4a4:	0800f3dd 	.word	0x0800f3dd

0800f4a8 <__sfmoreglue>:
 800f4a8:	b570      	push	{r4, r5, r6, lr}
 800f4aa:	2268      	movs	r2, #104	; 0x68
 800f4ac:	1e4d      	subs	r5, r1, #1
 800f4ae:	4355      	muls	r5, r2
 800f4b0:	460e      	mov	r6, r1
 800f4b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f4b6:	f7ff fa15 	bl	800e8e4 <_malloc_r>
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	b140      	cbz	r0, 800f4d0 <__sfmoreglue+0x28>
 800f4be:	2100      	movs	r1, #0
 800f4c0:	e9c0 1600 	strd	r1, r6, [r0]
 800f4c4:	300c      	adds	r0, #12
 800f4c6:	60a0      	str	r0, [r4, #8]
 800f4c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4cc:	f7fd fba0 	bl	800cc10 <memset>
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	bd70      	pop	{r4, r5, r6, pc}

0800f4d4 <__sfp_lock_acquire>:
 800f4d4:	4801      	ldr	r0, [pc, #4]	; (800f4dc <__sfp_lock_acquire+0x8>)
 800f4d6:	f000 b8b3 	b.w	800f640 <__retarget_lock_acquire_recursive>
 800f4da:	bf00      	nop
 800f4dc:	240009f5 	.word	0x240009f5

0800f4e0 <__sfp_lock_release>:
 800f4e0:	4801      	ldr	r0, [pc, #4]	; (800f4e8 <__sfp_lock_release+0x8>)
 800f4e2:	f000 b8ae 	b.w	800f642 <__retarget_lock_release_recursive>
 800f4e6:	bf00      	nop
 800f4e8:	240009f5 	.word	0x240009f5

0800f4ec <__sinit_lock_acquire>:
 800f4ec:	4801      	ldr	r0, [pc, #4]	; (800f4f4 <__sinit_lock_acquire+0x8>)
 800f4ee:	f000 b8a7 	b.w	800f640 <__retarget_lock_acquire_recursive>
 800f4f2:	bf00      	nop
 800f4f4:	240009f6 	.word	0x240009f6

0800f4f8 <__sinit_lock_release>:
 800f4f8:	4801      	ldr	r0, [pc, #4]	; (800f500 <__sinit_lock_release+0x8>)
 800f4fa:	f000 b8a2 	b.w	800f642 <__retarget_lock_release_recursive>
 800f4fe:	bf00      	nop
 800f500:	240009f6 	.word	0x240009f6

0800f504 <__sinit>:
 800f504:	b510      	push	{r4, lr}
 800f506:	4604      	mov	r4, r0
 800f508:	f7ff fff0 	bl	800f4ec <__sinit_lock_acquire>
 800f50c:	69a3      	ldr	r3, [r4, #24]
 800f50e:	b11b      	cbz	r3, 800f518 <__sinit+0x14>
 800f510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f514:	f7ff bff0 	b.w	800f4f8 <__sinit_lock_release>
 800f518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f51c:	6523      	str	r3, [r4, #80]	; 0x50
 800f51e:	4b13      	ldr	r3, [pc, #76]	; (800f56c <__sinit+0x68>)
 800f520:	4a13      	ldr	r2, [pc, #76]	; (800f570 <__sinit+0x6c>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	62a2      	str	r2, [r4, #40]	; 0x28
 800f526:	42a3      	cmp	r3, r4
 800f528:	bf04      	itt	eq
 800f52a:	2301      	moveq	r3, #1
 800f52c:	61a3      	streq	r3, [r4, #24]
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 f820 	bl	800f574 <__sfp>
 800f534:	6060      	str	r0, [r4, #4]
 800f536:	4620      	mov	r0, r4
 800f538:	f000 f81c 	bl	800f574 <__sfp>
 800f53c:	60a0      	str	r0, [r4, #8]
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 f818 	bl	800f574 <__sfp>
 800f544:	2200      	movs	r2, #0
 800f546:	60e0      	str	r0, [r4, #12]
 800f548:	2104      	movs	r1, #4
 800f54a:	6860      	ldr	r0, [r4, #4]
 800f54c:	f7ff ff82 	bl	800f454 <std>
 800f550:	68a0      	ldr	r0, [r4, #8]
 800f552:	2201      	movs	r2, #1
 800f554:	2109      	movs	r1, #9
 800f556:	f7ff ff7d 	bl	800f454 <std>
 800f55a:	68e0      	ldr	r0, [r4, #12]
 800f55c:	2202      	movs	r2, #2
 800f55e:	2112      	movs	r1, #18
 800f560:	f7ff ff78 	bl	800f454 <std>
 800f564:	2301      	movs	r3, #1
 800f566:	61a3      	str	r3, [r4, #24]
 800f568:	e7d2      	b.n	800f510 <__sinit+0xc>
 800f56a:	bf00      	nop
 800f56c:	08010230 	.word	0x08010230
 800f570:	0800f49d 	.word	0x0800f49d

0800f574 <__sfp>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	4607      	mov	r7, r0
 800f578:	f7ff ffac 	bl	800f4d4 <__sfp_lock_acquire>
 800f57c:	4b1e      	ldr	r3, [pc, #120]	; (800f5f8 <__sfp+0x84>)
 800f57e:	681e      	ldr	r6, [r3, #0]
 800f580:	69b3      	ldr	r3, [r6, #24]
 800f582:	b913      	cbnz	r3, 800f58a <__sfp+0x16>
 800f584:	4630      	mov	r0, r6
 800f586:	f7ff ffbd 	bl	800f504 <__sinit>
 800f58a:	3648      	adds	r6, #72	; 0x48
 800f58c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f590:	3b01      	subs	r3, #1
 800f592:	d503      	bpl.n	800f59c <__sfp+0x28>
 800f594:	6833      	ldr	r3, [r6, #0]
 800f596:	b30b      	cbz	r3, 800f5dc <__sfp+0x68>
 800f598:	6836      	ldr	r6, [r6, #0]
 800f59a:	e7f7      	b.n	800f58c <__sfp+0x18>
 800f59c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f5a0:	b9d5      	cbnz	r5, 800f5d8 <__sfp+0x64>
 800f5a2:	4b16      	ldr	r3, [pc, #88]	; (800f5fc <__sfp+0x88>)
 800f5a4:	60e3      	str	r3, [r4, #12]
 800f5a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f5aa:	6665      	str	r5, [r4, #100]	; 0x64
 800f5ac:	f000 f847 	bl	800f63e <__retarget_lock_init_recursive>
 800f5b0:	f7ff ff96 	bl	800f4e0 <__sfp_lock_release>
 800f5b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f5b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f5bc:	6025      	str	r5, [r4, #0]
 800f5be:	61a5      	str	r5, [r4, #24]
 800f5c0:	2208      	movs	r2, #8
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5c8:	f7fd fb22 	bl	800cc10 <memset>
 800f5cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d8:	3468      	adds	r4, #104	; 0x68
 800f5da:	e7d9      	b.n	800f590 <__sfp+0x1c>
 800f5dc:	2104      	movs	r1, #4
 800f5de:	4638      	mov	r0, r7
 800f5e0:	f7ff ff62 	bl	800f4a8 <__sfmoreglue>
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	6030      	str	r0, [r6, #0]
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d1d5      	bne.n	800f598 <__sfp+0x24>
 800f5ec:	f7ff ff78 	bl	800f4e0 <__sfp_lock_release>
 800f5f0:	230c      	movs	r3, #12
 800f5f2:	603b      	str	r3, [r7, #0]
 800f5f4:	e7ee      	b.n	800f5d4 <__sfp+0x60>
 800f5f6:	bf00      	nop
 800f5f8:	08010230 	.word	0x08010230
 800f5fc:	ffff0001 	.word	0xffff0001

0800f600 <_fwalk_reent>:
 800f600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f604:	4606      	mov	r6, r0
 800f606:	4688      	mov	r8, r1
 800f608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f60c:	2700      	movs	r7, #0
 800f60e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f612:	f1b9 0901 	subs.w	r9, r9, #1
 800f616:	d505      	bpl.n	800f624 <_fwalk_reent+0x24>
 800f618:	6824      	ldr	r4, [r4, #0]
 800f61a:	2c00      	cmp	r4, #0
 800f61c:	d1f7      	bne.n	800f60e <_fwalk_reent+0xe>
 800f61e:	4638      	mov	r0, r7
 800f620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f624:	89ab      	ldrh	r3, [r5, #12]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d907      	bls.n	800f63a <_fwalk_reent+0x3a>
 800f62a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f62e:	3301      	adds	r3, #1
 800f630:	d003      	beq.n	800f63a <_fwalk_reent+0x3a>
 800f632:	4629      	mov	r1, r5
 800f634:	4630      	mov	r0, r6
 800f636:	47c0      	blx	r8
 800f638:	4307      	orrs	r7, r0
 800f63a:	3568      	adds	r5, #104	; 0x68
 800f63c:	e7e9      	b.n	800f612 <_fwalk_reent+0x12>

0800f63e <__retarget_lock_init_recursive>:
 800f63e:	4770      	bx	lr

0800f640 <__retarget_lock_acquire_recursive>:
 800f640:	4770      	bx	lr

0800f642 <__retarget_lock_release_recursive>:
 800f642:	4770      	bx	lr

0800f644 <__swhatbuf_r>:
 800f644:	b570      	push	{r4, r5, r6, lr}
 800f646:	460e      	mov	r6, r1
 800f648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f64c:	2900      	cmp	r1, #0
 800f64e:	b096      	sub	sp, #88	; 0x58
 800f650:	4614      	mov	r4, r2
 800f652:	461d      	mov	r5, r3
 800f654:	da08      	bge.n	800f668 <__swhatbuf_r+0x24>
 800f656:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f65a:	2200      	movs	r2, #0
 800f65c:	602a      	str	r2, [r5, #0]
 800f65e:	061a      	lsls	r2, r3, #24
 800f660:	d410      	bmi.n	800f684 <__swhatbuf_r+0x40>
 800f662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f666:	e00e      	b.n	800f686 <__swhatbuf_r+0x42>
 800f668:	466a      	mov	r2, sp
 800f66a:	f000 f8fb 	bl	800f864 <_fstat_r>
 800f66e:	2800      	cmp	r0, #0
 800f670:	dbf1      	blt.n	800f656 <__swhatbuf_r+0x12>
 800f672:	9a01      	ldr	r2, [sp, #4]
 800f674:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f678:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f67c:	425a      	negs	r2, r3
 800f67e:	415a      	adcs	r2, r3
 800f680:	602a      	str	r2, [r5, #0]
 800f682:	e7ee      	b.n	800f662 <__swhatbuf_r+0x1e>
 800f684:	2340      	movs	r3, #64	; 0x40
 800f686:	2000      	movs	r0, #0
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	b016      	add	sp, #88	; 0x58
 800f68c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f690 <__smakebuf_r>:
 800f690:	898b      	ldrh	r3, [r1, #12]
 800f692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f694:	079d      	lsls	r5, r3, #30
 800f696:	4606      	mov	r6, r0
 800f698:	460c      	mov	r4, r1
 800f69a:	d507      	bpl.n	800f6ac <__smakebuf_r+0x1c>
 800f69c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	6123      	str	r3, [r4, #16]
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	6163      	str	r3, [r4, #20]
 800f6a8:	b002      	add	sp, #8
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	ab01      	add	r3, sp, #4
 800f6ae:	466a      	mov	r2, sp
 800f6b0:	f7ff ffc8 	bl	800f644 <__swhatbuf_r>
 800f6b4:	9900      	ldr	r1, [sp, #0]
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f7ff f913 	bl	800e8e4 <_malloc_r>
 800f6be:	b948      	cbnz	r0, 800f6d4 <__smakebuf_r+0x44>
 800f6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6c4:	059a      	lsls	r2, r3, #22
 800f6c6:	d4ef      	bmi.n	800f6a8 <__smakebuf_r+0x18>
 800f6c8:	f023 0303 	bic.w	r3, r3, #3
 800f6cc:	f043 0302 	orr.w	r3, r3, #2
 800f6d0:	81a3      	strh	r3, [r4, #12]
 800f6d2:	e7e3      	b.n	800f69c <__smakebuf_r+0xc>
 800f6d4:	4b0d      	ldr	r3, [pc, #52]	; (800f70c <__smakebuf_r+0x7c>)
 800f6d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	6020      	str	r0, [r4, #0]
 800f6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6e0:	81a3      	strh	r3, [r4, #12]
 800f6e2:	9b00      	ldr	r3, [sp, #0]
 800f6e4:	6163      	str	r3, [r4, #20]
 800f6e6:	9b01      	ldr	r3, [sp, #4]
 800f6e8:	6120      	str	r0, [r4, #16]
 800f6ea:	b15b      	cbz	r3, 800f704 <__smakebuf_r+0x74>
 800f6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	f000 f8c9 	bl	800f888 <_isatty_r>
 800f6f6:	b128      	cbz	r0, 800f704 <__smakebuf_r+0x74>
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	f023 0303 	bic.w	r3, r3, #3
 800f6fe:	f043 0301 	orr.w	r3, r3, #1
 800f702:	81a3      	strh	r3, [r4, #12]
 800f704:	89a0      	ldrh	r0, [r4, #12]
 800f706:	4305      	orrs	r5, r0
 800f708:	81a5      	strh	r5, [r4, #12]
 800f70a:	e7cd      	b.n	800f6a8 <__smakebuf_r+0x18>
 800f70c:	0800f49d 	.word	0x0800f49d

0800f710 <_raise_r>:
 800f710:	291f      	cmp	r1, #31
 800f712:	b538      	push	{r3, r4, r5, lr}
 800f714:	4604      	mov	r4, r0
 800f716:	460d      	mov	r5, r1
 800f718:	d904      	bls.n	800f724 <_raise_r+0x14>
 800f71a:	2316      	movs	r3, #22
 800f71c:	6003      	str	r3, [r0, #0]
 800f71e:	f04f 30ff 	mov.w	r0, #4294967295
 800f722:	bd38      	pop	{r3, r4, r5, pc}
 800f724:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f726:	b112      	cbz	r2, 800f72e <_raise_r+0x1e>
 800f728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f72c:	b94b      	cbnz	r3, 800f742 <_raise_r+0x32>
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 f830 	bl	800f794 <_getpid_r>
 800f734:	462a      	mov	r2, r5
 800f736:	4601      	mov	r1, r0
 800f738:	4620      	mov	r0, r4
 800f73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f73e:	f000 b817 	b.w	800f770 <_kill_r>
 800f742:	2b01      	cmp	r3, #1
 800f744:	d00a      	beq.n	800f75c <_raise_r+0x4c>
 800f746:	1c59      	adds	r1, r3, #1
 800f748:	d103      	bne.n	800f752 <_raise_r+0x42>
 800f74a:	2316      	movs	r3, #22
 800f74c:	6003      	str	r3, [r0, #0]
 800f74e:	2001      	movs	r0, #1
 800f750:	e7e7      	b.n	800f722 <_raise_r+0x12>
 800f752:	2400      	movs	r4, #0
 800f754:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f758:	4628      	mov	r0, r5
 800f75a:	4798      	blx	r3
 800f75c:	2000      	movs	r0, #0
 800f75e:	e7e0      	b.n	800f722 <_raise_r+0x12>

0800f760 <raise>:
 800f760:	4b02      	ldr	r3, [pc, #8]	; (800f76c <raise+0xc>)
 800f762:	4601      	mov	r1, r0
 800f764:	6818      	ldr	r0, [r3, #0]
 800f766:	f7ff bfd3 	b.w	800f710 <_raise_r>
 800f76a:	bf00      	nop
 800f76c:	24000074 	.word	0x24000074

0800f770 <_kill_r>:
 800f770:	b538      	push	{r3, r4, r5, lr}
 800f772:	4d07      	ldr	r5, [pc, #28]	; (800f790 <_kill_r+0x20>)
 800f774:	2300      	movs	r3, #0
 800f776:	4604      	mov	r4, r0
 800f778:	4608      	mov	r0, r1
 800f77a:	4611      	mov	r1, r2
 800f77c:	602b      	str	r3, [r5, #0]
 800f77e:	f7f3 fc41 	bl	8003004 <_kill>
 800f782:	1c43      	adds	r3, r0, #1
 800f784:	d102      	bne.n	800f78c <_kill_r+0x1c>
 800f786:	682b      	ldr	r3, [r5, #0]
 800f788:	b103      	cbz	r3, 800f78c <_kill_r+0x1c>
 800f78a:	6023      	str	r3, [r4, #0]
 800f78c:	bd38      	pop	{r3, r4, r5, pc}
 800f78e:	bf00      	nop
 800f790:	240009f0 	.word	0x240009f0

0800f794 <_getpid_r>:
 800f794:	f7f3 bc2e 	b.w	8002ff4 <_getpid>

0800f798 <__sread>:
 800f798:	b510      	push	{r4, lr}
 800f79a:	460c      	mov	r4, r1
 800f79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7a0:	f000 f894 	bl	800f8cc <_read_r>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	bfab      	itete	ge
 800f7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f7ac:	181b      	addge	r3, r3, r0
 800f7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7b2:	bfac      	ite	ge
 800f7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7b6:	81a3      	strhlt	r3, [r4, #12]
 800f7b8:	bd10      	pop	{r4, pc}

0800f7ba <__swrite>:
 800f7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7be:	461f      	mov	r7, r3
 800f7c0:	898b      	ldrh	r3, [r1, #12]
 800f7c2:	05db      	lsls	r3, r3, #23
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	4616      	mov	r6, r2
 800f7ca:	d505      	bpl.n	800f7d8 <__swrite+0x1e>
 800f7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d0:	2302      	movs	r3, #2
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f000 f868 	bl	800f8a8 <_lseek_r>
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7e2:	81a3      	strh	r3, [r4, #12]
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ee:	f000 b817 	b.w	800f820 <_write_r>

0800f7f2 <__sseek>:
 800f7f2:	b510      	push	{r4, lr}
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7fa:	f000 f855 	bl	800f8a8 <_lseek_r>
 800f7fe:	1c43      	adds	r3, r0, #1
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	bf15      	itete	ne
 800f804:	6560      	strne	r0, [r4, #84]	; 0x54
 800f806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f80e:	81a3      	strheq	r3, [r4, #12]
 800f810:	bf18      	it	ne
 800f812:	81a3      	strhne	r3, [r4, #12]
 800f814:	bd10      	pop	{r4, pc}

0800f816 <__sclose>:
 800f816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f81a:	f000 b813 	b.w	800f844 <_close_r>
	...

0800f820 <_write_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4d07      	ldr	r5, [pc, #28]	; (800f840 <_write_r+0x20>)
 800f824:	4604      	mov	r4, r0
 800f826:	4608      	mov	r0, r1
 800f828:	4611      	mov	r1, r2
 800f82a:	2200      	movs	r2, #0
 800f82c:	602a      	str	r2, [r5, #0]
 800f82e:	461a      	mov	r2, r3
 800f830:	f7f3 fc1f 	bl	8003072 <_write>
 800f834:	1c43      	adds	r3, r0, #1
 800f836:	d102      	bne.n	800f83e <_write_r+0x1e>
 800f838:	682b      	ldr	r3, [r5, #0]
 800f83a:	b103      	cbz	r3, 800f83e <_write_r+0x1e>
 800f83c:	6023      	str	r3, [r4, #0]
 800f83e:	bd38      	pop	{r3, r4, r5, pc}
 800f840:	240009f0 	.word	0x240009f0

0800f844 <_close_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d06      	ldr	r5, [pc, #24]	; (800f860 <_close_r+0x1c>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	602b      	str	r3, [r5, #0]
 800f850:	f7f3 fc2b 	bl	80030aa <_close>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d102      	bne.n	800f85e <_close_r+0x1a>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_close_r+0x1a>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	bd38      	pop	{r3, r4, r5, pc}
 800f860:	240009f0 	.word	0x240009f0

0800f864 <_fstat_r>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	4d07      	ldr	r5, [pc, #28]	; (800f884 <_fstat_r+0x20>)
 800f868:	2300      	movs	r3, #0
 800f86a:	4604      	mov	r4, r0
 800f86c:	4608      	mov	r0, r1
 800f86e:	4611      	mov	r1, r2
 800f870:	602b      	str	r3, [r5, #0]
 800f872:	f7f3 fc26 	bl	80030c2 <_fstat>
 800f876:	1c43      	adds	r3, r0, #1
 800f878:	d102      	bne.n	800f880 <_fstat_r+0x1c>
 800f87a:	682b      	ldr	r3, [r5, #0]
 800f87c:	b103      	cbz	r3, 800f880 <_fstat_r+0x1c>
 800f87e:	6023      	str	r3, [r4, #0]
 800f880:	bd38      	pop	{r3, r4, r5, pc}
 800f882:	bf00      	nop
 800f884:	240009f0 	.word	0x240009f0

0800f888 <_isatty_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4d06      	ldr	r5, [pc, #24]	; (800f8a4 <_isatty_r+0x1c>)
 800f88c:	2300      	movs	r3, #0
 800f88e:	4604      	mov	r4, r0
 800f890:	4608      	mov	r0, r1
 800f892:	602b      	str	r3, [r5, #0]
 800f894:	f7f3 fc25 	bl	80030e2 <_isatty>
 800f898:	1c43      	adds	r3, r0, #1
 800f89a:	d102      	bne.n	800f8a2 <_isatty_r+0x1a>
 800f89c:	682b      	ldr	r3, [r5, #0]
 800f89e:	b103      	cbz	r3, 800f8a2 <_isatty_r+0x1a>
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	bd38      	pop	{r3, r4, r5, pc}
 800f8a4:	240009f0 	.word	0x240009f0

0800f8a8 <_lseek_r>:
 800f8a8:	b538      	push	{r3, r4, r5, lr}
 800f8aa:	4d07      	ldr	r5, [pc, #28]	; (800f8c8 <_lseek_r+0x20>)
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	4608      	mov	r0, r1
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	602a      	str	r2, [r5, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	f7f3 fc1e 	bl	80030f8 <_lseek>
 800f8bc:	1c43      	adds	r3, r0, #1
 800f8be:	d102      	bne.n	800f8c6 <_lseek_r+0x1e>
 800f8c0:	682b      	ldr	r3, [r5, #0]
 800f8c2:	b103      	cbz	r3, 800f8c6 <_lseek_r+0x1e>
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	240009f0 	.word	0x240009f0

0800f8cc <_read_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4d07      	ldr	r5, [pc, #28]	; (800f8ec <_read_r+0x20>)
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	4608      	mov	r0, r1
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	602a      	str	r2, [r5, #0]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	f7f3 fbac 	bl	8003038 <_read>
 800f8e0:	1c43      	adds	r3, r0, #1
 800f8e2:	d102      	bne.n	800f8ea <_read_r+0x1e>
 800f8e4:	682b      	ldr	r3, [r5, #0]
 800f8e6:	b103      	cbz	r3, 800f8ea <_read_r+0x1e>
 800f8e8:	6023      	str	r3, [r4, #0]
 800f8ea:	bd38      	pop	{r3, r4, r5, pc}
 800f8ec:	240009f0 	.word	0x240009f0

0800f8f0 <checkint>:
 800f8f0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f8f4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	b570      	push	{r4, r5, r6, lr}
 800f8fc:	dd2a      	ble.n	800f954 <checkint+0x64>
 800f8fe:	f240 4333 	movw	r3, #1075	; 0x433
 800f902:	429a      	cmp	r2, r3
 800f904:	dc24      	bgt.n	800f950 <checkint+0x60>
 800f906:	1a9b      	subs	r3, r3, r2
 800f908:	f1a3 0620 	sub.w	r6, r3, #32
 800f90c:	f04f 32ff 	mov.w	r2, #4294967295
 800f910:	fa02 f403 	lsl.w	r4, r2, r3
 800f914:	fa02 f606 	lsl.w	r6, r2, r6
 800f918:	f1c3 0520 	rsb	r5, r3, #32
 800f91c:	fa22 f505 	lsr.w	r5, r2, r5
 800f920:	4334      	orrs	r4, r6
 800f922:	432c      	orrs	r4, r5
 800f924:	409a      	lsls	r2, r3
 800f926:	ea20 0202 	bic.w	r2, r0, r2
 800f92a:	ea21 0404 	bic.w	r4, r1, r4
 800f92e:	4322      	orrs	r2, r4
 800f930:	f1a3 0420 	sub.w	r4, r3, #32
 800f934:	f1c3 0220 	rsb	r2, r3, #32
 800f938:	d10c      	bne.n	800f954 <checkint+0x64>
 800f93a:	40d8      	lsrs	r0, r3
 800f93c:	fa01 f302 	lsl.w	r3, r1, r2
 800f940:	4318      	orrs	r0, r3
 800f942:	40e1      	lsrs	r1, r4
 800f944:	4308      	orrs	r0, r1
 800f946:	f000 0001 	and.w	r0, r0, #1
 800f94a:	f1d0 0002 	rsbs	r0, r0, #2
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
 800f950:	2002      	movs	r0, #2
 800f952:	e7fc      	b.n	800f94e <checkint+0x5e>
 800f954:	2000      	movs	r0, #0
 800f956:	e7fa      	b.n	800f94e <checkint+0x5e>

0800f958 <pow>:
 800f958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f95c:	ee10 4a90 	vmov	r4, s1
 800f960:	ed2d 8b0a 	vpush	{d8-d12}
 800f964:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800f968:	ee11 7a90 	vmov	r7, s3
 800f96c:	f10a 32ff 	add.w	r2, sl, #4294967295
 800f970:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800f974:	429a      	cmp	r2, r3
 800f976:	ee10 6a10 	vmov	r6, s0
 800f97a:	ee11 0a10 	vmov	r0, s2
 800f97e:	b086      	sub	sp, #24
 800f980:	46d4      	mov	ip, sl
 800f982:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800f986:	d806      	bhi.n	800f996 <pow+0x3e>
 800f988:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800f98c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800f990:	2b7f      	cmp	r3, #127	; 0x7f
 800f992:	f240 8156 	bls.w	800fc42 <pow+0x2ea>
 800f996:	1802      	adds	r2, r0, r0
 800f998:	eb47 0107 	adc.w	r1, r7, r7
 800f99c:	f06f 0e01 	mvn.w	lr, #1
 800f9a0:	f112 39ff 	adds.w	r9, r2, #4294967295
 800f9a4:	f141 38ff 	adc.w	r8, r1, #4294967295
 800f9a8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800f9ac:	45ce      	cmp	lr, r9
 800f9ae:	eb73 0808 	sbcs.w	r8, r3, r8
 800f9b2:	d23f      	bcs.n	800fa34 <pow+0xdc>
 800f9b4:	ea52 0301 	orrs.w	r3, r2, r1
 800f9b8:	f04f 0300 	mov.w	r3, #0
 800f9bc:	d10c      	bne.n	800f9d8 <pow+0x80>
 800f9be:	19b6      	adds	r6, r6, r6
 800f9c0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800f9c4:	4164      	adcs	r4, r4
 800f9c6:	42b3      	cmp	r3, r6
 800f9c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f9cc:	41a3      	sbcs	r3, r4
 800f9ce:	f0c0 808c 	bcc.w	800faea <pow+0x192>
 800f9d2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f9d6:	e028      	b.n	800fa2a <pow+0xd2>
 800f9d8:	4da3      	ldr	r5, [pc, #652]	; (800fc68 <pow+0x310>)
 800f9da:	42ac      	cmp	r4, r5
 800f9dc:	bf08      	it	eq
 800f9de:	429e      	cmpeq	r6, r3
 800f9e0:	d107      	bne.n	800f9f2 <pow+0x9a>
 800f9e2:	1800      	adds	r0, r0, r0
 800f9e4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800f9e8:	417f      	adcs	r7, r7
 800f9ea:	4283      	cmp	r3, r0
 800f9ec:	4b9f      	ldr	r3, [pc, #636]	; (800fc6c <pow+0x314>)
 800f9ee:	41bb      	sbcs	r3, r7
 800f9f0:	e7ed      	b.n	800f9ce <pow+0x76>
 800f9f2:	19b6      	adds	r6, r6, r6
 800f9f4:	489e      	ldr	r0, [pc, #632]	; (800fc70 <pow+0x318>)
 800f9f6:	4164      	adcs	r4, r4
 800f9f8:	42b3      	cmp	r3, r6
 800f9fa:	eb70 0504 	sbcs.w	r5, r0, r4
 800f9fe:	d374      	bcc.n	800faea <pow+0x192>
 800fa00:	4281      	cmp	r1, r0
 800fa02:	bf08      	it	eq
 800fa04:	429a      	cmpeq	r2, r3
 800fa06:	d170      	bne.n	800faea <pow+0x192>
 800fa08:	4a9a      	ldr	r2, [pc, #616]	; (800fc74 <pow+0x31c>)
 800fa0a:	4294      	cmp	r4, r2
 800fa0c:	bf08      	it	eq
 800fa0e:	429e      	cmpeq	r6, r3
 800fa10:	d0df      	beq.n	800f9d2 <pow+0x7a>
 800fa12:	4294      	cmp	r4, r2
 800fa14:	ea6f 0707 	mvn.w	r7, r7
 800fa18:	bf34      	ite	cc
 800fa1a:	2400      	movcc	r4, #0
 800fa1c:	2401      	movcs	r4, #1
 800fa1e:	0fff      	lsrs	r7, r7, #31
 800fa20:	42bc      	cmp	r4, r7
 800fa22:	f040 81d9 	bne.w	800fdd8 <pow+0x480>
 800fa26:	ee21 0b01 	vmul.f64	d0, d1, d1
 800fa2a:	b006      	add	sp, #24
 800fa2c:	ecbd 8b0a 	vpop	{d8-d12}
 800fa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa34:	eb16 0806 	adds.w	r8, r6, r6
 800fa38:	eb44 0904 	adc.w	r9, r4, r4
 800fa3c:	f118 31ff 	adds.w	r1, r8, #4294967295
 800fa40:	f169 0200 	sbc.w	r2, r9, #0
 800fa44:	458e      	cmp	lr, r1
 800fa46:	4193      	sbcs	r3, r2
 800fa48:	d223      	bcs.n	800fa92 <pow+0x13a>
 800fa4a:	ee20 0b00 	vmul.f64	d0, d0, d0
 800fa4e:	2c00      	cmp	r4, #0
 800fa50:	da12      	bge.n	800fa78 <pow+0x120>
 800fa52:	4639      	mov	r1, r7
 800fa54:	f7ff ff4c 	bl	800f8f0 <checkint>
 800fa58:	2801      	cmp	r0, #1
 800fa5a:	d10d      	bne.n	800fa78 <pow+0x120>
 800fa5c:	eeb1 0b40 	vneg.f64	d0, d0
 800fa60:	ea58 0309 	orrs.w	r3, r8, r9
 800fa64:	d10a      	bne.n	800fa7c <pow+0x124>
 800fa66:	2f00      	cmp	r7, #0
 800fa68:	dadf      	bge.n	800fa2a <pow+0xd2>
 800fa6a:	b006      	add	sp, #24
 800fa6c:	ecbd 8b0a 	vpop	{d8-d12}
 800fa70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa74:	f000 bb50 	b.w	8010118 <__math_divzero>
 800fa78:	2000      	movs	r0, #0
 800fa7a:	e7f1      	b.n	800fa60 <pow+0x108>
 800fa7c:	2f00      	cmp	r7, #0
 800fa7e:	dad4      	bge.n	800fa2a <pow+0xd2>
 800fa80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fa84:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800fa88:	ed8d 7b00 	vstr	d7, [sp]
 800fa8c:	ed9d 0b00 	vldr	d0, [sp]
 800fa90:	e7cb      	b.n	800fa2a <pow+0xd2>
 800fa92:	2c00      	cmp	r4, #0
 800fa94:	da2c      	bge.n	800faf0 <pow+0x198>
 800fa96:	4639      	mov	r1, r7
 800fa98:	f7ff ff2a 	bl	800f8f0 <checkint>
 800fa9c:	b930      	cbnz	r0, 800faac <pow+0x154>
 800fa9e:	b006      	add	sp, #24
 800faa0:	ecbd 8b0a 	vpop	{d8-d12}
 800faa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faa8:	f000 bb4e 	b.w	8010148 <__math_invalid>
 800faac:	2801      	cmp	r0, #1
 800faae:	bf14      	ite	ne
 800fab0:	2000      	movne	r0, #0
 800fab2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800fab6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800faba:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800fabe:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800fac2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800fac6:	2b7f      	cmp	r3, #127	; 0x7f
 800fac8:	d92d      	bls.n	800fb26 <pow+0x1ce>
 800faca:	4b67      	ldr	r3, [pc, #412]	; (800fc68 <pow+0x310>)
 800facc:	2000      	movs	r0, #0
 800face:	429c      	cmp	r4, r3
 800fad0:	bf08      	it	eq
 800fad2:	4286      	cmpeq	r6, r0
 800fad4:	f43f af7d 	beq.w	800f9d2 <pow+0x7a>
 800fad8:	f240 31bd 	movw	r1, #957	; 0x3bd
 800fadc:	428a      	cmp	r2, r1
 800fade:	d80c      	bhi.n	800fafa <pow+0x1a2>
 800fae0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fae4:	42b0      	cmp	r0, r6
 800fae6:	41a3      	sbcs	r3, r4
 800fae8:	d204      	bcs.n	800faf4 <pow+0x19c>
 800faea:	ee31 0b00 	vadd.f64	d0, d1, d0
 800faee:	e79c      	b.n	800fa2a <pow+0xd2>
 800faf0:	2000      	movs	r0, #0
 800faf2:	e7e4      	b.n	800fabe <pow+0x166>
 800faf4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800faf8:	e797      	b.n	800fa2a <pow+0xd2>
 800fafa:	2e01      	cmp	r6, #1
 800fafc:	eb74 0303 	sbcs.w	r3, r4, r3
 800fb00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fb04:	bf34      	ite	cc
 800fb06:	2301      	movcc	r3, #1
 800fb08:	2300      	movcs	r3, #0
 800fb0a:	4295      	cmp	r5, r2
 800fb0c:	bf8c      	ite	hi
 800fb0e:	2500      	movhi	r5, #0
 800fb10:	2501      	movls	r5, #1
 800fb12:	42ab      	cmp	r3, r5
 800fb14:	f000 809d 	beq.w	800fc52 <pow+0x2fa>
 800fb18:	b006      	add	sp, #24
 800fb1a:	ecbd 8b0a 	vpop	{d8-d12}
 800fb1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb22:	f000 baf1 	b.w	8010108 <__math_oflow>
 800fb26:	f1bc 0f00 	cmp.w	ip, #0
 800fb2a:	d10b      	bne.n	800fb44 <pow+0x1ec>
 800fb2c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800fc60 <pow+0x308>
 800fb30:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fb34:	ec53 2b17 	vmov	r2, r3, d7
 800fb38:	ee17 6a10 	vmov	r6, s14
 800fb3c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800fb40:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800fb44:	4b4c      	ldr	r3, [pc, #304]	; (800fc78 <pow+0x320>)
 800fb46:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800fb4a:	4423      	add	r3, r4
 800fb4c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800fb50:	1519      	asrs	r1, r3, #20
 800fb52:	0d1b      	lsrs	r3, r3, #20
 800fb54:	051b      	lsls	r3, r3, #20
 800fb56:	eba4 0903 	sub.w	r9, r4, r3
 800fb5a:	4b48      	ldr	r3, [pc, #288]	; (800fc7c <pow+0x324>)
 800fb5c:	ee04 1a10 	vmov	s8, r1
 800fb60:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800fb64:	f1b6 0800 	subs.w	r8, r6, #0
 800fb68:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800fb6c:	ec49 8b15 	vmov	d5, r8, r9
 800fb70:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800fb74:	eea5 6b07 	vfma.f64	d6, d5, d7
 800fb78:	ed93 7b00 	vldr	d7, [r3]
 800fb7c:	ed93 5b02 	vldr	d5, [r3, #8]
 800fb80:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800fb84:	eea4 2b07 	vfma.f64	d2, d4, d7
 800fb88:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800fb8c:	ee36 ab02 	vadd.f64	d10, d6, d2
 800fb90:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800fb94:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fb98:	ed93 5b04 	vldr	d5, [r3, #16]
 800fb9c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800fba0:	ee37 7b02 	vadd.f64	d7, d7, d2
 800fba4:	ee26 5b05 	vmul.f64	d5, d6, d5
 800fba8:	ed93 4b08 	vldr	d4, [r3, #32]
 800fbac:	ee26 0b05 	vmul.f64	d0, d6, d5
 800fbb0:	eeb0 9b40 	vmov.f64	d9, d0
 800fbb4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800fbb8:	ed93 5b06 	vldr	d5, [r3, #24]
 800fbbc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800fbc0:	ee26 bb00 	vmul.f64	d11, d6, d0
 800fbc4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800fbc8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800fbcc:	ee3a ab48 	vsub.f64	d10, d10, d8
 800fbd0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800fbd4:	ee37 9b09 	vadd.f64	d9, d7, d9
 800fbd8:	ee3a ab00 	vadd.f64	d10, d10, d0
 800fbdc:	eea6 4b03 	vfma.f64	d4, d6, d3
 800fbe0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800fbe4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800fbe8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800fbec:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800fbf0:	eea0 4b03 	vfma.f64	d4, d0, d3
 800fbf4:	eea0 5b04 	vfma.f64	d5, d0, d4
 800fbf8:	eeab ab05 	vfma.f64	d10, d11, d5
 800fbfc:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800fc00:	ee21 7b06 	vmul.f64	d7, d1, d6
 800fc04:	ee17 3a90 	vmov	r3, s15
 800fc08:	eeb0 5b47 	vmov.f64	d5, d7
 800fc0c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800fc10:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800fc14:	18b2      	adds	r2, r6, r2
 800fc16:	2a3e      	cmp	r2, #62	; 0x3e
 800fc18:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800fc1c:	ee38 8b46 	vsub.f64	d8, d8, d6
 800fc20:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800fc24:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800fc28:	d92b      	bls.n	800fc82 <pow+0x32a>
 800fc2a:	2a00      	cmp	r2, #0
 800fc2c:	da0b      	bge.n	800fc46 <pow+0x2ee>
 800fc2e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fc32:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fc36:	2800      	cmp	r0, #0
 800fc38:	f43f aef7 	beq.w	800fa2a <pow+0xd2>
 800fc3c:	eeb1 0b40 	vneg.f64	d0, d0
 800fc40:	e6f3      	b.n	800fa2a <pow+0xd2>
 800fc42:	2000      	movs	r0, #0
 800fc44:	e77e      	b.n	800fb44 <pow+0x1ec>
 800fc46:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800fc4a:	d919      	bls.n	800fc80 <pow+0x328>
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f6bf af63 	bge.w	800fb18 <pow+0x1c0>
 800fc52:	b006      	add	sp, #24
 800fc54:	ecbd 8b0a 	vpop	{d8-d12}
 800fc58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc5c:	f000 ba4c 	b.w	80100f8 <__math_uflow>
 800fc60:	00000000 	.word	0x00000000
 800fc64:	43300000 	.word	0x43300000
 800fc68:	3ff00000 	.word	0x3ff00000
 800fc6c:	fff00000 	.word	0xfff00000
 800fc70:	ffe00000 	.word	0xffe00000
 800fc74:	7fe00000 	.word	0x7fe00000
 800fc78:	c0196aab 	.word	0xc0196aab
 800fc7c:	08010660 	.word	0x08010660
 800fc80:	2600      	movs	r6, #0
 800fc82:	495d      	ldr	r1, [pc, #372]	; (800fdf8 <pow+0x4a0>)
 800fc84:	ed91 4b02 	vldr	d4, [r1, #8]
 800fc88:	ed91 3b00 	vldr	d3, [r1]
 800fc8c:	eeb0 6b44 	vmov.f64	d6, d4
 800fc90:	eea7 6b03 	vfma.f64	d6, d7, d3
 800fc94:	ee16 5a10 	vmov	r5, s12
 800fc98:	ee36 6b44 	vsub.f64	d6, d6, d4
 800fc9c:	ed91 4b04 	vldr	d4, [r1, #16]
 800fca0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800fca4:	eea6 7b04 	vfma.f64	d7, d6, d4
 800fca8:	eeb0 0b47 	vmov.f64	d0, d7
 800fcac:	ed91 7b06 	vldr	d7, [r1, #24]
 800fcb0:	18dc      	adds	r4, r3, r3
 800fcb2:	f104 030f 	add.w	r3, r4, #15
 800fcb6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800fcba:	eea6 0b07 	vfma.f64	d0, d6, d7
 800fcbe:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800fcc2:	ee35 0b00 	vadd.f64	d0, d5, d0
 800fcc6:	ee20 6b00 	vmul.f64	d6, d0, d0
 800fcca:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800fcce:	ed91 5b08 	vldr	d5, [r1, #32]
 800fcd2:	ee30 7b07 	vadd.f64	d7, d0, d7
 800fcd6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800fcda:	eea0 5b04 	vfma.f64	d5, d0, d4
 800fcde:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800fce2:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fce6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800fcea:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800fcee:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800fcf2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800fcf6:	eea0 5b04 	vfma.f64	d5, d0, d4
 800fcfa:	1940      	adds	r0, r0, r5
 800fcfc:	2700      	movs	r7, #0
 800fcfe:	eb17 020c 	adds.w	r2, r7, ip
 800fd02:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800fd06:	eea6 7b05 	vfma.f64	d7, d6, d5
 800fd0a:	2e00      	cmp	r6, #0
 800fd0c:	d15f      	bne.n	800fdce <pow+0x476>
 800fd0e:	42bd      	cmp	r5, r7
 800fd10:	db13      	blt.n	800fd3a <pow+0x3e2>
 800fd12:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800fd16:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800fd1a:	4610      	mov	r0, r2
 800fd1c:	ec41 0b10 	vmov	d0, r0, r1
 800fd20:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fd24:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800fde0 <pow+0x488>
 800fd28:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fd2c:	b006      	add	sp, #24
 800fd2e:	ecbd 8b0a 	vpop	{d8-d12}
 800fd32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd36:	f000 ba1f 	b.w	8010178 <__math_check_oflow>
 800fd3a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800fd3e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800fd42:	4610      	mov	r0, r2
 800fd44:	ec41 0b15 	vmov	d5, r0, r1
 800fd48:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fd4c:	ee27 6b05 	vmul.f64	d6, d7, d5
 800fd50:	ee35 7b06 	vadd.f64	d7, d5, d6
 800fd54:	eeb0 3bc7 	vabs.f64	d3, d7
 800fd58:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800fd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd60:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800fde8 <pow+0x490>
 800fd64:	d52a      	bpl.n	800fdbc <pow+0x464>
 800fd66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fd6a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd72:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800fd76:	ee35 6b06 	vadd.f64	d6, d5, d6
 800fd7a:	bf48      	it	mi
 800fd7c:	eeb0 4b43 	vmovmi.f64	d4, d3
 800fd80:	ee37 3b04 	vadd.f64	d3, d7, d4
 800fd84:	ee34 5b43 	vsub.f64	d5, d4, d3
 800fd88:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fd8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd90:	ee37 7b03 	vadd.f64	d7, d7, d3
 800fd94:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fd98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda0:	d104      	bne.n	800fdac <pow+0x454>
 800fda2:	4632      	mov	r2, r6
 800fda4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fda8:	ec43 2b17 	vmov	d7, r2, r3
 800fdac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fdb0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fdb4:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fdb8:	ed8d 6b04 	vstr	d6, [sp, #16]
 800fdbc:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fdc0:	b006      	add	sp, #24
 800fdc2:	ecbd 8b0a 	vpop	{d8-d12}
 800fdc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdca:	f000 b9cc 	b.w	8010166 <__math_check_uflow>
 800fdce:	ec43 2b10 	vmov	d0, r2, r3
 800fdd2:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fdd6:	e628      	b.n	800fa2a <pow+0xd2>
 800fdd8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800fdf0 <pow+0x498>
 800fddc:	e625      	b.n	800fa2a <pow+0xd2>
 800fdde:	bf00      	nop
 800fde0:	00000000 	.word	0x00000000
 800fde4:	7f000000 	.word	0x7f000000
 800fde8:	00000000 	.word	0x00000000
 800fdec:	00100000 	.word	0x00100000
	...
 800fdf8:	080116a8 	.word	0x080116a8

0800fdfc <asin>:
 800fdfc:	b508      	push	{r3, lr}
 800fdfe:	ed2d 8b04 	vpush	{d8-d9}
 800fe02:	eeb0 8b40 	vmov.f64	d8, d0
 800fe06:	f000 f847 	bl	800fe98 <__ieee754_asin>
 800fe0a:	eeb4 8b48 	vcmp.f64	d8, d8
 800fe0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe12:	eeb0 9b40 	vmov.f64	d9, d0
 800fe16:	d615      	bvs.n	800fe44 <asin+0x48>
 800fe18:	eeb0 0b48 	vmov.f64	d0, d8
 800fe1c:	f000 f9c0 	bl	80101a0 <fabs>
 800fe20:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fe24:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fe28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2c:	dd0a      	ble.n	800fe44 <asin+0x48>
 800fe2e:	f7fc fec5 	bl	800cbbc <__errno>
 800fe32:	ecbd 8b04 	vpop	{d8-d9}
 800fe36:	2321      	movs	r3, #33	; 0x21
 800fe38:	6003      	str	r3, [r0, #0]
 800fe3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fe3e:	4804      	ldr	r0, [pc, #16]	; (800fe50 <asin+0x54>)
 800fe40:	f7fe bdc6 	b.w	800e9d0 <nan>
 800fe44:	eeb0 0b49 	vmov.f64	d0, d9
 800fe48:	ecbd 8b04 	vpop	{d8-d9}
 800fe4c:	bd08      	pop	{r3, pc}
 800fe4e:	bf00      	nop
 800fe50:	080104c7 	.word	0x080104c7
 800fe54:	00000000 	.word	0x00000000

0800fe58 <sqrt>:
 800fe58:	b508      	push	{r3, lr}
 800fe5a:	ed2d 8b04 	vpush	{d8-d9}
 800fe5e:	eeb0 8b40 	vmov.f64	d8, d0
 800fe62:	f000 f927 	bl	80100b4 <__ieee754_sqrt>
 800fe66:	eeb4 8b48 	vcmp.f64	d8, d8
 800fe6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6e:	d60c      	bvs.n	800fe8a <sqrt+0x32>
 800fe70:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800fe90 <sqrt+0x38>
 800fe74:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800fe78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7c:	d505      	bpl.n	800fe8a <sqrt+0x32>
 800fe7e:	f7fc fe9d 	bl	800cbbc <__errno>
 800fe82:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800fe86:	2321      	movs	r3, #33	; 0x21
 800fe88:	6003      	str	r3, [r0, #0]
 800fe8a:	ecbd 8b04 	vpop	{d8-d9}
 800fe8e:	bd08      	pop	{r3, pc}
	...

0800fe98 <__ieee754_asin>:
 800fe98:	b538      	push	{r3, r4, r5, lr}
 800fe9a:	ee10 5a90 	vmov	r5, s1
 800fe9e:	4b82      	ldr	r3, [pc, #520]	; (80100a8 <__ieee754_asin+0x210>)
 800fea0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fea4:	429c      	cmp	r4, r3
 800fea6:	ed2d 8b06 	vpush	{d8-d10}
 800feaa:	dd19      	ble.n	800fee0 <__ieee754_asin+0x48>
 800feac:	ee10 3a10 	vmov	r3, s0
 800feb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800feb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800feb8:	4323      	orrs	r3, r4
 800feba:	d10c      	bne.n	800fed6 <__ieee754_asin+0x3e>
 800febc:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8010030 <__ieee754_asin+0x198>
 800fec0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8010038 <__ieee754_asin+0x1a0>
 800fec4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fec8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800fecc:	eeb0 0b47 	vmov.f64	d0, d7
 800fed0:	ecbd 8b06 	vpop	{d8-d10}
 800fed4:	bd38      	pop	{r3, r4, r5, pc}
 800fed6:	ee30 7b40 	vsub.f64	d7, d0, d0
 800feda:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800fede:	e7f7      	b.n	800fed0 <__ieee754_asin+0x38>
 800fee0:	4b72      	ldr	r3, [pc, #456]	; (80100ac <__ieee754_asin+0x214>)
 800fee2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800fee6:	429c      	cmp	r4, r3
 800fee8:	dc0b      	bgt.n	800ff02 <__ieee754_asin+0x6a>
 800feea:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800feee:	da52      	bge.n	800ff96 <__ieee754_asin+0xfe>
 800fef0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010040 <__ieee754_asin+0x1a8>
 800fef4:	ee30 7b07 	vadd.f64	d7, d0, d7
 800fef8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800fefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff00:	dce6      	bgt.n	800fed0 <__ieee754_asin+0x38>
 800ff02:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800ff06:	f000 f94b 	bl	80101a0 <fabs>
 800ff0a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010048 <__ieee754_asin+0x1b0>
 800ff0e:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ff12:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ff16:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010050 <__ieee754_asin+0x1b8>
 800ff1a:	eeb0 0b48 	vmov.f64	d0, d8
 800ff1e:	eea8 6b07 	vfma.f64	d6, d8, d7
 800ff22:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010058 <__ieee754_asin+0x1c0>
 800ff26:	eea6 7b08 	vfma.f64	d7, d6, d8
 800ff2a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010060 <__ieee754_asin+0x1c8>
 800ff2e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8010068 <__ieee754_asin+0x1d0>
 800ff32:	eea7 6b08 	vfma.f64	d6, d7, d8
 800ff36:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8010070 <__ieee754_asin+0x1d8>
 800ff3a:	eea6 7b08 	vfma.f64	d7, d6, d8
 800ff3e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010078 <__ieee754_asin+0x1e0>
 800ff42:	eea7 ab08 	vfma.f64	d10, d7, d8
 800ff46:	ee2a ab08 	vmul.f64	d10, d10, d8
 800ff4a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010080 <__ieee754_asin+0x1e8>
 800ff4e:	eea8 7b06 	vfma.f64	d7, d8, d6
 800ff52:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8010088 <__ieee754_asin+0x1f0>
 800ff56:	eea7 6b08 	vfma.f64	d6, d7, d8
 800ff5a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8010090 <__ieee754_asin+0x1f8>
 800ff5e:	eea6 7b08 	vfma.f64	d7, d6, d8
 800ff62:	eea7 9b08 	vfma.f64	d9, d7, d8
 800ff66:	f000 f8a5 	bl	80100b4 <__ieee754_sqrt>
 800ff6a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 800ff6e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800ff72:	4b4f      	ldr	r3, [pc, #316]	; (80100b0 <__ieee754_asin+0x218>)
 800ff74:	429c      	cmp	r4, r3
 800ff76:	dd3d      	ble.n	800fff4 <__ieee754_asin+0x15c>
 800ff78:	eea0 0b05 	vfma.f64	d0, d0, d5
 800ff7c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8010098 <__ieee754_asin+0x200>
 800ff80:	eea0 7b04 	vfma.f64	d7, d0, d4
 800ff84:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8010038 <__ieee754_asin+0x1a0>
 800ff88:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ff8c:	2d00      	cmp	r5, #0
 800ff8e:	bfd8      	it	le
 800ff90:	eeb1 0b40 	vnegle.f64	d0, d0
 800ff94:	e79c      	b.n	800fed0 <__ieee754_asin+0x38>
 800ff96:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010048 <__ieee754_asin+0x1b0>
 800ff9a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800ff9e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010050 <__ieee754_asin+0x1b8>
 800ffa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ffa6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010058 <__ieee754_asin+0x1c0>
 800ffaa:	eea6 5b07 	vfma.f64	d5, d6, d7
 800ffae:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8010060 <__ieee754_asin+0x1c8>
 800ffb2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ffb6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8010070 <__ieee754_asin+0x1d8>
 800ffba:	eea6 5b07 	vfma.f64	d5, d6, d7
 800ffbe:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8010068 <__ieee754_asin+0x1d0>
 800ffc2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8010078 <__ieee754_asin+0x1e0>
 800ffc6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ffca:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ffce:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010080 <__ieee754_asin+0x1e8>
 800ffd2:	eea7 5b04 	vfma.f64	d5, d7, d4
 800ffd6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8010088 <__ieee754_asin+0x1f0>
 800ffda:	eea5 4b07 	vfma.f64	d4, d5, d7
 800ffde:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8010090 <__ieee754_asin+0x1f8>
 800ffe2:	eea4 5b07 	vfma.f64	d5, d4, d7
 800ffe6:	eea5 9b07 	vfma.f64	d9, d5, d7
 800ffea:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800ffee:	eea0 0b07 	vfma.f64	d0, d0, d7
 800fff2:	e76d      	b.n	800fed0 <__ieee754_asin+0x38>
 800fff4:	ec53 2b10 	vmov	r2, r3, d0
 800fff8:	2200      	movs	r2, #0
 800fffa:	ec43 2b16 	vmov	d6, r2, r3
 800fffe:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010002:	eea6 8b46 	vfms.f64	d8, d6, d6
 8010006:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801000a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8010030 <__ieee754_asin+0x198>
 801000e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010012:	eea3 7b44 	vfms.f64	d7, d3, d4
 8010016:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801001a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80100a0 <__ieee754_asin+0x208>
 801001e:	eeb0 0b45 	vmov.f64	d0, d5
 8010022:	eea6 0b44 	vfms.f64	d0, d6, d4
 8010026:	ee37 0b40 	vsub.f64	d0, d7, d0
 801002a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801002e:	e7ad      	b.n	800ff8c <__ieee754_asin+0xf4>
 8010030:	33145c07 	.word	0x33145c07
 8010034:	3c91a626 	.word	0x3c91a626
 8010038:	54442d18 	.word	0x54442d18
 801003c:	3ff921fb 	.word	0x3ff921fb
 8010040:	8800759c 	.word	0x8800759c
 8010044:	7e37e43c 	.word	0x7e37e43c
 8010048:	0dfdf709 	.word	0x0dfdf709
 801004c:	3f023de1 	.word	0x3f023de1
 8010050:	7501b288 	.word	0x7501b288
 8010054:	3f49efe0 	.word	0x3f49efe0
 8010058:	b5688f3b 	.word	0xb5688f3b
 801005c:	bfa48228 	.word	0xbfa48228
 8010060:	0e884455 	.word	0x0e884455
 8010064:	3fc9c155 	.word	0x3fc9c155
 8010068:	55555555 	.word	0x55555555
 801006c:	3fc55555 	.word	0x3fc55555
 8010070:	03eb6f7d 	.word	0x03eb6f7d
 8010074:	bfd4d612 	.word	0xbfd4d612
 8010078:	b12e9282 	.word	0xb12e9282
 801007c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010080:	1b8d0159 	.word	0x1b8d0159
 8010084:	bfe6066c 	.word	0xbfe6066c
 8010088:	9c598ac8 	.word	0x9c598ac8
 801008c:	40002ae5 	.word	0x40002ae5
 8010090:	1c8a2d4b 	.word	0x1c8a2d4b
 8010094:	c0033a27 	.word	0xc0033a27
 8010098:	33145c07 	.word	0x33145c07
 801009c:	bc91a626 	.word	0xbc91a626
 80100a0:	54442d18 	.word	0x54442d18
 80100a4:	3fe921fb 	.word	0x3fe921fb
 80100a8:	3fefffff 	.word	0x3fefffff
 80100ac:	3fdfffff 	.word	0x3fdfffff
 80100b0:	3fef3332 	.word	0x3fef3332

080100b4 <__ieee754_sqrt>:
 80100b4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80100b8:	4770      	bx	lr

080100ba <with_errno>:
 80100ba:	b513      	push	{r0, r1, r4, lr}
 80100bc:	4604      	mov	r4, r0
 80100be:	ed8d 0b00 	vstr	d0, [sp]
 80100c2:	f7fc fd7b 	bl	800cbbc <__errno>
 80100c6:	ed9d 0b00 	vldr	d0, [sp]
 80100ca:	6004      	str	r4, [r0, #0]
 80100cc:	b002      	add	sp, #8
 80100ce:	bd10      	pop	{r4, pc}

080100d0 <xflow>:
 80100d0:	b082      	sub	sp, #8
 80100d2:	b158      	cbz	r0, 80100ec <xflow+0x1c>
 80100d4:	eeb1 7b40 	vneg.f64	d7, d0
 80100d8:	ed8d 7b00 	vstr	d7, [sp]
 80100dc:	ed9d 7b00 	vldr	d7, [sp]
 80100e0:	2022      	movs	r0, #34	; 0x22
 80100e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80100e6:	b002      	add	sp, #8
 80100e8:	f7ff bfe7 	b.w	80100ba <with_errno>
 80100ec:	eeb0 7b40 	vmov.f64	d7, d0
 80100f0:	e7f2      	b.n	80100d8 <xflow+0x8>
 80100f2:	0000      	movs	r0, r0
 80100f4:	0000      	movs	r0, r0
	...

080100f8 <__math_uflow>:
 80100f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010100 <__math_uflow+0x8>
 80100fc:	f7ff bfe8 	b.w	80100d0 <xflow>
 8010100:	00000000 	.word	0x00000000
 8010104:	10000000 	.word	0x10000000

08010108 <__math_oflow>:
 8010108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010110 <__math_oflow+0x8>
 801010c:	f7ff bfe0 	b.w	80100d0 <xflow>
 8010110:	00000000 	.word	0x00000000
 8010114:	70000000 	.word	0x70000000

08010118 <__math_divzero>:
 8010118:	b082      	sub	sp, #8
 801011a:	2800      	cmp	r0, #0
 801011c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010120:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010124:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010128:	ed8d 7b00 	vstr	d7, [sp]
 801012c:	ed9d 0b00 	vldr	d0, [sp]
 8010130:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010140 <__math_divzero+0x28>
 8010134:	2022      	movs	r0, #34	; 0x22
 8010136:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801013a:	b002      	add	sp, #8
 801013c:	f7ff bfbd 	b.w	80100ba <with_errno>
	...

08010148 <__math_invalid>:
 8010148:	eeb0 7b40 	vmov.f64	d7, d0
 801014c:	eeb4 7b47 	vcmp.f64	d7, d7
 8010150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010154:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010158:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801015c:	d602      	bvs.n	8010164 <__math_invalid+0x1c>
 801015e:	2021      	movs	r0, #33	; 0x21
 8010160:	f7ff bfab 	b.w	80100ba <with_errno>
 8010164:	4770      	bx	lr

08010166 <__math_check_uflow>:
 8010166:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016e:	d102      	bne.n	8010176 <__math_check_uflow+0x10>
 8010170:	2022      	movs	r0, #34	; 0x22
 8010172:	f7ff bfa2 	b.w	80100ba <with_errno>
 8010176:	4770      	bx	lr

08010178 <__math_check_oflow>:
 8010178:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010198 <__math_check_oflow+0x20>
 801017c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010180:	eeb4 7b46 	vcmp.f64	d7, d6
 8010184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010188:	dd02      	ble.n	8010190 <__math_check_oflow+0x18>
 801018a:	2022      	movs	r0, #34	; 0x22
 801018c:	f7ff bf95 	b.w	80100ba <with_errno>
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	f3af 8000 	nop.w
 8010198:	ffffffff 	.word	0xffffffff
 801019c:	7fefffff 	.word	0x7fefffff

080101a0 <fabs>:
 80101a0:	ec51 0b10 	vmov	r0, r1, d0
 80101a4:	ee10 2a10 	vmov	r2, s0
 80101a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101ac:	ec43 2b10 	vmov	d0, r2, r3
 80101b0:	4770      	bx	lr
	...

080101b4 <_init>:
 80101b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101b6:	bf00      	nop
 80101b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ba:	bc08      	pop	{r3}
 80101bc:	469e      	mov	lr, r3
 80101be:	4770      	bx	lr

080101c0 <_fini>:
 80101c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c2:	bf00      	nop
 80101c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101c6:	bc08      	pop	{r3}
 80101c8:	469e      	mov	lr, r3
 80101ca:	4770      	bx	lr
