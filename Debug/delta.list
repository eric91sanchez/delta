
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001167c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  08011920  08011920  00021920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013688  08013688  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08013688  08013688  00023688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013690  08013690  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013690  08013690  00023690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013694  08013694  00023694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  24000000  08013698  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  24000258  080138f0  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000a2c  080138f0  00030a2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c75a  00000000  00000000  00030286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003491  00000000  00000000  0004c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0004fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00051130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000541e  00000000  00000000  00052280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb38  00000000  00000000  0005769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165afe  00000000  00000000  000741d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d9cd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ac  00000000  00000000  001d9d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000258 	.word	0x24000258
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011904 	.word	0x08011904

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400025c 	.word	0x2400025c
 80002dc:	08011904 	.word	0x08011904

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b9c      	ldr	r3, [pc, #624]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a9a      	ldr	r2, [pc, #616]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b98      	ldr	r3, [pc, #608]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b94      	ldr	r3, [pc, #592]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a93      	ldr	r2, [pc, #588]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b90      	ldr	r3, [pc, #576]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b8d      	ldr	r3, [pc, #564]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a8b      	ldr	r2, [pc, #556]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b89      	ldr	r3, [pc, #548]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b85      	ldr	r3, [pc, #532]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a84      	ldr	r2, [pc, #528]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b81      	ldr	r3, [pc, #516]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b7e      	ldr	r3, [pc, #504]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a7c      	ldr	r2, [pc, #496]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a75      	ldr	r2, [pc, #468]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b6f      	ldr	r3, [pc, #444]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a6d      	ldr	r2, [pc, #436]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b6b      	ldr	r3, [pc, #428]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	4b67      	ldr	r3, [pc, #412]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a66      	ldr	r2, [pc, #408]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b63      	ldr	r3, [pc, #396]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relayDrivers_GPIO_Port, relayDrivers_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	4860      	ldr	r0, [pc, #384]	; (8000d08 <MX_GPIO_Init+0x28c>)
 8000b88:	f006 fd26 	bl	80075d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	485e      	ldr	r0, [pc, #376]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000b94:	f006 fd20 	bl	80075d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2170      	movs	r1, #112	; 0x70
 8000b9c:	485c      	ldr	r0, [pc, #368]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000b9e:	f006 fd1b 	bl	80075d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000ba2:	233d      	movs	r3, #61	; 0x3d
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
                          |E_EndStop1_Sup_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4857      	ldr	r0, [pc, #348]	; (8000d14 <MX_GPIO_Init+0x298>)
 8000bb8:	f006 fb46 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	484e      	ldr	r0, [pc, #312]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000bd4:	f006 fb38 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relayDrivers_Pin;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(relayDrivers_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4846      	ldr	r0, [pc, #280]	; (8000d08 <MX_GPIO_Init+0x28c>)
 8000bf0:	f006 fb2a 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = faultDriver1_Pin;
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(faultDriver1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4842      	ldr	r0, [pc, #264]	; (8000d14 <MX_GPIO_Init+0x298>)
 8000c0a:	f006 fb1d 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver3_Pin;
 8000c0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	483a      	ldr	r0, [pc, #232]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c26:	f006 fb0f 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000c2a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4832      	ldr	r0, [pc, #200]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000c44:	f006 fb00 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(S_Enable_1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482c      	ldr	r0, [pc, #176]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c60:	f006 faf2 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_2_Pin|S_Enable_3_Pin;
 8000c64:	2360      	movs	r3, #96	; 0x60
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c68:	2311      	movs	r3, #17
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4825      	ldr	r0, [pc, #148]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c7c:	f006 fae4 	bl	8007248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_EndStop1_Inf_Pin;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(E_EndStop1_Inf_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4820      	ldr	r0, [pc, #128]	; (8000d18 <MX_GPIO_Init+0x29c>)
 8000c98:	f006 fad6 	bl	8007248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f005 fd2a 	bl	80066fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f005 fd41 	bl	800672e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2008      	movs	r0, #8
 8000cb2:	f005 fd22 	bl	80066fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cb6:	2008      	movs	r0, #8
 8000cb8:	f005 fd39 	bl	800672e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2009      	movs	r0, #9
 8000cc2:	f005 fd1a 	bl	80066fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cc6:	2009      	movs	r0, #9
 8000cc8:	f005 fd31 	bl	800672e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f005 fd12 	bl	80066fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f005 fd29 	bl	800672e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2101      	movs	r1, #1
 8000ce0:	2017      	movs	r0, #23
 8000ce2:	f005 fd0a 	bl	80066fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ce6:	2017      	movs	r0, #23
 8000ce8:	f005 fd21 	bl	800672e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2028      	movs	r0, #40	; 0x28
 8000cf2:	f005 fd02 	bl	80066fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f005 fd19 	bl	800672e <HAL_NVIC_EnableIRQ>

}
 8000cfc:	bf00      	nop
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58021400 	.word	0x58021400
 8000d0c:	58020800 	.word	0x58020800
 8000d10:	58020c00 	.word	0x58020c00
 8000d14:	58021000 	.word	0x58021000
 8000d18:	58021800 	.word	0x58021800
 8000d1c:	00000000 	.word	0x00000000

08000d20 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	homAprox = true;
 8000d24:	4bb0      	ldr	r3, [pc, #704]	; (8000fe8 <homing+0x2c8>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000d2a:	4bb0      	ldr	r3, [pc, #704]	; (8000fec <homing+0x2cc>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000d30:	4baf      	ldr	r3, [pc, #700]	; (8000ff0 <homing+0x2d0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000d36:	4baf      	ldr	r3, [pc, #700]	; (8000ff4 <homing+0x2d4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000d3c:	4bae      	ldr	r3, [pc, #696]	; (8000ff8 <homing+0x2d8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	48ac      	ldr	r0, [pc, #688]	; (8000ffc <homing+0x2dc>)
 8000d4a:	f006 fc45 	bl	80075d8 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d54:	48a9      	ldr	r0, [pc, #676]	; (8000ffc <homing+0x2dc>)
 8000d56:	f006 fc3f 	bl	80075d8 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d60:	48a6      	ldr	r0, [pc, #664]	; (8000ffc <homing+0x2dc>)
 8000d62:	f006 fc39 	bl	80075d8 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000d66:	2006      	movs	r0, #6
 8000d68:	f005 fcef 	bl	800674a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f005 fcec 	bl	800674a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000d72:	2008      	movs	r0, #8
 8000d74:	f005 fce9 	bl	800674a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000d78:	2009      	movs	r0, #9
 8000d7a:	f005 fce6 	bl	800674a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f005 fce3 	bl	800674a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000d84:	2017      	movs	r0, #23
 8000d86:	f005 fce0 	bl	800674a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 8000d8a:	2028      	movs	r0, #40	; 0x28
 8000d8c:	f005 fcdd 	bl	800674a <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000d90:	2100      	movs	r1, #0
 8000d92:	489b      	ldr	r0, [pc, #620]	; (8001000 <homing+0x2e0>)
 8000d94:	f009 fab6 	bl	800a304 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000d98:	2100      	movs	r1, #0
 8000d9a:	489a      	ldr	r0, [pc, #616]	; (8001004 <homing+0x2e4>)
 8000d9c:	f009 fab2 	bl	800a304 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000da0:	2100      	movs	r1, #0
 8000da2:	4899      	ldr	r0, [pc, #612]	; (8001008 <homing+0x2e8>)
 8000da4:	f009 faae 	bl	800a304 <HAL_TIM_PWM_Stop>


	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm)); //Escritura del registro ARR
 8000da8:	4b98      	ldr	r3, [pc, #608]	; (800100c <homing+0x2ec>)
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000db4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000db8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dbc:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000fd0 <homing+0x2b0>
 8000dc0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dc4:	4b92      	ldr	r3, [pc, #584]	; (8001010 <homing+0x2f0>)
 8000dc6:	ed93 7b00 	vldr	d7, [r3]
 8000dca:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000fd8 <homing+0x2b8>
 8000dce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dd2:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000fe0 <homing+0x2c0>
 8000dd6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dde:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000de2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000de6:	4b86      	ldr	r3, [pc, #536]	; (8001000 <homing+0x2e0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dee:	ee17 2a90 	vmov	r2, s15
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df4:	4b85      	ldr	r3, [pc, #532]	; (800100c <homing+0x2ec>)
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e08:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000fd0 <homing+0x2b0>
 8000e0c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e10:	4b7f      	ldr	r3, [pc, #508]	; (8001010 <homing+0x2f0>)
 8000e12:	ed93 7b00 	vldr	d7, [r3]
 8000e16:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000fd8 <homing+0x2b8>
 8000e1a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e1e:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000fe0 <homing+0x2c0>
 8000e22:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e36:	ee17 2a90 	vmov	r2, s15
 8000e3a:	4b71      	ldr	r3, [pc, #452]	; (8001000 <homing+0x2e0>)
 8000e3c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000e3e:	4b73      	ldr	r3, [pc, #460]	; (800100c <homing+0x2ec>)
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e52:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000fd0 <homing+0x2b0>
 8000e56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e5a:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <homing+0x2f0>)
 8000e5c:	ed93 7b00 	vldr	d7, [r3]
 8000e60:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000fd8 <homing+0x2b8>
 8000e64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e68:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000fe0 <homing+0x2c0>
 8000e6c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e7c:	4b61      	ldr	r3, [pc, #388]	; (8001004 <homing+0x2e4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e84:	ee17 2a90 	vmov	r2, s15
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <homing+0x2ec>)
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e96:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e9e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000fd0 <homing+0x2b0>
 8000ea2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <homing+0x2f0>)
 8000ea8:	ed93 7b00 	vldr	d7, [r3]
 8000eac:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000fd8 <homing+0x2b8>
 8000eb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000eb4:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000fe0 <homing+0x2c0>
 8000eb8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ebc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ec0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ec4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ec8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ecc:	ee17 2a90 	vmov	r2, s15
 8000ed0:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <homing+0x2e4>)
 8000ed2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <homing+0x2ec>)
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ee0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ee4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ee8:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000fd0 <homing+0x2b0>
 8000eec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <homing+0x2f0>)
 8000ef2:	ed93 7b00 	vldr	d7, [r3]
 8000ef6:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000fd8 <homing+0x2b8>
 8000efa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000efe:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000fe0 <homing+0x2c0>
 8000f02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f0a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <homing+0x2e8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f1a:	ee17 2a90 	vmov	r2, s15
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <homing+0x2ec>)
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f34:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000fd0 <homing+0x2b0>
 8000f38:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <homing+0x2f0>)
 8000f3e:	ed93 7b00 	vldr	d7, [r3]
 8000f42:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000fd8 <homing+0x2b8>
 8000f46:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f4a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000fe0 <homing+0x2c0>
 8000f4e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f56:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f62:	ee17 2a90 	vmov	r2, s15
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <homing+0x2e8>)
 8000f68:	60da      	str	r2, [r3, #12]



	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <homing+0x2ec>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <homing+0x2ec>)
 8000f80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f84:	ee17 2a90 	vmov	r2, s15
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <homing+0x2f4>)
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <homing+0x2f4>)
 8000fa0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fa4:	ee17 2a90 	vmov	r2, s15
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <homing+0x2f8>)
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000fb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <homing+0x2f8>)
 8000fc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000fca:	e06f      	b.n	80010ac <homing+0x38c>
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	418e8480 	.word	0x418e8480
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40bf4000 	.word	0x40bf4000
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	404e0000 	.word	0x404e0000
 8000fe8:	24000274 	.word	0x24000274
 8000fec:	24000275 	.word	0x24000275
 8000ff0:	24000360 	.word	0x24000360
 8000ff4:	240003a8 	.word	0x240003a8
 8000ff8:	240003f0 	.word	0x240003f0
 8000ffc:	58020800 	.word	0x58020800
 8001000:	240006c8 	.word	0x240006c8
 8001004:	24000714 	.word	0x24000714
 8001008:	24000760 	.word	0x24000760
 800100c:	40001800 	.word	0x40001800
 8001010:	24000000 	.word	0x24000000
 8001014:	40001c00 	.word	0x40001c00
 8001018:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 800101c:	2100      	movs	r1, #0
 800101e:	488c      	ldr	r0, [pc, #560]	; (8001250 <homing+0x530>)
 8001020:	f009 f862 	bl	800a0e8 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8001024:	2100      	movs	r1, #0
 8001026:	488b      	ldr	r0, [pc, #556]	; (8001254 <homing+0x534>)
 8001028:	f009 f85e 	bl	800a0e8 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 800102c:	2100      	movs	r1, #0
 800102e:	488a      	ldr	r0, [pc, #552]	; (8001258 <homing+0x538>)
 8001030:	f009 f85a 	bl	800a0e8 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001034:	2101      	movs	r1, #1
 8001036:	4889      	ldr	r0, [pc, #548]	; (800125c <homing+0x53c>)
 8001038:	f006 fab6 	bl	80075a8 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00d      	beq.n	800105e <homing+0x33e>
 8001042:	2104      	movs	r1, #4
 8001044:	4885      	ldr	r0, [pc, #532]	; (800125c <homing+0x53c>)
 8001046:	f006 faaf 	bl	80075a8 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <homing+0x33e>
 8001050:	2110      	movs	r1, #16
 8001052:	4882      	ldr	r0, [pc, #520]	; (800125c <homing+0x53c>)
 8001054:	f006 faa8 	bl	80075a8 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d126      	bne.n	80010ac <homing+0x38c>
            HAL_Delay(30);
 800105e:	201e      	movs	r0, #30
 8001060:	f005 fa1c 	bl	800649c <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001064:	2101      	movs	r1, #1
 8001066:	487d      	ldr	r0, [pc, #500]	; (800125c <homing+0x53c>)
 8001068:	f006 fa9e 	bl	80075a8 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <homing+0x36e>
 8001072:	2104      	movs	r1, #4
 8001074:	4879      	ldr	r0, [pc, #484]	; (800125c <homing+0x53c>)
 8001076:	f006 fa97 	bl	80075a8 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <homing+0x36e>
 8001080:	2110      	movs	r1, #16
 8001082:	4876      	ldr	r0, [pc, #472]	; (800125c <homing+0x53c>)
 8001084:	f006 fa90 	bl	80075a8 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10e      	bne.n	80010ac <homing+0x38c>

                Stop_PWM_MOTOR_1;
 800108e:	2100      	movs	r1, #0
 8001090:	486f      	ldr	r0, [pc, #444]	; (8001250 <homing+0x530>)
 8001092:	f009 f937 	bl	800a304 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8001096:	2100      	movs	r1, #0
 8001098:	486e      	ldr	r0, [pc, #440]	; (8001254 <homing+0x534>)
 800109a:	f009 f933 	bl	800a304 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 800109e:	2100      	movs	r1, #0
 80010a0:	486d      	ldr	r0, [pc, #436]	; (8001258 <homing+0x538>)
 80010a2:	f009 f92f 	bl	800a304 <HAL_TIM_PWM_Stop>

                homAprox = false;
 80010a6:	4b6e      	ldr	r3, [pc, #440]	; (8001260 <homing+0x540>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 80010ac:	4b6c      	ldr	r3, [pc, #432]	; (8001260 <homing+0x540>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1b3      	bne.n	800101c <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 80010b4:	e13f      	b.n	8001336 <homing+0x616>

        if (ES1s_PRESSED && !motor1.hom) {
 80010b6:	2101      	movs	r1, #1
 80010b8:	4868      	ldr	r0, [pc, #416]	; (800125c <homing+0x53c>)
 80010ba:	f006 fa75 	bl	80075a8 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d155      	bne.n	8001170 <homing+0x450>
 80010c4:	4b67      	ldr	r3, [pc, #412]	; (8001264 <homing+0x544>)
 80010c6:	7e1b      	ldrb	r3, [r3, #24]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d151      	bne.n	8001170 <homing+0x450>

            Stop_PWM_MOTOR_2;
 80010cc:	2100      	movs	r1, #0
 80010ce:	4861      	ldr	r0, [pc, #388]	; (8001254 <homing+0x534>)
 80010d0:	f009 f918 	bl	800a304 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010d4:	2100      	movs	r1, #0
 80010d6:	4860      	ldr	r0, [pc, #384]	; (8001258 <homing+0x538>)
 80010d8:	f009 f914 	bl	800a304 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80010dc:	201e      	movs	r0, #30
 80010de:	f005 f9dd 	bl	800649c <HAL_Delay>

            while(ES1s_PRESSED){
 80010e2:	e010      	b.n	8001106 <homing+0x3e6>

                negative_Dir_MOTOR_1;
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	485f      	ldr	r0, [pc, #380]	; (8001268 <homing+0x548>)
 80010ec:	f006 fa74 	bl	80075d8 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80010f0:	2000      	movs	r0, #0
 80010f2:	f005 f9d3 	bl	800649c <HAL_Delay>
                Start_PWM_MOTOR_1;
 80010f6:	2100      	movs	r1, #0
 80010f8:	4855      	ldr	r0, [pc, #340]	; (8001250 <homing+0x530>)
 80010fa:	f008 fff5 	bl	800a0e8 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80010fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001102:	f005 f9cb 	bl	800649c <HAL_Delay>
            while(ES1s_PRESSED){
 8001106:	2101      	movs	r1, #1
 8001108:	4854      	ldr	r0, [pc, #336]	; (800125c <homing+0x53c>)
 800110a:	f006 fa4d 	bl	80075a8 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0e7      	beq.n	80010e4 <homing+0x3c4>

            }

            Stop_PWM_MOTOR_1;
 8001114:	2100      	movs	r1, #0
 8001116:	484e      	ldr	r0, [pc, #312]	; (8001250 <homing+0x530>)
 8001118:	f009 f8f4 	bl	800a304 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 800111c:	4b51      	ldr	r3, [pc, #324]	; (8001264 <homing+0x544>)
 800111e:	2201      	movs	r2, #1
 8001120:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	2204      	movs	r2, #4
 8001126:	4951      	ldr	r1, [pc, #324]	; (800126c <homing+0x54c>)
 8001128:	4851      	ldr	r0, [pc, #324]	; (8001270 <homing+0x550>)
 800112a:	f00a fde3 	bl	800bcf4 <HAL_UART_Transmit>
            HAL_Delay(30);
 800112e:	201e      	movs	r0, #30
 8001130:	f005 f9b4 	bl	800649c <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001134:	2104      	movs	r1, #4
 8001136:	4849      	ldr	r0, [pc, #292]	; (800125c <homing+0x53c>)
 8001138:	f006 fa36 	bl	80075a8 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <homing+0x432>
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <homing+0x554>)
 8001144:	7e1b      	ldrb	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <homing+0x432>
 800114a:	2100      	movs	r1, #0
 800114c:	4841      	ldr	r0, [pc, #260]	; (8001254 <homing+0x534>)
 800114e:	f008 ffcb 	bl	800a0e8 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001152:	2110      	movs	r1, #16
 8001154:	4841      	ldr	r0, [pc, #260]	; (800125c <homing+0x53c>)
 8001156:	f006 fa27 	bl	80075a8 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <homing+0x450>
 8001160:	4b45      	ldr	r3, [pc, #276]	; (8001278 <homing+0x558>)
 8001162:	7e1b      	ldrb	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d103      	bne.n	8001170 <homing+0x450>
 8001168:	2100      	movs	r1, #0
 800116a:	483b      	ldr	r0, [pc, #236]	; (8001258 <homing+0x538>)
 800116c:	f008 ffbc 	bl	800a0e8 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001170:	2104      	movs	r1, #4
 8001172:	483a      	ldr	r0, [pc, #232]	; (800125c <homing+0x53c>)
 8001174:	f006 fa18 	bl	80075a8 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d155      	bne.n	800122a <homing+0x50a>
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <homing+0x554>)
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d151      	bne.n	800122a <homing+0x50a>

            Stop_PWM_MOTOR_1;
 8001186:	2100      	movs	r1, #0
 8001188:	4831      	ldr	r0, [pc, #196]	; (8001250 <homing+0x530>)
 800118a:	f009 f8bb 	bl	800a304 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 800118e:	2100      	movs	r1, #0
 8001190:	4831      	ldr	r0, [pc, #196]	; (8001258 <homing+0x538>)
 8001192:	f009 f8b7 	bl	800a304 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 8001196:	201e      	movs	r0, #30
 8001198:	f005 f980 	bl	800649c <HAL_Delay>

            while(ES2s_PRESSED){
 800119c:	e010      	b.n	80011c0 <homing+0x4a0>

                negative_Dir_MOTOR_2;
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	4830      	ldr	r0, [pc, #192]	; (8001268 <homing+0x548>)
 80011a6:	f006 fa17 	bl	80075d8 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f005 f976 	bl	800649c <HAL_Delay>
                Start_PWM_MOTOR_2;
 80011b0:	2100      	movs	r1, #0
 80011b2:	4828      	ldr	r0, [pc, #160]	; (8001254 <homing+0x534>)
 80011b4:	f008 ff98 	bl	800a0e8 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80011b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011bc:	f005 f96e 	bl	800649c <HAL_Delay>
            while(ES2s_PRESSED){
 80011c0:	2104      	movs	r1, #4
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <homing+0x53c>)
 80011c4:	f006 f9f0 	bl	80075a8 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0e7      	beq.n	800119e <homing+0x47e>

            }

            Stop_PWM_MOTOR_2;
 80011ce:	2100      	movs	r1, #0
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <homing+0x534>)
 80011d2:	f009 f897 	bl	800a304 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <homing+0x554>)
 80011d8:	2201      	movs	r2, #1
 80011da:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	2204      	movs	r2, #4
 80011e0:	4926      	ldr	r1, [pc, #152]	; (800127c <homing+0x55c>)
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <homing+0x550>)
 80011e4:	f00a fd86 	bl	800bcf4 <HAL_UART_Transmit>
            HAL_Delay(30);
 80011e8:	201e      	movs	r0, #30
 80011ea:	f005 f957 	bl	800649c <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80011ee:	2101      	movs	r1, #1
 80011f0:	481a      	ldr	r0, [pc, #104]	; (800125c <homing+0x53c>)
 80011f2:	f006 f9d9 	bl	80075a8 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <homing+0x4ec>
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <homing+0x544>)
 80011fe:	7e1b      	ldrb	r3, [r3, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <homing+0x4ec>
 8001204:	2100      	movs	r1, #0
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <homing+0x530>)
 8001208:	f008 ff6e 	bl	800a0e8 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 800120c:	2110      	movs	r1, #16
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <homing+0x53c>)
 8001210:	f006 f9ca 	bl	80075a8 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <homing+0x50a>
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <homing+0x558>)
 800121c:	7e1b      	ldrb	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <homing+0x50a>
 8001222:	2100      	movs	r1, #0
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <homing+0x538>)
 8001226:	f008 ff5f 	bl	800a0e8 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 800122a:	2110      	movs	r1, #16
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <homing+0x53c>)
 800122e:	f006 f9bb 	bl	80075a8 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d169      	bne.n	800130c <homing+0x5ec>

            Stop_PWM_MOTOR_1;
 8001238:	2100      	movs	r1, #0
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <homing+0x530>)
 800123c:	f009 f862 	bl	800a304 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 8001240:	2100      	movs	r1, #0
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <homing+0x534>)
 8001244:	f009 f85e 	bl	800a304 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001248:	201e      	movs	r0, #30
 800124a:	f005 f927 	bl	800649c <HAL_Delay>

            while(ES3s_PRESSED){
 800124e:	e028      	b.n	80012a2 <homing+0x582>
 8001250:	240006c8 	.word	0x240006c8
 8001254:	24000714 	.word	0x24000714
 8001258:	24000760 	.word	0x24000760
 800125c:	58021000 	.word	0x58021000
 8001260:	24000274 	.word	0x24000274
 8001264:	24000360 	.word	0x24000360
 8001268:	58020800 	.word	0x58020800
 800126c:	08011920 	.word	0x08011920
 8001270:	24000988 	.word	0x24000988
 8001274:	240003a8 	.word	0x240003a8
 8001278:	240003f0 	.word	0x240003f0
 800127c:	08011924 	.word	0x08011924

                negative_Dir_MOTOR_3;
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001286:	4830      	ldr	r0, [pc, #192]	; (8001348 <homing+0x628>)
 8001288:	f006 f9a6 	bl	80075d8 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 800128c:	2000      	movs	r0, #0
 800128e:	f005 f905 	bl	800649c <HAL_Delay>
                Start_PWM_MOTOR_3;
 8001292:	2100      	movs	r1, #0
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <homing+0x62c>)
 8001296:	f008 ff27 	bl	800a0e8 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800129a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129e:	f005 f8fd 	bl	800649c <HAL_Delay>
            while(ES3s_PRESSED){
 80012a2:	2110      	movs	r1, #16
 80012a4:	482a      	ldr	r0, [pc, #168]	; (8001350 <homing+0x630>)
 80012a6:	f006 f97f 	bl	80075a8 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0e7      	beq.n	8001280 <homing+0x560>
            }

            Stop_PWM_MOTOR_3;
 80012b0:	2100      	movs	r1, #0
 80012b2:	4826      	ldr	r0, [pc, #152]	; (800134c <homing+0x62c>)
 80012b4:	f009 f826 	bl	800a304 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <homing+0x634>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	2204      	movs	r2, #4
 80012c2:	4925      	ldr	r1, [pc, #148]	; (8001358 <homing+0x638>)
 80012c4:	4825      	ldr	r0, [pc, #148]	; (800135c <homing+0x63c>)
 80012c6:	f00a fd15 	bl	800bcf4 <HAL_UART_Transmit>
			HAL_Delay(30);
 80012ca:	201e      	movs	r0, #30
 80012cc:	f005 f8e6 	bl	800649c <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80012d0:	2101      	movs	r1, #1
 80012d2:	481f      	ldr	r0, [pc, #124]	; (8001350 <homing+0x630>)
 80012d4:	f006 f968 	bl	80075a8 <HAL_GPIO_ReadPin>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <homing+0x5ce>
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <homing+0x640>)
 80012e0:	7e1b      	ldrb	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <homing+0x5ce>
 80012e6:	2100      	movs	r1, #0
 80012e8:	481e      	ldr	r0, [pc, #120]	; (8001364 <homing+0x644>)
 80012ea:	f008 fefd 	bl	800a0e8 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80012ee:	2104      	movs	r1, #4
 80012f0:	4817      	ldr	r0, [pc, #92]	; (8001350 <homing+0x630>)
 80012f2:	f006 f959 	bl	80075a8 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <homing+0x5ec>
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <homing+0x648>)
 80012fe:	7e1b      	ldrb	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <homing+0x5ec>
 8001304:	2100      	movs	r1, #0
 8001306:	4819      	ldr	r0, [pc, #100]	; (800136c <homing+0x64c>)
 8001308:	f008 feee 	bl	800a0e8 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <homing+0x640>)
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d010      	beq.n	8001336 <homing+0x616>
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <homing+0x648>)
 8001316:	7e1b      	ldrb	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <homing+0x616>
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <homing+0x634>)
 800131e:	7e1b      	ldrb	r3, [r3, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <homing+0x616>
        	homFin=true;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <homing+0x650>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	2204      	movs	r2, #4
 800132e:	4911      	ldr	r1, [pc, #68]	; (8001374 <homing+0x654>)
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <homing+0x63c>)
 8001332:	f00a fcdf 	bl	800bcf4 <HAL_UART_Transmit>
    while (!homFin){
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <homing+0x650>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f43f aebb 	beq.w	80010b6 <homing+0x396>
        }
       }


    }
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58020800 	.word	0x58020800
 800134c:	24000760 	.word	0x24000760
 8001350:	58021000 	.word	0x58021000
 8001354:	240003f0 	.word	0x240003f0
 8001358:	08011928 	.word	0x08011928
 800135c:	24000988 	.word	0x24000988
 8001360:	24000360 	.word	0x24000360
 8001364:	240006c8 	.word	0x240006c8
 8001368:	240003a8 	.word	0x240003a8
 800136c:	24000714 	.word	0x24000714
 8001370:	24000439 	.word	0x24000439
 8001374:	0801192c 	.word	0x0801192c

08001378 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800137c:	f3bf 8f4f 	dsb	sy
}
 8001380:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <__NVIC_SystemReset+0x24>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800138a:	4904      	ldr	r1, [pc, #16]	; (800139c <__NVIC_SystemReset+0x24>)
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_SystemReset+0x28>)
 800138e:	4313      	orrs	r3, r2
 8001390:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001392:	f3bf 8f4f 	dsb	sy
}
 8001396:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <__NVIC_SystemReset+0x20>
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	05fa0004 	.word	0x05fa0004

080013a4 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80013aa:	4b99      	ldr	r3, [pc, #612]	; (8001610 <interpretaComando+0x26c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3b48      	subs	r3, #72	; 0x48
 80013b0:	2b2a      	cmp	r3, #42	; 0x2a
 80013b2:	f200 8128 	bhi.w	8001606 <interpretaComando+0x262>
 80013b6:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <interpretaComando+0x18>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	08001469 	.word	0x08001469
 80013c0:	08001607 	.word	0x08001607
 80013c4:	08001607 	.word	0x08001607
 80013c8:	08001607 	.word	0x08001607
 80013cc:	08001607 	.word	0x08001607
 80013d0:	08001607 	.word	0x08001607
 80013d4:	08001607 	.word	0x08001607
 80013d8:	08001607 	.word	0x08001607
 80013dc:	08001471 	.word	0x08001471
 80013e0:	08001607 	.word	0x08001607
 80013e4:	080015f7 	.word	0x080015f7
 80013e8:	08001607 	.word	0x08001607
 80013ec:	08001607 	.word	0x08001607
 80013f0:	08001607 	.word	0x08001607
 80013f4:	08001607 	.word	0x08001607
 80013f8:	08001607 	.word	0x08001607
 80013fc:	08001607 	.word	0x08001607
 8001400:	08001607 	.word	0x08001607
 8001404:	08001607 	.word	0x08001607
 8001408:	08001607 	.word	0x08001607
 800140c:	08001607 	.word	0x08001607
 8001410:	08001607 	.word	0x08001607
 8001414:	08001607 	.word	0x08001607
 8001418:	08001607 	.word	0x08001607
 800141c:	08001607 	.word	0x08001607
 8001420:	08001607 	.word	0x08001607
 8001424:	08001607 	.word	0x08001607
 8001428:	08001607 	.word	0x08001607
 800142c:	08001607 	.word	0x08001607
 8001430:	08001607 	.word	0x08001607
 8001434:	08001607 	.word	0x08001607
 8001438:	08001607 	.word	0x08001607
 800143c:	08001469 	.word	0x08001469
 8001440:	08001607 	.word	0x08001607
 8001444:	08001607 	.word	0x08001607
 8001448:	08001607 	.word	0x08001607
 800144c:	08001607 	.word	0x08001607
 8001450:	08001607 	.word	0x08001607
 8001454:	08001607 	.word	0x08001607
 8001458:	08001607 	.word	0x08001607
 800145c:	08001471 	.word	0x08001471
 8001460:	08001607 	.word	0x08001607
 8001464:	080015f7 	.word	0x080015f7


	case 'H':
	case 'h':
		state = HOME;
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <interpretaComando+0x270>)
 800146a:	2203      	movs	r2, #3
 800146c:	701a      	strb	r2, [r3, #0]
	break;
 800146e:	e0cb      	b.n	8001608 <interpretaComando+0x264>

	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':

		flagErrorEndStop = 0;
 8001470:	4969      	ldr	r1, [pc, #420]	; (8001618 <interpretaComando+0x274>)
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 8001486:	e0ac      	b.n	80015e2 <interpretaComando+0x23e>
			if(rx_buffer[i] == 'x'){
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	4a61      	ldr	r2, [pc, #388]	; (8001610 <interpretaComando+0x26c>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	2b78      	cmp	r3, #120	; 0x78
 8001490:	d133      	bne.n	80014fa <interpretaComando+0x156>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001492:	e00c      	b.n	80014ae <interpretaComando+0x10a>
					auxString[j] = rx_buffer[i+1];
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	495d      	ldr	r1, [pc, #372]	; (8001610 <interpretaComando+0x26c>)
 800149c:	5c89      	ldrb	r1, [r1, r2]
 800149e:	4a5f      	ldr	r2, [pc, #380]	; (800161c <interpretaComando+0x278>)
 80014a0:	54d1      	strb	r1, [r2, r3]
					j++;
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73bb      	strb	r3, [r7, #14]
					i++;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	3301      	adds	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a57      	ldr	r2, [pc, #348]	; (8001610 <interpretaComando+0x26c>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d1ec      	bne.n	8001494 <interpretaComando+0xf0>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80014ba:	2100      	movs	r1, #0
 80014bc:	4857      	ldr	r0, [pc, #348]	; (800161c <interpretaComando+0x278>)
 80014be:	f00d fd29 	bl	800ef14 <strtod>
 80014c2:	eeb0 7b40 	vmov.f64	d7, d0
 80014c6:	4b56      	ldr	r3, [pc, #344]	; (8001620 <interpretaComando+0x27c>)
 80014c8:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	e007      	b.n	80014e2 <interpretaComando+0x13e>
					auxString[k] = 0;
 80014d2:	4a52      	ldr	r2, [pc, #328]	; (800161c <interpretaComando+0x278>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4413      	add	r3, r2
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3301      	adds	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	ddf4      	ble.n	80014d2 <interpretaComando+0x12e>
				}
				j=0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	2207      	movs	r2, #7
 80014f0:	494c      	ldr	r1, [pc, #304]	; (8001624 <interpretaComando+0x280>)
 80014f2:	484d      	ldr	r0, [pc, #308]	; (8001628 <interpretaComando+0x284>)
 80014f4:	f00a fbfe 	bl	800bcf4 <HAL_UART_Transmit>
 80014f8:	e070      	b.n	80015dc <interpretaComando+0x238>
			}
			else if(rx_buffer[i] == 'y'){
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	4a44      	ldr	r2, [pc, #272]	; (8001610 <interpretaComando+0x26c>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	2b79      	cmp	r3, #121	; 0x79
 8001502:	d133      	bne.n	800156c <interpretaComando+0x1c8>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001504:	e00c      	b.n	8001520 <interpretaComando+0x17c>
					auxString[j] = rx_buffer[i+1];
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	4940      	ldr	r1, [pc, #256]	; (8001610 <interpretaComando+0x26c>)
 800150e:	5c89      	ldrb	r1, [r1, r2]
 8001510:	4a42      	ldr	r2, [pc, #264]	; (800161c <interpretaComando+0x278>)
 8001512:	54d1      	strb	r1, [r2, r3]
					j++;
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	3301      	adds	r3, #1
 8001518:	73bb      	strb	r3, [r7, #14]
					i++;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	3301      	adds	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	4a3a      	ldr	r2, [pc, #232]	; (8001610 <interpretaComando+0x26c>)
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	2b20      	cmp	r3, #32
 800152a:	d1ec      	bne.n	8001506 <interpretaComando+0x162>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	483b      	ldr	r0, [pc, #236]	; (800161c <interpretaComando+0x278>)
 8001530:	f00d fcf0 	bl	800ef14 <strtod>
 8001534:	eeb0 7b40 	vmov.f64	d7, d0
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <interpretaComando+0x27c>)
 800153a:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	e007      	b.n	8001554 <interpretaComando+0x1b0>
					auxString[k] = 0;
 8001544:	4a35      	ldr	r2, [pc, #212]	; (800161c <interpretaComando+0x278>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3301      	adds	r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b0a      	cmp	r3, #10
 8001558:	ddf4      	ble.n	8001544 <interpretaComando+0x1a0>
				}
				j=0;
 800155a:	2300      	movs	r3, #0
 800155c:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 800155e:	2364      	movs	r3, #100	; 0x64
 8001560:	2207      	movs	r2, #7
 8001562:	4932      	ldr	r1, [pc, #200]	; (800162c <interpretaComando+0x288>)
 8001564:	4830      	ldr	r0, [pc, #192]	; (8001628 <interpretaComando+0x284>)
 8001566:	f00a fbc5 	bl	800bcf4 <HAL_UART_Transmit>
 800156a:	e037      	b.n	80015dc <interpretaComando+0x238>
			}
			else if(rx_buffer[i] == 'z'){
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	4a28      	ldr	r2, [pc, #160]	; (8001610 <interpretaComando+0x26c>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	2b7a      	cmp	r3, #122	; 0x7a
 8001574:	d132      	bne.n	80015dc <interpretaComando+0x238>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001576:	e00c      	b.n	8001592 <interpretaComando+0x1ee>
					auxString[j] = rx_buffer[i+1];
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	4924      	ldr	r1, [pc, #144]	; (8001610 <interpretaComando+0x26c>)
 8001580:	5c89      	ldrb	r1, [r1, r2]
 8001582:	4a26      	ldr	r2, [pc, #152]	; (800161c <interpretaComando+0x278>)
 8001584:	54d1      	strb	r1, [r2, r3]
					j++;
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	3301      	adds	r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]
					i++;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	3301      	adds	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	3301      	adds	r3, #1
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <interpretaComando+0x26c>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	2b20      	cmp	r3, #32
 800159c:	d1ec      	bne.n	8001578 <interpretaComando+0x1d4>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 800159e:	2100      	movs	r1, #0
 80015a0:	481e      	ldr	r0, [pc, #120]	; (800161c <interpretaComando+0x278>)
 80015a2:	f00d fcb7 	bl	800ef14 <strtod>
 80015a6:	eeb0 7b40 	vmov.f64	d7, d0
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <interpretaComando+0x27c>)
 80015ac:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	e007      	b.n	80015c6 <interpretaComando+0x222>
					auxString[k] = 0;
 80015b6:	4a19      	ldr	r2, [pc, #100]	; (800161c <interpretaComando+0x278>)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b0a      	cmp	r3, #10
 80015ca:	ddf4      	ble.n	80015b6 <interpretaComando+0x212>
				}
				j=0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	2207      	movs	r2, #7
 80015d4:	4916      	ldr	r1, [pc, #88]	; (8001630 <interpretaComando+0x28c>)
 80015d6:	4814      	ldr	r0, [pc, #80]	; (8001628 <interpretaComando+0x284>)
 80015d8:	f00a fb8c 	bl	800bcf4 <HAL_UART_Transmit>
			}
			i++;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	3301      	adds	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <interpretaComando+0x26c>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f47f af4d 	bne.w	8001488 <interpretaComando+0xe4>
		}
		receptionFlag = true;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <interpretaComando+0x290>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]


		break;
 80015f4:	e008      	b.n	8001608 <interpretaComando+0x264>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart3, (uint8_t *)"Resetting...\n", 14, 100);
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	220e      	movs	r2, #14
 80015fa:	490f      	ldr	r1, [pc, #60]	; (8001638 <interpretaComando+0x294>)
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <interpretaComando+0x284>)
 80015fe:	f00a fb79 	bl	800bcf4 <HAL_UART_Transmit>
		NVIC_SystemReset();
 8001602:	f7ff feb9 	bl	8001378 <__NVIC_SystemReset>

		break;

	default:break;
 8001606:	bf00      	nop


	}

}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24000564 	.word	0x24000564
 8001614:	24000438 	.word	0x24000438
 8001618:	24000588 	.word	0x24000588
 800161c:	24000278 	.word	0x24000278
 8001620:	24000498 	.word	0x24000498
 8001624:	08011930 	.word	0x08011930
 8001628:	24000988 	.word	0x24000988
 800162c:	08011938 	.word	0x08011938
 8001630:	08011940 	.word	0x08011940
 8001634:	24000583 	.word	0x24000583
 8001638:	08011948 	.word	0x08011948
 800163c:	00000000 	.word	0x00000000

08001640 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001640:	b580      	push	{r7, lr}
 8001642:	ed2d 8b04 	vpush	{d8-d9}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	eeb0 5b40 	vmov.f64	d5, d0
 800164e:	eeb0 6b41 	vmov.f64	d6, d1
 8001652:	eeb0 7b42 	vmov.f64	d7, d2
 8001656:	ed87 5b00 	vstr	d5, [r7]
 800165a:	ed87 6b02 	vstr	d6, [r7, #8]
 800165e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001662:	ed97 7b02 	vldr	d7, [r7, #8]
 8001666:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001a20 <inverseKinematic+0x3e0>
 800166a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800166e:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001a28 <inverseKinematic+0x3e8>
 8001672:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001676:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800167a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800167e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001682:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001686:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800168a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800168e:	eeb0 0b45 	vmov.f64	d0, d5
 8001692:	f00f fd09 	bl	80110a8 <pow>
 8001696:	eeb0 7b40 	vmov.f64	d7, d0
 800169a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800169e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016a2:	4bf9      	ldr	r3, [pc, #996]	; (8001a88 <inverseKinematic+0x448>)
 80016a4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 80016a8:	ed97 7b00 	vldr	d7, [r7]
 80016ac:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a30 <inverseKinematic+0x3f0>
 80016b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016b4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a38 <inverseKinematic+0x3f8>
 80016b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016bc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a40 <inverseKinematic+0x400>
 80016c0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80016c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80016c8:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001a48 <inverseKinematic+0x408>
 80016cc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80016d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80016d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80016dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016e0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80016e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016e8:	eeb0 0b45 	vmov.f64	d0, d5
 80016ec:	f00f fcdc 	bl	80110a8 <pow>
 80016f0:	eeb0 7b40 	vmov.f64	d7, d0
 80016f4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80016f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016fc:	4be3      	ldr	r3, [pc, #908]	; (8001a8c <inverseKinematic+0x44c>)
 80016fe:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001702:	ed97 7b00 	vldr	d7, [r7]
 8001706:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001a30 <inverseKinematic+0x3f0>
 800170a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800170e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001a38 <inverseKinematic+0x3f8>
 8001712:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001716:	ed97 7b02 	vldr	d7, [r7, #8]
 800171a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8001a48 <inverseKinematic+0x408>
 800171e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001722:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001726:	ee36 7b47 	vsub.f64	d7, d6, d7
 800172a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8001a50 <inverseKinematic+0x410>
 800172e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001732:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8001a28 <inverseKinematic+0x3e8>
 8001736:	ee37 6b06 	vadd.f64	d6, d7, d6
 800173a:	ed97 7b04 	vldr	d7, [r7, #16]
 800173e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001742:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001746:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800174a:	eeb0 0b45 	vmov.f64	d0, d5
 800174e:	f00f fcab 	bl	80110a8 <pow>
 8001752:	eeb0 7b40 	vmov.f64	d7, d0
 8001756:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800175a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800175e:	4bcc      	ldr	r3, [pc, #816]	; (8001a90 <inverseKinematic+0x450>)
 8001760:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8001764:	ed97 7b02 	vldr	d7, [r7, #8]
 8001768:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001a20 <inverseKinematic+0x3e0>
 800176c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001770:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001a28 <inverseKinematic+0x3e8>
 8001774:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001778:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800177c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001780:	ed97 7b04 	vldr	d7, [r7, #16]
 8001784:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001788:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800178c:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001790:	ed97 7b02 	vldr	d7, [r7, #8]
 8001794:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001a20 <inverseKinematic+0x3e0>
 8001798:	ee37 7b46 	vsub.f64	d7, d7, d6
 800179c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017a0:	eeb0 0b47 	vmov.f64	d0, d7
 80017a4:	f00f fc80 	bl	80110a8 <pow>
 80017a8:	eeb0 7b40 	vmov.f64	d7, d0
 80017ac:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001a58 <inverseKinematic+0x418>
 80017b0:	ee37 9b06 	vadd.f64	d9, d7, d6
 80017b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017bc:	eeb0 0b47 	vmov.f64	d0, d7
 80017c0:	f00f fc72 	bl	80110a8 <pow>
 80017c4:	eeb0 7b40 	vmov.f64	d7, d0
 80017c8:	ee39 7b07 	vadd.f64	d7, d9, d7
 80017cc:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001a60 <inverseKinematic+0x420>
 80017d0:	ee37 9b46 	vsub.f64	d9, d7, d6
 80017d4:	ed97 7b00 	vldr	d7, [r7]
 80017d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017dc:	eeb0 0b47 	vmov.f64	d0, d7
 80017e0:	f00f fc62 	bl	80110a8 <pow>
 80017e4:	eeb0 7b40 	vmov.f64	d7, d0
 80017e8:	ee39 5b07 	vadd.f64	d5, d9, d7
 80017ec:	ed97 7b04 	vldr	d7, [r7, #16]
 80017f0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017f8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80017fc:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001a68 <inverseKinematic+0x428>
 8001800:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001804:	4ba3      	ldr	r3, [pc, #652]	; (8001a94 <inverseKinematic+0x454>)
 8001806:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 800180a:	ed97 7b00 	vldr	d7, [r7]
 800180e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001a30 <inverseKinematic+0x3f0>
 8001812:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001816:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001a70 <inverseKinematic+0x430>
 800181a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800181e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001822:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001a48 <inverseKinematic+0x408>
 8001826:	ee37 7b05 	vadd.f64	d7, d7, d5
 800182a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800182e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001832:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001a40 <inverseKinematic+0x400>
 8001836:	ee37 5b06 	vadd.f64	d5, d7, d6
 800183a:	ed97 7b04 	vldr	d7, [r7, #16]
 800183e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001842:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001846:	ee37 8b07 	vadd.f64	d8, d7, d7
 800184a:	ed97 7b00 	vldr	d7, [r7]
 800184e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8001a30 <inverseKinematic+0x3f0>
 8001852:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001856:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800185a:	eeb0 0b47 	vmov.f64	d0, d7
 800185e:	f00f fc23 	bl	80110a8 <pow>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001a58 <inverseKinematic+0x418>
 800186a:	ee37 9b06 	vadd.f64	d9, d7, d6
 800186e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001872:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001a48 <inverseKinematic+0x408>
 8001876:	ee37 7b06 	vadd.f64	d7, d7, d6
 800187a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800187e:	eeb0 0b47 	vmov.f64	d0, d7
 8001882:	f00f fc11 	bl	80110a8 <pow>
 8001886:	eeb0 7b40 	vmov.f64	d7, d0
 800188a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800188e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001892:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001896:	eeb0 0b47 	vmov.f64	d0, d7
 800189a:	f00f fc05 	bl	80110a8 <pow>
 800189e:	eeb0 7b40 	vmov.f64	d7, d0
 80018a2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80018a6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001a60 <inverseKinematic+0x420>
 80018aa:	ee37 5b46 	vsub.f64	d5, d7, d6
 80018ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80018b2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018ba:	ee28 7b07 	vmul.f64	d7, d8, d7
 80018be:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001a40 <inverseKinematic+0x400>
 80018c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018c6:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <inverseKinematic+0x458>)
 80018c8:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80018cc:	ed97 7b00 	vldr	d7, [r7]
 80018d0:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001a30 <inverseKinematic+0x3f0>
 80018d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018d8:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001a38 <inverseKinematic+0x3f8>
 80018dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018e0:	ed97 7b02 	vldr	d7, [r7, #8]
 80018e4:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001a48 <inverseKinematic+0x408>
 80018e8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80018ec:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018f4:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001a50 <inverseKinematic+0x410>
 80018f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018fc:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001a28 <inverseKinematic+0x3e8>
 8001900:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001904:	ed97 7b04 	vldr	d7, [r7, #16]
 8001908:	ee37 6b07 	vadd.f64	d6, d7, d7
 800190c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001910:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001914:	ed97 7b00 	vldr	d7, [r7]
 8001918:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001a30 <inverseKinematic+0x3f0>
 800191c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001920:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001924:	eeb0 0b47 	vmov.f64	d0, d7
 8001928:	f00f fbbe 	bl	80110a8 <pow>
 800192c:	eeb0 9b40 	vmov.f64	d9, d0
 8001930:	ed97 7b02 	vldr	d7, [r7, #8]
 8001934:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001a48 <inverseKinematic+0x408>
 8001938:	ee37 7b06 	vadd.f64	d7, d7, d6
 800193c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001940:	eeb0 0b47 	vmov.f64	d0, d7
 8001944:	f00f fbb0 	bl	80110a8 <pow>
 8001948:	eeb0 7b40 	vmov.f64	d7, d0
 800194c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001950:	ed97 7b04 	vldr	d7, [r7, #16]
 8001954:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001958:	eeb0 0b47 	vmov.f64	d0, d7
 800195c:	f00f fba4 	bl	80110a8 <pow>
 8001960:	eeb0 7b40 	vmov.f64	d7, d0
 8001964:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001968:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001a60 <inverseKinematic+0x420>
 800196c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001970:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001a78 <inverseKinematic+0x438>
 8001974:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001978:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001a80 <inverseKinematic+0x440>
 800197c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001980:	ed97 7b04 	vldr	d7, [r7, #16]
 8001984:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001988:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800198c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001990:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001a40 <inverseKinematic+0x400>
 8001994:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001998:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <inverseKinematic+0x45c>)
 800199a:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 800199e:	ed97 7b02 	vldr	d7, [r7, #8]
 80019a2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001a20 <inverseKinematic+0x3e0>
 80019a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019aa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019ae:	eeb0 0b47 	vmov.f64	d0, d7
 80019b2:	f00f fb79 	bl	80110a8 <pow>
 80019b6:	eeb0 8b40 	vmov.f64	d8, d0
 80019ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80019be:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019c2:	eeb0 0b47 	vmov.f64	d0, d7
 80019c6:	f00f fb6f 	bl	80110a8 <pow>
 80019ca:	eeb0 7b40 	vmov.f64	d7, d0
 80019ce:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019d2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001a60 <inverseKinematic+0x420>
 80019d6:	ee37 8b46 	vsub.f64	d8, d7, d6
 80019da:	ed97 7b00 	vldr	d7, [r7]
 80019de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019e2:	eeb0 0b47 	vmov.f64	d0, d7
 80019e6:	f00f fb5f 	bl	80110a8 <pow>
 80019ea:	eeb0 7b40 	vmov.f64	d7, d0
 80019ee:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019f2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001a78 <inverseKinematic+0x438>
 80019f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019fa:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001a80 <inverseKinematic+0x440>
 80019fe:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a02:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a0a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a0e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a12:	eeb0 0b45 	vmov.f64	d0, d5
 8001a16:	f00f fb47 	bl	80110a8 <pow>
 8001a1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a1e:	e03f      	b.n	8001aa0 <inverseKinematic+0x460>
 8001a20:	1eb851ec 	.word	0x1eb851ec
 8001a24:	3fb1eb85 	.word	0x3fb1eb85
 8001a28:	24dd2f1b 	.word	0x24dd2f1b
 8001a2c:	3fc58106 	.word	0x3fc58106
 8001a30:	5625749b 	.word	0x5625749b
 8001a34:	3faf09d1 	.word	0x3faf09d1
 8001a38:	e8584caa 	.word	0xe8584caa
 8001a3c:	400bb67a 	.word	0x400bb67a
 8001a40:	24dd2f1d 	.word	0x24dd2f1d
 8001a44:	3fe58106 	.word	0x3fe58106
 8001a48:	1eb851ec 	.word	0x1eb851ec
 8001a4c:	3fa1eb85 	.word	0x3fa1eb85
 8001a50:	9ba5e356 	.word	0x9ba5e356
 8001a54:	3fe020c4 	.word	0x3fe020c4
 8001a58:	f705857e 	.word	0xf705857e
 8001a5c:	3f881e03 	.word	0x3f881e03
 8001a60:	70a3d70a 	.word	0x70a3d70a
 8001a64:	3fd70a3d 	.word	0x3fd70a3d
 8001a68:	24dd2f1b 	.word	0x24dd2f1b
 8001a6c:	3fd58106 	.word	0x3fd58106
 8001a70:	e8584caa 	.word	0xe8584caa
 8001a74:	c00bb67a 	.word	0xc00bb67a
 8001a78:	93d96639 	.word	0x93d96639
 8001a7c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001a80:	47ae147c 	.word	0x47ae147c
 8001a84:	3fa47ae1 	.word	0x3fa47ae1
 8001a88:	24000288 	.word	0x24000288
 8001a8c:	240002d0 	.word	0x240002d0
 8001a90:	24000318 	.word	0x24000318
 8001a94:	24000290 	.word	0x24000290
 8001a98:	240002d8 	.word	0x240002d8
 8001a9c:	24000320 	.word	0x24000320
 8001aa0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001e20 <inverseKinematic+0x7e0>
 8001aa4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001aa8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001e28 <inverseKinematic+0x7e8>
 8001aac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ab0:	4be7      	ldr	r3, [pc, #924]	; (8001e50 <inverseKinematic+0x810>)
 8001ab2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001ab6:	ed97 7b00 	vldr	d7, [r7]
 8001aba:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001e30 <inverseKinematic+0x7f0>
 8001abe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ac2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ac6:	eeb0 0b47 	vmov.f64	d0, d7
 8001aca:	f00f faed 	bl	80110a8 <pow>
 8001ace:	eeb0 7b40 	vmov.f64	d7, d0
 8001ad2:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001e38 <inverseKinematic+0x7f8>
 8001ad6:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001ada:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ade:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001e40 <inverseKinematic+0x800>
 8001ae2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ae6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001aea:	eeb0 0b47 	vmov.f64	d0, d7
 8001aee:	f00f fadb 	bl	80110a8 <pow>
 8001af2:	eeb0 7b40 	vmov.f64	d7, d0
 8001af6:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001afa:	ed97 7b04 	vldr	d7, [r7, #16]
 8001afe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b02:	eeb0 0b47 	vmov.f64	d0, d7
 8001b06:	f00f facf 	bl	80110a8 <pow>
 8001b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b12:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001e48 <inverseKinematic+0x808>
 8001b16:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001b1a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b22:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001b26:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b2a:	eeb0 0b45 	vmov.f64	d0, d5
 8001b2e:	f00f fabb 	bl	80110a8 <pow>
 8001b32:	eeb0 7b40 	vmov.f64	d7, d0
 8001b36:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001e38 <inverseKinematic+0x7f8>
 8001b3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b3e:	4bc5      	ldr	r3, [pc, #788]	; (8001e54 <inverseKinematic+0x814>)
 8001b40:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001b44:	ed97 7b00 	vldr	d7, [r7]
 8001b48:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001e30 <inverseKinematic+0x7f0>
 8001b4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b50:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b54:	eeb0 0b47 	vmov.f64	d0, d7
 8001b58:	f00f faa6 	bl	80110a8 <pow>
 8001b5c:	eeb0 8b40 	vmov.f64	d8, d0
 8001b60:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b64:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001e40 <inverseKinematic+0x800>
 8001b68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b6c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b70:	eeb0 0b47 	vmov.f64	d0, d7
 8001b74:	f00f fa98 	bl	80110a8 <pow>
 8001b78:	eeb0 7b40 	vmov.f64	d7, d0
 8001b7c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001b80:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b84:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b88:	eeb0 0b47 	vmov.f64	d0, d7
 8001b8c:	f00f fa8c 	bl	80110a8 <pow>
 8001b90:	eeb0 7b40 	vmov.f64	d7, d0
 8001b94:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b98:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001e48 <inverseKinematic+0x808>
 8001b9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ba0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001e28 <inverseKinematic+0x7e8>
 8001ba4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ba8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001e20 <inverseKinematic+0x7e0>
 8001bac:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001bb0:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bb4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001bb8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001bbc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bc0:	eeb0 0b45 	vmov.f64	d0, d5
 8001bc4:	f00f fa70 	bl	80110a8 <pow>
 8001bc8:	eeb0 7b40 	vmov.f64	d7, d0
 8001bcc:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001e38 <inverseKinematic+0x7f8>
 8001bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd4:	4ba0      	ldr	r3, [pc, #640]	; (8001e58 <inverseKinematic+0x818>)
 8001bd6:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001bda:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <inverseKinematic+0x81c>)
 8001bdc:	ed93 7b00 	vldr	d7, [r3]
 8001be0:	eeb1 8b47 	vneg.f64	d8, d7
 8001be4:	4b9d      	ldr	r3, [pc, #628]	; (8001e5c <inverseKinematic+0x81c>)
 8001be6:	ed93 7b00 	vldr	d7, [r3]
 8001bea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bee:	eeb0 0b47 	vmov.f64	d0, d7
 8001bf2:	f00f fa59 	bl	80110a8 <pow>
 8001bf6:	eeb0 5b40 	vmov.f64	d5, d0
 8001bfa:	4b99      	ldr	r3, [pc, #612]	; (8001e60 <inverseKinematic+0x820>)
 8001bfc:	ed93 7b00 	vldr	d7, [r3]
 8001c00:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c08:	4b91      	ldr	r3, [pc, #580]	; (8001e50 <inverseKinematic+0x810>)
 8001c0a:	ed93 7b00 	vldr	d7, [r3]
 8001c0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c12:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c16:	eeb0 0b47 	vmov.f64	d0, d7
 8001c1a:	f00f fcc5 	bl	80115a8 <sqrt>
 8001c1e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c22:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001c26:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <inverseKinematic+0x820>)
 8001c28:	ed93 7b00 	vldr	d7, [r3]
 8001c2c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c34:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <inverseKinematic+0x824>)
 8001c36:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <inverseKinematic+0x81c>)
 8001c3c:	ed93 7b00 	vldr	d7, [r3]
 8001c40:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c44:	eeb0 0b47 	vmov.f64	d0, d7
 8001c48:	f00f fa2e 	bl	80110a8 <pow>
 8001c4c:	eeb0 5b40 	vmov.f64	d5, d0
 8001c50:	4b83      	ldr	r3, [pc, #524]	; (8001e60 <inverseKinematic+0x820>)
 8001c52:	ed93 7b00 	vldr	d7, [r3]
 8001c56:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c5e:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <inverseKinematic+0x810>)
 8001c60:	ed93 7b00 	vldr	d7, [r3]
 8001c64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c68:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c70:	f00f fc9a 	bl	80115a8 <sqrt>
 8001c74:	eeb0 6b40 	vmov.f64	d6, d0
 8001c78:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <inverseKinematic+0x81c>)
 8001c7a:	ed93 7b00 	vldr	d7, [r3]
 8001c7e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <inverseKinematic+0x820>)
 8001c84:	ed93 7b00 	vldr	d7, [r3]
 8001c88:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <inverseKinematic+0x828>)
 8001c92:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001c96:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <inverseKinematic+0x82c>)
 8001c98:	ed93 7b00 	vldr	d7, [r3]
 8001c9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ca0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca4:	f00f fa00 	bl	80110a8 <pow>
 8001ca8:	eeb0 5b40 	vmov.f64	d5, d0
 8001cac:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <inverseKinematic+0x830>)
 8001cae:	ed93 7b00 	vldr	d7, [r3]
 8001cb2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001cb6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cba:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <inverseKinematic+0x814>)
 8001cbc:	ed93 7b00 	vldr	d7, [r3]
 8001cc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cc4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001cc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001ccc:	f00f fc6c 	bl	80115a8 <sqrt>
 8001cd0:	eeb0 6b40 	vmov.f64	d6, d0
 8001cd4:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <inverseKinematic+0x82c>)
 8001cd6:	ed93 7b00 	vldr	d7, [r3]
 8001cda:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001cde:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <inverseKinematic+0x830>)
 8001ce0:	ed93 7b00 	vldr	d7, [r3]
 8001ce4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001ce8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cec:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <inverseKinematic+0x834>)
 8001cee:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001cf2:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <inverseKinematic+0x82c>)
 8001cf4:	ed93 7b00 	vldr	d7, [r3]
 8001cf8:	eeb1 8b47 	vneg.f64	d8, d7
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <inverseKinematic+0x82c>)
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d06:	eeb0 0b47 	vmov.f64	d0, d7
 8001d0a:	f00f f9cd 	bl	80110a8 <pow>
 8001d0e:	eeb0 5b40 	vmov.f64	d5, d0
 8001d12:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <inverseKinematic+0x830>)
 8001d14:	ed93 7b00 	vldr	d7, [r3]
 8001d18:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d20:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <inverseKinematic+0x814>)
 8001d22:	ed93 7b00 	vldr	d7, [r3]
 8001d26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d2e:	eeb0 0b47 	vmov.f64	d0, d7
 8001d32:	f00f fc39 	bl	80115a8 <sqrt>
 8001d36:	eeb0 7b40 	vmov.f64	d7, d0
 8001d3a:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <inverseKinematic+0x830>)
 8001d40:	ed93 7b00 	vldr	d7, [r3]
 8001d44:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d48:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <inverseKinematic+0x838>)
 8001d4e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001d52:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <inverseKinematic+0x83c>)
 8001d54:	ed93 7b00 	vldr	d7, [r3]
 8001d58:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d60:	f00f f9a2 	bl	80110a8 <pow>
 8001d64:	eeb0 5b40 	vmov.f64	d5, d0
 8001d68:	4b45      	ldr	r3, [pc, #276]	; (8001e80 <inverseKinematic+0x840>)
 8001d6a:	ed93 7b00 	vldr	d7, [r3]
 8001d6e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <inverseKinematic+0x818>)
 8001d78:	ed93 7b00 	vldr	d7, [r3]
 8001d7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d80:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d84:	eeb0 0b47 	vmov.f64	d0, d7
 8001d88:	f00f fc0e 	bl	80115a8 <sqrt>
 8001d8c:	eeb0 6b40 	vmov.f64	d6, d0
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <inverseKinematic+0x83c>)
 8001d92:	ed93 7b00 	vldr	d7, [r3]
 8001d96:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <inverseKinematic+0x840>)
 8001d9c:	ed93 7b00 	vldr	d7, [r3]
 8001da0:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001da4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <inverseKinematic+0x844>)
 8001daa:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <inverseKinematic+0x83c>)
 8001db0:	ed93 7b00 	vldr	d7, [r3]
 8001db4:	eeb1 8b47 	vneg.f64	d8, d7
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <inverseKinematic+0x83c>)
 8001dba:	ed93 7b00 	vldr	d7, [r3]
 8001dbe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dc2:	eeb0 0b47 	vmov.f64	d0, d7
 8001dc6:	f00f f96f 	bl	80110a8 <pow>
 8001dca:	eeb0 5b40 	vmov.f64	d5, d0
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <inverseKinematic+0x840>)
 8001dd0:	ed93 7b00 	vldr	d7, [r3]
 8001dd4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001dd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <inverseKinematic+0x818>)
 8001dde:	ed93 7b00 	vldr	d7, [r3]
 8001de2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001de6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001dea:	eeb0 0b47 	vmov.f64	d0, d7
 8001dee:	f00f fbdb 	bl	80115a8 <sqrt>
 8001df2:	eeb0 7b40 	vmov.f64	d7, d0
 8001df6:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <inverseKinematic+0x840>)
 8001dfc:	ed93 7b00 	vldr	d7, [r3]
 8001e00:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e04:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <inverseKinematic+0x848>)
 8001e0a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001e0e:	491f      	ldr	r1, [pc, #124]	; (8001e8c <inverseKinematic+0x84c>)
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]
 8001e1c:	e038      	b.n	8001e90 <inverseKinematic+0x850>
 8001e1e:	bf00      	nop
 8001e20:	47ae147c 	.word	0x47ae147c
 8001e24:	3fa47ae1 	.word	0x3fa47ae1
 8001e28:	93d96639 	.word	0x93d96639
 8001e2c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001e30:	5625749b 	.word	0x5625749b
 8001e34:	3faf09d1 	.word	0x3faf09d1
 8001e38:	f705857e 	.word	0xf705857e
 8001e3c:	3f881e03 	.word	0x3f881e03
 8001e40:	1eb851ec 	.word	0x1eb851ec
 8001e44:	3fa1eb85 	.word	0x3fa1eb85
 8001e48:	70a3d70a 	.word	0x70a3d70a
 8001e4c:	3fd70a3d 	.word	0x3fd70a3d
 8001e50:	24000298 	.word	0x24000298
 8001e54:	240002e0 	.word	0x240002e0
 8001e58:	24000328 	.word	0x24000328
 8001e5c:	24000290 	.word	0x24000290
 8001e60:	24000288 	.word	0x24000288
 8001e64:	240002b0 	.word	0x240002b0
 8001e68:	240002b8 	.word	0x240002b8
 8001e6c:	240002d8 	.word	0x240002d8
 8001e70:	240002d0 	.word	0x240002d0
 8001e74:	240002f8 	.word	0x240002f8
 8001e78:	24000300 	.word	0x24000300
 8001e7c:	24000320 	.word	0x24000320
 8001e80:	24000318 	.word	0x24000318
 8001e84:	24000340 	.word	0x24000340
 8001e88:	24000348 	.word	0x24000348
 8001e8c:	240002a0 	.word	0x240002a0
	XJ1_2 = 0;
 8001e90:	49f1      	ldr	r1, [pc, #964]	; (8002258 <inverseKinematic+0xc18>)
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001e9e:	4bef      	ldr	r3, [pc, #956]	; (800225c <inverseKinematic+0xc1c>)
 8001ea0:	ed93 7b00 	vldr	d7, [r3]
 8001ea4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 80021f0 <inverseKinematic+0xbb0>
 8001ea8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eac:	4bec      	ldr	r3, [pc, #944]	; (8002260 <inverseKinematic+0xc20>)
 8001eae:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001eb2:	4bec      	ldr	r3, [pc, #944]	; (8002264 <inverseKinematic+0xc24>)
 8001eb4:	ed93 7b00 	vldr	d7, [r3]
 8001eb8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 80021f0 <inverseKinematic+0xbb0>
 8001ebc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ec0:	4be9      	ldr	r3, [pc, #932]	; (8002268 <inverseKinematic+0xc28>)
 8001ec2:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001ec6:	4be9      	ldr	r3, [pc, #932]	; (800226c <inverseKinematic+0xc2c>)
 8001ec8:	ed93 7b00 	vldr	d7, [r3]
 8001ecc:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80021f8 <inverseKinematic+0xbb8>
 8001ed0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ed4:	4be6      	ldr	r3, [pc, #920]	; (8002270 <inverseKinematic+0xc30>)
 8001ed6:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001eda:	4be6      	ldr	r3, [pc, #920]	; (8002274 <inverseKinematic+0xc34>)
 8001edc:	ed93 7b00 	vldr	d7, [r3]
 8001ee0:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 80021f8 <inverseKinematic+0xbb8>
 8001ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ee8:	4be3      	ldr	r3, [pc, #908]	; (8002278 <inverseKinematic+0xc38>)
 8001eea:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001eee:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ef2:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002200 <inverseKinematic+0xbc0>
 8001ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001efa:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002208 <inverseKinematic+0xbc8>
 8001efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f02:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001f06:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001f0a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f12:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f16:	4bd9      	ldr	r3, [pc, #868]	; (800227c <inverseKinematic+0xc3c>)
 8001f18:	ed93 7b00 	vldr	d7, [r3]
 8001f1c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001f20:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f24:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002200 <inverseKinematic+0xbc0>
 8001f28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f2c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f30:	eeb0 0b47 	vmov.f64	d0, d7
 8001f34:	f00f f8b8 	bl	80110a8 <pow>
 8001f38:	eeb0 9b40 	vmov.f64	d9, d0
 8001f3c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f40:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f44:	eeb0 0b47 	vmov.f64	d0, d7
 8001f48:	f00f f8ae 	bl	80110a8 <pow>
 8001f4c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f50:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f54:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002210 <inverseKinematic+0xbd0>
 8001f58:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001f5c:	ed97 7b00 	vldr	d7, [r7]
 8001f60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f64:	eeb0 0b47 	vmov.f64	d0, d7
 8001f68:	f00f f89e 	bl	80110a8 <pow>
 8001f6c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f70:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f74:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002218 <inverseKinematic+0xbd8>
 8001f78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f7c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002220 <inverseKinematic+0xbe0>
 8001f80:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001f84:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f88:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001f8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f90:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001f94:	4bba      	ldr	r3, [pc, #744]	; (8002280 <inverseKinematic+0xc40>)
 8001f96:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001f9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f9e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002200 <inverseKinematic+0xbc0>
 8001fa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fa6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002208 <inverseKinematic+0xbc8>
 8001faa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fae:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001fb2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001fb6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fbe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001fc2:	4bb0      	ldr	r3, [pc, #704]	; (8002284 <inverseKinematic+0xc44>)
 8001fc4:	ed93 7b00 	vldr	d7, [r3]
 8001fc8:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fcc:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fd0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002200 <inverseKinematic+0xbc0>
 8001fd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fdc:	eeb0 0b47 	vmov.f64	d0, d7
 8001fe0:	f00f f862 	bl	80110a8 <pow>
 8001fe4:	eeb0 9b40 	vmov.f64	d9, d0
 8001fe8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff4:	f00f f858 	bl	80110a8 <pow>
 8001ff8:	eeb0 7b40 	vmov.f64	d7, d0
 8001ffc:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002000:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002210 <inverseKinematic+0xbd0>
 8002004:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002008:	ed97 7b00 	vldr	d7, [r7]
 800200c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002010:	eeb0 0b47 	vmov.f64	d0, d7
 8002014:	f00f f848 	bl	80110a8 <pow>
 8002018:	eeb0 7b40 	vmov.f64	d7, d0
 800201c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002020:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002218 <inverseKinematic+0xbd8>
 8002024:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002028:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002220 <inverseKinematic+0xbe0>
 800202c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002030:	ed97 7b04 	vldr	d7, [r7, #16]
 8002034:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002038:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800203c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002040:	4b91      	ldr	r3, [pc, #580]	; (8002288 <inverseKinematic+0xc48>)
 8002042:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002046:	ed97 7b00 	vldr	d7, [r7]
 800204a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002228 <inverseKinematic+0xbe8>
 800204e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002052:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002230 <inverseKinematic+0xbf0>
 8002056:	ee27 6b06 	vmul.f64	d6, d7, d6
 800205a:	ed97 7b02 	vldr	d7, [r7, #8]
 800205e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8002238 <inverseKinematic+0xbf8>
 8002062:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002066:	ee37 7b07 	vadd.f64	d7, d7, d7
 800206a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800206e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002240 <inverseKinematic+0xc00>
 8002072:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002076:	ed97 7b04 	vldr	d7, [r7, #16]
 800207a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800207e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <inverseKinematic+0xc1c>)
 8002084:	ed93 7b00 	vldr	d7, [r3]
 8002088:	ee26 8b07 	vmul.f64	d8, d6, d7
 800208c:	ed97 7b00 	vldr	d7, [r7]
 8002090:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002228 <inverseKinematic+0xbe8>
 8002094:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002098:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800209c:	eeb0 0b47 	vmov.f64	d0, d7
 80020a0:	f00f f802 	bl	80110a8 <pow>
 80020a4:	eeb0 7b40 	vmov.f64	d7, d0
 80020a8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002248 <inverseKinematic+0xc08>
 80020ac:	ee37 9b06 	vadd.f64	d9, d7, d6
 80020b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80020b4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002238 <inverseKinematic+0xbf8>
 80020b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020c0:	eeb0 0b47 	vmov.f64	d0, d7
 80020c4:	f00e fff0 	bl	80110a8 <pow>
 80020c8:	eeb0 7b40 	vmov.f64	d7, d0
 80020cc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80020d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80020d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020d8:	eeb0 0b47 	vmov.f64	d0, d7
 80020dc:	f00e ffe4 	bl	80110a8 <pow>
 80020e0:	eeb0 7b40 	vmov.f64	d7, d0
 80020e4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020e8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002210 <inverseKinematic+0xbd0>
 80020ec:	ee37 5b46 	vsub.f64	d5, d7, d6
 80020f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80020f4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80020f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002100:	4b62      	ldr	r3, [pc, #392]	; (800228c <inverseKinematic+0xc4c>)
 8002102:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002106:	ed97 7b00 	vldr	d7, [r7]
 800210a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002228 <inverseKinematic+0xbe8>
 800210e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002112:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002230 <inverseKinematic+0xbf0>
 8002116:	ee27 6b06 	vmul.f64	d6, d7, d6
 800211a:	ed97 7b02 	vldr	d7, [r7, #8]
 800211e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8002238 <inverseKinematic+0xbf8>
 8002122:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002126:	ee37 7b07 	vadd.f64	d7, d7, d7
 800212a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800212e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002240 <inverseKinematic+0xc00>
 8002132:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002136:	ed97 7b04 	vldr	d7, [r7, #16]
 800213a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800213e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002142:	4b48      	ldr	r3, [pc, #288]	; (8002264 <inverseKinematic+0xc24>)
 8002144:	ed93 7b00 	vldr	d7, [r3]
 8002148:	ee26 8b07 	vmul.f64	d8, d6, d7
 800214c:	ed97 7b00 	vldr	d7, [r7]
 8002150:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002228 <inverseKinematic+0xbe8>
 8002154:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002158:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800215c:	eeb0 0b47 	vmov.f64	d0, d7
 8002160:	f00e ffa2 	bl	80110a8 <pow>
 8002164:	eeb0 7b40 	vmov.f64	d7, d0
 8002168:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002248 <inverseKinematic+0xc08>
 800216c:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002170:	ed97 7b02 	vldr	d7, [r7, #8]
 8002174:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002238 <inverseKinematic+0xbf8>
 8002178:	ee37 7b06 	vadd.f64	d7, d7, d6
 800217c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002180:	eeb0 0b47 	vmov.f64	d0, d7
 8002184:	f00e ff90 	bl	80110a8 <pow>
 8002188:	eeb0 7b40 	vmov.f64	d7, d0
 800218c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002190:	ed97 7b04 	vldr	d7, [r7, #16]
 8002194:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002198:	eeb0 0b47 	vmov.f64	d0, d7
 800219c:	f00e ff84 	bl	80110a8 <pow>
 80021a0:	eeb0 7b40 	vmov.f64	d7, d0
 80021a4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80021a8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002210 <inverseKinematic+0xbd0>
 80021ac:	ee37 5b46 	vsub.f64	d5, d7, d6
 80021b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80021b4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021bc:	ee38 7b07 	vadd.f64	d7, d8, d7
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <inverseKinematic+0xc50>)
 80021c2:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80021c6:	ed97 7b00 	vldr	d7, [r7]
 80021ca:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002228 <inverseKinematic+0xbe8>
 80021ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021d2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002250 <inverseKinematic+0xc10>
 80021d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021da:	ed97 7b02 	vldr	d7, [r7, #8]
 80021de:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8002238 <inverseKinematic+0xbf8>
 80021e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021ee:	e051      	b.n	8002294 <inverseKinematic+0xc54>
 80021f0:	e8584caa 	.word	0xe8584caa
 80021f4:	3ffbb67a 	.word	0x3ffbb67a
 80021f8:	e8584caa 	.word	0xe8584caa
 80021fc:	bffbb67a 	.word	0xbffbb67a
 8002200:	1eb851ec 	.word	0x1eb851ec
 8002204:	3fb1eb85 	.word	0x3fb1eb85
 8002208:	24dd2f1b 	.word	0x24dd2f1b
 800220c:	3fc58106 	.word	0x3fc58106
 8002210:	70a3d70a 	.word	0x70a3d70a
 8002214:	3fd70a3d 	.word	0x3fd70a3d
 8002218:	93d96639 	.word	0x93d96639
 800221c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002220:	47ae147c 	.word	0x47ae147c
 8002224:	3fa47ae1 	.word	0x3fa47ae1
 8002228:	5625749b 	.word	0x5625749b
 800222c:	3faf09d1 	.word	0x3faf09d1
 8002230:	e8584caa 	.word	0xe8584caa
 8002234:	c00bb67a 	.word	0xc00bb67a
 8002238:	1eb851ec 	.word	0x1eb851ec
 800223c:	3fa1eb85 	.word	0x3fa1eb85
 8002240:	24dd2f1d 	.word	0x24dd2f1d
 8002244:	3fe58106 	.word	0x3fe58106
 8002248:	f705857e 	.word	0xf705857e
 800224c:	3f881e03 	.word	0x3f881e03
 8002250:	e8584caa 	.word	0xe8584caa
 8002254:	400bb67a 	.word	0x400bb67a
 8002258:	240002a8 	.word	0x240002a8
 800225c:	240002f8 	.word	0x240002f8
 8002260:	240002e8 	.word	0x240002e8
 8002264:	24000300 	.word	0x24000300
 8002268:	240002f0 	.word	0x240002f0
 800226c:	24000340 	.word	0x24000340
 8002270:	24000330 	.word	0x24000330
 8002274:	24000348 	.word	0x24000348
 8002278:	24000338 	.word	0x24000338
 800227c:	240002b0 	.word	0x240002b0
 8002280:	240002c0 	.word	0x240002c0
 8002284:	240002b8 	.word	0x240002b8
 8002288:	240002c8 	.word	0x240002c8
 800228c:	24000308 	.word	0x24000308
 8002290:	24000310 	.word	0x24000310
 8002294:	ed9f 6b90 	vldr	d6, [pc, #576]	; 80024d8 <inverseKinematic+0xe98>
 8002298:	ee37 7b06 	vadd.f64	d7, d7, d6
 800229c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 80024e0 <inverseKinematic+0xea0>
 80022a0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80022a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80022a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022ac:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80022b0:	4b9f      	ldr	r3, [pc, #636]	; (8002530 <inverseKinematic+0xef0>)
 80022b2:	ed93 7b00 	vldr	d7, [r3]
 80022b6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80022ba:	ed97 7b00 	vldr	d7, [r7]
 80022be:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 80024e8 <inverseKinematic+0xea8>
 80022c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022ca:	eeb0 0b47 	vmov.f64	d0, d7
 80022ce:	f00e feeb 	bl	80110a8 <pow>
 80022d2:	eeb0 9b40 	vmov.f64	d9, d0
 80022d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80022da:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80024f0 <inverseKinematic+0xeb0>
 80022de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022e2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022e6:	eeb0 0b47 	vmov.f64	d0, d7
 80022ea:	f00e fedd 	bl	80110a8 <pow>
 80022ee:	eeb0 7b40 	vmov.f64	d7, d0
 80022f2:	ee39 9b07 	vadd.f64	d9, d9, d7
 80022f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80022fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002302:	f00e fed1 	bl	80110a8 <pow>
 8002306:	eeb0 7b40 	vmov.f64	d7, d0
 800230a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800230e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80024f8 <inverseKinematic+0xeb8>
 8002312:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002316:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002500 <inverseKinematic+0xec0>
 800231a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800231e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002508 <inverseKinematic+0xec8>
 8002322:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002326:	ed97 7b04 	vldr	d7, [r7, #16]
 800232a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800232e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002332:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002336:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <inverseKinematic+0xef4>)
 8002338:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800233c:	ed97 7b00 	vldr	d7, [r7]
 8002340:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80024e8 <inverseKinematic+0xea8>
 8002344:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002348:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002510 <inverseKinematic+0xed0>
 800234c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002350:	ed97 7b02 	vldr	d7, [r7, #8]
 8002354:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80024f0 <inverseKinematic+0xeb0>
 8002358:	ee37 7b05 	vadd.f64	d7, d7, d5
 800235c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002360:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002364:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80024d8 <inverseKinematic+0xe98>
 8002368:	ee37 7b06 	vadd.f64	d7, d7, d6
 800236c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80024e0 <inverseKinematic+0xea0>
 8002370:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002374:	ed97 7b04 	vldr	d7, [r7, #16]
 8002378:	ee37 7b07 	vadd.f64	d7, d7, d7
 800237c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002380:	4b6d      	ldr	r3, [pc, #436]	; (8002538 <inverseKinematic+0xef8>)
 8002382:	ed93 7b00 	vldr	d7, [r3]
 8002386:	ee26 8b07 	vmul.f64	d8, d6, d7
 800238a:	ed97 7b00 	vldr	d7, [r7]
 800238e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80024e8 <inverseKinematic+0xea8>
 8002392:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002396:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800239a:	eeb0 0b47 	vmov.f64	d0, d7
 800239e:	f00e fe83 	bl	80110a8 <pow>
 80023a2:	eeb0 9b40 	vmov.f64	d9, d0
 80023a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023aa:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80024f0 <inverseKinematic+0xeb0>
 80023ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023b6:	eeb0 0b47 	vmov.f64	d0, d7
 80023ba:	f00e fe75 	bl	80110a8 <pow>
 80023be:	eeb0 7b40 	vmov.f64	d7, d0
 80023c2:	ee39 9b07 	vadd.f64	d9, d9, d7
 80023c6:	ed97 7b04 	vldr	d7, [r7, #16]
 80023ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023ce:	eeb0 0b47 	vmov.f64	d0, d7
 80023d2:	f00e fe69 	bl	80110a8 <pow>
 80023d6:	eeb0 7b40 	vmov.f64	d7, d0
 80023da:	ee39 7b07 	vadd.f64	d7, d9, d7
 80023de:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80024f8 <inverseKinematic+0xeb8>
 80023e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023e6:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002500 <inverseKinematic+0xec0>
 80023ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023ee:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002508 <inverseKinematic+0xec8>
 80023f2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80023f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80023fa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80023fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002402:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002406:	4b4d      	ldr	r3, [pc, #308]	; (800253c <inverseKinematic+0xefc>)
 8002408:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <inverseKinematic+0xf00>)
 800240e:	ed93 7b00 	vldr	d7, [r3]
 8002412:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002518 <inverseKinematic+0xed8>
 8002416:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800241a:	eeb0 0b46 	vmov.f64	d0, d6
 800241e:	f00f f895 	bl	801154c <asin>
 8002422:	eeb0 7b40 	vmov.f64	d7, d0
 8002426:	eeb1 7b47 	vneg.f64	d7, d7
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <inverseKinematic+0xf04>)
 800242c:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <inverseKinematic+0xf04>)
 8002432:	ed93 7b00 	vldr	d7, [r3]
 8002436:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002520 <inverseKinematic+0xee0>
 800243a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800243e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002528 <inverseKinematic+0xee8>
 8002442:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <inverseKinematic+0xf04>)
 8002448:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 800244c:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <inverseKinematic+0xf08>)
 800244e:	ed93 7b00 	vldr	d7, [r3]
 8002452:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8002518 <inverseKinematic+0xed8>
 8002456:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800245a:	eeb0 0b46 	vmov.f64	d0, d6
 800245e:	f00f f875 	bl	801154c <asin>
 8002462:	eeb0 7b40 	vmov.f64	d7, d0
 8002466:	eeb1 7b47 	vneg.f64	d7, d7
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <inverseKinematic+0xf0c>)
 800246c:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <inverseKinematic+0xf0c>)
 8002472:	ed93 7b00 	vldr	d7, [r3]
 8002476:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002520 <inverseKinematic+0xee0>
 800247a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800247e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002528 <inverseKinematic+0xee8>
 8002482:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <inverseKinematic+0xf0c>)
 8002488:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <inverseKinematic+0xef4>)
 800248e:	ed93 7b00 	vldr	d7, [r3]
 8002492:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002518 <inverseKinematic+0xed8>
 8002496:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800249a:	eeb0 0b46 	vmov.f64	d0, d6
 800249e:	f00f f855 	bl	801154c <asin>
 80024a2:	eeb0 7b40 	vmov.f64	d7, d0
 80024a6:	eeb1 7b47 	vneg.f64	d7, d7
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <inverseKinematic+0xf10>)
 80024ac:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <inverseKinematic+0xf10>)
 80024b2:	ed93 7b00 	vldr	d7, [r3]
 80024b6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8002520 <inverseKinematic+0xee0>
 80024ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024be:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002528 <inverseKinematic+0xee8>
 80024c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <inverseKinematic+0xf10>)
 80024c8:	ed83 7b00 	vstr	d7, [r3]
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	ecbd 8b04 	vpop	{d8-d9}
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	9ba5e356 	.word	0x9ba5e356
 80024dc:	3fe020c4 	.word	0x3fe020c4
 80024e0:	24dd2f1b 	.word	0x24dd2f1b
 80024e4:	3fc58106 	.word	0x3fc58106
 80024e8:	5625749b 	.word	0x5625749b
 80024ec:	3faf09d1 	.word	0x3faf09d1
 80024f0:	1eb851ec 	.word	0x1eb851ec
 80024f4:	3fa1eb85 	.word	0x3fa1eb85
 80024f8:	70a3d70a 	.word	0x70a3d70a
 80024fc:	3fd70a3d 	.word	0x3fd70a3d
 8002500:	93d96639 	.word	0x93d96639
 8002504:	3f9ce6c0 	.word	0x3f9ce6c0
 8002508:	47ae147c 	.word	0x47ae147c
 800250c:	3fa47ae1 	.word	0x3fa47ae1
 8002510:	e8584caa 	.word	0xe8584caa
 8002514:	400bb67a 	.word	0x400bb67a
 8002518:	9999999a 	.word	0x9999999a
 800251c:	3fc99999 	.word	0x3fc99999
 8002520:	00000000 	.word	0x00000000
 8002524:	40668000 	.word	0x40668000
 8002528:	54442eea 	.word	0x54442eea
 800252c:	400921fb 	.word	0x400921fb
 8002530:	24000340 	.word	0x24000340
 8002534:	24000350 	.word	0x24000350
 8002538:	24000348 	.word	0x24000348
 800253c:	24000358 	.word	0x24000358
 8002540:	240002c0 	.word	0x240002c0
 8002544:	24000360 	.word	0x24000360
 8002548:	24000308 	.word	0x24000308
 800254c:	240003a8 	.word	0x240003a8
 8002550:	240003f0 	.word	0x240003f0

08002554 <robotInitialization>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void robotInitialization(void){
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 8002558:	481b      	ldr	r0, [pc, #108]	; (80025c8 <robotInitialization+0x74>)
 800255a:	f007 fc25 	bl	8009da8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 800255e:	481b      	ldr	r0, [pc, #108]	; (80025cc <robotInitialization+0x78>)
 8002560:	f007 fc22 	bl	8009da8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002564:	481a      	ldr	r0, [pc, #104]	; (80025d0 <robotInitialization+0x7c>)
 8002566:	f007 fc1f 	bl	8009da8 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	2110      	movs	r1, #16
 800256e:	4819      	ldr	r0, [pc, #100]	; (80025d4 <robotInitialization+0x80>)
 8002570:	f005 f832 	bl	80075d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002574:	2200      	movs	r2, #0
 8002576:	2120      	movs	r1, #32
 8002578:	4816      	ldr	r0, [pc, #88]	; (80025d4 <robotInitialization+0x80>)
 800257a:	f005 f82d 	bl	80075d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4814      	ldr	r0, [pc, #80]	; (80025d4 <robotInitialization+0x80>)
 8002584:	f005 f828 	bl	80075d8 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002588:	2032      	movs	r0, #50	; 0x32
 800258a:	f003 ff87 	bl	800649c <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002594:	4810      	ldr	r0, [pc, #64]	; (80025d8 <robotInitialization+0x84>)
 8002596:	f005 f81f 	bl	80075d8 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a0:	480d      	ldr	r0, [pc, #52]	; (80025d8 <robotInitialization+0x84>)
 80025a2:	f005 f819 	bl	80075d8 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 80025a6:	2200      	movs	r2, #0
 80025a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ac:	480a      	ldr	r0, [pc, #40]	; (80025d8 <robotInitialization+0x84>)
 80025ae:	f005 f813 	bl	80075d8 <HAL_GPIO_WritePin>
    Stop_PWM_MOTOR_1;
    Stop_PWM_MOTOR_2;
    Stop_PWM_MOTOR_3;

    */
	motor1.stepReached = false;
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <robotInitialization+0x88>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <robotInitialization+0x8c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <robotInitialization+0x90>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	765a      	strb	r2, [r3, #25]


}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	240006c8 	.word	0x240006c8
 80025cc:	24000714 	.word	0x24000714
 80025d0:	24000760 	.word	0x24000760
 80025d4:	58020c00 	.word	0x58020c00
 80025d8:	58020800 	.word	0x58020800
 80025dc:	24000360 	.word	0x24000360
 80025e0:	240003a8 	.word	0x240003a8
 80025e4:	240003f0 	.word	0x240003f0

080025e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ec:	f003 fec4 	bl	8006378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f0:	f000 fd44 	bl	800307c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f4:	f7fe fa42 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 80025f8:	f001 fac0 	bl	8003b7c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80025fc:	f003 fd1a 	bl	8006034 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002600:	f001 fc5e 	bl	8003ec0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002604:	f001 fcbe 	bl	8003f84 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002608:	f001 fd08 	bl	800401c <MX_TIM14_Init>
  MX_TIM5_Init();
 800260c:	f001 fc0a 	bl	8003e24 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002610:	f001 fd50 	bl	80040b4 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002614:	f003 fcc2 	bl	8005f9c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002618:	f003 fc74 	bl	8005f04 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800261c:	f001 fb1e 	bl	8003c5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002620:	f001 fb8e 	bl	8003d40 <MX_TIM4_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		switch (state){
 8002624:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <main+0x1b0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b04      	cmp	r3, #4
 800262a:	f200 8502 	bhi.w	8003032 <main+0xa4a>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <main+0x4c>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002649 	.word	0x08002649
 8002638:	08002957 	.word	0x08002957
 800263c:	08002755 	.word	0x08002755
 8002640:	08002679 	.word	0x08002679
 8002644:	08002b01 	.word	0x08002b01

		case INIT:

			  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 8002648:	2364      	movs	r3, #100	; 0x64
 800264a:	221c      	movs	r2, #28
 800264c:	4953      	ldr	r1, [pc, #332]	; (800279c <main+0x1b4>)
 800264e:	4854      	ldr	r0, [pc, #336]	; (80027a0 <main+0x1b8>)
 8002650:	f009 fb50 	bl	800bcf4 <HAL_UART_Transmit>
			  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002654:	2201      	movs	r2, #1
 8002656:	4953      	ldr	r1, [pc, #332]	; (80027a4 <main+0x1bc>)
 8002658:	4851      	ldr	r0, [pc, #324]	; (80027a0 <main+0x1b8>)
 800265a:	f009 fbe1 	bl	800be20 <HAL_UART_Receive_IT>
			  robotInitialization();
 800265e:	f7ff ff79 	bl	8002554 <robotInitialization>
			  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	2227      	movs	r2, #39	; 0x27
 8002666:	4950      	ldr	r1, [pc, #320]	; (80027a8 <main+0x1c0>)
 8002668:	484d      	ldr	r0, [pc, #308]	; (80027a0 <main+0x1b8>)
 800266a:	f009 fb43 	bl	800bcf4 <HAL_UART_Transmit>


			  state = READY;
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <main+0x1b0>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]

			break;
 8002674:	f000 bce7 	b.w	8003046 <main+0xa5e>

		case HOME:

			receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <main+0x1c4>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]

			homing();
 800267e:	f7fe fb4f 	bl	8000d20 <homing>

	        if(homFin){
 8002682:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <main+0x1c8>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 84d6 	beq.w	8003038 <main+0xa50>

	        	homFin = false;
 800268c:	4b48      	ldr	r3, [pc, #288]	; (80027b0 <main+0x1c8>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
	        	HAL_Delay(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f003 ff02 	bl	800649c <HAL_Delay>
	        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002698:	2006      	movs	r0, #6
 800269a:	f004 f848 	bl	800672e <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 800269e:	2007      	movs	r0, #7
 80026a0:	f004 f845 	bl	800672e <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 80026a4:	2008      	movs	r0, #8
 80026a6:	f004 f842 	bl	800672e <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 80026aa:	2009      	movs	r0, #9
 80026ac:	f004 f83f 	bl	800672e <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 80026b0:	200a      	movs	r0, #10
 80026b2:	f004 f83c 	bl	800672e <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 80026b6:	2017      	movs	r0, #23
 80026b8:	f004 f839 	bl	800672e <HAL_NVIC_EnableIRQ>
	        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 80026bc:	2028      	movs	r0, #40	; 0x28
 80026be:	f004 f836 	bl	800672e <HAL_NVIC_EnableIRQ>

	        	endStopAlarmInf=false;
 80026c2:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <main+0x1cc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
	        	endStopAlarmSup=false;
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <main+0x1d0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]


				Pini.x=0;
 80026ce:	493b      	ldr	r1, [pc, #236]	; (80027bc <main+0x1d4>)
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9c1 2300 	strd	r2, r3, [r1]
				Pini.y=0;
 80026dc:	4937      	ldr	r1, [pc, #220]	; (80027bc <main+0x1d4>)
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Pini.z =-0.5208; //antes era -0.33
 80026ea:	4934      	ldr	r1, [pc, #208]	; (80027bc <main+0x1d4>)
 80026ec:	a328      	add	r3, pc, #160	; (adr r3, 8002790 <main+0x1a8>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	e9c1 2304 	strd	r2, r3, [r1, #16]

				motor1.theta = 0.0;
 80026f6:	4932      	ldr	r1, [pc, #200]	; (80027c0 <main+0x1d8>)
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
				motor2.theta = 0.0;
 8002704:	492f      	ldr	r1, [pc, #188]	; (80027c4 <main+0x1dc>)
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9c1 2300 	strd	r2, r3, [r1]
				motor3.theta = 0.0;
 8002712:	492d      	ldr	r1, [pc, #180]	; (80027c8 <main+0x1e0>)
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9c1 2300 	strd	r2, r3, [r1]

				motor1.currentAngle = 0.0;
 8002720:	4927      	ldr	r1, [pc, #156]	; (80027c0 <main+0x1d8>)
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor2.currentAngle = 0.0;
 800272e:	4925      	ldr	r1, [pc, #148]	; (80027c4 <main+0x1dc>)
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor3.currentAngle = 0.0;
 800273c:	4922      	ldr	r1, [pc, #136]	; (80027c8 <main+0x1e0>)
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9c1 2308 	strd	r2, r3, [r1, #32]

				state = READY;
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <main+0x1b0>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]

	        }


			break;
 8002750:	f000 bc72 	b.w	8003038 <main+0xa50>

		case WORKING:

			receptionFlag = false;
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <main+0x1c4>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]

			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 800275a:	e0a6      	b.n	80028aa <main+0x2c2>

				if (motor1.stepReached) {
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <main+0x1d8>)
 800275e:	7e5b      	ldrb	r3, [r3, #25]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <main+0x18e>
					Stop_PWM_MOTOR_1;
 8002764:	2100      	movs	r1, #0
 8002766:	4819      	ldr	r0, [pc, #100]	; (80027cc <main+0x1e4>)
 8002768:	f007 fdcc 	bl	800a304 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800276c:	2100      	movs	r1, #0
 800276e:	4818      	ldr	r0, [pc, #96]	; (80027d0 <main+0x1e8>)
 8002770:	f007 febf 	bl	800a4f2 <HAL_TIM_IC_Stop>
 8002774:	e03c      	b.n	80027f0 <main+0x208>
				}else if (motor2.stepReached) {
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <main+0x1dc>)
 8002778:	7e5b      	ldrb	r3, [r3, #25]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02c      	beq.n	80027d8 <main+0x1f0>
					Stop_PWM_MOTOR_2;
 800277e:	2100      	movs	r1, #0
 8002780:	4814      	ldr	r0, [pc, #80]	; (80027d4 <main+0x1ec>)
 8002782:	f007 fdbf 	bl	800a304 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_2);
 8002786:	2104      	movs	r1, #4
 8002788:	4811      	ldr	r0, [pc, #68]	; (80027d0 <main+0x1e8>)
 800278a:	f007 feb2 	bl	800a4f2 <HAL_TIM_IC_Stop>
 800278e:	e02f      	b.n	80027f0 <main+0x208>
 8002790:	c2f837b5 	.word	0xc2f837b5
 8002794:	bfe0aa64 	.word	0xbfe0aa64
 8002798:	24000438 	.word	0x24000438
 800279c:	24000030 	.word	0x24000030
 80027a0:	24000988 	.word	0x24000988
 80027a4:	24000582 	.word	0x24000582
 80027a8:	2400004c 	.word	0x2400004c
 80027ac:	24000583 	.word	0x24000583
 80027b0:	24000439 	.word	0x24000439
 80027b4:	2400043d 	.word	0x2400043d
 80027b8:	2400043c 	.word	0x2400043c
 80027bc:	24000480 	.word	0x24000480
 80027c0:	24000360 	.word	0x24000360
 80027c4:	240003a8 	.word	0x240003a8
 80027c8:	240003f0 	.word	0x240003f0
 80027cc:	240006c8 	.word	0x240006c8
 80027d0:	24000598 	.word	0x24000598
 80027d4:	24000714 	.word	0x24000714
				}else if (motor3.stepReached){
 80027d8:	4bae      	ldr	r3, [pc, #696]	; (8002a94 <main+0x4ac>)
 80027da:	7e5b      	ldrb	r3, [r3, #25]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <main+0x208>
					Stop_PWM_MOTOR_3;
 80027e0:	2100      	movs	r1, #0
 80027e2:	48ad      	ldr	r0, [pc, #692]	; (8002a98 <main+0x4b0>)
 80027e4:	f007 fd8e 	bl	800a304 <HAL_TIM_PWM_Stop>
					HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_3);
 80027e8:	2108      	movs	r1, #8
 80027ea:	48ac      	ldr	r0, [pc, #688]	; (8002a9c <main+0x4b4>)
 80027ec:	f007 fe81 	bl	800a4f2 <HAL_TIM_IC_Stop>
				}

				motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 80027f0:	4bab      	ldr	r3, [pc, #684]	; (8002aa0 <main+0x4b8>)
 80027f2:	ed93 7b00 	vldr	d7, [r3]
 80027f6:	4bab      	ldr	r3, [pc, #684]	; (8002aa4 <main+0x4bc>)
 80027f8:	ed93 6b08 	vldr	d6, [r3, #32]
 80027fc:	4ba9      	ldr	r3, [pc, #676]	; (8002aa4 <main+0x4bc>)
 80027fe:	ed93 5b00 	vldr	d5, [r3]
 8002802:	48a9      	ldr	r0, [pc, #676]	; (8002aa8 <main+0x4c0>)
 8002804:	eeb0 2b45 	vmov.f64	d2, d5
 8002808:	eeb0 1b46 	vmov.f64	d1, d6
 800280c:	eeb0 0b47 	vmov.f64	d0, d7
 8002810:	f001 fe7a 	bl	8004508 <get_Straj>
 8002814:	eeb0 7b40 	vmov.f64	d7, d0
 8002818:	4ba2      	ldr	r3, [pc, #648]	; (8002aa4 <main+0x4bc>)
 800281a:	ed83 7b02 	vstr	d7, [r3, #8]
				motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 800281e:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <main+0x4b8>)
 8002820:	ed93 7b00 	vldr	d7, [r3]
 8002824:	4ba1      	ldr	r3, [pc, #644]	; (8002aac <main+0x4c4>)
 8002826:	ed93 6b08 	vldr	d6, [r3, #32]
 800282a:	4ba0      	ldr	r3, [pc, #640]	; (8002aac <main+0x4c4>)
 800282c:	ed93 5b00 	vldr	d5, [r3]
 8002830:	489f      	ldr	r0, [pc, #636]	; (8002ab0 <main+0x4c8>)
 8002832:	eeb0 2b45 	vmov.f64	d2, d5
 8002836:	eeb0 1b46 	vmov.f64	d1, d6
 800283a:	eeb0 0b47 	vmov.f64	d0, d7
 800283e:	f001 fe63 	bl	8004508 <get_Straj>
 8002842:	eeb0 7b40 	vmov.f64	d7, d0
 8002846:	4b99      	ldr	r3, [pc, #612]	; (8002aac <main+0x4c4>)
 8002848:	ed83 7b02 	vstr	d7, [r3, #8]
				motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 800284c:	4b94      	ldr	r3, [pc, #592]	; (8002aa0 <main+0x4b8>)
 800284e:	ed93 7b00 	vldr	d7, [r3]
 8002852:	4b90      	ldr	r3, [pc, #576]	; (8002a94 <main+0x4ac>)
 8002854:	ed93 6b08 	vldr	d6, [r3, #32]
 8002858:	4b8e      	ldr	r3, [pc, #568]	; (8002a94 <main+0x4ac>)
 800285a:	ed93 5b00 	vldr	d5, [r3]
 800285e:	4895      	ldr	r0, [pc, #596]	; (8002ab4 <main+0x4cc>)
 8002860:	eeb0 2b45 	vmov.f64	d2, d5
 8002864:	eeb0 1b46 	vmov.f64	d1, d6
 8002868:	eeb0 0b47 	vmov.f64	d0, d7
 800286c:	f001 fe4c 	bl	8004508 <get_Straj>
 8002870:	eeb0 7b40 	vmov.f64	d7, d0
 8002874:	4b87      	ldr	r3, [pc, #540]	; (8002a94 <main+0x4ac>)
 8002876:	ed83 7b02 	vstr	d7, [r3, #8]

				setProfilTimer();
 800287a:	f003 f9e9 	bl	8005c50 <setProfilTimer>


				if(startMotors){
 800287e:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <main+0x4d0>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00e      	beq.n	80028a4 <main+0x2bc>
					startMotors = false;
 8002886:	4b8c      	ldr	r3, [pc, #560]	; (8002ab8 <main+0x4d0>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
					Start_PWM_MOTOR_1;	// Activar generacion de pwm
 800288c:	2100      	movs	r1, #0
 800288e:	488b      	ldr	r0, [pc, #556]	; (8002abc <main+0x4d4>)
 8002890:	f007 fc2a 	bl	800a0e8 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_2;	// Activar generacion de pwm
 8002894:	2100      	movs	r1, #0
 8002896:	488a      	ldr	r0, [pc, #552]	; (8002ac0 <main+0x4d8>)
 8002898:	f007 fc26 	bl	800a0e8 <HAL_TIM_PWM_Start>
					Start_PWM_MOTOR_3;	// Activar generacion de pwm
 800289c:	2100      	movs	r1, #0
 800289e:	487e      	ldr	r0, [pc, #504]	; (8002a98 <main+0x4b0>)
 80028a0:	f007 fc22 	bl	800a0e8 <HAL_TIM_PWM_Start>
				}

				stopMotors = true;
 80028a4:	4b87      	ldr	r3, [pc, #540]	; (8002ac4 <main+0x4dc>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
			while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 80028aa:	4b7e      	ldr	r3, [pc, #504]	; (8002aa4 <main+0x4bc>)
 80028ac:	7e5b      	ldrb	r3, [r3, #25]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f43f af54 	beq.w	800275c <main+0x174>
 80028b4:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <main+0x4c4>)
 80028b6:	7e5b      	ldrb	r3, [r3, #25]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f43f af4f 	beq.w	800275c <main+0x174>
 80028be:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <main+0x4ac>)
 80028c0:	7e5b      	ldrb	r3, [r3, #25]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f43f af4a 	beq.w	800275c <main+0x174>

			}// End while


			if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 80028c8:	4b7e      	ldr	r3, [pc, #504]	; (8002ac4 <main+0x4dc>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d026      	beq.n	800291e <main+0x336>

				startMotors = false;
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <main+0x4d0>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80028d6:	2100      	movs	r1, #0
 80028d8:	4870      	ldr	r0, [pc, #448]	; (8002a9c <main+0x4b4>)
 80028da:	f007 fe0a 	bl	800a4f2 <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028de:	2100      	movs	r1, #0
 80028e0:	4879      	ldr	r0, [pc, #484]	; (8002ac8 <main+0x4e0>)
 80028e2:	f007 fe06 	bl	800a4f2 <HAL_TIM_IC_Stop>
				HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80028e6:	2100      	movs	r1, #0
 80028e8:	4878      	ldr	r0, [pc, #480]	; (8002acc <main+0x4e4>)
 80028ea:	f007 fe02 	bl	800a4f2 <HAL_TIM_IC_Stop>

				if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80028ee:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <main+0x4bc>)
 80028f0:	7e5b      	ldrb	r3, [r3, #25]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <main+0x316>
 80028f6:	2100      	movs	r1, #0
 80028f8:	4870      	ldr	r0, [pc, #448]	; (8002abc <main+0x4d4>)
 80028fa:	f007 fd03 	bl	800a304 <HAL_TIM_PWM_Stop>
				if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80028fe:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <main+0x4c4>)
 8002900:	7e5b      	ldrb	r3, [r3, #25]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <main+0x326>
 8002906:	2100      	movs	r1, #0
 8002908:	486d      	ldr	r0, [pc, #436]	; (8002ac0 <main+0x4d8>)
 800290a:	f007 fcfb 	bl	800a304 <HAL_TIM_PWM_Stop>
				if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 800290e:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <main+0x4ac>)
 8002910:	7e5b      	ldrb	r3, [r3, #25]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <main+0x336>
 8002916:	2100      	movs	r1, #0
 8002918:	485f      	ldr	r0, [pc, #380]	; (8002a98 <main+0x4b0>)
 800291a:	f007 fcf3 	bl	800a304 <HAL_TIM_PWM_Stop>
			}

			//Update coordinantes
			Pini.x = Pfin.x;
 800291e:	4b6c      	ldr	r3, [pc, #432]	; (8002ad0 <main+0x4e8>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	496b      	ldr	r1, [pc, #428]	; (8002ad4 <main+0x4ec>)
 8002926:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 800292a:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <main+0x4e8>)
 800292c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002930:	4968      	ldr	r1, [pc, #416]	; (8002ad4 <main+0x4ec>)
 8002932:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 8002936:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <main+0x4e8>)
 8002938:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800293c:	4965      	ldr	r1, [pc, #404]	; (8002ad4 <main+0x4ec>)
 800293e:	e9c1 2304 	strd	r2, r3, [r1, #16]

			HAL_TIM_Base_Stop_IT(&htim15);
 8002942:	4865      	ldr	r0, [pc, #404]	; (8002ad8 <main+0x4f0>)
 8002944:	f007 fb40 	bl	8009fc8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 8002948:	4864      	ldr	r0, [pc, #400]	; (8002adc <main+0x4f4>)
 800294a:	f007 fa9d 	bl	8009e88 <HAL_TIM_Base_Stop>


			state = READY;
 800294e:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <main+0x4f8>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]

			break;
 8002954:	e377      	b.n	8003046 <main+0xa5e>

		case READY:

			if (receptionFlag){
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <main+0x4fc>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 836f 	beq.w	800303e <main+0xa56>

				receptionFlag = false;
 8002960:	4b60      	ldr	r3, [pc, #384]	; (8002ae4 <main+0x4fc>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]

				startMotors = true;
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <main+0x4d0>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]

				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800296c:	2100      	movs	r1, #0
 800296e:	484b      	ldr	r0, [pc, #300]	; (8002a9c <main+0x4b4>)
 8002970:	f007 fe30 	bl	800a5d4 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002974:	2100      	movs	r1, #0
 8002976:	4854      	ldr	r0, [pc, #336]	; (8002ac8 <main+0x4e0>)
 8002978:	f007 fe2c 	bl	800a5d4 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800297c:	2100      	movs	r1, #0
 800297e:	4853      	ldr	r0, [pc, #332]	; (8002acc <main+0x4e4>)
 8002980:	f007 fe28 	bl	800a5d4 <HAL_TIM_IC_Start_IT>

				inverseKinematic(Pfin);
 8002984:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <main+0x4e8>)
 8002986:	ed93 5b00 	vldr	d5, [r3]
 800298a:	ed93 6b02 	vldr	d6, [r3, #8]
 800298e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002992:	eeb0 0b45 	vmov.f64	d0, d5
 8002996:	eeb0 1b46 	vmov.f64	d1, d6
 800299a:	eeb0 2b47 	vmov.f64	d2, d7
 800299e:	f7fe fe4f 	bl	8001640 <inverseKinematic>

				update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 80029a2:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <main+0x4bc>)
 80029a4:	ed93 7b08 	vldr	d7, [r3, #32]
 80029a8:	4b3e      	ldr	r3, [pc, #248]	; (8002aa4 <main+0x4bc>)
 80029aa:	ed93 1b00 	vldr	d1, [r3]
 80029ae:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <main+0x500>)
 80029b0:	ed93 2b00 	vldr	d2, [r3]
 80029b4:	4b4d      	ldr	r3, [pc, #308]	; (8002aec <main+0x504>)
 80029b6:	ed93 3b00 	vldr	d3, [r3]
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <main+0x508>)
 80029bc:	ed93 4b00 	vldr	d4, [r3]
 80029c0:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <main+0x50c>)
 80029c2:	ed93 5b00 	vldr	d5, [r3]
 80029c6:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <main+0x510>)
 80029c8:	ed93 6b00 	vldr	d6, [r3]
 80029cc:	4836      	ldr	r0, [pc, #216]	; (8002aa8 <main+0x4c0>)
 80029ce:	eeb0 0b47 	vmov.f64	d0, d7
 80029d2:	f002 fc55 	bl	8005280 <update_ScurveTraj>
				update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <main+0x4c4>)
 80029d8:	ed93 7b08 	vldr	d7, [r3, #32]
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <main+0x4c4>)
 80029de:	ed93 1b00 	vldr	d1, [r3]
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <main+0x500>)
 80029e4:	ed93 2b00 	vldr	d2, [r3]
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <main+0x504>)
 80029ea:	ed93 3b00 	vldr	d3, [r3]
 80029ee:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <main+0x508>)
 80029f0:	ed93 4b00 	vldr	d4, [r3]
 80029f4:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <main+0x50c>)
 80029f6:	ed93 5b00 	vldr	d5, [r3]
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <main+0x510>)
 80029fc:	ed93 6b00 	vldr	d6, [r3]
 8002a00:	482b      	ldr	r0, [pc, #172]	; (8002ab0 <main+0x4c8>)
 8002a02:	eeb0 0b47 	vmov.f64	d0, d7
 8002a06:	f002 fc3b 	bl	8005280 <update_ScurveTraj>
				update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <main+0x4ac>)
 8002a0c:	ed93 7b08 	vldr	d7, [r3, #32]
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <main+0x4ac>)
 8002a12:	ed93 1b00 	vldr	d1, [r3]
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <main+0x500>)
 8002a18:	ed93 2b00 	vldr	d2, [r3]
 8002a1c:	4b33      	ldr	r3, [pc, #204]	; (8002aec <main+0x504>)
 8002a1e:	ed93 3b00 	vldr	d3, [r3]
 8002a22:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <main+0x508>)
 8002a24:	ed93 4b00 	vldr	d4, [r3]
 8002a28:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <main+0x50c>)
 8002a2a:	ed93 5b00 	vldr	d5, [r3]
 8002a2e:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <main+0x510>)
 8002a30:	ed93 6b00 	vldr	d6, [r3]
 8002a34:	481f      	ldr	r0, [pc, #124]	; (8002ab4 <main+0x4cc>)
 8002a36:	eeb0 0b47 	vmov.f64	d0, d7
 8002a3a:	f002 fc21 	bl	8005280 <update_ScurveTraj>

				configMotor(&motor1,1);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4818      	ldr	r0, [pc, #96]	; (8002aa4 <main+0x4bc>)
 8002a42:	f000 fdf9 	bl	8003638 <configMotor>
				configMotor(&motor2,2);
 8002a46:	2102      	movs	r1, #2
 8002a48:	4818      	ldr	r0, [pc, #96]	; (8002aac <main+0x4c4>)
 8002a4a:	f000 fdf5 	bl	8003638 <configMotor>
				configMotor(&motor3,3);
 8002a4e:	2103      	movs	r1, #3
 8002a50:	4810      	ldr	r0, [pc, #64]	; (8002a94 <main+0x4ac>)
 8002a52:	f000 fdf1 	bl	8003638 <configMotor>

				timeFlag = false;
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <main+0x514>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]

				motor1.pMotor = 0;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <main+0x4bc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
				motor2.pMotor = 0;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <main+0x4c4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
				motor3.pMotor = 0;
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <main+0x4ac>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40

				motor1.stepReached = false;
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <main+0x4bc>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	765a      	strb	r2, [r3, #25]
				motor2.stepReached = false;
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <main+0x4c4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	765a      	strb	r2, [r3, #25]
				motor3.stepReached = false;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <main+0x4ac>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	765a      	strb	r2, [r3, #25]

				HAL_TIM_Base_Start(&htim5);
 8002a80:	4816      	ldr	r0, [pc, #88]	; (8002adc <main+0x4f4>)
 8002a82:	f007 f991 	bl	8009da8 <HAL_TIM_Base_Start>
				HAL_TIM_Base_Start_IT(&htim15);
 8002a86:	4814      	ldr	r0, [pc, #80]	; (8002ad8 <main+0x4f0>)
 8002a88:	f007 fa26 	bl	8009ed8 <HAL_TIM_Base_Start_IT>




				state = WORKING;
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <main+0x4f8>)
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a92:	e2d4      	b.n	800303e <main+0xa56>
 8002a94:	240003f0 	.word	0x240003f0
 8002a98:	24000760 	.word	0x24000760
 8002a9c:	24000598 	.word	0x24000598
 8002aa0:	24000558 	.word	0x24000558
 8002aa4:	24000360 	.word	0x24000360
 8002aa8:	240004b0 	.word	0x240004b0
 8002aac:	240003a8 	.word	0x240003a8
 8002ab0:	240004e8 	.word	0x240004e8
 8002ab4:	24000520 	.word	0x24000520
 8002ab8:	2400043a 	.word	0x2400043a
 8002abc:	240006c8 	.word	0x240006c8
 8002ac0:	24000714 	.word	0x24000714
 8002ac4:	2400043b 	.word	0x2400043b
 8002ac8:	240005e4 	.word	0x240005e4
 8002acc:	24000630 	.word	0x24000630
 8002ad0:	24000498 	.word	0x24000498
 8002ad4:	24000480 	.word	0x24000480
 8002ad8:	240007ac 	.word	0x240007ac
 8002adc:	2400067c 	.word	0x2400067c
 8002ae0:	24000438 	.word	0x24000438
 8002ae4:	24000583 	.word	0x24000583
 8002ae8:	24000018 	.word	0x24000018
 8002aec:	24000470 	.word	0x24000470
 8002af0:	24000010 	.word	0x24000010
 8002af4:	24000020 	.word	0x24000020
 8002af8:	24000008 	.word	0x24000008
 8002afc:	24000591 	.word	0x24000591

		case FAULT:


			__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 8002b00:	4b95      	ldr	r3, [pc, #596]	; (8002d58 <main+0x770>)
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b14:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8002d40 <main+0x758>
 8002b18:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b1c:	4b8f      	ldr	r3, [pc, #572]	; (8002d5c <main+0x774>)
 8002b1e:	ed93 7b00 	vldr	d7, [r3]
 8002b22:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8002d48 <main+0x760>
 8002b26:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b2a:	ed9f 4b89 	vldr	d4, [pc, #548]	; 8002d50 <main+0x768>
 8002b2e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002b32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b36:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <main+0x778>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b46:	ee17 2a90 	vmov	r2, s15
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b4c:	4b82      	ldr	r3, [pc, #520]	; (8002d58 <main+0x770>)
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b60:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8002d40 <main+0x758>
 8002b64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002b68:	4b7c      	ldr	r3, [pc, #496]	; (8002d5c <main+0x774>)
 8002b6a:	ed93 7b00 	vldr	d7, [r3]
 8002b6e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8002d48 <main+0x760>
 8002b72:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b76:	ed9f 4b76 	vldr	d4, [pc, #472]	; 8002d50 <main+0x768>
 8002b7a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002b7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b8e:	ee17 2a90 	vmov	r2, s15
 8002b92:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <main+0x778>)
 8002b94:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm_fault));
 8002b96:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <main+0x770>)
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ba2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002ba6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002baa:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8002d40 <main+0x758>
 8002bae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <main+0x774>)
 8002bb4:	ed93 7b00 	vldr	d7, [r3]
 8002bb8:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8002d48 <main+0x760>
 8002bbc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002bc0:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8002d50 <main+0x768>
 8002bc4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002bc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bd4:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <main+0x77c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002bdc:	ee17 2a90 	vmov	r2, s15
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <main+0x770>)
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002bf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bf6:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8002d40 <main+0x758>
 8002bfa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002bfe:	4b57      	ldr	r3, [pc, #348]	; (8002d5c <main+0x774>)
 8002c00:	ed93 7b00 	vldr	d7, [r3]
 8002c04:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8002d48 <main+0x760>
 8002c08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002c0c:	ed9f 4b50 	vldr	d4, [pc, #320]	; 8002d50 <main+0x768>
 8002c10:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002c14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c24:	ee17 2a90 	vmov	r2, s15
 8002c28:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <main+0x77c>)
 8002c2a:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm_fault));
 8002c2c:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <main+0x770>)
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	ee07 3a90 	vmov	s15, r3
 8002c34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c40:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8002d40 <main+0x758>
 8002c44:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002c48:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <main+0x774>)
 8002c4a:	ed93 7b00 	vldr	d7, [r3]
 8002c4e:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8002d48 <main+0x760>
 8002c52:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002c56:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 8002d50 <main+0x768>
 8002c5a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002c5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <main+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c72:	ee17 2a90 	vmov	r2, s15
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c78:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <main+0x770>)
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c8c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8002d40 <main+0x758>
 8002c90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002c94:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <main+0x774>)
 8002c96:	ed93 7b00 	vldr	d7, [r3]
 8002c9a:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8002d48 <main+0x760>
 8002c9e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002ca2:	ed9f 4b2b 	vldr	d4, [pc, #172]	; 8002d50 <main+0x768>
 8002ca6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002caa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002cb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cba:	ee17 2a90 	vmov	r2, s15
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <main+0x780>)
 8002cc0:	60da      	str	r2, [r3, #12]



			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <main+0x770>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002cce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002cd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <main+0x770>)
 8002cd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cdc:	ee17 2a90 	vmov	r2, s15
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <main+0x784>)
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002cee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002cf2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <main+0x784>)
 8002cf8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cfc:	ee17 2a90 	vmov	r2, s15
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <main+0x788>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002d0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002d12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <main+0x788>)
 8002d18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d1c:	ee17 2a90 	vmov	r2, s15
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34

			HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002d22:	2100      	movs	r1, #0
 8002d24:	4813      	ldr	r0, [pc, #76]	; (8002d74 <main+0x78c>)
 8002d26:	f007 fbe4 	bl	800a4f2 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4812      	ldr	r0, [pc, #72]	; (8002d78 <main+0x790>)
 8002d2e:	f007 fbe0 	bl	800a4f2 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002d32:	2100      	movs	r1, #0
 8002d34:	4811      	ldr	r0, [pc, #68]	; (8002d7c <main+0x794>)
 8002d36:	f007 fbdc 	bl	800a4f2 <HAL_TIM_IC_Stop>




			while((endStopAlarmSup || endStopAlarmInf) && continuar){
 8002d3a:	e16c      	b.n	8003016 <main+0xa2e>
 8002d3c:	f3af 8000 	nop.w
 8002d40:	00000000 	.word	0x00000000
 8002d44:	418e8480 	.word	0x418e8480
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	40bf4000 	.word	0x40bf4000
 8002d50:	00000000 	.word	0x00000000
 8002d54:	404e0000 	.word	0x404e0000
 8002d58:	40001800 	.word	0x40001800
 8002d5c:	24000028 	.word	0x24000028
 8002d60:	240006c8 	.word	0x240006c8
 8002d64:	24000714 	.word	0x24000714
 8002d68:	24000760 	.word	0x24000760
 8002d6c:	40001c00 	.word	0x40001c00
 8002d70:	40002000 	.word	0x40002000
 8002d74:	24000598 	.word	0x24000598
 8002d78:	240005e4 	.word	0x240005e4
 8002d7c:	24000630 	.word	0x24000630

				 HAL_UART_Transmit(&huart3,(uint8_t*) "EndStopAlarm\r\n", 16, 100);
 8002d80:	2364      	movs	r3, #100	; 0x64
 8002d82:	2210      	movs	r2, #16
 8002d84:	49b1      	ldr	r1, [pc, #708]	; (800304c <main+0xa64>)
 8002d86:	48b2      	ldr	r0, [pc, #712]	; (8003050 <main+0xa68>)
 8002d88:	f008 ffb4 	bl	800bcf4 <HAL_UART_Transmit>

				 if (ES1i_PRESSED){
 8002d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d90:	48b0      	ldr	r0, [pc, #704]	; (8003054 <main+0xa6c>)
 8002d92:	f004 fc09 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d11e      	bne.n	8002dda <main+0x7f2>
					 HAL_Delay(10);
 8002d9c:	200a      	movs	r0, #10
 8002d9e:	f003 fb7d 	bl	800649c <HAL_Delay>
					 if (ES1i_PRESSED){
 8002da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da6:	48ab      	ldr	r0, [pc, #684]	; (8003054 <main+0xa6c>)
 8002da8:	f004 fbfe 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d113      	bne.n	8002dda <main+0x7f2>
						 positive_Dir_MOTOR_1;
 8002db2:	2200      	movs	r2, #0
 8002db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002db8:	48a7      	ldr	r0, [pc, #668]	; (8003058 <main+0xa70>)
 8002dba:	f004 fc0d 	bl	80075d8 <HAL_GPIO_WritePin>
						 HAL_Delay(0.5); 							//delay cambio de dir
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f003 fb6c 	bl	800649c <HAL_Delay>
						 Start_PWM_MOTOR_1;
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	48a5      	ldr	r0, [pc, #660]	; (800305c <main+0xa74>)
 8002dc8:	f007 f98e 	bl	800a0e8 <HAL_TIM_PWM_Start>
						 HAL_Delay(200);
 8002dcc:	20c8      	movs	r0, #200	; 0xc8
 8002dce:	f003 fb65 	bl	800649c <HAL_Delay>
						 Stop_PWM_MOTOR_1;
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	48a1      	ldr	r0, [pc, #644]	; (800305c <main+0xa74>)
 8002dd6:	f007 fa95 	bl	800a304 <HAL_TIM_PWM_Stop>
					 }
				 }
				 if (ES1s_PRESSED){
 8002dda:	2101      	movs	r1, #1
 8002ddc:	48a0      	ldr	r0, [pc, #640]	; (8003060 <main+0xa78>)
 8002dde:	f004 fbe3 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11d      	bne.n	8002e24 <main+0x83c>
					 HAL_Delay(10);
 8002de8:	200a      	movs	r0, #10
 8002dea:	f003 fb57 	bl	800649c <HAL_Delay>
					 if (ES1s_PRESSED){
 8002dee:	2101      	movs	r1, #1
 8002df0:	489b      	ldr	r0, [pc, #620]	; (8003060 <main+0xa78>)
 8002df2:	f004 fbd9 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d113      	bne.n	8002e24 <main+0x83c>
						 negative_Dir_MOTOR_1;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e02:	4895      	ldr	r0, [pc, #596]	; (8003058 <main+0xa70>)
 8002e04:	f004 fbe8 	bl	80075d8 <HAL_GPIO_WritePin>
						 HAL_Delay(0.5); 							//delay cambio de dir
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f003 fb47 	bl	800649c <HAL_Delay>
						 Start_PWM_MOTOR_1;
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4892      	ldr	r0, [pc, #584]	; (800305c <main+0xa74>)
 8002e12:	f007 f969 	bl	800a0e8 <HAL_TIM_PWM_Start>
						 HAL_Delay(200);
 8002e16:	20c8      	movs	r0, #200	; 0xc8
 8002e18:	f003 fb40 	bl	800649c <HAL_Delay>
						 Stop_PWM_MOTOR_1;
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	488f      	ldr	r0, [pc, #572]	; (800305c <main+0xa74>)
 8002e20:	f007 fa70 	bl	800a304 <HAL_TIM_PWM_Stop>
					 }
				 }


				 if (ES2i_PRESSED){
 8002e24:	2108      	movs	r1, #8
 8002e26:	488e      	ldr	r0, [pc, #568]	; (8003060 <main+0xa78>)
 8002e28:	f004 fbbe 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11d      	bne.n	8002e6e <main+0x886>
					 HAL_Delay(30);
 8002e32:	201e      	movs	r0, #30
 8002e34:	f003 fb32 	bl	800649c <HAL_Delay>
					 if (ES2i_PRESSED){
 8002e38:	2108      	movs	r1, #8
 8002e3a:	4889      	ldr	r0, [pc, #548]	; (8003060 <main+0xa78>)
 8002e3c:	f004 fbb4 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d113      	bne.n	8002e6e <main+0x886>
						 positive_Dir_MOTOR_2;
 8002e46:	2200      	movs	r2, #0
 8002e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e4c:	4882      	ldr	r0, [pc, #520]	; (8003058 <main+0xa70>)
 8002e4e:	f004 fbc3 	bl	80075d8 <HAL_GPIO_WritePin>
						 HAL_Delay(0.5); 							//delay cambio de dir
 8002e52:	2000      	movs	r0, #0
 8002e54:	f003 fb22 	bl	800649c <HAL_Delay>
						 Start_PWM_MOTOR_2;
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4882      	ldr	r0, [pc, #520]	; (8003064 <main+0xa7c>)
 8002e5c:	f007 f944 	bl	800a0e8 <HAL_TIM_PWM_Start>
						 HAL_Delay(200);
 8002e60:	20c8      	movs	r0, #200	; 0xc8
 8002e62:	f003 fb1b 	bl	800649c <HAL_Delay>
						 Stop_PWM_MOTOR_2;
 8002e66:	2100      	movs	r1, #0
 8002e68:	487e      	ldr	r0, [pc, #504]	; (8003064 <main+0xa7c>)
 8002e6a:	f007 fa4b 	bl	800a304 <HAL_TIM_PWM_Stop>
					 }
				 }
				 if (ES2s_PRESSED){
 8002e6e:	2104      	movs	r1, #4
 8002e70:	487b      	ldr	r0, [pc, #492]	; (8003060 <main+0xa78>)
 8002e72:	f004 fb99 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <main+0x8d0>
					 HAL_Delay(10);
 8002e7c:	200a      	movs	r0, #10
 8002e7e:	f003 fb0d 	bl	800649c <HAL_Delay>
					 if (ES2s_PRESSED){
 8002e82:	2104      	movs	r1, #4
 8002e84:	4876      	ldr	r0, [pc, #472]	; (8003060 <main+0xa78>)
 8002e86:	f004 fb8f 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d113      	bne.n	8002eb8 <main+0x8d0>
						 negative_Dir_MOTOR_2;
 8002e90:	2201      	movs	r2, #1
 8002e92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e96:	4870      	ldr	r0, [pc, #448]	; (8003058 <main+0xa70>)
 8002e98:	f004 fb9e 	bl	80075d8 <HAL_GPIO_WritePin>
						 HAL_Delay(0.5); 							//delay cambio de dir
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f003 fafd 	bl	800649c <HAL_Delay>
						 Start_PWM_MOTOR_2;
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	486f      	ldr	r0, [pc, #444]	; (8003064 <main+0xa7c>)
 8002ea6:	f007 f91f 	bl	800a0e8 <HAL_TIM_PWM_Start>
						 HAL_Delay(200);
 8002eaa:	20c8      	movs	r0, #200	; 0xc8
 8002eac:	f003 faf6 	bl	800649c <HAL_Delay>
						 Stop_PWM_MOTOR_2;
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	486c      	ldr	r0, [pc, #432]	; (8003064 <main+0xa7c>)
 8002eb4:	f007 fa26 	bl	800a304 <HAL_TIM_PWM_Stop>
					 }
				 }
				 if (ES3i_PRESSED){
 8002eb8:	2120      	movs	r1, #32
 8002eba:	4869      	ldr	r0, [pc, #420]	; (8003060 <main+0xa78>)
 8002ebc:	f004 fb74 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <main+0x91a>
					 HAL_Delay(10);
 8002ec6:	200a      	movs	r0, #10
 8002ec8:	f003 fae8 	bl	800649c <HAL_Delay>
					 if (ES3i_PRESSED){
 8002ecc:	2120      	movs	r1, #32
 8002ece:	4864      	ldr	r0, [pc, #400]	; (8003060 <main+0xa78>)
 8002ed0:	f004 fb6a 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d113      	bne.n	8002f02 <main+0x91a>
						 positive_Dir_MOTOR_3;
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee0:	485d      	ldr	r0, [pc, #372]	; (8003058 <main+0xa70>)
 8002ee2:	f004 fb79 	bl	80075d8 <HAL_GPIO_WritePin>
						 HAL_Delay(0.5); 							//delay cambio de dir
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f003 fad8 	bl	800649c <HAL_Delay>
						 Start_PWM_MOTOR_3;
 8002eec:	2100      	movs	r1, #0
 8002eee:	485e      	ldr	r0, [pc, #376]	; (8003068 <main+0xa80>)
 8002ef0:	f007 f8fa 	bl	800a0e8 <HAL_TIM_PWM_Start>
						 HAL_Delay(200);
 8002ef4:	20c8      	movs	r0, #200	; 0xc8
 8002ef6:	f003 fad1 	bl	800649c <HAL_Delay>
						 Stop_PWM_MOTOR_3;
 8002efa:	2100      	movs	r1, #0
 8002efc:	485a      	ldr	r0, [pc, #360]	; (8003068 <main+0xa80>)
 8002efe:	f007 fa01 	bl	800a304 <HAL_TIM_PWM_Stop>
					 }
				 }
				 if (ES3s_PRESSED){
 8002f02:	2110      	movs	r1, #16
 8002f04:	4856      	ldr	r0, [pc, #344]	; (8003060 <main+0xa78>)
 8002f06:	f004 fb4f 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11d      	bne.n	8002f4c <main+0x964>
					 HAL_Delay(10);
 8002f10:	200a      	movs	r0, #10
 8002f12:	f003 fac3 	bl	800649c <HAL_Delay>
					 if (ES3s_PRESSED){
 8002f16:	2110      	movs	r1, #16
 8002f18:	4851      	ldr	r0, [pc, #324]	; (8003060 <main+0xa78>)
 8002f1a:	f004 fb45 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d113      	bne.n	8002f4c <main+0x964>
						 negative_Dir_MOTOR_3;
 8002f24:	2201      	movs	r2, #1
 8002f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f2a:	484b      	ldr	r0, [pc, #300]	; (8003058 <main+0xa70>)
 8002f2c:	f004 fb54 	bl	80075d8 <HAL_GPIO_WritePin>
						 HAL_Delay(0.5); 							//delay cambio de dir
 8002f30:	2000      	movs	r0, #0
 8002f32:	f003 fab3 	bl	800649c <HAL_Delay>
						 Start_PWM_MOTOR_3;
 8002f36:	2100      	movs	r1, #0
 8002f38:	484b      	ldr	r0, [pc, #300]	; (8003068 <main+0xa80>)
 8002f3a:	f007 f8d5 	bl	800a0e8 <HAL_TIM_PWM_Start>
						 HAL_Delay(200);
 8002f3e:	20c8      	movs	r0, #200	; 0xc8
 8002f40:	f003 faac 	bl	800649c <HAL_Delay>
						 Stop_PWM_MOTOR_3;
 8002f44:	2100      	movs	r1, #0
 8002f46:	4848      	ldr	r0, [pc, #288]	; (8003068 <main+0xa80>)
 8002f48:	f007 f9dc 	bl	800a304 <HAL_TIM_PWM_Stop>
					 }
				 }


				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4844      	ldr	r0, [pc, #272]	; (8003060 <main+0xa78>)
 8002f50:	f004 fb2a 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d05d      	beq.n	8003016 <main+0xa2e>
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	4840      	ldr	r0, [pc, #256]	; (8003060 <main+0xa78>)
 8002f5e:	f004 fb23 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d056      	beq.n	8003016 <main+0xa2e>
 8002f68:	2110      	movs	r1, #16
 8002f6a:	483d      	ldr	r0, [pc, #244]	; (8003060 <main+0xa78>)
 8002f6c:	f004 fb1c 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d04f      	beq.n	8003016 <main+0xa2e>
 8002f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f7a:	4836      	ldr	r0, [pc, #216]	; (8003054 <main+0xa6c>)
 8002f7c:	f004 fb14 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d047      	beq.n	8003016 <main+0xa2e>
 8002f86:	2108      	movs	r1, #8
 8002f88:	4835      	ldr	r0, [pc, #212]	; (8003060 <main+0xa78>)
 8002f8a:	f004 fb0d 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d040      	beq.n	8003016 <main+0xa2e>
 8002f94:	2120      	movs	r1, #32
 8002f96:	4832      	ldr	r0, [pc, #200]	; (8003060 <main+0xa78>)
 8002f98:	f004 fb06 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d039      	beq.n	8003016 <main+0xa2e>
					 HAL_Delay(10);
 8002fa2:	200a      	movs	r0, #10
 8002fa4:	f003 fa7a 	bl	800649c <HAL_Delay>
					 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8002fa8:	2101      	movs	r1, #1
 8002faa:	482d      	ldr	r0, [pc, #180]	; (8003060 <main+0xa78>)
 8002fac:	f004 fafc 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d02f      	beq.n	8003016 <main+0xa2e>
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	4829      	ldr	r0, [pc, #164]	; (8003060 <main+0xa78>)
 8002fba:	f004 faf5 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d028      	beq.n	8003016 <main+0xa2e>
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	4826      	ldr	r0, [pc, #152]	; (8003060 <main+0xa78>)
 8002fc8:	f004 faee 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d021      	beq.n	8003016 <main+0xa2e>
 8002fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fd6:	481f      	ldr	r0, [pc, #124]	; (8003054 <main+0xa6c>)
 8002fd8:	f004 fae6 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d019      	beq.n	8003016 <main+0xa2e>
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	481e      	ldr	r0, [pc, #120]	; (8003060 <main+0xa78>)
 8002fe6:	f004 fadf 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <main+0xa2e>
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	481b      	ldr	r0, [pc, #108]	; (8003060 <main+0xa78>)
 8002ff4:	f004 fad8 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <main+0xa2e>
						 endStopAlarmSup = false;
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <main+0xa84>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
						 endStopAlarmInf = false;
 8003004:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <main+0xa88>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
						 state = READY;
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <main+0xa8c>)
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
						 continuar = false;
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <main+0xa90>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
			while((endStopAlarmSup || endStopAlarmInf) && continuar){
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <main+0xa84>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <main+0xa3e>
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <main+0xa88>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <main+0xa5c>
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <main+0xa90>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f47f aea8 	bne.w	8002d80 <main+0x798>
//				continuar = false;
//				state = READY;
//			}


			break;
 8003030:	e008      	b.n	8003044 <main+0xa5c>

		default:break;
 8003032:	bf00      	nop
 8003034:	f7ff baf6 	b.w	8002624 <main+0x3c>
			break;
 8003038:	bf00      	nop
 800303a:	f7ff baf3 	b.w	8002624 <main+0x3c>
			break;
 800303e:	bf00      	nop
 8003040:	f7ff baf0 	b.w	8002624 <main+0x3c>
			break;
 8003044:	bf00      	nop
		switch (state){
 8003046:	f7ff baed 	b.w	8002624 <main+0x3c>
 800304a:	bf00      	nop
 800304c:	08011958 	.word	0x08011958
 8003050:	24000988 	.word	0x24000988
 8003054:	58021800 	.word	0x58021800
 8003058:	58020800 	.word	0x58020800
 800305c:	240006c8 	.word	0x240006c8
 8003060:	58021000 	.word	0x58021000
 8003064:	24000714 	.word	0x24000714
 8003068:	24000760 	.word	0x24000760
 800306c:	2400043c 	.word	0x2400043c
 8003070:	2400043d 	.word	0x2400043d
 8003074:	24000438 	.word	0x24000438
 8003078:	2400043e 	.word	0x2400043e

0800307c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b09c      	sub	sp, #112	; 0x70
 8003080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003086:	224c      	movs	r2, #76	; 0x4c
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f00b f96a 	bl	800e364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	2220      	movs	r2, #32
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f00b f964 	bl	800e364 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800309c:	2002      	movs	r0, #2
 800309e:	f004 facf 	bl	8007640 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030a2:	2300      	movs	r3, #0
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4b32      	ldr	r3, [pc, #200]	; (8003170 <SystemClock_Config+0xf4>)
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	4a31      	ldr	r2, [pc, #196]	; (8003170 <SystemClock_Config+0xf4>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030b2:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <SystemClock_Config+0xf4>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <SystemClock_Config+0xf8>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030c4:	4a2b      	ldr	r2, [pc, #172]	; (8003174 <SystemClock_Config+0xf8>)
 80030c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ca:	6193      	str	r3, [r2, #24]
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <SystemClock_Config+0xf8>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030d8:	bf00      	nop
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <SystemClock_Config+0xf8>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e6:	d1f8      	bne.n	80030da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030e8:	2302      	movs	r3, #2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f4:	2302      	movs	r3, #2
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030fc:	2304      	movs	r3, #4
 80030fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003100:	2310      	movs	r3, #16
 8003102:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003104:	2302      	movs	r3, #2
 8003106:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003108:	2302      	movs	r3, #2
 800310a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800310c:	2302      	movs	r3, #2
 800310e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003110:	230c      	movs	r3, #12
 8003112:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003114:	2300      	movs	r3, #0
 8003116:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003120:	4618      	mov	r0, r3
 8003122:	f004 fac7 	bl	80076b4 <HAL_RCC_OscConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800312c:	f000 fa7c 	bl	8003628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003130:	233f      	movs	r3, #63	; 0x3f
 8003132:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003134:	2303      	movs	r3, #3
 8003136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800313c:	2308      	movs	r3, #8
 800313e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003144:	2340      	movs	r3, #64	; 0x40
 8003146:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800314c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f004 feda 	bl	8007f10 <HAL_RCC_ClockConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003162:	f000 fa61 	bl	8003628 <Error_Handler>
  }
}
 8003166:	bf00      	nop
 8003168:	3770      	adds	r7, #112	; 0x70
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58000400 	.word	0x58000400
 8003174:	58024800 	.word	0x58024800

08003178 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]


	switch( GPIO_Pin){
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	f000 811a 	beq.w	80033c0 <HAL_GPIO_EXTI_Callback+0x248>
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003190:	f300 8120 	bgt.w	80033d4 <HAL_GPIO_EXTI_Callback+0x25c>
 8003194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003198:	f000 8108 	beq.w	80033ac <HAL_GPIO_EXTI_Callback+0x234>
 800319c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a0:	f300 8118 	bgt.w	80033d4 <HAL_GPIO_EXTI_Callback+0x25c>
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a8:	f000 80f2 	beq.w	8003390 <HAL_GPIO_EXTI_Callback+0x218>
 80031ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b0:	f300 8110 	bgt.w	80033d4 <HAL_GPIO_EXTI_Callback+0x25c>
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d054      	beq.n	8003264 <HAL_GPIO_EXTI_Callback+0xec>
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	f300 8109 	bgt.w	80033d4 <HAL_GPIO_EXTI_Callback+0x25c>
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	dc4a      	bgt.n	800325c <HAL_GPIO_EXTI_Callback+0xe4>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f340 8104 	ble.w	80033d4 <HAL_GPIO_EXTI_Callback+0x25c>
 80031cc:	3b01      	subs	r3, #1
 80031ce:	2b1f      	cmp	r3, #31
 80031d0:	f200 8100 	bhi.w	80033d4 <HAL_GPIO_EXTI_Callback+0x25c>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_GPIO_EXTI_Callback+0x64>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003297 	.word	0x08003297
 80031e0:	080033d5 	.word	0x080033d5
 80031e4:	080033d5 	.word	0x080033d5
 80031e8:	080032fb 	.word	0x080032fb
 80031ec:	080033d5 	.word	0x080033d5
 80031f0:	080033d5 	.word	0x080033d5
 80031f4:	080033d5 	.word	0x080033d5
 80031f8:	080032c9 	.word	0x080032c9
 80031fc:	080033d5 	.word	0x080033d5
 8003200:	080033d5 	.word	0x080033d5
 8003204:	080033d5 	.word	0x080033d5
 8003208:	080033d5 	.word	0x080033d5
 800320c:	080033d5 	.word	0x080033d5
 8003210:	080033d5 	.word	0x080033d5
 8003214:	080033d5 	.word	0x080033d5
 8003218:	0800335f 	.word	0x0800335f
 800321c:	080033d5 	.word	0x080033d5
 8003220:	080033d5 	.word	0x080033d5
 8003224:	080033d5 	.word	0x080033d5
 8003228:	080033d5 	.word	0x080033d5
 800322c:	080033d5 	.word	0x080033d5
 8003230:	080033d5 	.word	0x080033d5
 8003234:	080033d5 	.word	0x080033d5
 8003238:	080033d5 	.word	0x080033d5
 800323c:	080033d5 	.word	0x080033d5
 8003240:	080033d5 	.word	0x080033d5
 8003244:	080033d5 	.word	0x080033d5
 8003248:	080033d5 	.word	0x080033d5
 800324c:	080033d5 	.word	0x080033d5
 8003250:	080033d5 	.word	0x080033d5
 8003254:	080033d5 	.word	0x080033d5
 8003258:	0800332d 	.word	0x0800332d
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	f000 809b 	beq.w	8003398 <HAL_GPIO_EXTI_Callback+0x220>
			 faultDrivers = true;
			 state = FAULT;
			 break;


		 default: break;
 8003262:	e0b7      	b.n	80033d4 <HAL_GPIO_EXTI_Callback+0x25c>
			 Stop_PWM_MOTOR_1;
 8003264:	2100      	movs	r1, #0
 8003266:	485e      	ldr	r0, [pc, #376]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x268>)
 8003268:	f007 f84c 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800326c:	2100      	movs	r1, #0
 800326e:	485d      	ldr	r0, [pc, #372]	; (80033e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003270:	f007 f848 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003274:	2100      	movs	r1, #0
 8003276:	485c      	ldr	r0, [pc, #368]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x270>)
 8003278:	f007 f844 	bl	800a304 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim15);
 800327c:	485b      	ldr	r0, [pc, #364]	; (80033ec <HAL_GPIO_EXTI_Callback+0x274>)
 800327e:	f006 fea3 	bl	8009fc8 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8003282:	485b      	ldr	r0, [pc, #364]	; (80033f0 <HAL_GPIO_EXTI_Callback+0x278>)
 8003284:	f006 fe00 	bl	8009e88 <HAL_TIM_Base_Stop>
			 endStopAlarmInf = true;
 8003288:	4b5a      	ldr	r3, [pc, #360]	; (80033f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 8003290:	2204      	movs	r2, #4
 8003292:	701a      	strb	r2, [r3, #0]
			 break;
 8003294:	e09f      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 Stop_PWM_MOTOR_1;
 8003296:	2100      	movs	r1, #0
 8003298:	4851      	ldr	r0, [pc, #324]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x268>)
 800329a:	f007 f833 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800329e:	2100      	movs	r1, #0
 80032a0:	4850      	ldr	r0, [pc, #320]	; (80033e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80032a2:	f007 f82f 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80032a6:	2100      	movs	r1, #0
 80032a8:	484f      	ldr	r0, [pc, #316]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x270>)
 80032aa:	f007 f82b 	bl	800a304 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim15);
 80032ae:	484f      	ldr	r0, [pc, #316]	; (80033ec <HAL_GPIO_EXTI_Callback+0x274>)
 80032b0:	f006 fe8a 	bl	8009fc8 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80032b4:	484e      	ldr	r0, [pc, #312]	; (80033f0 <HAL_GPIO_EXTI_Callback+0x278>)
 80032b6:	f006 fde7 	bl	8009e88 <HAL_TIM_Base_Stop>
			 endStopAlarmSup = true;
 80032ba:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_GPIO_EXTI_Callback+0x284>)
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80032c0:	4b4d      	ldr	r3, [pc, #308]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 80032c2:	2204      	movs	r2, #4
 80032c4:	701a      	strb	r2, [r3, #0]
			 break;
 80032c6:	e086      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 Stop_PWM_MOTOR_1;
 80032c8:	2100      	movs	r1, #0
 80032ca:	4845      	ldr	r0, [pc, #276]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x268>)
 80032cc:	f007 f81a 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80032d0:	2100      	movs	r1, #0
 80032d2:	4844      	ldr	r0, [pc, #272]	; (80033e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80032d4:	f007 f816 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80032d8:	2100      	movs	r1, #0
 80032da:	4843      	ldr	r0, [pc, #268]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x270>)
 80032dc:	f007 f812 	bl	800a304 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim15);
 80032e0:	4842      	ldr	r0, [pc, #264]	; (80033ec <HAL_GPIO_EXTI_Callback+0x274>)
 80032e2:	f006 fe71 	bl	8009fc8 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80032e6:	4842      	ldr	r0, [pc, #264]	; (80033f0 <HAL_GPIO_EXTI_Callback+0x278>)
 80032e8:	f006 fdce 	bl	8009e88 <HAL_TIM_Base_Stop>
			 endStopAlarmInf = true;
 80032ec:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80032f2:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 80032f4:	2204      	movs	r2, #4
 80032f6:	701a      	strb	r2, [r3, #0]
			 break;
 80032f8:	e06d      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 Stop_PWM_MOTOR_1;
 80032fa:	2100      	movs	r1, #0
 80032fc:	4838      	ldr	r0, [pc, #224]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x268>)
 80032fe:	f007 f801 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003302:	2100      	movs	r1, #0
 8003304:	4837      	ldr	r0, [pc, #220]	; (80033e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003306:	f006 fffd 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800330a:	2100      	movs	r1, #0
 800330c:	4836      	ldr	r0, [pc, #216]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x270>)
 800330e:	f006 fff9 	bl	800a304 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim15);
 8003312:	4836      	ldr	r0, [pc, #216]	; (80033ec <HAL_GPIO_EXTI_Callback+0x274>)
 8003314:	f006 fe58 	bl	8009fc8 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8003318:	4835      	ldr	r0, [pc, #212]	; (80033f0 <HAL_GPIO_EXTI_Callback+0x278>)
 800331a:	f006 fdb5 	bl	8009e88 <HAL_TIM_Base_Stop>
			 endStopAlarmSup = true;
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_GPIO_EXTI_Callback+0x284>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 8003326:	2204      	movs	r2, #4
 8003328:	701a      	strb	r2, [r3, #0]
			 break;
 800332a:	e054      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 Stop_PWM_MOTOR_1;
 800332c:	2100      	movs	r1, #0
 800332e:	482c      	ldr	r0, [pc, #176]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x268>)
 8003330:	f006 ffe8 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003334:	2100      	movs	r1, #0
 8003336:	482b      	ldr	r0, [pc, #172]	; (80033e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003338:	f006 ffe4 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800333c:	2100      	movs	r1, #0
 800333e:	482a      	ldr	r0, [pc, #168]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x270>)
 8003340:	f006 ffe0 	bl	800a304 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim15);
 8003344:	4829      	ldr	r0, [pc, #164]	; (80033ec <HAL_GPIO_EXTI_Callback+0x274>)
 8003346:	f006 fe3f 	bl	8009fc8 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800334a:	4829      	ldr	r0, [pc, #164]	; (80033f0 <HAL_GPIO_EXTI_Callback+0x278>)
 800334c:	f006 fd9c 	bl	8009e88 <HAL_TIM_Base_Stop>
			 endStopAlarmInf = true;
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8003356:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 8003358:	2204      	movs	r2, #4
 800335a:	701a      	strb	r2, [r3, #0]
			 break;
 800335c:	e03b      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 Stop_PWM_MOTOR_1;
 800335e:	2100      	movs	r1, #0
 8003360:	481f      	ldr	r0, [pc, #124]	; (80033e0 <HAL_GPIO_EXTI_Callback+0x268>)
 8003362:	f006 ffcf 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003366:	2100      	movs	r1, #0
 8003368:	481e      	ldr	r0, [pc, #120]	; (80033e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800336a:	f006 ffcb 	bl	800a304 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800336e:	2100      	movs	r1, #0
 8003370:	481d      	ldr	r0, [pc, #116]	; (80033e8 <HAL_GPIO_EXTI_Callback+0x270>)
 8003372:	f006 ffc7 	bl	800a304 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim15);
 8003376:	481d      	ldr	r0, [pc, #116]	; (80033ec <HAL_GPIO_EXTI_Callback+0x274>)
 8003378:	f006 fe26 	bl	8009fc8 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800337c:	481c      	ldr	r0, [pc, #112]	; (80033f0 <HAL_GPIO_EXTI_Callback+0x278>)
 800337e:	f006 fd83 	bl	8009e88 <HAL_TIM_Base_Stop>
			 endStopAlarmSup = true;
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_GPIO_EXTI_Callback+0x284>)
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 800338a:	2204      	movs	r2, #4
 800338c:	701a      	strb	r2, [r3, #0]
			 break;
 800338e:	e022      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 continuar = true;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_GPIO_EXTI_Callback+0x288>)
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
			 break;
 8003396:	e01e      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 continuar = false;
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_GPIO_EXTI_Callback+0x288>)
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
			 faultDrivers = true;
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_GPIO_EXTI_Callback+0x28c>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
			 break;
 80033aa:	e014      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 continuar = false;
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_GPIO_EXTI_Callback+0x288>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
			 faultDrivers = true;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_GPIO_EXTI_Callback+0x28c>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 80033ba:	2204      	movs	r2, #4
 80033bc:	701a      	strb	r2, [r3, #0]
			 break;
 80033be:	e00a      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
			 continuar = false;
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <HAL_GPIO_EXTI_Callback+0x288>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
			 faultDrivers = true;
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_GPIO_EXTI_Callback+0x28c>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x280>)
 80033ce:	2204      	movs	r2, #4
 80033d0:	701a      	strb	r2, [r3, #0]
			 break;
 80033d2:	e000      	b.n	80033d6 <HAL_GPIO_EXTI_Callback+0x25e>
		 default: break;
 80033d4:	bf00      	nop


	}


}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	240006c8 	.word	0x240006c8
 80033e4:	24000714 	.word	0x24000714
 80033e8:	24000760 	.word	0x24000760
 80033ec:	240007ac 	.word	0x240007ac
 80033f0:	2400067c 	.word	0x2400067c
 80033f4:	2400043d 	.word	0x2400043d
 80033f8:	24000438 	.word	0x24000438
 80033fc:	2400043c 	.word	0x2400043c
 8003400:	2400043e 	.word	0x2400043e
 8003404:	2400043f 	.word	0x2400043f

08003408 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a30      	ldr	r2, [pc, #192]	; (80034d8 <HAL_UART_RxCpltCallback+0xd0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d14d      	bne.n	80034b6 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 800341a:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_UART_RxCpltCallback+0xd4>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b3a      	cmp	r3, #58	; 0x3a
 8003424:	d006      	beq.n	8003434 <HAL_UART_RxCpltCallback+0x2c>
 8003426:	2b3a      	cmp	r3, #58	; 0x3a
 8003428:	dc36      	bgt.n	8003498 <HAL_UART_RxCpltCallback+0x90>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d009      	beq.n	8003442 <HAL_UART_RxCpltCallback+0x3a>
 800342e:	2b0d      	cmp	r3, #13
 8003430:	d01e      	beq.n	8003470 <HAL_UART_RxCpltCallback+0x68>
 8003432:	e031      	b.n	8003498 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_UART_RxCpltCallback+0xdc>)
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
			break;
 8003440:	e040      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8003442:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d037      	beq.n	80034ba <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 800344a:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	3b01      	subs	r3, #1
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 8003454:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003456:	e030      	b.n	80034ba <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_UART_RxCpltCallback+0xe0>)
 8003460:	2100      	movs	r1, #0
 8003462:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8003464:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 800346e:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b1e      	cmp	r3, #30
 8003476:	d1ef      	bne.n	8003458 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <HAL_UART_RxCpltCallback+0xdc>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d11e      	bne.n	80034be <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_UART_RxCpltCallback+0xe0>)
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 800348c:	f7fd ff8a 	bl	80013a4 <interpretaComando>
				cm0 = 0;
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_UART_RxCpltCallback+0xdc>)
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]

			}
			break;
 8003496:	e012      	b.n	80034be <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b1d      	cmp	r3, #29
 800349e:	d810      	bhi.n	80034c2 <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	b2d1      	uxtb	r1, r2
 80034a8:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <HAL_UART_RxCpltCallback+0xd8>)
 80034aa:	7011      	strb	r1, [r2, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <HAL_UART_RxCpltCallback+0xe0>)
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	5453      	strb	r3, [r2, r1]
			}
			break;
 80034b4:	e005      	b.n	80034c2 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 80034b6:	bf00      	nop
 80034b8:	e004      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80034ba:	bf00      	nop
 80034bc:	e002      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80034c2:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 80034c4:	2201      	movs	r2, #1
 80034c6:	4905      	ldr	r1, [pc, #20]	; (80034dc <HAL_UART_RxCpltCallback+0xd4>)
 80034c8:	4808      	ldr	r0, [pc, #32]	; (80034ec <HAL_UART_RxCpltCallback+0xe4>)
 80034ca:	f008 fca9 	bl	800be20 <HAL_UART_Receive_IT>
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40004800 	.word	0x40004800
 80034dc:	24000582 	.word	0x24000582
 80034e0:	24000560 	.word	0x24000560
 80034e4:	24000590 	.word	0x24000590
 80034e8:	24000564 	.word	0x24000564
 80034ec:	24000988 	.word	0x24000988

080034f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	__NOP();
 80034f8:	bf00      	nop
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d10f      	bne.n	800353a <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 800351a:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_TIM_IC_CaptureCallback+0x90>)
 800351c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	429a      	cmp	r2, r3
 8003524:	d103      	bne.n	800352e <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003528:	2201      	movs	r2, #1
 800352a:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 800352c:	e02e      	b.n	800358c <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	3301      	adds	r3, #1
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003536:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003538:	e028      	b.n	800358c <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM3){
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_TIM_IC_CaptureCallback+0x94>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10f      	bne.n	8003564 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	429a      	cmp	r2, r3
 800354e:	d103      	bne.n	8003558 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003552:	2201      	movs	r2, #1
 8003554:	765a      	strb	r2, [r3, #25]
}
 8003556:	e019      	b.n	800358c <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	3301      	adds	r3, #1
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003562:	e013      	b.n	800358c <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM4){
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 800356e:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	429a      	cmp	r2, r3
 8003578:	d103      	bne.n	8003582 <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800357c:	2201      	movs	r2, #1
 800357e:	765a      	strb	r2, [r3, #25]
}
 8003580:	e004      	b.n	800358c <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	3301      	adds	r3, #1
 8003588:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800358a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	24000360 	.word	0x24000360
 800359c:	40000400 	.word	0x40000400
 80035a0:	240003a8 	.word	0x240003a8
 80035a4:	40000800 	.word	0x40000800
 80035a8:	240003f0 	.word	0x240003f0
 80035ac:	00000000 	.word	0x00000000

080035b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d11f      	bne.n	8003600 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 80035c0:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	3301      	adds	r3, #1
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80035ee:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8003610 <HAL_TIM_PeriodElapsedCallback+0x60>
 80035f2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80035f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80035fc:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	f3af 8000 	nop.w
 8003610:	00000000 	.word	0x00000000
 8003614:	418e8480 	.word	0x418e8480
 8003618:	240007ac 	.word	0x240007ac
 800361c:	24000591 	.word	0x24000591
 8003620:	40000c00 	.word	0x40000c00
 8003624:	24000558 	.word	0x24000558

08003628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	ed93 6b00 	vldr	d6, [r3]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	ed93 7b08 	vldr	d7, [r3, #32]
 8003654:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365c:	db2b      	blt.n	80036b6 <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	ed93 6b00 	vldr	d6, [r3]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	ed93 7b08 	vldr	d7, [r3, #32]
 800366a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800366e:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <configMotor+0x58>
 8003684:	2201      	movs	r2, #1
 8003686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800368a:	4849      	ldr	r0, [pc, #292]	; (80037b0 <configMotor+0x178>)
 800368c:	f003 ffa4 	bl	80075d8 <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <configMotor+0x6a>
 8003696:	2201      	movs	r2, #1
 8003698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800369c:	4844      	ldr	r0, [pc, #272]	; (80037b0 <configMotor+0x178>)
 800369e:	f003 ff9b 	bl	80075d8 <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d131      	bne.n	800370c <configMotor+0xd4>
 80036a8:	2201      	movs	r2, #1
 80036aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036ae:	4840      	ldr	r0, [pc, #256]	; (80037b0 <configMotor+0x178>)
 80036b0:	f003 ff92 	bl	80075d8 <HAL_GPIO_WritePin>
 80036b4:	e02a      	b.n	800370c <configMotor+0xd4>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	ed93 6b08 	vldr	d6, [r3, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	ed93 7b00 	vldr	d7, [r3]
 80036c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036c6:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <configMotor+0xb0>
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036e2:	4833      	ldr	r0, [pc, #204]	; (80037b0 <configMotor+0x178>)
 80036e4:	f003 ff78 	bl	80075d8 <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <configMotor+0xc2>
 80036ee:	2200      	movs	r2, #0
 80036f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f4:	482e      	ldr	r0, [pc, #184]	; (80037b0 <configMotor+0x178>)
 80036f6:	f003 ff6f 	bl	80075d8 <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d105      	bne.n	800370c <configMotor+0xd4>
 8003700:	2200      	movs	r2, #0
 8003702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003706:	482a      	ldr	r0, [pc, #168]	; (80037b0 <configMotor+0x178>)
 8003708:	f003 ff66 	bl	80075d8 <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 800370c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003710:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80037a0 <configMotor+0x168>
 8003714:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003718:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80037a8 <configMotor+0x170>
 800371c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800372c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003730:	ee17 2a90 	vmov	r2, s15
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003750:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003754:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remainder >= 1) {
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003764:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003768:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003770:	da00      	bge.n	8003774 <configMotor+0x13c>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8003772:	e00e      	b.n	8003792 <configMotor+0x15a>
		motor->remainder -= 1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800377a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800377e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep += 1;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	f3af 8000 	nop.w
 80037a0:	00000000 	.word	0x00000000
 80037a4:	40bf4000 	.word	0x40bf4000
 80037a8:	00000000 	.word	0x00000000
 80037ac:	40768000 	.word	0x40768000
 80037b0:	58020800 	.word	0x58020800

080037b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_MspInit+0x44>)
 80037bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <HAL_MspInit+0x44>)
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_MspInit+0x44>)
 80037cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80037d8:	2005      	movs	r0, #5
 80037da:	f002 ff83 	bl	80066e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2101      	movs	r1, #1
 80037e2:	2051      	movs	r0, #81	; 0x51
 80037e4:	f002 ff89 	bl	80066fa <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80037e8:	2051      	movs	r0, #81	; 0x51
 80037ea:	f002 ffa0 	bl	800672e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400

080037fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380e:	e7fe      	b.n	800380e <HardFault_Handler+0x4>

08003810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003814:	e7fe      	b.n	8003814 <MemManage_Handler+0x4>

08003816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381a:	e7fe      	b.n	800381a <BusFault_Handler+0x4>

0800381c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003820:	e7fe      	b.n	8003820 <UsageFault_Handler+0x4>

08003822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003850:	f002 fe04 	bl	800645c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}

08003858 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 800385c:	2001      	movs	r0, #1
 800385e:	f003 fed4 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}

08003866 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 800386a:	2004      	movs	r0, #4
 800386c:	f003 fecd 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}

08003874 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003878:	2008      	movs	r0, #8
 800387a:	f003 fec6 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}

08003882 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003886:	2010      	movs	r0, #16
 8003888:	f003 febf 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003894:	2020      	movs	r0, #32
 8003896:	f003 feb8 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 800389a:	2080      	movs	r0, #128	; 0x80
 800389c:	f003 feb5 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <TIM2_IRQHandler+0x10>)
 80038aa:	f006 ffe3 	bl	800a874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	24000598 	.word	0x24000598

080038b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <TIM3_IRQHandler+0x10>)
 80038be:	f006 ffd9 	bl	800a874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	240005e4 	.word	0x240005e4

080038cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038d0:	4802      	ldr	r0, [pc, #8]	; (80038dc <TIM4_IRQHandler+0x10>)
 80038d2:	f006 ffcf 	bl	800a874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	24000630 	.word	0x24000630

080038e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <USART3_IRQHandler+0x10>)
 80038e6:	f008 faf1 	bl	800becc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	24000988 	.word	0x24000988

080038f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 80038f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038fc:	f003 fe85 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003900:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003904:	f003 fe81 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8003908:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800390c:	f003 fe7d 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 8003910:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003914:	f003 fe79 	bl	800760a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <TIM15_IRQHandler+0x10>)
 8003932:	f006 ff9f 	bl	800a874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	240007ac 	.word	0x240007ac

08003940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
	return 1;
 8003944:	2301      	movs	r3, #1
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <_kill>:

int _kill(int pid, int sig)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800395a:	f00a fcd9 	bl	800e310 <__errno>
 800395e:	4603      	mov	r3, r0
 8003960:	2216      	movs	r2, #22
 8003962:	601a      	str	r2, [r3, #0]
	return -1;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <_exit>:

void _exit (int status)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003978:	f04f 31ff 	mov.w	r1, #4294967295
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ffe7 	bl	8003950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003982:	e7fe      	b.n	8003982 <_exit+0x12>

08003984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e00a      	b.n	80039ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003996:	f3af 8000 	nop.w
 800399a:	4601      	mov	r1, r0
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	60ba      	str	r2, [r7, #8]
 80039a2:	b2ca      	uxtb	r2, r1
 80039a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3301      	adds	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	dbf0      	blt.n	8003996 <_read+0x12>
	}

return len;
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e009      	b.n	80039e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	60ba      	str	r2, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dbf1      	blt.n	80039d0 <_write+0x12>
	}
	return len;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_close>:

int _close(int file)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	return -1;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <_isatty>:

int _isatty(int file)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
	return 1;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <_sbrk+0x50>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <_sbrk+0x16>
		heap_end = &end;
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <_sbrk+0x50>)
 8003a72:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <_sbrk+0x54>)
 8003a74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <_sbrk+0x50>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <_sbrk+0x50>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	466a      	mov	r2, sp
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d907      	bls.n	8003a9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a8a:	f00a fc41 	bl	800e310 <__errno>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	220c      	movs	r2, #12
 8003a92:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
 8003a98:	e006      	b.n	8003aa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <_sbrk+0x50>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4a03      	ldr	r2, [pc, #12]	; (8003ab0 <_sbrk+0x50>)
 8003aa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	24000594 	.word	0x24000594
 8003ab4:	24000a30 	.word	0x24000a30

08003ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <SystemInit+0xac>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <SystemInit+0xac>)
 8003ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <SystemInit+0xb0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <SystemInit+0xb0>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <SystemInit+0xb0>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <SystemInit+0xb0>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4921      	ldr	r1, [pc, #132]	; (8003b68 <SystemInit+0xb0>)
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <SystemInit+0xb4>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003aea:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <SystemInit+0xb0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <SystemInit+0xb0>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <SystemInit+0xb0>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <SystemInit+0xb0>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <SystemInit+0xb0>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003b08:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <SystemInit+0xb0>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b0e:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <SystemInit+0xb0>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <SystemInit+0xb0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <SystemInit+0xb0>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <SystemInit+0xb0>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <SystemInit+0xb0>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <SystemInit+0xb0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <SystemInit+0xb0>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <SystemInit+0xb0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <SystemInit+0xb8>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <SystemInit+0xbc>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4a:	d202      	bcs.n	8003b52 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <SystemInit+0xc0>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <SystemInit+0xac>)
 8003b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00
 8003b68:	58024400 	.word	0x58024400
 8003b6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b70:	5c001000 	.word	0x5c001000
 8003b74:	ffff0000 	.word	0xffff0000
 8003b78:	51008108 	.word	0x51008108

08003b7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	; 0x30
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b82:	f107 0320 	add.w	r3, r7, #32
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bca:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bd0:	4821      	ldr	r0, [pc, #132]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bd2:	f006 f891 	bl	8009cf8 <HAL_TIM_Base_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003bdc:	f7ff fd24 	bl	8003628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003be6:	f107 0320 	add.w	r3, r7, #32
 8003bea:	4619      	mov	r1, r3
 8003bec:	481a      	ldr	r0, [pc, #104]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bee:	f007 f911 	bl	800ae14 <HAL_TIM_ConfigClockSource>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003bf8:	f7ff fd16 	bl	8003628 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003bfc:	4816      	ldr	r0, [pc, #88]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003bfe:	f006 fc17 	bl	800a430 <HAL_TIM_IC_Init>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003c08:	f7ff fd0e 	bl	8003628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	4619      	mov	r1, r3
 8003c1a:	480f      	ldr	r0, [pc, #60]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003c1c:	f007 ff6e 	bl	800bafc <HAL_TIMEx_MasterConfigSynchronization>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003c26:	f7ff fcff 	bl	8003628 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4805      	ldr	r0, [pc, #20]	; (8003c58 <MX_TIM2_Init+0xdc>)
 8003c42:	f006 ff36 	bl	800aab2 <HAL_TIM_IC_ConfigChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003c4c:	f7ff fcec 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c50:	bf00      	nop
 8003c52:	3730      	adds	r7, #48	; 0x30
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	24000598 	.word	0x24000598

08003c5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c62:	f107 0320 	add.w	r3, r7, #32
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c7c:	1d3b      	adds	r3, r7, #4
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c88:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <MX_TIM3_Init+0xe0>)
 8003c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca2:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cae:	4822      	ldr	r0, [pc, #136]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003cb0:	f006 f822 	bl	8009cf8 <HAL_TIM_Base_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003cba:	f7ff fcb5 	bl	8003628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cc4:	f107 0320 	add.w	r3, r7, #32
 8003cc8:	4619      	mov	r1, r3
 8003cca:	481b      	ldr	r0, [pc, #108]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003ccc:	f007 f8a2 	bl	800ae14 <HAL_TIM_ConfigClockSource>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003cd6:	f7ff fca7 	bl	8003628 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003cda:	4817      	ldr	r0, [pc, #92]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003cdc:	f006 fba8 	bl	800a430 <HAL_TIM_IC_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003ce6:	f7ff fc9f 	bl	8003628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	480f      	ldr	r0, [pc, #60]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003cfa:	f007 feff 	bl	800bafc <HAL_TIMEx_MasterConfigSynchronization>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003d04:	f7ff fc90 	bl	8003628 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4806      	ldr	r0, [pc, #24]	; (8003d38 <MX_TIM3_Init+0xdc>)
 8003d20:	f006 fec7 	bl	800aab2 <HAL_TIM_IC_ConfigChannel>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003d2a:	f7ff fc7d 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d2e:	bf00      	nop
 8003d30:	3730      	adds	r7, #48	; 0x30
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	240005e4 	.word	0x240005e4
 8003d3c:	40000400 	.word	0x40000400

08003d40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	; 0x30
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d46:	f107 0320 	add.w	r3, r7, #32
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d60:	1d3b      	adds	r3, r7, #4
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <MX_TIM4_Init+0xe0>)
 8003d70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d86:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d92:	4822      	ldr	r0, [pc, #136]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003d94:	f005 ffb0 	bl	8009cf8 <HAL_TIM_Base_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003d9e:	f7ff fc43 	bl	8003628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003da8:	f107 0320 	add.w	r3, r7, #32
 8003dac:	4619      	mov	r1, r3
 8003dae:	481b      	ldr	r0, [pc, #108]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003db0:	f007 f830 	bl	800ae14 <HAL_TIM_ConfigClockSource>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003dba:	f7ff fc35 	bl	8003628 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003dbe:	4817      	ldr	r0, [pc, #92]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003dc0:	f006 fb36 	bl	800a430 <HAL_TIM_IC_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003dca:	f7ff fc2d 	bl	8003628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	4619      	mov	r1, r3
 8003ddc:	480f      	ldr	r0, [pc, #60]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003dde:	f007 fe8d 	bl	800bafc <HAL_TIMEx_MasterConfigSynchronization>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003de8:	f7ff fc1e 	bl	8003628 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003dec:	2300      	movs	r3, #0
 8003dee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003df0:	2301      	movs	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4619      	mov	r1, r3
 8003e02:	4806      	ldr	r0, [pc, #24]	; (8003e1c <MX_TIM4_Init+0xdc>)
 8003e04:	f006 fe55 	bl	800aab2 <HAL_TIM_IC_ConfigChannel>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003e0e:	f7ff fc0b 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e12:	bf00      	nop
 8003e14:	3730      	adds	r7, #48	; 0x30
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	24000630 	.word	0x24000630
 8003e20:	40000800 	.word	0x40000800

08003e24 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e2a:	f107 0310 	add.w	r3, r7, #16
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <MX_TIM5_Init+0x98>)
 8003e46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003e54:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e68:	4813      	ldr	r0, [pc, #76]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e6a:	f005 ff45 	bl	8009cf8 <HAL_TIM_Base_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003e74:	f7ff fbd8 	bl	8003628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e7e:	f107 0310 	add.w	r3, r7, #16
 8003e82:	4619      	mov	r1, r3
 8003e84:	480c      	ldr	r0, [pc, #48]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003e86:	f006 ffc5 	bl	800ae14 <HAL_TIM_ConfigClockSource>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003e90:	f7ff fbca 	bl	8003628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e94:	2300      	movs	r3, #0
 8003e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4805      	ldr	r0, [pc, #20]	; (8003eb8 <MX_TIM5_Init+0x94>)
 8003ea2:	f007 fe2b 	bl	800bafc <HAL_TIMEx_MasterConfigSynchronization>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003eac:	f7ff fbbc 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003eb0:	bf00      	nop
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	2400067c 	.word	0x2400067c
 8003ebc:	40000c00 	.word	0x40000c00

08003ec0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	; 0x30
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ec6:	f107 0320 	add.w	r3, r7, #32
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	609a      	str	r2, [r3, #8]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	615a      	str	r2, [r3, #20]
 8003ee4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003ee6:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003ee8:	4a25      	ldr	r2, [pc, #148]	; (8003f80 <MX_TIM12_Init+0xc0>)
 8003eea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003eee:	223f      	movs	r2, #63	; 0x3f
 8003ef0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003efe:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f04:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003f0a:	481c      	ldr	r0, [pc, #112]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003f0c:	f005 fef4 	bl	8009cf8 <HAL_TIM_Base_Init>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8003f16:	f7ff fb87 	bl	8003628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003f20:	f107 0320 	add.w	r3, r7, #32
 8003f24:	4619      	mov	r1, r3
 8003f26:	4815      	ldr	r0, [pc, #84]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003f28:	f006 ff74 	bl	800ae14 <HAL_TIM_ConfigClockSource>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8003f32:	f7ff fb79 	bl	8003628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003f36:	4811      	ldr	r0, [pc, #68]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003f38:	f006 f875 	bl	800a026 <HAL_TIM_PWM_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8003f42:	f7ff fb71 	bl	8003628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f46:	2360      	movs	r3, #96	; 0x60
 8003f48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4807      	ldr	r0, [pc, #28]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003f5e:	f006 fe45 	bl	800abec <HAL_TIM_PWM_ConfigChannel>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8003f68:	f7ff fb5e 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003f6c:	4803      	ldr	r0, [pc, #12]	; (8003f7c <MX_TIM12_Init+0xbc>)
 8003f6e:	f000 fa3d 	bl	80043ec <HAL_TIM_MspPostInit>

}
 8003f72:	bf00      	nop
 8003f74:	3730      	adds	r7, #48	; 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	240006c8 	.word	0x240006c8
 8003f80:	40001800 	.word	0x40001800

08003f84 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
 8003f98:	615a      	str	r2, [r3, #20]
 8003f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <MX_TIM13_Init+0x90>)
 8003f9e:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <MX_TIM13_Init+0x94>)
 8003fa0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <MX_TIM13_Init+0x90>)
 8003fa4:	223f      	movs	r2, #63	; 0x3f
 8003fa6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <MX_TIM13_Init+0x90>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <MX_TIM13_Init+0x90>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <MX_TIM13_Init+0x90>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <MX_TIM13_Init+0x90>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003fc0:	4814      	ldr	r0, [pc, #80]	; (8004014 <MX_TIM13_Init+0x90>)
 8003fc2:	f005 fe99 	bl	8009cf8 <HAL_TIM_Base_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8003fcc:	f7ff fb2c 	bl	8003628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003fd0:	4810      	ldr	r0, [pc, #64]	; (8004014 <MX_TIM13_Init+0x90>)
 8003fd2:	f006 f828 	bl	800a026 <HAL_TIM_PWM_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8003fdc:	f7ff fb24 	bl	8003628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fe0:	2360      	movs	r3, #96	; 0x60
 8003fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4807      	ldr	r0, [pc, #28]	; (8004014 <MX_TIM13_Init+0x90>)
 8003ff8:	f006 fdf8 	bl	800abec <HAL_TIM_PWM_ConfigChannel>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8004002:	f7ff fb11 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004006:	4803      	ldr	r0, [pc, #12]	; (8004014 <MX_TIM13_Init+0x90>)
 8004008:	f000 f9f0 	bl	80043ec <HAL_TIM_MspPostInit>

}
 800400c:	bf00      	nop
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	24000714 	.word	0x24000714
 8004018:	40001c00 	.word	0x40001c00

0800401c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
 8004030:	615a      	str	r2, [r3, #20]
 8004032:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <MX_TIM14_Init+0x90>)
 8004036:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <MX_TIM14_Init+0x94>)
 8004038:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 800403a:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <MX_TIM14_Init+0x90>)
 800403c:	223f      	movs	r2, #63	; 0x3f
 800403e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <MX_TIM14_Init+0x90>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <MX_TIM14_Init+0x90>)
 8004048:	2200      	movs	r2, #0
 800404a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <MX_TIM14_Init+0x90>)
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <MX_TIM14_Init+0x90>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004058:	4814      	ldr	r0, [pc, #80]	; (80040ac <MX_TIM14_Init+0x90>)
 800405a:	f005 fe4d 	bl	8009cf8 <HAL_TIM_Base_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8004064:	f7ff fae0 	bl	8003628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004068:	4810      	ldr	r0, [pc, #64]	; (80040ac <MX_TIM14_Init+0x90>)
 800406a:	f005 ffdc 	bl	800a026 <HAL_TIM_PWM_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8004074:	f7ff fad8 	bl	8003628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004078:	2360      	movs	r3, #96	; 0x60
 800407a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	2200      	movs	r2, #0
 800408c:	4619      	mov	r1, r3
 800408e:	4807      	ldr	r0, [pc, #28]	; (80040ac <MX_TIM14_Init+0x90>)
 8004090:	f006 fdac 	bl	800abec <HAL_TIM_PWM_ConfigChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800409a:	f7ff fac5 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800409e:	4803      	ldr	r0, [pc, #12]	; (80040ac <MX_TIM14_Init+0x90>)
 80040a0:	f000 f9a4 	bl	80043ec <HAL_TIM_MspPostInit>

}
 80040a4:	bf00      	nop
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	24000760 	.word	0x24000760
 80040b0:	40002000 	.word	0x40002000

080040b4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ba:	f107 0310 	add.w	r3, r7, #16
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	605a      	str	r2, [r3, #4]
 80040c4:	609a      	str	r2, [r3, #8]
 80040c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80040d2:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <MX_TIM15_Init+0x9c>)
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <MX_TIM15_Init+0xa0>)
 80040d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80040d8:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <MX_TIM15_Init+0x9c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <MX_TIM15_Init+0x9c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <MX_TIM15_Init+0x9c>)
 80040e6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80040ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <MX_TIM15_Init+0x9c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <MX_TIM15_Init+0x9c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <MX_TIM15_Init+0x9c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80040fe:	4814      	ldr	r0, [pc, #80]	; (8004150 <MX_TIM15_Init+0x9c>)
 8004100:	f005 fdfa 	bl	8009cf8 <HAL_TIM_Base_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800410a:	f7ff fa8d 	bl	8003628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800410e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004114:	f107 0310 	add.w	r3, r7, #16
 8004118:	4619      	mov	r1, r3
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <MX_TIM15_Init+0x9c>)
 800411c:	f006 fe7a 	bl	800ae14 <HAL_TIM_ConfigClockSource>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004126:	f7ff fa7f 	bl	8003628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4806      	ldr	r0, [pc, #24]	; (8004150 <MX_TIM15_Init+0x9c>)
 8004138:	f007 fce0 	bl	800bafc <HAL_TIMEx_MasterConfigSynchronization>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004142:	f7ff fa71 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004146:	bf00      	nop
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	240007ac 	.word	0x240007ac
 8004154:	40014000 	.word	0x40014000

08004158 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b092      	sub	sp, #72	; 0x48
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d136      	bne.n	80041e8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800417a:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800417c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004180:	4a90      	ldr	r2, [pc, #576]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800418a:	4b8e      	ldr	r3, [pc, #568]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800418c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004198:	4b8a      	ldr	r3, [pc, #552]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800419a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800419e:	4a89      	ldr	r2, [pc, #548]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041a8:	4b86      	ldr	r3, [pc, #536]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 80041aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 80041b6:	2301      	movs	r3, #1
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c2:	2300      	movs	r3, #0
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041c6:	2301      	movs	r3, #1
 80041c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 80041ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041ce:	4619      	mov	r1, r3
 80041d0:	487d      	ldr	r0, [pc, #500]	; (80043c8 <HAL_TIM_Base_MspInit+0x270>)
 80041d2:	f003 f839 	bl	8007248 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2101      	movs	r1, #1
 80041da:	201c      	movs	r0, #28
 80041dc:	f002 fa8d 	bl	80066fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041e0:	201c      	movs	r0, #28
 80041e2:	f002 faa4 	bl	800672e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80041e6:	e0e8      	b.n	80043ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a77      	ldr	r2, [pc, #476]	; (80043cc <HAL_TIM_Base_MspInit+0x274>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d136      	bne.n	8004260 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041f2:	4b74      	ldr	r3, [pc, #464]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 80041f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041f8:	4a72      	ldr	r2, [pc, #456]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 80041fa:	f043 0302 	orr.w	r3, r3, #2
 80041fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004202:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004210:	4b6c      	ldr	r3, [pc, #432]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004216:	4a6b      	ldr	r2, [pc, #428]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423a:	2300      	movs	r3, #0
 800423c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800423e:	2302      	movs	r3, #2
 8004240:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 8004242:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004246:	4619      	mov	r1, r3
 8004248:	485f      	ldr	r0, [pc, #380]	; (80043c8 <HAL_TIM_Base_MspInit+0x270>)
 800424a:	f002 fffd 	bl	8007248 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2101      	movs	r1, #1
 8004252:	201d      	movs	r0, #29
 8004254:	f002 fa51 	bl	80066fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004258:	201d      	movs	r0, #29
 800425a:	f002 fa68 	bl	800672e <HAL_NVIC_EnableIRQ>
}
 800425e:	e0ac      	b.n	80043ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a5a      	ldr	r2, [pc, #360]	; (80043d0 <HAL_TIM_Base_MspInit+0x278>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d137      	bne.n	80042da <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800426c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004270:	4a54      	ldr	r2, [pc, #336]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800427a:	4b52      	ldr	r3, [pc, #328]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800427c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004288:	4b4e      	ldr	r3, [pc, #312]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800428a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800428e:	4a4d      	ldr	r2, [pc, #308]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004290:	f043 0308 	orr.w	r3, r3, #8
 8004294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004298:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800429a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 80042a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ac:	2302      	movs	r3, #2
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042b8:	2302      	movs	r3, #2
 80042ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 80042bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042c0:	4619      	mov	r1, r3
 80042c2:	4844      	ldr	r0, [pc, #272]	; (80043d4 <HAL_TIM_Base_MspInit+0x27c>)
 80042c4:	f002 ffc0 	bl	8007248 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80042c8:	2200      	movs	r2, #0
 80042ca:	2101      	movs	r1, #1
 80042cc:	201e      	movs	r0, #30
 80042ce:	f002 fa14 	bl	80066fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042d2:	201e      	movs	r0, #30
 80042d4:	f002 fa2b 	bl	800672e <HAL_NVIC_EnableIRQ>
}
 80042d8:	e06f      	b.n	80043ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3e      	ldr	r2, [pc, #248]	; (80043d8 <HAL_TIM_Base_MspInit+0x280>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10f      	bne.n	8004304 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042e4:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 80042e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042ea:	4a36      	ldr	r2, [pc, #216]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 80042ec:	f043 0308 	orr.w	r3, r3, #8
 80042f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 80042f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	69bb      	ldr	r3, [r7, #24]
}
 8004302:	e05a      	b.n	80043ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a34      	ldr	r2, [pc, #208]	; (80043dc <HAL_TIM_Base_MspInit+0x284>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10f      	bne.n	800432e <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004314:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	697b      	ldr	r3, [r7, #20]
}
 800432c:	e045      	b.n	80043ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2b      	ldr	r2, [pc, #172]	; (80043e0 <HAL_TIM_Base_MspInit+0x288>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d10f      	bne.n	8004358 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800433a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800433e:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004344:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800434a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	693b      	ldr	r3, [r7, #16]
}
 8004356:	e030      	b.n	80043ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <HAL_TIM_Base_MspInit+0x28c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10f      	bne.n	8004382 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004362:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004368:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800436a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	e01b      	b.n	80043ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_TIM_Base_MspInit+0x290>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d116      	bne.n	80043ba <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800438c:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800438e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_TIM_Base_MspInit+0x26c>)
 800439e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2101      	movs	r1, #1
 80043ae:	2074      	movs	r0, #116	; 0x74
 80043b0:	f002 f9a3 	bl	80066fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80043b4:	2074      	movs	r0, #116	; 0x74
 80043b6:	f002 f9ba 	bl	800672e <HAL_NVIC_EnableIRQ>
}
 80043ba:	bf00      	nop
 80043bc:	3748      	adds	r7, #72	; 0x48
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	58024400 	.word	0x58024400
 80043c8:	58020000 	.word	0x58020000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	58020c00 	.word	0x58020c00
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40001800 	.word	0x40001800
 80043e0:	40001c00 	.word	0x40001c00
 80043e4:	40002000 	.word	0x40002000
 80043e8:	40014000 	.word	0x40014000

080043ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a39      	ldr	r2, [pc, #228]	; (80044f0 <HAL_TIM_MspPostInit+0x104>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d120      	bne.n	8004450 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800440e:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 8004410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004414:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 8004416:	f043 0302 	orr.w	r3, r3, #2
 800441a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800441e:	4b35      	ldr	r3, [pc, #212]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 8004420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 800442c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004432:	2302      	movs	r3, #2
 8004434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800443e:	2302      	movs	r3, #2
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	4619      	mov	r1, r3
 8004448:	482b      	ldr	r0, [pc, #172]	; (80044f8 <HAL_TIM_MspPostInit+0x10c>)
 800444a:	f002 fefd 	bl	8007248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800444e:	e04a      	b.n	80044e6 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a29      	ldr	r2, [pc, #164]	; (80044fc <HAL_TIM_MspPostInit+0x110>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d120      	bne.n	800449c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 800445c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004460:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 8004462:	f043 0320 	orr.w	r3, r3, #32
 8004466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 800446c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800447c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800448a:	2309      	movs	r3, #9
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4619      	mov	r1, r3
 8004494:	481a      	ldr	r0, [pc, #104]	; (8004500 <HAL_TIM_MspPostInit+0x114>)
 8004496:	f002 fed7 	bl	8007248 <HAL_GPIO_Init>
}
 800449a:	e024      	b.n	80044e6 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a18      	ldr	r2, [pc, #96]	; (8004504 <HAL_TIM_MspPostInit+0x118>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d11f      	bne.n	80044e6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044a6:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 80044a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ac:	4a11      	ldr	r2, [pc, #68]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 80044ae:	f043 0320 	orr.w	r3, r3, #32
 80044b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <HAL_TIM_MspPostInit+0x108>)
 80044b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 80044c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80044d6:	2309      	movs	r3, #9
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 80044da:	f107 0314 	add.w	r3, r7, #20
 80044de:	4619      	mov	r1, r3
 80044e0:	4807      	ldr	r0, [pc, #28]	; (8004500 <HAL_TIM_MspPostInit+0x114>)
 80044e2:	f002 feb1 	bl	8007248 <HAL_GPIO_Init>
}
 80044e6:	bf00      	nop
 80044e8:	3728      	adds	r7, #40	; 0x28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40001800 	.word	0x40001800
 80044f4:	58024400 	.word	0x58024400
 80044f8:	58020400 	.word	0x58020400
 80044fc:	40001c00 	.word	0x40001c00
 8004500:	58021400 	.word	0x58021400
 8004504:	40002000 	.word	0x40002000

08004508 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 8004508:	b580      	push	{r7, lr}
 800450a:	ed2d 8b06 	vpush	{d8-d10}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	ed87 0b06 	vstr	d0, [r7, #24]
 8004516:	ed87 1b04 	vstr	d1, [r7, #16]
 800451a:	ed87 2b02 	vstr	d2, [r7, #8]
 800451e:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	495f      	ldr	r1, [pc, #380]	; (80046a4 <get_Straj+0x19c>)
 8004528:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004532:	495d      	ldr	r1, [pc, #372]	; (80046a8 <get_Straj+0x1a0>)
 8004534:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800453e:	495b      	ldr	r1, [pc, #364]	; (80046ac <get_Straj+0x1a4>)
 8004540:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800454a:	4959      	ldr	r1, [pc, #356]	; (80046b0 <get_Straj+0x1a8>)
 800454c:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004556:	4957      	ldr	r1, [pc, #348]	; (80046b4 <get_Straj+0x1ac>)
 8004558:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004562:	4955      	ldr	r1, [pc, #340]	; (80046b8 <get_Straj+0x1b0>)
 8004564:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800456e:	4953      	ldr	r1, [pc, #332]	; (80046bc <get_Straj+0x1b4>)
 8004570:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8004574:	4952      	ldr	r1, [pc, #328]	; (80046c0 <get_Straj+0x1b8>)
 8004576:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800457a:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 800457e:	4951      	ldr	r1, [pc, #324]	; (80046c4 <get_Straj+0x1bc>)
 8004580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004584:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8004588:	4b4e      	ldr	r3, [pc, #312]	; (80046c4 <get_Straj+0x1bc>)
 800458a:	ed93 6b00 	vldr	d6, [r3]
 800458e:	4b4c      	ldr	r3, [pc, #304]	; (80046c0 <get_Straj+0x1b8>)
 8004590:	ed93 7b00 	vldr	d7, [r3]
 8004594:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	f140 80ac 	bpl.w	80046f8 <get_Straj+0x1f0>

    flagInv = true;
 80045a0:	4b49      	ldr	r3, [pc, #292]	; (80046c8 <get_Straj+0x1c0>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 80045a6:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <get_Straj+0x1b8>)
 80045a8:	ed93 7b00 	vldr	d7, [r3]
 80045ac:	eeb1 7b47 	vneg.f64	d7, d7
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <get_Straj+0x1b8>)
 80045b2:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 80045b6:	4b43      	ldr	r3, [pc, #268]	; (80046c4 <get_Straj+0x1bc>)
 80045b8:	ed93 7b00 	vldr	d7, [r3]
 80045bc:	eeb1 7b47 	vneg.f64	d7, d7
 80045c0:	4b40      	ldr	r3, [pc, #256]	; (80046c4 <get_Straj+0x1bc>)
 80045c2:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 80045c6:	4b41      	ldr	r3, [pc, #260]	; (80046cc <get_Straj+0x1c4>)
 80045c8:	ed93 7b00 	vldr	d7, [r3]
 80045cc:	eeb1 7b47 	vneg.f64	d7, d7
 80045d0:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <get_Straj+0x1c4>)
 80045d2:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 80045d6:	4b3e      	ldr	r3, [pc, #248]	; (80046d0 <get_Straj+0x1c8>)
 80045d8:	ed93 7b00 	vldr	d7, [r3]
 80045dc:	eeb1 7b47 	vneg.f64	d7, d7
 80045e0:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <get_Straj+0x1c8>)
 80045e2:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 80045e6:	4b3b      	ldr	r3, [pc, #236]	; (80046d4 <get_Straj+0x1cc>)
 80045e8:	ed93 7b00 	vldr	d7, [r3]
 80045ec:	eeb1 7b47 	vneg.f64	d7, d7
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <get_Straj+0x1d0>)
 80045f2:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <get_Straj+0x1d0>)
 80045f8:	ed93 7b00 	vldr	d7, [r3]
 80045fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004600:	4b34      	ldr	r3, [pc, #208]	; (80046d4 <get_Straj+0x1cc>)
 8004602:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 8004606:	4b35      	ldr	r3, [pc, #212]	; (80046dc <get_Straj+0x1d4>)
 8004608:	ed93 7b00 	vldr	d7, [r3]
 800460c:	eeb1 7b47 	vneg.f64	d7, d7
 8004610:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <get_Straj+0x1d8>)
 8004612:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 8004616:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <get_Straj+0x1d8>)
 8004618:	ed93 7b00 	vldr	d7, [r3]
 800461c:	eeb1 7b47 	vneg.f64	d7, d7
 8004620:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <get_Straj+0x1d4>)
 8004622:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 8004626:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <get_Straj+0x1dc>)
 8004628:	ed93 7b00 	vldr	d7, [r3]
 800462c:	eeb1 7b47 	vneg.f64	d7, d7
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <get_Straj+0x1e0>)
 8004632:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <get_Straj+0x1e0>)
 8004638:	ed93 7b00 	vldr	d7, [r3]
 800463c:	eeb1 7b47 	vneg.f64	d7, d7
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <get_Straj+0x1dc>)
 8004642:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <get_Straj+0x1e0>)
 8004648:	ed93 6b00 	vldr	d6, [r3]
 800464c:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <get_Straj+0x19c>)
 800464e:	ed93 7b00 	vldr	d7, [r3]
 8004652:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004656:	4b25      	ldr	r3, [pc, #148]	; (80046ec <get_Straj+0x1e4>)
 8004658:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <get_Straj+0x1e0>)
 800465e:	ed93 7b00 	vldr	d7, [r3]
 8004662:	eeb1 6b47 	vneg.f64	d6, d7
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <get_Straj+0x1a0>)
 8004668:	ed93 7b00 	vldr	d7, [r3]
 800466c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <get_Straj+0x1e8>)
 8004672:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8004676:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <get_Straj+0x1a8>)
 8004678:	ed93 6b00 	vldr	d6, [r3]
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <get_Straj+0x19c>)
 800467e:	ed93 7b00 	vldr	d7, [r3]
 8004682:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004686:	4b19      	ldr	r3, [pc, #100]	; (80046ec <get_Straj+0x1e4>)
 8004688:	ed93 7b00 	vldr	d7, [r3]
 800468c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <get_Straj+0x1c4>)
 8004692:	ed93 7b00 	vldr	d7, [r3]
 8004696:	ee36 7b07 	vadd.f64	d7, d6, d7
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <get_Straj+0x1ec>)
 800469c:	ed83 7b00 	vstr	d7, [r3]
 80046a0:	e06f      	b.n	8004782 <get_Straj+0x27a>
 80046a2:	bf00      	nop
 80046a4:	24000838 	.word	0x24000838
 80046a8:	24000840 	.word	0x24000840
 80046ac:	24000848 	.word	0x24000848
 80046b0:	24000820 	.word	0x24000820
 80046b4:	24000828 	.word	0x24000828
 80046b8:	24000830 	.word	0x24000830
 80046bc:	24000818 	.word	0x24000818
 80046c0:	24000858 	.word	0x24000858
 80046c4:	24000860 	.word	0x24000860
 80046c8:	240007f8 	.word	0x240007f8
 80046cc:	24000018 	.word	0x24000018
 80046d0:	24000470 	.word	0x24000470
 80046d4:	24000468 	.word	0x24000468
 80046d8:	24000010 	.word	0x24000010
 80046dc:	24000478 	.word	0x24000478
 80046e0:	24000020 	.word	0x24000020
 80046e4:	24000460 	.word	0x24000460
 80046e8:	24000008 	.word	0x24000008
 80046ec:	24000800 	.word	0x24000800
 80046f0:	24000808 	.word	0x24000808
 80046f4:	24000810 	.word	0x24000810

    }else{
        jmin = -jmax;
 80046f8:	4bbc      	ldr	r3, [pc, #752]	; (80049ec <get_Straj+0x4e4>)
 80046fa:	ed93 7b00 	vldr	d7, [r3]
 80046fe:	eeb1 7b47 	vneg.f64	d7, d7
 8004702:	4bbb      	ldr	r3, [pc, #748]	; (80049f0 <get_Straj+0x4e8>)
 8004704:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 8004708:	4bba      	ldr	r3, [pc, #744]	; (80049f4 <get_Straj+0x4ec>)
 800470a:	ed93 7b00 	vldr	d7, [r3]
 800470e:	eeb1 7b47 	vneg.f64	d7, d7
 8004712:	4bb9      	ldr	r3, [pc, #740]	; (80049f8 <get_Straj+0x4f0>)
 8004714:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 8004718:	4bb8      	ldr	r3, [pc, #736]	; (80049fc <get_Straj+0x4f4>)
 800471a:	ed93 7b00 	vldr	d7, [r3]
 800471e:	eeb1 7b47 	vneg.f64	d7, d7
 8004722:	4bb7      	ldr	r3, [pc, #732]	; (8004a00 <get_Straj+0x4f8>)
 8004724:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 8004728:	4bb0      	ldr	r3, [pc, #704]	; (80049ec <get_Straj+0x4e4>)
 800472a:	ed93 6b00 	vldr	d6, [r3]
 800472e:	4bb5      	ldr	r3, [pc, #724]	; (8004a04 <get_Straj+0x4fc>)
 8004730:	ed93 7b00 	vldr	d7, [r3]
 8004734:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004738:	4bb3      	ldr	r3, [pc, #716]	; (8004a08 <get_Straj+0x500>)
 800473a:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 800473e:	4bab      	ldr	r3, [pc, #684]	; (80049ec <get_Straj+0x4e4>)
 8004740:	ed93 7b00 	vldr	d7, [r3]
 8004744:	eeb1 6b47 	vneg.f64	d6, d7
 8004748:	4bb0      	ldr	r3, [pc, #704]	; (8004a0c <get_Straj+0x504>)
 800474a:	ed93 7b00 	vldr	d7, [r3]
 800474e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004752:	4baf      	ldr	r3, [pc, #700]	; (8004a10 <get_Straj+0x508>)
 8004754:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8004758:	4bae      	ldr	r3, [pc, #696]	; (8004a14 <get_Straj+0x50c>)
 800475a:	ed93 6b00 	vldr	d6, [r3]
 800475e:	4ba9      	ldr	r3, [pc, #676]	; (8004a04 <get_Straj+0x4fc>)
 8004760:	ed93 7b00 	vldr	d7, [r3]
 8004764:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004768:	4ba7      	ldr	r3, [pc, #668]	; (8004a08 <get_Straj+0x500>)
 800476a:	ed93 7b00 	vldr	d7, [r3]
 800476e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004772:	4ba9      	ldr	r3, [pc, #676]	; (8004a18 <get_Straj+0x510>)
 8004774:	ed93 7b00 	vldr	d7, [r3]
 8004778:	ee36 7b07 	vadd.f64	d7, d6, d7
 800477c:	4ba7      	ldr	r3, [pc, #668]	; (8004a1c <get_Straj+0x514>)
 800477e:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8004782:	ed97 7b06 	vldr	d7, [r7, #24]
 8004786:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478e:	db7e      	blt.n	800488e <get_Straj+0x386>
 8004790:	4b9c      	ldr	r3, [pc, #624]	; (8004a04 <get_Straj+0x4fc>)
 8004792:	ed93 7b00 	vldr	d7, [r3]
 8004796:	ed97 6b06 	vldr	d6, [r7, #24]
 800479a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	d874      	bhi.n	800488e <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 80047a4:	4b9c      	ldr	r3, [pc, #624]	; (8004a18 <get_Straj+0x510>)
 80047a6:	ed93 6b00 	vldr	d6, [r3]
 80047aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80047ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047b2:	4b9b      	ldr	r3, [pc, #620]	; (8004a20 <get_Straj+0x518>)
 80047b4:	ed93 7b00 	vldr	d7, [r3]
 80047b8:	ee36 8b07 	vadd.f64	d8, d6, d7
 80047bc:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80047c0:	ed97 0b06 	vldr	d0, [r7, #24]
 80047c4:	f00c fc70 	bl	80110a8 <pow>
 80047c8:	eeb0 6b40 	vmov.f64	d6, d0
 80047cc:	4b87      	ldr	r3, [pc, #540]	; (80049ec <get_Straj+0x4e4>)
 80047ce:	ed93 7b00 	vldr	d7, [r3]
 80047d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047d6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80047da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80047de:	ee38 7b07 	vadd.f64	d7, d8, d7
 80047e2:	4b90      	ldr	r3, [pc, #576]	; (8004a24 <get_Straj+0x51c>)
 80047e4:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 80047e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80047ec:	ed97 0b06 	vldr	d0, [r7, #24]
 80047f0:	f00c fc5a 	bl	80110a8 <pow>
 80047f4:	eeb0 6b40 	vmov.f64	d6, d0
 80047f8:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <get_Straj+0x4e4>)
 80047fa:	ed93 7b00 	vldr	d7, [r3]
 80047fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004802:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004806:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800480a:	4b83      	ldr	r3, [pc, #524]	; (8004a18 <get_Straj+0x510>)
 800480c:	ed93 7b00 	vldr	d7, [r3]
 8004810:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004814:	4b84      	ldr	r3, [pc, #528]	; (8004a28 <get_Straj+0x520>)
 8004816:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 800481a:	4b74      	ldr	r3, [pc, #464]	; (80049ec <get_Straj+0x4e4>)
 800481c:	ed93 6b00 	vldr	d6, [r3]
 8004820:	ed97 7b06 	vldr	d7, [r7, #24]
 8004824:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004828:	4b80      	ldr	r3, [pc, #512]	; (8004a2c <get_Straj+0x524>)
 800482a:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 800482e:	4b6f      	ldr	r3, [pc, #444]	; (80049ec <get_Straj+0x4e4>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	497e      	ldr	r1, [pc, #504]	; (8004a30 <get_Straj+0x528>)
 8004836:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800483a:	4b7e      	ldr	r3, [pc, #504]	; (8004a34 <get_Straj+0x52c>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 84fb 	beq.w	800523a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004844:	4b77      	ldr	r3, [pc, #476]	; (8004a24 <get_Straj+0x51c>)
 8004846:	ed93 7b00 	vldr	d7, [r3]
 800484a:	eeb1 7b47 	vneg.f64	d7, d7
 800484e:	4b75      	ldr	r3, [pc, #468]	; (8004a24 <get_Straj+0x51c>)
 8004850:	ed83 7b00 	vstr	d7, [r3]
 8004854:	4b74      	ldr	r3, [pc, #464]	; (8004a28 <get_Straj+0x520>)
 8004856:	ed93 7b00 	vldr	d7, [r3]
 800485a:	eeb1 7b47 	vneg.f64	d7, d7
 800485e:	4b72      	ldr	r3, [pc, #456]	; (8004a28 <get_Straj+0x520>)
 8004860:	ed83 7b00 	vstr	d7, [r3]
 8004864:	4b71      	ldr	r3, [pc, #452]	; (8004a2c <get_Straj+0x524>)
 8004866:	ed93 7b00 	vldr	d7, [r3]
 800486a:	eeb1 7b47 	vneg.f64	d7, d7
 800486e:	4b6f      	ldr	r3, [pc, #444]	; (8004a2c <get_Straj+0x524>)
 8004870:	ed83 7b00 	vstr	d7, [r3]
 8004874:	4b6e      	ldr	r3, [pc, #440]	; (8004a30 <get_Straj+0x528>)
 8004876:	ed93 7b00 	vldr	d7, [r3]
 800487a:	eeb1 7b47 	vneg.f64	d7, d7
 800487e:	4b6c      	ldr	r3, [pc, #432]	; (8004a30 <get_Straj+0x528>)
 8004880:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004884:	4b6b      	ldr	r3, [pc, #428]	; (8004a34 <get_Straj+0x52c>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800488a:	f000 bcd6 	b.w	800523a <get_Straj+0xd32>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 800488e:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <get_Straj+0x4fc>)
 8004890:	ed93 7b00 	vldr	d7, [r3]
 8004894:	ed97 6b06 	vldr	d6, [r7, #24]
 8004898:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	f340 80ca 	ble.w	8004a38 <get_Straj+0x530>
 80048a4:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <get_Straj+0x50c>)
 80048a6:	ed93 6b00 	vldr	d6, [r3]
 80048aa:	4b56      	ldr	r3, [pc, #344]	; (8004a04 <get_Straj+0x4fc>)
 80048ac:	ed93 7b00 	vldr	d7, [r3]
 80048b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80048b4:	ed97 6b06 	vldr	d6, [r7, #24]
 80048b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	f200 80ba 	bhi.w	8004a38 <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 80048c4:	4b54      	ldr	r3, [pc, #336]	; (8004a18 <get_Straj+0x510>)
 80048c6:	ed93 6b00 	vldr	d6, [r3]
 80048ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80048ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80048d2:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <get_Straj+0x518>)
 80048d4:	ed93 7b00 	vldr	d7, [r3]
 80048d8:	ee36 8b07 	vadd.f64	d8, d6, d7
 80048dc:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <get_Straj+0x500>)
 80048de:	ed93 7b00 	vldr	d7, [r3]
 80048e2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80048e6:	ee87 9b06 	vdiv.f64	d9, d7, d6
 80048ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80048ee:	ed97 0b06 	vldr	d0, [r7, #24]
 80048f2:	f00c fbd9 	bl	80110a8 <pow>
 80048f6:	eeb0 7b40 	vmov.f64	d7, d0
 80048fa:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80048fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004902:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <get_Straj+0x4fc>)
 8004904:	ed93 7b00 	vldr	d7, [r3]
 8004908:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800490c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004910:	ed97 7b06 	vldr	d7, [r7, #24]
 8004914:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004918:	ee36 ab47 	vsub.f64	d10, d6, d7
 800491c:	4b39      	ldr	r3, [pc, #228]	; (8004a04 <get_Straj+0x4fc>)
 800491e:	ed93 7b00 	vldr	d7, [r3]
 8004922:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004926:	eeb0 0b47 	vmov.f64	d0, d7
 800492a:	f00c fbbd 	bl	80110a8 <pow>
 800492e:	eeb0 7b40 	vmov.f64	d7, d0
 8004932:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004936:	ee29 7b07 	vmul.f64	d7, d9, d7
 800493a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800493e:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <get_Straj+0x51c>)
 8004940:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+amax*(t-Tj1/2);
 8004944:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <get_Straj+0x4fc>)
 8004946:	ed93 6b00 	vldr	d6, [r3]
 800494a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800494e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004952:	ed97 6b06 	vldr	d6, [r7, #24]
 8004956:	ee36 6b47 	vsub.f64	d6, d6, d7
 800495a:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <get_Straj+0x4ec>)
 800495c:	ed93 7b00 	vldr	d7, [r3]
 8004960:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004964:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <get_Straj+0x510>)
 8004966:	ed93 7b00 	vldr	d7, [r3]
 800496a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800496e:	4b2e      	ldr	r3, [pc, #184]	; (8004a28 <get_Straj+0x520>)
 8004970:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <get_Straj+0x4e4>)
 8004976:	ed93 6b00 	vldr	d6, [r3]
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <get_Straj+0x4fc>)
 800497c:	ed93 7b00 	vldr	d7, [r3]
 8004980:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004984:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <get_Straj+0x524>)
 8004986:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 800498a:	4929      	ldr	r1, [pc, #164]	; (8004a30 <get_Straj+0x528>)
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8004998:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <get_Straj+0x52c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 844c 	beq.w	800523a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <get_Straj+0x51c>)
 80049a4:	ed93 7b00 	vldr	d7, [r3]
 80049a8:	eeb1 7b47 	vneg.f64	d7, d7
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <get_Straj+0x51c>)
 80049ae:	ed83 7b00 	vstr	d7, [r3]
 80049b2:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <get_Straj+0x520>)
 80049b4:	ed93 7b00 	vldr	d7, [r3]
 80049b8:	eeb1 7b47 	vneg.f64	d7, d7
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <get_Straj+0x520>)
 80049be:	ed83 7b00 	vstr	d7, [r3]
 80049c2:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <get_Straj+0x524>)
 80049c4:	ed93 7b00 	vldr	d7, [r3]
 80049c8:	eeb1 7b47 	vneg.f64	d7, d7
 80049cc:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <get_Straj+0x524>)
 80049ce:	ed83 7b00 	vstr	d7, [r3]
 80049d2:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <get_Straj+0x528>)
 80049d4:	ed93 7b00 	vldr	d7, [r3]
 80049d8:	eeb1 7b47 	vneg.f64	d7, d7
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <get_Straj+0x528>)
 80049de:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <get_Straj+0x52c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80049e8:	f000 bc27 	b.w	800523a <get_Straj+0xd32>
 80049ec:	24000008 	.word	0x24000008
 80049f0:	24000460 	.word	0x24000460
 80049f4:	24000020 	.word	0x24000020
 80049f8:	24000478 	.word	0x24000478
 80049fc:	24000010 	.word	0x24000010
 8004a00:	24000468 	.word	0x24000468
 8004a04:	24000838 	.word	0x24000838
 8004a08:	24000800 	.word	0x24000800
 8004a0c:	24000840 	.word	0x24000840
 8004a10:	24000808 	.word	0x24000808
 8004a14:	24000820 	.word	0x24000820
 8004a18:	24000018 	.word	0x24000018
 8004a1c:	24000810 	.word	0x24000810
 8004a20:	24000858 	.word	0x24000858
 8004a24:	24000440 	.word	0x24000440
 8004a28:	24000448 	.word	0x24000448
 8004a2c:	24000450 	.word	0x24000450
 8004a30:	24000458 	.word	0x24000458
 8004a34:	240007f8 	.word	0x240007f8
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004a38:	4b9c      	ldr	r3, [pc, #624]	; (8004cac <get_Straj+0x7a4>)
 8004a3a:	ed93 6b00 	vldr	d6, [r3]
 8004a3e:	4b9c      	ldr	r3, [pc, #624]	; (8004cb0 <get_Straj+0x7a8>)
 8004a40:	ed93 7b00 	vldr	d7, [r3]
 8004a44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a48:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	f340 80ac 	ble.w	8004bb0 <get_Straj+0x6a8>
 8004a58:	4b94      	ldr	r3, [pc, #592]	; (8004cac <get_Straj+0x7a4>)
 8004a5a:	ed93 7b00 	vldr	d7, [r3]
 8004a5e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	f200 80a1 	bhi.w	8004bb0 <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004a6e:	4b91      	ldr	r3, [pc, #580]	; (8004cb4 <get_Straj+0x7ac>)
 8004a70:	ed93 6b00 	vldr	d6, [r3]
 8004a74:	4b90      	ldr	r3, [pc, #576]	; (8004cb8 <get_Straj+0x7b0>)
 8004a76:	ed93 7b00 	vldr	d7, [r3]
 8004a7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a7e:	4b8b      	ldr	r3, [pc, #556]	; (8004cac <get_Straj+0x7a4>)
 8004a80:	ed93 7b00 	vldr	d7, [r3]
 8004a84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004a8c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004a90:	4b8a      	ldr	r3, [pc, #552]	; (8004cbc <get_Straj+0x7b4>)
 8004a92:	ed93 7b00 	vldr	d7, [r3]
 8004a96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a9a:	4b84      	ldr	r3, [pc, #528]	; (8004cac <get_Straj+0x7a4>)
 8004a9c:	ed93 5b00 	vldr	d5, [r3]
 8004aa0:	ed97 7b06 	vldr	d7, [r7, #24]
 8004aa4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004aa8:	4b82      	ldr	r3, [pc, #520]	; (8004cb4 <get_Straj+0x7ac>)
 8004aaa:	ed93 7b00 	vldr	d7, [r3]
 8004aae:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ab2:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004ab6:	4b7d      	ldr	r3, [pc, #500]	; (8004cac <get_Straj+0x7a4>)
 8004ab8:	ed93 6b00 	vldr	d6, [r3]
 8004abc:	ed97 7b06 	vldr	d7, [r7, #24]
 8004ac0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ac4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004ac8:	eeb0 0b47 	vmov.f64	d0, d7
 8004acc:	f00c faec 	bl	80110a8 <pow>
 8004ad0:	eeb0 6b40 	vmov.f64	d6, d0
 8004ad4:	4b7a      	ldr	r3, [pc, #488]	; (8004cc0 <get_Straj+0x7b8>)
 8004ad6:	ed93 7b00 	vldr	d7, [r3]
 8004ada:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004ade:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004ae2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ae6:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004aea:	4b76      	ldr	r3, [pc, #472]	; (8004cc4 <get_Straj+0x7bc>)
 8004aec:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 8004af0:	4b6e      	ldr	r3, [pc, #440]	; (8004cac <get_Straj+0x7a4>)
 8004af2:	ed93 6b00 	vldr	d6, [r3]
 8004af6:	ed97 7b06 	vldr	d7, [r7, #24]
 8004afa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004afe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b02:	eeb0 0b47 	vmov.f64	d0, d7
 8004b06:	f00c facf 	bl	80110a8 <pow>
 8004b0a:	eeb0 6b40 	vmov.f64	d6, d0
 8004b0e:	4b6c      	ldr	r3, [pc, #432]	; (8004cc0 <get_Straj+0x7b8>)
 8004b10:	ed93 7b00 	vldr	d7, [r3]
 8004b14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b1c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004b20:	4b69      	ldr	r3, [pc, #420]	; (8004cc8 <get_Straj+0x7c0>)
 8004b22:	ed93 7b00 	vldr	d7, [r3]
 8004b26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b2a:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <get_Straj+0x7c4>)
 8004b2c:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 8004b30:	4b63      	ldr	r3, [pc, #396]	; (8004cc0 <get_Straj+0x7b8>)
 8004b32:	ed93 7b00 	vldr	d7, [r3]
 8004b36:	eeb1 6b47 	vneg.f64	d6, d7
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <get_Straj+0x7a4>)
 8004b3c:	ed93 5b00 	vldr	d5, [r3]
 8004b40:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b44:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004b48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b4c:	4b60      	ldr	r3, [pc, #384]	; (8004cd0 <get_Straj+0x7c8>)
 8004b4e:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 8004b52:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <get_Straj+0x7b8>)
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	495e      	ldr	r1, [pc, #376]	; (8004cd4 <get_Straj+0x7cc>)
 8004b5a:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004b5e:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <get_Straj+0x7d0>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8369 	beq.w	800523a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004b68:	4b56      	ldr	r3, [pc, #344]	; (8004cc4 <get_Straj+0x7bc>)
 8004b6a:	ed93 7b00 	vldr	d7, [r3]
 8004b6e:	eeb1 7b47 	vneg.f64	d7, d7
 8004b72:	4b54      	ldr	r3, [pc, #336]	; (8004cc4 <get_Straj+0x7bc>)
 8004b74:	ed83 7b00 	vstr	d7, [r3]
 8004b78:	4b54      	ldr	r3, [pc, #336]	; (8004ccc <get_Straj+0x7c4>)
 8004b7a:	ed93 7b00 	vldr	d7, [r3]
 8004b7e:	eeb1 7b47 	vneg.f64	d7, d7
 8004b82:	4b52      	ldr	r3, [pc, #328]	; (8004ccc <get_Straj+0x7c4>)
 8004b84:	ed83 7b00 	vstr	d7, [r3]
 8004b88:	4b51      	ldr	r3, [pc, #324]	; (8004cd0 <get_Straj+0x7c8>)
 8004b8a:	ed93 7b00 	vldr	d7, [r3]
 8004b8e:	eeb1 7b47 	vneg.f64	d7, d7
 8004b92:	4b4f      	ldr	r3, [pc, #316]	; (8004cd0 <get_Straj+0x7c8>)
 8004b94:	ed83 7b00 	vstr	d7, [r3]
 8004b98:	4b4e      	ldr	r3, [pc, #312]	; (8004cd4 <get_Straj+0x7cc>)
 8004b9a:	ed93 7b00 	vldr	d7, [r3]
 8004b9e:	eeb1 7b47 	vneg.f64	d7, d7
 8004ba2:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <get_Straj+0x7cc>)
 8004ba4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	; (8004cd8 <get_Straj+0x7d0>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004bae:	e344      	b.n	800523a <get_Straj+0xd32>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004bb0:	4b3e      	ldr	r3, [pc, #248]	; (8004cac <get_Straj+0x7a4>)
 8004bb2:	ed93 7b00 	vldr	d7, [r3]
 8004bb6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004bba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	f340 808d 	ble.w	8004ce0 <get_Straj+0x7d8>
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <get_Straj+0x7a4>)
 8004bc8:	ed93 6b00 	vldr	d6, [r3]
 8004bcc:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <get_Straj+0x7d4>)
 8004bce:	ed93 7b00 	vldr	d7, [r3]
 8004bd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004bd6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004bda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be2:	d87d      	bhi.n	8004ce0 <get_Straj+0x7d8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004be4:	4b33      	ldr	r3, [pc, #204]	; (8004cb4 <get_Straj+0x7ac>)
 8004be6:	ed93 6b00 	vldr	d6, [r3]
 8004bea:	4b33      	ldr	r3, [pc, #204]	; (8004cb8 <get_Straj+0x7b0>)
 8004bec:	ed93 7b00 	vldr	d7, [r3]
 8004bf0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <get_Straj+0x7a4>)
 8004bf6:	ed93 7b00 	vldr	d7, [r3]
 8004bfa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bfe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c02:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004c06:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <get_Straj+0x7b4>)
 8004c08:	ed93 7b00 	vldr	d7, [r3]
 8004c0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <get_Straj+0x7a4>)
 8004c12:	ed93 7b00 	vldr	d7, [r3]
 8004c16:	ed97 5b06 	vldr	d5, [r7, #24]
 8004c1a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004c1e:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <get_Straj+0x7ac>)
 8004c20:	ed93 7b00 	vldr	d7, [r3]
 8004c24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <get_Straj+0x7bc>)
 8004c2e:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax;
 8004c32:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <get_Straj+0x7c0>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	4924      	ldr	r1, [pc, #144]	; (8004ccc <get_Straj+0x7c4>)
 8004c3a:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8004c3e:	4924      	ldr	r1, [pc, #144]	; (8004cd0 <get_Straj+0x7c8>)
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8004c4c:	4921      	ldr	r1, [pc, #132]	; (8004cd4 <get_Straj+0x7cc>)
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <get_Straj+0x7d0>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 82eb 	beq.w	800523a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004c64:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <get_Straj+0x7bc>)
 8004c66:	ed93 7b00 	vldr	d7, [r3]
 8004c6a:	eeb1 7b47 	vneg.f64	d7, d7
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <get_Straj+0x7bc>)
 8004c70:	ed83 7b00 	vstr	d7, [r3]
 8004c74:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <get_Straj+0x7c4>)
 8004c76:	ed93 7b00 	vldr	d7, [r3]
 8004c7a:	eeb1 7b47 	vneg.f64	d7, d7
 8004c7e:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <get_Straj+0x7c4>)
 8004c80:	ed83 7b00 	vstr	d7, [r3]
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <get_Straj+0x7c8>)
 8004c86:	ed93 7b00 	vldr	d7, [r3]
 8004c8a:	eeb1 7b47 	vneg.f64	d7, d7
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <get_Straj+0x7c8>)
 8004c90:	ed83 7b00 	vstr	d7, [r3]
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <get_Straj+0x7cc>)
 8004c96:	ed93 7b00 	vldr	d7, [r3]
 8004c9a:	eeb1 7b47 	vneg.f64	d7, d7
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <get_Straj+0x7cc>)
 8004ca0:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <get_Straj+0x7d0>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004caa:	e2c6      	b.n	800523a <get_Straj+0xd32>
 8004cac:	24000820 	.word	0x24000820
 8004cb0:	24000838 	.word	0x24000838
 8004cb4:	24000810 	.word	0x24000810
 8004cb8:	24000018 	.word	0x24000018
 8004cbc:	24000858 	.word	0x24000858
 8004cc0:	24000460 	.word	0x24000460
 8004cc4:	24000440 	.word	0x24000440
 8004cc8:	24000010 	.word	0x24000010
 8004ccc:	24000448 	.word	0x24000448
 8004cd0:	24000450 	.word	0x24000450
 8004cd4:	24000458 	.word	0x24000458
 8004cd8:	240007f8 	.word	0x240007f8
 8004cdc:	24000830 	.word	0x24000830
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004ce0:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <get_Straj+0x98c>)
 8004ce2:	ed93 6b00 	vldr	d6, [r3]
 8004ce6:	4b6c      	ldr	r3, [pc, #432]	; (8004e98 <get_Straj+0x990>)
 8004ce8:	ed93 7b00 	vldr	d7, [r3]
 8004cec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cf0:	ed97 6b06 	vldr	d6, [r7, #24]
 8004cf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfc:	f2c0 80e4 	blt.w	8004ec8 <get_Straj+0x9c0>
 8004d00:	4b64      	ldr	r3, [pc, #400]	; (8004e94 <get_Straj+0x98c>)
 8004d02:	ed93 6b00 	vldr	d6, [r3]
 8004d06:	4b64      	ldr	r3, [pc, #400]	; (8004e98 <get_Straj+0x990>)
 8004d08:	ed93 7b00 	vldr	d7, [r3]
 8004d0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d10:	4b62      	ldr	r3, [pc, #392]	; (8004e9c <get_Straj+0x994>)
 8004d12:	ed93 7b00 	vldr	d7, [r3]
 8004d16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d1a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d26:	f200 80cf 	bhi.w	8004ec8 <get_Straj+0x9c0>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004d2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ea0 <get_Straj+0x998>)
 8004d2c:	ed93 6b00 	vldr	d6, [r3]
 8004d30:	4b5c      	ldr	r3, [pc, #368]	; (8004ea4 <get_Straj+0x99c>)
 8004d32:	ed93 5b00 	vldr	d5, [r3]
 8004d36:	4b5c      	ldr	r3, [pc, #368]	; (8004ea8 <get_Straj+0x9a0>)
 8004d38:	ed93 7b00 	vldr	d7, [r3]
 8004d3c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004d40:	4b55      	ldr	r3, [pc, #340]	; (8004e98 <get_Straj+0x990>)
 8004d42:	ed93 7b00 	vldr	d7, [r3]
 8004d46:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004d4a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004d4e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004d52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d56:	4b4f      	ldr	r3, [pc, #316]	; (8004e94 <get_Straj+0x98c>)
 8004d58:	ed93 7b00 	vldr	d7, [r3]
 8004d5c:	ed97 5b06 	vldr	d5, [r7, #24]
 8004d60:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004d64:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <get_Straj+0x990>)
 8004d66:	ed93 7b00 	vldr	d7, [r3]
 8004d6a:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004d6e:	4b4d      	ldr	r3, [pc, #308]	; (8004ea4 <get_Straj+0x99c>)
 8004d70:	ed93 7b00 	vldr	d7, [r3]
 8004d74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d78:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004d7c:	4b45      	ldr	r3, [pc, #276]	; (8004e94 <get_Straj+0x98c>)
 8004d7e:	ed93 7b00 	vldr	d7, [r3]
 8004d82:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d8a:	4b43      	ldr	r3, [pc, #268]	; (8004e98 <get_Straj+0x990>)
 8004d8c:	ed93 7b00 	vldr	d7, [r3]
 8004d90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d94:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004d98:	eeb0 0b47 	vmov.f64	d0, d7
 8004d9c:	f00c f984 	bl	80110a8 <pow>
 8004da0:	eeb0 7b40 	vmov.f64	d7, d0
 8004da4:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004da8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004dac:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <get_Straj+0x9a4>)
 8004dae:	ed93 7b00 	vldr	d7, [r3]
 8004db2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004db6:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004dba:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <get_Straj+0x9a8>)
 8004dbc:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8004dc0:	4b38      	ldr	r3, [pc, #224]	; (8004ea4 <get_Straj+0x99c>)
 8004dc2:	ed93 8b00 	vldr	d8, [r3]
 8004dc6:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <get_Straj+0x98c>)
 8004dc8:	ed93 7b00 	vldr	d7, [r3]
 8004dcc:	ed97 6b06 	vldr	d6, [r7, #24]
 8004dd0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004dd4:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <get_Straj+0x990>)
 8004dd6:	ed93 7b00 	vldr	d7, [r3]
 8004dda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dde:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004de2:	eeb0 0b47 	vmov.f64	d0, d7
 8004de6:	f00c f95f 	bl	80110a8 <pow>
 8004dea:	eeb0 7b40 	vmov.f64	d7, d0
 8004dee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004df2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004df6:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <get_Straj+0x9a4>)
 8004df8:	ed93 7b00 	vldr	d7, [r3]
 8004dfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e00:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004e04:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <get_Straj+0x9ac>)
 8004e06:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 8004e0a:	4b28      	ldr	r3, [pc, #160]	; (8004eac <get_Straj+0x9a4>)
 8004e0c:	ed93 7b00 	vldr	d7, [r3]
 8004e10:	eeb1 6b47 	vneg.f64	d6, d7
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <get_Straj+0x98c>)
 8004e16:	ed93 7b00 	vldr	d7, [r3]
 8004e1a:	ed97 5b06 	vldr	d5, [r7, #24]
 8004e1e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <get_Straj+0x990>)
 8004e24:	ed93 7b00 	vldr	d7, [r3]
 8004e28:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004e2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e30:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <get_Straj+0x9b0>)
 8004e32:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 8004e36:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <get_Straj+0x9b4>)
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	4920      	ldr	r1, [pc, #128]	; (8004ec0 <get_Straj+0x9b8>)
 8004e3e:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <get_Straj+0x9bc>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 81f7 	beq.w	800523a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004e4c:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <get_Straj+0x9a8>)
 8004e4e:	ed93 7b00 	vldr	d7, [r3]
 8004e52:	eeb1 7b47 	vneg.f64	d7, d7
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <get_Straj+0x9a8>)
 8004e58:	ed83 7b00 	vstr	d7, [r3]
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <get_Straj+0x9ac>)
 8004e5e:	ed93 7b00 	vldr	d7, [r3]
 8004e62:	eeb1 7b47 	vneg.f64	d7, d7
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <get_Straj+0x9ac>)
 8004e68:	ed83 7b00 	vstr	d7, [r3]
 8004e6c:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <get_Straj+0x9b0>)
 8004e6e:	ed93 7b00 	vldr	d7, [r3]
 8004e72:	eeb1 7b47 	vneg.f64	d7, d7
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <get_Straj+0x9b0>)
 8004e78:	ed83 7b00 	vstr	d7, [r3]
 8004e7c:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <get_Straj+0x9b8>)
 8004e7e:	ed93 7b00 	vldr	d7, [r3]
 8004e82:	eeb1 7b47 	vneg.f64	d7, d7
 8004e86:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <get_Straj+0x9b8>)
 8004e88:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <get_Straj+0x9bc>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004e92:	e1d2      	b.n	800523a <get_Straj+0xd32>
 8004e94:	24000818 	.word	0x24000818
 8004e98:	24000828 	.word	0x24000828
 8004e9c:	24000840 	.word	0x24000840
 8004ea0:	24000860 	.word	0x24000860
 8004ea4:	24000810 	.word	0x24000810
 8004ea8:	24000470 	.word	0x24000470
 8004eac:	24000008 	.word	0x24000008
 8004eb0:	24000440 	.word	0x24000440
 8004eb4:	24000448 	.word	0x24000448
 8004eb8:	24000450 	.word	0x24000450
 8004ebc:	24000460 	.word	0x24000460
 8004ec0:	24000458 	.word	0x24000458
 8004ec4:	240007f8 	.word	0x240007f8
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8004ec8:	4b7b      	ldr	r3, [pc, #492]	; (80050b8 <get_Straj+0xbb0>)
 8004eca:	ed93 6b00 	vldr	d6, [r3]
 8004ece:	4b7b      	ldr	r3, [pc, #492]	; (80050bc <get_Straj+0xbb4>)
 8004ed0:	ed93 7b00 	vldr	d7, [r3]
 8004ed4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004ed8:	4b79      	ldr	r3, [pc, #484]	; (80050c0 <get_Straj+0xbb8>)
 8004eda:	ed93 7b00 	vldr	d7, [r3]
 8004ede:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ee2:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	f340 80fd 	ble.w	80050ec <get_Straj+0xbe4>
 8004ef2:	4b71      	ldr	r3, [pc, #452]	; (80050b8 <get_Straj+0xbb0>)
 8004ef4:	ed93 6b00 	vldr	d6, [r3]
 8004ef8:	4b71      	ldr	r3, [pc, #452]	; (80050c0 <get_Straj+0xbb8>)
 8004efa:	ed93 7b00 	vldr	d7, [r3]
 8004efe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f02:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0e:	f200 80ed 	bhi.w	80050ec <get_Straj+0xbe4>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8004f12:	4b6c      	ldr	r3, [pc, #432]	; (80050c4 <get_Straj+0xbbc>)
 8004f14:	ed93 6b00 	vldr	d6, [r3]
 8004f18:	4b6b      	ldr	r3, [pc, #428]	; (80050c8 <get_Straj+0xbc0>)
 8004f1a:	ed93 5b00 	vldr	d5, [r3]
 8004f1e:	4b6b      	ldr	r3, [pc, #428]	; (80050cc <get_Straj+0xbc4>)
 8004f20:	ed93 7b00 	vldr	d7, [r3]
 8004f24:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f28:	4b64      	ldr	r3, [pc, #400]	; (80050bc <get_Straj+0xbb4>)
 8004f2a:	ed93 7b00 	vldr	d7, [r3]
 8004f2e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004f32:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004f36:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004f3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f3e:	4b5e      	ldr	r3, [pc, #376]	; (80050b8 <get_Straj+0xbb0>)
 8004f40:	ed93 7b00 	vldr	d7, [r3]
 8004f44:	ed97 5b06 	vldr	d5, [r7, #24]
 8004f48:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004f4c:	4b5b      	ldr	r3, [pc, #364]	; (80050bc <get_Straj+0xbb4>)
 8004f4e:	ed93 7b00 	vldr	d7, [r3]
 8004f52:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f56:	4b5c      	ldr	r3, [pc, #368]	; (80050c8 <get_Straj+0xbc0>)
 8004f58:	ed93 7b00 	vldr	d7, [r3]
 8004f5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004f60:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004f64:	4b5a      	ldr	r3, [pc, #360]	; (80050d0 <get_Straj+0xbc8>)
 8004f66:	ed93 7b00 	vldr	d7, [r3]
 8004f6a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004f6e:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8004f72:	4b51      	ldr	r3, [pc, #324]	; (80050b8 <get_Straj+0xbb0>)
 8004f74:	ed93 7b00 	vldr	d7, [r3]
 8004f78:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f80:	4b4e      	ldr	r3, [pc, #312]	; (80050bc <get_Straj+0xbb4>)
 8004f82:	ed93 7b00 	vldr	d7, [r3]
 8004f86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f8a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f8e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f92:	f00c f889 	bl	80110a8 <pow>
 8004f96:	eeb0 7b40 	vmov.f64	d7, d0
 8004f9a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004f9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <get_Straj+0xbb8>)
 8004fa4:	ed93 7b00 	vldr	d7, [r3]
 8004fa8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004fac:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004fb0:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <get_Straj+0xbb0>)
 8004fb2:	ed93 7b00 	vldr	d7, [r3]
 8004fb6:	ed97 4b06 	vldr	d4, [r7, #24]
 8004fba:	ee34 4b47 	vsub.f64	d4, d4, d7
 8004fbe:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <get_Straj+0xbb4>)
 8004fc0:	ed93 7b00 	vldr	d7, [r3]
 8004fc4:	ee34 7b07 	vadd.f64	d7, d4, d7
 8004fc8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004fcc:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004fd0:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <get_Straj+0xbb8>)
 8004fd2:	ed93 7b00 	vldr	d7, [r3]
 8004fd6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fda:	eeb0 0b47 	vmov.f64	d0, d7
 8004fde:	f00c f863 	bl	80110a8 <pow>
 8004fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8004fe6:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004fea:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004fee:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004ff2:	4b38      	ldr	r3, [pc, #224]	; (80050d4 <get_Straj+0xbcc>)
 8004ff4:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8004ff8:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <get_Straj+0xbb0>)
 8004ffa:	ed93 7b00 	vldr	d7, [r3]
 8004ffe:	ed97 6b06 	vldr	d6, [r7, #24]
 8005002:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005006:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <get_Straj+0xbb4>)
 8005008:	ed93 7b00 	vldr	d7, [r3]
 800500c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <get_Straj+0xbb8>)
 8005012:	ed93 5b00 	vldr	d5, [r3]
 8005016:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800501a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800501e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <get_Straj+0xbc8>)
 8005024:	ed93 7b00 	vldr	d7, [r3]
 8005028:	ee26 6b07 	vmul.f64	d6, d6, d7
 800502c:	4b26      	ldr	r3, [pc, #152]	; (80050c8 <get_Straj+0xbc0>)
 800502e:	ed93 7b00 	vldr	d7, [r3]
 8005032:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005036:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <get_Straj+0xbd0>)
 8005038:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 800503c:	4b27      	ldr	r3, [pc, #156]	; (80050dc <get_Straj+0xbd4>)
 800503e:	ed93 7b00 	vldr	d7, [r3]
 8005042:	eeb1 6b47 	vneg.f64	d6, d7
 8005046:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <get_Straj+0xbb8>)
 8005048:	ed93 7b00 	vldr	d7, [r3]
 800504c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005050:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <get_Straj+0xbd8>)
 8005052:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8005056:	4923      	ldr	r1, [pc, #140]	; (80050e4 <get_Straj+0xbdc>)
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005064:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <get_Straj+0xbe0>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80e6 	beq.w	800523a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <get_Straj+0xbcc>)
 8005070:	ed93 7b00 	vldr	d7, [r3]
 8005074:	eeb1 7b47 	vneg.f64	d7, d7
 8005078:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <get_Straj+0xbcc>)
 800507a:	ed83 7b00 	vstr	d7, [r3]
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <get_Straj+0xbd0>)
 8005080:	ed93 7b00 	vldr	d7, [r3]
 8005084:	eeb1 7b47 	vneg.f64	d7, d7
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <get_Straj+0xbd0>)
 800508a:	ed83 7b00 	vstr	d7, [r3]
 800508e:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <get_Straj+0xbd8>)
 8005090:	ed93 7b00 	vldr	d7, [r3]
 8005094:	eeb1 7b47 	vneg.f64	d7, d7
 8005098:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <get_Straj+0xbd8>)
 800509a:	ed83 7b00 	vstr	d7, [r3]
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <get_Straj+0xbdc>)
 80050a0:	ed93 7b00 	vldr	d7, [r3]
 80050a4:	eeb1 7b47 	vneg.f64	d7, d7
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <get_Straj+0xbdc>)
 80050aa:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <get_Straj+0xbe0>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80050b4:	e0c1      	b.n	800523a <get_Straj+0xd32>
 80050b6:	bf00      	nop
 80050b8:	24000818 	.word	0x24000818
 80050bc:	24000828 	.word	0x24000828
 80050c0:	24000840 	.word	0x24000840
 80050c4:	24000860 	.word	0x24000860
 80050c8:	24000810 	.word	0x24000810
 80050cc:	24000470 	.word	0x24000470
 80050d0:	24000808 	.word	0x24000808
 80050d4:	24000440 	.word	0x24000440
 80050d8:	24000448 	.word	0x24000448
 80050dc:	24000008 	.word	0x24000008
 80050e0:	24000450 	.word	0x24000450
 80050e4:	24000458 	.word	0x24000458
 80050e8:	240007f8 	.word	0x240007f8
        }

    } else if (t>T-Tj2 && t<=T){
 80050ec:	4b59      	ldr	r3, [pc, #356]	; (8005254 <get_Straj+0xd4c>)
 80050ee:	ed93 6b00 	vldr	d6, [r3]
 80050f2:	4b59      	ldr	r3, [pc, #356]	; (8005258 <get_Straj+0xd50>)
 80050f4:	ed93 7b00 	vldr	d7, [r3]
 80050f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80050fc:	ed97 6b06 	vldr	d6, [r7, #24]
 8005100:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	f340 8097 	ble.w	800523a <get_Straj+0xd32>
 800510c:	4b51      	ldr	r3, [pc, #324]	; (8005254 <get_Straj+0xd4c>)
 800510e:	ed93 7b00 	vldr	d7, [r3]
 8005112:	ed97 6b06 	vldr	d6, [r7, #24]
 8005116:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	f200 808c 	bhi.w	800523a <get_Straj+0xd32>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8005122:	4b4e      	ldr	r3, [pc, #312]	; (800525c <get_Straj+0xd54>)
 8005124:	ed93 6b00 	vldr	d6, [r3]
 8005128:	4b4a      	ldr	r3, [pc, #296]	; (8005254 <get_Straj+0xd4c>)
 800512a:	ed93 5b00 	vldr	d5, [r3]
 800512e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005132:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005136:	4b4a      	ldr	r3, [pc, #296]	; (8005260 <get_Straj+0xd58>)
 8005138:	ed93 7b00 	vldr	d7, [r3]
 800513c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005140:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005144:	4b43      	ldr	r3, [pc, #268]	; (8005254 <get_Straj+0xd4c>)
 8005146:	ed93 6b00 	vldr	d6, [r3]
 800514a:	ed97 7b06 	vldr	d7, [r7, #24]
 800514e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005152:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005156:	eeb0 0b47 	vmov.f64	d0, d7
 800515a:	f00b ffa5 	bl	80110a8 <pow>
 800515e:	eeb0 7b40 	vmov.f64	d7, d0
 8005162:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005166:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800516a:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <get_Straj+0xd5c>)
 800516c:	ed93 7b00 	vldr	d7, [r3]
 8005170:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005174:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005178:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <get_Straj+0xd60>)
 800517a:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 800517e:	4b35      	ldr	r3, [pc, #212]	; (8005254 <get_Straj+0xd4c>)
 8005180:	ed93 6b00 	vldr	d6, [r3]
 8005184:	ed97 7b06 	vldr	d7, [r7, #24]
 8005188:	ee36 7b47 	vsub.f64	d7, d6, d7
 800518c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005190:	eeb0 0b47 	vmov.f64	d0, d7
 8005194:	f00b ff88 	bl	80110a8 <pow>
 8005198:	eeb0 6b40 	vmov.f64	d6, d0
 800519c:	4b31      	ldr	r3, [pc, #196]	; (8005264 <get_Straj+0xd5c>)
 800519e:	ed93 7b00 	vldr	d7, [r3]
 80051a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80051aa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80051ae:	4b2c      	ldr	r3, [pc, #176]	; (8005260 <get_Straj+0xd58>)
 80051b0:	ed93 7b00 	vldr	d7, [r3]
 80051b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051b8:	4b2c      	ldr	r3, [pc, #176]	; (800526c <get_Straj+0xd64>)
 80051ba:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 80051be:	4b29      	ldr	r3, [pc, #164]	; (8005264 <get_Straj+0xd5c>)
 80051c0:	ed93 7b00 	vldr	d7, [r3]
 80051c4:	eeb1 6b47 	vneg.f64	d6, d7
 80051c8:	4b22      	ldr	r3, [pc, #136]	; (8005254 <get_Straj+0xd4c>)
 80051ca:	ed93 5b00 	vldr	d5, [r3]
 80051ce:	ed97 7b06 	vldr	d7, [r7, #24]
 80051d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80051d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051da:	4b25      	ldr	r3, [pc, #148]	; (8005270 <get_Straj+0xd68>)
 80051dc:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 80051e0:	4b20      	ldr	r3, [pc, #128]	; (8005264 <get_Straj+0xd5c>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	4923      	ldr	r1, [pc, #140]	; (8005274 <get_Straj+0xd6c>)
 80051e8:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80051ec:	4b22      	ldr	r3, [pc, #136]	; (8005278 <get_Straj+0xd70>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d022      	beq.n	800523a <get_Straj+0xd32>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <get_Straj+0xd60>)
 80051f6:	ed93 7b00 	vldr	d7, [r3]
 80051fa:	eeb1 7b47 	vneg.f64	d7, d7
 80051fe:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <get_Straj+0xd60>)
 8005200:	ed83 7b00 	vstr	d7, [r3]
 8005204:	4b19      	ldr	r3, [pc, #100]	; (800526c <get_Straj+0xd64>)
 8005206:	ed93 7b00 	vldr	d7, [r3]
 800520a:	eeb1 7b47 	vneg.f64	d7, d7
 800520e:	4b17      	ldr	r3, [pc, #92]	; (800526c <get_Straj+0xd64>)
 8005210:	ed83 7b00 	vstr	d7, [r3]
 8005214:	4b16      	ldr	r3, [pc, #88]	; (8005270 <get_Straj+0xd68>)
 8005216:	ed93 7b00 	vldr	d7, [r3]
 800521a:	eeb1 7b47 	vneg.f64	d7, d7
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <get_Straj+0xd68>)
 8005220:	ed83 7b00 	vstr	d7, [r3]
 8005224:	4b13      	ldr	r3, [pc, #76]	; (8005274 <get_Straj+0xd6c>)
 8005226:	ed93 7b00 	vldr	d7, [r3]
 800522a:	eeb1 7b47 	vneg.f64	d7, d7
 800522e:	4b11      	ldr	r3, [pc, #68]	; (8005274 <get_Straj+0xd6c>)
 8005230:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005234:	4b10      	ldr	r3, [pc, #64]	; (8005278 <get_Straj+0xd70>)
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <get_Straj+0xd64>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	ec43 2b17 	vmov	d7, r2, r3
}
 8005244:	eeb0 0b47 	vmov.f64	d0, d7
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	ecbd 8b06 	vpop	{d8-d10}
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	24000818 	.word	0x24000818
 8005258:	24000840 	.word	0x24000840
 800525c:	24000860 	.word	0x24000860
 8005260:	24000470 	.word	0x24000470
 8005264:	24000008 	.word	0x24000008
 8005268:	24000440 	.word	0x24000440
 800526c:	24000448 	.word	0x24000448
 8005270:	24000450 	.word	0x24000450
 8005274:	24000458 	.word	0x24000458
 8005278:	240007f8 	.word	0x240007f8
 800527c:	00000000 	.word	0x00000000

08005280 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8005280:	b580      	push	{r7, lr}
 8005282:	ed2d 8b04 	vpush	{d8-d9}
 8005286:	b092      	sub	sp, #72	; 0x48
 8005288:	af00      	add	r7, sp, #0
 800528a:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 800528e:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8005292:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8005296:	ed87 3b08 	vstr	d3, [r7, #32]
 800529a:	ed87 4b06 	vstr	d4, [r7, #24]
 800529e:	ed87 5b04 	vstr	d5, [r7, #16]
 80052a2:	ed87 6b02 	vstr	d6, [r7, #8]
 80052a6:	6078      	str	r0, [r7, #4]

	jmin = -jmax;
 80052a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80052ac:	eeb1 7b47 	vneg.f64	d7, d7
 80052b0:	4b9e      	ldr	r3, [pc, #632]	; (800552c <update_ScurveTraj+0x2ac>)
 80052b2:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 80052b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80052ba:	eeb1 7b47 	vneg.f64	d7, d7
 80052be:	4b9c      	ldr	r3, [pc, #624]	; (8005530 <update_ScurveTraj+0x2b0>)
 80052c0:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 80052c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80052c8:	eeb1 7b47 	vneg.f64	d7, d7
 80052cc:	4b99      	ldr	r3, [pc, #612]	; (8005534 <update_ScurveTraj+0x2b4>)
 80052ce:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 80052d2:	4999      	ldr	r1, [pc, #612]	; (8005538 <update_ScurveTraj+0x2b8>)
 80052d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052d8:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 80052dc:	4997      	ldr	r1, [pc, #604]	; (800553c <update_ScurveTraj+0x2bc>)
 80052de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052e2:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 80052e6:	4b95      	ldr	r3, [pc, #596]	; (800553c <update_ScurveTraj+0x2bc>)
 80052e8:	ed93 6b00 	vldr	d6, [r3]
 80052ec:	4b92      	ldr	r3, [pc, #584]	; (8005538 <update_ScurveTraj+0x2b8>)
 80052ee:	ed93 7b00 	vldr	d7, [r3]
 80052f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	d548      	bpl.n	800538e <update_ScurveTraj+0x10e>

		flagInv = true;
 80052fc:	4b90      	ldr	r3, [pc, #576]	; (8005540 <update_ScurveTraj+0x2c0>)
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 8005302:	4b8d      	ldr	r3, [pc, #564]	; (8005538 <update_ScurveTraj+0x2b8>)
 8005304:	ed93 7b00 	vldr	d7, [r3]
 8005308:	eeb1 7b47 	vneg.f64	d7, d7
 800530c:	4b8a      	ldr	r3, [pc, #552]	; (8005538 <update_ScurveTraj+0x2b8>)
 800530e:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 8005312:	4b8a      	ldr	r3, [pc, #552]	; (800553c <update_ScurveTraj+0x2bc>)
 8005314:	ed93 7b00 	vldr	d7, [r3]
 8005318:	eeb1 7b47 	vneg.f64	d7, d7
 800531c:	4b87      	ldr	r3, [pc, #540]	; (800553c <update_ScurveTraj+0x2bc>)
 800531e:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 8005322:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005326:	eeb1 7b47 	vneg.f64	d7, d7
 800532a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 800532e:	ed97 7b08 	vldr	d7, [r7, #32]
 8005332:	eeb1 7b47 	vneg.f64	d7, d7
 8005336:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 800533a:	4b7e      	ldr	r3, [pc, #504]	; (8005534 <update_ScurveTraj+0x2b4>)
 800533c:	ed93 7b00 	vldr	d7, [r3]
 8005340:	eeb1 7b47 	vneg.f64	d7, d7
 8005344:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 8005348:	ed97 7b06 	vldr	d7, [r7, #24]
 800534c:	eeb1 7b47 	vneg.f64	d7, d7
 8005350:	4b78      	ldr	r3, [pc, #480]	; (8005534 <update_ScurveTraj+0x2b4>)
 8005352:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8005356:	4b76      	ldr	r3, [pc, #472]	; (8005530 <update_ScurveTraj+0x2b0>)
 8005358:	ed93 7b00 	vldr	d7, [r3]
 800535c:	eeb1 7b47 	vneg.f64	d7, d7
 8005360:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 8005364:	ed97 7b04 	vldr	d7, [r7, #16]
 8005368:	eeb1 7b47 	vneg.f64	d7, d7
 800536c:	4b70      	ldr	r3, [pc, #448]	; (8005530 <update_ScurveTraj+0x2b0>)
 800536e:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8005372:	4b6e      	ldr	r3, [pc, #440]	; (800552c <update_ScurveTraj+0x2ac>)
 8005374:	ed93 7b00 	vldr	d7, [r3]
 8005378:	eeb1 7b47 	vneg.f64	d7, d7
 800537c:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 8005380:	ed97 7b02 	vldr	d7, [r7, #8]
 8005384:	eeb1 7b47 	vneg.f64	d7, d7
 8005388:	4b68      	ldr	r3, [pc, #416]	; (800552c <update_ScurveTraj+0x2ac>)
 800538a:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 800538e:	ed97 6b08 	vldr	d6, [r7, #32]
 8005392:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005396:	ee36 7b47 	vsub.f64	d7, d6, d7
 800539a:	eeb0 6bc7 	vabs.f64	d6, d7
 800539e:	ed97 7b02 	vldr	d7, [r7, #8]
 80053a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80053a6:	eeb0 0b45 	vmov.f64	d0, d5
 80053aa:	f00c f8fd 	bl	80115a8 <sqrt>
 80053ae:	eeb0 4b40 	vmov.f64	d4, d0
 80053b2:	ed97 5b04 	vldr	d5, [r7, #16]
 80053b6:	ed97 6b02 	vldr	d6, [r7, #8]
 80053ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80053be:	eeb4 4bc7 	vcmpe.f64	d4, d7
 80053c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c6:	d512      	bpl.n	80053ee <update_ScurveTraj+0x16e>
 80053c8:	ed97 6b08 	vldr	d6, [r7, #32]
 80053cc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80053d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80053d4:	eeb0 6bc7 	vabs.f64	d6, d7
 80053d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80053dc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80053e0:	eeb0 0b45 	vmov.f64	d0, d5
 80053e4:	f00c f8e0 	bl	80115a8 <sqrt>
 80053e8:	eeb0 7b40 	vmov.f64	d7, d0
 80053ec:	e005      	b.n	80053fa <update_ScurveTraj+0x17a>
 80053ee:	ed97 5b04 	vldr	d5, [r7, #16]
 80053f2:	ed97 6b02 	vldr	d6, [r7, #8]
 80053f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80053fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80053fe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 8005402:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005406:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800540a:	ed97 4b04 	vldr	d4, [r7, #16]
 800540e:	ed97 5b02 	vldr	d5, [r7, #8]
 8005412:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	d400      	bmi.n	8005422 <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8005420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8005422:	ed97 6b06 	vldr	d6, [r7, #24]
 8005426:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800542a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800542e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005432:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005436:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800543a:	ed97 0b04 	vldr	d0, [r7, #16]
 800543e:	f00b fe33 	bl	80110a8 <pow>
 8005442:	eeb0 7b40 	vmov.f64	d7, d0
 8005446:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	d51d      	bpl.n	800548c <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8005450:	ed97 6b06 	vldr	d6, [r7, #24]
 8005454:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005458:	ee36 7b47 	vsub.f64	d7, d6, d7
 800545c:	eeb0 6bc7 	vabs.f64	d6, d7
 8005460:	ed97 7b02 	vldr	d7, [r7, #8]
 8005464:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005468:	eeb0 0b45 	vmov.f64	d0, d5
 800546c:	f00c f89c 	bl	80115a8 <sqrt>
 8005470:	eeb0 7b40 	vmov.f64	d7, d0
 8005474:	4b33      	ldr	r3, [pc, #204]	; (8005544 <update_ScurveTraj+0x2c4>)
 8005476:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 800547a:	4b32      	ldr	r3, [pc, #200]	; (8005544 <update_ScurveTraj+0x2c4>)
 800547c:	ed93 7b00 	vldr	d7, [r3]
 8005480:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005484:	4b30      	ldr	r3, [pc, #192]	; (8005548 <update_ScurveTraj+0x2c8>)
 8005486:	ed83 7b00 	vstr	d7, [r3]
 800548a:	e01a      	b.n	80054c2 <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 800548c:	ed97 5b04 	vldr	d5, [r7, #16]
 8005490:	ed97 6b02 	vldr	d6, [r7, #8]
 8005494:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005498:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <update_ScurveTraj+0x2c4>)
 800549a:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 800549e:	ed97 6b06 	vldr	d6, [r7, #24]
 80054a2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80054a6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80054aa:	ed97 7b04 	vldr	d7, [r7, #16]
 80054ae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054b2:	4b24      	ldr	r3, [pc, #144]	; (8005544 <update_ScurveTraj+0x2c4>)
 80054b4:	ed93 7b00 	vldr	d7, [r3]
 80054b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054bc:	4b22      	ldr	r3, [pc, #136]	; (8005548 <update_ScurveTraj+0x2c8>)
 80054be:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 80054c2:	ed97 6b06 	vldr	d6, [r7, #24]
 80054c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80054ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80054ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80054d2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80054d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054da:	ed97 0b04 	vldr	d0, [r7, #16]
 80054de:	f00b fde3 	bl	80110a8 <pow>
 80054e2:	eeb0 7b40 	vmov.f64	d7, d0
 80054e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	d531      	bpl.n	8005554 <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 80054f0:	ed97 6b06 	vldr	d6, [r7, #24]
 80054f4:	ed97 7b08 	vldr	d7, [r7, #32]
 80054f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054fc:	eeb0 6bc7 	vabs.f64	d6, d7
 8005500:	ed97 7b02 	vldr	d7, [r7, #8]
 8005504:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005508:	eeb0 0b45 	vmov.f64	d0, d5
 800550c:	f00c f84c 	bl	80115a8 <sqrt>
 8005510:	eeb0 7b40 	vmov.f64	d7, d0
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <update_ScurveTraj+0x2cc>)
 8005516:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <update_ScurveTraj+0x2cc>)
 800551c:	ed93 7b00 	vldr	d7, [r3]
 8005520:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <update_ScurveTraj+0x2d0>)
 8005526:	ed83 7b00 	vstr	d7, [r3]
 800552a:	e02e      	b.n	800558a <update_ScurveTraj+0x30a>
 800552c:	24000460 	.word	0x24000460
 8005530:	24000478 	.word	0x24000478
 8005534:	24000468 	.word	0x24000468
 8005538:	24000858 	.word	0x24000858
 800553c:	24000860 	.word	0x24000860
 8005540:	240007f8 	.word	0x240007f8
 8005544:	24000838 	.word	0x24000838
 8005548:	24000820 	.word	0x24000820
 800554c:	24000840 	.word	0x24000840
 8005550:	24000828 	.word	0x24000828
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8005554:	ed97 5b04 	vldr	d5, [r7, #16]
 8005558:	ed97 6b02 	vldr	d6, [r7, #8]
 800555c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005560:	4b95      	ldr	r3, [pc, #596]	; (80057b8 <update_ScurveTraj+0x538>)
 8005562:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 8005566:	ed97 6b06 	vldr	d6, [r7, #24]
 800556a:	ed97 7b08 	vldr	d7, [r7, #32]
 800556e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005572:	ed97 7b04 	vldr	d7, [r7, #16]
 8005576:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800557a:	4b8f      	ldr	r3, [pc, #572]	; (80057b8 <update_ScurveTraj+0x538>)
 800557c:	ed93 7b00 	vldr	d7, [r3]
 8005580:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005584:	4b8d      	ldr	r3, [pc, #564]	; (80057bc <update_ScurveTraj+0x53c>)
 8005586:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 800558a:	4b8d      	ldr	r3, [pc, #564]	; (80057c0 <update_ScurveTraj+0x540>)
 800558c:	ed93 6b00 	vldr	d6, [r3]
 8005590:	4b8c      	ldr	r3, [pc, #560]	; (80057c4 <update_ScurveTraj+0x544>)
 8005592:	ed93 7b00 	vldr	d7, [r3]
 8005596:	ee36 5b47 	vsub.f64	d5, d6, d7
 800559a:	ed97 7b06 	vldr	d7, [r7, #24]
 800559e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80055a2:	4b89      	ldr	r3, [pc, #548]	; (80057c8 <update_ScurveTraj+0x548>)
 80055a4:	ed93 7b00 	vldr	d7, [r3]
 80055a8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80055ac:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80055b0:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80055b4:	ed97 4b06 	vldr	d4, [r7, #24]
 80055b8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80055bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80055c0:	ee37 7b04 	vadd.f64	d7, d7, d4
 80055c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80055c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80055cc:	4b7b      	ldr	r3, [pc, #492]	; (80057bc <update_ScurveTraj+0x53c>)
 80055ce:	ed93 7b00 	vldr	d7, [r3]
 80055d2:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80055d6:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80055da:	ed97 3b08 	vldr	d3, [r7, #32]
 80055de:	ed97 4b06 	vldr	d4, [r7, #24]
 80055e2:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80055e6:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80055ea:	ee37 7b04 	vadd.f64	d7, d7, d4
 80055ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80055f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80055f6:	4b75      	ldr	r3, [pc, #468]	; (80057cc <update_ScurveTraj+0x54c>)
 80055f8:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 80055fc:	4b73      	ldr	r3, [pc, #460]	; (80057cc <update_ScurveTraj+0x54c>)
 80055fe:	ed93 7b00 	vldr	d7, [r3]
 8005602:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560a:	f300 82d5 	bgt.w	8005bb8 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 800560e:	ed97 5b04 	vldr	d5, [r7, #16]
 8005612:	ed97 6b02 	vldr	d6, [r7, #8]
 8005616:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800561a:	4b6d      	ldr	r3, [pc, #436]	; (80057d0 <update_ScurveTraj+0x550>)
 800561c:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 8005620:	4b6b      	ldr	r3, [pc, #428]	; (80057d0 <update_ScurveTraj+0x550>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	4964      	ldr	r1, [pc, #400]	; (80057b8 <update_ScurveTraj+0x538>)
 8005628:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 800562c:	4b68      	ldr	r3, [pc, #416]	; (80057d0 <update_ScurveTraj+0x550>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	4968      	ldr	r1, [pc, #416]	; (80057d4 <update_ScurveTraj+0x554>)
 8005634:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005638:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 800563c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005640:	f00b fd32 	bl	80110a8 <pow>
 8005644:	eeb0 9b40 	vmov.f64	d9, d0
 8005648:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800564c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005650:	f00b fd2a 	bl	80110a8 <pow>
 8005654:	eeb0 7b40 	vmov.f64	d7, d0
 8005658:	ee89 8b07 	vdiv.f64	d8, d9, d7
 800565c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005660:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8005664:	f00b fd20 	bl	80110a8 <pow>
 8005668:	eeb0 9b40 	vmov.f64	d9, d0
 800566c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005670:	ed97 0b08 	vldr	d0, [r7, #32]
 8005674:	f00b fd18 	bl	80110a8 <pow>
 8005678:	eeb0 7b40 	vmov.f64	d7, d0
 800567c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005680:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005684:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005688:	4b4d      	ldr	r3, [pc, #308]	; (80057c0 <update_ScurveTraj+0x540>)
 800568a:	ed93 5b00 	vldr	d5, [r3]
 800568e:	4b4d      	ldr	r3, [pc, #308]	; (80057c4 <update_ScurveTraj+0x544>)
 8005690:	ed93 7b00 	vldr	d7, [r3]
 8005694:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005698:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800569c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80056a0:	ed97 3b04 	vldr	d3, [r7, #16]
 80056a4:	ed97 4b02 	vldr	d4, [r7, #8]
 80056a8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80056ac:	ee37 4b07 	vadd.f64	d4, d7, d7
 80056b0:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80056b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80056b8:	ee33 7b07 	vadd.f64	d7, d3, d7
 80056bc:	ee24 7b07 	vmul.f64	d7, d4, d7
 80056c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80056c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80056c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80056cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056d0:	4b41      	ldr	r3, [pc, #260]	; (80057d8 <update_ScurveTraj+0x558>)
 80056d2:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80056d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056da:	ed97 0b04 	vldr	d0, [r7, #16]
 80056de:	f00b fce3 	bl	80110a8 <pow>
 80056e2:	eeb0 5b40 	vmov.f64	d5, d0
 80056e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80056ea:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80056ee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80056f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056f6:	ee36 8b47 	vsub.f64	d8, d6, d7
 80056fa:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <update_ScurveTraj+0x558>)
 80056fc:	ed93 7b00 	vldr	d7, [r3]
 8005700:	eeb0 0b47 	vmov.f64	d0, d7
 8005704:	f00b ff50 	bl	80115a8 <sqrt>
 8005708:	eeb0 7b40 	vmov.f64	d7, d0
 800570c:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005710:	ed97 7b04 	vldr	d7, [r7, #16]
 8005714:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005718:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <update_ScurveTraj+0x548>)
 800571e:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005722:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005726:	ed97 0b04 	vldr	d0, [r7, #16]
 800572a:	f00b fcbd 	bl	80110a8 <pow>
 800572e:	eeb0 5b40 	vmov.f64	d5, d0
 8005732:	ed97 7b02 	vldr	d7, [r7, #8]
 8005736:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800573a:	ed97 7b08 	vldr	d7, [r7, #32]
 800573e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005742:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005746:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <update_ScurveTraj+0x558>)
 8005748:	ed93 7b00 	vldr	d7, [r3]
 800574c:	eeb0 0b47 	vmov.f64	d0, d7
 8005750:	f00b ff2a 	bl	80115a8 <sqrt>
 8005754:	eeb0 7b40 	vmov.f64	d7, d0
 8005758:	ee38 5b07 	vadd.f64	d5, d8, d7
 800575c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005760:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005764:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <update_ScurveTraj+0x53c>)
 800576a:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 800576e:	4917      	ldr	r1, [pc, #92]	; (80057cc <update_ScurveTraj+0x54c>)
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 800577c:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <update_ScurveTraj+0x554>)
 800577e:	ed93 7b00 	vldr	d7, [r3]
 8005782:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <update_ScurveTraj+0x548>)
 8005788:	ed93 7b00 	vldr	d7, [r3]
 800578c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005794:	f300 81e4 	bgt.w	8005b60 <update_ScurveTraj+0x8e0>
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <update_ScurveTraj+0x554>)
 800579a:	ed93 7b00 	vldr	d7, [r3]
 800579e:	ee37 6b07 	vadd.f64	d6, d7, d7
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <update_ScurveTraj+0x53c>)
 80057a4:	ed93 7b00 	vldr	d7, [r3]
 80057a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	f340 8202 	ble.w	8005bb8 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 80057b4:	e1d4      	b.n	8005b60 <update_ScurveTraj+0x8e0>
 80057b6:	bf00      	nop
 80057b8:	24000840 	.word	0x24000840
 80057bc:	24000828 	.word	0x24000828
 80057c0:	24000860 	.word	0x24000860
 80057c4:	24000858 	.word	0x24000858
 80057c8:	24000820 	.word	0x24000820
 80057cc:	24000830 	.word	0x24000830
 80057d0:	24000838 	.word	0x24000838
 80057d4:	24000848 	.word	0x24000848
 80057d8:	24000850 	.word	0x24000850

				amax=amax*0.99;
 80057dc:	ed97 7b04 	vldr	d7, [r7, #16]
 80057e0:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8005b38 <update_ScurveTraj+0x8b8>
 80057e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80057e8:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 80057ec:	ed97 5b04 	vldr	d5, [r7, #16]
 80057f0:	ed97 6b02 	vldr	d6, [r7, #8]
 80057f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057f8:	4bd1      	ldr	r3, [pc, #836]	; (8005b40 <update_ScurveTraj+0x8c0>)
 80057fa:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80057fe:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005802:	ed97 0b04 	vldr	d0, [r7, #16]
 8005806:	f00b fc4f 	bl	80110a8 <pow>
 800580a:	eeb0 9b40 	vmov.f64	d9, d0
 800580e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005812:	ed97 0b02 	vldr	d0, [r7, #8]
 8005816:	f00b fc47 	bl	80110a8 <pow>
 800581a:	eeb0 7b40 	vmov.f64	d7, d0
 800581e:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005822:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005826:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800582a:	f00b fc3d 	bl	80110a8 <pow>
 800582e:	eeb0 9b40 	vmov.f64	d9, d0
 8005832:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005836:	ed97 0b08 	vldr	d0, [r7, #32]
 800583a:	f00b fc35 	bl	80110a8 <pow>
 800583e:	eeb0 7b40 	vmov.f64	d7, d0
 8005842:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005846:	ee37 7b07 	vadd.f64	d7, d7, d7
 800584a:	ee38 6b07 	vadd.f64	d6, d8, d7
 800584e:	4bbd      	ldr	r3, [pc, #756]	; (8005b44 <update_ScurveTraj+0x8c4>)
 8005850:	ed93 5b00 	vldr	d5, [r3]
 8005854:	4bbc      	ldr	r3, [pc, #752]	; (8005b48 <update_ScurveTraj+0x8c8>)
 8005856:	ed93 7b00 	vldr	d7, [r3]
 800585a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800585e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005862:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005866:	ed97 3b04 	vldr	d3, [r7, #16]
 800586a:	ed97 4b02 	vldr	d4, [r7, #8]
 800586e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005872:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005876:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800587a:	ed97 7b08 	vldr	d7, [r7, #32]
 800587e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005882:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005886:	ee35 5b47 	vsub.f64	d5, d5, d7
 800588a:	ed97 7b04 	vldr	d7, [r7, #16]
 800588e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005892:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005896:	4bad      	ldr	r3, [pc, #692]	; (8005b4c <update_ScurveTraj+0x8cc>)
 8005898:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 800589c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80058a4:	f00b fc00 	bl	80110a8 <pow>
 80058a8:	eeb0 5b40 	vmov.f64	d5, d0
 80058ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80058b0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80058b4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80058b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058bc:	ee36 8b47 	vsub.f64	d8, d6, d7
 80058c0:	4ba2      	ldr	r3, [pc, #648]	; (8005b4c <update_ScurveTraj+0x8cc>)
 80058c2:	ed93 7b00 	vldr	d7, [r3]
 80058c6:	eeb0 0b47 	vmov.f64	d0, d7
 80058ca:	f00b fe6d 	bl	80115a8 <sqrt>
 80058ce:	eeb0 7b40 	vmov.f64	d7, d0
 80058d2:	ee38 5b07 	vadd.f64	d5, d8, d7
 80058d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80058da:	ee37 6b07 	vadd.f64	d6, d7, d7
 80058de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80058e2:	4b9b      	ldr	r3, [pc, #620]	; (8005b50 <update_ScurveTraj+0x8d0>)
 80058e4:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 80058e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058ec:	ed97 0b04 	vldr	d0, [r7, #16]
 80058f0:	f00b fbda 	bl	80110a8 <pow>
 80058f4:	eeb0 5b40 	vmov.f64	d5, d0
 80058f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80058fc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005900:	ed97 7b08 	vldr	d7, [r7, #32]
 8005904:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005908:	ee36 8b47 	vsub.f64	d8, d6, d7
 800590c:	4b8f      	ldr	r3, [pc, #572]	; (8005b4c <update_ScurveTraj+0x8cc>)
 800590e:	ed93 7b00 	vldr	d7, [r3]
 8005912:	eeb0 0b47 	vmov.f64	d0, d7
 8005916:	f00b fe47 	bl	80115a8 <sqrt>
 800591a:	eeb0 7b40 	vmov.f64	d7, d0
 800591e:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005922:	ed97 7b04 	vldr	d7, [r7, #16]
 8005926:	ee37 6b07 	vadd.f64	d6, d7, d7
 800592a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800592e:	4b89      	ldr	r3, [pc, #548]	; (8005b54 <update_ScurveTraj+0x8d4>)
 8005930:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 8005934:	4b86      	ldr	r3, [pc, #536]	; (8005b50 <update_ScurveTraj+0x8d0>)
 8005936:	ed93 7b00 	vldr	d7, [r3]
 800593a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800593e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005942:	d576      	bpl.n	8005a32 <update_ScurveTraj+0x7b2>
					Ta=0;
 8005944:	4982      	ldr	r1, [pc, #520]	; (8005b50 <update_ScurveTraj+0x8d0>)
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8005952:	4981      	ldr	r1, [pc, #516]	; (8005b58 <update_ScurveTraj+0x8d8>)
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8005960:	4b78      	ldr	r3, [pc, #480]	; (8005b44 <update_ScurveTraj+0x8c4>)
 8005962:	ed93 6b00 	vldr	d6, [r3]
 8005966:	4b78      	ldr	r3, [pc, #480]	; (8005b48 <update_ScurveTraj+0x8c8>)
 8005968:	ed93 7b00 	vldr	d7, [r3]
 800596c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005970:	ed97 6b08 	vldr	d6, [r7, #32]
 8005974:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005978:	ee36 6b07 	vadd.f64	d6, d6, d7
 800597c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005980:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005984:	4b73      	ldr	r3, [pc, #460]	; (8005b54 <update_ScurveTraj+0x8d4>)
 8005986:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 800598a:	4b6e      	ldr	r3, [pc, #440]	; (8005b44 <update_ScurveTraj+0x8c4>)
 800598c:	ed93 6b00 	vldr	d6, [r3]
 8005990:	4b6d      	ldr	r3, [pc, #436]	; (8005b48 <update_ScurveTraj+0x8c8>)
 8005992:	ed93 7b00 	vldr	d7, [r3]
 8005996:	ee36 6b47 	vsub.f64	d6, d6, d7
 800599a:	ed97 7b02 	vldr	d7, [r7, #8]
 800599e:	ee26 8b07 	vmul.f64	d8, d6, d7
 80059a2:	4b68      	ldr	r3, [pc, #416]	; (8005b44 <update_ScurveTraj+0x8c4>)
 80059a4:	ed93 6b00 	vldr	d6, [r3]
 80059a8:	4b67      	ldr	r3, [pc, #412]	; (8005b48 <update_ScurveTraj+0x8c8>)
 80059aa:	ed93 7b00 	vldr	d7, [r3]
 80059ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059b6:	eeb0 0b47 	vmov.f64	d0, d7
 80059ba:	f00b fb75 	bl	80110a8 <pow>
 80059be:	eeb0 6b40 	vmov.f64	d6, d0
 80059c2:	ed97 7b02 	vldr	d7, [r7, #8]
 80059c6:	ee26 9b07 	vmul.f64	d9, d6, d7
 80059ca:	ed97 6b08 	vldr	d6, [r7, #32]
 80059ce:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80059d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059da:	eeb0 0b47 	vmov.f64	d0, d7
 80059de:	f00b fb63 	bl	80110a8 <pow>
 80059e2:	eeb0 5b40 	vmov.f64	d5, d0
 80059e6:	ed97 6b08 	vldr	d6, [r7, #32]
 80059ea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80059ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80059f6:	ee39 6b07 	vadd.f64	d6, d9, d7
 80059fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80059fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a02:	eeb0 0b47 	vmov.f64	d0, d7
 8005a06:	f00b fdcf 	bl	80115a8 <sqrt>
 8005a0a:	eeb0 7b40 	vmov.f64	d7, d0
 8005a0e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005a12:	ed97 6b08 	vldr	d6, [r7, #32]
 8005a16:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005a1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a1e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a26:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005a2a:	4b4c      	ldr	r3, [pc, #304]	; (8005b5c <update_ScurveTraj+0x8dc>)
 8005a2c:	ed83 7b00 	vstr	d7, [r3]
					break;
 8005a30:	e0c2      	b.n	8005bb8 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 8005a32:	4b48      	ldr	r3, [pc, #288]	; (8005b54 <update_ScurveTraj+0x8d4>)
 8005a34:	ed93 7b00 	vldr	d7, [r3]
 8005a38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	d400      	bmi.n	8005a44 <update_ScurveTraj+0x7c4>
 8005a42:	e08d      	b.n	8005b60 <update_ScurveTraj+0x8e0>
					Td=0;
 8005a44:	4943      	ldr	r1, [pc, #268]	; (8005b54 <update_ScurveTraj+0x8d4>)
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8005a52:	4b3c      	ldr	r3, [pc, #240]	; (8005b44 <update_ScurveTraj+0x8c4>)
 8005a54:	ed93 6b00 	vldr	d6, [r3]
 8005a58:	4b3b      	ldr	r3, [pc, #236]	; (8005b48 <update_ScurveTraj+0x8c8>)
 8005a5a:	ed93 7b00 	vldr	d7, [r3]
 8005a5e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005a62:	ed97 6b08 	vldr	d6, [r7, #32]
 8005a66:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005a6a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a6e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005a72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a76:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <update_ScurveTraj+0x8d0>)
 8005a78:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005a7c:	4b31      	ldr	r3, [pc, #196]	; (8005b44 <update_ScurveTraj+0x8c4>)
 8005a7e:	ed93 6b00 	vldr	d6, [r3]
 8005a82:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <update_ScurveTraj+0x8c8>)
 8005a84:	ed93 7b00 	vldr	d7, [r3]
 8005a88:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a8c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a90:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005a94:	4b2b      	ldr	r3, [pc, #172]	; (8005b44 <update_ScurveTraj+0x8c4>)
 8005a96:	ed93 6b00 	vldr	d6, [r3]
 8005a9a:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <update_ScurveTraj+0x8c8>)
 8005a9c:	ed93 7b00 	vldr	d7, [r3]
 8005aa0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005aa4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005aa8:	eeb0 0b47 	vmov.f64	d0, d7
 8005aac:	f00b fafc 	bl	80110a8 <pow>
 8005ab0:	eeb0 6b40 	vmov.f64	d6, d0
 8005ab4:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ab8:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005abc:	ed97 6b08 	vldr	d6, [r7, #32]
 8005ac0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005ac4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ac8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005acc:	eeb0 0b47 	vmov.f64	d0, d7
 8005ad0:	f00b faea 	bl	80110a8 <pow>
 8005ad4:	eeb0 5b40 	vmov.f64	d5, d0
 8005ad8:	ed97 6b08 	vldr	d6, [r7, #32]
 8005adc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005ae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ae4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ae8:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005aec:	ed97 7b02 	vldr	d7, [r7, #8]
 8005af0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005af4:	eeb0 0b47 	vmov.f64	d0, d7
 8005af8:	f00b fd56 	bl	80115a8 <sqrt>
 8005afc:	eeb0 7b40 	vmov.f64	d7, d0
 8005b00:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005b04:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b08:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b10:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <update_ScurveTraj+0x8d8>)
 8005b1e:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 8005b22:	490e      	ldr	r1, [pc, #56]	; (8005b5c <update_ScurveTraj+0x8dc>)
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8005b30:	e042      	b.n	8005bb8 <update_ScurveTraj+0x938>
 8005b32:	bf00      	nop
 8005b34:	f3af 8000 	nop.w
 8005b38:	7ae147ae 	.word	0x7ae147ae
 8005b3c:	3fefae14 	.word	0x3fefae14
 8005b40:	24000848 	.word	0x24000848
 8005b44:	24000860 	.word	0x24000860
 8005b48:	24000858 	.word	0x24000858
 8005b4c:	24000850 	.word	0x24000850
 8005b50:	24000820 	.word	0x24000820
 8005b54:	24000828 	.word	0x24000828
 8005b58:	24000838 	.word	0x24000838
 8005b5c:	24000840 	.word	0x24000840
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005b60:	4b33      	ldr	r3, [pc, #204]	; (8005c30 <update_ScurveTraj+0x9b0>)
 8005b62:	ed93 7b00 	vldr	d7, [r3]
 8005b66:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b6a:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <update_ScurveTraj+0x9b4>)
 8005b6c:	ed93 7b00 	vldr	d7, [r3]
 8005b70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b78:	bf4c      	ite	mi
 8005b7a:	2301      	movmi	r3, #1
 8005b7c:	2300      	movpl	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f083 0301 	eor.w	r3, r3, #1
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f47f ae28 	bne.w	80057dc <update_ScurveTraj+0x55c>
 8005b8c:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <update_ScurveTraj+0x9b0>)
 8005b8e:	ed93 7b00 	vldr	d7, [r3]
 8005b92:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b96:	4b28      	ldr	r3, [pc, #160]	; (8005c38 <update_ScurveTraj+0x9b8>)
 8005b98:	ed93 7b00 	vldr	d7, [r3]
 8005b9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba4:	bf4c      	ite	mi
 8005ba6:	2301      	movmi	r3, #1
 8005ba8:	2300      	movpl	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f083 0301 	eor.w	r3, r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f47f ae12 	bne.w	80057dc <update_ScurveTraj+0x55c>
				}
			}
		}
	}

	*(params)=Tj1;
 8005bb8:	4b20      	ldr	r3, [pc, #128]	; (8005c3c <update_ScurveTraj+0x9bc>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f103 0108 	add.w	r1, r3, #8
 8005bca:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <update_ScurveTraj+0x9c0>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f103 0110 	add.w	r1, r3, #16
 8005bda:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <update_ScurveTraj+0x9b0>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f103 0118 	add.w	r1, r3, #24
 8005bea:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <update_ScurveTraj+0x9b4>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f103 0120 	add.w	r1, r3, #32
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <update_ScurveTraj+0x9b8>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005c0a:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <update_ScurveTraj+0x9c4>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <update_ScurveTraj+0x9c8>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	e9c1 2300 	strd	r2, r3, [r1]

}
 8005c24:	bf00      	nop
 8005c26:	3748      	adds	r7, #72	; 0x48
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	ecbd 8b04 	vpop	{d8-d9}
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	24000848 	.word	0x24000848
 8005c34:	24000820 	.word	0x24000820
 8005c38:	24000828 	.word	0x24000828
 8005c3c:	24000838 	.word	0x24000838
 8005c40:	24000840 	.word	0x24000840
 8005c44:	24000830 	.word	0x24000830
 8005c48:	24000818 	.word	0x24000818
 8005c4c:	00000000 	.word	0x00000000

08005c50 <setProfilTimer>:


void setProfilTimer(void){
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8005c54:	4ba2      	ldr	r3, [pc, #648]	; (8005ee0 <setProfilTimer+0x290>)
 8005c56:	ed93 7b02 	vldr	d7, [r3, #8]
 8005c5a:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8005ec0 <setProfilTimer+0x270>
 8005c5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c62:	4b9f      	ldr	r3, [pc, #636]	; (8005ee0 <setProfilTimer+0x290>)
 8005c64:	ed83 7b04 	vstr	d7, [r3, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8005c68:	4b9e      	ldr	r3, [pc, #632]	; (8005ee4 <setProfilTimer+0x294>)
 8005c6a:	ed93 7b02 	vldr	d7, [r3, #8]
 8005c6e:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8005ec0 <setProfilTimer+0x270>
 8005c72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c76:	4b9b      	ldr	r3, [pc, #620]	; (8005ee4 <setProfilTimer+0x294>)
 8005c78:	ed83 7b04 	vstr	d7, [r3, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8005c7c:	4b9a      	ldr	r3, [pc, #616]	; (8005ee8 <setProfilTimer+0x298>)
 8005c7e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005c82:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8005ec0 <setProfilTimer+0x270>
 8005c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c8a:	4b97      	ldr	r3, [pc, #604]	; (8005ee8 <setProfilTimer+0x298>)
 8005c8c:	ed83 7b04 	vstr	d7, [r3, #16]

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(motor1.rpm));
 8005c90:	4b96      	ldr	r3, [pc, #600]	; (8005eec <setProfilTimer+0x29c>)
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005c9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ca0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ca4:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8005ec8 <setProfilTimer+0x278>
 8005ca8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005cac:	4b8c      	ldr	r3, [pc, #560]	; (8005ee0 <setProfilTimer+0x290>)
 8005cae:	ed93 7b04 	vldr	d7, [r3, #16]
 8005cb2:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8005ed0 <setProfilTimer+0x280>
 8005cb6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005cba:	ed9f 4b87 	vldr	d4, [pc, #540]	; 8005ed8 <setProfilTimer+0x288>
 8005cbe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005cc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005cc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005cca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cce:	4b88      	ldr	r3, [pc, #544]	; (8005ef0 <setProfilTimer+0x2a0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005cd6:	ee17 2a90 	vmov	r2, s15
 8005cda:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cdc:	4b83      	ldr	r3, [pc, #524]	; (8005eec <setProfilTimer+0x29c>)
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ce8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005cec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cf0:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8005ec8 <setProfilTimer+0x278>
 8005cf4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005cf8:	4b79      	ldr	r3, [pc, #484]	; (8005ee0 <setProfilTimer+0x290>)
 8005cfa:	ed93 7b04 	vldr	d7, [r3, #16]
 8005cfe:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8005ed0 <setProfilTimer+0x280>
 8005d02:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005d06:	ed9f 4b74 	vldr	d4, [pc, #464]	; 8005ed8 <setProfilTimer+0x288>
 8005d0a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005d0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d12:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005d16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d1e:	ee17 2a90 	vmov	r2, s15
 8005d22:	4b73      	ldr	r3, [pc, #460]	; (8005ef0 <setProfilTimer+0x2a0>)
 8005d24:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(motor2.rpm));
 8005d26:	4b71      	ldr	r3, [pc, #452]	; (8005eec <setProfilTimer+0x29c>)
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005d32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005d36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d3a:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8005ec8 <setProfilTimer+0x278>
 8005d3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005d42:	4b68      	ldr	r3, [pc, #416]	; (8005ee4 <setProfilTimer+0x294>)
 8005d44:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d48:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8005ed0 <setProfilTimer+0x280>
 8005d4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005d50:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8005ed8 <setProfilTimer+0x288>
 8005d54:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005d58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005d60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d64:	4b63      	ldr	r3, [pc, #396]	; (8005ef4 <setProfilTimer+0x2a4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d6c:	ee17 2a90 	vmov	r2, s15
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d72:	4b5e      	ldr	r3, [pc, #376]	; (8005eec <setProfilTimer+0x29c>)
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005d7e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005d82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d86:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8005ec8 <setProfilTimer+0x278>
 8005d8a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005d8e:	4b55      	ldr	r3, [pc, #340]	; (8005ee4 <setProfilTimer+0x294>)
 8005d90:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d94:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8005ed0 <setProfilTimer+0x280>
 8005d98:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005d9c:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 8005ed8 <setProfilTimer+0x288>
 8005da0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005da4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005da8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005db0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005db4:	ee17 2a90 	vmov	r2, s15
 8005db8:	4b4e      	ldr	r3, [pc, #312]	; (8005ef4 <setProfilTimer+0x2a4>)
 8005dba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(motor3.rpm));
 8005dbc:	4b4b      	ldr	r3, [pc, #300]	; (8005eec <setProfilTimer+0x29c>)
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005dc8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005dd0:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8005ec8 <setProfilTimer+0x278>
 8005dd4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005dd8:	4b43      	ldr	r3, [pc, #268]	; (8005ee8 <setProfilTimer+0x298>)
 8005dda:	ed93 7b04 	vldr	d7, [r3, #16]
 8005dde:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8005ed0 <setProfilTimer+0x280>
 8005de2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005de6:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 8005ed8 <setProfilTimer+0x288>
 8005dea:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005dee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005df2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005df6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <setProfilTimer+0x2a8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005e02:	ee17 2a90 	vmov	r2, s15
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e08:	4b38      	ldr	r3, [pc, #224]	; (8005eec <setProfilTimer+0x29c>)
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e1c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005ec8 <setProfilTimer+0x278>
 8005e20:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005e24:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <setProfilTimer+0x298>)
 8005e26:	ed93 7b04 	vldr	d7, [r3, #16]
 8005e2a:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8005ed0 <setProfilTimer+0x280>
 8005e2e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005e32:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8005ed8 <setProfilTimer+0x288>
 8005e36:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005e3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005e3e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005e4a:	ee17 2a90 	vmov	r2, s15
 8005e4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ef8 <setProfilTimer+0x2a8>)
 8005e50:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <setProfilTimer+0x29c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005e5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005e62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005e66:	4b21      	ldr	r3, [pc, #132]	; (8005eec <setProfilTimer+0x29c>)
 8005e68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005e6c:	ee17 2a90 	vmov	r2, s15
 8005e70:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8005e72:	4b22      	ldr	r3, [pc, #136]	; (8005efc <setProfilTimer+0x2ac>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005e7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005e82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005e86:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <setProfilTimer+0x2ac>)
 8005e88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005e8c:	ee17 2a90 	vmov	r2, s15
 8005e90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <setProfilTimer+0x2b0>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005e9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005ea2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005ea6:	4b16      	ldr	r3, [pc, #88]	; (8005f00 <setProfilTimer+0x2b0>)
 8005ea8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005eac:	ee17 2a90 	vmov	r2, s15
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		*/


}
 8005eb2:	bf00      	nop
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	66ed2a99 	.word	0x66ed2a99
 8005ec4:	4023193d 	.word	0x4023193d
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	418e8480 	.word	0x418e8480
 8005ed0:	00000000 	.word	0x00000000
 8005ed4:	40bf4000 	.word	0x40bf4000
 8005ed8:	00000000 	.word	0x00000000
 8005edc:	404e0000 	.word	0x404e0000
 8005ee0:	24000360 	.word	0x24000360
 8005ee4:	240003a8 	.word	0x240003a8
 8005ee8:	240003f0 	.word	0x240003f0
 8005eec:	40001800 	.word	0x40001800
 8005ef0:	240006c8 	.word	0x240006c8
 8005ef4:	24000714 	.word	0x24000714
 8005ef8:	24000760 	.word	0x24000760
 8005efc:	40001c00 	.word	0x40001c00
 8005f00:	40002000 	.word	0x40002000

08005f04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f08:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f0a:	4a23      	ldr	r2, [pc, #140]	; (8005f98 <MX_USART1_UART_Init+0x94>)
 8005f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005f0e:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f16:	4b1f      	ldr	r3, [pc, #124]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f28:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f2a:	220c      	movs	r2, #12
 8005f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f2e:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f34:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f3a:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f4c:	4811      	ldr	r0, [pc, #68]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f4e:	f005 fe81 	bl	800bc54 <HAL_UART_Init>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005f58:	f7fd fb66 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	480d      	ldr	r0, [pc, #52]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f60:	f008 f90b 	bl	800e17a <HAL_UARTEx_SetTxFifoThreshold>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005f6a:	f7fd fb5d 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4808      	ldr	r0, [pc, #32]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f72:	f008 f940 	bl	800e1f6 <HAL_UARTEx_SetRxFifoThreshold>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005f7c:	f7fd fb54 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005f80:	4804      	ldr	r0, [pc, #16]	; (8005f94 <MX_USART1_UART_Init+0x90>)
 8005f82:	f008 f8c1 	bl	800e108 <HAL_UARTEx_DisableFifoMode>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005f8c:	f7fd fb4c 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f90:	bf00      	nop
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	24000868 	.word	0x24000868
 8005f98:	40011000 	.word	0x40011000

08005f9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005fa0:	4b22      	ldr	r3, [pc, #136]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fa2:	4a23      	ldr	r2, [pc, #140]	; (8006030 <MX_USART2_UART_Init+0x94>)
 8005fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005fa6:	4b21      	ldr	r3, [pc, #132]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005fae:	4b1f      	ldr	r3, [pc, #124]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005fba:	4b1c      	ldr	r3, [pc, #112]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fc2:	220c      	movs	r2, #12
 8005fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fc6:	4b19      	ldr	r3, [pc, #100]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fcc:	4b17      	ldr	r3, [pc, #92]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fd2:	4b16      	ldr	r3, [pc, #88]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005fd8:	4b14      	ldr	r3, [pc, #80]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fe4:	4811      	ldr	r0, [pc, #68]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005fe6:	f005 fe35 	bl	800bc54 <HAL_UART_Init>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005ff0:	f7fd fb1a 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	480d      	ldr	r0, [pc, #52]	; (800602c <MX_USART2_UART_Init+0x90>)
 8005ff8:	f008 f8bf 	bl	800e17a <HAL_UARTEx_SetTxFifoThreshold>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006002:	f7fd fb11 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006006:	2100      	movs	r1, #0
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <MX_USART2_UART_Init+0x90>)
 800600a:	f008 f8f4 	bl	800e1f6 <HAL_UARTEx_SetRxFifoThreshold>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006014:	f7fd fb08 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006018:	4804      	ldr	r0, [pc, #16]	; (800602c <MX_USART2_UART_Init+0x90>)
 800601a:	f008 f875 	bl	800e108 <HAL_UARTEx_DisableFifoMode>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006024:	f7fd fb00 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006028:	bf00      	nop
 800602a:	bd80      	pop	{r7, pc}
 800602c:	240008f8 	.word	0x240008f8
 8006030:	40004400 	.word	0x40004400

08006034 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006038:	4b22      	ldr	r3, [pc, #136]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 800603a:	4a23      	ldr	r2, [pc, #140]	; (80060c8 <MX_USART3_UART_Init+0x94>)
 800603c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800603e:	4b21      	ldr	r3, [pc, #132]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006046:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006048:	2200      	movs	r2, #0
 800604a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800604c:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 800604e:	2200      	movs	r2, #0
 8006050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006054:	2200      	movs	r2, #0
 8006056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006058:	4b1a      	ldr	r3, [pc, #104]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 800605a:	220c      	movs	r2, #12
 800605c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800605e:	4b19      	ldr	r3, [pc, #100]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006060:	2200      	movs	r2, #0
 8006062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006064:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800606a:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 800606c:	2200      	movs	r2, #0
 800606e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006070:	4b14      	ldr	r3, [pc, #80]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006072:	2200      	movs	r2, #0
 8006074:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006078:	2200      	movs	r2, #0
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800607c:	4811      	ldr	r0, [pc, #68]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 800607e:	f005 fde9 	bl	800bc54 <HAL_UART_Init>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006088:	f7fd face 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800608c:	2100      	movs	r1, #0
 800608e:	480d      	ldr	r0, [pc, #52]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 8006090:	f008 f873 	bl	800e17a <HAL_UARTEx_SetTxFifoThreshold>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800609a:	f7fd fac5 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800609e:	2100      	movs	r1, #0
 80060a0:	4808      	ldr	r0, [pc, #32]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 80060a2:	f008 f8a8 	bl	800e1f6 <HAL_UARTEx_SetRxFifoThreshold>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80060ac:	f7fd fabc 	bl	8003628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80060b0:	4804      	ldr	r0, [pc, #16]	; (80060c4 <MX_USART3_UART_Init+0x90>)
 80060b2:	f008 f829 	bl	800e108 <HAL_UARTEx_DisableFifoMode>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80060bc:	f7fd fab4 	bl	8003628 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	24000988 	.word	0x24000988
 80060c8:	40004800 	.word	0x40004800

080060cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b0be      	sub	sp, #248	; 0xf8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060e8:	22bc      	movs	r2, #188	; 0xbc
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f008 f939 	bl	800e364 <memset>
  if(uartHandle->Instance==USART1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a84      	ldr	r2, [pc, #528]	; (8006308 <HAL_UART_MspInit+0x23c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d168      	bne.n	80061ce <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80060fc:	2301      	movs	r3, #1
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800610a:	4618      	mov	r0, r3
 800610c:	f002 fa8c 	bl	8008628 <HAL_RCCEx_PeriphCLKConfig>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006116:	f7fd fa87 	bl	8003628 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800611a:	4b7c      	ldr	r3, [pc, #496]	; (800630c <HAL_UART_MspInit+0x240>)
 800611c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006120:	4a7a      	ldr	r2, [pc, #488]	; (800630c <HAL_UART_MspInit+0x240>)
 8006122:	f043 0310 	orr.w	r3, r3, #16
 8006126:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800612a:	4b78      	ldr	r3, [pc, #480]	; (800630c <HAL_UART_MspInit+0x240>)
 800612c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006138:	4b74      	ldr	r3, [pc, #464]	; (800630c <HAL_UART_MspInit+0x240>)
 800613a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800613e:	4a73      	ldr	r2, [pc, #460]	; (800630c <HAL_UART_MspInit+0x240>)
 8006140:	f043 0302 	orr.w	r3, r3, #2
 8006144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006148:	4b70      	ldr	r3, [pc, #448]	; (800630c <HAL_UART_MspInit+0x240>)
 800614a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006156:	4b6d      	ldr	r3, [pc, #436]	; (800630c <HAL_UART_MspInit+0x240>)
 8006158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800615c:	4a6b      	ldr	r2, [pc, #428]	; (800630c <HAL_UART_MspInit+0x240>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006166:	4b69      	ldr	r3, [pc, #420]	; (800630c <HAL_UART_MspInit+0x240>)
 8006168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006178:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617c:	2302      	movs	r3, #2
 800617e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006188:	2300      	movs	r3, #0
 800618a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800618e:	2304      	movs	r3, #4
 8006190:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006194:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006198:	4619      	mov	r1, r3
 800619a:	485d      	ldr	r0, [pc, #372]	; (8006310 <HAL_UART_MspInit+0x244>)
 800619c:	f001 f854 	bl	8007248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 80061a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a8:	2302      	movs	r3, #2
 80061aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80061ba:	2307      	movs	r3, #7
 80061bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 80061c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4853      	ldr	r0, [pc, #332]	; (8006314 <HAL_UART_MspInit+0x248>)
 80061c8:	f001 f83e 	bl	8007248 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80061cc:	e097      	b.n	80062fe <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a51      	ldr	r2, [pc, #324]	; (8006318 <HAL_UART_MspInit+0x24c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d142      	bne.n	800625e <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80061d8:	2302      	movs	r3, #2
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 fa1e 	bl	8008628 <HAL_RCCEx_PeriphCLKConfig>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80061f2:	f7fd fa19 	bl	8003628 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80061f6:	4b45      	ldr	r3, [pc, #276]	; (800630c <HAL_UART_MspInit+0x240>)
 80061f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061fc:	4a43      	ldr	r2, [pc, #268]	; (800630c <HAL_UART_MspInit+0x240>)
 80061fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006202:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006206:	4b41      	ldr	r3, [pc, #260]	; (800630c <HAL_UART_MspInit+0x240>)
 8006208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800620c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006214:	4b3d      	ldr	r3, [pc, #244]	; (800630c <HAL_UART_MspInit+0x240>)
 8006216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800621a:	4a3c      	ldr	r2, [pc, #240]	; (800630c <HAL_UART_MspInit+0x240>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006224:	4b39      	ldr	r3, [pc, #228]	; (800630c <HAL_UART_MspInit+0x240>)
 8006226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006232:	230c      	movs	r3, #12
 8006234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006238:	2302      	movs	r3, #2
 800623a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800623e:	2300      	movs	r3, #0
 8006240:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800624a:	2307      	movs	r3, #7
 800624c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006250:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006254:	4619      	mov	r1, r3
 8006256:	482f      	ldr	r0, [pc, #188]	; (8006314 <HAL_UART_MspInit+0x248>)
 8006258:	f000 fff6 	bl	8007248 <HAL_GPIO_Init>
}
 800625c:	e04f      	b.n	80062fe <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2e      	ldr	r2, [pc, #184]	; (800631c <HAL_UART_MspInit+0x250>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d14a      	bne.n	80062fe <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006268:	2302      	movs	r3, #2
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006276:	4618      	mov	r0, r3
 8006278:	f002 f9d6 	bl	8008628 <HAL_RCCEx_PeriphCLKConfig>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006282:	f7fd f9d1 	bl	8003628 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006286:	4b21      	ldr	r3, [pc, #132]	; (800630c <HAL_UART_MspInit+0x240>)
 8006288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_UART_MspInit+0x240>)
 800628e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006292:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <HAL_UART_MspInit+0x240>)
 8006298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800629c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <HAL_UART_MspInit+0x240>)
 80062a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062aa:	4a18      	ldr	r2, [pc, #96]	; (800630c <HAL_UART_MspInit+0x240>)
 80062ac:	f043 0308 	orr.w	r3, r3, #8
 80062b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062b4:	4b15      	ldr	r3, [pc, #84]	; (800630c <HAL_UART_MspInit+0x240>)
 80062b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80062c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80062c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ca:	2302      	movs	r3, #2
 80062cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80062dc:	2307      	movs	r3, #7
 80062de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80062e6:	4619      	mov	r1, r3
 80062e8:	480d      	ldr	r0, [pc, #52]	; (8006320 <HAL_UART_MspInit+0x254>)
 80062ea:	f000 ffad 	bl	8007248 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 80062ee:	2201      	movs	r2, #1
 80062f0:	2101      	movs	r1, #1
 80062f2:	2027      	movs	r0, #39	; 0x27
 80062f4:	f000 fa01 	bl	80066fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80062f8:	2027      	movs	r0, #39	; 0x27
 80062fa:	f000 fa18 	bl	800672e <HAL_NVIC_EnableIRQ>
}
 80062fe:	bf00      	nop
 8006300:	37f8      	adds	r7, #248	; 0xf8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40011000 	.word	0x40011000
 800630c:	58024400 	.word	0x58024400
 8006310:	58020400 	.word	0x58020400
 8006314:	58020000 	.word	0x58020000
 8006318:	40004400 	.word	0x40004400
 800631c:	40004800 	.word	0x40004800
 8006320:	58020c00 	.word	0x58020c00

08006324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800635c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800632a:	e003      	b.n	8006334 <LoopCopyDataInit>

0800632c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800632e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006332:	3104      	adds	r1, #4

08006334 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006334:	480b      	ldr	r0, [pc, #44]	; (8006364 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800633a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800633c:	d3f6      	bcc.n	800632c <CopyDataInit>
  ldr  r2, =_sbss
 800633e:	4a0b      	ldr	r2, [pc, #44]	; (800636c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006340:	e002      	b.n	8006348 <LoopFillZerobss>

08006342 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006342:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006344:	f842 3b04 	str.w	r3, [r2], #4

08006348 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800634a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800634c:	d3f9      	bcc.n	8006342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800634e:	f7fd fbb3 	bl	8003ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006352:	f007 ffe3 	bl	800e31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006356:	f7fc f947 	bl	80025e8 <main>
  bx  lr    
 800635a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800635c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006360:	08013698 	.word	0x08013698
  ldr  r0, =_sdata
 8006364:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006368:	24000258 	.word	0x24000258
  ldr  r2, =_sbss
 800636c:	24000258 	.word	0x24000258
  ldr  r3, = _ebss
 8006370:	24000a2c 	.word	0x24000a2c

08006374 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006374:	e7fe      	b.n	8006374 <ADC3_IRQHandler>
	...

08006378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800637e:	2003      	movs	r0, #3
 8006380:	f000 f9b0 	bl	80066e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006384:	f001 ff7a 	bl	800827c <HAL_RCC_GetSysClockFreq>
 8006388:	4602      	mov	r2, r0
 800638a:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <HAL_Init+0x68>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	4913      	ldr	r1, [pc, #76]	; (80063e4 <HAL_Init+0x6c>)
 8006396:	5ccb      	ldrb	r3, [r1, r3]
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
 80063a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063a2:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <HAL_Init+0x68>)
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	4a0e      	ldr	r2, [pc, #56]	; (80063e4 <HAL_Init+0x6c>)
 80063ac:	5cd3      	ldrb	r3, [r2, r3]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	fa22 f303 	lsr.w	r3, r2, r3
 80063b8:	4a0b      	ldr	r2, [pc, #44]	; (80063e8 <HAL_Init+0x70>)
 80063ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063bc:	4a0b      	ldr	r2, [pc, #44]	; (80063ec <HAL_Init+0x74>)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063c2:	2000      	movs	r0, #0
 80063c4:	f000 f814 	bl	80063f0 <HAL_InitTick>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e002      	b.n	80063d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80063d2:	f7fd f9ef 	bl	80037b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	58024400 	.word	0x58024400
 80063e4:	08011968 	.word	0x08011968
 80063e8:	24000078 	.word	0x24000078
 80063ec:	24000074 	.word	0x24000074

080063f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <HAL_InitTick+0x60>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e021      	b.n	8006448 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <HAL_InitTick+0x64>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <HAL_InitTick+0x60>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006412:	fbb3 f3f1 	udiv	r3, r3, r1
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f9a3 	bl	8006766 <HAL_SYSTICK_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e00e      	b.n	8006448 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d80a      	bhi.n	8006446 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006430:	2200      	movs	r2, #0
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	f000 f95f 	bl	80066fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800643c:	4a06      	ldr	r2, [pc, #24]	; (8006458 <HAL_InitTick+0x68>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e000      	b.n	8006448 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	24000080 	.word	0x24000080
 8006454:	24000074 	.word	0x24000074
 8006458:	2400007c 	.word	0x2400007c

0800645c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <HAL_IncTick+0x20>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <HAL_IncTick+0x24>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4413      	add	r3, r2
 800646c:	4a04      	ldr	r2, [pc, #16]	; (8006480 <HAL_IncTick+0x24>)
 800646e:	6013      	str	r3, [r2, #0]
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	24000080 	.word	0x24000080
 8006480:	24000a18 	.word	0x24000a18

08006484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return uwTick;
 8006488:	4b03      	ldr	r3, [pc, #12]	; (8006498 <HAL_GetTick+0x14>)
 800648a:	681b      	ldr	r3, [r3, #0]
}
 800648c:	4618      	mov	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	24000a18 	.word	0x24000a18

0800649c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064a4:	f7ff ffee 	bl	8006484 <HAL_GetTick>
 80064a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d005      	beq.n	80064c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <HAL_Delay+0x44>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80064c2:	bf00      	nop
 80064c4:	f7ff ffde 	bl	8006484 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d8f7      	bhi.n	80064c4 <HAL_Delay+0x28>
  {
  }
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	24000080 	.word	0x24000080

080064e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <HAL_GetREVID+0x14>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	0c1b      	lsrs	r3, r3, #16
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	5c001000 	.word	0x5c001000

080064fc <__NVIC_SetPriorityGrouping>:
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <__NVIC_SetPriorityGrouping+0x40>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006518:	4013      	ands	r3, r2
 800651a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <__NVIC_SetPriorityGrouping+0x44>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800652a:	4a04      	ldr	r2, [pc, #16]	; (800653c <__NVIC_SetPriorityGrouping+0x40>)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	60d3      	str	r3, [r2, #12]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	e000ed00 	.word	0xe000ed00
 8006540:	05fa0000 	.word	0x05fa0000

08006544 <__NVIC_GetPriorityGrouping>:
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <__NVIC_GetPriorityGrouping+0x18>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	0a1b      	lsrs	r3, r3, #8
 800654e:	f003 0307 	and.w	r3, r3, #7
}
 8006552:	4618      	mov	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	e000ed00 	.word	0xe000ed00

08006560 <__NVIC_EnableIRQ>:
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800656a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800656e:	2b00      	cmp	r3, #0
 8006570:	db0b      	blt.n	800658a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	f003 021f 	and.w	r2, r3, #31
 8006578:	4907      	ldr	r1, [pc, #28]	; (8006598 <__NVIC_EnableIRQ+0x38>)
 800657a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	2001      	movs	r0, #1
 8006582:	fa00 f202 	lsl.w	r2, r0, r2
 8006586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	e000e100 	.word	0xe000e100

0800659c <__NVIC_DisableIRQ>:
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80065a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	db12      	blt.n	80065d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	f003 021f 	and.w	r2, r3, #31
 80065b4:	490a      	ldr	r1, [pc, #40]	; (80065e0 <__NVIC_DisableIRQ+0x44>)
 80065b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	2001      	movs	r0, #1
 80065be:	fa00 f202 	lsl.w	r2, r0, r2
 80065c2:	3320      	adds	r3, #32
 80065c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80065c8:	f3bf 8f4f 	dsb	sy
}
 80065cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80065ce:	f3bf 8f6f 	isb	sy
}
 80065d2:	bf00      	nop
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	e000e100 	.word	0xe000e100

080065e4 <__NVIC_SetPriority>:
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	6039      	str	r1, [r7, #0]
 80065ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80065f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	db0a      	blt.n	800660e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	490c      	ldr	r1, [pc, #48]	; (8006630 <__NVIC_SetPriority+0x4c>)
 80065fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006602:	0112      	lsls	r2, r2, #4
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	440b      	add	r3, r1
 8006608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800660c:	e00a      	b.n	8006624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	4908      	ldr	r1, [pc, #32]	; (8006634 <__NVIC_SetPriority+0x50>)
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	3b04      	subs	r3, #4
 800661c:	0112      	lsls	r2, r2, #4
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	440b      	add	r3, r1
 8006622:	761a      	strb	r2, [r3, #24]
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	e000e100 	.word	0xe000e100
 8006634:	e000ed00 	.word	0xe000ed00

08006638 <NVIC_EncodePriority>:
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	; 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f1c3 0307 	rsb	r3, r3, #7
 8006652:	2b04      	cmp	r3, #4
 8006654:	bf28      	it	cs
 8006656:	2304      	movcs	r3, #4
 8006658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	3304      	adds	r3, #4
 800665e:	2b06      	cmp	r3, #6
 8006660:	d902      	bls.n	8006668 <NVIC_EncodePriority+0x30>
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3b03      	subs	r3, #3
 8006666:	e000      	b.n	800666a <NVIC_EncodePriority+0x32>
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	43da      	mvns	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	401a      	ands	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006680:	f04f 31ff 	mov.w	r1, #4294967295
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	fa01 f303 	lsl.w	r3, r1, r3
 800668a:	43d9      	mvns	r1, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006690:	4313      	orrs	r3, r2
}
 8006692:	4618      	mov	r0, r3
 8006694:	3724      	adds	r7, #36	; 0x24
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066b0:	d301      	bcc.n	80066b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066b2:	2301      	movs	r3, #1
 80066b4:	e00f      	b.n	80066d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066b6:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <SysTick_Config+0x40>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066be:	210f      	movs	r1, #15
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	f7ff ff8e 	bl	80065e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <SysTick_Config+0x40>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066ce:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <SysTick_Config+0x40>)
 80066d0:	2207      	movs	r2, #7
 80066d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000e010 	.word	0xe000e010

080066e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff05 	bl	80064fc <__NVIC_SetPriorityGrouping>
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	4603      	mov	r3, r0
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006708:	f7ff ff1c 	bl	8006544 <__NVIC_GetPriorityGrouping>
 800670c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f7ff ff90 	bl	8006638 <NVIC_EncodePriority>
 8006718:	4602      	mov	r2, r0
 800671a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff ff5f 	bl	80065e4 <__NVIC_SetPriority>
}
 8006726:	bf00      	nop
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	4603      	mov	r3, r0
 8006736:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff0f 	bl	8006560 <__NVIC_EnableIRQ>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	4603      	mov	r3, r0
 8006752:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff ff1f 	bl	800659c <__NVIC_DisableIRQ>
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff ff96 	bl	80066a0 <SysTick_Config>
 8006774:	4603      	mov	r3, r0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006788:	f7ff fe7c 	bl	8006484 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e2dc      	b.n	8006d52 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d008      	beq.n	80067b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2280      	movs	r2, #128	; 0x80
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e2cd      	b.n	8006d52 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a76      	ldr	r2, [pc, #472]	; (8006994 <HAL_DMA_Abort+0x214>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d04a      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a74      	ldr	r2, [pc, #464]	; (8006998 <HAL_DMA_Abort+0x218>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d045      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a73      	ldr	r2, [pc, #460]	; (800699c <HAL_DMA_Abort+0x21c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d040      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a71      	ldr	r2, [pc, #452]	; (80069a0 <HAL_DMA_Abort+0x220>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d03b      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a70      	ldr	r2, [pc, #448]	; (80069a4 <HAL_DMA_Abort+0x224>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d036      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a6e      	ldr	r2, [pc, #440]	; (80069a8 <HAL_DMA_Abort+0x228>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d031      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6d      	ldr	r2, [pc, #436]	; (80069ac <HAL_DMA_Abort+0x22c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d02c      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6b      	ldr	r2, [pc, #428]	; (80069b0 <HAL_DMA_Abort+0x230>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d027      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a6a      	ldr	r2, [pc, #424]	; (80069b4 <HAL_DMA_Abort+0x234>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d022      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a68      	ldr	r2, [pc, #416]	; (80069b8 <HAL_DMA_Abort+0x238>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01d      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a67      	ldr	r2, [pc, #412]	; (80069bc <HAL_DMA_Abort+0x23c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d018      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a65      	ldr	r2, [pc, #404]	; (80069c0 <HAL_DMA_Abort+0x240>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a64      	ldr	r2, [pc, #400]	; (80069c4 <HAL_DMA_Abort+0x244>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00e      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a62      	ldr	r2, [pc, #392]	; (80069c8 <HAL_DMA_Abort+0x248>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d009      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a61      	ldr	r2, [pc, #388]	; (80069cc <HAL_DMA_Abort+0x24c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_DMA_Abort+0xd6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5f      	ldr	r2, [pc, #380]	; (80069d0 <HAL_DMA_Abort+0x250>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d101      	bne.n	800685a <HAL_DMA_Abort+0xda>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <HAL_DMA_Abort+0xdc>
 800685a:	2300      	movs	r3, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d013      	beq.n	8006888 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 021e 	bic.w	r2, r2, #30
 800686e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e00a      	b.n	800689e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 020e 	bic.w	r2, r2, #14
 8006896:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a3c      	ldr	r2, [pc, #240]	; (8006994 <HAL_DMA_Abort+0x214>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d072      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3a      	ldr	r2, [pc, #232]	; (8006998 <HAL_DMA_Abort+0x218>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d06d      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a39      	ldr	r2, [pc, #228]	; (800699c <HAL_DMA_Abort+0x21c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d068      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <HAL_DMA_Abort+0x220>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d063      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a36      	ldr	r2, [pc, #216]	; (80069a4 <HAL_DMA_Abort+0x224>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d05e      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a34      	ldr	r2, [pc, #208]	; (80069a8 <HAL_DMA_Abort+0x228>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d059      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a33      	ldr	r2, [pc, #204]	; (80069ac <HAL_DMA_Abort+0x22c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d054      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a31      	ldr	r2, [pc, #196]	; (80069b0 <HAL_DMA_Abort+0x230>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d04f      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a30      	ldr	r2, [pc, #192]	; (80069b4 <HAL_DMA_Abort+0x234>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d04a      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a2e      	ldr	r2, [pc, #184]	; (80069b8 <HAL_DMA_Abort+0x238>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d045      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a2d      	ldr	r2, [pc, #180]	; (80069bc <HAL_DMA_Abort+0x23c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d040      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a2b      	ldr	r2, [pc, #172]	; (80069c0 <HAL_DMA_Abort+0x240>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d03b      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a2a      	ldr	r2, [pc, #168]	; (80069c4 <HAL_DMA_Abort+0x244>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d036      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a28      	ldr	r2, [pc, #160]	; (80069c8 <HAL_DMA_Abort+0x248>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d031      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a27      	ldr	r2, [pc, #156]	; (80069cc <HAL_DMA_Abort+0x24c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d02c      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <HAL_DMA_Abort+0x250>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d027      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <HAL_DMA_Abort+0x254>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d022      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a22      	ldr	r2, [pc, #136]	; (80069d8 <HAL_DMA_Abort+0x258>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01d      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a21      	ldr	r2, [pc, #132]	; (80069dc <HAL_DMA_Abort+0x25c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d018      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_DMA_Abort+0x260>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <HAL_DMA_Abort+0x264>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00e      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <HAL_DMA_Abort+0x268>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1b      	ldr	r2, [pc, #108]	; (80069ec <HAL_DMA_Abort+0x26c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <HAL_DMA_Abort+0x20e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <HAL_DMA_Abort+0x270>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d132      	bne.n	80069f4 <HAL_DMA_Abort+0x274>
 800698e:	2301      	movs	r3, #1
 8006990:	e031      	b.n	80069f6 <HAL_DMA_Abort+0x276>
 8006992:	bf00      	nop
 8006994:	40020010 	.word	0x40020010
 8006998:	40020028 	.word	0x40020028
 800699c:	40020040 	.word	0x40020040
 80069a0:	40020058 	.word	0x40020058
 80069a4:	40020070 	.word	0x40020070
 80069a8:	40020088 	.word	0x40020088
 80069ac:	400200a0 	.word	0x400200a0
 80069b0:	400200b8 	.word	0x400200b8
 80069b4:	40020410 	.word	0x40020410
 80069b8:	40020428 	.word	0x40020428
 80069bc:	40020440 	.word	0x40020440
 80069c0:	40020458 	.word	0x40020458
 80069c4:	40020470 	.word	0x40020470
 80069c8:	40020488 	.word	0x40020488
 80069cc:	400204a0 	.word	0x400204a0
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	58025408 	.word	0x58025408
 80069d8:	5802541c 	.word	0x5802541c
 80069dc:	58025430 	.word	0x58025430
 80069e0:	58025444 	.word	0x58025444
 80069e4:	58025458 	.word	0x58025458
 80069e8:	5802546c 	.word	0x5802546c
 80069ec:	58025480 	.word	0x58025480
 80069f0:	58025494 	.word	0x58025494
 80069f4:	2300      	movs	r3, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a6d      	ldr	r2, [pc, #436]	; (8006bc4 <HAL_DMA_Abort+0x444>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d04a      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a6b      	ldr	r2, [pc, #428]	; (8006bc8 <HAL_DMA_Abort+0x448>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d045      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a6a      	ldr	r2, [pc, #424]	; (8006bcc <HAL_DMA_Abort+0x44c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d040      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a68      	ldr	r2, [pc, #416]	; (8006bd0 <HAL_DMA_Abort+0x450>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d03b      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a67      	ldr	r2, [pc, #412]	; (8006bd4 <HAL_DMA_Abort+0x454>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d036      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a65      	ldr	r2, [pc, #404]	; (8006bd8 <HAL_DMA_Abort+0x458>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d031      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a64      	ldr	r2, [pc, #400]	; (8006bdc <HAL_DMA_Abort+0x45c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d02c      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a62      	ldr	r2, [pc, #392]	; (8006be0 <HAL_DMA_Abort+0x460>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d027      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a61      	ldr	r2, [pc, #388]	; (8006be4 <HAL_DMA_Abort+0x464>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d022      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a5f      	ldr	r2, [pc, #380]	; (8006be8 <HAL_DMA_Abort+0x468>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01d      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a5e      	ldr	r2, [pc, #376]	; (8006bec <HAL_DMA_Abort+0x46c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a5c      	ldr	r2, [pc, #368]	; (8006bf0 <HAL_DMA_Abort+0x470>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a5b      	ldr	r2, [pc, #364]	; (8006bf4 <HAL_DMA_Abort+0x474>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a59      	ldr	r2, [pc, #356]	; (8006bf8 <HAL_DMA_Abort+0x478>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a58      	ldr	r2, [pc, #352]	; (8006bfc <HAL_DMA_Abort+0x47c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_DMA_Abort+0x32a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a56      	ldr	r2, [pc, #344]	; (8006c00 <HAL_DMA_Abort+0x480>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d108      	bne.n	8006abc <HAL_DMA_Abort+0x33c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0201 	bic.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e007      	b.n	8006acc <HAL_DMA_Abort+0x34c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0201 	bic.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006acc:	e013      	b.n	8006af6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ace:	f7ff fcd9 	bl	8006484 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b05      	cmp	r3, #5
 8006ada:	d90c      	bls.n	8006af6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e12d      	b.n	8006d52 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e5      	bne.n	8006ace <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2f      	ldr	r2, [pc, #188]	; (8006bc4 <HAL_DMA_Abort+0x444>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d04a      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <HAL_DMA_Abort+0x448>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d045      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2c      	ldr	r2, [pc, #176]	; (8006bcc <HAL_DMA_Abort+0x44c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d040      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <HAL_DMA_Abort+0x450>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d03b      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a29      	ldr	r2, [pc, #164]	; (8006bd4 <HAL_DMA_Abort+0x454>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d036      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <HAL_DMA_Abort+0x458>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d031      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a26      	ldr	r2, [pc, #152]	; (8006bdc <HAL_DMA_Abort+0x45c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d02c      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a24      	ldr	r2, [pc, #144]	; (8006be0 <HAL_DMA_Abort+0x460>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d027      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <HAL_DMA_Abort+0x464>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d022      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <HAL_DMA_Abort+0x468>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01d      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a20      	ldr	r2, [pc, #128]	; (8006bec <HAL_DMA_Abort+0x46c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d018      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <HAL_DMA_Abort+0x470>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d013      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <HAL_DMA_Abort+0x474>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00e      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1b      	ldr	r2, [pc, #108]	; (8006bf8 <HAL_DMA_Abort+0x478>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d009      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <HAL_DMA_Abort+0x47c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d004      	beq.n	8006ba2 <HAL_DMA_Abort+0x422>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_DMA_Abort+0x480>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d101      	bne.n	8006ba6 <HAL_DMA_Abort+0x426>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <HAL_DMA_Abort+0x428>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d02b      	beq.n	8006c04 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	223f      	movs	r2, #63	; 0x3f
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	609a      	str	r2, [r3, #8]
 8006bc2:	e02a      	b.n	8006c1a <HAL_DMA_Abort+0x49a>
 8006bc4:	40020010 	.word	0x40020010
 8006bc8:	40020028 	.word	0x40020028
 8006bcc:	40020040 	.word	0x40020040
 8006bd0:	40020058 	.word	0x40020058
 8006bd4:	40020070 	.word	0x40020070
 8006bd8:	40020088 	.word	0x40020088
 8006bdc:	400200a0 	.word	0x400200a0
 8006be0:	400200b8 	.word	0x400200b8
 8006be4:	40020410 	.word	0x40020410
 8006be8:	40020428 	.word	0x40020428
 8006bec:	40020440 	.word	0x40020440
 8006bf0:	40020458 	.word	0x40020458
 8006bf4:	40020470 	.word	0x40020470
 8006bf8:	40020488 	.word	0x40020488
 8006bfc:	400204a0 	.word	0x400204a0
 8006c00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c08:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2201      	movs	r2, #1
 8006c14:	409a      	lsls	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a4f      	ldr	r2, [pc, #316]	; (8006d5c <HAL_DMA_Abort+0x5dc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d072      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a4d      	ldr	r2, [pc, #308]	; (8006d60 <HAL_DMA_Abort+0x5e0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d06d      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a4c      	ldr	r2, [pc, #304]	; (8006d64 <HAL_DMA_Abort+0x5e4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d068      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <HAL_DMA_Abort+0x5e8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d063      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a49      	ldr	r2, [pc, #292]	; (8006d6c <HAL_DMA_Abort+0x5ec>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d05e      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a47      	ldr	r2, [pc, #284]	; (8006d70 <HAL_DMA_Abort+0x5f0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d059      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a46      	ldr	r2, [pc, #280]	; (8006d74 <HAL_DMA_Abort+0x5f4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d054      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a44      	ldr	r2, [pc, #272]	; (8006d78 <HAL_DMA_Abort+0x5f8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d04f      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a43      	ldr	r2, [pc, #268]	; (8006d7c <HAL_DMA_Abort+0x5fc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d04a      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a41      	ldr	r2, [pc, #260]	; (8006d80 <HAL_DMA_Abort+0x600>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d045      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <HAL_DMA_Abort+0x604>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d040      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3e      	ldr	r2, [pc, #248]	; (8006d88 <HAL_DMA_Abort+0x608>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d03b      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3d      	ldr	r2, [pc, #244]	; (8006d8c <HAL_DMA_Abort+0x60c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d036      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3b      	ldr	r2, [pc, #236]	; (8006d90 <HAL_DMA_Abort+0x610>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d031      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3a      	ldr	r2, [pc, #232]	; (8006d94 <HAL_DMA_Abort+0x614>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d02c      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a38      	ldr	r2, [pc, #224]	; (8006d98 <HAL_DMA_Abort+0x618>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d027      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a37      	ldr	r2, [pc, #220]	; (8006d9c <HAL_DMA_Abort+0x61c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a35      	ldr	r2, [pc, #212]	; (8006da0 <HAL_DMA_Abort+0x620>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a34      	ldr	r2, [pc, #208]	; (8006da4 <HAL_DMA_Abort+0x624>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a32      	ldr	r2, [pc, #200]	; (8006da8 <HAL_DMA_Abort+0x628>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a31      	ldr	r2, [pc, #196]	; (8006dac <HAL_DMA_Abort+0x62c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2f      	ldr	r2, [pc, #188]	; (8006db0 <HAL_DMA_Abort+0x630>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2e      	ldr	r2, [pc, #184]	; (8006db4 <HAL_DMA_Abort+0x634>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_DMA_Abort+0x58a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2c      	ldr	r2, [pc, #176]	; (8006db8 <HAL_DMA_Abort+0x638>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <HAL_DMA_Abort+0x58e>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <HAL_DMA_Abort+0x590>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d015      	beq.n	8006d40 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d1c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00c      	beq.n	8006d40 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d34:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d3e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40020010 	.word	0x40020010
 8006d60:	40020028 	.word	0x40020028
 8006d64:	40020040 	.word	0x40020040
 8006d68:	40020058 	.word	0x40020058
 8006d6c:	40020070 	.word	0x40020070
 8006d70:	40020088 	.word	0x40020088
 8006d74:	400200a0 	.word	0x400200a0
 8006d78:	400200b8 	.word	0x400200b8
 8006d7c:	40020410 	.word	0x40020410
 8006d80:	40020428 	.word	0x40020428
 8006d84:	40020440 	.word	0x40020440
 8006d88:	40020458 	.word	0x40020458
 8006d8c:	40020470 	.word	0x40020470
 8006d90:	40020488 	.word	0x40020488
 8006d94:	400204a0 	.word	0x400204a0
 8006d98:	400204b8 	.word	0x400204b8
 8006d9c:	58025408 	.word	0x58025408
 8006da0:	5802541c 	.word	0x5802541c
 8006da4:	58025430 	.word	0x58025430
 8006da8:	58025444 	.word	0x58025444
 8006dac:	58025458 	.word	0x58025458
 8006db0:	5802546c 	.word	0x5802546c
 8006db4:	58025480 	.word	0x58025480
 8006db8:	58025494 	.word	0x58025494

08006dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e237      	b.n	800723e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d004      	beq.n	8006de4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e22c      	b.n	800723e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a5c      	ldr	r2, [pc, #368]	; (8006f5c <HAL_DMA_Abort_IT+0x1a0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d04a      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a5b      	ldr	r2, [pc, #364]	; (8006f60 <HAL_DMA_Abort_IT+0x1a4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d045      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a59      	ldr	r2, [pc, #356]	; (8006f64 <HAL_DMA_Abort_IT+0x1a8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d040      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a58      	ldr	r2, [pc, #352]	; (8006f68 <HAL_DMA_Abort_IT+0x1ac>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d03b      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a56      	ldr	r2, [pc, #344]	; (8006f6c <HAL_DMA_Abort_IT+0x1b0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d036      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a55      	ldr	r2, [pc, #340]	; (8006f70 <HAL_DMA_Abort_IT+0x1b4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d031      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a53      	ldr	r2, [pc, #332]	; (8006f74 <HAL_DMA_Abort_IT+0x1b8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d02c      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a52      	ldr	r2, [pc, #328]	; (8006f78 <HAL_DMA_Abort_IT+0x1bc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d027      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a50      	ldr	r2, [pc, #320]	; (8006f7c <HAL_DMA_Abort_IT+0x1c0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d022      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a4f      	ldr	r2, [pc, #316]	; (8006f80 <HAL_DMA_Abort_IT+0x1c4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d01d      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a4d      	ldr	r2, [pc, #308]	; (8006f84 <HAL_DMA_Abort_IT+0x1c8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d018      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a4c      	ldr	r2, [pc, #304]	; (8006f88 <HAL_DMA_Abort_IT+0x1cc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a4a      	ldr	r2, [pc, #296]	; (8006f8c <HAL_DMA_Abort_IT+0x1d0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00e      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a49      	ldr	r2, [pc, #292]	; (8006f90 <HAL_DMA_Abort_IT+0x1d4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d009      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a47      	ldr	r2, [pc, #284]	; (8006f94 <HAL_DMA_Abort_IT+0x1d8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d004      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xc8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a46      	ldr	r2, [pc, #280]	; (8006f98 <HAL_DMA_Abort_IT+0x1dc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d101      	bne.n	8006e88 <HAL_DMA_Abort_IT+0xcc>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <HAL_DMA_Abort_IT+0xce>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 8086 	beq.w	8006f9c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2204      	movs	r2, #4
 8006e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <HAL_DMA_Abort_IT+0x1a0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d04a      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a2e      	ldr	r2, [pc, #184]	; (8006f60 <HAL_DMA_Abort_IT+0x1a4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d045      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <HAL_DMA_Abort_IT+0x1a8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d040      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2b      	ldr	r2, [pc, #172]	; (8006f68 <HAL_DMA_Abort_IT+0x1ac>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d03b      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <HAL_DMA_Abort_IT+0x1b0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d036      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <HAL_DMA_Abort_IT+0x1b4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d031      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <HAL_DMA_Abort_IT+0x1b8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d02c      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <HAL_DMA_Abort_IT+0x1bc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d027      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <HAL_DMA_Abort_IT+0x1c0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d022      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a22      	ldr	r2, [pc, #136]	; (8006f80 <HAL_DMA_Abort_IT+0x1c4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d01d      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a20      	ldr	r2, [pc, #128]	; (8006f84 <HAL_DMA_Abort_IT+0x1c8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d018      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1f      	ldr	r2, [pc, #124]	; (8006f88 <HAL_DMA_Abort_IT+0x1cc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <HAL_DMA_Abort_IT+0x1d0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00e      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1c      	ldr	r2, [pc, #112]	; (8006f90 <HAL_DMA_Abort_IT+0x1d4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d009      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <HAL_DMA_Abort_IT+0x1d8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_DMA_Abort_IT+0x17c>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a19      	ldr	r2, [pc, #100]	; (8006f98 <HAL_DMA_Abort_IT+0x1dc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d108      	bne.n	8006f4a <HAL_DMA_Abort_IT+0x18e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e178      	b.n	800723c <HAL_DMA_Abort_IT+0x480>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e16f      	b.n	800723c <HAL_DMA_Abort_IT+0x480>
 8006f5c:	40020010 	.word	0x40020010
 8006f60:	40020028 	.word	0x40020028
 8006f64:	40020040 	.word	0x40020040
 8006f68:	40020058 	.word	0x40020058
 8006f6c:	40020070 	.word	0x40020070
 8006f70:	40020088 	.word	0x40020088
 8006f74:	400200a0 	.word	0x400200a0
 8006f78:	400200b8 	.word	0x400200b8
 8006f7c:	40020410 	.word	0x40020410
 8006f80:	40020428 	.word	0x40020428
 8006f84:	40020440 	.word	0x40020440
 8006f88:	40020458 	.word	0x40020458
 8006f8c:	40020470 	.word	0x40020470
 8006f90:	40020488 	.word	0x40020488
 8006f94:	400204a0 	.word	0x400204a0
 8006f98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 020e 	bic.w	r2, r2, #14
 8006faa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a6c      	ldr	r2, [pc, #432]	; (8007164 <HAL_DMA_Abort_IT+0x3a8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d04a      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a6b      	ldr	r2, [pc, #428]	; (8007168 <HAL_DMA_Abort_IT+0x3ac>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d045      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a69      	ldr	r2, [pc, #420]	; (800716c <HAL_DMA_Abort_IT+0x3b0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d040      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a68      	ldr	r2, [pc, #416]	; (8007170 <HAL_DMA_Abort_IT+0x3b4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d03b      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a66      	ldr	r2, [pc, #408]	; (8007174 <HAL_DMA_Abort_IT+0x3b8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d036      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a65      	ldr	r2, [pc, #404]	; (8007178 <HAL_DMA_Abort_IT+0x3bc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d031      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a63      	ldr	r2, [pc, #396]	; (800717c <HAL_DMA_Abort_IT+0x3c0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d02c      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a62      	ldr	r2, [pc, #392]	; (8007180 <HAL_DMA_Abort_IT+0x3c4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d027      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a60      	ldr	r2, [pc, #384]	; (8007184 <HAL_DMA_Abort_IT+0x3c8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d022      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a5f      	ldr	r2, [pc, #380]	; (8007188 <HAL_DMA_Abort_IT+0x3cc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d01d      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a5d      	ldr	r2, [pc, #372]	; (800718c <HAL_DMA_Abort_IT+0x3d0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d018      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a5c      	ldr	r2, [pc, #368]	; (8007190 <HAL_DMA_Abort_IT+0x3d4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d013      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a5a      	ldr	r2, [pc, #360]	; (8007194 <HAL_DMA_Abort_IT+0x3d8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d00e      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a59      	ldr	r2, [pc, #356]	; (8007198 <HAL_DMA_Abort_IT+0x3dc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d009      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a57      	ldr	r2, [pc, #348]	; (800719c <HAL_DMA_Abort_IT+0x3e0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d004      	beq.n	800704c <HAL_DMA_Abort_IT+0x290>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a56      	ldr	r2, [pc, #344]	; (80071a0 <HAL_DMA_Abort_IT+0x3e4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d108      	bne.n	800705e <HAL_DMA_Abort_IT+0x2a2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0201 	bic.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e007      	b.n	800706e <HAL_DMA_Abort_IT+0x2b2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0201 	bic.w	r2, r2, #1
 800706c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3c      	ldr	r2, [pc, #240]	; (8007164 <HAL_DMA_Abort_IT+0x3a8>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d072      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3a      	ldr	r2, [pc, #232]	; (8007168 <HAL_DMA_Abort_IT+0x3ac>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d06d      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a39      	ldr	r2, [pc, #228]	; (800716c <HAL_DMA_Abort_IT+0x3b0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d068      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a37      	ldr	r2, [pc, #220]	; (8007170 <HAL_DMA_Abort_IT+0x3b4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d063      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a36      	ldr	r2, [pc, #216]	; (8007174 <HAL_DMA_Abort_IT+0x3b8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d05e      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a34      	ldr	r2, [pc, #208]	; (8007178 <HAL_DMA_Abort_IT+0x3bc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d059      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a33      	ldr	r2, [pc, #204]	; (800717c <HAL_DMA_Abort_IT+0x3c0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d054      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a31      	ldr	r2, [pc, #196]	; (8007180 <HAL_DMA_Abort_IT+0x3c4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d04f      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a30      	ldr	r2, [pc, #192]	; (8007184 <HAL_DMA_Abort_IT+0x3c8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d04a      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a2e      	ldr	r2, [pc, #184]	; (8007188 <HAL_DMA_Abort_IT+0x3cc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d045      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a2d      	ldr	r2, [pc, #180]	; (800718c <HAL_DMA_Abort_IT+0x3d0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d040      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a2b      	ldr	r2, [pc, #172]	; (8007190 <HAL_DMA_Abort_IT+0x3d4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d03b      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <HAL_DMA_Abort_IT+0x3d8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d036      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a28      	ldr	r2, [pc, #160]	; (8007198 <HAL_DMA_Abort_IT+0x3dc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d031      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a27      	ldr	r2, [pc, #156]	; (800719c <HAL_DMA_Abort_IT+0x3e0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d02c      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a25      	ldr	r2, [pc, #148]	; (80071a0 <HAL_DMA_Abort_IT+0x3e4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d027      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a24      	ldr	r2, [pc, #144]	; (80071a4 <HAL_DMA_Abort_IT+0x3e8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d022      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a22      	ldr	r2, [pc, #136]	; (80071a8 <HAL_DMA_Abort_IT+0x3ec>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01d      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a21      	ldr	r2, [pc, #132]	; (80071ac <HAL_DMA_Abort_IT+0x3f0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d018      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1f      	ldr	r2, [pc, #124]	; (80071b0 <HAL_DMA_Abort_IT+0x3f4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1e      	ldr	r2, [pc, #120]	; (80071b4 <HAL_DMA_Abort_IT+0x3f8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <HAL_DMA_Abort_IT+0x3fc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <HAL_DMA_Abort_IT+0x400>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_DMA_Abort_IT+0x3a2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a19      	ldr	r2, [pc, #100]	; (80071c0 <HAL_DMA_Abort_IT+0x404>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d132      	bne.n	80071c4 <HAL_DMA_Abort_IT+0x408>
 800715e:	2301      	movs	r3, #1
 8007160:	e031      	b.n	80071c6 <HAL_DMA_Abort_IT+0x40a>
 8007162:	bf00      	nop
 8007164:	40020010 	.word	0x40020010
 8007168:	40020028 	.word	0x40020028
 800716c:	40020040 	.word	0x40020040
 8007170:	40020058 	.word	0x40020058
 8007174:	40020070 	.word	0x40020070
 8007178:	40020088 	.word	0x40020088
 800717c:	400200a0 	.word	0x400200a0
 8007180:	400200b8 	.word	0x400200b8
 8007184:	40020410 	.word	0x40020410
 8007188:	40020428 	.word	0x40020428
 800718c:	40020440 	.word	0x40020440
 8007190:	40020458 	.word	0x40020458
 8007194:	40020470 	.word	0x40020470
 8007198:	40020488 	.word	0x40020488
 800719c:	400204a0 	.word	0x400204a0
 80071a0:	400204b8 	.word	0x400204b8
 80071a4:	58025408 	.word	0x58025408
 80071a8:	5802541c 	.word	0x5802541c
 80071ac:	58025430 	.word	0x58025430
 80071b0:	58025444 	.word	0x58025444
 80071b4:	58025458 	.word	0x58025458
 80071b8:	5802546c 	.word	0x5802546c
 80071bc:	58025480 	.word	0x58025480
 80071c0:	58025494 	.word	0x58025494
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d028      	beq.n	800721c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	2201      	movs	r2, #1
 80071ea:	409a      	lsls	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800720c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007210:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800721a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop

08007248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007248:	b480      	push	{r7}
 800724a:	b089      	sub	sp, #36	; 0x24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007256:	4b89      	ldr	r3, [pc, #548]	; (800747c <HAL_GPIO_Init+0x234>)
 8007258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800725a:	e194      	b.n	8007586 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	2101      	movs	r1, #1
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	fa01 f303 	lsl.w	r3, r1, r3
 8007268:	4013      	ands	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8186 	beq.w	8007580 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d005      	beq.n	800728c <HAL_GPIO_Init+0x44>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d130      	bne.n	80072ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	2203      	movs	r2, #3
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072c2:	2201      	movs	r2, #1
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	43db      	mvns	r3, r3
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	4013      	ands	r3, r2
 80072d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 0201 	and.w	r2, r3, #1
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d017      	beq.n	800732a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	2203      	movs	r2, #3
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	43db      	mvns	r3, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4013      	ands	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	4313      	orrs	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d123      	bne.n	800737e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	08da      	lsrs	r2, r3, #3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3208      	adds	r2, #8
 800733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	220f      	movs	r2, #15
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	43db      	mvns	r3, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	4313      	orrs	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	08da      	lsrs	r2, r3, #3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3208      	adds	r2, #8
 8007378:	69b9      	ldr	r1, [r7, #24]
 800737a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	2203      	movs	r2, #3
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43db      	mvns	r3, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4013      	ands	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f003 0203 	and.w	r2, r3, #3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80e0 	beq.w	8007580 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c0:	4b2f      	ldr	r3, [pc, #188]	; (8007480 <HAL_GPIO_Init+0x238>)
 80073c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073c6:	4a2e      	ldr	r2, [pc, #184]	; (8007480 <HAL_GPIO_Init+0x238>)
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80073d0:	4b2b      	ldr	r3, [pc, #172]	; (8007480 <HAL_GPIO_Init+0x238>)
 80073d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073de:	4a29      	ldr	r2, [pc, #164]	; (8007484 <HAL_GPIO_Init+0x23c>)
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	3302      	adds	r3, #2
 80073e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	220f      	movs	r2, #15
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43db      	mvns	r3, r3
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	4013      	ands	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a20      	ldr	r2, [pc, #128]	; (8007488 <HAL_GPIO_Init+0x240>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d052      	beq.n	80074b0 <HAL_GPIO_Init+0x268>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1f      	ldr	r2, [pc, #124]	; (800748c <HAL_GPIO_Init+0x244>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d031      	beq.n	8007476 <HAL_GPIO_Init+0x22e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <HAL_GPIO_Init+0x248>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d02b      	beq.n	8007472 <HAL_GPIO_Init+0x22a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <HAL_GPIO_Init+0x24c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d025      	beq.n	800746e <HAL_GPIO_Init+0x226>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <HAL_GPIO_Init+0x250>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01f      	beq.n	800746a <HAL_GPIO_Init+0x222>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <HAL_GPIO_Init+0x254>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d019      	beq.n	8007466 <HAL_GPIO_Init+0x21e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <HAL_GPIO_Init+0x258>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_GPIO_Init+0x21a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a19      	ldr	r2, [pc, #100]	; (80074a4 <HAL_GPIO_Init+0x25c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00d      	beq.n	800745e <HAL_GPIO_Init+0x216>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <HAL_GPIO_Init+0x260>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <HAL_GPIO_Init+0x212>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a17      	ldr	r2, [pc, #92]	; (80074ac <HAL_GPIO_Init+0x264>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d101      	bne.n	8007456 <HAL_GPIO_Init+0x20e>
 8007452:	2309      	movs	r3, #9
 8007454:	e02d      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 8007456:	230a      	movs	r3, #10
 8007458:	e02b      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 800745a:	2308      	movs	r3, #8
 800745c:	e029      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 800745e:	2307      	movs	r3, #7
 8007460:	e027      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 8007462:	2306      	movs	r3, #6
 8007464:	e025      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 8007466:	2305      	movs	r3, #5
 8007468:	e023      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 800746a:	2304      	movs	r3, #4
 800746c:	e021      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 800746e:	2303      	movs	r3, #3
 8007470:	e01f      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 8007472:	2302      	movs	r3, #2
 8007474:	e01d      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 8007476:	2301      	movs	r3, #1
 8007478:	e01b      	b.n	80074b2 <HAL_GPIO_Init+0x26a>
 800747a:	bf00      	nop
 800747c:	58000080 	.word	0x58000080
 8007480:	58024400 	.word	0x58024400
 8007484:	58000400 	.word	0x58000400
 8007488:	58020000 	.word	0x58020000
 800748c:	58020400 	.word	0x58020400
 8007490:	58020800 	.word	0x58020800
 8007494:	58020c00 	.word	0x58020c00
 8007498:	58021000 	.word	0x58021000
 800749c:	58021400 	.word	0x58021400
 80074a0:	58021800 	.word	0x58021800
 80074a4:	58021c00 	.word	0x58021c00
 80074a8:	58022000 	.word	0x58022000
 80074ac:	58022400 	.word	0x58022400
 80074b0:	2300      	movs	r3, #0
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	f002 0203 	and.w	r2, r2, #3
 80074b8:	0092      	lsls	r2, r2, #2
 80074ba:	4093      	lsls	r3, r2
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4313      	orrs	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074c2:	4938      	ldr	r1, [pc, #224]	; (80075a4 <HAL_GPIO_Init+0x35c>)
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	089b      	lsrs	r3, r3, #2
 80074c8:	3302      	adds	r3, #2
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80074f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	43db      	mvns	r3, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4013      	ands	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	43db      	mvns	r3, r3
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	4013      	ands	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	43db      	mvns	r3, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4013      	ands	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	3301      	adds	r3, #1
 8007584:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	f47f ae63 	bne.w	800725c <HAL_GPIO_Init+0x14>
  }
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	3724      	adds	r7, #36	; 0x24
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	58000400 	.word	0x58000400

080075a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	887b      	ldrh	r3, [r7, #2]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
 80075c4:	e001      	b.n	80075ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	807b      	strh	r3, [r7, #2]
 80075e4:	4613      	mov	r3, r2
 80075e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075e8:	787b      	ldrb	r3, [r7, #1]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ee:	887a      	ldrh	r2, [r7, #2]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80075f4:	e003      	b.n	80075fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80075f6:	887b      	ldrh	r3, [r7, #2]
 80075f8:	041a      	lsls	r2, r3, #16
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	619a      	str	r2, [r3, #24]
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	4603      	mov	r3, r0
 8007612:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007618:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	4013      	ands	r3, r2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	4618      	mov	r0, r3
 8007632:	f7fb fda1 	bl	8003178 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007648:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <HAL_PWREx_ConfigSupply+0x70>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b04      	cmp	r3, #4
 8007652:	d00a      	beq.n	800766a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007654:	4b16      	ldr	r3, [pc, #88]	; (80076b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	429a      	cmp	r2, r3
 8007660:	d001      	beq.n	8007666 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e01f      	b.n	80076a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	e01d      	b.n	80076a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800766a:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <HAL_PWREx_ConfigSupply+0x70>)
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f023 0207 	bic.w	r2, r3, #7
 8007672:	490f      	ldr	r1, [pc, #60]	; (80076b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4313      	orrs	r3, r2
 8007678:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800767a:	f7fe ff03 	bl	8006484 <HAL_GetTick>
 800767e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007680:	e009      	b.n	8007696 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007682:	f7fe feff 	bl	8006484 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007690:	d901      	bls.n	8007696 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e007      	b.n	80076a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <HAL_PWREx_ConfigSupply+0x70>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800769e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a2:	d1ee      	bne.n	8007682 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	58024800 	.word	0x58024800

080076b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08c      	sub	sp, #48	; 0x30
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f000 bc1d 	b.w	8007f02 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8087 	beq.w	80077e4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076d6:	4b99      	ldr	r3, [pc, #612]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076e0:	4b96      	ldr	r3, [pc, #600]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d007      	beq.n	80076fc <HAL_RCC_OscConfig+0x48>
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	2b18      	cmp	r3, #24
 80076f0:	d110      	bne.n	8007714 <HAL_RCC_OscConfig+0x60>
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d10b      	bne.n	8007714 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076fc:	4b8f      	ldr	r3, [pc, #572]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d06c      	beq.n	80077e2 <HAL_RCC_OscConfig+0x12e>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d168      	bne.n	80077e2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e3f6      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800771c:	d106      	bne.n	800772c <HAL_RCC_OscConfig+0x78>
 800771e:	4b87      	ldr	r3, [pc, #540]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a86      	ldr	r2, [pc, #536]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	e02e      	b.n	800778a <HAL_RCC_OscConfig+0xd6>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10c      	bne.n	800774e <HAL_RCC_OscConfig+0x9a>
 8007734:	4b81      	ldr	r3, [pc, #516]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a80      	ldr	r2, [pc, #512]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800773a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	4b7e      	ldr	r3, [pc, #504]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a7d      	ldr	r2, [pc, #500]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	e01d      	b.n	800778a <HAL_RCC_OscConfig+0xd6>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007756:	d10c      	bne.n	8007772 <HAL_RCC_OscConfig+0xbe>
 8007758:	4b78      	ldr	r3, [pc, #480]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a77      	ldr	r2, [pc, #476]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800775e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	4b75      	ldr	r3, [pc, #468]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a74      	ldr	r2, [pc, #464]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800776a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	e00b      	b.n	800778a <HAL_RCC_OscConfig+0xd6>
 8007772:	4b72      	ldr	r3, [pc, #456]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a71      	ldr	r2, [pc, #452]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	4b6f      	ldr	r3, [pc, #444]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a6e      	ldr	r2, [pc, #440]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007788:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d013      	beq.n	80077ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007792:	f7fe fe77 	bl	8006484 <HAL_GetTick>
 8007796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800779a:	f7fe fe73 	bl	8006484 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b64      	cmp	r3, #100	; 0x64
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e3aa      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077ac:	4b63      	ldr	r3, [pc, #396]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <HAL_RCC_OscConfig+0xe6>
 80077b8:	e014      	b.n	80077e4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ba:	f7fe fe63 	bl	8006484 <HAL_GetTick>
 80077be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077c2:	f7fe fe5f 	bl	8006484 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b64      	cmp	r3, #100	; 0x64
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e396      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80077d4:	4b59      	ldr	r3, [pc, #356]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f0      	bne.n	80077c2 <HAL_RCC_OscConfig+0x10e>
 80077e0:	e000      	b.n	80077e4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80cb 	beq.w	8007988 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077f2:	4b52      	ldr	r3, [pc, #328]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077fc:	4b4f      	ldr	r3, [pc, #316]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <HAL_RCC_OscConfig+0x164>
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	2b18      	cmp	r3, #24
 800780c:	d156      	bne.n	80078bc <HAL_RCC_OscConfig+0x208>
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d151      	bne.n	80078bc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007818:	4b48      	ldr	r3, [pc, #288]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_OscConfig+0x17c>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e368      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007830:	4b42      	ldr	r3, [pc, #264]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f023 0219 	bic.w	r2, r3, #25
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	493f      	ldr	r1, [pc, #252]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800783e:	4313      	orrs	r3, r2
 8007840:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007842:	f7fe fe1f 	bl	8006484 <HAL_GetTick>
 8007846:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007848:	e008      	b.n	800785c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800784a:	f7fe fe1b 	bl	8006484 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	2b02      	cmp	r3, #2
 8007856:	d901      	bls.n	800785c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e352      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800785c:	4b37      	ldr	r3, [pc, #220]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0f0      	beq.n	800784a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007868:	f7fe fe3c 	bl	80064e4 <HAL_GetREVID>
 800786c:	4603      	mov	r3, r0
 800786e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007872:	4293      	cmp	r3, r2
 8007874:	d817      	bhi.n	80078a6 <HAL_RCC_OscConfig+0x1f2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d108      	bne.n	8007890 <HAL_RCC_OscConfig+0x1dc>
 800787e:	4b2f      	ldr	r3, [pc, #188]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007886:	4a2d      	ldr	r2, [pc, #180]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800788c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800788e:	e07b      	b.n	8007988 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007890:	4b2a      	ldr	r3, [pc, #168]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	4927      	ldr	r1, [pc, #156]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078a4:	e070      	b.n	8007988 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a6:	4b25      	ldr	r3, [pc, #148]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	061b      	lsls	r3, r3, #24
 80078b4:	4921      	ldr	r1, [pc, #132]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078ba:	e065      	b.n	8007988 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d048      	beq.n	8007956 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078c4:	4b1d      	ldr	r3, [pc, #116]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f023 0219 	bic.w	r2, r3, #25
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	491a      	ldr	r1, [pc, #104]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d6:	f7fe fdd5 	bl	8006484 <HAL_GetTick>
 80078da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078dc:	e008      	b.n	80078f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078de:	f7fe fdd1 	bl	8006484 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e308      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078f0:	4b12      	ldr	r3, [pc, #72]	; (800793c <HAL_RCC_OscConfig+0x288>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f0      	beq.n	80078de <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078fc:	f7fe fdf2 	bl	80064e4 <HAL_GetREVID>
 8007900:	4603      	mov	r3, r0
 8007902:	f241 0203 	movw	r2, #4099	; 0x1003
 8007906:	4293      	cmp	r3, r2
 8007908:	d81a      	bhi.n	8007940 <HAL_RCC_OscConfig+0x28c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d108      	bne.n	8007924 <HAL_RCC_OscConfig+0x270>
 8007912:	4b0a      	ldr	r3, [pc, #40]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800791a:	4a08      	ldr	r2, [pc, #32]	; (800793c <HAL_RCC_OscConfig+0x288>)
 800791c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007920:	6053      	str	r3, [r2, #4]
 8007922:	e031      	b.n	8007988 <HAL_RCC_OscConfig+0x2d4>
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	031b      	lsls	r3, r3, #12
 8007932:	4902      	ldr	r1, [pc, #8]	; (800793c <HAL_RCC_OscConfig+0x288>)
 8007934:	4313      	orrs	r3, r2
 8007936:	604b      	str	r3, [r1, #4]
 8007938:	e026      	b.n	8007988 <HAL_RCC_OscConfig+0x2d4>
 800793a:	bf00      	nop
 800793c:	58024400 	.word	0x58024400
 8007940:	4b9a      	ldr	r3, [pc, #616]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	061b      	lsls	r3, r3, #24
 800794e:	4997      	ldr	r1, [pc, #604]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007950:	4313      	orrs	r3, r2
 8007952:	604b      	str	r3, [r1, #4]
 8007954:	e018      	b.n	8007988 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007956:	4b95      	ldr	r3, [pc, #596]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a94      	ldr	r2, [pc, #592]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007962:	f7fe fd8f 	bl	8006484 <HAL_GetTick>
 8007966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800796a:	f7fe fd8b 	bl	8006484 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e2c2      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800797c:	4b8b      	ldr	r3, [pc, #556]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f0      	bne.n	800796a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 80a9 	beq.w	8007ae8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007996:	4b85      	ldr	r3, [pc, #532]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800799e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079a0:	4b82      	ldr	r3, [pc, #520]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d007      	beq.n	80079bc <HAL_RCC_OscConfig+0x308>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b18      	cmp	r3, #24
 80079b0:	d13a      	bne.n	8007a28 <HAL_RCC_OscConfig+0x374>
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d135      	bne.n	8007a28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079bc:	4b7b      	ldr	r3, [pc, #492]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <HAL_RCC_OscConfig+0x320>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d001      	beq.n	80079d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e296      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079d4:	f7fe fd86 	bl	80064e4 <HAL_GetREVID>
 80079d8:	4603      	mov	r3, r0
 80079da:	f241 0203 	movw	r2, #4099	; 0x1003
 80079de:	4293      	cmp	r3, r2
 80079e0:	d817      	bhi.n	8007a12 <HAL_RCC_OscConfig+0x35e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d108      	bne.n	80079fc <HAL_RCC_OscConfig+0x348>
 80079ea:	4b70      	ldr	r3, [pc, #448]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80079f2:	4a6e      	ldr	r2, [pc, #440]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 80079f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079fa:	e075      	b.n	8007ae8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079fc:	4b6b      	ldr	r3, [pc, #428]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	069b      	lsls	r3, r3, #26
 8007a0a:	4968      	ldr	r1, [pc, #416]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a10:	e06a      	b.n	8007ae8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a12:	4b66      	ldr	r3, [pc, #408]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	061b      	lsls	r3, r3, #24
 8007a20:	4962      	ldr	r1, [pc, #392]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a26:	e05f      	b.n	8007ae8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d042      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a30:	4b5e      	ldr	r3, [pc, #376]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a5d      	ldr	r2, [pc, #372]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3c:	f7fe fd22 	bl	8006484 <HAL_GetTick>
 8007a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a44:	f7fe fd1e 	bl	8006484 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e255      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a56:	4b55      	ldr	r3, [pc, #340]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0f0      	beq.n	8007a44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a62:	f7fe fd3f 	bl	80064e4 <HAL_GetREVID>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d817      	bhi.n	8007aa0 <HAL_RCC_OscConfig+0x3ec>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d108      	bne.n	8007a8a <HAL_RCC_OscConfig+0x3d6>
 8007a78:	4b4c      	ldr	r3, [pc, #304]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a80:	4a4a      	ldr	r2, [pc, #296]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a86:	6053      	str	r3, [r2, #4]
 8007a88:	e02e      	b.n	8007ae8 <HAL_RCC_OscConfig+0x434>
 8007a8a:	4b48      	ldr	r3, [pc, #288]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	069b      	lsls	r3, r3, #26
 8007a98:	4944      	ldr	r1, [pc, #272]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	604b      	str	r3, [r1, #4]
 8007a9e:	e023      	b.n	8007ae8 <HAL_RCC_OscConfig+0x434>
 8007aa0:	4b42      	ldr	r3, [pc, #264]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	061b      	lsls	r3, r3, #24
 8007aae:	493f      	ldr	r1, [pc, #252]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60cb      	str	r3, [r1, #12]
 8007ab4:	e018      	b.n	8007ae8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ab6:	4b3d      	ldr	r3, [pc, #244]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a3c      	ldr	r2, [pc, #240]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac2:	f7fe fcdf 	bl	8006484 <HAL_GetTick>
 8007ac6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ac8:	e008      	b.n	8007adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007aca:	f7fe fcdb 	bl	8006484 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e212      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007adc:	4b33      	ldr	r3, [pc, #204]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f0      	bne.n	8007aca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d036      	beq.n	8007b62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d019      	beq.n	8007b30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007afc:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b00:	4a2a      	ldr	r2, [pc, #168]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b08:	f7fe fcbc 	bl	8006484 <HAL_GetTick>
 8007b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b10:	f7fe fcb8 	bl	8006484 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e1ef      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b22:	4b22      	ldr	r3, [pc, #136]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0f0      	beq.n	8007b10 <HAL_RCC_OscConfig+0x45c>
 8007b2e:	e018      	b.n	8007b62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b30:	4b1e      	ldr	r3, [pc, #120]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b34:	4a1d      	ldr	r2, [pc, #116]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b36:	f023 0301 	bic.w	r3, r3, #1
 8007b3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b3c:	f7fe fca2 	bl	8006484 <HAL_GetTick>
 8007b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b42:	e008      	b.n	8007b56 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b44:	f7fe fc9e 	bl	8006484 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d901      	bls.n	8007b56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e1d5      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b56:	4b15      	ldr	r3, [pc, #84]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1f0      	bne.n	8007b44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d039      	beq.n	8007be2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01c      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b76:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b82:	f7fe fc7f 	bl	8006484 <HAL_GetTick>
 8007b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b88:	e008      	b.n	8007b9c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b8a:	f7fe fc7b 	bl	8006484 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e1b2      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <HAL_RCC_OscConfig+0x4f8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0f0      	beq.n	8007b8a <HAL_RCC_OscConfig+0x4d6>
 8007ba8:	e01b      	b.n	8007be2 <HAL_RCC_OscConfig+0x52e>
 8007baa:	bf00      	nop
 8007bac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bb0:	4b9b      	ldr	r3, [pc, #620]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a9a      	ldr	r2, [pc, #616]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bbc:	f7fe fc62 	bl	8006484 <HAL_GetTick>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007bc4:	f7fe fc5e 	bl	8006484 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e195      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bd6:	4b92      	ldr	r3, [pc, #584]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f0      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8081 	beq.w	8007cf2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bf0:	4b8c      	ldr	r3, [pc, #560]	; (8007e24 <HAL_RCC_OscConfig+0x770>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a8b      	ldr	r2, [pc, #556]	; (8007e24 <HAL_RCC_OscConfig+0x770>)
 8007bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bfc:	f7fe fc42 	bl	8006484 <HAL_GetTick>
 8007c00:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c04:	f7fe fc3e 	bl	8006484 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b64      	cmp	r3, #100	; 0x64
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e175      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c16:	4b83      	ldr	r3, [pc, #524]	; (8007e24 <HAL_RCC_OscConfig+0x770>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0f0      	beq.n	8007c04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d106      	bne.n	8007c38 <HAL_RCC_OscConfig+0x584>
 8007c2a:	4b7d      	ldr	r3, [pc, #500]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	4a7c      	ldr	r2, [pc, #496]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	6713      	str	r3, [r2, #112]	; 0x70
 8007c36:	e02d      	b.n	8007c94 <HAL_RCC_OscConfig+0x5e0>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10c      	bne.n	8007c5a <HAL_RCC_OscConfig+0x5a6>
 8007c40:	4b77      	ldr	r3, [pc, #476]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	4a76      	ldr	r2, [pc, #472]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c46:	f023 0301 	bic.w	r3, r3, #1
 8007c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c4c:	4b74      	ldr	r3, [pc, #464]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	4a73      	ldr	r2, [pc, #460]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c52:	f023 0304 	bic.w	r3, r3, #4
 8007c56:	6713      	str	r3, [r2, #112]	; 0x70
 8007c58:	e01c      	b.n	8007c94 <HAL_RCC_OscConfig+0x5e0>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b05      	cmp	r3, #5
 8007c60:	d10c      	bne.n	8007c7c <HAL_RCC_OscConfig+0x5c8>
 8007c62:	4b6f      	ldr	r3, [pc, #444]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c66:	4a6e      	ldr	r2, [pc, #440]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c68:	f043 0304 	orr.w	r3, r3, #4
 8007c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c6e:	4b6c      	ldr	r3, [pc, #432]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	4a6b      	ldr	r2, [pc, #428]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c74:	f043 0301 	orr.w	r3, r3, #1
 8007c78:	6713      	str	r3, [r2, #112]	; 0x70
 8007c7a:	e00b      	b.n	8007c94 <HAL_RCC_OscConfig+0x5e0>
 8007c7c:	4b68      	ldr	r3, [pc, #416]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c80:	4a67      	ldr	r2, [pc, #412]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c82:	f023 0301 	bic.w	r3, r3, #1
 8007c86:	6713      	str	r3, [r2, #112]	; 0x70
 8007c88:	4b65      	ldr	r3, [pc, #404]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8c:	4a64      	ldr	r2, [pc, #400]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007c8e:	f023 0304 	bic.w	r3, r3, #4
 8007c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c9c:	f7fe fbf2 	bl	8006484 <HAL_GetTick>
 8007ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ca2:	e00a      	b.n	8007cba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ca4:	f7fe fbee 	bl	8006484 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e123      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cba:	4b59      	ldr	r3, [pc, #356]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0ee      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x5f0>
 8007cc6:	e014      	b.n	8007cf2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc8:	f7fe fbdc 	bl	8006484 <HAL_GetTick>
 8007ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cce:	e00a      	b.n	8007ce6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cd0:	f7fe fbd8 	bl	8006484 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e10d      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ce6:	4b4e      	ldr	r3, [pc, #312]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1ee      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8102 	beq.w	8007f00 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007cfc:	4b48      	ldr	r3, [pc, #288]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d04:	2b18      	cmp	r3, #24
 8007d06:	f000 80bd 	beq.w	8007e84 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	f040 809e 	bne.w	8007e50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d14:	4b42      	ldr	r3, [pc, #264]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a41      	ldr	r2, [pc, #260]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d20:	f7fe fbb0 	bl	8006484 <HAL_GetTick>
 8007d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d28:	f7fe fbac 	bl	8006484 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e0e3      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d3a:	4b39      	ldr	r3, [pc, #228]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1f0      	bne.n	8007d28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d46:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d4a:	4b37      	ldr	r3, [pc, #220]	; (8007e28 <HAL_RCC_OscConfig+0x774>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d56:	0112      	lsls	r2, r2, #4
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	4931      	ldr	r1, [pc, #196]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	3b01      	subs	r3, #1
 8007d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	025b      	lsls	r3, r3, #9
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	061b      	lsls	r3, r3, #24
 8007d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d90:	4923      	ldr	r1, [pc, #140]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007d96:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007d9c:	f023 0301 	bic.w	r3, r3, #1
 8007da0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007da2:	4b1f      	ldr	r3, [pc, #124]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da6:	4b21      	ldr	r3, [pc, #132]	; (8007e2c <HAL_RCC_OscConfig+0x778>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007dae:	00d2      	lsls	r2, r2, #3
 8007db0:	491b      	ldr	r1, [pc, #108]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	f023 020c 	bic.w	r2, r3, #12
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	4917      	ldr	r1, [pc, #92]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	f023 0202 	bic.w	r2, r3, #2
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd4:	4912      	ldr	r1, [pc, #72]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	4a10      	ldr	r2, [pc, #64]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de6:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	4a0d      	ldr	r2, [pc, #52]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	4a0a      	ldr	r2, [pc, #40]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e02:	4a07      	ldr	r2, [pc, #28]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007e04:	f043 0301 	orr.w	r3, r3, #1
 8007e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <HAL_RCC_OscConfig+0x76c>)
 8007e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e16:	f7fe fb35 	bl	8006484 <HAL_GetTick>
 8007e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e1c:	e011      	b.n	8007e42 <HAL_RCC_OscConfig+0x78e>
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	58024800 	.word	0x58024800
 8007e28:	fffffc0c 	.word	0xfffffc0c
 8007e2c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e30:	f7fe fb28 	bl	8006484 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e05f      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e42:	4b32      	ldr	r3, [pc, #200]	; (8007f0c <HAL_RCC_OscConfig+0x858>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x77c>
 8007e4e:	e057      	b.n	8007f00 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e50:	4b2e      	ldr	r3, [pc, #184]	; (8007f0c <HAL_RCC_OscConfig+0x858>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a2d      	ldr	r2, [pc, #180]	; (8007f0c <HAL_RCC_OscConfig+0x858>)
 8007e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5c:	f7fe fb12 	bl	8006484 <HAL_GetTick>
 8007e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e64:	f7fe fb0e 	bl	8006484 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e045      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e76:	4b25      	ldr	r3, [pc, #148]	; (8007f0c <HAL_RCC_OscConfig+0x858>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f0      	bne.n	8007e64 <HAL_RCC_OscConfig+0x7b0>
 8007e82:	e03d      	b.n	8007f00 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e84:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <HAL_RCC_OscConfig+0x858>)
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e8a:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <HAL_RCC_OscConfig+0x858>)
 8007e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d031      	beq.n	8007efc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f003 0203 	and.w	r2, r3, #3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d12a      	bne.n	8007efc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	091b      	lsrs	r3, r3, #4
 8007eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d122      	bne.n	8007efc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d11a      	bne.n	8007efc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	0a5b      	lsrs	r3, r3, #9
 8007eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d111      	bne.n	8007efc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	0c1b      	lsrs	r3, r3, #16
 8007edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d108      	bne.n	8007efc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	0e1b      	lsrs	r3, r3, #24
 8007eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d001      	beq.n	8007f00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3730      	adds	r7, #48	; 0x30
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	58024400 	.word	0x58024400

08007f10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e19c      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f24:	4b8a      	ldr	r3, [pc, #552]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d910      	bls.n	8007f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f32:	4b87      	ldr	r3, [pc, #540]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f023 020f 	bic.w	r2, r3, #15
 8007f3a:	4985      	ldr	r1, [pc, #532]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f42:	4b83      	ldr	r3, [pc, #524]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e184      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d010      	beq.n	8007f82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	4b7b      	ldr	r3, [pc, #492]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d908      	bls.n	8007f82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f70:	4b78      	ldr	r3, [pc, #480]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	4975      	ldr	r1, [pc, #468]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d010      	beq.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695a      	ldr	r2, [r3, #20]
 8007f92:	4b70      	ldr	r3, [pc, #448]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d908      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f9e:	4b6d      	ldr	r3, [pc, #436]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	496a      	ldr	r1, [pc, #424]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d010      	beq.n	8007fde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	4b64      	ldr	r3, [pc, #400]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d908      	bls.n	8007fde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fcc:	4b61      	ldr	r3, [pc, #388]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	495e      	ldr	r1, [pc, #376]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d010      	beq.n	800800c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	4b59      	ldr	r3, [pc, #356]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d908      	bls.n	800800c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ffa:	4b56      	ldr	r3, [pc, #344]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	4953      	ldr	r1, [pc, #332]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008008:	4313      	orrs	r3, r2
 800800a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d010      	beq.n	800803a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	4b4d      	ldr	r3, [pc, #308]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	429a      	cmp	r2, r3
 8008026:	d908      	bls.n	800803a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008028:	4b4a      	ldr	r3, [pc, #296]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f023 020f 	bic.w	r2, r3, #15
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	4947      	ldr	r1, [pc, #284]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008036:	4313      	orrs	r3, r2
 8008038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d055      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008046:	4b43      	ldr	r3, [pc, #268]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4940      	ldr	r1, [pc, #256]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008054:	4313      	orrs	r3, r2
 8008056:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d107      	bne.n	8008070 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008060:	4b3c      	ldr	r3, [pc, #240]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d121      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0f6      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d107      	bne.n	8008088 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008078:	4b36      	ldr	r3, [pc, #216]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d115      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e0ea      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d107      	bne.n	80080a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008090:	4b30      	ldr	r3, [pc, #192]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e0de      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080a0:	4b2c      	ldr	r3, [pc, #176]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e0d6      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080b0:	4b28      	ldr	r3, [pc, #160]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f023 0207 	bic.w	r2, r3, #7
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	4925      	ldr	r1, [pc, #148]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c2:	f7fe f9df 	bl	8006484 <HAL_GetTick>
 80080c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c8:	e00a      	b.n	80080e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ca:	f7fe f9db 	bl	8006484 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d8:	4293      	cmp	r3, r2
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e0be      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e0:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d1eb      	bne.n	80080ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d010      	beq.n	8008120 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	429a      	cmp	r2, r3
 800810c:	d208      	bcs.n	8008120 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800810e:	4b11      	ldr	r3, [pc, #68]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f023 020f 	bic.w	r2, r3, #15
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	490e      	ldr	r1, [pc, #56]	; (8008154 <HAL_RCC_ClockConfig+0x244>)
 800811c:	4313      	orrs	r3, r2
 800811e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 030f 	and.w	r3, r3, #15
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d214      	bcs.n	8008158 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800812e:	4b08      	ldr	r3, [pc, #32]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f023 020f 	bic.w	r2, r3, #15
 8008136:	4906      	ldr	r1, [pc, #24]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	4313      	orrs	r3, r2
 800813c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800813e:	4b04      	ldr	r3, [pc, #16]	; (8008150 <HAL_RCC_ClockConfig+0x240>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d005      	beq.n	8008158 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e086      	b.n	800825e <HAL_RCC_ClockConfig+0x34e>
 8008150:	52002000 	.word	0x52002000
 8008154:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b00      	cmp	r3, #0
 8008162:	d010      	beq.n	8008186 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008170:	429a      	cmp	r2, r3
 8008172:	d208      	bcs.n	8008186 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008174:	4b3c      	ldr	r3, [pc, #240]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	4939      	ldr	r1, [pc, #228]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008182:	4313      	orrs	r3, r2
 8008184:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d010      	beq.n	80081b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695a      	ldr	r2, [r3, #20]
 8008196:	4b34      	ldr	r3, [pc, #208]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800819e:	429a      	cmp	r2, r3
 80081a0:	d208      	bcs.n	80081b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081a2:	4b31      	ldr	r3, [pc, #196]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	492e      	ldr	r1, [pc, #184]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d010      	beq.n	80081e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	4b28      	ldr	r3, [pc, #160]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d208      	bcs.n	80081e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081d0:	4b25      	ldr	r3, [pc, #148]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	4922      	ldr	r1, [pc, #136]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d010      	beq.n	8008210 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69da      	ldr	r2, [r3, #28]
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d208      	bcs.n	8008210 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80081fe:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	4917      	ldr	r1, [pc, #92]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 800820c:	4313      	orrs	r3, r2
 800820e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008210:	f000 f834 	bl	800827c <HAL_RCC_GetSysClockFreq>
 8008214:	4602      	mov	r2, r0
 8008216:	4b14      	ldr	r3, [pc, #80]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	f003 030f 	and.w	r3, r3, #15
 8008220:	4912      	ldr	r1, [pc, #72]	; (800826c <HAL_RCC_ClockConfig+0x35c>)
 8008222:	5ccb      	ldrb	r3, [r1, r3]
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
 800822c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800822e:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <HAL_RCC_ClockConfig+0x358>)
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	4a0d      	ldr	r2, [pc, #52]	; (800826c <HAL_RCC_ClockConfig+0x35c>)
 8008238:	5cd3      	ldrb	r3, [r2, r3]
 800823a:	f003 031f 	and.w	r3, r3, #31
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <HAL_RCC_ClockConfig+0x360>)
 8008246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008248:	4a0a      	ldr	r2, [pc, #40]	; (8008274 <HAL_RCC_ClockConfig+0x364>)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <HAL_RCC_ClockConfig+0x368>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe f8cc 	bl	80063f0 <HAL_InitTick>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	58024400 	.word	0x58024400
 800826c:	08011968 	.word	0x08011968
 8008270:	24000078 	.word	0x24000078
 8008274:	24000074 	.word	0x24000074
 8008278:	2400007c 	.word	0x2400007c

0800827c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800827c:	b480      	push	{r7}
 800827e:	b089      	sub	sp, #36	; 0x24
 8008280:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008282:	4bb3      	ldr	r3, [pc, #716]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800828a:	2b18      	cmp	r3, #24
 800828c:	f200 8155 	bhi.w	800853a <HAL_RCC_GetSysClockFreq+0x2be>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082fd 	.word	0x080082fd
 800829c:	0800853b 	.word	0x0800853b
 80082a0:	0800853b 	.word	0x0800853b
 80082a4:	0800853b 	.word	0x0800853b
 80082a8:	0800853b 	.word	0x0800853b
 80082ac:	0800853b 	.word	0x0800853b
 80082b0:	0800853b 	.word	0x0800853b
 80082b4:	0800853b 	.word	0x0800853b
 80082b8:	08008323 	.word	0x08008323
 80082bc:	0800853b 	.word	0x0800853b
 80082c0:	0800853b 	.word	0x0800853b
 80082c4:	0800853b 	.word	0x0800853b
 80082c8:	0800853b 	.word	0x0800853b
 80082cc:	0800853b 	.word	0x0800853b
 80082d0:	0800853b 	.word	0x0800853b
 80082d4:	0800853b 	.word	0x0800853b
 80082d8:	08008329 	.word	0x08008329
 80082dc:	0800853b 	.word	0x0800853b
 80082e0:	0800853b 	.word	0x0800853b
 80082e4:	0800853b 	.word	0x0800853b
 80082e8:	0800853b 	.word	0x0800853b
 80082ec:	0800853b 	.word	0x0800853b
 80082f0:	0800853b 	.word	0x0800853b
 80082f4:	0800853b 	.word	0x0800853b
 80082f8:	0800832f 	.word	0x0800832f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082fc:	4b94      	ldr	r3, [pc, #592]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d009      	beq.n	800831c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008308:	4b91      	ldr	r3, [pc, #580]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	08db      	lsrs	r3, r3, #3
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	4a90      	ldr	r2, [pc, #576]	; (8008554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800831a:	e111      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800831c:	4b8d      	ldr	r3, [pc, #564]	; (8008554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800831e:	61bb      	str	r3, [r7, #24]
    break;
 8008320:	e10e      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008322:	4b8d      	ldr	r3, [pc, #564]	; (8008558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008324:	61bb      	str	r3, [r7, #24]
    break;
 8008326:	e10b      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008328:	4b8c      	ldr	r3, [pc, #560]	; (800855c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800832a:	61bb      	str	r3, [r7, #24]
    break;
 800832c:	e108      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800832e:	4b88      	ldr	r3, [pc, #544]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008338:	4b85      	ldr	r3, [pc, #532]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008342:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008344:	4b82      	ldr	r3, [pc, #520]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800834e:	4b80      	ldr	r3, [pc, #512]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80e1 	beq.w	8008534 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b02      	cmp	r3, #2
 8008376:	f000 8083 	beq.w	8008480 <HAL_RCC_GetSysClockFreq+0x204>
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b02      	cmp	r3, #2
 800837e:	f200 80a1 	bhi.w	80084c4 <HAL_RCC_GetSysClockFreq+0x248>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0x114>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d056      	beq.n	800843c <HAL_RCC_GetSysClockFreq+0x1c0>
 800838e:	e099      	b.n	80084c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008390:	4b6f      	ldr	r3, [pc, #444]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b00      	cmp	r3, #0
 800839a:	d02d      	beq.n	80083f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800839c:	4b6c      	ldr	r3, [pc, #432]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	08db      	lsrs	r3, r3, #3
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	4a6b      	ldr	r2, [pc, #428]	; (8008554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c6:	4b62      	ldr	r3, [pc, #392]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80083f6:	e087      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008564 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840a:	4b51      	ldr	r3, [pc, #324]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841a:	ed97 6a02 	vldr	s12, [r7, #8]
 800841e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843a:	e065      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008568 <HAL_RCC_GetSysClockFreq+0x2ec>
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b40      	ldr	r3, [pc, #256]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008462:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847e:	e043      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800856c <HAL_RCC_GetSysClockFreq+0x2f0>
 800848e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008492:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80084a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c2:	e021      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008568 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d6:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008506:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008508:	4b11      	ldr	r3, [pc, #68]	; (8008550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	0a5b      	lsrs	r3, r3, #9
 800850e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008512:	3301      	adds	r3, #1
 8008514:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008520:	edd7 6a07 	vldr	s13, [r7, #28]
 8008524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800852c:	ee17 3a90 	vmov	r3, s15
 8008530:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008532:	e005      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	61bb      	str	r3, [r7, #24]
    break;
 8008538:	e002      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800853a:	4b07      	ldr	r3, [pc, #28]	; (8008558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800853c:	61bb      	str	r3, [r7, #24]
    break;
 800853e:	bf00      	nop
  }

  return sysclockfreq;
 8008540:	69bb      	ldr	r3, [r7, #24]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3724      	adds	r7, #36	; 0x24
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
 8008554:	03d09000 	.word	0x03d09000
 8008558:	003d0900 	.word	0x003d0900
 800855c:	017d7840 	.word	0x017d7840
 8008560:	46000000 	.word	0x46000000
 8008564:	4c742400 	.word	0x4c742400
 8008568:	4a742400 	.word	0x4a742400
 800856c:	4bbebc20 	.word	0x4bbebc20

08008570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008576:	f7ff fe81 	bl	800827c <HAL_RCC_GetSysClockFreq>
 800857a:	4602      	mov	r2, r0
 800857c:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	0a1b      	lsrs	r3, r3, #8
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	490f      	ldr	r1, [pc, #60]	; (80085c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008588:	5ccb      	ldrb	r3, [r1, r3]
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	fa22 f303 	lsr.w	r3, r2, r3
 8008592:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008594:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800859e:	5cd3      	ldrb	r3, [r2, r3]
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	fa22 f303 	lsr.w	r3, r2, r3
 80085aa:	4a07      	ldr	r2, [pc, #28]	; (80085c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80085ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085ae:	4a07      	ldr	r2, [pc, #28]	; (80085cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80085b6:	681b      	ldr	r3, [r3, #0]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	58024400 	.word	0x58024400
 80085c4:	08011968 	.word	0x08011968
 80085c8:	24000078 	.word	0x24000078
 80085cc:	24000074 	.word	0x24000074

080085d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80085d4:	f7ff ffcc 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	091b      	lsrs	r3, r3, #4
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	4904      	ldr	r1, [pc, #16]	; (80085f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085e6:	5ccb      	ldrb	r3, [r1, r3]
 80085e8:	f003 031f 	and.w	r3, r3, #31
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	58024400 	.word	0x58024400
 80085f8:	08011968 	.word	0x08011968

080085fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008600:	f7ff ffb6 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 8008604:	4602      	mov	r2, r0
 8008606:	4b06      	ldr	r3, [pc, #24]	; (8008620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008612:	5ccb      	ldrb	r3, [r1, r3]
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800861c:	4618      	mov	r0, r3
 800861e:	bd80      	pop	{r7, pc}
 8008620:	58024400 	.word	0x58024400
 8008624:	08011968 	.word	0x08011968

08008628 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008630:	2300      	movs	r3, #0
 8008632:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008634:	2300      	movs	r3, #0
 8008636:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d03f      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800864c:	d02a      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800864e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008652:	d824      	bhi.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008658:	d018      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800865a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800865e:	d81e      	bhi.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008668:	d007      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800866a:	e018      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800866c:	4ba3      	ldr	r3, [pc, #652]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	4aa2      	ldr	r2, [pc, #648]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008678:	e015      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3304      	adds	r3, #4
 800867e:	2102      	movs	r1, #2
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f9d5 	bl	8009a30 <RCCEx_PLL2_Config>
 8008686:	4603      	mov	r3, r0
 8008688:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800868a:	e00c      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3324      	adds	r3, #36	; 0x24
 8008690:	2102      	movs	r1, #2
 8008692:	4618      	mov	r0, r3
 8008694:	f001 fa7e 	bl	8009b94 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800869c:	e003      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	75fb      	strb	r3, [r7, #23]
      break;
 80086a2:	e000      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80086a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d109      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80086ac:	4b93      	ldr	r3, [pc, #588]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b8:	4990      	ldr	r1, [pc, #576]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	650b      	str	r3, [r1, #80]	; 0x50
 80086be:	e001      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d03d      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d826      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	080086f5 	.word	0x080086f5
 80086e4:	08008703 	.word	0x08008703
 80086e8:	08008715 	.word	0x08008715
 80086ec:	0800872d 	.word	0x0800872d
 80086f0:	0800872d 	.word	0x0800872d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f4:	4b81      	ldr	r3, [pc, #516]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	4a80      	ldr	r2, [pc, #512]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008700:	e015      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f991 	bl	8009a30 <RCCEx_PLL2_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008712:	e00c      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3324      	adds	r3, #36	; 0x24
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f001 fa3a 	bl	8009b94 <RCCEx_PLL3_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008724:	e003      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
      break;
 800872a:	e000      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800872c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008734:	4b71      	ldr	r3, [pc, #452]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008738:	f023 0207 	bic.w	r2, r3, #7
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008740:	496e      	ldr	r1, [pc, #440]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008742:	4313      	orrs	r3, r2
 8008744:	650b      	str	r3, [r1, #80]	; 0x50
 8008746:	e001      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008754:	2b00      	cmp	r3, #0
 8008756:	d042      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008760:	d02b      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008766:	d825      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008768:	2bc0      	cmp	r3, #192	; 0xc0
 800876a:	d028      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800876c:	2bc0      	cmp	r3, #192	; 0xc0
 800876e:	d821      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d016      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008774:	2b80      	cmp	r3, #128	; 0x80
 8008776:	d81d      	bhi.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d007      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008780:	e018      	b.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008782:	4b5e      	ldr	r3, [pc, #376]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	4a5d      	ldr	r2, [pc, #372]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800878c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800878e:	e017      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f001 f94a 	bl	8009a30 <RCCEx_PLL2_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80087a0:	e00e      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3324      	adds	r3, #36	; 0x24
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 f9f3 	bl	8009b94 <RCCEx_PLL3_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80087b2:	e005      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
      break;
 80087b8:	e002      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80087ba:	bf00      	nop
 80087bc:	e000      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80087be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d109      	bne.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80087c6:	4b4d      	ldr	r3, [pc, #308]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d2:	494a      	ldr	r1, [pc, #296]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	650b      	str	r3, [r1, #80]	; 0x50
 80087d8:	e001      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d049      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087f4:	d030      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80087f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087fa:	d82a      	bhi.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80087fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008800:	d02c      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008802:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008806:	d824      	bhi.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800880c:	d018      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800880e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008812:	d81e      	bhi.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800881c:	d007      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800881e:	e018      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008820:	4b36      	ldr	r3, [pc, #216]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	4a35      	ldr	r2, [pc, #212]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800882a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800882c:	e017      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3304      	adds	r3, #4
 8008832:	2100      	movs	r1, #0
 8008834:	4618      	mov	r0, r3
 8008836:	f001 f8fb 	bl	8009a30 <RCCEx_PLL2_Config>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800883e:	e00e      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3324      	adds	r3, #36	; 0x24
 8008844:	2100      	movs	r1, #0
 8008846:	4618      	mov	r0, r3
 8008848:	f001 f9a4 	bl	8009b94 <RCCEx_PLL3_Config>
 800884c:	4603      	mov	r3, r0
 800884e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008850:	e005      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	75fb      	strb	r3, [r7, #23]
      break;
 8008856:	e002      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008858:	bf00      	nop
 800885a:	e000      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800885c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008868:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008872:	4922      	ldr	r1, [pc, #136]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008874:	4313      	orrs	r3, r2
 8008876:	658b      	str	r3, [r1, #88]	; 0x58
 8008878:	e001      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008886:	2b00      	cmp	r3, #0
 8008888:	d04b      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008894:	d030      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008896:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800889a:	d82a      	bhi.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800889c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088a0:	d02e      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80088a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088a6:	d824      	bhi.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80088a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ac:	d018      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80088ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b2:	d81e      	bhi.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80088b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088bc:	d007      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80088be:	e018      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088c0:	4b0e      	ldr	r3, [pc, #56]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	4a0d      	ldr	r2, [pc, #52]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088cc:	e019      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3304      	adds	r3, #4
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 f8ab 	bl	8009a30 <RCCEx_PLL2_Config>
 80088da:	4603      	mov	r3, r0
 80088dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80088de:	e010      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3324      	adds	r3, #36	; 0x24
 80088e4:	2100      	movs	r1, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f954 	bl	8009b94 <RCCEx_PLL3_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088f0:	e007      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]
      break;
 80088f6:	e004      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80088f8:	bf00      	nop
 80088fa:	e002      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80088fc:	58024400 	.word	0x58024400
      break;
 8008900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10a      	bne.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008908:	4b99      	ldr	r3, [pc, #612]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800890a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008916:	4996      	ldr	r1, [pc, #600]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008918:	4313      	orrs	r3, r2
 800891a:	658b      	str	r3, [r1, #88]	; 0x58
 800891c:	e001      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d032      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008932:	2b30      	cmp	r3, #48	; 0x30
 8008934:	d01c      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008936:	2b30      	cmp	r3, #48	; 0x30
 8008938:	d817      	bhi.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800893a:	2b20      	cmp	r3, #32
 800893c:	d00c      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800893e:	2b20      	cmp	r3, #32
 8008940:	d813      	bhi.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008946:	2b10      	cmp	r3, #16
 8008948:	d10f      	bne.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800894a:	4b89      	ldr	r3, [pc, #548]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	4a88      	ldr	r2, [pc, #544]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008956:	e00e      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3304      	adds	r3, #4
 800895c:	2102      	movs	r1, #2
 800895e:	4618      	mov	r0, r3
 8008960:	f001 f866 	bl	8009a30 <RCCEx_PLL2_Config>
 8008964:	4603      	mov	r3, r0
 8008966:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008968:	e005      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	75fb      	strb	r3, [r7, #23]
      break;
 800896e:	e002      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008970:	bf00      	nop
 8008972:	e000      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d109      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800897c:	4b7c      	ldr	r3, [pc, #496]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800897e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008988:	4979      	ldr	r1, [pc, #484]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800898a:	4313      	orrs	r3, r2
 800898c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800898e:	e001      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d047      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089a8:	d030      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80089aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ae:	d82a      	bhi.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80089b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089b4:	d02c      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80089b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089ba:	d824      	bhi.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80089bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c0:	d018      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80089c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c6:	d81e      	bhi.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80089cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d0:	d007      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80089d2:	e018      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d4:	4b66      	ldr	r3, [pc, #408]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a65      	ldr	r2, [pc, #404]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089e0:	e017      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3304      	adds	r3, #4
 80089e6:	2100      	movs	r1, #0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f001 f821 	bl	8009a30 <RCCEx_PLL2_Config>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089f2:	e00e      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3324      	adds	r3, #36	; 0x24
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f001 f8ca 	bl	8009b94 <RCCEx_PLL3_Config>
 8008a00:	4603      	mov	r3, r0
 8008a02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008a04:	e005      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0a:	e002      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008a0c:	bf00      	nop
 8008a0e:	e000      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d109      	bne.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a18:	4b55      	ldr	r3, [pc, #340]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a24:	4952      	ldr	r1, [pc, #328]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	650b      	str	r3, [r1, #80]	; 0x50
 8008a2a:	e001      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d049      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a44:	d02e      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008a46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a4a:	d828      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a50:	d02a      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a56:	d822      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a5c:	d026      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a62:	d81c      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a68:	d010      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a6e:	d816      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01d      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a78:	d111      	bne.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 ffd5 	bl	8009a30 <RCCEx_PLL2_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008a8a:	e012      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3324      	adds	r3, #36	; 0x24
 8008a90:	2101      	movs	r1, #1
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 f87e 	bl	8009b94 <RCCEx_PLL3_Config>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008a9c:	e009      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa2:	e006      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008aa4:	bf00      	nop
 8008aa6:	e004      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008aa8:	bf00      	nop
 8008aaa:	e002      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008aac:	bf00      	nop
 8008aae:	e000      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d109      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ab8:	4b2d      	ldr	r3, [pc, #180]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac4:	492a      	ldr	r1, [pc, #168]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	650b      	str	r3, [r1, #80]	; 0x50
 8008aca:	e001      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d04d      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ae6:	d02e      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aec:	d828      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af2:	d02a      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af8:	d822      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008afa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008afe:	d026      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008b00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b04:	d81c      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b0a:	d010      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b10:	d816      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d01d      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b1a:	d111      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	2101      	movs	r1, #1
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 ff84 	bl	8009a30 <RCCEx_PLL2_Config>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b2c:	e012      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3324      	adds	r3, #36	; 0x24
 8008b32:	2101      	movs	r1, #1
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 f82d 	bl	8009b94 <RCCEx_PLL3_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008b3e:	e009      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	75fb      	strb	r3, [r7, #23]
      break;
 8008b44:	e006      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b46:	bf00      	nop
 8008b48:	e004      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b4a:	bf00      	nop
 8008b4c:	e002      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b4e:	bf00      	nop
 8008b50:	e000      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b68:	4901      	ldr	r1, [pc, #4]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b6e:	e003      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d02f      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8c:	d00e      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b92:	d814      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d015      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b9c:	d10f      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b9e:	4baf      	ldr	r3, [pc, #700]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba2:	4aae      	ldr	r2, [pc, #696]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008baa:	e00c      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 ff3c 	bl	8009a30 <RCCEx_PLL2_Config>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008bbc:	e003      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc2:	e000      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bcc:	4ba3      	ldr	r3, [pc, #652]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd8:	49a0      	ldr	r1, [pc, #640]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8008bde:	e001      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d032      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d81b      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c37 	.word	0x08008c37
 8008c04:	08008c11 	.word	0x08008c11
 8008c08:	08008c1f 	.word	0x08008c1f
 8008c0c:	08008c37 	.word	0x08008c37
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c10:	4b92      	ldr	r3, [pc, #584]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a91      	ldr	r2, [pc, #580]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008c1c:	e00c      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3304      	adds	r3, #4
 8008c22:	2102      	movs	r1, #2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 ff03 	bl	8009a30 <RCCEx_PLL2_Config>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008c2e:	e003      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	75fb      	strb	r3, [r7, #23]
      break;
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c3e:	4b87      	ldr	r3, [pc, #540]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c42:	f023 0203 	bic.w	r2, r3, #3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	4984      	ldr	r1, [pc, #528]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c50:	e001      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 8086 	beq.w	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c64:	4b7e      	ldr	r3, [pc, #504]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a7d      	ldr	r2, [pc, #500]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c70:	f7fd fc08 	bl	8006484 <HAL_GetTick>
 8008c74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c76:	e009      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c78:	f7fd fc04 	bl	8006484 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b64      	cmp	r3, #100	; 0x64
 8008c84:	d902      	bls.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	75fb      	strb	r3, [r7, #23]
        break;
 8008c8a:	e005      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c8c:	4b74      	ldr	r3, [pc, #464]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0ef      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d166      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008c9e:	4b6f      	ldr	r3, [pc, #444]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ca8:	4053      	eors	r3, r2
 8008caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d013      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008cb2:	4b6a      	ldr	r3, [pc, #424]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008cbc:	4b67      	ldr	r3, [pc, #412]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	4a66      	ldr	r2, [pc, #408]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008cc8:	4b64      	ldr	r3, [pc, #400]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ccc:	4a63      	ldr	r2, [pc, #396]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008cd4:	4a61      	ldr	r2, [pc, #388]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce4:	d115      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce6:	f7fd fbcd 	bl	8006484 <HAL_GetTick>
 8008cea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cec:	e00b      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cee:	f7fd fbc9 	bl	8006484 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d902      	bls.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	75fb      	strb	r3, [r7, #23]
            break;
 8008d04:	e005      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d06:	4b55      	ldr	r3, [pc, #340]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0a:	f003 0302 	and.w	r3, r3, #2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0ed      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d126      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d26:	d10d      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008d28:	4b4c      	ldr	r3, [pc, #304]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d36:	0919      	lsrs	r1, r3, #4
 8008d38:	4b4a      	ldr	r3, [pc, #296]	; (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008d3a:	400b      	ands	r3, r1
 8008d3c:	4947      	ldr	r1, [pc, #284]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	610b      	str	r3, [r1, #16]
 8008d42:	e005      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008d44:	4b45      	ldr	r3, [pc, #276]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	4a44      	ldr	r2, [pc, #272]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d4e:	6113      	str	r3, [r2, #16]
 8008d50:	4b42      	ldr	r3, [pc, #264]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d5e:	493f      	ldr	r1, [pc, #252]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	670b      	str	r3, [r1, #112]	; 0x70
 8008d64:	e004      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	75bb      	strb	r3, [r7, #22]
 8008d6a:	e001      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 8085 	beq.w	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d82:	2b28      	cmp	r3, #40	; 0x28
 8008d84:	d866      	bhi.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008e69 	.word	0x08008e69
 8008d90:	08008e55 	.word	0x08008e55
 8008d94:	08008e55 	.word	0x08008e55
 8008d98:	08008e55 	.word	0x08008e55
 8008d9c:	08008e55 	.word	0x08008e55
 8008da0:	08008e55 	.word	0x08008e55
 8008da4:	08008e55 	.word	0x08008e55
 8008da8:	08008e55 	.word	0x08008e55
 8008dac:	08008e31 	.word	0x08008e31
 8008db0:	08008e55 	.word	0x08008e55
 8008db4:	08008e55 	.word	0x08008e55
 8008db8:	08008e55 	.word	0x08008e55
 8008dbc:	08008e55 	.word	0x08008e55
 8008dc0:	08008e55 	.word	0x08008e55
 8008dc4:	08008e55 	.word	0x08008e55
 8008dc8:	08008e55 	.word	0x08008e55
 8008dcc:	08008e43 	.word	0x08008e43
 8008dd0:	08008e55 	.word	0x08008e55
 8008dd4:	08008e55 	.word	0x08008e55
 8008dd8:	08008e55 	.word	0x08008e55
 8008ddc:	08008e55 	.word	0x08008e55
 8008de0:	08008e55 	.word	0x08008e55
 8008de4:	08008e55 	.word	0x08008e55
 8008de8:	08008e55 	.word	0x08008e55
 8008dec:	08008e69 	.word	0x08008e69
 8008df0:	08008e55 	.word	0x08008e55
 8008df4:	08008e55 	.word	0x08008e55
 8008df8:	08008e55 	.word	0x08008e55
 8008dfc:	08008e55 	.word	0x08008e55
 8008e00:	08008e55 	.word	0x08008e55
 8008e04:	08008e55 	.word	0x08008e55
 8008e08:	08008e55 	.word	0x08008e55
 8008e0c:	08008e69 	.word	0x08008e69
 8008e10:	08008e55 	.word	0x08008e55
 8008e14:	08008e55 	.word	0x08008e55
 8008e18:	08008e55 	.word	0x08008e55
 8008e1c:	08008e55 	.word	0x08008e55
 8008e20:	08008e55 	.word	0x08008e55
 8008e24:	08008e55 	.word	0x08008e55
 8008e28:	08008e55 	.word	0x08008e55
 8008e2c:	08008e69 	.word	0x08008e69
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	2101      	movs	r1, #1
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fdfa 	bl	8009a30 <RCCEx_PLL2_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008e40:	e013      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	3324      	adds	r3, #36	; 0x24
 8008e46:	2101      	movs	r1, #1
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fea3 	bl	8009b94 <RCCEx_PLL3_Config>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008e52:	e00a      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]
      break;
 8008e58:	e007      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008e5a:	bf00      	nop
 8008e5c:	58024400 	.word	0x58024400
 8008e60:	58024800 	.word	0x58024800
 8008e64:	00ffffcf 	.word	0x00ffffcf
      break;
 8008e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d109      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008e70:	4b96      	ldr	r3, [pc, #600]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e74:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e7c:	4993      	ldr	r1, [pc, #588]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	654b      	str	r3, [r1, #84]	; 0x54
 8008e82:	e001      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d038      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e98:	2b05      	cmp	r3, #5
 8008e9a:	d821      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ee7 	.word	0x08008ee7
 8008ea8:	08008ebd 	.word	0x08008ebd
 8008eac:	08008ecf 	.word	0x08008ecf
 8008eb0:	08008ee7 	.word	0x08008ee7
 8008eb4:	08008ee7 	.word	0x08008ee7
 8008eb8:	08008ee7 	.word	0x08008ee7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fdb4 	bl	8009a30 <RCCEx_PLL2_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008ecc:	e00c      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3324      	adds	r3, #36	; 0x24
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fe5d 	bl	8009b94 <RCCEx_PLL3_Config>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008ede:	e003      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee4:	e000      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d109      	bne.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008eee:	4b77      	ldr	r3, [pc, #476]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef2:	f023 0207 	bic.w	r2, r3, #7
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008efa:	4974      	ldr	r1, [pc, #464]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	654b      	str	r3, [r1, #84]	; 0x54
 8008f00:	e001      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d03a      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f18:	2b05      	cmp	r3, #5
 8008f1a:	d821      	bhi.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008f1c:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f67 	.word	0x08008f67
 8008f28:	08008f3d 	.word	0x08008f3d
 8008f2c:	08008f4f 	.word	0x08008f4f
 8008f30:	08008f67 	.word	0x08008f67
 8008f34:	08008f67 	.word	0x08008f67
 8008f38:	08008f67 	.word	0x08008f67
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	2101      	movs	r1, #1
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fd74 	bl	8009a30 <RCCEx_PLL2_Config>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008f4c:	e00c      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3324      	adds	r3, #36	; 0x24
 8008f52:	2101      	movs	r1, #1
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fe1d 	bl	8009b94 <RCCEx_PLL3_Config>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008f5e:	e003      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]
      break;
 8008f64:	e000      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f6e:	4b57      	ldr	r3, [pc, #348]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f72:	f023 0207 	bic.w	r2, r3, #7
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7c:	4953      	ldr	r1, [pc, #332]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	658b      	str	r3, [r1, #88]	; 0x58
 8008f82:	e001      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d04b      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f9e:	d02e      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fa4:	d828      	bhi.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008faa:	d02a      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb0:	d822      	bhi.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008fb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fb6:	d026      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008fb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fbc:	d81c      	bhi.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc2:	d010      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc8:	d816      	bhi.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d01d      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd2:	d111      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fd28 	bl	8009a30 <RCCEx_PLL2_Config>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008fe4:	e012      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3324      	adds	r3, #36	; 0x24
 8008fea:	2102      	movs	r1, #2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fdd1 	bl	8009b94 <RCCEx_PLL3_Config>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ff6:	e009      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffc:	e006      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008ffe:	bf00      	nop
 8009000:	e004      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009002:	bf00      	nop
 8009004:	e002      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009006:	bf00      	nop
 8009008:	e000      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800900a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10a      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009012:	4b2e      	ldr	r3, [pc, #184]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009016:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009020:	492a      	ldr	r1, [pc, #168]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009022:	4313      	orrs	r3, r2
 8009024:	654b      	str	r3, [r1, #84]	; 0x54
 8009026:	e001      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d04d      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800903e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009042:	d02e      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009044:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009048:	d828      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800904a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800904e:	d02a      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009054:	d822      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800905a:	d026      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800905c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009060:	d81c      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009066:	d010      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800906c:	d816      	bhi.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d01d      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009076:	d111      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fcd6 	bl	8009a30 <RCCEx_PLL2_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009088:	e012      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3324      	adds	r3, #36	; 0x24
 800908e:	2102      	movs	r1, #2
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fd7f 	bl	8009b94 <RCCEx_PLL3_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800909a:	e009      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	75fb      	strb	r3, [r7, #23]
      break;
 80090a0:	e006      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090a2:	bf00      	nop
 80090a4:	e004      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090a6:	bf00      	nop
 80090a8:	e002      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80090ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10c      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090c4:	4901      	ldr	r1, [pc, #4]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	658b      	str	r3, [r1, #88]	; 0x58
 80090ca:	e003      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80090cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d04b      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090ea:	d02e      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80090ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090f0:	d828      	bhi.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80090f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090f6:	d02a      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80090f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090fc:	d822      	bhi.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80090fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009102:	d026      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009104:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009108:	d81c      	bhi.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800910a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800910e:	d010      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009114:	d816      	bhi.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01d      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800911a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800911e:	d111      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3304      	adds	r3, #4
 8009124:	2100      	movs	r1, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fc82 	bl	8009a30 <RCCEx_PLL2_Config>
 800912c:	4603      	mov	r3, r0
 800912e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009130:	e012      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3324      	adds	r3, #36	; 0x24
 8009136:	2102      	movs	r1, #2
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fd2b 	bl	8009b94 <RCCEx_PLL3_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009142:	e009      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	75fb      	strb	r3, [r7, #23]
      break;
 8009148:	e006      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800914a:	bf00      	nop
 800914c:	e004      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800914e:	bf00      	nop
 8009150:	e002      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009152:	bf00      	nop
 8009154:	e000      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10a      	bne.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800915e:	4b9d      	ldr	r3, [pc, #628]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800916c:	4999      	ldr	r1, [pc, #612]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800916e:	4313      	orrs	r3, r2
 8009170:	658b      	str	r3, [r1, #88]	; 0x58
 8009172:	e001      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01a      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800918a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918e:	d10a      	bne.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3324      	adds	r3, #36	; 0x24
 8009194:	2102      	movs	r1, #2
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fcfc 	bl	8009b94 <RCCEx_PLL3_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80091a6:	4b8b      	ldr	r3, [pc, #556]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091b4:	4987      	ldr	r1, [pc, #540]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01a      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d0:	d10a      	bne.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3324      	adds	r3, #36	; 0x24
 80091d6:	2102      	movs	r1, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fcdb 	bl	8009b94 <RCCEx_PLL3_Config>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091e8:	4b7a      	ldr	r3, [pc, #488]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091f6:	4977      	ldr	r1, [pc, #476]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d034      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800920e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009212:	d01d      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009218:	d817      	bhi.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800921e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009222:	d009      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009224:	e011      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3304      	adds	r3, #4
 800922a:	2100      	movs	r1, #0
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fbff 	bl	8009a30 <RCCEx_PLL2_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009236:	e00c      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3324      	adds	r3, #36	; 0x24
 800923c:	2102      	movs	r1, #2
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fca8 	bl	8009b94 <RCCEx_PLL3_Config>
 8009244:	4603      	mov	r3, r0
 8009246:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009248:	e003      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]
      break;
 800924e:	e000      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009258:	4b5e      	ldr	r3, [pc, #376]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800925a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009266:	495b      	ldr	r1, [pc, #364]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009268:	4313      	orrs	r3, r2
 800926a:	658b      	str	r3, [r1, #88]	; 0x58
 800926c:	e001      	b.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d033      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009288:	d01c      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800928a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800928e:	d816      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009294:	d003      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800929a:	d007      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800929c:	e00f      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929e:	4b4d      	ldr	r3, [pc, #308]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	4a4c      	ldr	r2, [pc, #304]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80092aa:	e00c      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3324      	adds	r3, #36	; 0x24
 80092b0:	2101      	movs	r1, #1
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fc6e 	bl	8009b94 <RCCEx_PLL3_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80092bc:	e003      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
      break;
 80092c2:	e000      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80092c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092cc:	4b41      	ldr	r3, [pc, #260]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092da:	493e      	ldr	r1, [pc, #248]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	654b      	str	r3, [r1, #84]	; 0x54
 80092e0:	e001      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d029      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80092fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092fe:	d007      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009300:	e00f      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009302:	4b34      	ldr	r3, [pc, #208]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009306:	4a33      	ldr	r2, [pc, #204]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800930c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800930e:	e00b      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3304      	adds	r3, #4
 8009314:	2102      	movs	r1, #2
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fb8a 	bl	8009a30 <RCCEx_PLL2_Config>
 800931c:	4603      	mov	r3, r0
 800931e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009320:	e002      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	75fb      	strb	r3, [r7, #23]
      break;
 8009326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800932e:	4b29      	ldr	r3, [pc, #164]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009332:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	4926      	ldr	r1, [pc, #152]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800933c:	4313      	orrs	r3, r2
 800933e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009340:	e001      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00a      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3324      	adds	r3, #36	; 0x24
 8009356:	2102      	movs	r1, #2
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fc1b 	bl	8009b94 <RCCEx_PLL3_Config>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d033      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800937c:	d017      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800937e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009382:	d811      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009388:	d013      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800938a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800938e:	d80b      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009390:	2b00      	cmp	r3, #0
 8009392:	d010      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009398:	d106      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939a:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	4a0d      	ldr	r2, [pc, #52]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80093a6:	e007      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]
      break;
 80093ac:	e004      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80093ae:	bf00      	nop
 80093b0:	e002      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80093b2:	bf00      	nop
 80093b4:	e000      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80093b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10c      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ca:	4902      	ldr	r1, [pc, #8]	; (80093d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	654b      	str	r3, [r1, #84]	; 0x54
 80093d0:	e004      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80093d2:	bf00      	nop
 80093d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d008      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093e8:	4b31      	ldr	r3, [pc, #196]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f4:	492e      	ldr	r1, [pc, #184]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009406:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009414:	4926      	ldr	r1, [pc, #152]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009416:	4313      	orrs	r3, r2
 8009418:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d008      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009426:	4b22      	ldr	r3, [pc, #136]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800942a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009432:	491f      	ldr	r1, [pc, #124]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009434:	4313      	orrs	r3, r2
 8009436:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00d      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009444:	4b1a      	ldr	r3, [pc, #104]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800944a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800944e:	6113      	str	r3, [r2, #16]
 8009450:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800945a:	4915      	ldr	r1, [pc, #84]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800945c:	4313      	orrs	r3, r2
 800945e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	da08      	bge.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009468:	4b11      	ldr	r3, [pc, #68]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800946a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	490e      	ldr	r1, [pc, #56]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009476:	4313      	orrs	r3, r2
 8009478:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d009      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009486:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009494:	4906      	ldr	r1, [pc, #24]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009496:	4313      	orrs	r3, r2
 8009498:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800949a:	7dbb      	ldrb	r3, [r7, #22]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	e000      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	58024400 	.word	0x58024400

080094b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80094b8:	f7ff f85a 	bl	8008570 <HAL_RCC_GetHCLKFreq>
 80094bc:	4602      	mov	r2, r0
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	091b      	lsrs	r3, r3, #4
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	4904      	ldr	r1, [pc, #16]	; (80094dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094ca:	5ccb      	ldrb	r3, [r1, r3]
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	58024400 	.word	0x58024400
 80094dc:	08011968 	.word	0x08011968

080094e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b089      	sub	sp, #36	; 0x24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094e8:	4ba1      	ldr	r3, [pc, #644]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ec:	f003 0303 	and.w	r3, r3, #3
 80094f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80094f2:	4b9f      	ldr	r3, [pc, #636]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f6:	0b1b      	lsrs	r3, r3, #12
 80094f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80094fe:	4b9c      	ldr	r3, [pc, #624]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	091b      	lsrs	r3, r3, #4
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800950a:	4b99      	ldr	r3, [pc, #612]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800950c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	fb02 f303 	mul.w	r3, r2, r3
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8111 	beq.w	8009750 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b02      	cmp	r3, #2
 8009532:	f000 8083 	beq.w	800963c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	2b02      	cmp	r3, #2
 800953a:	f200 80a1 	bhi.w	8009680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d056      	beq.n	80095f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800954a:	e099      	b.n	8009680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800954c:	4b88      	ldr	r3, [pc, #544]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d02d      	beq.n	80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009558:	4b85      	ldr	r3, [pc, #532]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	08db      	lsrs	r3, r3, #3
 800955e:	f003 0303 	and.w	r3, r3, #3
 8009562:	4a84      	ldr	r2, [pc, #528]	; (8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
 8009568:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	ee07 3a90 	vmov	s15, r3
 8009570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009582:	4b7b      	ldr	r3, [pc, #492]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009592:	ed97 6a03 	vldr	s12, [r7, #12]
 8009596:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800959a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095b2:	e087      	b.n	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800977c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095c6:	4b6a      	ldr	r3, [pc, #424]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095f6:	e065      	b.n	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960a:	4b59      	ldr	r3, [pc, #356]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961a:	ed97 6a03 	vldr	s12, [r7, #12]
 800961e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800962e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800963a:	e043      	b.n	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009646:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800964a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964e:	4b48      	ldr	r3, [pc, #288]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009662:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800967e:	e021      	b.n	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800968e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009692:	4b37      	ldr	r3, [pc, #220]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80096c4:	4b2a      	ldr	r3, [pc, #168]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c8:	0a5b      	lsrs	r3, r3, #9
 80096ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096de:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ea:	ee17 2a90 	vmov	r2, s15
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80096f2:	4b1f      	ldr	r3, [pc, #124]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	0c1b      	lsrs	r3, r3, #16
 80096f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800970c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009718:	ee17 2a90 	vmov	r2, s15
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009720:	4b13      	ldr	r3, [pc, #76]	; (8009770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	0e1b      	lsrs	r3, r3, #24
 8009726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800973a:	edd7 6a07 	vldr	s13, [r7, #28]
 800973e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009746:	ee17 2a90 	vmov	r2, s15
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800974e:	e008      	b.n	8009762 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	609a      	str	r2, [r3, #8]
}
 8009762:	bf00      	nop
 8009764:	3724      	adds	r7, #36	; 0x24
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	58024400 	.word	0x58024400
 8009774:	03d09000 	.word	0x03d09000
 8009778:	46000000 	.word	0x46000000
 800977c:	4c742400 	.word	0x4c742400
 8009780:	4a742400 	.word	0x4a742400
 8009784:	4bbebc20 	.word	0x4bbebc20

08009788 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009788:	b480      	push	{r7}
 800978a:	b089      	sub	sp, #36	; 0x24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009790:	4ba1      	ldr	r3, [pc, #644]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800979a:	4b9f      	ldr	r3, [pc, #636]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	0d1b      	lsrs	r3, r3, #20
 80097a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097a6:	4b9c      	ldr	r3, [pc, #624]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	0a1b      	lsrs	r3, r3, #8
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80097b2:	4b99      	ldr	r3, [pc, #612]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b6:	08db      	lsrs	r3, r3, #3
 80097b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	fb02 f303 	mul.w	r3, r2, r3
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8111 	beq.w	80099f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	f000 8083 	beq.w	80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	f200 80a1 	bhi.w	8009928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d056      	beq.n	80098a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80097f2:	e099      	b.n	8009928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097f4:	4b88      	ldr	r3, [pc, #544]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0320 	and.w	r3, r3, #32
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d02d      	beq.n	800985c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009800:	4b85      	ldr	r3, [pc, #532]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	08db      	lsrs	r3, r3, #3
 8009806:	f003 0303 	and.w	r3, r3, #3
 800980a:	4a84      	ldr	r2, [pc, #528]	; (8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800980c:	fa22 f303 	lsr.w	r3, r2, r3
 8009810:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	ee07 3a90 	vmov	s15, r3
 8009818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800982a:	4b7b      	ldr	r3, [pc, #492]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009832:	ee07 3a90 	vmov	s15, r3
 8009836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800983a:	ed97 6a03 	vldr	s12, [r7, #12]
 800983e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800984a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800984e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009856:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800985a:	e087      	b.n	800996c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009866:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800986a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800986e:	4b6a      	ldr	r3, [pc, #424]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800987e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009882:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800988e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800989e:	e065      	b.n	800996c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b2:	4b59      	ldr	r3, [pc, #356]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098e2:	e043      	b.n	800996c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80098f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f6:	4b48      	ldr	r3, [pc, #288]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009906:	ed97 6a03 	vldr	s12, [r7, #12]
 800990a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800990e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009926:	e021      	b.n	800996c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009932:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993a:	4b37      	ldr	r3, [pc, #220]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994a:	ed97 6a03 	vldr	s12, [r7, #12]
 800994e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800995e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800996a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800996c:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800996e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009970:	0a5b      	lsrs	r3, r3, #9
 8009972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009986:	edd7 6a07 	vldr	s13, [r7, #28]
 800998a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800998e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009992:	ee17 2a90 	vmov	r2, s15
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800999a:	4b1f      	ldr	r3, [pc, #124]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	0c1b      	lsrs	r3, r3, #16
 80099a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a4:	ee07 3a90 	vmov	s15, r3
 80099a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c0:	ee17 2a90 	vmov	r2, s15
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80099c8:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099cc:	0e1b      	lsrs	r3, r3, #24
 80099ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ee:	ee17 2a90 	vmov	r2, s15
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80099f6:	e008      	b.n	8009a0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	609a      	str	r2, [r3, #8]
}
 8009a0a:	bf00      	nop
 8009a0c:	3724      	adds	r7, #36	; 0x24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	58024400 	.word	0x58024400
 8009a1c:	03d09000 	.word	0x03d09000
 8009a20:	46000000 	.word	0x46000000
 8009a24:	4c742400 	.word	0x4c742400
 8009a28:	4a742400 	.word	0x4a742400
 8009a2c:	4bbebc20 	.word	0x4bbebc20

08009a30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a3e:	4b53      	ldr	r3, [pc, #332]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d101      	bne.n	8009a4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e099      	b.n	8009b82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a4e:	4b4f      	ldr	r3, [pc, #316]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a4e      	ldr	r2, [pc, #312]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5a:	f7fc fd13 	bl	8006484 <HAL_GetTick>
 8009a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a60:	e008      	b.n	8009a74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a62:	f7fc fd0f 	bl	8006484 <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d901      	bls.n	8009a74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e086      	b.n	8009b82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a74:	4b45      	ldr	r3, [pc, #276]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1f0      	bne.n	8009a62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a80:	4b42      	ldr	r3, [pc, #264]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	031b      	lsls	r3, r3, #12
 8009a8e:	493f      	ldr	r1, [pc, #252]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	628b      	str	r3, [r1, #40]	; 0x28
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	025b      	lsls	r3, r3, #9
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	041b      	lsls	r3, r3, #16
 8009ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	061b      	lsls	r3, r3, #24
 8009ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ac4:	4931      	ldr	r1, [pc, #196]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009aca:	4b30      	ldr	r3, [pc, #192]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	492d      	ldr	r1, [pc, #180]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009adc:	4b2b      	ldr	r3, [pc, #172]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	f023 0220 	bic.w	r2, r3, #32
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	4928      	ldr	r1, [pc, #160]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009aee:	4b27      	ldr	r3, [pc, #156]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	4a26      	ldr	r2, [pc, #152]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009af4:	f023 0310 	bic.w	r3, r3, #16
 8009af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009afa:	4b24      	ldr	r3, [pc, #144]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <RCCEx_PLL2_Config+0x160>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	69d2      	ldr	r2, [r2, #28]
 8009b06:	00d2      	lsls	r2, r2, #3
 8009b08:	4920      	ldr	r1, [pc, #128]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b0e:	4b1f      	ldr	r3, [pc, #124]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	4a1e      	ldr	r2, [pc, #120]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b14:	f043 0310 	orr.w	r3, r3, #16
 8009b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b20:	4b1a      	ldr	r3, [pc, #104]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	4a19      	ldr	r2, [pc, #100]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b2c:	e00f      	b.n	8009b4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d106      	bne.n	8009b42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b34:	4b15      	ldr	r3, [pc, #84]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	4a14      	ldr	r2, [pc, #80]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b40:	e005      	b.n	8009b4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	4a11      	ldr	r2, [pc, #68]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a0e      	ldr	r2, [pc, #56]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b5a:	f7fc fc93 	bl	8006484 <HAL_GetTick>
 8009b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b60:	e008      	b.n	8009b74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b62:	f7fc fc8f 	bl	8006484 <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e006      	b.n	8009b82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0f0      	beq.n	8009b62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	ffff0007 	.word	0xffff0007

08009b94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ba2:	4b53      	ldr	r3, [pc, #332]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	f003 0303 	and.w	r3, r3, #3
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d101      	bne.n	8009bb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e099      	b.n	8009ce6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bb2:	4b4f      	ldr	r3, [pc, #316]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a4e      	ldr	r2, [pc, #312]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bbe:	f7fc fc61 	bl	8006484 <HAL_GetTick>
 8009bc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bc4:	e008      	b.n	8009bd8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bc6:	f7fc fc5d 	bl	8006484 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d901      	bls.n	8009bd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e086      	b.n	8009ce6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bd8:	4b45      	ldr	r3, [pc, #276]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1f0      	bne.n	8009bc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009be4:	4b42      	ldr	r3, [pc, #264]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	051b      	lsls	r3, r3, #20
 8009bf2:	493f      	ldr	r1, [pc, #252]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	628b      	str	r3, [r1, #40]	; 0x28
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	025b      	lsls	r3, r3, #9
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	061b      	lsls	r3, r3, #24
 8009c24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c28:	4931      	ldr	r1, [pc, #196]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c2e:	4b30      	ldr	r3, [pc, #192]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	492d      	ldr	r1, [pc, #180]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c40:	4b2b      	ldr	r3, [pc, #172]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	4928      	ldr	r1, [pc, #160]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c52:	4b27      	ldr	r3, [pc, #156]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	4a26      	ldr	r2, [pc, #152]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c5e:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <RCCEx_PLL3_Config+0x160>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	69d2      	ldr	r2, [r2, #28]
 8009c6a:	00d2      	lsls	r2, r2, #3
 8009c6c:	4920      	ldr	r1, [pc, #128]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c72:	4b1f      	ldr	r3, [pc, #124]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	4a1e      	ldr	r2, [pc, #120]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d106      	bne.n	8009c92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c84:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	4a19      	ldr	r2, [pc, #100]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c90:	e00f      	b.n	8009cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d106      	bne.n	8009ca6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c98:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ca4:	e005      	b.n	8009cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	4a11      	ldr	r2, [pc, #68]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a0e      	ldr	r2, [pc, #56]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cbe:	f7fc fbe1 	bl	8006484 <HAL_GetTick>
 8009cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cc4:	e008      	b.n	8009cd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cc6:	f7fc fbdd 	bl	8006484 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d901      	bls.n	8009cd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e006      	b.n	8009ce6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0f0      	beq.n	8009cc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	ffff0007 	.word	0xffff0007

08009cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e049      	b.n	8009d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fa fa1a 	bl	8004158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4619      	mov	r1, r3
 8009d36:	4610      	mov	r0, r2
 8009d38:	f001 f982 	bl	800b040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d001      	beq.n	8009dc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e04c      	b.n	8009e5a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a26      	ldr	r2, [pc, #152]	; (8009e68 <HAL_TIM_Base_Start+0xc0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d022      	beq.n	8009e18 <HAL_TIM_Base_Start+0x70>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dda:	d01d      	beq.n	8009e18 <HAL_TIM_Base_Start+0x70>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a22      	ldr	r2, [pc, #136]	; (8009e6c <HAL_TIM_Base_Start+0xc4>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d018      	beq.n	8009e18 <HAL_TIM_Base_Start+0x70>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a21      	ldr	r2, [pc, #132]	; (8009e70 <HAL_TIM_Base_Start+0xc8>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d013      	beq.n	8009e18 <HAL_TIM_Base_Start+0x70>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a1f      	ldr	r2, [pc, #124]	; (8009e74 <HAL_TIM_Base_Start+0xcc>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00e      	beq.n	8009e18 <HAL_TIM_Base_Start+0x70>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a1e      	ldr	r2, [pc, #120]	; (8009e78 <HAL_TIM_Base_Start+0xd0>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d009      	beq.n	8009e18 <HAL_TIM_Base_Start+0x70>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a1c      	ldr	r2, [pc, #112]	; (8009e7c <HAL_TIM_Base_Start+0xd4>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d004      	beq.n	8009e18 <HAL_TIM_Base_Start+0x70>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a1b      	ldr	r2, [pc, #108]	; (8009e80 <HAL_TIM_Base_Start+0xd8>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d115      	bne.n	8009e44 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689a      	ldr	r2, [r3, #8]
 8009e1e:	4b19      	ldr	r3, [pc, #100]	; (8009e84 <HAL_TIM_Base_Start+0xdc>)
 8009e20:	4013      	ands	r3, r2
 8009e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2b06      	cmp	r3, #6
 8009e28:	d015      	beq.n	8009e56 <HAL_TIM_Base_Start+0xae>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e30:	d011      	beq.n	8009e56 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f042 0201 	orr.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e42:	e008      	b.n	8009e56 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f042 0201 	orr.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e000      	b.n	8009e58 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	40010000 	.word	0x40010000
 8009e6c:	40000400 	.word	0x40000400
 8009e70:	40000800 	.word	0x40000800
 8009e74:	40000c00 	.word	0x40000c00
 8009e78:	40010400 	.word	0x40010400
 8009e7c:	40001800 	.word	0x40001800
 8009e80:	40014000 	.word	0x40014000
 8009e84:	00010007 	.word	0x00010007

08009e88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6a1a      	ldr	r2, [r3, #32]
 8009e96:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10f      	bne.n	8009ec0 <HAL_TIM_Base_Stop+0x38>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6a1a      	ldr	r2, [r3, #32]
 8009ea6:	f240 4344 	movw	r3, #1092	; 0x444
 8009eaa:	4013      	ands	r3, r2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d107      	bne.n	8009ec0 <HAL_TIM_Base_Stop+0x38>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0201 	bic.w	r2, r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
	...

08009ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d001      	beq.n	8009ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e054      	b.n	8009f9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0201 	orr.w	r2, r2, #1
 8009f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a26      	ldr	r2, [pc, #152]	; (8009fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d022      	beq.n	8009f58 <HAL_TIM_Base_Start_IT+0x80>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1a:	d01d      	beq.n	8009f58 <HAL_TIM_Base_Start_IT+0x80>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a22      	ldr	r2, [pc, #136]	; (8009fac <HAL_TIM_Base_Start_IT+0xd4>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d018      	beq.n	8009f58 <HAL_TIM_Base_Start_IT+0x80>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a21      	ldr	r2, [pc, #132]	; (8009fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d013      	beq.n	8009f58 <HAL_TIM_Base_Start_IT+0x80>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a1f      	ldr	r2, [pc, #124]	; (8009fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00e      	beq.n	8009f58 <HAL_TIM_Base_Start_IT+0x80>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a1e      	ldr	r2, [pc, #120]	; (8009fb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d009      	beq.n	8009f58 <HAL_TIM_Base_Start_IT+0x80>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a1c      	ldr	r2, [pc, #112]	; (8009fbc <HAL_TIM_Base_Start_IT+0xe4>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d004      	beq.n	8009f58 <HAL_TIM_Base_Start_IT+0x80>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a1b      	ldr	r2, [pc, #108]	; (8009fc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d115      	bne.n	8009f84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <HAL_TIM_Base_Start_IT+0xec>)
 8009f60:	4013      	ands	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b06      	cmp	r3, #6
 8009f68:	d015      	beq.n	8009f96 <HAL_TIM_Base_Start_IT+0xbe>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f70:	d011      	beq.n	8009f96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0201 	orr.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f82:	e008      	b.n	8009f96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0201 	orr.w	r2, r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e000      	b.n	8009f98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	40010000 	.word	0x40010000
 8009fac:	40000400 	.word	0x40000400
 8009fb0:	40000800 	.word	0x40000800
 8009fb4:	40000c00 	.word	0x40000c00
 8009fb8:	40010400 	.word	0x40010400
 8009fbc:	40001800 	.word	0x40001800
 8009fc0:	40014000 	.word	0x40014000
 8009fc4:	00010007 	.word	0x00010007

08009fc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f022 0201 	bic.w	r2, r2, #1
 8009fde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6a1a      	ldr	r2, [r3, #32]
 8009fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009fea:	4013      	ands	r3, r2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10f      	bne.n	800a010 <HAL_TIM_Base_Stop_IT+0x48>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6a1a      	ldr	r2, [r3, #32]
 8009ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d107      	bne.n	800a010 <HAL_TIM_Base_Stop_IT+0x48>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 0201 	bic.w	r2, r2, #1
 800a00e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e049      	b.n	800a0cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d106      	bne.n	800a052 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f841 	bl	800a0d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2202      	movs	r2, #2
 800a056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3304      	adds	r3, #4
 800a062:	4619      	mov	r1, r3
 800a064:	4610      	mov	r0, r2
 800a066:	f000 ffeb 	bl	800b040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d109      	bne.n	800a10c <HAL_TIM_PWM_Start+0x24>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b01      	cmp	r3, #1
 800a102:	bf14      	ite	ne
 800a104:	2301      	movne	r3, #1
 800a106:	2300      	moveq	r3, #0
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	e03c      	b.n	800a186 <HAL_TIM_PWM_Start+0x9e>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d109      	bne.n	800a126 <HAL_TIM_PWM_Start+0x3e>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	bf14      	ite	ne
 800a11e:	2301      	movne	r3, #1
 800a120:	2300      	moveq	r3, #0
 800a122:	b2db      	uxtb	r3, r3
 800a124:	e02f      	b.n	800a186 <HAL_TIM_PWM_Start+0x9e>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d109      	bne.n	800a140 <HAL_TIM_PWM_Start+0x58>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b01      	cmp	r3, #1
 800a136:	bf14      	ite	ne
 800a138:	2301      	movne	r3, #1
 800a13a:	2300      	moveq	r3, #0
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	e022      	b.n	800a186 <HAL_TIM_PWM_Start+0x9e>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b0c      	cmp	r3, #12
 800a144:	d109      	bne.n	800a15a <HAL_TIM_PWM_Start+0x72>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b01      	cmp	r3, #1
 800a150:	bf14      	ite	ne
 800a152:	2301      	movne	r3, #1
 800a154:	2300      	moveq	r3, #0
 800a156:	b2db      	uxtb	r3, r3
 800a158:	e015      	b.n	800a186 <HAL_TIM_PWM_Start+0x9e>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b10      	cmp	r3, #16
 800a15e:	d109      	bne.n	800a174 <HAL_TIM_PWM_Start+0x8c>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b01      	cmp	r3, #1
 800a16a:	bf14      	ite	ne
 800a16c:	2301      	movne	r3, #1
 800a16e:	2300      	moveq	r3, #0
 800a170:	b2db      	uxtb	r3, r3
 800a172:	e008      	b.n	800a186 <HAL_TIM_PWM_Start+0x9e>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	bf14      	ite	ne
 800a180:	2301      	movne	r3, #1
 800a182:	2300      	moveq	r3, #0
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e0a1      	b.n	800a2d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d104      	bne.n	800a19e <HAL_TIM_PWM_Start+0xb6>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a19c:	e023      	b.n	800a1e6 <HAL_TIM_PWM_Start+0xfe>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	d104      	bne.n	800a1ae <HAL_TIM_PWM_Start+0xc6>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1ac:	e01b      	b.n	800a1e6 <HAL_TIM_PWM_Start+0xfe>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b08      	cmp	r3, #8
 800a1b2:	d104      	bne.n	800a1be <HAL_TIM_PWM_Start+0xd6>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1bc:	e013      	b.n	800a1e6 <HAL_TIM_PWM_Start+0xfe>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b0c      	cmp	r3, #12
 800a1c2:	d104      	bne.n	800a1ce <HAL_TIM_PWM_Start+0xe6>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1cc:	e00b      	b.n	800a1e6 <HAL_TIM_PWM_Start+0xfe>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	2b10      	cmp	r3, #16
 800a1d2:	d104      	bne.n	800a1de <HAL_TIM_PWM_Start+0xf6>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1dc:	e003      	b.n	800a1e6 <HAL_TIM_PWM_Start+0xfe>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fc5e 	bl	800bab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a38      	ldr	r2, [pc, #224]	; (800a2dc <HAL_TIM_PWM_Start+0x1f4>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d013      	beq.n	800a226 <HAL_TIM_PWM_Start+0x13e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a37      	ldr	r2, [pc, #220]	; (800a2e0 <HAL_TIM_PWM_Start+0x1f8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d00e      	beq.n	800a226 <HAL_TIM_PWM_Start+0x13e>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a35      	ldr	r2, [pc, #212]	; (800a2e4 <HAL_TIM_PWM_Start+0x1fc>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d009      	beq.n	800a226 <HAL_TIM_PWM_Start+0x13e>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a34      	ldr	r2, [pc, #208]	; (800a2e8 <HAL_TIM_PWM_Start+0x200>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d004      	beq.n	800a226 <HAL_TIM_PWM_Start+0x13e>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a32      	ldr	r2, [pc, #200]	; (800a2ec <HAL_TIM_PWM_Start+0x204>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d101      	bne.n	800a22a <HAL_TIM_PWM_Start+0x142>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <HAL_TIM_PWM_Start+0x144>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a23e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a25      	ldr	r2, [pc, #148]	; (800a2dc <HAL_TIM_PWM_Start+0x1f4>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d022      	beq.n	800a290 <HAL_TIM_PWM_Start+0x1a8>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a252:	d01d      	beq.n	800a290 <HAL_TIM_PWM_Start+0x1a8>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a25      	ldr	r2, [pc, #148]	; (800a2f0 <HAL_TIM_PWM_Start+0x208>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d018      	beq.n	800a290 <HAL_TIM_PWM_Start+0x1a8>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a24      	ldr	r2, [pc, #144]	; (800a2f4 <HAL_TIM_PWM_Start+0x20c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d013      	beq.n	800a290 <HAL_TIM_PWM_Start+0x1a8>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a22      	ldr	r2, [pc, #136]	; (800a2f8 <HAL_TIM_PWM_Start+0x210>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00e      	beq.n	800a290 <HAL_TIM_PWM_Start+0x1a8>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a1a      	ldr	r2, [pc, #104]	; (800a2e0 <HAL_TIM_PWM_Start+0x1f8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d009      	beq.n	800a290 <HAL_TIM_PWM_Start+0x1a8>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1e      	ldr	r2, [pc, #120]	; (800a2fc <HAL_TIM_PWM_Start+0x214>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d004      	beq.n	800a290 <HAL_TIM_PWM_Start+0x1a8>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a16      	ldr	r2, [pc, #88]	; (800a2e4 <HAL_TIM_PWM_Start+0x1fc>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d115      	bne.n	800a2bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	4b1a      	ldr	r3, [pc, #104]	; (800a300 <HAL_TIM_PWM_Start+0x218>)
 800a298:	4013      	ands	r3, r2
 800a29a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b06      	cmp	r3, #6
 800a2a0:	d015      	beq.n	800a2ce <HAL_TIM_PWM_Start+0x1e6>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a8:	d011      	beq.n	800a2ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f042 0201 	orr.w	r2, r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ba:	e008      	b.n	800a2ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0201 	orr.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	e000      	b.n	800a2d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	40010000 	.word	0x40010000
 800a2e0:	40010400 	.word	0x40010400
 800a2e4:	40014000 	.word	0x40014000
 800a2e8:	40014400 	.word	0x40014400
 800a2ec:	40014800 	.word	0x40014800
 800a2f0:	40000400 	.word	0x40000400
 800a2f4:	40000800 	.word	0x40000800
 800a2f8:	40000c00 	.word	0x40000c00
 800a2fc:	40001800 	.word	0x40001800
 800a300:	00010007 	.word	0x00010007

0800a304 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2200      	movs	r2, #0
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	4618      	mov	r0, r3
 800a318:	f001 fbca 	bl	800bab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a3e      	ldr	r2, [pc, #248]	; (800a41c <HAL_TIM_PWM_Stop+0x118>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d013      	beq.n	800a34e <HAL_TIM_PWM_Stop+0x4a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a3d      	ldr	r2, [pc, #244]	; (800a420 <HAL_TIM_PWM_Stop+0x11c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d00e      	beq.n	800a34e <HAL_TIM_PWM_Stop+0x4a>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a3b      	ldr	r2, [pc, #236]	; (800a424 <HAL_TIM_PWM_Stop+0x120>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d009      	beq.n	800a34e <HAL_TIM_PWM_Stop+0x4a>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a3a      	ldr	r2, [pc, #232]	; (800a428 <HAL_TIM_PWM_Stop+0x124>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d004      	beq.n	800a34e <HAL_TIM_PWM_Stop+0x4a>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a38      	ldr	r2, [pc, #224]	; (800a42c <HAL_TIM_PWM_Stop+0x128>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d101      	bne.n	800a352 <HAL_TIM_PWM_Stop+0x4e>
 800a34e:	2301      	movs	r3, #1
 800a350:	e000      	b.n	800a354 <HAL_TIM_PWM_Stop+0x50>
 800a352:	2300      	movs	r3, #0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d017      	beq.n	800a388 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6a1a      	ldr	r2, [r3, #32]
 800a35e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a362:	4013      	ands	r3, r2
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10f      	bne.n	800a388 <HAL_TIM_PWM_Stop+0x84>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6a1a      	ldr	r2, [r3, #32]
 800a36e:	f240 4344 	movw	r3, #1092	; 0x444
 800a372:	4013      	ands	r3, r2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d107      	bne.n	800a388 <HAL_TIM_PWM_Stop+0x84>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a386:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6a1a      	ldr	r2, [r3, #32]
 800a38e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a392:	4013      	ands	r3, r2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10f      	bne.n	800a3b8 <HAL_TIM_PWM_Stop+0xb4>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	6a1a      	ldr	r2, [r3, #32]
 800a39e:	f240 4344 	movw	r3, #1092	; 0x444
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d107      	bne.n	800a3b8 <HAL_TIM_PWM_Stop+0xb4>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f022 0201 	bic.w	r2, r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <HAL_TIM_PWM_Stop+0xc4>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3c6:	e023      	b.n	800a410 <HAL_TIM_PWM_Stop+0x10c>
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d104      	bne.n	800a3d8 <HAL_TIM_PWM_Stop+0xd4>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3d6:	e01b      	b.n	800a410 <HAL_TIM_PWM_Stop+0x10c>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b08      	cmp	r3, #8
 800a3dc:	d104      	bne.n	800a3e8 <HAL_TIM_PWM_Stop+0xe4>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3e6:	e013      	b.n	800a410 <HAL_TIM_PWM_Stop+0x10c>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b0c      	cmp	r3, #12
 800a3ec:	d104      	bne.n	800a3f8 <HAL_TIM_PWM_Stop+0xf4>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3f6:	e00b      	b.n	800a410 <HAL_TIM_PWM_Stop+0x10c>
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2b10      	cmp	r3, #16
 800a3fc:	d104      	bne.n	800a408 <HAL_TIM_PWM_Stop+0x104>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a406:	e003      	b.n	800a410 <HAL_TIM_PWM_Stop+0x10c>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40010000 	.word	0x40010000
 800a420:	40010400 	.word	0x40010400
 800a424:	40014000 	.word	0x40014000
 800a428:	40014400 	.word	0x40014400
 800a42c:	40014800 	.word	0x40014800

0800a430 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e049      	b.n	800a4d6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f841 	bl	800a4de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4619      	mov	r1, r3
 800a46e:	4610      	mov	r0, r2
 800a470:	f000 fde6 	bl	800b040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2200      	movs	r2, #0
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	4618      	mov	r0, r3
 800a506:	f001 fad3 	bl	800bab0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6a1a      	ldr	r2, [r3, #32]
 800a510:	f241 1311 	movw	r3, #4369	; 0x1111
 800a514:	4013      	ands	r3, r2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10f      	bne.n	800a53a <HAL_TIM_IC_Stop+0x48>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6a1a      	ldr	r2, [r3, #32]
 800a520:	f240 4344 	movw	r3, #1092	; 0x444
 800a524:	4013      	ands	r3, r2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d107      	bne.n	800a53a <HAL_TIM_IC_Stop+0x48>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f022 0201 	bic.w	r2, r2, #1
 800a538:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d104      	bne.n	800a54a <HAL_TIM_IC_Stop+0x58>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a548:	e023      	b.n	800a592 <HAL_TIM_IC_Stop+0xa0>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d104      	bne.n	800a55a <HAL_TIM_IC_Stop+0x68>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a558:	e01b      	b.n	800a592 <HAL_TIM_IC_Stop+0xa0>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b08      	cmp	r3, #8
 800a55e:	d104      	bne.n	800a56a <HAL_TIM_IC_Stop+0x78>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a568:	e013      	b.n	800a592 <HAL_TIM_IC_Stop+0xa0>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b0c      	cmp	r3, #12
 800a56e:	d104      	bne.n	800a57a <HAL_TIM_IC_Stop+0x88>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a578:	e00b      	b.n	800a592 <HAL_TIM_IC_Stop+0xa0>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b10      	cmp	r3, #16
 800a57e:	d104      	bne.n	800a58a <HAL_TIM_IC_Stop+0x98>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a588:	e003      	b.n	800a592 <HAL_TIM_IC_Stop+0xa0>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <HAL_TIM_IC_Stop+0xb0>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a0:	e013      	b.n	800a5ca <HAL_TIM_IC_Stop+0xd8>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d104      	bne.n	800a5b2 <HAL_TIM_IC_Stop+0xc0>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b0:	e00b      	b.n	800a5ca <HAL_TIM_IC_Stop+0xd8>
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d104      	bne.n	800a5c2 <HAL_TIM_IC_Stop+0xd0>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5c0:	e003      	b.n	800a5ca <HAL_TIM_IC_Stop+0xd8>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d104      	bne.n	800a5f2 <HAL_TIM_IC_Start_IT+0x1e>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	e023      	b.n	800a63a <HAL_TIM_IC_Start_IT+0x66>
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d104      	bne.n	800a602 <HAL_TIM_IC_Start_IT+0x2e>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	e01b      	b.n	800a63a <HAL_TIM_IC_Start_IT+0x66>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b08      	cmp	r3, #8
 800a606:	d104      	bne.n	800a612 <HAL_TIM_IC_Start_IT+0x3e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	e013      	b.n	800a63a <HAL_TIM_IC_Start_IT+0x66>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b0c      	cmp	r3, #12
 800a616:	d104      	bne.n	800a622 <HAL_TIM_IC_Start_IT+0x4e>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	e00b      	b.n	800a63a <HAL_TIM_IC_Start_IT+0x66>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b10      	cmp	r3, #16
 800a626:	d104      	bne.n	800a632 <HAL_TIM_IC_Start_IT+0x5e>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	e003      	b.n	800a63a <HAL_TIM_IC_Start_IT+0x66>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <HAL_TIM_IC_Start_IT+0x78>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	e013      	b.n	800a674 <HAL_TIM_IC_Start_IT+0xa0>
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b04      	cmp	r3, #4
 800a650:	d104      	bne.n	800a65c <HAL_TIM_IC_Start_IT+0x88>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	e00b      	b.n	800a674 <HAL_TIM_IC_Start_IT+0xa0>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b08      	cmp	r3, #8
 800a660:	d104      	bne.n	800a66c <HAL_TIM_IC_Start_IT+0x98>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	e003      	b.n	800a674 <HAL_TIM_IC_Start_IT+0xa0>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a672:	b2db      	uxtb	r3, r3
 800a674:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d102      	bne.n	800a682 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a67c:	7b7b      	ldrb	r3, [r7, #13]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e0e2      	b.n	800a84c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d104      	bne.n	800a696 <HAL_TIM_IC_Start_IT+0xc2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2202      	movs	r2, #2
 800a690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a694:	e023      	b.n	800a6de <HAL_TIM_IC_Start_IT+0x10a>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d104      	bne.n	800a6a6 <HAL_TIM_IC_Start_IT+0xd2>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6a4:	e01b      	b.n	800a6de <HAL_TIM_IC_Start_IT+0x10a>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d104      	bne.n	800a6b6 <HAL_TIM_IC_Start_IT+0xe2>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6b4:	e013      	b.n	800a6de <HAL_TIM_IC_Start_IT+0x10a>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b0c      	cmp	r3, #12
 800a6ba:	d104      	bne.n	800a6c6 <HAL_TIM_IC_Start_IT+0xf2>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6c4:	e00b      	b.n	800a6de <HAL_TIM_IC_Start_IT+0x10a>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b10      	cmp	r3, #16
 800a6ca:	d104      	bne.n	800a6d6 <HAL_TIM_IC_Start_IT+0x102>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6d4:	e003      	b.n	800a6de <HAL_TIM_IC_Start_IT+0x10a>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2202      	movs	r2, #2
 800a6da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <HAL_TIM_IC_Start_IT+0x11a>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6ec:	e013      	b.n	800a716 <HAL_TIM_IC_Start_IT+0x142>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d104      	bne.n	800a6fe <HAL_TIM_IC_Start_IT+0x12a>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6fc:	e00b      	b.n	800a716 <HAL_TIM_IC_Start_IT+0x142>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b08      	cmp	r3, #8
 800a702:	d104      	bne.n	800a70e <HAL_TIM_IC_Start_IT+0x13a>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2202      	movs	r2, #2
 800a708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a70c:	e003      	b.n	800a716 <HAL_TIM_IC_Start_IT+0x142>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b0c      	cmp	r3, #12
 800a71a:	d841      	bhi.n	800a7a0 <HAL_TIM_IC_Start_IT+0x1cc>
 800a71c:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <HAL_TIM_IC_Start_IT+0x150>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a759 	.word	0x0800a759
 800a728:	0800a7a1 	.word	0x0800a7a1
 800a72c:	0800a7a1 	.word	0x0800a7a1
 800a730:	0800a7a1 	.word	0x0800a7a1
 800a734:	0800a76b 	.word	0x0800a76b
 800a738:	0800a7a1 	.word	0x0800a7a1
 800a73c:	0800a7a1 	.word	0x0800a7a1
 800a740:	0800a7a1 	.word	0x0800a7a1
 800a744:	0800a77d 	.word	0x0800a77d
 800a748:	0800a7a1 	.word	0x0800a7a1
 800a74c:	0800a7a1 	.word	0x0800a7a1
 800a750:	0800a7a1 	.word	0x0800a7a1
 800a754:	0800a78f 	.word	0x0800a78f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f042 0202 	orr.w	r2, r2, #2
 800a766:	60da      	str	r2, [r3, #12]
      break;
 800a768:	e01d      	b.n	800a7a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68da      	ldr	r2, [r3, #12]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f042 0204 	orr.w	r2, r2, #4
 800a778:	60da      	str	r2, [r3, #12]
      break;
 800a77a:	e014      	b.n	800a7a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f042 0208 	orr.w	r2, r2, #8
 800a78a:	60da      	str	r2, [r3, #12]
      break;
 800a78c:	e00b      	b.n	800a7a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f042 0210 	orr.w	r2, r2, #16
 800a79c:	60da      	str	r2, [r3, #12]
      break;
 800a79e:	e002      	b.n	800a7a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d14e      	bne.n	800a84a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 f97b 	bl	800bab0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a25      	ldr	r2, [pc, #148]	; (800a854 <HAL_TIM_IC_Start_IT+0x280>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d022      	beq.n	800a80a <HAL_TIM_IC_Start_IT+0x236>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7cc:	d01d      	beq.n	800a80a <HAL_TIM_IC_Start_IT+0x236>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a21      	ldr	r2, [pc, #132]	; (800a858 <HAL_TIM_IC_Start_IT+0x284>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d018      	beq.n	800a80a <HAL_TIM_IC_Start_IT+0x236>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a1f      	ldr	r2, [pc, #124]	; (800a85c <HAL_TIM_IC_Start_IT+0x288>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d013      	beq.n	800a80a <HAL_TIM_IC_Start_IT+0x236>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a1e      	ldr	r2, [pc, #120]	; (800a860 <HAL_TIM_IC_Start_IT+0x28c>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00e      	beq.n	800a80a <HAL_TIM_IC_Start_IT+0x236>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a1c      	ldr	r2, [pc, #112]	; (800a864 <HAL_TIM_IC_Start_IT+0x290>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d009      	beq.n	800a80a <HAL_TIM_IC_Start_IT+0x236>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a1b      	ldr	r2, [pc, #108]	; (800a868 <HAL_TIM_IC_Start_IT+0x294>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d004      	beq.n	800a80a <HAL_TIM_IC_Start_IT+0x236>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a19      	ldr	r2, [pc, #100]	; (800a86c <HAL_TIM_IC_Start_IT+0x298>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d115      	bne.n	800a836 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	4b17      	ldr	r3, [pc, #92]	; (800a870 <HAL_TIM_IC_Start_IT+0x29c>)
 800a812:	4013      	ands	r3, r2
 800a814:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b06      	cmp	r3, #6
 800a81a:	d015      	beq.n	800a848 <HAL_TIM_IC_Start_IT+0x274>
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a822:	d011      	beq.n	800a848 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a834:	e008      	b.n	800a848 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 0201 	orr.w	r2, r2, #1
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	e000      	b.n	800a84a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a848:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	40010000 	.word	0x40010000
 800a858:	40000400 	.word	0x40000400
 800a85c:	40000800 	.word	0x40000800
 800a860:	40000c00 	.word	0x40000c00
 800a864:	40010400 	.word	0x40010400
 800a868:	40001800 	.word	0x40001800
 800a86c:	40014000 	.word	0x40014000
 800a870:	00010007 	.word	0x00010007

0800a874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b02      	cmp	r3, #2
 800a888:	d122      	bne.n	800a8d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b02      	cmp	r3, #2
 800a896:	d11b      	bne.n	800a8d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f06f 0202 	mvn.w	r2, #2
 800a8a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7f8 fe26 	bl	8003508 <HAL_TIM_IC_CaptureCallback>
 800a8bc:	e005      	b.n	800a8ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fba0 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fba7 	bl	800b018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	f003 0304 	and.w	r3, r3, #4
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	d122      	bne.n	800a924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d11b      	bne.n	800a924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f06f 0204 	mvn.w	r2, #4
 800a8f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7f8 fdfc 	bl	8003508 <HAL_TIM_IC_CaptureCallback>
 800a910:	e005      	b.n	800a91e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fb76 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fb7d 	bl	800b018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	f003 0308 	and.w	r3, r3, #8
 800a92e:	2b08      	cmp	r3, #8
 800a930:	d122      	bne.n	800a978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d11b      	bne.n	800a978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f06f 0208 	mvn.w	r2, #8
 800a948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2204      	movs	r2, #4
 800a94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	f003 0303 	and.w	r3, r3, #3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7f8 fdd2 	bl	8003508 <HAL_TIM_IC_CaptureCallback>
 800a964:	e005      	b.n	800a972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fb4c 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fb53 	bl	800b018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	f003 0310 	and.w	r3, r3, #16
 800a982:	2b10      	cmp	r3, #16
 800a984:	d122      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f003 0310 	and.w	r3, r3, #16
 800a990:	2b10      	cmp	r3, #16
 800a992:	d11b      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f06f 0210 	mvn.w	r2, #16
 800a99c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2208      	movs	r2, #8
 800a9a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7f8 fda8 	bl	8003508 <HAL_TIM_IC_CaptureCallback>
 800a9b8:	e005      	b.n	800a9c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fb22 	bl	800b004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fb29 	bl	800b018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d10e      	bne.n	800a9f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d107      	bne.n	800a9f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0201 	mvn.w	r2, #1
 800a9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7f8 fddc 	bl	80035b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa02:	2b80      	cmp	r3, #128	; 0x80
 800aa04:	d10e      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa10:	2b80      	cmp	r3, #128	; 0x80
 800aa12:	d107      	bne.n	800aa24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 f904 	bl	800bc2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa32:	d10e      	bne.n	800aa52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3e:	2b80      	cmp	r3, #128	; 0x80
 800aa40:	d107      	bne.n	800aa52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f001 f8f7 	bl	800bc40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5c:	2b40      	cmp	r3, #64	; 0x40
 800aa5e:	d10e      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6a:	2b40      	cmp	r3, #64	; 0x40
 800aa6c:	d107      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fad7 	bl	800b02c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	f003 0320 	and.w	r3, r3, #32
 800aa88:	2b20      	cmp	r3, #32
 800aa8a:	d10e      	bne.n	800aaaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d107      	bne.n	800aaaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f06f 0220 	mvn.w	r2, #32
 800aaa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 f8b7 	bl	800bc18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b086      	sub	sp, #24
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d101      	bne.n	800aad0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800aacc:	2302      	movs	r3, #2
 800aace:	e088      	b.n	800abe2 <HAL_TIM_IC_ConfigChannel+0x130>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d11b      	bne.n	800ab16 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	6819      	ldr	r1, [r3, #0]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f000 fe17 	bl	800b720 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	699a      	ldr	r2, [r3, #24]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 020c 	bic.w	r2, r2, #12
 800ab00:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	6999      	ldr	r1, [r3, #24]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	619a      	str	r2, [r3, #24]
 800ab14:	e060      	b.n	800abd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d11c      	bne.n	800ab56 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6818      	ldr	r0, [r3, #0]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f000 fe9b 	bl	800b866 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ab3e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6999      	ldr	r1, [r3, #24]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	021a      	lsls	r2, r3, #8
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	430a      	orrs	r2, r1
 800ab52:	619a      	str	r2, [r3, #24]
 800ab54:	e040      	b.n	800abd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b08      	cmp	r3, #8
 800ab5a:	d11b      	bne.n	800ab94 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6818      	ldr	r0, [r3, #0]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	6819      	ldr	r1, [r3, #0]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f000 fee8 	bl	800b940 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	69da      	ldr	r2, [r3, #28]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f022 020c 	bic.w	r2, r2, #12
 800ab7e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	69d9      	ldr	r1, [r3, #28]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	689a      	ldr	r2, [r3, #8]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	61da      	str	r2, [r3, #28]
 800ab92:	e021      	b.n	800abd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b0c      	cmp	r3, #12
 800ab98:	d11c      	bne.n	800abd4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6818      	ldr	r0, [r3, #0]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6819      	ldr	r1, [r3, #0]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f000 ff05 	bl	800b9b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69da      	ldr	r2, [r3, #28]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800abbc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	69d9      	ldr	r1, [r3, #28]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	021a      	lsls	r2, r3, #8
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	61da      	str	r2, [r3, #28]
 800abd2:	e001      	b.n	800abd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d101      	bne.n	800ac0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac06:	2302      	movs	r3, #2
 800ac08:	e0ff      	b.n	800ae0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b14      	cmp	r3, #20
 800ac16:	f200 80f0 	bhi.w	800adfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac1a:	a201      	add	r2, pc, #4	; (adr r2, 800ac20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac75 	.word	0x0800ac75
 800ac24:	0800adfb 	.word	0x0800adfb
 800ac28:	0800adfb 	.word	0x0800adfb
 800ac2c:	0800adfb 	.word	0x0800adfb
 800ac30:	0800acb5 	.word	0x0800acb5
 800ac34:	0800adfb 	.word	0x0800adfb
 800ac38:	0800adfb 	.word	0x0800adfb
 800ac3c:	0800adfb 	.word	0x0800adfb
 800ac40:	0800acf7 	.word	0x0800acf7
 800ac44:	0800adfb 	.word	0x0800adfb
 800ac48:	0800adfb 	.word	0x0800adfb
 800ac4c:	0800adfb 	.word	0x0800adfb
 800ac50:	0800ad37 	.word	0x0800ad37
 800ac54:	0800adfb 	.word	0x0800adfb
 800ac58:	0800adfb 	.word	0x0800adfb
 800ac5c:	0800adfb 	.word	0x0800adfb
 800ac60:	0800ad79 	.word	0x0800ad79
 800ac64:	0800adfb 	.word	0x0800adfb
 800ac68:	0800adfb 	.word	0x0800adfb
 800ac6c:	0800adfb 	.word	0x0800adfb
 800ac70:	0800adb9 	.word	0x0800adb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68b9      	ldr	r1, [r7, #8]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fa7a 	bl	800b174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f042 0208 	orr.w	r2, r2, #8
 800ac8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	699a      	ldr	r2, [r3, #24]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f022 0204 	bic.w	r2, r2, #4
 800ac9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6999      	ldr	r1, [r3, #24]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	691a      	ldr	r2, [r3, #16]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	619a      	str	r2, [r3, #24]
      break;
 800acb2:	e0a5      	b.n	800ae00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68b9      	ldr	r1, [r7, #8]
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 faea 	bl	800b294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699a      	ldr	r2, [r3, #24]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6999      	ldr	r1, [r3, #24]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	021a      	lsls	r2, r3, #8
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	619a      	str	r2, [r3, #24]
      break;
 800acf4:	e084      	b.n	800ae00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fb53 	bl	800b3a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69da      	ldr	r2, [r3, #28]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f042 0208 	orr.w	r2, r2, #8
 800ad10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69da      	ldr	r2, [r3, #28]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 0204 	bic.w	r2, r2, #4
 800ad20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	69d9      	ldr	r1, [r3, #28]
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	691a      	ldr	r2, [r3, #16]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	61da      	str	r2, [r3, #28]
      break;
 800ad34:	e064      	b.n	800ae00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 fbbb 	bl	800b4b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	69da      	ldr	r2, [r3, #28]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69da      	ldr	r2, [r3, #28]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	69d9      	ldr	r1, [r3, #28]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	021a      	lsls	r2, r3, #8
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	61da      	str	r2, [r3, #28]
      break;
 800ad76:	e043      	b.n	800ae00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fc04 	bl	800b58c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0208 	orr.w	r2, r2, #8
 800ad92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 0204 	bic.w	r2, r2, #4
 800ada2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	691a      	ldr	r2, [r3, #16]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800adb6:	e023      	b.n	800ae00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fc48 	bl	800b654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800add2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ade2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	021a      	lsls	r2, r3, #8
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	430a      	orrs	r2, r1
 800adf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800adf8:	e002      	b.n	800ae00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	75fb      	strb	r3, [r7, #23]
      break;
 800adfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop

0800ae14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_TIM_ConfigClockSource+0x1c>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e0dc      	b.n	800afea <HAL_TIM_ConfigClockSource+0x1d6>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	4b6a      	ldr	r3, [pc, #424]	; (800aff4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a64      	ldr	r2, [pc, #400]	; (800aff8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	f000 80a9 	beq.w	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ae6c:	4a62      	ldr	r2, [pc, #392]	; (800aff8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	f200 80ae 	bhi.w	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae74:	4a61      	ldr	r2, [pc, #388]	; (800affc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	f000 80a1 	beq.w	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ae7c:	4a5f      	ldr	r2, [pc, #380]	; (800affc <HAL_TIM_ConfigClockSource+0x1e8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	f200 80a6 	bhi.w	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae84:	4a5e      	ldr	r2, [pc, #376]	; (800b000 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	f000 8099 	beq.w	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ae8c:	4a5c      	ldr	r2, [pc, #368]	; (800b000 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	f200 809e 	bhi.w	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae98:	f000 8091 	beq.w	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ae9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aea0:	f200 8096 	bhi.w	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aea8:	f000 8089 	beq.w	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800aeac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeb0:	f200 808e 	bhi.w	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aeb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeb8:	d03e      	beq.n	800af38 <HAL_TIM_ConfigClockSource+0x124>
 800aeba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aebe:	f200 8087 	bhi.w	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec6:	f000 8086 	beq.w	800afd6 <HAL_TIM_ConfigClockSource+0x1c2>
 800aeca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aece:	d87f      	bhi.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aed0:	2b70      	cmp	r3, #112	; 0x70
 800aed2:	d01a      	beq.n	800af0a <HAL_TIM_ConfigClockSource+0xf6>
 800aed4:	2b70      	cmp	r3, #112	; 0x70
 800aed6:	d87b      	bhi.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aed8:	2b60      	cmp	r3, #96	; 0x60
 800aeda:	d050      	beq.n	800af7e <HAL_TIM_ConfigClockSource+0x16a>
 800aedc:	2b60      	cmp	r3, #96	; 0x60
 800aede:	d877      	bhi.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aee0:	2b50      	cmp	r3, #80	; 0x50
 800aee2:	d03c      	beq.n	800af5e <HAL_TIM_ConfigClockSource+0x14a>
 800aee4:	2b50      	cmp	r3, #80	; 0x50
 800aee6:	d873      	bhi.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aee8:	2b40      	cmp	r3, #64	; 0x40
 800aeea:	d058      	beq.n	800af9e <HAL_TIM_ConfigClockSource+0x18a>
 800aeec:	2b40      	cmp	r3, #64	; 0x40
 800aeee:	d86f      	bhi.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aef0:	2b30      	cmp	r3, #48	; 0x30
 800aef2:	d064      	beq.n	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800aef4:	2b30      	cmp	r3, #48	; 0x30
 800aef6:	d86b      	bhi.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800aef8:	2b20      	cmp	r3, #32
 800aefa:	d060      	beq.n	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800aefc:	2b20      	cmp	r3, #32
 800aefe:	d867      	bhi.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d05c      	beq.n	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800af04:	2b10      	cmp	r3, #16
 800af06:	d05a      	beq.n	800afbe <HAL_TIM_ConfigClockSource+0x1aa>
 800af08:	e062      	b.n	800afd0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	6899      	ldr	r1, [r3, #8]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	f000 fda9 	bl	800ba70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	609a      	str	r2, [r3, #8]
      break;
 800af36:	e04f      	b.n	800afd8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6818      	ldr	r0, [r3, #0]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	6899      	ldr	r1, [r3, #8]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f000 fd92 	bl	800ba70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689a      	ldr	r2, [r3, #8]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af5a:	609a      	str	r2, [r3, #8]
      break;
 800af5c:	e03c      	b.n	800afd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	6859      	ldr	r1, [r3, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f000 fc4c 	bl	800b808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2150      	movs	r1, #80	; 0x50
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fd5c 	bl	800ba34 <TIM_ITRx_SetConfig>
      break;
 800af7c:	e02c      	b.n	800afd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6818      	ldr	r0, [r3, #0]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	6859      	ldr	r1, [r3, #4]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	461a      	mov	r2, r3
 800af8c:	f000 fca8 	bl	800b8e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2160      	movs	r1, #96	; 0x60
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fd4c 	bl	800ba34 <TIM_ITRx_SetConfig>
      break;
 800af9c:	e01c      	b.n	800afd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6859      	ldr	r1, [r3, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	461a      	mov	r2, r3
 800afac:	f000 fc2c 	bl	800b808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2140      	movs	r1, #64	; 0x40
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fd3c 	bl	800ba34 <TIM_ITRx_SetConfig>
      break;
 800afbc:	e00c      	b.n	800afd8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f000 fd33 	bl	800ba34 <TIM_ITRx_SetConfig>
      break;
 800afce:	e003      	b.n	800afd8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	73fb      	strb	r3, [r7, #15]
      break;
 800afd4:	e000      	b.n	800afd8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800afd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	ffceff88 	.word	0xffceff88
 800aff8:	00100040 	.word	0x00100040
 800affc:	00100030 	.word	0x00100030
 800b000:	00100020 	.word	0x00100020

0800b004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a40      	ldr	r2, [pc, #256]	; (800b154 <TIM_Base_SetConfig+0x114>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d013      	beq.n	800b080 <TIM_Base_SetConfig+0x40>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b05e:	d00f      	beq.n	800b080 <TIM_Base_SetConfig+0x40>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a3d      	ldr	r2, [pc, #244]	; (800b158 <TIM_Base_SetConfig+0x118>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00b      	beq.n	800b080 <TIM_Base_SetConfig+0x40>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a3c      	ldr	r2, [pc, #240]	; (800b15c <TIM_Base_SetConfig+0x11c>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d007      	beq.n	800b080 <TIM_Base_SetConfig+0x40>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a3b      	ldr	r2, [pc, #236]	; (800b160 <TIM_Base_SetConfig+0x120>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d003      	beq.n	800b080 <TIM_Base_SetConfig+0x40>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a3a      	ldr	r2, [pc, #232]	; (800b164 <TIM_Base_SetConfig+0x124>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d108      	bne.n	800b092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	4313      	orrs	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a2f      	ldr	r2, [pc, #188]	; (800b154 <TIM_Base_SetConfig+0x114>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d01f      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0a0:	d01b      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a2c      	ldr	r2, [pc, #176]	; (800b158 <TIM_Base_SetConfig+0x118>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d017      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a2b      	ldr	r2, [pc, #172]	; (800b15c <TIM_Base_SetConfig+0x11c>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d013      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a2a      	ldr	r2, [pc, #168]	; (800b160 <TIM_Base_SetConfig+0x120>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d00f      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a29      	ldr	r2, [pc, #164]	; (800b164 <TIM_Base_SetConfig+0x124>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d00b      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a28      	ldr	r2, [pc, #160]	; (800b168 <TIM_Base_SetConfig+0x128>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d007      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a27      	ldr	r2, [pc, #156]	; (800b16c <TIM_Base_SetConfig+0x12c>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d003      	beq.n	800b0da <TIM_Base_SetConfig+0x9a>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a26      	ldr	r2, [pc, #152]	; (800b170 <TIM_Base_SetConfig+0x130>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d108      	bne.n	800b0ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	695b      	ldr	r3, [r3, #20]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a10      	ldr	r2, [pc, #64]	; (800b154 <TIM_Base_SetConfig+0x114>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d00f      	beq.n	800b138 <TIM_Base_SetConfig+0xf8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a12      	ldr	r2, [pc, #72]	; (800b164 <TIM_Base_SetConfig+0x124>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00b      	beq.n	800b138 <TIM_Base_SetConfig+0xf8>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a11      	ldr	r2, [pc, #68]	; (800b168 <TIM_Base_SetConfig+0x128>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d007      	beq.n	800b138 <TIM_Base_SetConfig+0xf8>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a10      	ldr	r2, [pc, #64]	; (800b16c <TIM_Base_SetConfig+0x12c>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d003      	beq.n	800b138 <TIM_Base_SetConfig+0xf8>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a0f      	ldr	r2, [pc, #60]	; (800b170 <TIM_Base_SetConfig+0x130>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d103      	bne.n	800b140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	691a      	ldr	r2, [r3, #16]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	615a      	str	r2, [r3, #20]
}
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	40010000 	.word	0x40010000
 800b158:	40000400 	.word	0x40000400
 800b15c:	40000800 	.word	0x40000800
 800b160:	40000c00 	.word	0x40000c00
 800b164:	40010400 	.word	0x40010400
 800b168:	40014000 	.word	0x40014000
 800b16c:	40014400 	.word	0x40014400
 800b170:	40014800 	.word	0x40014800

0800b174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	f023 0201 	bic.w	r2, r3, #1
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4b37      	ldr	r3, [pc, #220]	; (800b27c <TIM_OC1_SetConfig+0x108>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f023 0302 	bic.w	r3, r3, #2
 800b1bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a2d      	ldr	r2, [pc, #180]	; (800b280 <TIM_OC1_SetConfig+0x10c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00f      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a2c      	ldr	r2, [pc, #176]	; (800b284 <TIM_OC1_SetConfig+0x110>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d00b      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a2b      	ldr	r2, [pc, #172]	; (800b288 <TIM_OC1_SetConfig+0x114>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d007      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a2a      	ldr	r2, [pc, #168]	; (800b28c <TIM_OC1_SetConfig+0x118>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d003      	beq.n	800b1f0 <TIM_OC1_SetConfig+0x7c>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a29      	ldr	r2, [pc, #164]	; (800b290 <TIM_OC1_SetConfig+0x11c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d10c      	bne.n	800b20a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f023 0308 	bic.w	r3, r3, #8
 800b1f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f023 0304 	bic.w	r3, r3, #4
 800b208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a1c      	ldr	r2, [pc, #112]	; (800b280 <TIM_OC1_SetConfig+0x10c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00f      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a1b      	ldr	r2, [pc, #108]	; (800b284 <TIM_OC1_SetConfig+0x110>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00b      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a1a      	ldr	r2, [pc, #104]	; (800b288 <TIM_OC1_SetConfig+0x114>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d007      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a19      	ldr	r2, [pc, #100]	; (800b28c <TIM_OC1_SetConfig+0x118>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d003      	beq.n	800b232 <TIM_OC1_SetConfig+0xbe>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a18      	ldr	r2, [pc, #96]	; (800b290 <TIM_OC1_SetConfig+0x11c>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d111      	bne.n	800b256 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	4313      	orrs	r3, r2
 800b24a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	621a      	str	r2, [r3, #32]
}
 800b270:	bf00      	nop
 800b272:	371c      	adds	r7, #28
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	fffeff8f 	.word	0xfffeff8f
 800b280:	40010000 	.word	0x40010000
 800b284:	40010400 	.word	0x40010400
 800b288:	40014000 	.word	0x40014000
 800b28c:	40014400 	.word	0x40014400
 800b290:	40014800 	.word	0x40014800

0800b294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f023 0210 	bic.w	r2, r3, #16
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4b34      	ldr	r3, [pc, #208]	; (800b390 <TIM_OC2_SetConfig+0xfc>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	021b      	lsls	r3, r3, #8
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f023 0320 	bic.w	r3, r3, #32
 800b2de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	011b      	lsls	r3, r3, #4
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a29      	ldr	r2, [pc, #164]	; (800b394 <TIM_OC2_SetConfig+0x100>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d003      	beq.n	800b2fc <TIM_OC2_SetConfig+0x68>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a28      	ldr	r2, [pc, #160]	; (800b398 <TIM_OC2_SetConfig+0x104>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d10d      	bne.n	800b318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a1e      	ldr	r2, [pc, #120]	; (800b394 <TIM_OC2_SetConfig+0x100>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d00f      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a1d      	ldr	r2, [pc, #116]	; (800b398 <TIM_OC2_SetConfig+0x104>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d00b      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a1c      	ldr	r2, [pc, #112]	; (800b39c <TIM_OC2_SetConfig+0x108>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d007      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a1b      	ldr	r2, [pc, #108]	; (800b3a0 <TIM_OC2_SetConfig+0x10c>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d003      	beq.n	800b340 <TIM_OC2_SetConfig+0xac>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a1a      	ldr	r2, [pc, #104]	; (800b3a4 <TIM_OC2_SetConfig+0x110>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d113      	bne.n	800b368 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b34e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	4313      	orrs	r3, r2
 800b35a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	621a      	str	r2, [r3, #32]
}
 800b382:	bf00      	nop
 800b384:	371c      	adds	r7, #28
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	feff8fff 	.word	0xfeff8fff
 800b394:	40010000 	.word	0x40010000
 800b398:	40010400 	.word	0x40010400
 800b39c:	40014000 	.word	0x40014000
 800b3a0:	40014400 	.word	0x40014400
 800b3a4:	40014800 	.word	0x40014800

0800b3a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4b33      	ldr	r3, [pc, #204]	; (800b4a0 <TIM_OC3_SetConfig+0xf8>)
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0303 	bic.w	r3, r3, #3
 800b3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	021b      	lsls	r3, r3, #8
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a28      	ldr	r2, [pc, #160]	; (800b4a4 <TIM_OC3_SetConfig+0xfc>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d003      	beq.n	800b40e <TIM_OC3_SetConfig+0x66>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a27      	ldr	r2, [pc, #156]	; (800b4a8 <TIM_OC3_SetConfig+0x100>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d10d      	bne.n	800b42a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <TIM_OC3_SetConfig+0xfc>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d00f      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a1c      	ldr	r2, [pc, #112]	; (800b4a8 <TIM_OC3_SetConfig+0x100>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d00b      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a1b      	ldr	r2, [pc, #108]	; (800b4ac <TIM_OC3_SetConfig+0x104>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d007      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a1a      	ldr	r2, [pc, #104]	; (800b4b0 <TIM_OC3_SetConfig+0x108>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d003      	beq.n	800b452 <TIM_OC3_SetConfig+0xaa>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a19      	ldr	r2, [pc, #100]	; (800b4b4 <TIM_OC3_SetConfig+0x10c>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d113      	bne.n	800b47a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	011b      	lsls	r3, r3, #4
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	4313      	orrs	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	621a      	str	r2, [r3, #32]
}
 800b494:	bf00      	nop
 800b496:	371c      	adds	r7, #28
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	fffeff8f 	.word	0xfffeff8f
 800b4a4:	40010000 	.word	0x40010000
 800b4a8:	40010400 	.word	0x40010400
 800b4ac:	40014000 	.word	0x40014000
 800b4b0:	40014400 	.word	0x40014400
 800b4b4:	40014800 	.word	0x40014800

0800b4b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4b24      	ldr	r3, [pc, #144]	; (800b574 <TIM_OC4_SetConfig+0xbc>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	021b      	lsls	r3, r3, #8
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	031b      	lsls	r3, r3, #12
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4a19      	ldr	r2, [pc, #100]	; (800b578 <TIM_OC4_SetConfig+0xc0>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d00f      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a18      	ldr	r2, [pc, #96]	; (800b57c <TIM_OC4_SetConfig+0xc4>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d00b      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a17      	ldr	r2, [pc, #92]	; (800b580 <TIM_OC4_SetConfig+0xc8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d007      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a16      	ldr	r2, [pc, #88]	; (800b584 <TIM_OC4_SetConfig+0xcc>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d003      	beq.n	800b538 <TIM_OC4_SetConfig+0x80>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a15      	ldr	r2, [pc, #84]	; (800b588 <TIM_OC4_SetConfig+0xd0>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d109      	bne.n	800b54c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b53e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	019b      	lsls	r3, r3, #6
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	4313      	orrs	r3, r2
 800b54a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	621a      	str	r2, [r3, #32]
}
 800b566:	bf00      	nop
 800b568:	371c      	adds	r7, #28
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	feff8fff 	.word	0xfeff8fff
 800b578:	40010000 	.word	0x40010000
 800b57c:	40010400 	.word	0x40010400
 800b580:	40014000 	.word	0x40014000
 800b584:	40014400 	.word	0x40014400
 800b588:	40014800 	.word	0x40014800

0800b58c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a1b      	ldr	r3, [r3, #32]
 800b59a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4b21      	ldr	r3, [pc, #132]	; (800b63c <TIM_OC5_SetConfig+0xb0>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	041b      	lsls	r3, r3, #16
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a18      	ldr	r2, [pc, #96]	; (800b640 <TIM_OC5_SetConfig+0xb4>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00f      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a17      	ldr	r2, [pc, #92]	; (800b644 <TIM_OC5_SetConfig+0xb8>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00b      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a16      	ldr	r2, [pc, #88]	; (800b648 <TIM_OC5_SetConfig+0xbc>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d007      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a15      	ldr	r2, [pc, #84]	; (800b64c <TIM_OC5_SetConfig+0xc0>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d003      	beq.n	800b602 <TIM_OC5_SetConfig+0x76>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a14      	ldr	r2, [pc, #80]	; (800b650 <TIM_OC5_SetConfig+0xc4>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d109      	bne.n	800b616 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	621a      	str	r2, [r3, #32]
}
 800b630:	bf00      	nop
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	fffeff8f 	.word	0xfffeff8f
 800b640:	40010000 	.word	0x40010000
 800b644:	40010400 	.word	0x40010400
 800b648:	40014000 	.word	0x40014000
 800b64c:	40014400 	.word	0x40014400
 800b650:	40014800 	.word	0x40014800

0800b654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4b22      	ldr	r3, [pc, #136]	; (800b708 <TIM_OC6_SetConfig+0xb4>)
 800b680:	4013      	ands	r3, r2
 800b682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	021b      	lsls	r3, r3, #8
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	4313      	orrs	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	051b      	lsls	r3, r3, #20
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a19      	ldr	r2, [pc, #100]	; (800b70c <TIM_OC6_SetConfig+0xb8>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d00f      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a18      	ldr	r2, [pc, #96]	; (800b710 <TIM_OC6_SetConfig+0xbc>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d00b      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a17      	ldr	r2, [pc, #92]	; (800b714 <TIM_OC6_SetConfig+0xc0>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d007      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a16      	ldr	r2, [pc, #88]	; (800b718 <TIM_OC6_SetConfig+0xc4>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d003      	beq.n	800b6cc <TIM_OC6_SetConfig+0x78>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a15      	ldr	r2, [pc, #84]	; (800b71c <TIM_OC6_SetConfig+0xc8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d109      	bne.n	800b6e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	029b      	lsls	r3, r3, #10
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	621a      	str	r2, [r3, #32]
}
 800b6fa:	bf00      	nop
 800b6fc:	371c      	adds	r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	feff8fff 	.word	0xfeff8fff
 800b70c:	40010000 	.word	0x40010000
 800b710:	40010400 	.word	0x40010400
 800b714:	40014000 	.word	0x40014000
 800b718:	40014400 	.word	0x40014400
 800b71c:	40014800 	.word	0x40014800

0800b720 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
 800b72c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	f023 0201 	bic.w	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4a28      	ldr	r2, [pc, #160]	; (800b7ec <TIM_TI1_SetConfig+0xcc>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d01b      	beq.n	800b786 <TIM_TI1_SetConfig+0x66>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b754:	d017      	beq.n	800b786 <TIM_TI1_SetConfig+0x66>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4a25      	ldr	r2, [pc, #148]	; (800b7f0 <TIM_TI1_SetConfig+0xd0>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d013      	beq.n	800b786 <TIM_TI1_SetConfig+0x66>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4a24      	ldr	r2, [pc, #144]	; (800b7f4 <TIM_TI1_SetConfig+0xd4>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d00f      	beq.n	800b786 <TIM_TI1_SetConfig+0x66>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4a23      	ldr	r2, [pc, #140]	; (800b7f8 <TIM_TI1_SetConfig+0xd8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d00b      	beq.n	800b786 <TIM_TI1_SetConfig+0x66>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4a22      	ldr	r2, [pc, #136]	; (800b7fc <TIM_TI1_SetConfig+0xdc>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d007      	beq.n	800b786 <TIM_TI1_SetConfig+0x66>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	4a21      	ldr	r2, [pc, #132]	; (800b800 <TIM_TI1_SetConfig+0xe0>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d003      	beq.n	800b786 <TIM_TI1_SetConfig+0x66>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4a20      	ldr	r2, [pc, #128]	; (800b804 <TIM_TI1_SetConfig+0xe4>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d101      	bne.n	800b78a <TIM_TI1_SetConfig+0x6a>
 800b786:	2301      	movs	r3, #1
 800b788:	e000      	b.n	800b78c <TIM_TI1_SetConfig+0x6c>
 800b78a:	2300      	movs	r3, #0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d008      	beq.n	800b7a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	f023 0303 	bic.w	r3, r3, #3
 800b796:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e003      	b.n	800b7aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f043 0301 	orr.w	r3, r3, #1
 800b7a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	f023 030a 	bic.w	r3, r3, #10
 800b7c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f003 030a 	and.w	r3, r3, #10
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	621a      	str	r2, [r3, #32]
}
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	40010000 	.word	0x40010000
 800b7f0:	40000400 	.word	0x40000400
 800b7f4:	40000800 	.word	0x40000800
 800b7f8:	40000c00 	.word	0x40000c00
 800b7fc:	40010400 	.word	0x40010400
 800b800:	40001800 	.word	0x40001800
 800b804:	40014000 	.word	0x40014000

0800b808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b808:	b480      	push	{r7}
 800b80a:	b087      	sub	sp, #28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6a1b      	ldr	r3, [r3, #32]
 800b818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	f023 0201 	bic.w	r2, r3, #1
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	011b      	lsls	r3, r3, #4
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f023 030a 	bic.w	r3, r3, #10
 800b844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b866:	b480      	push	{r7}
 800b868:	b087      	sub	sp, #28
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
 800b872:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	f023 0210 	bic.w	r2, r3, #16
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b892:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	021b      	lsls	r3, r3, #8
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	031b      	lsls	r3, r3, #12
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	621a      	str	r2, [r3, #32]
}
 800b8d4:	bf00      	nop
 800b8d6:	371c      	adds	r7, #28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6a1b      	ldr	r3, [r3, #32]
 800b8f0:	f023 0210 	bic.w	r2, r3, #16
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b90a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	031b      	lsls	r3, r3, #12
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	4313      	orrs	r3, r2
 800b914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b91c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	011b      	lsls	r3, r3, #4
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	4313      	orrs	r3, r2
 800b926:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	621a      	str	r2, [r3, #32]
}
 800b934:	bf00      	nop
 800b936:	371c      	adds	r7, #28
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6a1b      	ldr	r3, [r3, #32]
 800b964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f023 0303 	bic.w	r3, r3, #3
 800b96c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4313      	orrs	r3, r2
 800b974:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b97c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	011b      	lsls	r3, r3, #4
 800b982:	b2db      	uxtb	r3, r3
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	4313      	orrs	r3, r2
 800b988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b990:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b99a:	693a      	ldr	r2, [r7, #16]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	621a      	str	r2, [r3, #32]
}
 800b9ac:	bf00      	nop
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	021b      	lsls	r3, r3, #8
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	031b      	lsls	r3, r3, #12
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ba0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	031b      	lsls	r3, r3, #12
 800ba10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	621a      	str	r2, [r3, #32]
}
 800ba26:	bf00      	nop
 800ba28:	371c      	adds	r7, #28
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
	...

0800ba34 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <TIM_ITRx_SetConfig+0x38>)
 800ba48:	4013      	ands	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	f043 0307 	orr.w	r3, r3, #7
 800ba56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	609a      	str	r2, [r3, #8]
}
 800ba5e:	bf00      	nop
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	ffcfff8f 	.word	0xffcfff8f

0800ba70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b087      	sub	sp, #28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	021a      	lsls	r2, r3, #8
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	431a      	orrs	r2, r3
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	609a      	str	r2, [r3, #8]
}
 800baa4:	bf00      	nop
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f003 031f 	and.w	r3, r3, #31
 800bac2:	2201      	movs	r2, #1
 800bac4:	fa02 f303 	lsl.w	r3, r2, r3
 800bac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6a1a      	ldr	r2, [r3, #32]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	43db      	mvns	r3, r3
 800bad2:	401a      	ands	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6a1a      	ldr	r2, [r3, #32]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f003 031f 	and.w	r3, r3, #31
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	fa01 f303 	lsl.w	r3, r1, r3
 800bae8:	431a      	orrs	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	621a      	str	r2, [r3, #32]
}
 800baee:	bf00      	nop
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
	...

0800bafc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d101      	bne.n	800bb14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb10:	2302      	movs	r3, #2
 800bb12:	e06d      	b.n	800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a30      	ldr	r2, [pc, #192]	; (800bbfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d004      	beq.n	800bb48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a2f      	ldr	r2, [pc, #188]	; (800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d108      	bne.n	800bb5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a20      	ldr	r2, [pc, #128]	; (800bbfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d022      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb86:	d01d      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d018      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a1c      	ldr	r2, [pc, #112]	; (800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d013      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a1a      	ldr	r2, [pc, #104]	; (800bc0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00e      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a15      	ldr	r2, [pc, #84]	; (800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d009      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a16      	ldr	r2, [pc, #88]	; (800bc10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d004      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a15      	ldr	r2, [pc, #84]	; (800bc14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d10c      	bne.n	800bbde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	40010000 	.word	0x40010000
 800bc00:	40010400 	.word	0x40010400
 800bc04:	40000400 	.word	0x40000400
 800bc08:	40000800 	.word	0x40000800
 800bc0c:	40000c00 	.word	0x40000c00
 800bc10:	40001800 	.word	0x40001800
 800bc14:	40014000 	.word	0x40014000

0800bc18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e042      	b.n	800bcec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d106      	bne.n	800bc7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7fa fa27 	bl	80060cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2224      	movs	r2, #36	; 0x24
 800bc82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0201 	bic.w	r2, r2, #1
 800bc94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fccc 	bl	800c634 <UART_SetConfig>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d101      	bne.n	800bca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	e022      	b.n	800bcec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d002      	beq.n	800bcb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f001 fa28 	bl	800d104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bcd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f042 0201 	orr.w	r2, r2, #1
 800bce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 faaf 	bl	800d248 <UART_CheckIdleState>
 800bcea:	4603      	mov	r3, r0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08a      	sub	sp, #40	; 0x28
 800bcf8:	af02      	add	r7, sp, #8
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	4613      	mov	r3, r2
 800bd02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0a:	2b20      	cmp	r3, #32
 800bd0c:	f040 8083 	bne.w	800be16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d002      	beq.n	800bd1c <HAL_UART_Transmit+0x28>
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e07b      	b.n	800be18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d101      	bne.n	800bd2e <HAL_UART_Transmit+0x3a>
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e074      	b.n	800be18 <HAL_UART_Transmit+0x124>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2221      	movs	r2, #33	; 0x21
 800bd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd46:	f7fa fb9d 	bl	8006484 <HAL_GetTick>
 800bd4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	88fa      	ldrh	r2, [r7, #6]
 800bd50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	88fa      	ldrh	r2, [r7, #6]
 800bd58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd64:	d108      	bne.n	800bd78 <HAL_UART_Transmit+0x84>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d104      	bne.n	800bd78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	61bb      	str	r3, [r7, #24]
 800bd76:	e003      	b.n	800bd80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bd88:	e02c      	b.n	800bde4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2200      	movs	r2, #0
 800bd92:	2180      	movs	r1, #128	; 0x80
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f001 faa2 	bl	800d2de <UART_WaitOnFlagUntilTimeout>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e039      	b.n	800be18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10b      	bne.n	800bdc2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	61bb      	str	r3, [r7, #24]
 800bdc0:	e007      	b.n	800bdd2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1cc      	bne.n	800bd8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2140      	movs	r1, #64	; 0x40
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f001 fa6f 	bl	800d2de <UART_WaitOnFlagUntilTimeout>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e006      	b.n	800be18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2220      	movs	r2, #32
 800be0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	e000      	b.n	800be18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800be16:	2302      	movs	r3, #2
  }
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08a      	sub	sp, #40	; 0x28
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be34:	2b20      	cmp	r3, #32
 800be36:	d142      	bne.n	800bebe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <HAL_UART_Receive_IT+0x24>
 800be3e:	88fb      	ldrh	r3, [r7, #6]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e03b      	b.n	800bec0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d101      	bne.n	800be56 <HAL_UART_Receive_IT+0x36>
 800be52:	2302      	movs	r3, #2
 800be54:	e034      	b.n	800bec0 <HAL_UART_Receive_IT+0xa0>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a17      	ldr	r2, [pc, #92]	; (800bec8 <HAL_UART_Receive_IT+0xa8>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d01f      	beq.n	800beae <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d018      	beq.n	800beae <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	613b      	str	r3, [r7, #16]
   return(result);
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be90:	627b      	str	r3, [r7, #36]	; 0x24
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	623b      	str	r3, [r7, #32]
 800be9c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9e:	69f9      	ldr	r1, [r7, #28]
 800bea0:	6a3a      	ldr	r2, [r7, #32]
 800bea2:	e841 2300 	strex	r3, r2, [r1]
 800bea6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e6      	bne.n	800be7c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800beae:	88fb      	ldrh	r3, [r7, #6]
 800beb0:	461a      	mov	r2, r3
 800beb2:	68b9      	ldr	r1, [r7, #8]
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f001 fadb 	bl	800d470 <UART_Start_Receive_IT>
 800beba:	4603      	mov	r3, r0
 800bebc:	e000      	b.n	800bec0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bebe:	2302      	movs	r3, #2
  }
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3728      	adds	r7, #40	; 0x28
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	58000c00 	.word	0x58000c00

0800becc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b0ba      	sub	sp, #232	; 0xe8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bef2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bef6:	f640 030f 	movw	r3, #2063	; 0x80f
 800befa:	4013      	ands	r3, r2
 800befc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d11b      	bne.n	800bf40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf0c:	f003 0320 	and.w	r3, r3, #32
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d015      	beq.n	800bf40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf18:	f003 0320 	and.w	r3, r3, #32
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d105      	bne.n	800bf2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d009      	beq.n	800bf40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 835a 	beq.w	800c5ea <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	4798      	blx	r3
      }
      return;
 800bf3e:	e354      	b.n	800c5ea <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 811f 	beq.w	800c188 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf4e:	4b8b      	ldr	r3, [pc, #556]	; (800c17c <HAL_UART_IRQHandler+0x2b0>)
 800bf50:	4013      	ands	r3, r2
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf5a:	4b89      	ldr	r3, [pc, #548]	; (800c180 <HAL_UART_IRQHandler+0x2b4>)
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 8112 	beq.w	800c188 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d011      	beq.n	800bf94 <HAL_UART_IRQHandler+0xc8>
 800bf70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00b      	beq.n	800bf94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2201      	movs	r2, #1
 800bf82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf8a:	f043 0201 	orr.w	r2, r3, #1
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf98:	f003 0302 	and.w	r3, r3, #2
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d011      	beq.n	800bfc4 <HAL_UART_IRQHandler+0xf8>
 800bfa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00b      	beq.n	800bfc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2202      	movs	r2, #2
 800bfb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfba:	f043 0204 	orr.w	r2, r3, #4
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfc8:	f003 0304 	and.w	r3, r3, #4
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d011      	beq.n	800bff4 <HAL_UART_IRQHandler+0x128>
 800bfd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfd4:	f003 0301 	and.w	r3, r3, #1
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00b      	beq.n	800bff4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2204      	movs	r2, #4
 800bfe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfea:	f043 0202 	orr.w	r2, r3, #2
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff8:	f003 0308 	and.w	r3, r3, #8
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d017      	beq.n	800c030 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c004:	f003 0320 	and.w	r3, r3, #32
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d105      	bne.n	800c018 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c00c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c010:	4b5a      	ldr	r3, [pc, #360]	; (800c17c <HAL_UART_IRQHandler+0x2b0>)
 800c012:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00b      	beq.n	800c030 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2208      	movs	r2, #8
 800c01e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c026:	f043 0208 	orr.w	r2, r3, #8
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d012      	beq.n	800c062 <HAL_UART_IRQHandler+0x196>
 800c03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00c      	beq.n	800c062 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c058:	f043 0220 	orr.w	r2, r3, #32
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 82c0 	beq.w	800c5ee <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c072:	f003 0320 	and.w	r3, r3, #32
 800c076:	2b00      	cmp	r3, #0
 800c078:	d013      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d105      	bne.n	800c092 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d007      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b6:	2b40      	cmp	r3, #64	; 0x40
 800c0b8:	d005      	beq.n	800c0c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d04f      	beq.n	800c166 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f001 fafc 	bl	800d6c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d6:	2b40      	cmp	r3, #64	; 0x40
 800c0d8:	d141      	bne.n	800c15e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3308      	adds	r3, #8
 800c102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c10a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c11e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1d9      	bne.n	800c0da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d013      	beq.n	800c156 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c132:	4a14      	ldr	r2, [pc, #80]	; (800c184 <HAL_UART_IRQHandler+0x2b8>)
 800c134:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fa fe3e 	bl	8006dbc <HAL_DMA_Abort_IT>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d017      	beq.n	800c176 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c154:	e00f      	b.n	800c176 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fa56 	bl	800c608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c15c:	e00b      	b.n	800c176 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fa52 	bl	800c608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c164:	e007      	b.n	800c176 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fa4e 	bl	800c608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c174:	e23b      	b.n	800c5ee <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c176:	bf00      	nop
    return;
 800c178:	e239      	b.n	800c5ee <HAL_UART_IRQHandler+0x722>
 800c17a:	bf00      	nop
 800c17c:	10000001 	.word	0x10000001
 800c180:	04000120 	.word	0x04000120
 800c184:	0800d791 	.word	0x0800d791

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	f040 81ce 	bne.w	800c52e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c196:	f003 0310 	and.w	r3, r3, #16
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 81c7 	beq.w	800c52e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a4:	f003 0310 	and.w	r3, r3, #16
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 81c0 	beq.w	800c52e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2210      	movs	r2, #16
 800c1b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c0:	2b40      	cmp	r3, #64	; 0x40
 800c1c2:	f040 813b 	bne.w	800c43c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a8b      	ldr	r2, [pc, #556]	; (800c3fc <HAL_UART_IRQHandler+0x530>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d059      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a89      	ldr	r2, [pc, #548]	; (800c400 <HAL_UART_IRQHandler+0x534>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d053      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a87      	ldr	r2, [pc, #540]	; (800c404 <HAL_UART_IRQHandler+0x538>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d04d      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a85      	ldr	r2, [pc, #532]	; (800c408 <HAL_UART_IRQHandler+0x53c>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d047      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a83      	ldr	r2, [pc, #524]	; (800c40c <HAL_UART_IRQHandler+0x540>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d041      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a81      	ldr	r2, [pc, #516]	; (800c410 <HAL_UART_IRQHandler+0x544>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d03b      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a7f      	ldr	r2, [pc, #508]	; (800c414 <HAL_UART_IRQHandler+0x548>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d035      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a7d      	ldr	r2, [pc, #500]	; (800c418 <HAL_UART_IRQHandler+0x54c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d02f      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a7b      	ldr	r2, [pc, #492]	; (800c41c <HAL_UART_IRQHandler+0x550>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d029      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a79      	ldr	r2, [pc, #484]	; (800c420 <HAL_UART_IRQHandler+0x554>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d023      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a77      	ldr	r2, [pc, #476]	; (800c424 <HAL_UART_IRQHandler+0x558>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d01d      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a75      	ldr	r2, [pc, #468]	; (800c428 <HAL_UART_IRQHandler+0x55c>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d017      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a73      	ldr	r2, [pc, #460]	; (800c42c <HAL_UART_IRQHandler+0x560>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d011      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a71      	ldr	r2, [pc, #452]	; (800c430 <HAL_UART_IRQHandler+0x564>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d00b      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a6f      	ldr	r2, [pc, #444]	; (800c434 <HAL_UART_IRQHandler+0x568>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d005      	beq.n	800c286 <HAL_UART_IRQHandler+0x3ba>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a6d      	ldr	r2, [pc, #436]	; (800c438 <HAL_UART_IRQHandler+0x56c>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d105      	bne.n	800c292 <HAL_UART_IRQHandler+0x3c6>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	e004      	b.n	800c29c <HAL_UART_IRQHandler+0x3d0>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 81a4 	beq.w	800c5f2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	f080 819c 	bcs.w	800c5f2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2c8:	69db      	ldr	r3, [r3, #28]
 800c2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ce:	f000 8086 	beq.w	800c3de <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2de:	e853 3f00 	ldrex	r3, [r3]
 800c2e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c2e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c300:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c304:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c308:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c30c:	e841 2300 	strex	r3, r2, [r1]
 800c310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1da      	bne.n	800c2d2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3308      	adds	r3, #8
 800c322:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c326:	e853 3f00 	ldrex	r3, [r3]
 800c32a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c32c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c32e:	f023 0301 	bic.w	r3, r3, #1
 800c332:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3308      	adds	r3, #8
 800c33c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c340:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c344:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c348:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c34c:	e841 2300 	strex	r3, r2, [r1]
 800c350:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1e1      	bne.n	800c31c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3308      	adds	r3, #8
 800c35e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c362:	e853 3f00 	ldrex	r3, [r3]
 800c366:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c36a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c36e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3308      	adds	r3, #8
 800c378:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c37c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c37e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c380:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c382:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c384:	e841 2300 	strex	r3, r2, [r1]
 800c388:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c38a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1e3      	bne.n	800c358 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2220      	movs	r2, #32
 800c394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a6:	e853 3f00 	ldrex	r3, [r3]
 800c3aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ae:	f023 0310 	bic.w	r3, r3, #16
 800c3b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3c8:	e841 2300 	strex	r3, r2, [r1]
 800c3cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e4      	bne.n	800c39e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fa f9d1 	bl	8006780 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f912 	bl	800c61c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3f8:	e0fb      	b.n	800c5f2 <HAL_UART_IRQHandler+0x726>
 800c3fa:	bf00      	nop
 800c3fc:	40020010 	.word	0x40020010
 800c400:	40020028 	.word	0x40020028
 800c404:	40020040 	.word	0x40020040
 800c408:	40020058 	.word	0x40020058
 800c40c:	40020070 	.word	0x40020070
 800c410:	40020088 	.word	0x40020088
 800c414:	400200a0 	.word	0x400200a0
 800c418:	400200b8 	.word	0x400200b8
 800c41c:	40020410 	.word	0x40020410
 800c420:	40020428 	.word	0x40020428
 800c424:	40020440 	.word	0x40020440
 800c428:	40020458 	.word	0x40020458
 800c42c:	40020470 	.word	0x40020470
 800c430:	40020488 	.word	0x40020488
 800c434:	400204a0 	.word	0x400204a0
 800c438:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c448:	b29b      	uxth	r3, r3
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c456:	b29b      	uxth	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 80cc 	beq.w	800c5f6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c45e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c462:	2b00      	cmp	r3, #0
 800c464:	f000 80c7 	beq.w	800c5f6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c47c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	461a      	mov	r2, r3
 800c486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c48a:	647b      	str	r3, [r7, #68]	; 0x44
 800c48c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c492:	e841 2300 	strex	r3, r2, [r1]
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1e4      	bne.n	800c468 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	3308      	adds	r3, #8
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	e853 3f00 	ldrex	r3, [r3]
 800c4ac:	623b      	str	r3, [r7, #32]
   return(result);
 800c4ae:	6a3a      	ldr	r2, [r7, #32]
 800c4b0:	4b54      	ldr	r3, [pc, #336]	; (800c604 <HAL_UART_IRQHandler+0x738>)
 800c4b2:	4013      	ands	r3, r2
 800c4b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3308      	adds	r3, #8
 800c4be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c4c2:	633a      	str	r2, [r7, #48]	; 0x30
 800c4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ca:	e841 2300 	strex	r3, r2, [r1]
 800c4ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e3      	bne.n	800c49e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	e853 3f00 	ldrex	r3, [r3]
 800c4f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f023 0310 	bic.w	r3, r3, #16
 800c4fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c50c:	61fb      	str	r3, [r7, #28]
 800c50e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c510:	69b9      	ldr	r1, [r7, #24]
 800c512:	69fa      	ldr	r2, [r7, #28]
 800c514:	e841 2300 	strex	r3, r2, [r1]
 800c518:	617b      	str	r3, [r7, #20]
   return(result);
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e4      	bne.n	800c4ea <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c524:	4619      	mov	r1, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f878 	bl	800c61c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c52c:	e063      	b.n	800c5f6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00e      	beq.n	800c558 <HAL_UART_IRQHandler+0x68c>
 800c53a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c53e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c542:	2b00      	cmp	r3, #0
 800c544:	d008      	beq.n	800c558 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c54e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f001 fdbb 	bl	800e0cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c556:	e051      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c55c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c560:	2b00      	cmp	r3, #0
 800c562:	d014      	beq.n	800c58e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d105      	bne.n	800c57c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d008      	beq.n	800c58e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c580:	2b00      	cmp	r3, #0
 800c582:	d03a      	beq.n	800c5fa <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	4798      	blx	r3
    }
    return;
 800c58c:	e035      	b.n	800c5fa <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d009      	beq.n	800c5ae <HAL_UART_IRQHandler+0x6e2>
 800c59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f001 f908 	bl	800d7bc <UART_EndTransmit_IT>
    return;
 800c5ac:	e026      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d009      	beq.n	800c5ce <HAL_UART_IRQHandler+0x702>
 800c5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f001 fd94 	bl	800e0f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5cc:	e016      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d010      	beq.n	800c5fc <HAL_UART_IRQHandler+0x730>
 800c5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	da0c      	bge.n	800c5fc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 fd7c 	bl	800e0e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5e8:	e008      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
      return;
 800c5ea:	bf00      	nop
 800c5ec:	e006      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
    return;
 800c5ee:	bf00      	nop
 800c5f0:	e004      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
      return;
 800c5f2:	bf00      	nop
 800c5f4:	e002      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
      return;
 800c5f6:	bf00      	nop
 800c5f8:	e000      	b.n	800c5fc <HAL_UART_IRQHandler+0x730>
    return;
 800c5fa:	bf00      	nop
  }
}
 800c5fc:	37e8      	adds	r7, #232	; 0xe8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	effffffe 	.word	0xeffffffe

0800c608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	460b      	mov	r3, r1
 800c626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c628:	bf00      	nop
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c638:	b092      	sub	sp, #72	; 0x48
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	689a      	ldr	r2, [r3, #8]
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	431a      	orrs	r2, r3
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	695b      	ldr	r3, [r3, #20]
 800c652:	431a      	orrs	r2, r3
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	69db      	ldr	r3, [r3, #28]
 800c658:	4313      	orrs	r3, r2
 800c65a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	4bbe      	ldr	r3, [pc, #760]	; (800c95c <UART_SetConfig+0x328>)
 800c664:	4013      	ands	r3, r2
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	6812      	ldr	r2, [r2, #0]
 800c66a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c66c:	430b      	orrs	r3, r1
 800c66e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	68da      	ldr	r2, [r3, #12]
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	430a      	orrs	r2, r1
 800c684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4ab3      	ldr	r2, [pc, #716]	; (800c960 <UART_SetConfig+0x32c>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d004      	beq.n	800c6a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	6a1b      	ldr	r3, [r3, #32]
 800c69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c69c:	4313      	orrs	r3, r2
 800c69e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	689a      	ldr	r2, [r3, #8]
 800c6a6:	4baf      	ldr	r3, [pc, #700]	; (800c964 <UART_SetConfig+0x330>)
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	6812      	ldr	r2, [r2, #0]
 800c6ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6b0:	430b      	orrs	r3, r1
 800c6b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	f023 010f 	bic.w	r1, r3, #15
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4aa6      	ldr	r2, [pc, #664]	; (800c968 <UART_SetConfig+0x334>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d177      	bne.n	800c7c4 <UART_SetConfig+0x190>
 800c6d4:	4ba5      	ldr	r3, [pc, #660]	; (800c96c <UART_SetConfig+0x338>)
 800c6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6dc:	2b28      	cmp	r3, #40	; 0x28
 800c6de:	d86d      	bhi.n	800c7bc <UART_SetConfig+0x188>
 800c6e0:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <UART_SetConfig+0xb4>)
 800c6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e6:	bf00      	nop
 800c6e8:	0800c78d 	.word	0x0800c78d
 800c6ec:	0800c7bd 	.word	0x0800c7bd
 800c6f0:	0800c7bd 	.word	0x0800c7bd
 800c6f4:	0800c7bd 	.word	0x0800c7bd
 800c6f8:	0800c7bd 	.word	0x0800c7bd
 800c6fc:	0800c7bd 	.word	0x0800c7bd
 800c700:	0800c7bd 	.word	0x0800c7bd
 800c704:	0800c7bd 	.word	0x0800c7bd
 800c708:	0800c795 	.word	0x0800c795
 800c70c:	0800c7bd 	.word	0x0800c7bd
 800c710:	0800c7bd 	.word	0x0800c7bd
 800c714:	0800c7bd 	.word	0x0800c7bd
 800c718:	0800c7bd 	.word	0x0800c7bd
 800c71c:	0800c7bd 	.word	0x0800c7bd
 800c720:	0800c7bd 	.word	0x0800c7bd
 800c724:	0800c7bd 	.word	0x0800c7bd
 800c728:	0800c79d 	.word	0x0800c79d
 800c72c:	0800c7bd 	.word	0x0800c7bd
 800c730:	0800c7bd 	.word	0x0800c7bd
 800c734:	0800c7bd 	.word	0x0800c7bd
 800c738:	0800c7bd 	.word	0x0800c7bd
 800c73c:	0800c7bd 	.word	0x0800c7bd
 800c740:	0800c7bd 	.word	0x0800c7bd
 800c744:	0800c7bd 	.word	0x0800c7bd
 800c748:	0800c7a5 	.word	0x0800c7a5
 800c74c:	0800c7bd 	.word	0x0800c7bd
 800c750:	0800c7bd 	.word	0x0800c7bd
 800c754:	0800c7bd 	.word	0x0800c7bd
 800c758:	0800c7bd 	.word	0x0800c7bd
 800c75c:	0800c7bd 	.word	0x0800c7bd
 800c760:	0800c7bd 	.word	0x0800c7bd
 800c764:	0800c7bd 	.word	0x0800c7bd
 800c768:	0800c7ad 	.word	0x0800c7ad
 800c76c:	0800c7bd 	.word	0x0800c7bd
 800c770:	0800c7bd 	.word	0x0800c7bd
 800c774:	0800c7bd 	.word	0x0800c7bd
 800c778:	0800c7bd 	.word	0x0800c7bd
 800c77c:	0800c7bd 	.word	0x0800c7bd
 800c780:	0800c7bd 	.word	0x0800c7bd
 800c784:	0800c7bd 	.word	0x0800c7bd
 800c788:	0800c7b5 	.word	0x0800c7b5
 800c78c:	2301      	movs	r3, #1
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e222      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c794:	2304      	movs	r3, #4
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79a:	e21e      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c79c:	2308      	movs	r3, #8
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a2:	e21a      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c7a4:	2310      	movs	r3, #16
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7aa:	e216      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c7ac:	2320      	movs	r3, #32
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b2:	e212      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c7b4:	2340      	movs	r3, #64	; 0x40
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ba:	e20e      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c7bc:	2380      	movs	r3, #128	; 0x80
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c2:	e20a      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a69      	ldr	r2, [pc, #420]	; (800c970 <UART_SetConfig+0x33c>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d130      	bne.n	800c830 <UART_SetConfig+0x1fc>
 800c7ce:	4b67      	ldr	r3, [pc, #412]	; (800c96c <UART_SetConfig+0x338>)
 800c7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b05      	cmp	r3, #5
 800c7d8:	d826      	bhi.n	800c828 <UART_SetConfig+0x1f4>
 800c7da:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <UART_SetConfig+0x1ac>)
 800c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e0:	0800c7f9 	.word	0x0800c7f9
 800c7e4:	0800c801 	.word	0x0800c801
 800c7e8:	0800c809 	.word	0x0800c809
 800c7ec:	0800c811 	.word	0x0800c811
 800c7f0:	0800c819 	.word	0x0800c819
 800c7f4:	0800c821 	.word	0x0800c821
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fe:	e1ec      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c800:	2304      	movs	r3, #4
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c806:	e1e8      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c808:	2308      	movs	r3, #8
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80e:	e1e4      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c810:	2310      	movs	r3, #16
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c816:	e1e0      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c818:	2320      	movs	r3, #32
 800c81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81e:	e1dc      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c820:	2340      	movs	r3, #64	; 0x40
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c826:	e1d8      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c828:	2380      	movs	r3, #128	; 0x80
 800c82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82e:	e1d4      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a4f      	ldr	r2, [pc, #316]	; (800c974 <UART_SetConfig+0x340>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d130      	bne.n	800c89c <UART_SetConfig+0x268>
 800c83a:	4b4c      	ldr	r3, [pc, #304]	; (800c96c <UART_SetConfig+0x338>)
 800c83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83e:	f003 0307 	and.w	r3, r3, #7
 800c842:	2b05      	cmp	r3, #5
 800c844:	d826      	bhi.n	800c894 <UART_SetConfig+0x260>
 800c846:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <UART_SetConfig+0x218>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c865 	.word	0x0800c865
 800c850:	0800c86d 	.word	0x0800c86d
 800c854:	0800c875 	.word	0x0800c875
 800c858:	0800c87d 	.word	0x0800c87d
 800c85c:	0800c885 	.word	0x0800c885
 800c860:	0800c88d 	.word	0x0800c88d
 800c864:	2300      	movs	r3, #0
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86a:	e1b6      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c86c:	2304      	movs	r3, #4
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c872:	e1b2      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c874:	2308      	movs	r3, #8
 800c876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87a:	e1ae      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c87c:	2310      	movs	r3, #16
 800c87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c882:	e1aa      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c884:	2320      	movs	r3, #32
 800c886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88a:	e1a6      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c88c:	2340      	movs	r3, #64	; 0x40
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c892:	e1a2      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c894:	2380      	movs	r3, #128	; 0x80
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89a:	e19e      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a35      	ldr	r2, [pc, #212]	; (800c978 <UART_SetConfig+0x344>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d130      	bne.n	800c908 <UART_SetConfig+0x2d4>
 800c8a6:	4b31      	ldr	r3, [pc, #196]	; (800c96c <UART_SetConfig+0x338>)
 800c8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8aa:	f003 0307 	and.w	r3, r3, #7
 800c8ae:	2b05      	cmp	r3, #5
 800c8b0:	d826      	bhi.n	800c900 <UART_SetConfig+0x2cc>
 800c8b2:	a201      	add	r2, pc, #4	; (adr r2, 800c8b8 <UART_SetConfig+0x284>)
 800c8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b8:	0800c8d1 	.word	0x0800c8d1
 800c8bc:	0800c8d9 	.word	0x0800c8d9
 800c8c0:	0800c8e1 	.word	0x0800c8e1
 800c8c4:	0800c8e9 	.word	0x0800c8e9
 800c8c8:	0800c8f1 	.word	0x0800c8f1
 800c8cc:	0800c8f9 	.word	0x0800c8f9
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d6:	e180      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c8d8:	2304      	movs	r3, #4
 800c8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8de:	e17c      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e6:	e178      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c8e8:	2310      	movs	r3, #16
 800c8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ee:	e174      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c8f0:	2320      	movs	r3, #32
 800c8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f6:	e170      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c8f8:	2340      	movs	r3, #64	; 0x40
 800c8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fe:	e16c      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c900:	2380      	movs	r3, #128	; 0x80
 800c902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c906:	e168      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a1b      	ldr	r2, [pc, #108]	; (800c97c <UART_SetConfig+0x348>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d142      	bne.n	800c998 <UART_SetConfig+0x364>
 800c912:	4b16      	ldr	r3, [pc, #88]	; (800c96c <UART_SetConfig+0x338>)
 800c914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c916:	f003 0307 	and.w	r3, r3, #7
 800c91a:	2b05      	cmp	r3, #5
 800c91c:	d838      	bhi.n	800c990 <UART_SetConfig+0x35c>
 800c91e:	a201      	add	r2, pc, #4	; (adr r2, 800c924 <UART_SetConfig+0x2f0>)
 800c920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c924:	0800c93d 	.word	0x0800c93d
 800c928:	0800c945 	.word	0x0800c945
 800c92c:	0800c94d 	.word	0x0800c94d
 800c930:	0800c955 	.word	0x0800c955
 800c934:	0800c981 	.word	0x0800c981
 800c938:	0800c989 	.word	0x0800c989
 800c93c:	2300      	movs	r3, #0
 800c93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c942:	e14a      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c944:	2304      	movs	r3, #4
 800c946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c94a:	e146      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c94c:	2308      	movs	r3, #8
 800c94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c952:	e142      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c954:	2310      	movs	r3, #16
 800c956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c95a:	e13e      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c95c:	cfff69f3 	.word	0xcfff69f3
 800c960:	58000c00 	.word	0x58000c00
 800c964:	11fff4ff 	.word	0x11fff4ff
 800c968:	40011000 	.word	0x40011000
 800c96c:	58024400 	.word	0x58024400
 800c970:	40004400 	.word	0x40004400
 800c974:	40004800 	.word	0x40004800
 800c978:	40004c00 	.word	0x40004c00
 800c97c:	40005000 	.word	0x40005000
 800c980:	2320      	movs	r3, #32
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e128      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c988:	2340      	movs	r3, #64	; 0x40
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98e:	e124      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c990:	2380      	movs	r3, #128	; 0x80
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c996:	e120      	b.n	800cbda <UART_SetConfig+0x5a6>
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4acb      	ldr	r2, [pc, #812]	; (800cccc <UART_SetConfig+0x698>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d176      	bne.n	800ca90 <UART_SetConfig+0x45c>
 800c9a2:	4bcb      	ldr	r3, [pc, #812]	; (800ccd0 <UART_SetConfig+0x69c>)
 800c9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9aa:	2b28      	cmp	r3, #40	; 0x28
 800c9ac:	d86c      	bhi.n	800ca88 <UART_SetConfig+0x454>
 800c9ae:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <UART_SetConfig+0x380>)
 800c9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b4:	0800ca59 	.word	0x0800ca59
 800c9b8:	0800ca89 	.word	0x0800ca89
 800c9bc:	0800ca89 	.word	0x0800ca89
 800c9c0:	0800ca89 	.word	0x0800ca89
 800c9c4:	0800ca89 	.word	0x0800ca89
 800c9c8:	0800ca89 	.word	0x0800ca89
 800c9cc:	0800ca89 	.word	0x0800ca89
 800c9d0:	0800ca89 	.word	0x0800ca89
 800c9d4:	0800ca61 	.word	0x0800ca61
 800c9d8:	0800ca89 	.word	0x0800ca89
 800c9dc:	0800ca89 	.word	0x0800ca89
 800c9e0:	0800ca89 	.word	0x0800ca89
 800c9e4:	0800ca89 	.word	0x0800ca89
 800c9e8:	0800ca89 	.word	0x0800ca89
 800c9ec:	0800ca89 	.word	0x0800ca89
 800c9f0:	0800ca89 	.word	0x0800ca89
 800c9f4:	0800ca69 	.word	0x0800ca69
 800c9f8:	0800ca89 	.word	0x0800ca89
 800c9fc:	0800ca89 	.word	0x0800ca89
 800ca00:	0800ca89 	.word	0x0800ca89
 800ca04:	0800ca89 	.word	0x0800ca89
 800ca08:	0800ca89 	.word	0x0800ca89
 800ca0c:	0800ca89 	.word	0x0800ca89
 800ca10:	0800ca89 	.word	0x0800ca89
 800ca14:	0800ca71 	.word	0x0800ca71
 800ca18:	0800ca89 	.word	0x0800ca89
 800ca1c:	0800ca89 	.word	0x0800ca89
 800ca20:	0800ca89 	.word	0x0800ca89
 800ca24:	0800ca89 	.word	0x0800ca89
 800ca28:	0800ca89 	.word	0x0800ca89
 800ca2c:	0800ca89 	.word	0x0800ca89
 800ca30:	0800ca89 	.word	0x0800ca89
 800ca34:	0800ca79 	.word	0x0800ca79
 800ca38:	0800ca89 	.word	0x0800ca89
 800ca3c:	0800ca89 	.word	0x0800ca89
 800ca40:	0800ca89 	.word	0x0800ca89
 800ca44:	0800ca89 	.word	0x0800ca89
 800ca48:	0800ca89 	.word	0x0800ca89
 800ca4c:	0800ca89 	.word	0x0800ca89
 800ca50:	0800ca89 	.word	0x0800ca89
 800ca54:	0800ca81 	.word	0x0800ca81
 800ca58:	2301      	movs	r3, #1
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5e:	e0bc      	b.n	800cbda <UART_SetConfig+0x5a6>
 800ca60:	2304      	movs	r3, #4
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca66:	e0b8      	b.n	800cbda <UART_SetConfig+0x5a6>
 800ca68:	2308      	movs	r3, #8
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6e:	e0b4      	b.n	800cbda <UART_SetConfig+0x5a6>
 800ca70:	2310      	movs	r3, #16
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca76:	e0b0      	b.n	800cbda <UART_SetConfig+0x5a6>
 800ca78:	2320      	movs	r3, #32
 800ca7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7e:	e0ac      	b.n	800cbda <UART_SetConfig+0x5a6>
 800ca80:	2340      	movs	r3, #64	; 0x40
 800ca82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca86:	e0a8      	b.n	800cbda <UART_SetConfig+0x5a6>
 800ca88:	2380      	movs	r3, #128	; 0x80
 800ca8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8e:	e0a4      	b.n	800cbda <UART_SetConfig+0x5a6>
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a8f      	ldr	r2, [pc, #572]	; (800ccd4 <UART_SetConfig+0x6a0>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d130      	bne.n	800cafc <UART_SetConfig+0x4c8>
 800ca9a:	4b8d      	ldr	r3, [pc, #564]	; (800ccd0 <UART_SetConfig+0x69c>)
 800ca9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca9e:	f003 0307 	and.w	r3, r3, #7
 800caa2:	2b05      	cmp	r3, #5
 800caa4:	d826      	bhi.n	800caf4 <UART_SetConfig+0x4c0>
 800caa6:	a201      	add	r2, pc, #4	; (adr r2, 800caac <UART_SetConfig+0x478>)
 800caa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caac:	0800cac5 	.word	0x0800cac5
 800cab0:	0800cacd 	.word	0x0800cacd
 800cab4:	0800cad5 	.word	0x0800cad5
 800cab8:	0800cadd 	.word	0x0800cadd
 800cabc:	0800cae5 	.word	0x0800cae5
 800cac0:	0800caed 	.word	0x0800caed
 800cac4:	2300      	movs	r3, #0
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caca:	e086      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cacc:	2304      	movs	r3, #4
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad2:	e082      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cad4:	2308      	movs	r3, #8
 800cad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cada:	e07e      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cadc:	2310      	movs	r3, #16
 800cade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cae2:	e07a      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cae4:	2320      	movs	r3, #32
 800cae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caea:	e076      	b.n	800cbda <UART_SetConfig+0x5a6>
 800caec:	2340      	movs	r3, #64	; 0x40
 800caee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf2:	e072      	b.n	800cbda <UART_SetConfig+0x5a6>
 800caf4:	2380      	movs	r3, #128	; 0x80
 800caf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cafa:	e06e      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a75      	ldr	r2, [pc, #468]	; (800ccd8 <UART_SetConfig+0x6a4>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d130      	bne.n	800cb68 <UART_SetConfig+0x534>
 800cb06:	4b72      	ldr	r3, [pc, #456]	; (800ccd0 <UART_SetConfig+0x69c>)
 800cb08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb0a:	f003 0307 	and.w	r3, r3, #7
 800cb0e:	2b05      	cmp	r3, #5
 800cb10:	d826      	bhi.n	800cb60 <UART_SetConfig+0x52c>
 800cb12:	a201      	add	r2, pc, #4	; (adr r2, 800cb18 <UART_SetConfig+0x4e4>)
 800cb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb18:	0800cb31 	.word	0x0800cb31
 800cb1c:	0800cb39 	.word	0x0800cb39
 800cb20:	0800cb41 	.word	0x0800cb41
 800cb24:	0800cb49 	.word	0x0800cb49
 800cb28:	0800cb51 	.word	0x0800cb51
 800cb2c:	0800cb59 	.word	0x0800cb59
 800cb30:	2300      	movs	r3, #0
 800cb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb36:	e050      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cb38:	2304      	movs	r3, #4
 800cb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3e:	e04c      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cb40:	2308      	movs	r3, #8
 800cb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb46:	e048      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cb48:	2310      	movs	r3, #16
 800cb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4e:	e044      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cb50:	2320      	movs	r3, #32
 800cb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb56:	e040      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cb58:	2340      	movs	r3, #64	; 0x40
 800cb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5e:	e03c      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cb60:	2380      	movs	r3, #128	; 0x80
 800cb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb66:	e038      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a5b      	ldr	r2, [pc, #364]	; (800ccdc <UART_SetConfig+0x6a8>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d130      	bne.n	800cbd4 <UART_SetConfig+0x5a0>
 800cb72:	4b57      	ldr	r3, [pc, #348]	; (800ccd0 <UART_SetConfig+0x69c>)
 800cb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb76:	f003 0307 	and.w	r3, r3, #7
 800cb7a:	2b05      	cmp	r3, #5
 800cb7c:	d826      	bhi.n	800cbcc <UART_SetConfig+0x598>
 800cb7e:	a201      	add	r2, pc, #4	; (adr r2, 800cb84 <UART_SetConfig+0x550>)
 800cb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb84:	0800cb9d 	.word	0x0800cb9d
 800cb88:	0800cba5 	.word	0x0800cba5
 800cb8c:	0800cbad 	.word	0x0800cbad
 800cb90:	0800cbb5 	.word	0x0800cbb5
 800cb94:	0800cbbd 	.word	0x0800cbbd
 800cb98:	0800cbc5 	.word	0x0800cbc5
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba2:	e01a      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cba4:	2304      	movs	r3, #4
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbaa:	e016      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cbac:	2308      	movs	r3, #8
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb2:	e012      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cbb4:	2310      	movs	r3, #16
 800cbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbba:	e00e      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cbbc:	2320      	movs	r3, #32
 800cbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbc2:	e00a      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cbc4:	2340      	movs	r3, #64	; 0x40
 800cbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbca:	e006      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cbcc:	2380      	movs	r3, #128	; 0x80
 800cbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbd2:	e002      	b.n	800cbda <UART_SetConfig+0x5a6>
 800cbd4:	2380      	movs	r3, #128	; 0x80
 800cbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a3f      	ldr	r2, [pc, #252]	; (800ccdc <UART_SetConfig+0x6a8>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	f040 80f8 	bne.w	800cdd6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cbe6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cbea:	2b20      	cmp	r3, #32
 800cbec:	dc46      	bgt.n	800cc7c <UART_SetConfig+0x648>
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	f2c0 8082 	blt.w	800ccf8 <UART_SetConfig+0x6c4>
 800cbf4:	3b02      	subs	r3, #2
 800cbf6:	2b1e      	cmp	r3, #30
 800cbf8:	d87e      	bhi.n	800ccf8 <UART_SetConfig+0x6c4>
 800cbfa:	a201      	add	r2, pc, #4	; (adr r2, 800cc00 <UART_SetConfig+0x5cc>)
 800cbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc00:	0800cc83 	.word	0x0800cc83
 800cc04:	0800ccf9 	.word	0x0800ccf9
 800cc08:	0800cc8b 	.word	0x0800cc8b
 800cc0c:	0800ccf9 	.word	0x0800ccf9
 800cc10:	0800ccf9 	.word	0x0800ccf9
 800cc14:	0800ccf9 	.word	0x0800ccf9
 800cc18:	0800cc9b 	.word	0x0800cc9b
 800cc1c:	0800ccf9 	.word	0x0800ccf9
 800cc20:	0800ccf9 	.word	0x0800ccf9
 800cc24:	0800ccf9 	.word	0x0800ccf9
 800cc28:	0800ccf9 	.word	0x0800ccf9
 800cc2c:	0800ccf9 	.word	0x0800ccf9
 800cc30:	0800ccf9 	.word	0x0800ccf9
 800cc34:	0800ccf9 	.word	0x0800ccf9
 800cc38:	0800ccab 	.word	0x0800ccab
 800cc3c:	0800ccf9 	.word	0x0800ccf9
 800cc40:	0800ccf9 	.word	0x0800ccf9
 800cc44:	0800ccf9 	.word	0x0800ccf9
 800cc48:	0800ccf9 	.word	0x0800ccf9
 800cc4c:	0800ccf9 	.word	0x0800ccf9
 800cc50:	0800ccf9 	.word	0x0800ccf9
 800cc54:	0800ccf9 	.word	0x0800ccf9
 800cc58:	0800ccf9 	.word	0x0800ccf9
 800cc5c:	0800ccf9 	.word	0x0800ccf9
 800cc60:	0800ccf9 	.word	0x0800ccf9
 800cc64:	0800ccf9 	.word	0x0800ccf9
 800cc68:	0800ccf9 	.word	0x0800ccf9
 800cc6c:	0800ccf9 	.word	0x0800ccf9
 800cc70:	0800ccf9 	.word	0x0800ccf9
 800cc74:	0800ccf9 	.word	0x0800ccf9
 800cc78:	0800cceb 	.word	0x0800cceb
 800cc7c:	2b40      	cmp	r3, #64	; 0x40
 800cc7e:	d037      	beq.n	800ccf0 <UART_SetConfig+0x6bc>
 800cc80:	e03a      	b.n	800ccf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cc82:	f7fc fc17 	bl	80094b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cc88:	e03c      	b.n	800cd04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fc fc26 	bl	80094e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc98:	e034      	b.n	800cd04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc9a:	f107 0318 	add.w	r3, r7, #24
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fc fd72 	bl	8009788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca8:	e02c      	b.n	800cd04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccaa:	4b09      	ldr	r3, [pc, #36]	; (800ccd0 <UART_SetConfig+0x69c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 0320 	and.w	r3, r3, #32
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d016      	beq.n	800cce4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ccb6:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <UART_SetConfig+0x69c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	08db      	lsrs	r3, r3, #3
 800ccbc:	f003 0303 	and.w	r3, r3, #3
 800ccc0:	4a07      	ldr	r2, [pc, #28]	; (800cce0 <UART_SetConfig+0x6ac>)
 800ccc2:	fa22 f303 	lsr.w	r3, r2, r3
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ccc8:	e01c      	b.n	800cd04 <UART_SetConfig+0x6d0>
 800ccca:	bf00      	nop
 800cccc:	40011400 	.word	0x40011400
 800ccd0:	58024400 	.word	0x58024400
 800ccd4:	40007800 	.word	0x40007800
 800ccd8:	40007c00 	.word	0x40007c00
 800ccdc:	58000c00 	.word	0x58000c00
 800cce0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cce4:	4b9d      	ldr	r3, [pc, #628]	; (800cf5c <UART_SetConfig+0x928>)
 800cce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce8:	e00c      	b.n	800cd04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ccea:	4b9d      	ldr	r3, [pc, #628]	; (800cf60 <UART_SetConfig+0x92c>)
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccee:	e009      	b.n	800cd04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf6:	e005      	b.n	800cd04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f000 81de 	beq.w	800d0c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	4a94      	ldr	r2, [pc, #592]	; (800cf64 <UART_SetConfig+0x930>)
 800cd12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd16:	461a      	mov	r2, r3
 800cd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd1e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	685a      	ldr	r2, [r3, #4]
 800cd24:	4613      	mov	r3, r2
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	4413      	add	r3, r2
 800cd2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d305      	bcc.n	800cd3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d903      	bls.n	800cd44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cd42:	e1c1      	b.n	800d0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd46:	2200      	movs	r2, #0
 800cd48:	60bb      	str	r3, [r7, #8]
 800cd4a:	60fa      	str	r2, [r7, #12]
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd50:	4a84      	ldr	r2, [pc, #528]	; (800cf64 <UART_SetConfig+0x930>)
 800cd52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	2200      	movs	r2, #0
 800cd5a:	603b      	str	r3, [r7, #0]
 800cd5c:	607a      	str	r2, [r7, #4]
 800cd5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cd66:	f7f3 fccf 	bl	8000708 <__aeabi_uldivmod>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4610      	mov	r0, r2
 800cd70:	4619      	mov	r1, r3
 800cd72:	f04f 0200 	mov.w	r2, #0
 800cd76:	f04f 0300 	mov.w	r3, #0
 800cd7a:	020b      	lsls	r3, r1, #8
 800cd7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cd80:	0202      	lsls	r2, r0, #8
 800cd82:	6979      	ldr	r1, [r7, #20]
 800cd84:	6849      	ldr	r1, [r1, #4]
 800cd86:	0849      	lsrs	r1, r1, #1
 800cd88:	2000      	movs	r0, #0
 800cd8a:	460c      	mov	r4, r1
 800cd8c:	4605      	mov	r5, r0
 800cd8e:	eb12 0804 	adds.w	r8, r2, r4
 800cd92:	eb43 0905 	adc.w	r9, r3, r5
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	469a      	mov	sl, r3
 800cd9e:	4693      	mov	fp, r2
 800cda0:	4652      	mov	r2, sl
 800cda2:	465b      	mov	r3, fp
 800cda4:	4640      	mov	r0, r8
 800cda6:	4649      	mov	r1, r9
 800cda8:	f7f3 fcae 	bl	8000708 <__aeabi_uldivmod>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdba:	d308      	bcc.n	800cdce <UART_SetConfig+0x79a>
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdc2:	d204      	bcs.n	800cdce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdca:	60da      	str	r2, [r3, #12]
 800cdcc:	e17c      	b.n	800d0c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cdd4:	e178      	b.n	800d0c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	69db      	ldr	r3, [r3, #28]
 800cdda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdde:	f040 80c5 	bne.w	800cf6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cde2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cde6:	2b20      	cmp	r3, #32
 800cde8:	dc48      	bgt.n	800ce7c <UART_SetConfig+0x848>
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	db7b      	blt.n	800cee6 <UART_SetConfig+0x8b2>
 800cdee:	2b20      	cmp	r3, #32
 800cdf0:	d879      	bhi.n	800cee6 <UART_SetConfig+0x8b2>
 800cdf2:	a201      	add	r2, pc, #4	; (adr r2, 800cdf8 <UART_SetConfig+0x7c4>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce83 	.word	0x0800ce83
 800cdfc:	0800ce8b 	.word	0x0800ce8b
 800ce00:	0800cee7 	.word	0x0800cee7
 800ce04:	0800cee7 	.word	0x0800cee7
 800ce08:	0800ce93 	.word	0x0800ce93
 800ce0c:	0800cee7 	.word	0x0800cee7
 800ce10:	0800cee7 	.word	0x0800cee7
 800ce14:	0800cee7 	.word	0x0800cee7
 800ce18:	0800cea3 	.word	0x0800cea3
 800ce1c:	0800cee7 	.word	0x0800cee7
 800ce20:	0800cee7 	.word	0x0800cee7
 800ce24:	0800cee7 	.word	0x0800cee7
 800ce28:	0800cee7 	.word	0x0800cee7
 800ce2c:	0800cee7 	.word	0x0800cee7
 800ce30:	0800cee7 	.word	0x0800cee7
 800ce34:	0800cee7 	.word	0x0800cee7
 800ce38:	0800ceb3 	.word	0x0800ceb3
 800ce3c:	0800cee7 	.word	0x0800cee7
 800ce40:	0800cee7 	.word	0x0800cee7
 800ce44:	0800cee7 	.word	0x0800cee7
 800ce48:	0800cee7 	.word	0x0800cee7
 800ce4c:	0800cee7 	.word	0x0800cee7
 800ce50:	0800cee7 	.word	0x0800cee7
 800ce54:	0800cee7 	.word	0x0800cee7
 800ce58:	0800cee7 	.word	0x0800cee7
 800ce5c:	0800cee7 	.word	0x0800cee7
 800ce60:	0800cee7 	.word	0x0800cee7
 800ce64:	0800cee7 	.word	0x0800cee7
 800ce68:	0800cee7 	.word	0x0800cee7
 800ce6c:	0800cee7 	.word	0x0800cee7
 800ce70:	0800cee7 	.word	0x0800cee7
 800ce74:	0800cee7 	.word	0x0800cee7
 800ce78:	0800ced9 	.word	0x0800ced9
 800ce7c:	2b40      	cmp	r3, #64	; 0x40
 800ce7e:	d02e      	beq.n	800cede <UART_SetConfig+0x8aa>
 800ce80:	e031      	b.n	800cee6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce82:	f7fb fba5 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800ce86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce88:	e033      	b.n	800cef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce8a:	f7fb fbb7 	bl	80085fc <HAL_RCC_GetPCLK2Freq>
 800ce8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce90:	e02f      	b.n	800cef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fc fb22 	bl	80094e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea0:	e027      	b.n	800cef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea2:	f107 0318 	add.w	r3, r7, #24
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fc fc6e 	bl	8009788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb0:	e01f      	b.n	800cef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceb2:	4b2d      	ldr	r3, [pc, #180]	; (800cf68 <UART_SetConfig+0x934>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0320 	and.w	r3, r3, #32
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d009      	beq.n	800ced2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cebe:	4b2a      	ldr	r3, [pc, #168]	; (800cf68 <UART_SetConfig+0x934>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	08db      	lsrs	r3, r3, #3
 800cec4:	f003 0303 	and.w	r3, r3, #3
 800cec8:	4a24      	ldr	r2, [pc, #144]	; (800cf5c <UART_SetConfig+0x928>)
 800ceca:	fa22 f303 	lsr.w	r3, r2, r3
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ced0:	e00f      	b.n	800cef2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ced2:	4b22      	ldr	r3, [pc, #136]	; (800cf5c <UART_SetConfig+0x928>)
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced6:	e00c      	b.n	800cef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ced8:	4b21      	ldr	r3, [pc, #132]	; (800cf60 <UART_SetConfig+0x92c>)
 800ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cedc:	e009      	b.n	800cef2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee4:	e005      	b.n	800cef2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 80e7 	beq.w	800d0c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefe:	4a19      	ldr	r2, [pc, #100]	; (800cf64 <UART_SetConfig+0x930>)
 800cf00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf04:	461a      	mov	r2, r3
 800cf06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf08:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf0c:	005a      	lsls	r2, r3, #1
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	085b      	lsrs	r3, r3, #1
 800cf14:	441a      	add	r2, r3
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	2b0f      	cmp	r3, #15
 800cf24:	d916      	bls.n	800cf54 <UART_SetConfig+0x920>
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf2c:	d212      	bcs.n	800cf54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	f023 030f 	bic.w	r3, r3, #15
 800cf36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	f003 0307 	and.w	r3, r3, #7
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf46:	4313      	orrs	r3, r2
 800cf48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cf50:	60da      	str	r2, [r3, #12]
 800cf52:	e0b9      	b.n	800d0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf5a:	e0b5      	b.n	800d0c8 <UART_SetConfig+0xa94>
 800cf5c:	03d09000 	.word	0x03d09000
 800cf60:	003d0900 	.word	0x003d0900
 800cf64:	08011978 	.word	0x08011978
 800cf68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf70:	2b20      	cmp	r3, #32
 800cf72:	dc49      	bgt.n	800d008 <UART_SetConfig+0x9d4>
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	db7c      	blt.n	800d072 <UART_SetConfig+0xa3e>
 800cf78:	2b20      	cmp	r3, #32
 800cf7a:	d87a      	bhi.n	800d072 <UART_SetConfig+0xa3e>
 800cf7c:	a201      	add	r2, pc, #4	; (adr r2, 800cf84 <UART_SetConfig+0x950>)
 800cf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf82:	bf00      	nop
 800cf84:	0800d00f 	.word	0x0800d00f
 800cf88:	0800d017 	.word	0x0800d017
 800cf8c:	0800d073 	.word	0x0800d073
 800cf90:	0800d073 	.word	0x0800d073
 800cf94:	0800d01f 	.word	0x0800d01f
 800cf98:	0800d073 	.word	0x0800d073
 800cf9c:	0800d073 	.word	0x0800d073
 800cfa0:	0800d073 	.word	0x0800d073
 800cfa4:	0800d02f 	.word	0x0800d02f
 800cfa8:	0800d073 	.word	0x0800d073
 800cfac:	0800d073 	.word	0x0800d073
 800cfb0:	0800d073 	.word	0x0800d073
 800cfb4:	0800d073 	.word	0x0800d073
 800cfb8:	0800d073 	.word	0x0800d073
 800cfbc:	0800d073 	.word	0x0800d073
 800cfc0:	0800d073 	.word	0x0800d073
 800cfc4:	0800d03f 	.word	0x0800d03f
 800cfc8:	0800d073 	.word	0x0800d073
 800cfcc:	0800d073 	.word	0x0800d073
 800cfd0:	0800d073 	.word	0x0800d073
 800cfd4:	0800d073 	.word	0x0800d073
 800cfd8:	0800d073 	.word	0x0800d073
 800cfdc:	0800d073 	.word	0x0800d073
 800cfe0:	0800d073 	.word	0x0800d073
 800cfe4:	0800d073 	.word	0x0800d073
 800cfe8:	0800d073 	.word	0x0800d073
 800cfec:	0800d073 	.word	0x0800d073
 800cff0:	0800d073 	.word	0x0800d073
 800cff4:	0800d073 	.word	0x0800d073
 800cff8:	0800d073 	.word	0x0800d073
 800cffc:	0800d073 	.word	0x0800d073
 800d000:	0800d073 	.word	0x0800d073
 800d004:	0800d065 	.word	0x0800d065
 800d008:	2b40      	cmp	r3, #64	; 0x40
 800d00a:	d02e      	beq.n	800d06a <UART_SetConfig+0xa36>
 800d00c:	e031      	b.n	800d072 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d00e:	f7fb fadf 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800d012:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d014:	e033      	b.n	800d07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d016:	f7fb faf1 	bl	80085fc <HAL_RCC_GetPCLK2Freq>
 800d01a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d01c:	e02f      	b.n	800d07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d01e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d022:	4618      	mov	r0, r3
 800d024:	f7fc fa5c 	bl	80094e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d02c:	e027      	b.n	800d07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d02e:	f107 0318 	add.w	r3, r7, #24
 800d032:	4618      	mov	r0, r3
 800d034:	f7fc fba8 	bl	8009788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d03c:	e01f      	b.n	800d07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d03e:	4b2d      	ldr	r3, [pc, #180]	; (800d0f4 <UART_SetConfig+0xac0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0320 	and.w	r3, r3, #32
 800d046:	2b00      	cmp	r3, #0
 800d048:	d009      	beq.n	800d05e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d04a:	4b2a      	ldr	r3, [pc, #168]	; (800d0f4 <UART_SetConfig+0xac0>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	08db      	lsrs	r3, r3, #3
 800d050:	f003 0303 	and.w	r3, r3, #3
 800d054:	4a28      	ldr	r2, [pc, #160]	; (800d0f8 <UART_SetConfig+0xac4>)
 800d056:	fa22 f303 	lsr.w	r3, r2, r3
 800d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d05c:	e00f      	b.n	800d07e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d05e:	4b26      	ldr	r3, [pc, #152]	; (800d0f8 <UART_SetConfig+0xac4>)
 800d060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d062:	e00c      	b.n	800d07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d064:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <UART_SetConfig+0xac8>)
 800d066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d068:	e009      	b.n	800d07e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d06a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d070:	e005      	b.n	800d07e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d072:	2300      	movs	r3, #0
 800d074:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d07c:	bf00      	nop
    }

    if (pclk != 0U)
 800d07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d080:	2b00      	cmp	r3, #0
 800d082:	d021      	beq.n	800d0c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d088:	4a1d      	ldr	r2, [pc, #116]	; (800d100 <UART_SetConfig+0xacc>)
 800d08a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d08e:	461a      	mov	r2, r3
 800d090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d092:	fbb3 f2f2 	udiv	r2, r3, r2
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	085b      	lsrs	r3, r3, #1
 800d09c:	441a      	add	r2, r3
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0aa:	2b0f      	cmp	r3, #15
 800d0ac:	d909      	bls.n	800d0c2 <UART_SetConfig+0xa8e>
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0b4:	d205      	bcs.n	800d0c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	60da      	str	r2, [r3, #12]
 800d0c0:	e002      	b.n	800d0c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d0e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3748      	adds	r7, #72	; 0x48
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0f2:	bf00      	nop
 800d0f4:	58024400 	.word	0x58024400
 800d0f8:	03d09000 	.word	0x03d09000
 800d0fc:	003d0900 	.word	0x003d0900
 800d100:	08011978 	.word	0x08011978

0800d104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00a      	beq.n	800d12e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	430a      	orrs	r2, r1
 800d12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d132:	f003 0302 	and.w	r3, r3, #2
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00a      	beq.n	800d150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	430a      	orrs	r2, r1
 800d14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d154:	f003 0304 	and.w	r3, r3, #4
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	430a      	orrs	r2, r1
 800d170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d176:	f003 0308 	and.w	r3, r3, #8
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00a      	beq.n	800d194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	430a      	orrs	r2, r1
 800d192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d198:	f003 0310 	and.w	r3, r3, #16
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00a      	beq.n	800d1b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	430a      	orrs	r2, r1
 800d1b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ba:	f003 0320 	and.w	r3, r3, #32
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00a      	beq.n	800d1d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01a      	beq.n	800d21a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d202:	d10a      	bne.n	800d21a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	430a      	orrs	r2, r1
 800d218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00a      	beq.n	800d23c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	430a      	orrs	r2, r1
 800d23a:	605a      	str	r2, [r3, #4]
  }
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af02      	add	r7, sp, #8
 800d24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d258:	f7f9 f914 	bl	8006484 <HAL_GetTick>
 800d25c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 0308 	and.w	r3, r3, #8
 800d268:	2b08      	cmp	r3, #8
 800d26a:	d10e      	bne.n	800d28a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d26c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f82f 	bl	800d2de <UART_WaitOnFlagUntilTimeout>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d286:	2303      	movs	r3, #3
 800d288:	e025      	b.n	800d2d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b04      	cmp	r3, #4
 800d296:	d10e      	bne.n	800d2b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f819 	bl	800d2de <UART_WaitOnFlagUntilTimeout>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2b2:	2303      	movs	r3, #3
 800d2b4:	e00f      	b.n	800d2d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2220      	movs	r2, #32
 800d2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2220      	movs	r2, #32
 800d2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b09c      	sub	sp, #112	; 0x70
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	60b9      	str	r1, [r7, #8]
 800d2e8:	603b      	str	r3, [r7, #0]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2ee:	e0a9      	b.n	800d444 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f6:	f000 80a5 	beq.w	800d444 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2fa:	f7f9 f8c3 	bl	8006484 <HAL_GetTick>
 800d2fe:	4602      	mov	r2, r0
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d306:	429a      	cmp	r2, r3
 800d308:	d302      	bcc.n	800d310 <UART_WaitOnFlagUntilTimeout+0x32>
 800d30a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d140      	bne.n	800d392 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d318:	e853 3f00 	ldrex	r3, [r3]
 800d31c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d324:	667b      	str	r3, [r7, #100]	; 0x64
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d32e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d330:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d336:	e841 2300 	strex	r3, r2, [r1]
 800d33a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d33c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1e6      	bne.n	800d310 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3308      	adds	r3, #8
 800d348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34c:	e853 3f00 	ldrex	r3, [r3]
 800d350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d354:	f023 0301 	bic.w	r3, r3, #1
 800d358:	663b      	str	r3, [r7, #96]	; 0x60
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3308      	adds	r3, #8
 800d360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d362:	64ba      	str	r2, [r7, #72]	; 0x48
 800d364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d36a:	e841 2300 	strex	r3, r2, [r1]
 800d36e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1e5      	bne.n	800d342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2220      	movs	r2, #32
 800d37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2220      	movs	r2, #32
 800d382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d38e:	2303      	movs	r3, #3
 800d390:	e069      	b.n	800d466 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 0304 	and.w	r3, r3, #4
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d051      	beq.n	800d444 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3ae:	d149      	bne.n	800d444 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	e853 3f00 	ldrex	r3, [r3]
 800d3c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d3ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d3da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3e0:	e841 2300 	strex	r3, r2, [r1]
 800d3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e6      	bne.n	800d3ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	e853 3f00 	ldrex	r3, [r3]
 800d3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	f023 0301 	bic.w	r3, r3, #1
 800d402:	66bb      	str	r3, [r7, #104]	; 0x68
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3308      	adds	r3, #8
 800d40a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d40c:	623a      	str	r2, [r7, #32]
 800d40e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d410:	69f9      	ldr	r1, [r7, #28]
 800d412:	6a3a      	ldr	r2, [r7, #32]
 800d414:	e841 2300 	strex	r3, r2, [r1]
 800d418:	61bb      	str	r3, [r7, #24]
   return(result);
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1e5      	bne.n	800d3ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2220      	movs	r2, #32
 800d424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2220      	movs	r2, #32
 800d42c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2220      	movs	r2, #32
 800d434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d440:	2303      	movs	r3, #3
 800d442:	e010      	b.n	800d466 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	69da      	ldr	r2, [r3, #28]
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	4013      	ands	r3, r2
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	429a      	cmp	r2, r3
 800d452:	bf0c      	ite	eq
 800d454:	2301      	moveq	r3, #1
 800d456:	2300      	movne	r3, #0
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	461a      	mov	r2, r3
 800d45c:	79fb      	ldrb	r3, [r7, #7]
 800d45e:	429a      	cmp	r2, r3
 800d460:	f43f af46 	beq.w	800d2f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3770      	adds	r7, #112	; 0x70
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
	...

0800d470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d470:	b480      	push	{r7}
 800d472:	b0a3      	sub	sp, #140	; 0x8c
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4613      	mov	r3, r2
 800d47c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	88fa      	ldrh	r2, [r7, #6]
 800d488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	88fa      	ldrh	r2, [r7, #6]
 800d490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2200      	movs	r2, #0
 800d498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4a2:	d10e      	bne.n	800d4c2 <UART_Start_Receive_IT+0x52>
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	691b      	ldr	r3, [r3, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d105      	bne.n	800d4b8 <UART_Start_Receive_IT+0x48>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d4b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4b6:	e02d      	b.n	800d514 <UART_Start_Receive_IT+0xa4>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	22ff      	movs	r2, #255	; 0xff
 800d4bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4c0:	e028      	b.n	800d514 <UART_Start_Receive_IT+0xa4>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10d      	bne.n	800d4e6 <UART_Start_Receive_IT+0x76>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	691b      	ldr	r3, [r3, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d104      	bne.n	800d4dc <UART_Start_Receive_IT+0x6c>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	22ff      	movs	r2, #255	; 0xff
 800d4d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4da:	e01b      	b.n	800d514 <UART_Start_Receive_IT+0xa4>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	227f      	movs	r2, #127	; 0x7f
 800d4e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4e4:	e016      	b.n	800d514 <UART_Start_Receive_IT+0xa4>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4ee:	d10d      	bne.n	800d50c <UART_Start_Receive_IT+0x9c>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <UART_Start_Receive_IT+0x92>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	227f      	movs	r2, #127	; 0x7f
 800d4fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d500:	e008      	b.n	800d514 <UART_Start_Receive_IT+0xa4>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	223f      	movs	r2, #63	; 0x3f
 800d506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d50a:	e003      	b.n	800d514 <UART_Start_Receive_IT+0xa4>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2222      	movs	r2, #34	; 0x22
 800d520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3308      	adds	r3, #8
 800d52a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d52e:	e853 3f00 	ldrex	r3, [r3]
 800d532:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d536:	f043 0301 	orr.w	r3, r3, #1
 800d53a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3308      	adds	r3, #8
 800d544:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d548:	673a      	str	r2, [r7, #112]	; 0x70
 800d54a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d54e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d550:	e841 2300 	strex	r3, r2, [r1]
 800d554:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1e3      	bne.n	800d524 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d564:	d153      	bne.n	800d60e <UART_Start_Receive_IT+0x19e>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d56c:	88fa      	ldrh	r2, [r7, #6]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d34d      	bcc.n	800d60e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d57a:	d107      	bne.n	800d58c <UART_Start_Receive_IT+0x11c>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	691b      	ldr	r3, [r3, #16]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d103      	bne.n	800d58c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	4a4b      	ldr	r2, [pc, #300]	; (800d6b4 <UART_Start_Receive_IT+0x244>)
 800d588:	671a      	str	r2, [r3, #112]	; 0x70
 800d58a:	e002      	b.n	800d592 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4a4a      	ldr	r2, [pc, #296]	; (800d6b8 <UART_Start_Receive_IT+0x248>)
 800d590:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d01a      	beq.n	800d5d8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5aa:	e853 3f00 	ldrex	r3, [r3]
 800d5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5cc:	e841 2300 	strex	r3, r2, [r1]
 800d5d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1e4      	bne.n	800d5a2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3308      	adds	r3, #8
 800d5de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e2:	e853 3f00 	ldrex	r3, [r3]
 800d5e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3308      	adds	r3, #8
 800d5f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d5f8:	64ba      	str	r2, [r7, #72]	; 0x48
 800d5fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d600:	e841 2300 	strex	r3, r2, [r1]
 800d604:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1e5      	bne.n	800d5d8 <UART_Start_Receive_IT+0x168>
 800d60c:	e04a      	b.n	800d6a4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d616:	d107      	bne.n	800d628 <UART_Start_Receive_IT+0x1b8>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d103      	bne.n	800d628 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	4a26      	ldr	r2, [pc, #152]	; (800d6bc <UART_Start_Receive_IT+0x24c>)
 800d624:	671a      	str	r2, [r3, #112]	; 0x70
 800d626:	e002      	b.n	800d62e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4a25      	ldr	r2, [pc, #148]	; (800d6c0 <UART_Start_Receive_IT+0x250>)
 800d62c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d019      	beq.n	800d672 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d646:	e853 3f00 	ldrex	r3, [r3]
 800d64a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d652:	677b      	str	r3, [r7, #116]	; 0x74
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	461a      	mov	r2, r3
 800d65a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d65c:	637b      	str	r3, [r7, #52]	; 0x34
 800d65e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d664:	e841 2300 	strex	r3, r2, [r1]
 800d668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1e6      	bne.n	800d63e <UART_Start_Receive_IT+0x1ce>
 800d670:	e018      	b.n	800d6a4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	613b      	str	r3, [r7, #16]
   return(result);
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f043 0320 	orr.w	r3, r3, #32
 800d686:	67bb      	str	r3, [r7, #120]	; 0x78
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d690:	623b      	str	r3, [r7, #32]
 800d692:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d694:	69f9      	ldr	r1, [r7, #28]
 800d696:	6a3a      	ldr	r2, [r7, #32]
 800d698:	e841 2300 	strex	r3, r2, [r1]
 800d69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e6      	bne.n	800d672 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	378c      	adds	r7, #140	; 0x8c
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	0800ddcd 	.word	0x0800ddcd
 800d6b8:	0800dad5 	.word	0x0800dad5
 800d6bc:	0800d973 	.word	0x0800d973
 800d6c0:	0800d813 	.word	0x0800d813

0800d6c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b095      	sub	sp, #84	; 0x54
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d4:	e853 3f00 	ldrex	r3, [r3]
 800d6d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6ea:	643b      	str	r3, [r7, #64]	; 0x40
 800d6ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d6f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6f2:	e841 2300 	strex	r3, r2, [r1]
 800d6f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1e6      	bne.n	800d6cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3308      	adds	r3, #8
 800d704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d706:	6a3b      	ldr	r3, [r7, #32]
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d70e:	69fa      	ldr	r2, [r7, #28]
 800d710:	4b1e      	ldr	r3, [pc, #120]	; (800d78c <UART_EndRxTransfer+0xc8>)
 800d712:	4013      	ands	r3, r2
 800d714:	64bb      	str	r3, [r7, #72]	; 0x48
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3308      	adds	r3, #8
 800d71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d71e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d726:	e841 2300 	strex	r3, r2, [r1]
 800d72a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1e5      	bne.n	800d6fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d736:	2b01      	cmp	r3, #1
 800d738:	d118      	bne.n	800d76c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	e853 3f00 	ldrex	r3, [r3]
 800d746:	60bb      	str	r3, [r7, #8]
   return(result);
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f023 0310 	bic.w	r3, r3, #16
 800d74e:	647b      	str	r3, [r7, #68]	; 0x44
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	461a      	mov	r2, r3
 800d756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d758:	61bb      	str	r3, [r7, #24]
 800d75a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d75c:	6979      	ldr	r1, [r7, #20]
 800d75e:	69ba      	ldr	r2, [r7, #24]
 800d760:	e841 2300 	strex	r3, r2, [r1]
 800d764:	613b      	str	r3, [r7, #16]
   return(result);
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1e6      	bne.n	800d73a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2220      	movs	r2, #32
 800d770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d780:	bf00      	nop
 800d782:	3754      	adds	r7, #84	; 0x54
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr
 800d78c:	effffffe 	.word	0xeffffffe

0800d790 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f7fe ff2a 	bl	800c608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7b4:	bf00      	nop
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	e853 3f00 	ldrex	r3, [r3]
 800d7d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7d8:	61fb      	str	r3, [r7, #28]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	61bb      	str	r3, [r7, #24]
 800d7e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e6:	6979      	ldr	r1, [r7, #20]
 800d7e8:	69ba      	ldr	r2, [r7, #24]
 800d7ea:	e841 2300 	strex	r3, r2, [r1]
 800d7ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e6      	bne.n	800d7c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2200      	movs	r2, #0
 800d802:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7f5 fe73 	bl	80034f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d80a:	bf00      	nop
 800d80c:	3720      	adds	r7, #32
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b096      	sub	sp, #88	; 0x58
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d820:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d82a:	2b22      	cmp	r3, #34	; 0x22
 800d82c:	f040 8095 	bne.w	800d95a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d83a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d83e:	b2d9      	uxtb	r1, r3
 800d840:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d844:	b2da      	uxtb	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d84a:	400a      	ands	r2, r1
 800d84c:	b2d2      	uxtb	r2, r2
 800d84e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d860:	b29b      	uxth	r3, r3
 800d862:	3b01      	subs	r3, #1
 800d864:	b29a      	uxth	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d872:	b29b      	uxth	r3, r3
 800d874:	2b00      	cmp	r3, #0
 800d876:	d178      	bne.n	800d96a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	e853 3f00 	ldrex	r3, [r3]
 800d884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d88c:	653b      	str	r3, [r7, #80]	; 0x50
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d896:	647b      	str	r3, [r7, #68]	; 0x44
 800d898:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d89c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e6      	bne.n	800d878 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	e853 3f00 	ldrex	r3, [r3]
 800d8b8:	623b      	str	r3, [r7, #32]
   return(result);
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	f023 0301 	bic.w	r3, r3, #1
 800d8c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	3308      	adds	r3, #8
 800d8c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d8ca:	633a      	str	r2, [r7, #48]	; 0x30
 800d8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8d2:	e841 2300 	strex	r3, r2, [r1]
 800d8d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1e5      	bne.n	800d8aa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2220      	movs	r2, #32
 800d8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d12e      	bne.n	800d952 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	e853 3f00 	ldrex	r3, [r3]
 800d906:	60fb      	str	r3, [r7, #12]
   return(result);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f023 0310 	bic.w	r3, r3, #16
 800d90e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d918:	61fb      	str	r3, [r7, #28]
 800d91a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	69b9      	ldr	r1, [r7, #24]
 800d91e:	69fa      	ldr	r2, [r7, #28]
 800d920:	e841 2300 	strex	r3, r2, [r1]
 800d924:	617b      	str	r3, [r7, #20]
   return(result);
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e6      	bne.n	800d8fa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	69db      	ldr	r3, [r3, #28]
 800d932:	f003 0310 	and.w	r3, r3, #16
 800d936:	2b10      	cmp	r3, #16
 800d938:	d103      	bne.n	800d942 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2210      	movs	r2, #16
 800d940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d948:	4619      	mov	r1, r3
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f7fe fe66 	bl	800c61c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d950:	e00b      	b.n	800d96a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7f5 fd58 	bl	8003408 <HAL_UART_RxCpltCallback>
}
 800d958:	e007      	b.n	800d96a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	699a      	ldr	r2, [r3, #24]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f042 0208 	orr.w	r2, r2, #8
 800d968:	619a      	str	r2, [r3, #24]
}
 800d96a:	bf00      	nop
 800d96c:	3758      	adds	r7, #88	; 0x58
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b096      	sub	sp, #88	; 0x58
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d980:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d98a:	2b22      	cmp	r3, #34	; 0x22
 800d98c:	f040 8095 	bne.w	800daba <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d996:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d99e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d9a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d9a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9b4:	1c9a      	adds	r2, r3, #2
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d178      	bne.n	800daca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e0:	e853 3f00 	ldrex	r3, [r3]
 800d9e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d9f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9fe:	e841 2300 	strex	r3, r2, [r1]
 800da02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1e6      	bne.n	800d9d8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	3308      	adds	r3, #8
 800da10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	e853 3f00 	ldrex	r3, [r3]
 800da18:	61fb      	str	r3, [r7, #28]
   return(result);
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	f023 0301 	bic.w	r3, r3, #1
 800da20:	64bb      	str	r3, [r7, #72]	; 0x48
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	3308      	adds	r3, #8
 800da28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da32:	e841 2300 	strex	r3, r2, [r1]
 800da36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1e5      	bne.n	800da0a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2220      	movs	r2, #32
 800da42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da50:	2b01      	cmp	r3, #1
 800da52:	d12e      	bne.n	800dab2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	e853 3f00 	ldrex	r3, [r3]
 800da66:	60bb      	str	r3, [r7, #8]
   return(result);
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	f023 0310 	bic.w	r3, r3, #16
 800da6e:	647b      	str	r3, [r7, #68]	; 0x44
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da78:	61bb      	str	r3, [r7, #24]
 800da7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7c:	6979      	ldr	r1, [r7, #20]
 800da7e:	69ba      	ldr	r2, [r7, #24]
 800da80:	e841 2300 	strex	r3, r2, [r1]
 800da84:	613b      	str	r3, [r7, #16]
   return(result);
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e6      	bne.n	800da5a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	69db      	ldr	r3, [r3, #28]
 800da92:	f003 0310 	and.w	r3, r3, #16
 800da96:	2b10      	cmp	r3, #16
 800da98:	d103      	bne.n	800daa2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2210      	movs	r2, #16
 800daa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7fe fdb6 	bl	800c61c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dab0:	e00b      	b.n	800daca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7f5 fca8 	bl	8003408 <HAL_UART_RxCpltCallback>
}
 800dab8:	e007      	b.n	800daca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	699a      	ldr	r2, [r3, #24]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f042 0208 	orr.w	r2, r2, #8
 800dac8:	619a      	str	r2, [r3, #24]
}
 800daca:	bf00      	nop
 800dacc:	3758      	adds	r7, #88	; 0x58
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b0a6      	sub	sp, #152	; 0x98
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dae2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	69db      	ldr	r3, [r3, #28]
 800daec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db0a:	2b22      	cmp	r3, #34	; 0x22
 800db0c:	f040 814d 	bne.w	800ddaa <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db1a:	e0f4      	b.n	800dd06 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db22:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800db26:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800db2a:	b2d9      	uxtb	r1, r3
 800db2c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800db30:	b2da      	uxtb	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db36:	400a      	ands	r2, r1
 800db38:	b2d2      	uxtb	r2, r2
 800db3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db40:	1c5a      	adds	r2, r3, #1
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	3b01      	subs	r3, #1
 800db50:	b29a      	uxth	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	69db      	ldr	r3, [r3, #28]
 800db5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800db62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db66:	f003 0307 	and.w	r3, r3, #7
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d053      	beq.n	800dc16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d011      	beq.n	800db9e <UART_RxISR_8BIT_FIFOEN+0xca>
 800db7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00b      	beq.n	800db9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2201      	movs	r2, #1
 800db8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db94:	f043 0201 	orr.w	r2, r3, #1
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dba2:	f003 0302 	and.w	r3, r3, #2
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d011      	beq.n	800dbce <UART_RxISR_8BIT_FIFOEN+0xfa>
 800dbaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbae:	f003 0301 	and.w	r3, r3, #1
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00b      	beq.n	800dbce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2202      	movs	r2, #2
 800dbbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbc4:	f043 0204 	orr.w	r2, r3, #4
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbd2:	f003 0304 	and.w	r3, r3, #4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d011      	beq.n	800dbfe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800dbda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00b      	beq.n	800dbfe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2204      	movs	r2, #4
 800dbec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbf4:	f043 0202 	orr.w	r2, r3, #2
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d006      	beq.n	800dc16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7fe fcfd 	bl	800c608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d171      	bne.n	800dd06 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc2a:	e853 3f00 	ldrex	r3, [r3]
 800dc2e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800dc30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	461a      	mov	r2, r3
 800dc40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc44:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc46:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dc4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc4c:	e841 2300 	strex	r3, r2, [r1]
 800dc50:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800dc52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1e4      	bne.n	800dc22 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	3308      	adds	r3, #8
 800dc5e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc62:	e853 3f00 	ldrex	r3, [r3]
 800dc66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dc68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc6a:	4b56      	ldr	r3, [pc, #344]	; (800ddc4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	3308      	adds	r3, #8
 800dc76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dc78:	657a      	str	r2, [r7, #84]	; 0x54
 800dc7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc80:	e841 2300 	strex	r3, r2, [r1]
 800dc84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dc86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1e5      	bne.n	800dc58 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2220      	movs	r2, #32
 800dc90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d12e      	bne.n	800dd00 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb0:	e853 3f00 	ldrex	r3, [r3]
 800dcb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	f023 0310 	bic.w	r3, r3, #16
 800dcbc:	67bb      	str	r3, [r7, #120]	; 0x78
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcc6:	643b      	str	r3, [r7, #64]	; 0x40
 800dcc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcce:	e841 2300 	strex	r3, r2, [r1]
 800dcd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1e6      	bne.n	800dca8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	69db      	ldr	r3, [r3, #28]
 800dce0:	f003 0310 	and.w	r3, r3, #16
 800dce4:	2b10      	cmp	r3, #16
 800dce6:	d103      	bne.n	800dcf0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2210      	movs	r2, #16
 800dcee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7fe fc8f 	bl	800c61c <HAL_UARTEx_RxEventCallback>
 800dcfe:	e002      	b.n	800dd06 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7f5 fb81 	bl	8003408 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d006      	beq.n	800dd1c <UART_RxISR_8BIT_FIFOEN+0x248>
 800dd0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd12:	f003 0320 	and.w	r3, r3, #32
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f47f af00 	bne.w	800db1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dd26:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d045      	beq.n	800ddba <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d23e      	bcs.n	800ddba <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3308      	adds	r3, #8
 800dd42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	e853 3f00 	ldrex	r3, [r3]
 800dd4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd52:	673b      	str	r3, [r7, #112]	; 0x70
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3308      	adds	r3, #8
 800dd5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dd5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd64:	e841 2300 	strex	r3, r2, [r1]
 800dd68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1e5      	bne.n	800dd3c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a15      	ldr	r2, [pc, #84]	; (800ddc8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800dd74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	e853 3f00 	ldrex	r3, [r3]
 800dd82:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	f043 0320 	orr.w	r3, r3, #32
 800dd8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	461a      	mov	r2, r3
 800dd92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd94:	61bb      	str	r3, [r7, #24]
 800dd96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd98:	6979      	ldr	r1, [r7, #20]
 800dd9a:	69ba      	ldr	r2, [r7, #24]
 800dd9c:	e841 2300 	strex	r3, r2, [r1]
 800dda0:	613b      	str	r3, [r7, #16]
   return(result);
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1e6      	bne.n	800dd76 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dda8:	e007      	b.n	800ddba <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	699a      	ldr	r2, [r3, #24]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f042 0208 	orr.w	r2, r2, #8
 800ddb8:	619a      	str	r2, [r3, #24]
}
 800ddba:	bf00      	nop
 800ddbc:	3798      	adds	r7, #152	; 0x98
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	effffffe 	.word	0xeffffffe
 800ddc8:	0800d813 	.word	0x0800d813

0800ddcc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b0a8      	sub	sp, #160	; 0xa0
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddda:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	69db      	ldr	r3, [r3, #28]
 800dde4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de02:	2b22      	cmp	r3, #34	; 0x22
 800de04:	f040 8151 	bne.w	800e0aa <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de12:	e0f8      	b.n	800e006 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800de26:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800de2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800de2e:	4013      	ands	r3, r2
 800de30:	b29a      	uxth	r2, r3
 800de32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de3c:	1c9a      	adds	r2, r3, #2
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de48:	b29b      	uxth	r3, r3
 800de4a:	3b01      	subs	r3, #1
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	69db      	ldr	r3, [r3, #28]
 800de5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800de5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b00      	cmp	r3, #0
 800de68:	d053      	beq.n	800df12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	2b00      	cmp	r3, #0
 800de74:	d011      	beq.n	800de9a <UART_RxISR_16BIT_FIFOEN+0xce>
 800de76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00b      	beq.n	800de9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2201      	movs	r2, #1
 800de88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de90:	f043 0201 	orr.w	r2, r3, #1
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de9e:	f003 0302 	and.w	r3, r3, #2
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d011      	beq.n	800deca <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800deaa:	f003 0301 	and.w	r3, r3, #1
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00b      	beq.n	800deca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2202      	movs	r2, #2
 800deb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dec0:	f043 0204 	orr.w	r2, r3, #4
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800deca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dece:	f003 0304 	and.w	r3, r3, #4
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d011      	beq.n	800defa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ded6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800deda:	f003 0301 	and.w	r3, r3, #1
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d00b      	beq.n	800defa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2204      	movs	r2, #4
 800dee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800def0:	f043 0202 	orr.w	r2, r3, #2
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df00:	2b00      	cmp	r3, #0
 800df02:	d006      	beq.n	800df12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7fe fb7f 	bl	800c608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df18:	b29b      	uxth	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d173      	bne.n	800e006 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df26:	e853 3f00 	ldrex	r3, [r3]
 800df2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800df2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df42:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800df46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df48:	e841 2300 	strex	r3, r2, [r1]
 800df4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800df4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1e4      	bne.n	800df1e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	3308      	adds	r3, #8
 800df5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df5e:	e853 3f00 	ldrex	r3, [r3]
 800df62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df66:	4b57      	ldr	r3, [pc, #348]	; (800e0c4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800df68:	4013      	ands	r3, r2
 800df6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	3308      	adds	r3, #8
 800df74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800df78:	65ba      	str	r2, [r7, #88]	; 0x58
 800df7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df80:	e841 2300 	strex	r3, r2, [r1]
 800df84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1e3      	bne.n	800df54 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2220      	movs	r2, #32
 800df90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d12e      	bne.n	800e000 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb0:	e853 3f00 	ldrex	r3, [r3]
 800dfb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb8:	f023 0310 	bic.w	r3, r3, #16
 800dfbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dfc6:	647b      	str	r3, [r7, #68]	; 0x44
 800dfc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dfcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfce:	e841 2300 	strex	r3, r2, [r1]
 800dfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1e6      	bne.n	800dfa8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	69db      	ldr	r3, [r3, #28]
 800dfe0:	f003 0310 	and.w	r3, r3, #16
 800dfe4:	2b10      	cmp	r3, #16
 800dfe6:	d103      	bne.n	800dff0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2210      	movs	r2, #16
 800dfee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dff6:	4619      	mov	r1, r3
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7fe fb0f 	bl	800c61c <HAL_UARTEx_RxEventCallback>
 800dffe:	e002      	b.n	800e006 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7f5 fa01 	bl	8003408 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e006:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d006      	beq.n	800e01c <UART_RxISR_16BIT_FIFOEN+0x250>
 800e00e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e012:	f003 0320 	and.w	r3, r3, #32
 800e016:	2b00      	cmp	r3, #0
 800e018:	f47f aefc 	bne.w	800de14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e022:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e026:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d045      	beq.n	800e0ba <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e034:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e038:	429a      	cmp	r2, r3
 800e03a:	d23e      	bcs.n	800e0ba <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3308      	adds	r3, #8
 800e042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	e853 3f00 	ldrex	r3, [r3]
 800e04a:	623b      	str	r3, [r7, #32]
   return(result);
 800e04c:	6a3b      	ldr	r3, [r7, #32]
 800e04e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e052:	677b      	str	r3, [r7, #116]	; 0x74
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3308      	adds	r3, #8
 800e05a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e05c:	633a      	str	r2, [r7, #48]	; 0x30
 800e05e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e064:	e841 2300 	strex	r3, r2, [r1]
 800e068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1e5      	bne.n	800e03c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4a15      	ldr	r2, [pc, #84]	; (800e0c8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e074:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	e853 3f00 	ldrex	r3, [r3]
 800e082:	60fb      	str	r3, [r7, #12]
   return(result);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f043 0320 	orr.w	r3, r3, #32
 800e08a:	673b      	str	r3, [r7, #112]	; 0x70
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	461a      	mov	r2, r3
 800e092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e094:	61fb      	str	r3, [r7, #28]
 800e096:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e098:	69b9      	ldr	r1, [r7, #24]
 800e09a:	69fa      	ldr	r2, [r7, #28]
 800e09c:	e841 2300 	strex	r3, r2, [r1]
 800e0a0:	617b      	str	r3, [r7, #20]
   return(result);
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d1e6      	bne.n	800e076 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0a8:	e007      	b.n	800e0ba <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	699a      	ldr	r2, [r3, #24]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f042 0208 	orr.w	r2, r2, #8
 800e0b8:	619a      	str	r2, [r3, #24]
}
 800e0ba:	bf00      	nop
 800e0bc:	37a0      	adds	r7, #160	; 0xa0
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	effffffe 	.word	0xeffffffe
 800e0c8:	0800d973 	.word	0x0800d973

0800e0cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e0d4:	bf00      	nop
 800e0d6:	370c      	adds	r7, #12
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e0fc:	bf00      	nop
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e116:	2b01      	cmp	r3, #1
 800e118:	d101      	bne.n	800e11e <HAL_UARTEx_DisableFifoMode+0x16>
 800e11a:	2302      	movs	r3, #2
 800e11c:	e027      	b.n	800e16e <HAL_UARTEx_DisableFifoMode+0x66>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2224      	movs	r2, #36	; 0x24
 800e12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f022 0201 	bic.w	r2, r2, #1
 800e144:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e14c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2220      	movs	r2, #32
 800e160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3714      	adds	r7, #20
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d101      	bne.n	800e192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e18e:	2302      	movs	r3, #2
 800e190:	e02d      	b.n	800e1ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2201      	movs	r2, #1
 800e196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2224      	movs	r2, #36	; 0x24
 800e19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 0201 	bic.w	r2, r2, #1
 800e1b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	430a      	orrs	r2, r1
 800e1cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 f850 	bl	800e274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e206:	2b01      	cmp	r3, #1
 800e208:	d101      	bne.n	800e20e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e02d      	b.n	800e26a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2224      	movs	r2, #36	; 0x24
 800e21a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f022 0201 	bic.w	r2, r2, #1
 800e234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	689b      	ldr	r3, [r3, #8]
 800e23c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	430a      	orrs	r2, r1
 800e248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f812 	bl	800e274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2220      	movs	r2, #32
 800e25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
	...

0800e274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e280:	2b00      	cmp	r3, #0
 800e282:	d108      	bne.n	800e296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e294:	e031      	b.n	800e2fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e296:	2310      	movs	r3, #16
 800e298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e29a:	2310      	movs	r3, #16
 800e29c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	0e5b      	lsrs	r3, r3, #25
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	f003 0307 	and.w	r3, r3, #7
 800e2ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	0f5b      	lsrs	r3, r3, #29
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	f003 0307 	and.w	r3, r3, #7
 800e2bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2be:	7bbb      	ldrb	r3, [r7, #14]
 800e2c0:	7b3a      	ldrb	r2, [r7, #12]
 800e2c2:	4911      	ldr	r1, [pc, #68]	; (800e308 <UARTEx_SetNbDataToProcess+0x94>)
 800e2c4:	5c8a      	ldrb	r2, [r1, r2]
 800e2c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e2ca:	7b3a      	ldrb	r2, [r7, #12]
 800e2cc:	490f      	ldr	r1, [pc, #60]	; (800e30c <UARTEx_SetNbDataToProcess+0x98>)
 800e2ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	7b7a      	ldrb	r2, [r7, #13]
 800e2e0:	4909      	ldr	r1, [pc, #36]	; (800e308 <UARTEx_SetNbDataToProcess+0x94>)
 800e2e2:	5c8a      	ldrb	r2, [r1, r2]
 800e2e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e2e8:	7b7a      	ldrb	r2, [r7, #13]
 800e2ea:	4908      	ldr	r1, [pc, #32]	; (800e30c <UARTEx_SetNbDataToProcess+0x98>)
 800e2ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e2fa:	bf00      	nop
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	08011990 	.word	0x08011990
 800e30c:	08011998 	.word	0x08011998

0800e310 <__errno>:
 800e310:	4b01      	ldr	r3, [pc, #4]	; (800e318 <__errno+0x8>)
 800e312:	6818      	ldr	r0, [r3, #0]
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	24000084 	.word	0x24000084

0800e31c <__libc_init_array>:
 800e31c:	b570      	push	{r4, r5, r6, lr}
 800e31e:	4d0d      	ldr	r5, [pc, #52]	; (800e354 <__libc_init_array+0x38>)
 800e320:	4c0d      	ldr	r4, [pc, #52]	; (800e358 <__libc_init_array+0x3c>)
 800e322:	1b64      	subs	r4, r4, r5
 800e324:	10a4      	asrs	r4, r4, #2
 800e326:	2600      	movs	r6, #0
 800e328:	42a6      	cmp	r6, r4
 800e32a:	d109      	bne.n	800e340 <__libc_init_array+0x24>
 800e32c:	4d0b      	ldr	r5, [pc, #44]	; (800e35c <__libc_init_array+0x40>)
 800e32e:	4c0c      	ldr	r4, [pc, #48]	; (800e360 <__libc_init_array+0x44>)
 800e330:	f003 fae8 	bl	8011904 <_init>
 800e334:	1b64      	subs	r4, r4, r5
 800e336:	10a4      	asrs	r4, r4, #2
 800e338:	2600      	movs	r6, #0
 800e33a:	42a6      	cmp	r6, r4
 800e33c:	d105      	bne.n	800e34a <__libc_init_array+0x2e>
 800e33e:	bd70      	pop	{r4, r5, r6, pc}
 800e340:	f855 3b04 	ldr.w	r3, [r5], #4
 800e344:	4798      	blx	r3
 800e346:	3601      	adds	r6, #1
 800e348:	e7ee      	b.n	800e328 <__libc_init_array+0xc>
 800e34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e34e:	4798      	blx	r3
 800e350:	3601      	adds	r6, #1
 800e352:	e7f2      	b.n	800e33a <__libc_init_array+0x1e>
 800e354:	08013690 	.word	0x08013690
 800e358:	08013690 	.word	0x08013690
 800e35c:	08013690 	.word	0x08013690
 800e360:	08013694 	.word	0x08013694

0800e364 <memset>:
 800e364:	4402      	add	r2, r0
 800e366:	4603      	mov	r3, r0
 800e368:	4293      	cmp	r3, r2
 800e36a:	d100      	bne.n	800e36e <memset+0xa>
 800e36c:	4770      	bx	lr
 800e36e:	f803 1b01 	strb.w	r1, [r3], #1
 800e372:	e7f9      	b.n	800e368 <memset+0x4>

0800e374 <sulp>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	4604      	mov	r4, r0
 800e378:	460d      	mov	r5, r1
 800e37a:	4616      	mov	r6, r2
 800e37c:	ec45 4b10 	vmov	d0, r4, r5
 800e380:	f001 fcd6 	bl	800fd30 <__ulp>
 800e384:	b17e      	cbz	r6, 800e3a6 <sulp+0x32>
 800e386:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e38a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dd09      	ble.n	800e3a6 <sulp+0x32>
 800e392:	051b      	lsls	r3, r3, #20
 800e394:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e398:	2000      	movs	r0, #0
 800e39a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e39e:	ec41 0b17 	vmov	d7, r0, r1
 800e3a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}

0800e3a8 <_strtod_l>:
 800e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ac:	ed2d 8b0e 	vpush	{d8-d14}
 800e3b0:	b097      	sub	sp, #92	; 0x5c
 800e3b2:	461f      	mov	r7, r3
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	9312      	str	r3, [sp, #72]	; 0x48
 800e3b8:	4ba1      	ldr	r3, [pc, #644]	; (800e640 <_strtod_l+0x298>)
 800e3ba:	920d      	str	r2, [sp, #52]	; 0x34
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	9307      	str	r3, [sp, #28]
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	468b      	mov	fp, r1
 800e3c6:	f7f1 ff8b 	bl	80002e0 <strlen>
 800e3ca:	f04f 0800 	mov.w	r8, #0
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	f04f 0900 	mov.w	r9, #0
 800e3d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e3d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e3da:	7813      	ldrb	r3, [r2, #0]
 800e3dc:	2b2b      	cmp	r3, #43	; 0x2b
 800e3de:	d04d      	beq.n	800e47c <_strtod_l+0xd4>
 800e3e0:	d83a      	bhi.n	800e458 <_strtod_l+0xb0>
 800e3e2:	2b0d      	cmp	r3, #13
 800e3e4:	d833      	bhi.n	800e44e <_strtod_l+0xa6>
 800e3e6:	2b08      	cmp	r3, #8
 800e3e8:	d833      	bhi.n	800e452 <_strtod_l+0xaa>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d03d      	beq.n	800e46a <_strtod_l+0xc2>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	9308      	str	r3, [sp, #32]
 800e3f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e3f4:	7833      	ldrb	r3, [r6, #0]
 800e3f6:	2b30      	cmp	r3, #48	; 0x30
 800e3f8:	f040 80b0 	bne.w	800e55c <_strtod_l+0x1b4>
 800e3fc:	7873      	ldrb	r3, [r6, #1]
 800e3fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e402:	2b58      	cmp	r3, #88	; 0x58
 800e404:	d167      	bne.n	800e4d6 <_strtod_l+0x12e>
 800e406:	9b08      	ldr	r3, [sp, #32]
 800e408:	9301      	str	r3, [sp, #4]
 800e40a:	ab12      	add	r3, sp, #72	; 0x48
 800e40c:	9702      	str	r7, [sp, #8]
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	4a8c      	ldr	r2, [pc, #560]	; (800e644 <_strtod_l+0x29c>)
 800e412:	ab13      	add	r3, sp, #76	; 0x4c
 800e414:	a911      	add	r1, sp, #68	; 0x44
 800e416:	4620      	mov	r0, r4
 800e418:	f000 fdf0 	bl	800effc <__gethex>
 800e41c:	f010 0507 	ands.w	r5, r0, #7
 800e420:	4607      	mov	r7, r0
 800e422:	d005      	beq.n	800e430 <_strtod_l+0x88>
 800e424:	2d06      	cmp	r5, #6
 800e426:	d12b      	bne.n	800e480 <_strtod_l+0xd8>
 800e428:	3601      	adds	r6, #1
 800e42a:	2300      	movs	r3, #0
 800e42c:	9611      	str	r6, [sp, #68]	; 0x44
 800e42e:	9308      	str	r3, [sp, #32]
 800e430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e432:	2b00      	cmp	r3, #0
 800e434:	f040 854e 	bne.w	800eed4 <_strtod_l+0xb2c>
 800e438:	9b08      	ldr	r3, [sp, #32]
 800e43a:	b1e3      	cbz	r3, 800e476 <_strtod_l+0xce>
 800e43c:	ec49 8b17 	vmov	d7, r8, r9
 800e440:	eeb1 0b47 	vneg.f64	d0, d7
 800e444:	b017      	add	sp, #92	; 0x5c
 800e446:	ecbd 8b0e 	vpop	{d8-d14}
 800e44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44e:	2b20      	cmp	r3, #32
 800e450:	d1cd      	bne.n	800e3ee <_strtod_l+0x46>
 800e452:	3201      	adds	r2, #1
 800e454:	9211      	str	r2, [sp, #68]	; 0x44
 800e456:	e7bf      	b.n	800e3d8 <_strtod_l+0x30>
 800e458:	2b2d      	cmp	r3, #45	; 0x2d
 800e45a:	d1c8      	bne.n	800e3ee <_strtod_l+0x46>
 800e45c:	2301      	movs	r3, #1
 800e45e:	9308      	str	r3, [sp, #32]
 800e460:	1c53      	adds	r3, r2, #1
 800e462:	9311      	str	r3, [sp, #68]	; 0x44
 800e464:	7853      	ldrb	r3, [r2, #1]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1c3      	bne.n	800e3f2 <_strtod_l+0x4a>
 800e46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e46c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e470:	2b00      	cmp	r3, #0
 800e472:	f040 852d 	bne.w	800eed0 <_strtod_l+0xb28>
 800e476:	ec49 8b10 	vmov	d0, r8, r9
 800e47a:	e7e3      	b.n	800e444 <_strtod_l+0x9c>
 800e47c:	2300      	movs	r3, #0
 800e47e:	e7ee      	b.n	800e45e <_strtod_l+0xb6>
 800e480:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e482:	b13a      	cbz	r2, 800e494 <_strtod_l+0xec>
 800e484:	2135      	movs	r1, #53	; 0x35
 800e486:	a814      	add	r0, sp, #80	; 0x50
 800e488:	f001 fd5a 	bl	800ff40 <__copybits>
 800e48c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e48e:	4620      	mov	r0, r4
 800e490:	f001 f91c 	bl	800f6cc <_Bfree>
 800e494:	3d01      	subs	r5, #1
 800e496:	2d04      	cmp	r5, #4
 800e498:	d806      	bhi.n	800e4a8 <_strtod_l+0x100>
 800e49a:	e8df f005 	tbb	[pc, r5]
 800e49e:	030a      	.short	0x030a
 800e4a0:	1714      	.short	0x1714
 800e4a2:	0a          	.byte	0x0a
 800e4a3:	00          	.byte	0x00
 800e4a4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e4a8:	073f      	lsls	r7, r7, #28
 800e4aa:	d5c1      	bpl.n	800e430 <_strtod_l+0x88>
 800e4ac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e4b0:	e7be      	b.n	800e430 <_strtod_l+0x88>
 800e4b2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e4b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e4b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e4bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e4c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e4c4:	e7f0      	b.n	800e4a8 <_strtod_l+0x100>
 800e4c6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800e648 <_strtod_l+0x2a0>
 800e4ca:	e7ed      	b.n	800e4a8 <_strtod_l+0x100>
 800e4cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e4d0:	f04f 38ff 	mov.w	r8, #4294967295
 800e4d4:	e7e8      	b.n	800e4a8 <_strtod_l+0x100>
 800e4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	9211      	str	r2, [sp, #68]	; 0x44
 800e4dc:	785b      	ldrb	r3, [r3, #1]
 800e4de:	2b30      	cmp	r3, #48	; 0x30
 800e4e0:	d0f9      	beq.n	800e4d6 <_strtod_l+0x12e>
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d0a4      	beq.n	800e430 <_strtod_l+0x88>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f04f 0a00 	mov.w	sl, #0
 800e4ec:	9304      	str	r3, [sp, #16]
 800e4ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e4f0:	930a      	str	r3, [sp, #40]	; 0x28
 800e4f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e4f6:	f8cd a018 	str.w	sl, [sp, #24]
 800e4fa:	220a      	movs	r2, #10
 800e4fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e4fe:	7807      	ldrb	r7, [r0, #0]
 800e500:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e504:	b2d9      	uxtb	r1, r3
 800e506:	2909      	cmp	r1, #9
 800e508:	d92a      	bls.n	800e560 <_strtod_l+0x1b8>
 800e50a:	9907      	ldr	r1, [sp, #28]
 800e50c:	462a      	mov	r2, r5
 800e50e:	f001 fe1f 	bl	8010150 <strncmp>
 800e512:	2800      	cmp	r0, #0
 800e514:	d033      	beq.n	800e57e <_strtod_l+0x1d6>
 800e516:	2000      	movs	r0, #0
 800e518:	9b06      	ldr	r3, [sp, #24]
 800e51a:	463a      	mov	r2, r7
 800e51c:	4601      	mov	r1, r0
 800e51e:	4607      	mov	r7, r0
 800e520:	2a65      	cmp	r2, #101	; 0x65
 800e522:	d001      	beq.n	800e528 <_strtod_l+0x180>
 800e524:	2a45      	cmp	r2, #69	; 0x45
 800e526:	d117      	bne.n	800e558 <_strtod_l+0x1b0>
 800e528:	b91b      	cbnz	r3, 800e532 <_strtod_l+0x18a>
 800e52a:	9b04      	ldr	r3, [sp, #16]
 800e52c:	4303      	orrs	r3, r0
 800e52e:	d09c      	beq.n	800e46a <_strtod_l+0xc2>
 800e530:	2300      	movs	r3, #0
 800e532:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e536:	f10b 0201 	add.w	r2, fp, #1
 800e53a:	9211      	str	r2, [sp, #68]	; 0x44
 800e53c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e540:	2a2b      	cmp	r2, #43	; 0x2b
 800e542:	d071      	beq.n	800e628 <_strtod_l+0x280>
 800e544:	2a2d      	cmp	r2, #45	; 0x2d
 800e546:	d077      	beq.n	800e638 <_strtod_l+0x290>
 800e548:	f04f 0e00 	mov.w	lr, #0
 800e54c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e550:	2d09      	cmp	r5, #9
 800e552:	d97f      	bls.n	800e654 <_strtod_l+0x2ac>
 800e554:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e558:	2500      	movs	r5, #0
 800e55a:	e09b      	b.n	800e694 <_strtod_l+0x2ec>
 800e55c:	2300      	movs	r3, #0
 800e55e:	e7c3      	b.n	800e4e8 <_strtod_l+0x140>
 800e560:	9906      	ldr	r1, [sp, #24]
 800e562:	2908      	cmp	r1, #8
 800e564:	bfdd      	ittte	le
 800e566:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e568:	fb02 3301 	mlale	r3, r2, r1, r3
 800e56c:	9309      	strle	r3, [sp, #36]	; 0x24
 800e56e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e572:	9b06      	ldr	r3, [sp, #24]
 800e574:	3001      	adds	r0, #1
 800e576:	3301      	adds	r3, #1
 800e578:	9306      	str	r3, [sp, #24]
 800e57a:	9011      	str	r0, [sp, #68]	; 0x44
 800e57c:	e7be      	b.n	800e4fc <_strtod_l+0x154>
 800e57e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e580:	195a      	adds	r2, r3, r5
 800e582:	9211      	str	r2, [sp, #68]	; 0x44
 800e584:	5d5a      	ldrb	r2, [r3, r5]
 800e586:	9b06      	ldr	r3, [sp, #24]
 800e588:	b3a3      	cbz	r3, 800e5f4 <_strtod_l+0x24c>
 800e58a:	4607      	mov	r7, r0
 800e58c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e590:	2909      	cmp	r1, #9
 800e592:	d912      	bls.n	800e5ba <_strtod_l+0x212>
 800e594:	2101      	movs	r1, #1
 800e596:	e7c3      	b.n	800e520 <_strtod_l+0x178>
 800e598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	9211      	str	r2, [sp, #68]	; 0x44
 800e59e:	785a      	ldrb	r2, [r3, #1]
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	2a30      	cmp	r2, #48	; 0x30
 800e5a4:	d0f8      	beq.n	800e598 <_strtod_l+0x1f0>
 800e5a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e5aa:	2b08      	cmp	r3, #8
 800e5ac:	f200 8497 	bhi.w	800eede <_strtod_l+0xb36>
 800e5b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5b4:	4607      	mov	r7, r0
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	3a30      	subs	r2, #48	; 0x30
 800e5bc:	f100 0101 	add.w	r1, r0, #1
 800e5c0:	d012      	beq.n	800e5e8 <_strtod_l+0x240>
 800e5c2:	440f      	add	r7, r1
 800e5c4:	eb00 0c03 	add.w	ip, r0, r3
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	250a      	movs	r5, #10
 800e5cc:	4561      	cmp	r1, ip
 800e5ce:	d113      	bne.n	800e5f8 <_strtod_l+0x250>
 800e5d0:	1819      	adds	r1, r3, r0
 800e5d2:	2908      	cmp	r1, #8
 800e5d4:	f103 0301 	add.w	r3, r3, #1
 800e5d8:	4403      	add	r3, r0
 800e5da:	dc1c      	bgt.n	800e616 <_strtod_l+0x26e>
 800e5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5de:	210a      	movs	r1, #10
 800e5e0:	fb01 2200 	mla	r2, r1, r0, r2
 800e5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e5ea:	1c50      	adds	r0, r2, #1
 800e5ec:	9011      	str	r0, [sp, #68]	; 0x44
 800e5ee:	7852      	ldrb	r2, [r2, #1]
 800e5f0:	4608      	mov	r0, r1
 800e5f2:	e7cb      	b.n	800e58c <_strtod_l+0x1e4>
 800e5f4:	9806      	ldr	r0, [sp, #24]
 800e5f6:	e7d4      	b.n	800e5a2 <_strtod_l+0x1fa>
 800e5f8:	2908      	cmp	r1, #8
 800e5fa:	dc04      	bgt.n	800e606 <_strtod_l+0x25e>
 800e5fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e5fe:	436e      	muls	r6, r5
 800e600:	9609      	str	r6, [sp, #36]	; 0x24
 800e602:	3101      	adds	r1, #1
 800e604:	e7e2      	b.n	800e5cc <_strtod_l+0x224>
 800e606:	f101 0e01 	add.w	lr, r1, #1
 800e60a:	f1be 0f10 	cmp.w	lr, #16
 800e60e:	bfd8      	it	le
 800e610:	fb05 fa0a 	mulle.w	sl, r5, sl
 800e614:	e7f5      	b.n	800e602 <_strtod_l+0x25a>
 800e616:	2b10      	cmp	r3, #16
 800e618:	bfdc      	itt	le
 800e61a:	210a      	movle	r1, #10
 800e61c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800e620:	e7e1      	b.n	800e5e6 <_strtod_l+0x23e>
 800e622:	2700      	movs	r7, #0
 800e624:	2101      	movs	r1, #1
 800e626:	e780      	b.n	800e52a <_strtod_l+0x182>
 800e628:	f04f 0e00 	mov.w	lr, #0
 800e62c:	f10b 0202 	add.w	r2, fp, #2
 800e630:	9211      	str	r2, [sp, #68]	; 0x44
 800e632:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800e636:	e789      	b.n	800e54c <_strtod_l+0x1a4>
 800e638:	f04f 0e01 	mov.w	lr, #1
 800e63c:	e7f6      	b.n	800e62c <_strtod_l+0x284>
 800e63e:	bf00      	nop
 800e640:	08011a78 	.word	0x08011a78
 800e644:	080119b0 	.word	0x080119b0
 800e648:	7ff00000 	.word	0x7ff00000
 800e64c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e64e:	1c55      	adds	r5, r2, #1
 800e650:	9511      	str	r5, [sp, #68]	; 0x44
 800e652:	7852      	ldrb	r2, [r2, #1]
 800e654:	2a30      	cmp	r2, #48	; 0x30
 800e656:	d0f9      	beq.n	800e64c <_strtod_l+0x2a4>
 800e658:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e65c:	2d08      	cmp	r5, #8
 800e65e:	f63f af7b 	bhi.w	800e558 <_strtod_l+0x1b0>
 800e662:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e666:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e668:	9207      	str	r2, [sp, #28]
 800e66a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e66c:	1c55      	adds	r5, r2, #1
 800e66e:	9511      	str	r5, [sp, #68]	; 0x44
 800e670:	7852      	ldrb	r2, [r2, #1]
 800e672:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e676:	2e09      	cmp	r6, #9
 800e678:	d937      	bls.n	800e6ea <_strtod_l+0x342>
 800e67a:	9e07      	ldr	r6, [sp, #28]
 800e67c:	1bad      	subs	r5, r5, r6
 800e67e:	2d08      	cmp	r5, #8
 800e680:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e684:	dc02      	bgt.n	800e68c <_strtod_l+0x2e4>
 800e686:	4565      	cmp	r5, ip
 800e688:	bfa8      	it	ge
 800e68a:	4665      	movge	r5, ip
 800e68c:	f1be 0f00 	cmp.w	lr, #0
 800e690:	d000      	beq.n	800e694 <_strtod_l+0x2ec>
 800e692:	426d      	negs	r5, r5
 800e694:	2b00      	cmp	r3, #0
 800e696:	d14d      	bne.n	800e734 <_strtod_l+0x38c>
 800e698:	9b04      	ldr	r3, [sp, #16]
 800e69a:	4303      	orrs	r3, r0
 800e69c:	f47f aec8 	bne.w	800e430 <_strtod_l+0x88>
 800e6a0:	2900      	cmp	r1, #0
 800e6a2:	f47f aee2 	bne.w	800e46a <_strtod_l+0xc2>
 800e6a6:	2a69      	cmp	r2, #105	; 0x69
 800e6a8:	d027      	beq.n	800e6fa <_strtod_l+0x352>
 800e6aa:	dc24      	bgt.n	800e6f6 <_strtod_l+0x34e>
 800e6ac:	2a49      	cmp	r2, #73	; 0x49
 800e6ae:	d024      	beq.n	800e6fa <_strtod_l+0x352>
 800e6b0:	2a4e      	cmp	r2, #78	; 0x4e
 800e6b2:	f47f aeda 	bne.w	800e46a <_strtod_l+0xc2>
 800e6b6:	4996      	ldr	r1, [pc, #600]	; (800e910 <_strtod_l+0x568>)
 800e6b8:	a811      	add	r0, sp, #68	; 0x44
 800e6ba:	f000 fef7 	bl	800f4ac <__match>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f43f aed3 	beq.w	800e46a <_strtod_l+0xc2>
 800e6c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	2b28      	cmp	r3, #40	; 0x28
 800e6ca:	d12d      	bne.n	800e728 <_strtod_l+0x380>
 800e6cc:	4991      	ldr	r1, [pc, #580]	; (800e914 <_strtod_l+0x56c>)
 800e6ce:	aa14      	add	r2, sp, #80	; 0x50
 800e6d0:	a811      	add	r0, sp, #68	; 0x44
 800e6d2:	f000 feff 	bl	800f4d4 <__hexnan>
 800e6d6:	2805      	cmp	r0, #5
 800e6d8:	d126      	bne.n	800e728 <_strtod_l+0x380>
 800e6da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6dc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e6e0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e6e4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e6e8:	e6a2      	b.n	800e430 <_strtod_l+0x88>
 800e6ea:	250a      	movs	r5, #10
 800e6ec:	fb05 250c 	mla	r5, r5, ip, r2
 800e6f0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800e6f4:	e7b9      	b.n	800e66a <_strtod_l+0x2c2>
 800e6f6:	2a6e      	cmp	r2, #110	; 0x6e
 800e6f8:	e7db      	b.n	800e6b2 <_strtod_l+0x30a>
 800e6fa:	4987      	ldr	r1, [pc, #540]	; (800e918 <_strtod_l+0x570>)
 800e6fc:	a811      	add	r0, sp, #68	; 0x44
 800e6fe:	f000 fed5 	bl	800f4ac <__match>
 800e702:	2800      	cmp	r0, #0
 800e704:	f43f aeb1 	beq.w	800e46a <_strtod_l+0xc2>
 800e708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e70a:	4984      	ldr	r1, [pc, #528]	; (800e91c <_strtod_l+0x574>)
 800e70c:	3b01      	subs	r3, #1
 800e70e:	a811      	add	r0, sp, #68	; 0x44
 800e710:	9311      	str	r3, [sp, #68]	; 0x44
 800e712:	f000 fecb 	bl	800f4ac <__match>
 800e716:	b910      	cbnz	r0, 800e71e <_strtod_l+0x376>
 800e718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e71a:	3301      	adds	r3, #1
 800e71c:	9311      	str	r3, [sp, #68]	; 0x44
 800e71e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800e930 <_strtod_l+0x588>
 800e722:	f04f 0800 	mov.w	r8, #0
 800e726:	e683      	b.n	800e430 <_strtod_l+0x88>
 800e728:	487d      	ldr	r0, [pc, #500]	; (800e920 <_strtod_l+0x578>)
 800e72a:	f001 fcf9 	bl	8010120 <nan>
 800e72e:	ec59 8b10 	vmov	r8, r9, d0
 800e732:	e67d      	b.n	800e430 <_strtod_l+0x88>
 800e734:	1bea      	subs	r2, r5, r7
 800e736:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800e73a:	9207      	str	r2, [sp, #28]
 800e73c:	9a06      	ldr	r2, [sp, #24]
 800e73e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e742:	2a00      	cmp	r2, #0
 800e744:	bf08      	it	eq
 800e746:	461a      	moveq	r2, r3
 800e748:	2b10      	cmp	r3, #16
 800e74a:	9206      	str	r2, [sp, #24]
 800e74c:	461a      	mov	r2, r3
 800e74e:	bfa8      	it	ge
 800e750:	2210      	movge	r2, #16
 800e752:	2b09      	cmp	r3, #9
 800e754:	ec59 8b17 	vmov	r8, r9, d7
 800e758:	dd0c      	ble.n	800e774 <_strtod_l+0x3cc>
 800e75a:	4972      	ldr	r1, [pc, #456]	; (800e924 <_strtod_l+0x57c>)
 800e75c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e760:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e764:	ee06 aa90 	vmov	s13, sl
 800e768:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e76c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e770:	ec59 8b16 	vmov	r8, r9, d6
 800e774:	2b0f      	cmp	r3, #15
 800e776:	dc36      	bgt.n	800e7e6 <_strtod_l+0x43e>
 800e778:	9907      	ldr	r1, [sp, #28]
 800e77a:	2900      	cmp	r1, #0
 800e77c:	f43f ae58 	beq.w	800e430 <_strtod_l+0x88>
 800e780:	dd23      	ble.n	800e7ca <_strtod_l+0x422>
 800e782:	2916      	cmp	r1, #22
 800e784:	dc0b      	bgt.n	800e79e <_strtod_l+0x3f6>
 800e786:	4b67      	ldr	r3, [pc, #412]	; (800e924 <_strtod_l+0x57c>)
 800e788:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e78c:	ed93 7b00 	vldr	d7, [r3]
 800e790:	ec49 8b16 	vmov	d6, r8, r9
 800e794:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e798:	ec59 8b17 	vmov	r8, r9, d7
 800e79c:	e648      	b.n	800e430 <_strtod_l+0x88>
 800e79e:	9807      	ldr	r0, [sp, #28]
 800e7a0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e7a4:	4281      	cmp	r1, r0
 800e7a6:	db1e      	blt.n	800e7e6 <_strtod_l+0x43e>
 800e7a8:	4a5e      	ldr	r2, [pc, #376]	; (800e924 <_strtod_l+0x57c>)
 800e7aa:	f1c3 030f 	rsb	r3, r3, #15
 800e7ae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e7b2:	ed91 7b00 	vldr	d7, [r1]
 800e7b6:	ec49 8b16 	vmov	d6, r8, r9
 800e7ba:	1ac3      	subs	r3, r0, r3
 800e7bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e7c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7c4:	ed92 6b00 	vldr	d6, [r2]
 800e7c8:	e7e4      	b.n	800e794 <_strtod_l+0x3ec>
 800e7ca:	9907      	ldr	r1, [sp, #28]
 800e7cc:	3116      	adds	r1, #22
 800e7ce:	db0a      	blt.n	800e7e6 <_strtod_l+0x43e>
 800e7d0:	4b54      	ldr	r3, [pc, #336]	; (800e924 <_strtod_l+0x57c>)
 800e7d2:	1b7d      	subs	r5, r7, r5
 800e7d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e7d8:	ed95 7b00 	vldr	d7, [r5]
 800e7dc:	ec49 8b16 	vmov	d6, r8, r9
 800e7e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e7e4:	e7d8      	b.n	800e798 <_strtod_l+0x3f0>
 800e7e6:	9907      	ldr	r1, [sp, #28]
 800e7e8:	1a9a      	subs	r2, r3, r2
 800e7ea:	440a      	add	r2, r1
 800e7ec:	2a00      	cmp	r2, #0
 800e7ee:	dd6f      	ble.n	800e8d0 <_strtod_l+0x528>
 800e7f0:	f012 000f 	ands.w	r0, r2, #15
 800e7f4:	d00a      	beq.n	800e80c <_strtod_l+0x464>
 800e7f6:	494b      	ldr	r1, [pc, #300]	; (800e924 <_strtod_l+0x57c>)
 800e7f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e7fc:	ed91 7b00 	vldr	d7, [r1]
 800e800:	ec49 8b16 	vmov	d6, r8, r9
 800e804:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e808:	ec59 8b17 	vmov	r8, r9, d7
 800e80c:	f032 020f 	bics.w	r2, r2, #15
 800e810:	d04f      	beq.n	800e8b2 <_strtod_l+0x50a>
 800e812:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e816:	dd22      	ble.n	800e85e <_strtod_l+0x4b6>
 800e818:	2500      	movs	r5, #0
 800e81a:	462e      	mov	r6, r5
 800e81c:	9506      	str	r5, [sp, #24]
 800e81e:	462f      	mov	r7, r5
 800e820:	2322      	movs	r3, #34	; 0x22
 800e822:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800e930 <_strtod_l+0x588>
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	f04f 0800 	mov.w	r8, #0
 800e82c:	9b06      	ldr	r3, [sp, #24]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f43f adfe 	beq.w	800e430 <_strtod_l+0x88>
 800e834:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e836:	4620      	mov	r0, r4
 800e838:	f000 ff48 	bl	800f6cc <_Bfree>
 800e83c:	4639      	mov	r1, r7
 800e83e:	4620      	mov	r0, r4
 800e840:	f000 ff44 	bl	800f6cc <_Bfree>
 800e844:	4631      	mov	r1, r6
 800e846:	4620      	mov	r0, r4
 800e848:	f000 ff40 	bl	800f6cc <_Bfree>
 800e84c:	9906      	ldr	r1, [sp, #24]
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 ff3c 	bl	800f6cc <_Bfree>
 800e854:	4629      	mov	r1, r5
 800e856:	4620      	mov	r0, r4
 800e858:	f000 ff38 	bl	800f6cc <_Bfree>
 800e85c:	e5e8      	b.n	800e430 <_strtod_l+0x88>
 800e85e:	2000      	movs	r0, #0
 800e860:	ec49 8b17 	vmov	d7, r8, r9
 800e864:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800e928 <_strtod_l+0x580>
 800e868:	1112      	asrs	r2, r2, #4
 800e86a:	4601      	mov	r1, r0
 800e86c:	2a01      	cmp	r2, #1
 800e86e:	dc23      	bgt.n	800e8b8 <_strtod_l+0x510>
 800e870:	b108      	cbz	r0, 800e876 <_strtod_l+0x4ce>
 800e872:	ec59 8b17 	vmov	r8, r9, d7
 800e876:	4a2c      	ldr	r2, [pc, #176]	; (800e928 <_strtod_l+0x580>)
 800e878:	482c      	ldr	r0, [pc, #176]	; (800e92c <_strtod_l+0x584>)
 800e87a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e87e:	ed92 7b00 	vldr	d7, [r2]
 800e882:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e886:	ec49 8b16 	vmov	d6, r8, r9
 800e88a:	4a29      	ldr	r2, [pc, #164]	; (800e930 <_strtod_l+0x588>)
 800e88c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e890:	ee17 1a90 	vmov	r1, s15
 800e894:	400a      	ands	r2, r1
 800e896:	4282      	cmp	r2, r0
 800e898:	ec59 8b17 	vmov	r8, r9, d7
 800e89c:	d8bc      	bhi.n	800e818 <_strtod_l+0x470>
 800e89e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e8a2:	4282      	cmp	r2, r0
 800e8a4:	bf86      	itte	hi
 800e8a6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800e934 <_strtod_l+0x58c>
 800e8aa:	f04f 38ff 	movhi.w	r8, #4294967295
 800e8ae:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	9204      	str	r2, [sp, #16]
 800e8b6:	e078      	b.n	800e9aa <_strtod_l+0x602>
 800e8b8:	07d6      	lsls	r6, r2, #31
 800e8ba:	d504      	bpl.n	800e8c6 <_strtod_l+0x51e>
 800e8bc:	ed9c 6b00 	vldr	d6, [ip]
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8c6:	3101      	adds	r1, #1
 800e8c8:	1052      	asrs	r2, r2, #1
 800e8ca:	f10c 0c08 	add.w	ip, ip, #8
 800e8ce:	e7cd      	b.n	800e86c <_strtod_l+0x4c4>
 800e8d0:	d0ef      	beq.n	800e8b2 <_strtod_l+0x50a>
 800e8d2:	4252      	negs	r2, r2
 800e8d4:	f012 000f 	ands.w	r0, r2, #15
 800e8d8:	d00a      	beq.n	800e8f0 <_strtod_l+0x548>
 800e8da:	4912      	ldr	r1, [pc, #72]	; (800e924 <_strtod_l+0x57c>)
 800e8dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e8e0:	ed91 7b00 	vldr	d7, [r1]
 800e8e4:	ec49 8b16 	vmov	d6, r8, r9
 800e8e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e8ec:	ec59 8b17 	vmov	r8, r9, d7
 800e8f0:	1112      	asrs	r2, r2, #4
 800e8f2:	d0de      	beq.n	800e8b2 <_strtod_l+0x50a>
 800e8f4:	2a1f      	cmp	r2, #31
 800e8f6:	dd1f      	ble.n	800e938 <_strtod_l+0x590>
 800e8f8:	2500      	movs	r5, #0
 800e8fa:	462e      	mov	r6, r5
 800e8fc:	9506      	str	r5, [sp, #24]
 800e8fe:	462f      	mov	r7, r5
 800e900:	2322      	movs	r3, #34	; 0x22
 800e902:	f04f 0800 	mov.w	r8, #0
 800e906:	f04f 0900 	mov.w	r9, #0
 800e90a:	6023      	str	r3, [r4, #0]
 800e90c:	e78e      	b.n	800e82c <_strtod_l+0x484>
 800e90e:	bf00      	nop
 800e910:	080119ad 	.word	0x080119ad
 800e914:	080119c4 	.word	0x080119c4
 800e918:	080119a4 	.word	0x080119a4
 800e91c:	080119a7 	.word	0x080119a7
 800e920:	08011c37 	.word	0x08011c37
 800e924:	08011b28 	.word	0x08011b28
 800e928:	08011b00 	.word	0x08011b00
 800e92c:	7ca00000 	.word	0x7ca00000
 800e930:	7ff00000 	.word	0x7ff00000
 800e934:	7fefffff 	.word	0x7fefffff
 800e938:	f012 0110 	ands.w	r1, r2, #16
 800e93c:	bf18      	it	ne
 800e93e:	216a      	movne	r1, #106	; 0x6a
 800e940:	9104      	str	r1, [sp, #16]
 800e942:	ec49 8b17 	vmov	d7, r8, r9
 800e946:	49be      	ldr	r1, [pc, #760]	; (800ec40 <_strtod_l+0x898>)
 800e948:	2000      	movs	r0, #0
 800e94a:	07d6      	lsls	r6, r2, #31
 800e94c:	d504      	bpl.n	800e958 <_strtod_l+0x5b0>
 800e94e:	ed91 6b00 	vldr	d6, [r1]
 800e952:	2001      	movs	r0, #1
 800e954:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e958:	1052      	asrs	r2, r2, #1
 800e95a:	f101 0108 	add.w	r1, r1, #8
 800e95e:	d1f4      	bne.n	800e94a <_strtod_l+0x5a2>
 800e960:	b108      	cbz	r0, 800e966 <_strtod_l+0x5be>
 800e962:	ec59 8b17 	vmov	r8, r9, d7
 800e966:	9a04      	ldr	r2, [sp, #16]
 800e968:	b1c2      	cbz	r2, 800e99c <_strtod_l+0x5f4>
 800e96a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e96e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e972:	2a00      	cmp	r2, #0
 800e974:	4648      	mov	r0, r9
 800e976:	dd11      	ble.n	800e99c <_strtod_l+0x5f4>
 800e978:	2a1f      	cmp	r2, #31
 800e97a:	f340 812e 	ble.w	800ebda <_strtod_l+0x832>
 800e97e:	2a34      	cmp	r2, #52	; 0x34
 800e980:	bfde      	ittt	le
 800e982:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e986:	f04f 32ff 	movle.w	r2, #4294967295
 800e98a:	fa02 f101 	lslle.w	r1, r2, r1
 800e98e:	f04f 0800 	mov.w	r8, #0
 800e992:	bfcc      	ite	gt
 800e994:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e998:	ea01 0900 	andle.w	r9, r1, r0
 800e99c:	ec49 8b17 	vmov	d7, r8, r9
 800e9a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a8:	d0a6      	beq.n	800e8f8 <_strtod_l+0x550>
 800e9aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9ac:	9200      	str	r2, [sp, #0]
 800e9ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9b0:	9a06      	ldr	r2, [sp, #24]
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f000 fef2 	bl	800f79c <__s2b>
 800e9b8:	9006      	str	r0, [sp, #24]
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	f43f af2c 	beq.w	800e818 <_strtod_l+0x470>
 800e9c0:	9b07      	ldr	r3, [sp, #28]
 800e9c2:	1b7d      	subs	r5, r7, r5
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	bfb4      	ite	lt
 800e9c8:	462b      	movlt	r3, r5
 800e9ca:	2300      	movge	r3, #0
 800e9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ce:	9b07      	ldr	r3, [sp, #28]
 800e9d0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ec20 <_strtod_l+0x878>
 800e9d4:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ec28 <_strtod_l+0x880>
 800e9d8:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ec30 <_strtod_l+0x888>
 800e9dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e9e0:	2500      	movs	r5, #0
 800e9e2:	930c      	str	r3, [sp, #48]	; 0x30
 800e9e4:	462e      	mov	r6, r5
 800e9e6:	9b06      	ldr	r3, [sp, #24]
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	6859      	ldr	r1, [r3, #4]
 800e9ec:	f000 fe2e 	bl	800f64c <_Balloc>
 800e9f0:	4607      	mov	r7, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f43f af14 	beq.w	800e820 <_strtod_l+0x478>
 800e9f8:	9b06      	ldr	r3, [sp, #24]
 800e9fa:	691a      	ldr	r2, [r3, #16]
 800e9fc:	3202      	adds	r2, #2
 800e9fe:	f103 010c 	add.w	r1, r3, #12
 800ea02:	0092      	lsls	r2, r2, #2
 800ea04:	300c      	adds	r0, #12
 800ea06:	f000 fe13 	bl	800f630 <memcpy>
 800ea0a:	ec49 8b10 	vmov	d0, r8, r9
 800ea0e:	aa14      	add	r2, sp, #80	; 0x50
 800ea10:	a913      	add	r1, sp, #76	; 0x4c
 800ea12:	4620      	mov	r0, r4
 800ea14:	f001 fa08 	bl	800fe28 <__d2b>
 800ea18:	ec49 8b18 	vmov	d8, r8, r9
 800ea1c:	9012      	str	r0, [sp, #72]	; 0x48
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	f43f aefe 	beq.w	800e820 <_strtod_l+0x478>
 800ea24:	2101      	movs	r1, #1
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 ff52 	bl	800f8d0 <__i2b>
 800ea2c:	4606      	mov	r6, r0
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f43f aef6 	beq.w	800e820 <_strtod_l+0x478>
 800ea34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea36:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfab      	itete	ge
 800ea3c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ea3e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ea40:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ea44:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ea48:	bfac      	ite	ge
 800ea4a:	eb03 0b02 	addge.w	fp, r3, r2
 800ea4e:	eba2 0a03 	sublt.w	sl, r2, r3
 800ea52:	9a04      	ldr	r2, [sp, #16]
 800ea54:	1a9b      	subs	r3, r3, r2
 800ea56:	440b      	add	r3, r1
 800ea58:	4a7a      	ldr	r2, [pc, #488]	; (800ec44 <_strtod_l+0x89c>)
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ea62:	f280 80cd 	bge.w	800ec00 <_strtod_l+0x858>
 800ea66:	1ad2      	subs	r2, r2, r3
 800ea68:	2a1f      	cmp	r2, #31
 800ea6a:	eba1 0102 	sub.w	r1, r1, r2
 800ea6e:	f04f 0001 	mov.w	r0, #1
 800ea72:	f300 80b9 	bgt.w	800ebe8 <_strtod_l+0x840>
 800ea76:	fa00 f302 	lsl.w	r3, r0, r2
 800ea7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea80:	eb0b 0301 	add.w	r3, fp, r1
 800ea84:	9a04      	ldr	r2, [sp, #16]
 800ea86:	459b      	cmp	fp, r3
 800ea88:	448a      	add	sl, r1
 800ea8a:	4492      	add	sl, r2
 800ea8c:	465a      	mov	r2, fp
 800ea8e:	bfa8      	it	ge
 800ea90:	461a      	movge	r2, r3
 800ea92:	4552      	cmp	r2, sl
 800ea94:	bfa8      	it	ge
 800ea96:	4652      	movge	r2, sl
 800ea98:	2a00      	cmp	r2, #0
 800ea9a:	bfc2      	ittt	gt
 800ea9c:	1a9b      	subgt	r3, r3, r2
 800ea9e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800eaa2:	ebab 0b02 	subgt.w	fp, fp, r2
 800eaa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaa8:	2a00      	cmp	r2, #0
 800eaaa:	dd18      	ble.n	800eade <_strtod_l+0x736>
 800eaac:	4631      	mov	r1, r6
 800eaae:	4620      	mov	r0, r4
 800eab0:	930f      	str	r3, [sp, #60]	; 0x3c
 800eab2:	f000 ffcd 	bl	800fa50 <__pow5mult>
 800eab6:	4606      	mov	r6, r0
 800eab8:	2800      	cmp	r0, #0
 800eaba:	f43f aeb1 	beq.w	800e820 <_strtod_l+0x478>
 800eabe:	4601      	mov	r1, r0
 800eac0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 ff1a 	bl	800f8fc <__multiply>
 800eac8:	900e      	str	r0, [sp, #56]	; 0x38
 800eaca:	2800      	cmp	r0, #0
 800eacc:	f43f aea8 	beq.w	800e820 <_strtod_l+0x478>
 800ead0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 fdfa 	bl	800f6cc <_Bfree>
 800ead8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eadc:	9212      	str	r2, [sp, #72]	; 0x48
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f300 8093 	bgt.w	800ec0a <_strtod_l+0x862>
 800eae4:	9b07      	ldr	r3, [sp, #28]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	dd08      	ble.n	800eafc <_strtod_l+0x754>
 800eaea:	4639      	mov	r1, r7
 800eaec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f000 ffae 	bl	800fa50 <__pow5mult>
 800eaf4:	4607      	mov	r7, r0
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	f43f ae92 	beq.w	800e820 <_strtod_l+0x478>
 800eafc:	f1ba 0f00 	cmp.w	sl, #0
 800eb00:	dd08      	ble.n	800eb14 <_strtod_l+0x76c>
 800eb02:	4639      	mov	r1, r7
 800eb04:	4652      	mov	r2, sl
 800eb06:	4620      	mov	r0, r4
 800eb08:	f000 fffc 	bl	800fb04 <__lshift>
 800eb0c:	4607      	mov	r7, r0
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f43f ae86 	beq.w	800e820 <_strtod_l+0x478>
 800eb14:	f1bb 0f00 	cmp.w	fp, #0
 800eb18:	dd08      	ble.n	800eb2c <_strtod_l+0x784>
 800eb1a:	4631      	mov	r1, r6
 800eb1c:	465a      	mov	r2, fp
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f000 fff0 	bl	800fb04 <__lshift>
 800eb24:	4606      	mov	r6, r0
 800eb26:	2800      	cmp	r0, #0
 800eb28:	f43f ae7a 	beq.w	800e820 <_strtod_l+0x478>
 800eb2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eb2e:	463a      	mov	r2, r7
 800eb30:	4620      	mov	r0, r4
 800eb32:	f001 f873 	bl	800fc1c <__mdiff>
 800eb36:	4605      	mov	r5, r0
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	f43f ae71 	beq.w	800e820 <_strtod_l+0x478>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800eb44:	60c3      	str	r3, [r0, #12]
 800eb46:	4631      	mov	r1, r6
 800eb48:	f001 f84c 	bl	800fbe4 <__mcmp>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	da7d      	bge.n	800ec4c <_strtod_l+0x8a4>
 800eb50:	ea5a 0308 	orrs.w	r3, sl, r8
 800eb54:	f040 80a3 	bne.w	800ec9e <_strtod_l+0x8f6>
 800eb58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f040 809e 	bne.w	800ec9e <_strtod_l+0x8f6>
 800eb62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb66:	0d1b      	lsrs	r3, r3, #20
 800eb68:	051b      	lsls	r3, r3, #20
 800eb6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eb6e:	f240 8096 	bls.w	800ec9e <_strtod_l+0x8f6>
 800eb72:	696b      	ldr	r3, [r5, #20]
 800eb74:	b91b      	cbnz	r3, 800eb7e <_strtod_l+0x7d6>
 800eb76:	692b      	ldr	r3, [r5, #16]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	f340 8090 	ble.w	800ec9e <_strtod_l+0x8f6>
 800eb7e:	4629      	mov	r1, r5
 800eb80:	2201      	movs	r2, #1
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 ffbe 	bl	800fb04 <__lshift>
 800eb88:	4631      	mov	r1, r6
 800eb8a:	4605      	mov	r5, r0
 800eb8c:	f001 f82a 	bl	800fbe4 <__mcmp>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	f340 8084 	ble.w	800ec9e <_strtod_l+0x8f6>
 800eb96:	9904      	ldr	r1, [sp, #16]
 800eb98:	4a2b      	ldr	r2, [pc, #172]	; (800ec48 <_strtod_l+0x8a0>)
 800eb9a:	464b      	mov	r3, r9
 800eb9c:	2900      	cmp	r1, #0
 800eb9e:	f000 809d 	beq.w	800ecdc <_strtod_l+0x934>
 800eba2:	ea02 0109 	and.w	r1, r2, r9
 800eba6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ebaa:	f300 8097 	bgt.w	800ecdc <_strtod_l+0x934>
 800ebae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ebb2:	f77f aea5 	ble.w	800e900 <_strtod_l+0x558>
 800ebb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ec38 <_strtod_l+0x890>
 800ebba:	ec49 8b16 	vmov	d6, r8, r9
 800ebbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ebc2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ebc6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	bf08      	it	eq
 800ebce:	2322      	moveq	r3, #34	; 0x22
 800ebd0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ebd4:	bf08      	it	eq
 800ebd6:	6023      	streq	r3, [r4, #0]
 800ebd8:	e62c      	b.n	800e834 <_strtod_l+0x48c>
 800ebda:	f04f 31ff 	mov.w	r1, #4294967295
 800ebde:	fa01 f202 	lsl.w	r2, r1, r2
 800ebe2:	ea02 0808 	and.w	r8, r2, r8
 800ebe6:	e6d9      	b.n	800e99c <_strtod_l+0x5f4>
 800ebe8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ebec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ebf0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ebf4:	33e2      	adds	r3, #226	; 0xe2
 800ebf6:	fa00 f303 	lsl.w	r3, r0, r3
 800ebfa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ebfe:	e73f      	b.n	800ea80 <_strtod_l+0x6d8>
 800ec00:	2200      	movs	r2, #0
 800ec02:	2301      	movs	r3, #1
 800ec04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ec08:	e73a      	b.n	800ea80 <_strtod_l+0x6d8>
 800ec0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f000 ff78 	bl	800fb04 <__lshift>
 800ec14:	9012      	str	r0, [sp, #72]	; 0x48
 800ec16:	2800      	cmp	r0, #0
 800ec18:	f47f af64 	bne.w	800eae4 <_strtod_l+0x73c>
 800ec1c:	e600      	b.n	800e820 <_strtod_l+0x478>
 800ec1e:	bf00      	nop
 800ec20:	94a03595 	.word	0x94a03595
 800ec24:	3fcfffff 	.word	0x3fcfffff
 800ec28:	94a03595 	.word	0x94a03595
 800ec2c:	3fdfffff 	.word	0x3fdfffff
 800ec30:	35afe535 	.word	0x35afe535
 800ec34:	3fe00000 	.word	0x3fe00000
 800ec38:	00000000 	.word	0x00000000
 800ec3c:	39500000 	.word	0x39500000
 800ec40:	080119d8 	.word	0x080119d8
 800ec44:	fffffc02 	.word	0xfffffc02
 800ec48:	7ff00000 	.word	0x7ff00000
 800ec4c:	46cb      	mov	fp, r9
 800ec4e:	d15f      	bne.n	800ed10 <_strtod_l+0x968>
 800ec50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec54:	f1ba 0f00 	cmp.w	sl, #0
 800ec58:	d02a      	beq.n	800ecb0 <_strtod_l+0x908>
 800ec5a:	4aa7      	ldr	r2, [pc, #668]	; (800eef8 <_strtod_l+0xb50>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d12b      	bne.n	800ecb8 <_strtod_l+0x910>
 800ec60:	9b04      	ldr	r3, [sp, #16]
 800ec62:	4642      	mov	r2, r8
 800ec64:	b1fb      	cbz	r3, 800eca6 <_strtod_l+0x8fe>
 800ec66:	4ba5      	ldr	r3, [pc, #660]	; (800eefc <_strtod_l+0xb54>)
 800ec68:	ea09 0303 	and.w	r3, r9, r3
 800ec6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ec70:	f04f 31ff 	mov.w	r1, #4294967295
 800ec74:	d81a      	bhi.n	800ecac <_strtod_l+0x904>
 800ec76:	0d1b      	lsrs	r3, r3, #20
 800ec78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d119      	bne.n	800ecb8 <_strtod_l+0x910>
 800ec84:	4b9e      	ldr	r3, [pc, #632]	; (800ef00 <_strtod_l+0xb58>)
 800ec86:	459b      	cmp	fp, r3
 800ec88:	d102      	bne.n	800ec90 <_strtod_l+0x8e8>
 800ec8a:	3201      	adds	r2, #1
 800ec8c:	f43f adc8 	beq.w	800e820 <_strtod_l+0x478>
 800ec90:	4b9a      	ldr	r3, [pc, #616]	; (800eefc <_strtod_l+0xb54>)
 800ec92:	ea0b 0303 	and.w	r3, fp, r3
 800ec96:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ec9a:	f04f 0800 	mov.w	r8, #0
 800ec9e:	9b04      	ldr	r3, [sp, #16]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d188      	bne.n	800ebb6 <_strtod_l+0x80e>
 800eca4:	e5c6      	b.n	800e834 <_strtod_l+0x48c>
 800eca6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecaa:	e7e9      	b.n	800ec80 <_strtod_l+0x8d8>
 800ecac:	460b      	mov	r3, r1
 800ecae:	e7e7      	b.n	800ec80 <_strtod_l+0x8d8>
 800ecb0:	ea53 0308 	orrs.w	r3, r3, r8
 800ecb4:	f43f af6f 	beq.w	800eb96 <_strtod_l+0x7ee>
 800ecb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecba:	b1cb      	cbz	r3, 800ecf0 <_strtod_l+0x948>
 800ecbc:	ea13 0f0b 	tst.w	r3, fp
 800ecc0:	d0ed      	beq.n	800ec9e <_strtod_l+0x8f6>
 800ecc2:	9a04      	ldr	r2, [sp, #16]
 800ecc4:	4640      	mov	r0, r8
 800ecc6:	4649      	mov	r1, r9
 800ecc8:	f1ba 0f00 	cmp.w	sl, #0
 800eccc:	d014      	beq.n	800ecf8 <_strtod_l+0x950>
 800ecce:	f7ff fb51 	bl	800e374 <sulp>
 800ecd2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ecd6:	ec59 8b17 	vmov	r8, r9, d7
 800ecda:	e7e0      	b.n	800ec9e <_strtod_l+0x8f6>
 800ecdc:	4013      	ands	r3, r2
 800ecde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ece2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ece6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ecea:	f04f 38ff 	mov.w	r8, #4294967295
 800ecee:	e7d6      	b.n	800ec9e <_strtod_l+0x8f6>
 800ecf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecf2:	ea13 0f08 	tst.w	r3, r8
 800ecf6:	e7e3      	b.n	800ecc0 <_strtod_l+0x918>
 800ecf8:	f7ff fb3c 	bl	800e374 <sulp>
 800ecfc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ed00:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ed04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed08:	ec59 8b10 	vmov	r8, r9, d0
 800ed0c:	d1c7      	bne.n	800ec9e <_strtod_l+0x8f6>
 800ed0e:	e5f7      	b.n	800e900 <_strtod_l+0x558>
 800ed10:	4631      	mov	r1, r6
 800ed12:	4628      	mov	r0, r5
 800ed14:	f001 f8e4 	bl	800fee0 <__ratio>
 800ed18:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ed1c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ed20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed24:	d865      	bhi.n	800edf2 <_strtod_l+0xa4a>
 800ed26:	f1ba 0f00 	cmp.w	sl, #0
 800ed2a:	d042      	beq.n	800edb2 <_strtod_l+0xa0a>
 800ed2c:	4b75      	ldr	r3, [pc, #468]	; (800ef04 <_strtod_l+0xb5c>)
 800ed2e:	2200      	movs	r2, #0
 800ed30:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ed34:	4871      	ldr	r0, [pc, #452]	; (800eefc <_strtod_l+0xb54>)
 800ed36:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800ef10 <_strtod_l+0xb68>
 800ed3a:	ea0b 0100 	and.w	r1, fp, r0
 800ed3e:	4561      	cmp	r1, ip
 800ed40:	f040 808e 	bne.w	800ee60 <_strtod_l+0xab8>
 800ed44:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ed48:	ec49 8b10 	vmov	d0, r8, r9
 800ed4c:	ec43 2b1c 	vmov	d12, r2, r3
 800ed50:	910a      	str	r1, [sp, #40]	; 0x28
 800ed52:	f000 ffed 	bl	800fd30 <__ulp>
 800ed56:	ec49 8b1e 	vmov	d14, r8, r9
 800ed5a:	4868      	ldr	r0, [pc, #416]	; (800eefc <_strtod_l+0xb54>)
 800ed5c:	eeac eb00 	vfma.f64	d14, d12, d0
 800ed60:	ee1e 3a90 	vmov	r3, s29
 800ed64:	4a68      	ldr	r2, [pc, #416]	; (800ef08 <_strtod_l+0xb60>)
 800ed66:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ed68:	4018      	ands	r0, r3
 800ed6a:	4290      	cmp	r0, r2
 800ed6c:	ec59 8b1e 	vmov	r8, r9, d14
 800ed70:	d94e      	bls.n	800ee10 <_strtod_l+0xa68>
 800ed72:	ee18 3a90 	vmov	r3, s17
 800ed76:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d104      	bne.n	800ed88 <_strtod_l+0x9e0>
 800ed7e:	ee18 3a10 	vmov	r3, s16
 800ed82:	3301      	adds	r3, #1
 800ed84:	f43f ad4c 	beq.w	800e820 <_strtod_l+0x478>
 800ed88:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ef00 <_strtod_l+0xb58>
 800ed8c:	f04f 38ff 	mov.w	r8, #4294967295
 800ed90:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 fc9a 	bl	800f6cc <_Bfree>
 800ed98:	4639      	mov	r1, r7
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 fc96 	bl	800f6cc <_Bfree>
 800eda0:	4631      	mov	r1, r6
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 fc92 	bl	800f6cc <_Bfree>
 800eda8:	4629      	mov	r1, r5
 800edaa:	4620      	mov	r0, r4
 800edac:	f000 fc8e 	bl	800f6cc <_Bfree>
 800edb0:	e619      	b.n	800e9e6 <_strtod_l+0x63e>
 800edb2:	f1b8 0f00 	cmp.w	r8, #0
 800edb6:	d112      	bne.n	800edde <_strtod_l+0xa36>
 800edb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edbc:	b9b3      	cbnz	r3, 800edec <_strtod_l+0xa44>
 800edbe:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800edc2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800edc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800edce:	bf58      	it	pl
 800edd0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800edd4:	eeb1 7b4d 	vneg.f64	d7, d13
 800edd8:	ec53 2b17 	vmov	r2, r3, d7
 800eddc:	e7aa      	b.n	800ed34 <_strtod_l+0x98c>
 800edde:	f1b8 0f01 	cmp.w	r8, #1
 800ede2:	d103      	bne.n	800edec <_strtod_l+0xa44>
 800ede4:	f1b9 0f00 	cmp.w	r9, #0
 800ede8:	f43f ad8a 	beq.w	800e900 <_strtod_l+0x558>
 800edec:	4b47      	ldr	r3, [pc, #284]	; (800ef0c <_strtod_l+0xb64>)
 800edee:	2200      	movs	r2, #0
 800edf0:	e79e      	b.n	800ed30 <_strtod_l+0x988>
 800edf2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800edf6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800edfa:	f1ba 0f00 	cmp.w	sl, #0
 800edfe:	d104      	bne.n	800ee0a <_strtod_l+0xa62>
 800ee00:	eeb1 7b4d 	vneg.f64	d7, d13
 800ee04:	ec53 2b17 	vmov	r2, r3, d7
 800ee08:	e794      	b.n	800ed34 <_strtod_l+0x98c>
 800ee0a:	eeb0 7b4d 	vmov.f64	d7, d13
 800ee0e:	e7f9      	b.n	800ee04 <_strtod_l+0xa5c>
 800ee10:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ee14:	9b04      	ldr	r3, [sp, #16]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1ba      	bne.n	800ed90 <_strtod_l+0x9e8>
 800ee1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee1e:	0d1b      	lsrs	r3, r3, #20
 800ee20:	051b      	lsls	r3, r3, #20
 800ee22:	4299      	cmp	r1, r3
 800ee24:	d1b4      	bne.n	800ed90 <_strtod_l+0x9e8>
 800ee26:	ec51 0b1d 	vmov	r0, r1, d13
 800ee2a:	f7f1 fc85 	bl	8000738 <__aeabi_d2lz>
 800ee2e:	f7f1 fc3d 	bl	80006ac <__aeabi_l2d>
 800ee32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee36:	ec41 0b17 	vmov	d7, r0, r1
 800ee3a:	ea43 0308 	orr.w	r3, r3, r8
 800ee3e:	ea53 030a 	orrs.w	r3, r3, sl
 800ee42:	ee3d db47 	vsub.f64	d13, d13, d7
 800ee46:	d03c      	beq.n	800eec2 <_strtod_l+0xb1a>
 800ee48:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ee4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee50:	f53f acf0 	bmi.w	800e834 <_strtod_l+0x48c>
 800ee54:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ee58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5c:	dd98      	ble.n	800ed90 <_strtod_l+0x9e8>
 800ee5e:	e4e9      	b.n	800e834 <_strtod_l+0x48c>
 800ee60:	9804      	ldr	r0, [sp, #16]
 800ee62:	b1f0      	cbz	r0, 800eea2 <_strtod_l+0xafa>
 800ee64:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ee68:	d81b      	bhi.n	800eea2 <_strtod_l+0xafa>
 800ee6a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800eef0 <_strtod_l+0xb48>
 800ee6e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ee72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee76:	d811      	bhi.n	800ee9c <_strtod_l+0xaf4>
 800ee78:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ee7c:	ee1d 3a10 	vmov	r3, s26
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	bf38      	it	cc
 800ee84:	2301      	movcc	r3, #1
 800ee86:	ee0d 3a10 	vmov	s26, r3
 800ee8a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ee8e:	f1ba 0f00 	cmp.w	sl, #0
 800ee92:	d113      	bne.n	800eebc <_strtod_l+0xb14>
 800ee94:	eeb1 7b4d 	vneg.f64	d7, d13
 800ee98:	ec53 2b17 	vmov	r2, r3, d7
 800ee9c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800eea0:	1a43      	subs	r3, r0, r1
 800eea2:	eeb0 0b48 	vmov.f64	d0, d8
 800eea6:	ec43 2b1c 	vmov	d12, r2, r3
 800eeaa:	910a      	str	r1, [sp, #40]	; 0x28
 800eeac:	f000 ff40 	bl	800fd30 <__ulp>
 800eeb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eeb2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800eeb6:	ec59 8b18 	vmov	r8, r9, d8
 800eeba:	e7ab      	b.n	800ee14 <_strtod_l+0xa6c>
 800eebc:	eeb0 7b4d 	vmov.f64	d7, d13
 800eec0:	e7ea      	b.n	800ee98 <_strtod_l+0xaf0>
 800eec2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	f57f af61 	bpl.w	800ed90 <_strtod_l+0x9e8>
 800eece:	e4b1      	b.n	800e834 <_strtod_l+0x48c>
 800eed0:	2300      	movs	r3, #0
 800eed2:	9308      	str	r3, [sp, #32]
 800eed4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eed8:	6013      	str	r3, [r2, #0]
 800eeda:	f7ff baad 	b.w	800e438 <_strtod_l+0x90>
 800eede:	2a65      	cmp	r2, #101	; 0x65
 800eee0:	f43f ab9f 	beq.w	800e622 <_strtod_l+0x27a>
 800eee4:	2a45      	cmp	r2, #69	; 0x45
 800eee6:	f43f ab9c 	beq.w	800e622 <_strtod_l+0x27a>
 800eeea:	2101      	movs	r1, #1
 800eeec:	f7ff bbd4 	b.w	800e698 <_strtod_l+0x2f0>
 800eef0:	ffc00000 	.word	0xffc00000
 800eef4:	41dfffff 	.word	0x41dfffff
 800eef8:	000fffff 	.word	0x000fffff
 800eefc:	7ff00000 	.word	0x7ff00000
 800ef00:	7fefffff 	.word	0x7fefffff
 800ef04:	3ff00000 	.word	0x3ff00000
 800ef08:	7c9fffff 	.word	0x7c9fffff
 800ef0c:	bff00000 	.word	0xbff00000
 800ef10:	7fe00000 	.word	0x7fe00000

0800ef14 <strtod>:
 800ef14:	460a      	mov	r2, r1
 800ef16:	4601      	mov	r1, r0
 800ef18:	4802      	ldr	r0, [pc, #8]	; (800ef24 <strtod+0x10>)
 800ef1a:	4b03      	ldr	r3, [pc, #12]	; (800ef28 <strtod+0x14>)
 800ef1c:	6800      	ldr	r0, [r0, #0]
 800ef1e:	f7ff ba43 	b.w	800e3a8 <_strtod_l>
 800ef22:	bf00      	nop
 800ef24:	24000084 	.word	0x24000084
 800ef28:	240000ec 	.word	0x240000ec

0800ef2c <rshift>:
 800ef2c:	6903      	ldr	r3, [r0, #16]
 800ef2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ef3a:	f100 0414 	add.w	r4, r0, #20
 800ef3e:	dd45      	ble.n	800efcc <rshift+0xa0>
 800ef40:	f011 011f 	ands.w	r1, r1, #31
 800ef44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef4c:	d10c      	bne.n	800ef68 <rshift+0x3c>
 800ef4e:	f100 0710 	add.w	r7, r0, #16
 800ef52:	4629      	mov	r1, r5
 800ef54:	42b1      	cmp	r1, r6
 800ef56:	d334      	bcc.n	800efc2 <rshift+0x96>
 800ef58:	1a9b      	subs	r3, r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	1eea      	subs	r2, r5, #3
 800ef5e:	4296      	cmp	r6, r2
 800ef60:	bf38      	it	cc
 800ef62:	2300      	movcc	r3, #0
 800ef64:	4423      	add	r3, r4
 800ef66:	e015      	b.n	800ef94 <rshift+0x68>
 800ef68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef6c:	f1c1 0820 	rsb	r8, r1, #32
 800ef70:	40cf      	lsrs	r7, r1
 800ef72:	f105 0e04 	add.w	lr, r5, #4
 800ef76:	46a1      	mov	r9, r4
 800ef78:	4576      	cmp	r6, lr
 800ef7a:	46f4      	mov	ip, lr
 800ef7c:	d815      	bhi.n	800efaa <rshift+0x7e>
 800ef7e:	1a9a      	subs	r2, r3, r2
 800ef80:	0092      	lsls	r2, r2, #2
 800ef82:	3a04      	subs	r2, #4
 800ef84:	3501      	adds	r5, #1
 800ef86:	42ae      	cmp	r6, r5
 800ef88:	bf38      	it	cc
 800ef8a:	2200      	movcc	r2, #0
 800ef8c:	18a3      	adds	r3, r4, r2
 800ef8e:	50a7      	str	r7, [r4, r2]
 800ef90:	b107      	cbz	r7, 800ef94 <rshift+0x68>
 800ef92:	3304      	adds	r3, #4
 800ef94:	1b1a      	subs	r2, r3, r4
 800ef96:	42a3      	cmp	r3, r4
 800ef98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef9c:	bf08      	it	eq
 800ef9e:	2300      	moveq	r3, #0
 800efa0:	6102      	str	r2, [r0, #16]
 800efa2:	bf08      	it	eq
 800efa4:	6143      	streq	r3, [r0, #20]
 800efa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efaa:	f8dc c000 	ldr.w	ip, [ip]
 800efae:	fa0c fc08 	lsl.w	ip, ip, r8
 800efb2:	ea4c 0707 	orr.w	r7, ip, r7
 800efb6:	f849 7b04 	str.w	r7, [r9], #4
 800efba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800efbe:	40cf      	lsrs	r7, r1
 800efc0:	e7da      	b.n	800ef78 <rshift+0x4c>
 800efc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800efc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800efca:	e7c3      	b.n	800ef54 <rshift+0x28>
 800efcc:	4623      	mov	r3, r4
 800efce:	e7e1      	b.n	800ef94 <rshift+0x68>

0800efd0 <__hexdig_fun>:
 800efd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800efd4:	2b09      	cmp	r3, #9
 800efd6:	d802      	bhi.n	800efde <__hexdig_fun+0xe>
 800efd8:	3820      	subs	r0, #32
 800efda:	b2c0      	uxtb	r0, r0
 800efdc:	4770      	bx	lr
 800efde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800efe2:	2b05      	cmp	r3, #5
 800efe4:	d801      	bhi.n	800efea <__hexdig_fun+0x1a>
 800efe6:	3847      	subs	r0, #71	; 0x47
 800efe8:	e7f7      	b.n	800efda <__hexdig_fun+0xa>
 800efea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800efee:	2b05      	cmp	r3, #5
 800eff0:	d801      	bhi.n	800eff6 <__hexdig_fun+0x26>
 800eff2:	3827      	subs	r0, #39	; 0x27
 800eff4:	e7f1      	b.n	800efda <__hexdig_fun+0xa>
 800eff6:	2000      	movs	r0, #0
 800eff8:	4770      	bx	lr
	...

0800effc <__gethex>:
 800effc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	ed2d 8b02 	vpush	{d8}
 800f004:	b089      	sub	sp, #36	; 0x24
 800f006:	ee08 0a10 	vmov	s16, r0
 800f00a:	9304      	str	r3, [sp, #16]
 800f00c:	4bb4      	ldr	r3, [pc, #720]	; (800f2e0 <__gethex+0x2e4>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	9301      	str	r3, [sp, #4]
 800f012:	4618      	mov	r0, r3
 800f014:	468b      	mov	fp, r1
 800f016:	4690      	mov	r8, r2
 800f018:	f7f1 f962 	bl	80002e0 <strlen>
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	f8db 2000 	ldr.w	r2, [fp]
 800f022:	4403      	add	r3, r0
 800f024:	4682      	mov	sl, r0
 800f026:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f02a:	9305      	str	r3, [sp, #20]
 800f02c:	1c93      	adds	r3, r2, #2
 800f02e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f032:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f036:	32fe      	adds	r2, #254	; 0xfe
 800f038:	18d1      	adds	r1, r2, r3
 800f03a:	461f      	mov	r7, r3
 800f03c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f040:	9100      	str	r1, [sp, #0]
 800f042:	2830      	cmp	r0, #48	; 0x30
 800f044:	d0f8      	beq.n	800f038 <__gethex+0x3c>
 800f046:	f7ff ffc3 	bl	800efd0 <__hexdig_fun>
 800f04a:	4604      	mov	r4, r0
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d13a      	bne.n	800f0c6 <__gethex+0xca>
 800f050:	9901      	ldr	r1, [sp, #4]
 800f052:	4652      	mov	r2, sl
 800f054:	4638      	mov	r0, r7
 800f056:	f001 f87b 	bl	8010150 <strncmp>
 800f05a:	4605      	mov	r5, r0
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d168      	bne.n	800f132 <__gethex+0x136>
 800f060:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f064:	eb07 060a 	add.w	r6, r7, sl
 800f068:	f7ff ffb2 	bl	800efd0 <__hexdig_fun>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d062      	beq.n	800f136 <__gethex+0x13a>
 800f070:	4633      	mov	r3, r6
 800f072:	7818      	ldrb	r0, [r3, #0]
 800f074:	2830      	cmp	r0, #48	; 0x30
 800f076:	461f      	mov	r7, r3
 800f078:	f103 0301 	add.w	r3, r3, #1
 800f07c:	d0f9      	beq.n	800f072 <__gethex+0x76>
 800f07e:	f7ff ffa7 	bl	800efd0 <__hexdig_fun>
 800f082:	2301      	movs	r3, #1
 800f084:	fab0 f480 	clz	r4, r0
 800f088:	0964      	lsrs	r4, r4, #5
 800f08a:	4635      	mov	r5, r6
 800f08c:	9300      	str	r3, [sp, #0]
 800f08e:	463a      	mov	r2, r7
 800f090:	4616      	mov	r6, r2
 800f092:	3201      	adds	r2, #1
 800f094:	7830      	ldrb	r0, [r6, #0]
 800f096:	f7ff ff9b 	bl	800efd0 <__hexdig_fun>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d1f8      	bne.n	800f090 <__gethex+0x94>
 800f09e:	9901      	ldr	r1, [sp, #4]
 800f0a0:	4652      	mov	r2, sl
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f001 f854 	bl	8010150 <strncmp>
 800f0a8:	b980      	cbnz	r0, 800f0cc <__gethex+0xd0>
 800f0aa:	b94d      	cbnz	r5, 800f0c0 <__gethex+0xc4>
 800f0ac:	eb06 050a 	add.w	r5, r6, sl
 800f0b0:	462a      	mov	r2, r5
 800f0b2:	4616      	mov	r6, r2
 800f0b4:	3201      	adds	r2, #1
 800f0b6:	7830      	ldrb	r0, [r6, #0]
 800f0b8:	f7ff ff8a 	bl	800efd0 <__hexdig_fun>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d1f8      	bne.n	800f0b2 <__gethex+0xb6>
 800f0c0:	1bad      	subs	r5, r5, r6
 800f0c2:	00ad      	lsls	r5, r5, #2
 800f0c4:	e004      	b.n	800f0d0 <__gethex+0xd4>
 800f0c6:	2400      	movs	r4, #0
 800f0c8:	4625      	mov	r5, r4
 800f0ca:	e7e0      	b.n	800f08e <__gethex+0x92>
 800f0cc:	2d00      	cmp	r5, #0
 800f0ce:	d1f7      	bne.n	800f0c0 <__gethex+0xc4>
 800f0d0:	7833      	ldrb	r3, [r6, #0]
 800f0d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0d6:	2b50      	cmp	r3, #80	; 0x50
 800f0d8:	d13b      	bne.n	800f152 <__gethex+0x156>
 800f0da:	7873      	ldrb	r3, [r6, #1]
 800f0dc:	2b2b      	cmp	r3, #43	; 0x2b
 800f0de:	d02c      	beq.n	800f13a <__gethex+0x13e>
 800f0e0:	2b2d      	cmp	r3, #45	; 0x2d
 800f0e2:	d02e      	beq.n	800f142 <__gethex+0x146>
 800f0e4:	1c71      	adds	r1, r6, #1
 800f0e6:	f04f 0900 	mov.w	r9, #0
 800f0ea:	7808      	ldrb	r0, [r1, #0]
 800f0ec:	f7ff ff70 	bl	800efd0 <__hexdig_fun>
 800f0f0:	1e43      	subs	r3, r0, #1
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	2b18      	cmp	r3, #24
 800f0f6:	d82c      	bhi.n	800f152 <__gethex+0x156>
 800f0f8:	f1a0 0210 	sub.w	r2, r0, #16
 800f0fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f100:	f7ff ff66 	bl	800efd0 <__hexdig_fun>
 800f104:	1e43      	subs	r3, r0, #1
 800f106:	b2db      	uxtb	r3, r3
 800f108:	2b18      	cmp	r3, #24
 800f10a:	d91d      	bls.n	800f148 <__gethex+0x14c>
 800f10c:	f1b9 0f00 	cmp.w	r9, #0
 800f110:	d000      	beq.n	800f114 <__gethex+0x118>
 800f112:	4252      	negs	r2, r2
 800f114:	4415      	add	r5, r2
 800f116:	f8cb 1000 	str.w	r1, [fp]
 800f11a:	b1e4      	cbz	r4, 800f156 <__gethex+0x15a>
 800f11c:	9b00      	ldr	r3, [sp, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bf14      	ite	ne
 800f122:	2700      	movne	r7, #0
 800f124:	2706      	moveq	r7, #6
 800f126:	4638      	mov	r0, r7
 800f128:	b009      	add	sp, #36	; 0x24
 800f12a:	ecbd 8b02 	vpop	{d8}
 800f12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f132:	463e      	mov	r6, r7
 800f134:	4625      	mov	r5, r4
 800f136:	2401      	movs	r4, #1
 800f138:	e7ca      	b.n	800f0d0 <__gethex+0xd4>
 800f13a:	f04f 0900 	mov.w	r9, #0
 800f13e:	1cb1      	adds	r1, r6, #2
 800f140:	e7d3      	b.n	800f0ea <__gethex+0xee>
 800f142:	f04f 0901 	mov.w	r9, #1
 800f146:	e7fa      	b.n	800f13e <__gethex+0x142>
 800f148:	230a      	movs	r3, #10
 800f14a:	fb03 0202 	mla	r2, r3, r2, r0
 800f14e:	3a10      	subs	r2, #16
 800f150:	e7d4      	b.n	800f0fc <__gethex+0x100>
 800f152:	4631      	mov	r1, r6
 800f154:	e7df      	b.n	800f116 <__gethex+0x11a>
 800f156:	1bf3      	subs	r3, r6, r7
 800f158:	3b01      	subs	r3, #1
 800f15a:	4621      	mov	r1, r4
 800f15c:	2b07      	cmp	r3, #7
 800f15e:	dc0b      	bgt.n	800f178 <__gethex+0x17c>
 800f160:	ee18 0a10 	vmov	r0, s16
 800f164:	f000 fa72 	bl	800f64c <_Balloc>
 800f168:	4604      	mov	r4, r0
 800f16a:	b940      	cbnz	r0, 800f17e <__gethex+0x182>
 800f16c:	4b5d      	ldr	r3, [pc, #372]	; (800f2e4 <__gethex+0x2e8>)
 800f16e:	4602      	mov	r2, r0
 800f170:	21de      	movs	r1, #222	; 0xde
 800f172:	485d      	ldr	r0, [pc, #372]	; (800f2e8 <__gethex+0x2ec>)
 800f174:	f001 f80e 	bl	8010194 <__assert_func>
 800f178:	3101      	adds	r1, #1
 800f17a:	105b      	asrs	r3, r3, #1
 800f17c:	e7ee      	b.n	800f15c <__gethex+0x160>
 800f17e:	f100 0914 	add.w	r9, r0, #20
 800f182:	f04f 0b00 	mov.w	fp, #0
 800f186:	f1ca 0301 	rsb	r3, sl, #1
 800f18a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f18e:	f8cd b000 	str.w	fp, [sp]
 800f192:	9306      	str	r3, [sp, #24]
 800f194:	42b7      	cmp	r7, r6
 800f196:	d340      	bcc.n	800f21a <__gethex+0x21e>
 800f198:	9802      	ldr	r0, [sp, #8]
 800f19a:	9b00      	ldr	r3, [sp, #0]
 800f19c:	f840 3b04 	str.w	r3, [r0], #4
 800f1a0:	eba0 0009 	sub.w	r0, r0, r9
 800f1a4:	1080      	asrs	r0, r0, #2
 800f1a6:	0146      	lsls	r6, r0, #5
 800f1a8:	6120      	str	r0, [r4, #16]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 fb40 	bl	800f830 <__hi0bits>
 800f1b0:	1a30      	subs	r0, r6, r0
 800f1b2:	f8d8 6000 	ldr.w	r6, [r8]
 800f1b6:	42b0      	cmp	r0, r6
 800f1b8:	dd63      	ble.n	800f282 <__gethex+0x286>
 800f1ba:	1b87      	subs	r7, r0, r6
 800f1bc:	4639      	mov	r1, r7
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f000 fee1 	bl	800ff86 <__any_on>
 800f1c4:	4682      	mov	sl, r0
 800f1c6:	b1a8      	cbz	r0, 800f1f4 <__gethex+0x1f8>
 800f1c8:	1e7b      	subs	r3, r7, #1
 800f1ca:	1159      	asrs	r1, r3, #5
 800f1cc:	f003 021f 	and.w	r2, r3, #31
 800f1d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f1d4:	f04f 0a01 	mov.w	sl, #1
 800f1d8:	fa0a f202 	lsl.w	r2, sl, r2
 800f1dc:	420a      	tst	r2, r1
 800f1de:	d009      	beq.n	800f1f4 <__gethex+0x1f8>
 800f1e0:	4553      	cmp	r3, sl
 800f1e2:	dd05      	ble.n	800f1f0 <__gethex+0x1f4>
 800f1e4:	1eb9      	subs	r1, r7, #2
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f000 fecd 	bl	800ff86 <__any_on>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	d145      	bne.n	800f27c <__gethex+0x280>
 800f1f0:	f04f 0a02 	mov.w	sl, #2
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f7ff fe98 	bl	800ef2c <rshift>
 800f1fc:	443d      	add	r5, r7
 800f1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f202:	42ab      	cmp	r3, r5
 800f204:	da4c      	bge.n	800f2a0 <__gethex+0x2a4>
 800f206:	ee18 0a10 	vmov	r0, s16
 800f20a:	4621      	mov	r1, r4
 800f20c:	f000 fa5e 	bl	800f6cc <_Bfree>
 800f210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f212:	2300      	movs	r3, #0
 800f214:	6013      	str	r3, [r2, #0]
 800f216:	27a3      	movs	r7, #163	; 0xa3
 800f218:	e785      	b.n	800f126 <__gethex+0x12a>
 800f21a:	1e73      	subs	r3, r6, #1
 800f21c:	9a05      	ldr	r2, [sp, #20]
 800f21e:	9303      	str	r3, [sp, #12]
 800f220:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f224:	4293      	cmp	r3, r2
 800f226:	d019      	beq.n	800f25c <__gethex+0x260>
 800f228:	f1bb 0f20 	cmp.w	fp, #32
 800f22c:	d107      	bne.n	800f23e <__gethex+0x242>
 800f22e:	9b02      	ldr	r3, [sp, #8]
 800f230:	9a00      	ldr	r2, [sp, #0]
 800f232:	f843 2b04 	str.w	r2, [r3], #4
 800f236:	9302      	str	r3, [sp, #8]
 800f238:	2300      	movs	r3, #0
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	469b      	mov	fp, r3
 800f23e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f242:	f7ff fec5 	bl	800efd0 <__hexdig_fun>
 800f246:	9b00      	ldr	r3, [sp, #0]
 800f248:	f000 000f 	and.w	r0, r0, #15
 800f24c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f250:	4303      	orrs	r3, r0
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	f10b 0b04 	add.w	fp, fp, #4
 800f258:	9b03      	ldr	r3, [sp, #12]
 800f25a:	e00d      	b.n	800f278 <__gethex+0x27c>
 800f25c:	9b03      	ldr	r3, [sp, #12]
 800f25e:	9a06      	ldr	r2, [sp, #24]
 800f260:	4413      	add	r3, r2
 800f262:	42bb      	cmp	r3, r7
 800f264:	d3e0      	bcc.n	800f228 <__gethex+0x22c>
 800f266:	4618      	mov	r0, r3
 800f268:	9901      	ldr	r1, [sp, #4]
 800f26a:	9307      	str	r3, [sp, #28]
 800f26c:	4652      	mov	r2, sl
 800f26e:	f000 ff6f 	bl	8010150 <strncmp>
 800f272:	9b07      	ldr	r3, [sp, #28]
 800f274:	2800      	cmp	r0, #0
 800f276:	d1d7      	bne.n	800f228 <__gethex+0x22c>
 800f278:	461e      	mov	r6, r3
 800f27a:	e78b      	b.n	800f194 <__gethex+0x198>
 800f27c:	f04f 0a03 	mov.w	sl, #3
 800f280:	e7b8      	b.n	800f1f4 <__gethex+0x1f8>
 800f282:	da0a      	bge.n	800f29a <__gethex+0x29e>
 800f284:	1a37      	subs	r7, r6, r0
 800f286:	4621      	mov	r1, r4
 800f288:	ee18 0a10 	vmov	r0, s16
 800f28c:	463a      	mov	r2, r7
 800f28e:	f000 fc39 	bl	800fb04 <__lshift>
 800f292:	1bed      	subs	r5, r5, r7
 800f294:	4604      	mov	r4, r0
 800f296:	f100 0914 	add.w	r9, r0, #20
 800f29a:	f04f 0a00 	mov.w	sl, #0
 800f29e:	e7ae      	b.n	800f1fe <__gethex+0x202>
 800f2a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f2a4:	42a8      	cmp	r0, r5
 800f2a6:	dd72      	ble.n	800f38e <__gethex+0x392>
 800f2a8:	1b45      	subs	r5, r0, r5
 800f2aa:	42ae      	cmp	r6, r5
 800f2ac:	dc36      	bgt.n	800f31c <__gethex+0x320>
 800f2ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d02a      	beq.n	800f30c <__gethex+0x310>
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	d02c      	beq.n	800f314 <__gethex+0x318>
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d11c      	bne.n	800f2f8 <__gethex+0x2fc>
 800f2be:	42ae      	cmp	r6, r5
 800f2c0:	d11a      	bne.n	800f2f8 <__gethex+0x2fc>
 800f2c2:	2e01      	cmp	r6, #1
 800f2c4:	d112      	bne.n	800f2ec <__gethex+0x2f0>
 800f2c6:	9a04      	ldr	r2, [sp, #16]
 800f2c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f2cc:	6013      	str	r3, [r2, #0]
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	6123      	str	r3, [r4, #16]
 800f2d2:	f8c9 3000 	str.w	r3, [r9]
 800f2d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2d8:	2762      	movs	r7, #98	; 0x62
 800f2da:	601c      	str	r4, [r3, #0]
 800f2dc:	e723      	b.n	800f126 <__gethex+0x12a>
 800f2de:	bf00      	nop
 800f2e0:	08011a78 	.word	0x08011a78
 800f2e4:	08011a00 	.word	0x08011a00
 800f2e8:	08011a11 	.word	0x08011a11
 800f2ec:	1e71      	subs	r1, r6, #1
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f000 fe49 	bl	800ff86 <__any_on>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d1e6      	bne.n	800f2c6 <__gethex+0x2ca>
 800f2f8:	ee18 0a10 	vmov	r0, s16
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f000 f9e5 	bl	800f6cc <_Bfree>
 800f302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f304:	2300      	movs	r3, #0
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	2750      	movs	r7, #80	; 0x50
 800f30a:	e70c      	b.n	800f126 <__gethex+0x12a>
 800f30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1f2      	bne.n	800f2f8 <__gethex+0x2fc>
 800f312:	e7d8      	b.n	800f2c6 <__gethex+0x2ca>
 800f314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1d5      	bne.n	800f2c6 <__gethex+0x2ca>
 800f31a:	e7ed      	b.n	800f2f8 <__gethex+0x2fc>
 800f31c:	1e6f      	subs	r7, r5, #1
 800f31e:	f1ba 0f00 	cmp.w	sl, #0
 800f322:	d131      	bne.n	800f388 <__gethex+0x38c>
 800f324:	b127      	cbz	r7, 800f330 <__gethex+0x334>
 800f326:	4639      	mov	r1, r7
 800f328:	4620      	mov	r0, r4
 800f32a:	f000 fe2c 	bl	800ff86 <__any_on>
 800f32e:	4682      	mov	sl, r0
 800f330:	117b      	asrs	r3, r7, #5
 800f332:	2101      	movs	r1, #1
 800f334:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f338:	f007 071f 	and.w	r7, r7, #31
 800f33c:	fa01 f707 	lsl.w	r7, r1, r7
 800f340:	421f      	tst	r7, r3
 800f342:	4629      	mov	r1, r5
 800f344:	4620      	mov	r0, r4
 800f346:	bf18      	it	ne
 800f348:	f04a 0a02 	orrne.w	sl, sl, #2
 800f34c:	1b76      	subs	r6, r6, r5
 800f34e:	f7ff fded 	bl	800ef2c <rshift>
 800f352:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f356:	2702      	movs	r7, #2
 800f358:	f1ba 0f00 	cmp.w	sl, #0
 800f35c:	d048      	beq.n	800f3f0 <__gethex+0x3f4>
 800f35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f362:	2b02      	cmp	r3, #2
 800f364:	d015      	beq.n	800f392 <__gethex+0x396>
 800f366:	2b03      	cmp	r3, #3
 800f368:	d017      	beq.n	800f39a <__gethex+0x39e>
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d109      	bne.n	800f382 <__gethex+0x386>
 800f36e:	f01a 0f02 	tst.w	sl, #2
 800f372:	d006      	beq.n	800f382 <__gethex+0x386>
 800f374:	f8d9 0000 	ldr.w	r0, [r9]
 800f378:	ea4a 0a00 	orr.w	sl, sl, r0
 800f37c:	f01a 0f01 	tst.w	sl, #1
 800f380:	d10e      	bne.n	800f3a0 <__gethex+0x3a4>
 800f382:	f047 0710 	orr.w	r7, r7, #16
 800f386:	e033      	b.n	800f3f0 <__gethex+0x3f4>
 800f388:	f04f 0a01 	mov.w	sl, #1
 800f38c:	e7d0      	b.n	800f330 <__gethex+0x334>
 800f38e:	2701      	movs	r7, #1
 800f390:	e7e2      	b.n	800f358 <__gethex+0x35c>
 800f392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f394:	f1c3 0301 	rsb	r3, r3, #1
 800f398:	9315      	str	r3, [sp, #84]	; 0x54
 800f39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d0f0      	beq.n	800f382 <__gethex+0x386>
 800f3a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f3a4:	f104 0314 	add.w	r3, r4, #20
 800f3a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f3ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f3b0:	f04f 0c00 	mov.w	ip, #0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f3be:	d01c      	beq.n	800f3fa <__gethex+0x3fe>
 800f3c0:	3201      	adds	r2, #1
 800f3c2:	6002      	str	r2, [r0, #0]
 800f3c4:	2f02      	cmp	r7, #2
 800f3c6:	f104 0314 	add.w	r3, r4, #20
 800f3ca:	d13f      	bne.n	800f44c <__gethex+0x450>
 800f3cc:	f8d8 2000 	ldr.w	r2, [r8]
 800f3d0:	3a01      	subs	r2, #1
 800f3d2:	42b2      	cmp	r2, r6
 800f3d4:	d10a      	bne.n	800f3ec <__gethex+0x3f0>
 800f3d6:	1171      	asrs	r1, r6, #5
 800f3d8:	2201      	movs	r2, #1
 800f3da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3de:	f006 061f 	and.w	r6, r6, #31
 800f3e2:	fa02 f606 	lsl.w	r6, r2, r6
 800f3e6:	421e      	tst	r6, r3
 800f3e8:	bf18      	it	ne
 800f3ea:	4617      	movne	r7, r2
 800f3ec:	f047 0720 	orr.w	r7, r7, #32
 800f3f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3f2:	601c      	str	r4, [r3, #0]
 800f3f4:	9b04      	ldr	r3, [sp, #16]
 800f3f6:	601d      	str	r5, [r3, #0]
 800f3f8:	e695      	b.n	800f126 <__gethex+0x12a>
 800f3fa:	4299      	cmp	r1, r3
 800f3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f400:	d8d8      	bhi.n	800f3b4 <__gethex+0x3b8>
 800f402:	68a3      	ldr	r3, [r4, #8]
 800f404:	459b      	cmp	fp, r3
 800f406:	db19      	blt.n	800f43c <__gethex+0x440>
 800f408:	6861      	ldr	r1, [r4, #4]
 800f40a:	ee18 0a10 	vmov	r0, s16
 800f40e:	3101      	adds	r1, #1
 800f410:	f000 f91c 	bl	800f64c <_Balloc>
 800f414:	4681      	mov	r9, r0
 800f416:	b918      	cbnz	r0, 800f420 <__gethex+0x424>
 800f418:	4b1a      	ldr	r3, [pc, #104]	; (800f484 <__gethex+0x488>)
 800f41a:	4602      	mov	r2, r0
 800f41c:	2184      	movs	r1, #132	; 0x84
 800f41e:	e6a8      	b.n	800f172 <__gethex+0x176>
 800f420:	6922      	ldr	r2, [r4, #16]
 800f422:	3202      	adds	r2, #2
 800f424:	f104 010c 	add.w	r1, r4, #12
 800f428:	0092      	lsls	r2, r2, #2
 800f42a:	300c      	adds	r0, #12
 800f42c:	f000 f900 	bl	800f630 <memcpy>
 800f430:	4621      	mov	r1, r4
 800f432:	ee18 0a10 	vmov	r0, s16
 800f436:	f000 f949 	bl	800f6cc <_Bfree>
 800f43a:	464c      	mov	r4, r9
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	1c5a      	adds	r2, r3, #1
 800f440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f444:	6122      	str	r2, [r4, #16]
 800f446:	2201      	movs	r2, #1
 800f448:	615a      	str	r2, [r3, #20]
 800f44a:	e7bb      	b.n	800f3c4 <__gethex+0x3c8>
 800f44c:	6922      	ldr	r2, [r4, #16]
 800f44e:	455a      	cmp	r2, fp
 800f450:	dd0b      	ble.n	800f46a <__gethex+0x46e>
 800f452:	2101      	movs	r1, #1
 800f454:	4620      	mov	r0, r4
 800f456:	f7ff fd69 	bl	800ef2c <rshift>
 800f45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f45e:	3501      	adds	r5, #1
 800f460:	42ab      	cmp	r3, r5
 800f462:	f6ff aed0 	blt.w	800f206 <__gethex+0x20a>
 800f466:	2701      	movs	r7, #1
 800f468:	e7c0      	b.n	800f3ec <__gethex+0x3f0>
 800f46a:	f016 061f 	ands.w	r6, r6, #31
 800f46e:	d0fa      	beq.n	800f466 <__gethex+0x46a>
 800f470:	4453      	add	r3, sl
 800f472:	f1c6 0620 	rsb	r6, r6, #32
 800f476:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f47a:	f000 f9d9 	bl	800f830 <__hi0bits>
 800f47e:	42b0      	cmp	r0, r6
 800f480:	dbe7      	blt.n	800f452 <__gethex+0x456>
 800f482:	e7f0      	b.n	800f466 <__gethex+0x46a>
 800f484:	08011a00 	.word	0x08011a00

0800f488 <L_shift>:
 800f488:	f1c2 0208 	rsb	r2, r2, #8
 800f48c:	0092      	lsls	r2, r2, #2
 800f48e:	b570      	push	{r4, r5, r6, lr}
 800f490:	f1c2 0620 	rsb	r6, r2, #32
 800f494:	6843      	ldr	r3, [r0, #4]
 800f496:	6804      	ldr	r4, [r0, #0]
 800f498:	fa03 f506 	lsl.w	r5, r3, r6
 800f49c:	432c      	orrs	r4, r5
 800f49e:	40d3      	lsrs	r3, r2
 800f4a0:	6004      	str	r4, [r0, #0]
 800f4a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4a6:	4288      	cmp	r0, r1
 800f4a8:	d3f4      	bcc.n	800f494 <L_shift+0xc>
 800f4aa:	bd70      	pop	{r4, r5, r6, pc}

0800f4ac <__match>:
 800f4ac:	b530      	push	{r4, r5, lr}
 800f4ae:	6803      	ldr	r3, [r0, #0]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4b6:	b914      	cbnz	r4, 800f4be <__match+0x12>
 800f4b8:	6003      	str	r3, [r0, #0]
 800f4ba:	2001      	movs	r0, #1
 800f4bc:	bd30      	pop	{r4, r5, pc}
 800f4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f4c6:	2d19      	cmp	r5, #25
 800f4c8:	bf98      	it	ls
 800f4ca:	3220      	addls	r2, #32
 800f4cc:	42a2      	cmp	r2, r4
 800f4ce:	d0f0      	beq.n	800f4b2 <__match+0x6>
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	e7f3      	b.n	800f4bc <__match+0x10>

0800f4d4 <__hexnan>:
 800f4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d8:	680b      	ldr	r3, [r1, #0]
 800f4da:	115e      	asrs	r6, r3, #5
 800f4dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f4e0:	f013 031f 	ands.w	r3, r3, #31
 800f4e4:	b087      	sub	sp, #28
 800f4e6:	bf18      	it	ne
 800f4e8:	3604      	addne	r6, #4
 800f4ea:	2500      	movs	r5, #0
 800f4ec:	1f37      	subs	r7, r6, #4
 800f4ee:	4690      	mov	r8, r2
 800f4f0:	6802      	ldr	r2, [r0, #0]
 800f4f2:	9301      	str	r3, [sp, #4]
 800f4f4:	4682      	mov	sl, r0
 800f4f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f4fa:	46b9      	mov	r9, r7
 800f4fc:	463c      	mov	r4, r7
 800f4fe:	9502      	str	r5, [sp, #8]
 800f500:	46ab      	mov	fp, r5
 800f502:	7851      	ldrb	r1, [r2, #1]
 800f504:	1c53      	adds	r3, r2, #1
 800f506:	9303      	str	r3, [sp, #12]
 800f508:	b341      	cbz	r1, 800f55c <__hexnan+0x88>
 800f50a:	4608      	mov	r0, r1
 800f50c:	9205      	str	r2, [sp, #20]
 800f50e:	9104      	str	r1, [sp, #16]
 800f510:	f7ff fd5e 	bl	800efd0 <__hexdig_fun>
 800f514:	2800      	cmp	r0, #0
 800f516:	d14f      	bne.n	800f5b8 <__hexnan+0xe4>
 800f518:	9904      	ldr	r1, [sp, #16]
 800f51a:	9a05      	ldr	r2, [sp, #20]
 800f51c:	2920      	cmp	r1, #32
 800f51e:	d818      	bhi.n	800f552 <__hexnan+0x7e>
 800f520:	9b02      	ldr	r3, [sp, #8]
 800f522:	459b      	cmp	fp, r3
 800f524:	dd13      	ble.n	800f54e <__hexnan+0x7a>
 800f526:	454c      	cmp	r4, r9
 800f528:	d206      	bcs.n	800f538 <__hexnan+0x64>
 800f52a:	2d07      	cmp	r5, #7
 800f52c:	dc04      	bgt.n	800f538 <__hexnan+0x64>
 800f52e:	462a      	mov	r2, r5
 800f530:	4649      	mov	r1, r9
 800f532:	4620      	mov	r0, r4
 800f534:	f7ff ffa8 	bl	800f488 <L_shift>
 800f538:	4544      	cmp	r4, r8
 800f53a:	d950      	bls.n	800f5de <__hexnan+0x10a>
 800f53c:	2300      	movs	r3, #0
 800f53e:	f1a4 0904 	sub.w	r9, r4, #4
 800f542:	f844 3c04 	str.w	r3, [r4, #-4]
 800f546:	f8cd b008 	str.w	fp, [sp, #8]
 800f54a:	464c      	mov	r4, r9
 800f54c:	461d      	mov	r5, r3
 800f54e:	9a03      	ldr	r2, [sp, #12]
 800f550:	e7d7      	b.n	800f502 <__hexnan+0x2e>
 800f552:	2929      	cmp	r1, #41	; 0x29
 800f554:	d156      	bne.n	800f604 <__hexnan+0x130>
 800f556:	3202      	adds	r2, #2
 800f558:	f8ca 2000 	str.w	r2, [sl]
 800f55c:	f1bb 0f00 	cmp.w	fp, #0
 800f560:	d050      	beq.n	800f604 <__hexnan+0x130>
 800f562:	454c      	cmp	r4, r9
 800f564:	d206      	bcs.n	800f574 <__hexnan+0xa0>
 800f566:	2d07      	cmp	r5, #7
 800f568:	dc04      	bgt.n	800f574 <__hexnan+0xa0>
 800f56a:	462a      	mov	r2, r5
 800f56c:	4649      	mov	r1, r9
 800f56e:	4620      	mov	r0, r4
 800f570:	f7ff ff8a 	bl	800f488 <L_shift>
 800f574:	4544      	cmp	r4, r8
 800f576:	d934      	bls.n	800f5e2 <__hexnan+0x10e>
 800f578:	f1a8 0204 	sub.w	r2, r8, #4
 800f57c:	4623      	mov	r3, r4
 800f57e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f582:	f842 1f04 	str.w	r1, [r2, #4]!
 800f586:	429f      	cmp	r7, r3
 800f588:	d2f9      	bcs.n	800f57e <__hexnan+0xaa>
 800f58a:	1b3b      	subs	r3, r7, r4
 800f58c:	f023 0303 	bic.w	r3, r3, #3
 800f590:	3304      	adds	r3, #4
 800f592:	3401      	adds	r4, #1
 800f594:	3e03      	subs	r6, #3
 800f596:	42b4      	cmp	r4, r6
 800f598:	bf88      	it	hi
 800f59a:	2304      	movhi	r3, #4
 800f59c:	4443      	add	r3, r8
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f843 2b04 	str.w	r2, [r3], #4
 800f5a4:	429f      	cmp	r7, r3
 800f5a6:	d2fb      	bcs.n	800f5a0 <__hexnan+0xcc>
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	b91b      	cbnz	r3, 800f5b4 <__hexnan+0xe0>
 800f5ac:	4547      	cmp	r7, r8
 800f5ae:	d127      	bne.n	800f600 <__hexnan+0x12c>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	603b      	str	r3, [r7, #0]
 800f5b4:	2005      	movs	r0, #5
 800f5b6:	e026      	b.n	800f606 <__hexnan+0x132>
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	2d08      	cmp	r5, #8
 800f5bc:	f10b 0b01 	add.w	fp, fp, #1
 800f5c0:	dd06      	ble.n	800f5d0 <__hexnan+0xfc>
 800f5c2:	4544      	cmp	r4, r8
 800f5c4:	d9c3      	bls.n	800f54e <__hexnan+0x7a>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5cc:	2501      	movs	r5, #1
 800f5ce:	3c04      	subs	r4, #4
 800f5d0:	6822      	ldr	r2, [r4, #0]
 800f5d2:	f000 000f 	and.w	r0, r0, #15
 800f5d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f5da:	6022      	str	r2, [r4, #0]
 800f5dc:	e7b7      	b.n	800f54e <__hexnan+0x7a>
 800f5de:	2508      	movs	r5, #8
 800f5e0:	e7b5      	b.n	800f54e <__hexnan+0x7a>
 800f5e2:	9b01      	ldr	r3, [sp, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d0df      	beq.n	800f5a8 <__hexnan+0xd4>
 800f5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ec:	f1c3 0320 	rsb	r3, r3, #32
 800f5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f5f8:	401a      	ands	r2, r3
 800f5fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800f5fe:	e7d3      	b.n	800f5a8 <__hexnan+0xd4>
 800f600:	3f04      	subs	r7, #4
 800f602:	e7d1      	b.n	800f5a8 <__hexnan+0xd4>
 800f604:	2004      	movs	r0, #4
 800f606:	b007      	add	sp, #28
 800f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f60c <__ascii_mbtowc>:
 800f60c:	b082      	sub	sp, #8
 800f60e:	b901      	cbnz	r1, 800f612 <__ascii_mbtowc+0x6>
 800f610:	a901      	add	r1, sp, #4
 800f612:	b142      	cbz	r2, 800f626 <__ascii_mbtowc+0x1a>
 800f614:	b14b      	cbz	r3, 800f62a <__ascii_mbtowc+0x1e>
 800f616:	7813      	ldrb	r3, [r2, #0]
 800f618:	600b      	str	r3, [r1, #0]
 800f61a:	7812      	ldrb	r2, [r2, #0]
 800f61c:	1e10      	subs	r0, r2, #0
 800f61e:	bf18      	it	ne
 800f620:	2001      	movne	r0, #1
 800f622:	b002      	add	sp, #8
 800f624:	4770      	bx	lr
 800f626:	4610      	mov	r0, r2
 800f628:	e7fb      	b.n	800f622 <__ascii_mbtowc+0x16>
 800f62a:	f06f 0001 	mvn.w	r0, #1
 800f62e:	e7f8      	b.n	800f622 <__ascii_mbtowc+0x16>

0800f630 <memcpy>:
 800f630:	440a      	add	r2, r1
 800f632:	4291      	cmp	r1, r2
 800f634:	f100 33ff 	add.w	r3, r0, #4294967295
 800f638:	d100      	bne.n	800f63c <memcpy+0xc>
 800f63a:	4770      	bx	lr
 800f63c:	b510      	push	{r4, lr}
 800f63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f642:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f646:	4291      	cmp	r1, r2
 800f648:	d1f9      	bne.n	800f63e <memcpy+0xe>
 800f64a:	bd10      	pop	{r4, pc}

0800f64c <_Balloc>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f650:	4604      	mov	r4, r0
 800f652:	460d      	mov	r5, r1
 800f654:	b976      	cbnz	r6, 800f674 <_Balloc+0x28>
 800f656:	2010      	movs	r0, #16
 800f658:	f000 fdcc 	bl	80101f4 <malloc>
 800f65c:	4602      	mov	r2, r0
 800f65e:	6260      	str	r0, [r4, #36]	; 0x24
 800f660:	b920      	cbnz	r0, 800f66c <_Balloc+0x20>
 800f662:	4b18      	ldr	r3, [pc, #96]	; (800f6c4 <_Balloc+0x78>)
 800f664:	4818      	ldr	r0, [pc, #96]	; (800f6c8 <_Balloc+0x7c>)
 800f666:	2166      	movs	r1, #102	; 0x66
 800f668:	f000 fd94 	bl	8010194 <__assert_func>
 800f66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f670:	6006      	str	r6, [r0, #0]
 800f672:	60c6      	str	r6, [r0, #12]
 800f674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f676:	68f3      	ldr	r3, [r6, #12]
 800f678:	b183      	cbz	r3, 800f69c <_Balloc+0x50>
 800f67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f682:	b9b8      	cbnz	r0, 800f6b4 <_Balloc+0x68>
 800f684:	2101      	movs	r1, #1
 800f686:	fa01 f605 	lsl.w	r6, r1, r5
 800f68a:	1d72      	adds	r2, r6, #5
 800f68c:	0092      	lsls	r2, r2, #2
 800f68e:	4620      	mov	r0, r4
 800f690:	f000 fc9a 	bl	800ffc8 <_calloc_r>
 800f694:	b160      	cbz	r0, 800f6b0 <_Balloc+0x64>
 800f696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f69a:	e00e      	b.n	800f6ba <_Balloc+0x6e>
 800f69c:	2221      	movs	r2, #33	; 0x21
 800f69e:	2104      	movs	r1, #4
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f000 fc91 	bl	800ffc8 <_calloc_r>
 800f6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6a8:	60f0      	str	r0, [r6, #12]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1e4      	bne.n	800f67a <_Balloc+0x2e>
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	6802      	ldr	r2, [r0, #0]
 800f6b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f6c0:	e7f7      	b.n	800f6b2 <_Balloc+0x66>
 800f6c2:	bf00      	nop
 800f6c4:	08011a8c 	.word	0x08011a8c
 800f6c8:	08011aa3 	.word	0x08011aa3

0800f6cc <_Bfree>:
 800f6cc:	b570      	push	{r4, r5, r6, lr}
 800f6ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	b976      	cbnz	r6, 800f6f4 <_Bfree+0x28>
 800f6d6:	2010      	movs	r0, #16
 800f6d8:	f000 fd8c 	bl	80101f4 <malloc>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	6268      	str	r0, [r5, #36]	; 0x24
 800f6e0:	b920      	cbnz	r0, 800f6ec <_Bfree+0x20>
 800f6e2:	4b09      	ldr	r3, [pc, #36]	; (800f708 <_Bfree+0x3c>)
 800f6e4:	4809      	ldr	r0, [pc, #36]	; (800f70c <_Bfree+0x40>)
 800f6e6:	218a      	movs	r1, #138	; 0x8a
 800f6e8:	f000 fd54 	bl	8010194 <__assert_func>
 800f6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6f0:	6006      	str	r6, [r0, #0]
 800f6f2:	60c6      	str	r6, [r0, #12]
 800f6f4:	b13c      	cbz	r4, 800f706 <_Bfree+0x3a>
 800f6f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f6f8:	6862      	ldr	r2, [r4, #4]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f700:	6021      	str	r1, [r4, #0]
 800f702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f706:	bd70      	pop	{r4, r5, r6, pc}
 800f708:	08011a8c 	.word	0x08011a8c
 800f70c:	08011aa3 	.word	0x08011aa3

0800f710 <__multadd>:
 800f710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f714:	690d      	ldr	r5, [r1, #16]
 800f716:	4607      	mov	r7, r0
 800f718:	460c      	mov	r4, r1
 800f71a:	461e      	mov	r6, r3
 800f71c:	f101 0c14 	add.w	ip, r1, #20
 800f720:	2000      	movs	r0, #0
 800f722:	f8dc 3000 	ldr.w	r3, [ip]
 800f726:	b299      	uxth	r1, r3
 800f728:	fb02 6101 	mla	r1, r2, r1, r6
 800f72c:	0c1e      	lsrs	r6, r3, #16
 800f72e:	0c0b      	lsrs	r3, r1, #16
 800f730:	fb02 3306 	mla	r3, r2, r6, r3
 800f734:	b289      	uxth	r1, r1
 800f736:	3001      	adds	r0, #1
 800f738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f73c:	4285      	cmp	r5, r0
 800f73e:	f84c 1b04 	str.w	r1, [ip], #4
 800f742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f746:	dcec      	bgt.n	800f722 <__multadd+0x12>
 800f748:	b30e      	cbz	r6, 800f78e <__multadd+0x7e>
 800f74a:	68a3      	ldr	r3, [r4, #8]
 800f74c:	42ab      	cmp	r3, r5
 800f74e:	dc19      	bgt.n	800f784 <__multadd+0x74>
 800f750:	6861      	ldr	r1, [r4, #4]
 800f752:	4638      	mov	r0, r7
 800f754:	3101      	adds	r1, #1
 800f756:	f7ff ff79 	bl	800f64c <_Balloc>
 800f75a:	4680      	mov	r8, r0
 800f75c:	b928      	cbnz	r0, 800f76a <__multadd+0x5a>
 800f75e:	4602      	mov	r2, r0
 800f760:	4b0c      	ldr	r3, [pc, #48]	; (800f794 <__multadd+0x84>)
 800f762:	480d      	ldr	r0, [pc, #52]	; (800f798 <__multadd+0x88>)
 800f764:	21b5      	movs	r1, #181	; 0xb5
 800f766:	f000 fd15 	bl	8010194 <__assert_func>
 800f76a:	6922      	ldr	r2, [r4, #16]
 800f76c:	3202      	adds	r2, #2
 800f76e:	f104 010c 	add.w	r1, r4, #12
 800f772:	0092      	lsls	r2, r2, #2
 800f774:	300c      	adds	r0, #12
 800f776:	f7ff ff5b 	bl	800f630 <memcpy>
 800f77a:	4621      	mov	r1, r4
 800f77c:	4638      	mov	r0, r7
 800f77e:	f7ff ffa5 	bl	800f6cc <_Bfree>
 800f782:	4644      	mov	r4, r8
 800f784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f788:	3501      	adds	r5, #1
 800f78a:	615e      	str	r6, [r3, #20]
 800f78c:	6125      	str	r5, [r4, #16]
 800f78e:	4620      	mov	r0, r4
 800f790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f794:	08011a00 	.word	0x08011a00
 800f798:	08011aa3 	.word	0x08011aa3

0800f79c <__s2b>:
 800f79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7a0:	460c      	mov	r4, r1
 800f7a2:	4615      	mov	r5, r2
 800f7a4:	461f      	mov	r7, r3
 800f7a6:	2209      	movs	r2, #9
 800f7a8:	3308      	adds	r3, #8
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	db09      	blt.n	800f7cc <__s2b+0x30>
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f7ff ff47 	bl	800f64c <_Balloc>
 800f7be:	b940      	cbnz	r0, 800f7d2 <__s2b+0x36>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	4b19      	ldr	r3, [pc, #100]	; (800f828 <__s2b+0x8c>)
 800f7c4:	4819      	ldr	r0, [pc, #100]	; (800f82c <__s2b+0x90>)
 800f7c6:	21ce      	movs	r1, #206	; 0xce
 800f7c8:	f000 fce4 	bl	8010194 <__assert_func>
 800f7cc:	0052      	lsls	r2, r2, #1
 800f7ce:	3101      	adds	r1, #1
 800f7d0:	e7f0      	b.n	800f7b4 <__s2b+0x18>
 800f7d2:	9b08      	ldr	r3, [sp, #32]
 800f7d4:	6143      	str	r3, [r0, #20]
 800f7d6:	2d09      	cmp	r5, #9
 800f7d8:	f04f 0301 	mov.w	r3, #1
 800f7dc:	6103      	str	r3, [r0, #16]
 800f7de:	dd16      	ble.n	800f80e <__s2b+0x72>
 800f7e0:	f104 0909 	add.w	r9, r4, #9
 800f7e4:	46c8      	mov	r8, r9
 800f7e6:	442c      	add	r4, r5
 800f7e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f7ec:	4601      	mov	r1, r0
 800f7ee:	3b30      	subs	r3, #48	; 0x30
 800f7f0:	220a      	movs	r2, #10
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f7ff ff8c 	bl	800f710 <__multadd>
 800f7f8:	45a0      	cmp	r8, r4
 800f7fa:	d1f5      	bne.n	800f7e8 <__s2b+0x4c>
 800f7fc:	f1a5 0408 	sub.w	r4, r5, #8
 800f800:	444c      	add	r4, r9
 800f802:	1b2d      	subs	r5, r5, r4
 800f804:	1963      	adds	r3, r4, r5
 800f806:	42bb      	cmp	r3, r7
 800f808:	db04      	blt.n	800f814 <__s2b+0x78>
 800f80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f80e:	340a      	adds	r4, #10
 800f810:	2509      	movs	r5, #9
 800f812:	e7f6      	b.n	800f802 <__s2b+0x66>
 800f814:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f818:	4601      	mov	r1, r0
 800f81a:	3b30      	subs	r3, #48	; 0x30
 800f81c:	220a      	movs	r2, #10
 800f81e:	4630      	mov	r0, r6
 800f820:	f7ff ff76 	bl	800f710 <__multadd>
 800f824:	e7ee      	b.n	800f804 <__s2b+0x68>
 800f826:	bf00      	nop
 800f828:	08011a00 	.word	0x08011a00
 800f82c:	08011aa3 	.word	0x08011aa3

0800f830 <__hi0bits>:
 800f830:	0c03      	lsrs	r3, r0, #16
 800f832:	041b      	lsls	r3, r3, #16
 800f834:	b9d3      	cbnz	r3, 800f86c <__hi0bits+0x3c>
 800f836:	0400      	lsls	r0, r0, #16
 800f838:	2310      	movs	r3, #16
 800f83a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f83e:	bf04      	itt	eq
 800f840:	0200      	lsleq	r0, r0, #8
 800f842:	3308      	addeq	r3, #8
 800f844:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f848:	bf04      	itt	eq
 800f84a:	0100      	lsleq	r0, r0, #4
 800f84c:	3304      	addeq	r3, #4
 800f84e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f852:	bf04      	itt	eq
 800f854:	0080      	lsleq	r0, r0, #2
 800f856:	3302      	addeq	r3, #2
 800f858:	2800      	cmp	r0, #0
 800f85a:	db05      	blt.n	800f868 <__hi0bits+0x38>
 800f85c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f860:	f103 0301 	add.w	r3, r3, #1
 800f864:	bf08      	it	eq
 800f866:	2320      	moveq	r3, #32
 800f868:	4618      	mov	r0, r3
 800f86a:	4770      	bx	lr
 800f86c:	2300      	movs	r3, #0
 800f86e:	e7e4      	b.n	800f83a <__hi0bits+0xa>

0800f870 <__lo0bits>:
 800f870:	6803      	ldr	r3, [r0, #0]
 800f872:	f013 0207 	ands.w	r2, r3, #7
 800f876:	4601      	mov	r1, r0
 800f878:	d00b      	beq.n	800f892 <__lo0bits+0x22>
 800f87a:	07da      	lsls	r2, r3, #31
 800f87c:	d423      	bmi.n	800f8c6 <__lo0bits+0x56>
 800f87e:	0798      	lsls	r0, r3, #30
 800f880:	bf49      	itett	mi
 800f882:	085b      	lsrmi	r3, r3, #1
 800f884:	089b      	lsrpl	r3, r3, #2
 800f886:	2001      	movmi	r0, #1
 800f888:	600b      	strmi	r3, [r1, #0]
 800f88a:	bf5c      	itt	pl
 800f88c:	600b      	strpl	r3, [r1, #0]
 800f88e:	2002      	movpl	r0, #2
 800f890:	4770      	bx	lr
 800f892:	b298      	uxth	r0, r3
 800f894:	b9a8      	cbnz	r0, 800f8c2 <__lo0bits+0x52>
 800f896:	0c1b      	lsrs	r3, r3, #16
 800f898:	2010      	movs	r0, #16
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	b90a      	cbnz	r2, 800f8a2 <__lo0bits+0x32>
 800f89e:	3008      	adds	r0, #8
 800f8a0:	0a1b      	lsrs	r3, r3, #8
 800f8a2:	071a      	lsls	r2, r3, #28
 800f8a4:	bf04      	itt	eq
 800f8a6:	091b      	lsreq	r3, r3, #4
 800f8a8:	3004      	addeq	r0, #4
 800f8aa:	079a      	lsls	r2, r3, #30
 800f8ac:	bf04      	itt	eq
 800f8ae:	089b      	lsreq	r3, r3, #2
 800f8b0:	3002      	addeq	r0, #2
 800f8b2:	07da      	lsls	r2, r3, #31
 800f8b4:	d403      	bmi.n	800f8be <__lo0bits+0x4e>
 800f8b6:	085b      	lsrs	r3, r3, #1
 800f8b8:	f100 0001 	add.w	r0, r0, #1
 800f8bc:	d005      	beq.n	800f8ca <__lo0bits+0x5a>
 800f8be:	600b      	str	r3, [r1, #0]
 800f8c0:	4770      	bx	lr
 800f8c2:	4610      	mov	r0, r2
 800f8c4:	e7e9      	b.n	800f89a <__lo0bits+0x2a>
 800f8c6:	2000      	movs	r0, #0
 800f8c8:	4770      	bx	lr
 800f8ca:	2020      	movs	r0, #32
 800f8cc:	4770      	bx	lr
	...

0800f8d0 <__i2b>:
 800f8d0:	b510      	push	{r4, lr}
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	2101      	movs	r1, #1
 800f8d6:	f7ff feb9 	bl	800f64c <_Balloc>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	b928      	cbnz	r0, 800f8ea <__i2b+0x1a>
 800f8de:	4b05      	ldr	r3, [pc, #20]	; (800f8f4 <__i2b+0x24>)
 800f8e0:	4805      	ldr	r0, [pc, #20]	; (800f8f8 <__i2b+0x28>)
 800f8e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f8e6:	f000 fc55 	bl	8010194 <__assert_func>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	6144      	str	r4, [r0, #20]
 800f8ee:	6103      	str	r3, [r0, #16]
 800f8f0:	bd10      	pop	{r4, pc}
 800f8f2:	bf00      	nop
 800f8f4:	08011a00 	.word	0x08011a00
 800f8f8:	08011aa3 	.word	0x08011aa3

0800f8fc <__multiply>:
 800f8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f900:	4691      	mov	r9, r2
 800f902:	690a      	ldr	r2, [r1, #16]
 800f904:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f908:	429a      	cmp	r2, r3
 800f90a:	bfb8      	it	lt
 800f90c:	460b      	movlt	r3, r1
 800f90e:	460c      	mov	r4, r1
 800f910:	bfbc      	itt	lt
 800f912:	464c      	movlt	r4, r9
 800f914:	4699      	movlt	r9, r3
 800f916:	6927      	ldr	r7, [r4, #16]
 800f918:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f91c:	68a3      	ldr	r3, [r4, #8]
 800f91e:	6861      	ldr	r1, [r4, #4]
 800f920:	eb07 060a 	add.w	r6, r7, sl
 800f924:	42b3      	cmp	r3, r6
 800f926:	b085      	sub	sp, #20
 800f928:	bfb8      	it	lt
 800f92a:	3101      	addlt	r1, #1
 800f92c:	f7ff fe8e 	bl	800f64c <_Balloc>
 800f930:	b930      	cbnz	r0, 800f940 <__multiply+0x44>
 800f932:	4602      	mov	r2, r0
 800f934:	4b44      	ldr	r3, [pc, #272]	; (800fa48 <__multiply+0x14c>)
 800f936:	4845      	ldr	r0, [pc, #276]	; (800fa4c <__multiply+0x150>)
 800f938:	f240 115d 	movw	r1, #349	; 0x15d
 800f93c:	f000 fc2a 	bl	8010194 <__assert_func>
 800f940:	f100 0514 	add.w	r5, r0, #20
 800f944:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f948:	462b      	mov	r3, r5
 800f94a:	2200      	movs	r2, #0
 800f94c:	4543      	cmp	r3, r8
 800f94e:	d321      	bcc.n	800f994 <__multiply+0x98>
 800f950:	f104 0314 	add.w	r3, r4, #20
 800f954:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f958:	f109 0314 	add.w	r3, r9, #20
 800f95c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f960:	9202      	str	r2, [sp, #8]
 800f962:	1b3a      	subs	r2, r7, r4
 800f964:	3a15      	subs	r2, #21
 800f966:	f022 0203 	bic.w	r2, r2, #3
 800f96a:	3204      	adds	r2, #4
 800f96c:	f104 0115 	add.w	r1, r4, #21
 800f970:	428f      	cmp	r7, r1
 800f972:	bf38      	it	cc
 800f974:	2204      	movcc	r2, #4
 800f976:	9201      	str	r2, [sp, #4]
 800f978:	9a02      	ldr	r2, [sp, #8]
 800f97a:	9303      	str	r3, [sp, #12]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d80c      	bhi.n	800f99a <__multiply+0x9e>
 800f980:	2e00      	cmp	r6, #0
 800f982:	dd03      	ble.n	800f98c <__multiply+0x90>
 800f984:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d05a      	beq.n	800fa42 <__multiply+0x146>
 800f98c:	6106      	str	r6, [r0, #16]
 800f98e:	b005      	add	sp, #20
 800f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f994:	f843 2b04 	str.w	r2, [r3], #4
 800f998:	e7d8      	b.n	800f94c <__multiply+0x50>
 800f99a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f99e:	f1ba 0f00 	cmp.w	sl, #0
 800f9a2:	d024      	beq.n	800f9ee <__multiply+0xf2>
 800f9a4:	f104 0e14 	add.w	lr, r4, #20
 800f9a8:	46a9      	mov	r9, r5
 800f9aa:	f04f 0c00 	mov.w	ip, #0
 800f9ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f9b2:	f8d9 1000 	ldr.w	r1, [r9]
 800f9b6:	fa1f fb82 	uxth.w	fp, r2
 800f9ba:	b289      	uxth	r1, r1
 800f9bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f9c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f9c4:	f8d9 2000 	ldr.w	r2, [r9]
 800f9c8:	4461      	add	r1, ip
 800f9ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f9ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800f9d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f9d6:	b289      	uxth	r1, r1
 800f9d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f9dc:	4577      	cmp	r7, lr
 800f9de:	f849 1b04 	str.w	r1, [r9], #4
 800f9e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f9e6:	d8e2      	bhi.n	800f9ae <__multiply+0xb2>
 800f9e8:	9a01      	ldr	r2, [sp, #4]
 800f9ea:	f845 c002 	str.w	ip, [r5, r2]
 800f9ee:	9a03      	ldr	r2, [sp, #12]
 800f9f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	f1b9 0f00 	cmp.w	r9, #0
 800f9fa:	d020      	beq.n	800fa3e <__multiply+0x142>
 800f9fc:	6829      	ldr	r1, [r5, #0]
 800f9fe:	f104 0c14 	add.w	ip, r4, #20
 800fa02:	46ae      	mov	lr, r5
 800fa04:	f04f 0a00 	mov.w	sl, #0
 800fa08:	f8bc b000 	ldrh.w	fp, [ip]
 800fa0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fa10:	fb09 220b 	mla	r2, r9, fp, r2
 800fa14:	4492      	add	sl, r2
 800fa16:	b289      	uxth	r1, r1
 800fa18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fa1c:	f84e 1b04 	str.w	r1, [lr], #4
 800fa20:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fa24:	f8be 1000 	ldrh.w	r1, [lr]
 800fa28:	0c12      	lsrs	r2, r2, #16
 800fa2a:	fb09 1102 	mla	r1, r9, r2, r1
 800fa2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fa32:	4567      	cmp	r7, ip
 800fa34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fa38:	d8e6      	bhi.n	800fa08 <__multiply+0x10c>
 800fa3a:	9a01      	ldr	r2, [sp, #4]
 800fa3c:	50a9      	str	r1, [r5, r2]
 800fa3e:	3504      	adds	r5, #4
 800fa40:	e79a      	b.n	800f978 <__multiply+0x7c>
 800fa42:	3e01      	subs	r6, #1
 800fa44:	e79c      	b.n	800f980 <__multiply+0x84>
 800fa46:	bf00      	nop
 800fa48:	08011a00 	.word	0x08011a00
 800fa4c:	08011aa3 	.word	0x08011aa3

0800fa50 <__pow5mult>:
 800fa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa54:	4615      	mov	r5, r2
 800fa56:	f012 0203 	ands.w	r2, r2, #3
 800fa5a:	4606      	mov	r6, r0
 800fa5c:	460f      	mov	r7, r1
 800fa5e:	d007      	beq.n	800fa70 <__pow5mult+0x20>
 800fa60:	4c25      	ldr	r4, [pc, #148]	; (800faf8 <__pow5mult+0xa8>)
 800fa62:	3a01      	subs	r2, #1
 800fa64:	2300      	movs	r3, #0
 800fa66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa6a:	f7ff fe51 	bl	800f710 <__multadd>
 800fa6e:	4607      	mov	r7, r0
 800fa70:	10ad      	asrs	r5, r5, #2
 800fa72:	d03d      	beq.n	800faf0 <__pow5mult+0xa0>
 800fa74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa76:	b97c      	cbnz	r4, 800fa98 <__pow5mult+0x48>
 800fa78:	2010      	movs	r0, #16
 800fa7a:	f000 fbbb 	bl	80101f4 <malloc>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	6270      	str	r0, [r6, #36]	; 0x24
 800fa82:	b928      	cbnz	r0, 800fa90 <__pow5mult+0x40>
 800fa84:	4b1d      	ldr	r3, [pc, #116]	; (800fafc <__pow5mult+0xac>)
 800fa86:	481e      	ldr	r0, [pc, #120]	; (800fb00 <__pow5mult+0xb0>)
 800fa88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa8c:	f000 fb82 	bl	8010194 <__assert_func>
 800fa90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa94:	6004      	str	r4, [r0, #0]
 800fa96:	60c4      	str	r4, [r0, #12]
 800fa98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800faa0:	b94c      	cbnz	r4, 800fab6 <__pow5mult+0x66>
 800faa2:	f240 2171 	movw	r1, #625	; 0x271
 800faa6:	4630      	mov	r0, r6
 800faa8:	f7ff ff12 	bl	800f8d0 <__i2b>
 800faac:	2300      	movs	r3, #0
 800faae:	f8c8 0008 	str.w	r0, [r8, #8]
 800fab2:	4604      	mov	r4, r0
 800fab4:	6003      	str	r3, [r0, #0]
 800fab6:	f04f 0900 	mov.w	r9, #0
 800faba:	07eb      	lsls	r3, r5, #31
 800fabc:	d50a      	bpl.n	800fad4 <__pow5mult+0x84>
 800fabe:	4639      	mov	r1, r7
 800fac0:	4622      	mov	r2, r4
 800fac2:	4630      	mov	r0, r6
 800fac4:	f7ff ff1a 	bl	800f8fc <__multiply>
 800fac8:	4639      	mov	r1, r7
 800faca:	4680      	mov	r8, r0
 800facc:	4630      	mov	r0, r6
 800face:	f7ff fdfd 	bl	800f6cc <_Bfree>
 800fad2:	4647      	mov	r7, r8
 800fad4:	106d      	asrs	r5, r5, #1
 800fad6:	d00b      	beq.n	800faf0 <__pow5mult+0xa0>
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	b938      	cbnz	r0, 800faec <__pow5mult+0x9c>
 800fadc:	4622      	mov	r2, r4
 800fade:	4621      	mov	r1, r4
 800fae0:	4630      	mov	r0, r6
 800fae2:	f7ff ff0b 	bl	800f8fc <__multiply>
 800fae6:	6020      	str	r0, [r4, #0]
 800fae8:	f8c0 9000 	str.w	r9, [r0]
 800faec:	4604      	mov	r4, r0
 800faee:	e7e4      	b.n	800faba <__pow5mult+0x6a>
 800faf0:	4638      	mov	r0, r7
 800faf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faf6:	bf00      	nop
 800faf8:	08011bf0 	.word	0x08011bf0
 800fafc:	08011a8c 	.word	0x08011a8c
 800fb00:	08011aa3 	.word	0x08011aa3

0800fb04 <__lshift>:
 800fb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb08:	460c      	mov	r4, r1
 800fb0a:	6849      	ldr	r1, [r1, #4]
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb12:	68a3      	ldr	r3, [r4, #8]
 800fb14:	4607      	mov	r7, r0
 800fb16:	4691      	mov	r9, r2
 800fb18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb1c:	f108 0601 	add.w	r6, r8, #1
 800fb20:	42b3      	cmp	r3, r6
 800fb22:	db0b      	blt.n	800fb3c <__lshift+0x38>
 800fb24:	4638      	mov	r0, r7
 800fb26:	f7ff fd91 	bl	800f64c <_Balloc>
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	b948      	cbnz	r0, 800fb42 <__lshift+0x3e>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	4b2a      	ldr	r3, [pc, #168]	; (800fbdc <__lshift+0xd8>)
 800fb32:	482b      	ldr	r0, [pc, #172]	; (800fbe0 <__lshift+0xdc>)
 800fb34:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb38:	f000 fb2c 	bl	8010194 <__assert_func>
 800fb3c:	3101      	adds	r1, #1
 800fb3e:	005b      	lsls	r3, r3, #1
 800fb40:	e7ee      	b.n	800fb20 <__lshift+0x1c>
 800fb42:	2300      	movs	r3, #0
 800fb44:	f100 0114 	add.w	r1, r0, #20
 800fb48:	f100 0210 	add.w	r2, r0, #16
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	4553      	cmp	r3, sl
 800fb50:	db37      	blt.n	800fbc2 <__lshift+0xbe>
 800fb52:	6920      	ldr	r0, [r4, #16]
 800fb54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb58:	f104 0314 	add.w	r3, r4, #20
 800fb5c:	f019 091f 	ands.w	r9, r9, #31
 800fb60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fb68:	d02f      	beq.n	800fbca <__lshift+0xc6>
 800fb6a:	f1c9 0e20 	rsb	lr, r9, #32
 800fb6e:	468a      	mov	sl, r1
 800fb70:	f04f 0c00 	mov.w	ip, #0
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	fa02 f209 	lsl.w	r2, r2, r9
 800fb7a:	ea42 020c 	orr.w	r2, r2, ip
 800fb7e:	f84a 2b04 	str.w	r2, [sl], #4
 800fb82:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb86:	4298      	cmp	r0, r3
 800fb88:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fb8c:	d8f2      	bhi.n	800fb74 <__lshift+0x70>
 800fb8e:	1b03      	subs	r3, r0, r4
 800fb90:	3b15      	subs	r3, #21
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	3304      	adds	r3, #4
 800fb98:	f104 0215 	add.w	r2, r4, #21
 800fb9c:	4290      	cmp	r0, r2
 800fb9e:	bf38      	it	cc
 800fba0:	2304      	movcc	r3, #4
 800fba2:	f841 c003 	str.w	ip, [r1, r3]
 800fba6:	f1bc 0f00 	cmp.w	ip, #0
 800fbaa:	d001      	beq.n	800fbb0 <__lshift+0xac>
 800fbac:	f108 0602 	add.w	r6, r8, #2
 800fbb0:	3e01      	subs	r6, #1
 800fbb2:	4638      	mov	r0, r7
 800fbb4:	612e      	str	r6, [r5, #16]
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	f7ff fd88 	bl	800f6cc <_Bfree>
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	e7c1      	b.n	800fb4e <__lshift+0x4a>
 800fbca:	3904      	subs	r1, #4
 800fbcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbd4:	4298      	cmp	r0, r3
 800fbd6:	d8f9      	bhi.n	800fbcc <__lshift+0xc8>
 800fbd8:	e7ea      	b.n	800fbb0 <__lshift+0xac>
 800fbda:	bf00      	nop
 800fbdc:	08011a00 	.word	0x08011a00
 800fbe0:	08011aa3 	.word	0x08011aa3

0800fbe4 <__mcmp>:
 800fbe4:	b530      	push	{r4, r5, lr}
 800fbe6:	6902      	ldr	r2, [r0, #16]
 800fbe8:	690c      	ldr	r4, [r1, #16]
 800fbea:	1b12      	subs	r2, r2, r4
 800fbec:	d10e      	bne.n	800fc0c <__mcmp+0x28>
 800fbee:	f100 0314 	add.w	r3, r0, #20
 800fbf2:	3114      	adds	r1, #20
 800fbf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fbf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fbfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc04:	42a5      	cmp	r5, r4
 800fc06:	d003      	beq.n	800fc10 <__mcmp+0x2c>
 800fc08:	d305      	bcc.n	800fc16 <__mcmp+0x32>
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	4610      	mov	r0, r2
 800fc0e:	bd30      	pop	{r4, r5, pc}
 800fc10:	4283      	cmp	r3, r0
 800fc12:	d3f3      	bcc.n	800fbfc <__mcmp+0x18>
 800fc14:	e7fa      	b.n	800fc0c <__mcmp+0x28>
 800fc16:	f04f 32ff 	mov.w	r2, #4294967295
 800fc1a:	e7f7      	b.n	800fc0c <__mcmp+0x28>

0800fc1c <__mdiff>:
 800fc1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc20:	460c      	mov	r4, r1
 800fc22:	4606      	mov	r6, r0
 800fc24:	4611      	mov	r1, r2
 800fc26:	4620      	mov	r0, r4
 800fc28:	4690      	mov	r8, r2
 800fc2a:	f7ff ffdb 	bl	800fbe4 <__mcmp>
 800fc2e:	1e05      	subs	r5, r0, #0
 800fc30:	d110      	bne.n	800fc54 <__mdiff+0x38>
 800fc32:	4629      	mov	r1, r5
 800fc34:	4630      	mov	r0, r6
 800fc36:	f7ff fd09 	bl	800f64c <_Balloc>
 800fc3a:	b930      	cbnz	r0, 800fc4a <__mdiff+0x2e>
 800fc3c:	4b3a      	ldr	r3, [pc, #232]	; (800fd28 <__mdiff+0x10c>)
 800fc3e:	4602      	mov	r2, r0
 800fc40:	f240 2132 	movw	r1, #562	; 0x232
 800fc44:	4839      	ldr	r0, [pc, #228]	; (800fd2c <__mdiff+0x110>)
 800fc46:	f000 faa5 	bl	8010194 <__assert_func>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc54:	bfa4      	itt	ge
 800fc56:	4643      	movge	r3, r8
 800fc58:	46a0      	movge	r8, r4
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fc60:	bfa6      	itte	ge
 800fc62:	461c      	movge	r4, r3
 800fc64:	2500      	movge	r5, #0
 800fc66:	2501      	movlt	r5, #1
 800fc68:	f7ff fcf0 	bl	800f64c <_Balloc>
 800fc6c:	b920      	cbnz	r0, 800fc78 <__mdiff+0x5c>
 800fc6e:	4b2e      	ldr	r3, [pc, #184]	; (800fd28 <__mdiff+0x10c>)
 800fc70:	4602      	mov	r2, r0
 800fc72:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc76:	e7e5      	b.n	800fc44 <__mdiff+0x28>
 800fc78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fc7c:	6926      	ldr	r6, [r4, #16]
 800fc7e:	60c5      	str	r5, [r0, #12]
 800fc80:	f104 0914 	add.w	r9, r4, #20
 800fc84:	f108 0514 	add.w	r5, r8, #20
 800fc88:	f100 0e14 	add.w	lr, r0, #20
 800fc8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fc90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fc94:	f108 0210 	add.w	r2, r8, #16
 800fc98:	46f2      	mov	sl, lr
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fca0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fca4:	fa1f f883 	uxth.w	r8, r3
 800fca8:	fa11 f18b 	uxtah	r1, r1, fp
 800fcac:	0c1b      	lsrs	r3, r3, #16
 800fcae:	eba1 0808 	sub.w	r8, r1, r8
 800fcb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fcb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fcba:	fa1f f888 	uxth.w	r8, r8
 800fcbe:	1419      	asrs	r1, r3, #16
 800fcc0:	454e      	cmp	r6, r9
 800fcc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fcc6:	f84a 3b04 	str.w	r3, [sl], #4
 800fcca:	d8e7      	bhi.n	800fc9c <__mdiff+0x80>
 800fccc:	1b33      	subs	r3, r6, r4
 800fcce:	3b15      	subs	r3, #21
 800fcd0:	f023 0303 	bic.w	r3, r3, #3
 800fcd4:	3304      	adds	r3, #4
 800fcd6:	3415      	adds	r4, #21
 800fcd8:	42a6      	cmp	r6, r4
 800fcda:	bf38      	it	cc
 800fcdc:	2304      	movcc	r3, #4
 800fcde:	441d      	add	r5, r3
 800fce0:	4473      	add	r3, lr
 800fce2:	469e      	mov	lr, r3
 800fce4:	462e      	mov	r6, r5
 800fce6:	4566      	cmp	r6, ip
 800fce8:	d30e      	bcc.n	800fd08 <__mdiff+0xec>
 800fcea:	f10c 0203 	add.w	r2, ip, #3
 800fcee:	1b52      	subs	r2, r2, r5
 800fcf0:	f022 0203 	bic.w	r2, r2, #3
 800fcf4:	3d03      	subs	r5, #3
 800fcf6:	45ac      	cmp	ip, r5
 800fcf8:	bf38      	it	cc
 800fcfa:	2200      	movcc	r2, #0
 800fcfc:	441a      	add	r2, r3
 800fcfe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd02:	b17b      	cbz	r3, 800fd24 <__mdiff+0x108>
 800fd04:	6107      	str	r7, [r0, #16]
 800fd06:	e7a3      	b.n	800fc50 <__mdiff+0x34>
 800fd08:	f856 8b04 	ldr.w	r8, [r6], #4
 800fd0c:	fa11 f288 	uxtah	r2, r1, r8
 800fd10:	1414      	asrs	r4, r2, #16
 800fd12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fd16:	b292      	uxth	r2, r2
 800fd18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fd1c:	f84e 2b04 	str.w	r2, [lr], #4
 800fd20:	1421      	asrs	r1, r4, #16
 800fd22:	e7e0      	b.n	800fce6 <__mdiff+0xca>
 800fd24:	3f01      	subs	r7, #1
 800fd26:	e7ea      	b.n	800fcfe <__mdiff+0xe2>
 800fd28:	08011a00 	.word	0x08011a00
 800fd2c:	08011aa3 	.word	0x08011aa3

0800fd30 <__ulp>:
 800fd30:	b082      	sub	sp, #8
 800fd32:	ed8d 0b00 	vstr	d0, [sp]
 800fd36:	9b01      	ldr	r3, [sp, #4]
 800fd38:	4912      	ldr	r1, [pc, #72]	; (800fd84 <__ulp+0x54>)
 800fd3a:	4019      	ands	r1, r3
 800fd3c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fd40:	2900      	cmp	r1, #0
 800fd42:	dd05      	ble.n	800fd50 <__ulp+0x20>
 800fd44:	2200      	movs	r2, #0
 800fd46:	460b      	mov	r3, r1
 800fd48:	ec43 2b10 	vmov	d0, r2, r3
 800fd4c:	b002      	add	sp, #8
 800fd4e:	4770      	bx	lr
 800fd50:	4249      	negs	r1, r1
 800fd52:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fd56:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fd5a:	f04f 0200 	mov.w	r2, #0
 800fd5e:	f04f 0300 	mov.w	r3, #0
 800fd62:	da04      	bge.n	800fd6e <__ulp+0x3e>
 800fd64:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fd68:	fa41 f300 	asr.w	r3, r1, r0
 800fd6c:	e7ec      	b.n	800fd48 <__ulp+0x18>
 800fd6e:	f1a0 0114 	sub.w	r1, r0, #20
 800fd72:	291e      	cmp	r1, #30
 800fd74:	bfda      	itte	le
 800fd76:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fd7a:	fa20 f101 	lsrle.w	r1, r0, r1
 800fd7e:	2101      	movgt	r1, #1
 800fd80:	460a      	mov	r2, r1
 800fd82:	e7e1      	b.n	800fd48 <__ulp+0x18>
 800fd84:	7ff00000 	.word	0x7ff00000

0800fd88 <__b2d>:
 800fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8a:	6905      	ldr	r5, [r0, #16]
 800fd8c:	f100 0714 	add.w	r7, r0, #20
 800fd90:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fd94:	1f2e      	subs	r6, r5, #4
 800fd96:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f7ff fd48 	bl	800f830 <__hi0bits>
 800fda0:	f1c0 0320 	rsb	r3, r0, #32
 800fda4:	280a      	cmp	r0, #10
 800fda6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fe24 <__b2d+0x9c>
 800fdaa:	600b      	str	r3, [r1, #0]
 800fdac:	dc14      	bgt.n	800fdd8 <__b2d+0x50>
 800fdae:	f1c0 0e0b 	rsb	lr, r0, #11
 800fdb2:	fa24 f10e 	lsr.w	r1, r4, lr
 800fdb6:	42b7      	cmp	r7, r6
 800fdb8:	ea41 030c 	orr.w	r3, r1, ip
 800fdbc:	bf34      	ite	cc
 800fdbe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fdc2:	2100      	movcs	r1, #0
 800fdc4:	3015      	adds	r0, #21
 800fdc6:	fa04 f000 	lsl.w	r0, r4, r0
 800fdca:	fa21 f10e 	lsr.w	r1, r1, lr
 800fdce:	ea40 0201 	orr.w	r2, r0, r1
 800fdd2:	ec43 2b10 	vmov	d0, r2, r3
 800fdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdd8:	42b7      	cmp	r7, r6
 800fdda:	bf3a      	itte	cc
 800fddc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fde0:	f1a5 0608 	subcc.w	r6, r5, #8
 800fde4:	2100      	movcs	r1, #0
 800fde6:	380b      	subs	r0, #11
 800fde8:	d017      	beq.n	800fe1a <__b2d+0x92>
 800fdea:	f1c0 0c20 	rsb	ip, r0, #32
 800fdee:	fa04 f500 	lsl.w	r5, r4, r0
 800fdf2:	42be      	cmp	r6, r7
 800fdf4:	fa21 f40c 	lsr.w	r4, r1, ip
 800fdf8:	ea45 0504 	orr.w	r5, r5, r4
 800fdfc:	bf8c      	ite	hi
 800fdfe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fe02:	2400      	movls	r4, #0
 800fe04:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fe08:	fa01 f000 	lsl.w	r0, r1, r0
 800fe0c:	fa24 f40c 	lsr.w	r4, r4, ip
 800fe10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe14:	ea40 0204 	orr.w	r2, r0, r4
 800fe18:	e7db      	b.n	800fdd2 <__b2d+0x4a>
 800fe1a:	ea44 030c 	orr.w	r3, r4, ip
 800fe1e:	460a      	mov	r2, r1
 800fe20:	e7d7      	b.n	800fdd2 <__b2d+0x4a>
 800fe22:	bf00      	nop
 800fe24:	3ff00000 	.word	0x3ff00000

0800fe28 <__d2b>:
 800fe28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe2c:	4689      	mov	r9, r1
 800fe2e:	2101      	movs	r1, #1
 800fe30:	ec57 6b10 	vmov	r6, r7, d0
 800fe34:	4690      	mov	r8, r2
 800fe36:	f7ff fc09 	bl	800f64c <_Balloc>
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	b930      	cbnz	r0, 800fe4c <__d2b+0x24>
 800fe3e:	4602      	mov	r2, r0
 800fe40:	4b25      	ldr	r3, [pc, #148]	; (800fed8 <__d2b+0xb0>)
 800fe42:	4826      	ldr	r0, [pc, #152]	; (800fedc <__d2b+0xb4>)
 800fe44:	f240 310a 	movw	r1, #778	; 0x30a
 800fe48:	f000 f9a4 	bl	8010194 <__assert_func>
 800fe4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe54:	bb35      	cbnz	r5, 800fea4 <__d2b+0x7c>
 800fe56:	2e00      	cmp	r6, #0
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	d028      	beq.n	800feae <__d2b+0x86>
 800fe5c:	4668      	mov	r0, sp
 800fe5e:	9600      	str	r6, [sp, #0]
 800fe60:	f7ff fd06 	bl	800f870 <__lo0bits>
 800fe64:	9900      	ldr	r1, [sp, #0]
 800fe66:	b300      	cbz	r0, 800feaa <__d2b+0x82>
 800fe68:	9a01      	ldr	r2, [sp, #4]
 800fe6a:	f1c0 0320 	rsb	r3, r0, #32
 800fe6e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe72:	430b      	orrs	r3, r1
 800fe74:	40c2      	lsrs	r2, r0
 800fe76:	6163      	str	r3, [r4, #20]
 800fe78:	9201      	str	r2, [sp, #4]
 800fe7a:	9b01      	ldr	r3, [sp, #4]
 800fe7c:	61a3      	str	r3, [r4, #24]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	bf14      	ite	ne
 800fe82:	2202      	movne	r2, #2
 800fe84:	2201      	moveq	r2, #1
 800fe86:	6122      	str	r2, [r4, #16]
 800fe88:	b1d5      	cbz	r5, 800fec0 <__d2b+0x98>
 800fe8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe8e:	4405      	add	r5, r0
 800fe90:	f8c9 5000 	str.w	r5, [r9]
 800fe94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe98:	f8c8 0000 	str.w	r0, [r8]
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	b003      	add	sp, #12
 800fea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fea8:	e7d5      	b.n	800fe56 <__d2b+0x2e>
 800feaa:	6161      	str	r1, [r4, #20]
 800feac:	e7e5      	b.n	800fe7a <__d2b+0x52>
 800feae:	a801      	add	r0, sp, #4
 800feb0:	f7ff fcde 	bl	800f870 <__lo0bits>
 800feb4:	9b01      	ldr	r3, [sp, #4]
 800feb6:	6163      	str	r3, [r4, #20]
 800feb8:	2201      	movs	r2, #1
 800feba:	6122      	str	r2, [r4, #16]
 800febc:	3020      	adds	r0, #32
 800febe:	e7e3      	b.n	800fe88 <__d2b+0x60>
 800fec0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fec4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fec8:	f8c9 0000 	str.w	r0, [r9]
 800fecc:	6918      	ldr	r0, [r3, #16]
 800fece:	f7ff fcaf 	bl	800f830 <__hi0bits>
 800fed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fed6:	e7df      	b.n	800fe98 <__d2b+0x70>
 800fed8:	08011a00 	.word	0x08011a00
 800fedc:	08011aa3 	.word	0x08011aa3

0800fee0 <__ratio>:
 800fee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	4688      	mov	r8, r1
 800fee6:	4669      	mov	r1, sp
 800fee8:	4681      	mov	r9, r0
 800feea:	f7ff ff4d 	bl	800fd88 <__b2d>
 800feee:	a901      	add	r1, sp, #4
 800fef0:	4640      	mov	r0, r8
 800fef2:	ec55 4b10 	vmov	r4, r5, d0
 800fef6:	ee10 aa10 	vmov	sl, s0
 800fefa:	f7ff ff45 	bl	800fd88 <__b2d>
 800fefe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff02:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff06:	1a59      	subs	r1, r3, r1
 800ff08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff0c:	1ad3      	subs	r3, r2, r3
 800ff0e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ff12:	ec57 6b10 	vmov	r6, r7, d0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	bfd6      	itet	le
 800ff1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ff1e:	462a      	movgt	r2, r5
 800ff20:	463a      	movle	r2, r7
 800ff22:	46ab      	mov	fp, r5
 800ff24:	bfd6      	itet	le
 800ff26:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ff2a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ff2e:	ee00 3a90 	vmovle	s1, r3
 800ff32:	ec4b ab17 	vmov	d7, sl, fp
 800ff36:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ff3a:	b003      	add	sp, #12
 800ff3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff40 <__copybits>:
 800ff40:	3901      	subs	r1, #1
 800ff42:	b570      	push	{r4, r5, r6, lr}
 800ff44:	1149      	asrs	r1, r1, #5
 800ff46:	6914      	ldr	r4, [r2, #16]
 800ff48:	3101      	adds	r1, #1
 800ff4a:	f102 0314 	add.w	r3, r2, #20
 800ff4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ff52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ff56:	1f05      	subs	r5, r0, #4
 800ff58:	42a3      	cmp	r3, r4
 800ff5a:	d30c      	bcc.n	800ff76 <__copybits+0x36>
 800ff5c:	1aa3      	subs	r3, r4, r2
 800ff5e:	3b11      	subs	r3, #17
 800ff60:	f023 0303 	bic.w	r3, r3, #3
 800ff64:	3211      	adds	r2, #17
 800ff66:	42a2      	cmp	r2, r4
 800ff68:	bf88      	it	hi
 800ff6a:	2300      	movhi	r3, #0
 800ff6c:	4418      	add	r0, r3
 800ff6e:	2300      	movs	r3, #0
 800ff70:	4288      	cmp	r0, r1
 800ff72:	d305      	bcc.n	800ff80 <__copybits+0x40>
 800ff74:	bd70      	pop	{r4, r5, r6, pc}
 800ff76:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff7a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff7e:	e7eb      	b.n	800ff58 <__copybits+0x18>
 800ff80:	f840 3b04 	str.w	r3, [r0], #4
 800ff84:	e7f4      	b.n	800ff70 <__copybits+0x30>

0800ff86 <__any_on>:
 800ff86:	f100 0214 	add.w	r2, r0, #20
 800ff8a:	6900      	ldr	r0, [r0, #16]
 800ff8c:	114b      	asrs	r3, r1, #5
 800ff8e:	4298      	cmp	r0, r3
 800ff90:	b510      	push	{r4, lr}
 800ff92:	db11      	blt.n	800ffb8 <__any_on+0x32>
 800ff94:	dd0a      	ble.n	800ffac <__any_on+0x26>
 800ff96:	f011 011f 	ands.w	r1, r1, #31
 800ff9a:	d007      	beq.n	800ffac <__any_on+0x26>
 800ff9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ffa0:	fa24 f001 	lsr.w	r0, r4, r1
 800ffa4:	fa00 f101 	lsl.w	r1, r0, r1
 800ffa8:	428c      	cmp	r4, r1
 800ffaa:	d10b      	bne.n	800ffc4 <__any_on+0x3e>
 800ffac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d803      	bhi.n	800ffbc <__any_on+0x36>
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	bd10      	pop	{r4, pc}
 800ffb8:	4603      	mov	r3, r0
 800ffba:	e7f7      	b.n	800ffac <__any_on+0x26>
 800ffbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ffc0:	2900      	cmp	r1, #0
 800ffc2:	d0f5      	beq.n	800ffb0 <__any_on+0x2a>
 800ffc4:	2001      	movs	r0, #1
 800ffc6:	e7f6      	b.n	800ffb6 <__any_on+0x30>

0800ffc8 <_calloc_r>:
 800ffc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffca:	fba1 2402 	umull	r2, r4, r1, r2
 800ffce:	b94c      	cbnz	r4, 800ffe4 <_calloc_r+0x1c>
 800ffd0:	4611      	mov	r1, r2
 800ffd2:	9201      	str	r2, [sp, #4]
 800ffd4:	f000 f82e 	bl	8010034 <_malloc_r>
 800ffd8:	9a01      	ldr	r2, [sp, #4]
 800ffda:	4605      	mov	r5, r0
 800ffdc:	b930      	cbnz	r0, 800ffec <_calloc_r+0x24>
 800ffde:	4628      	mov	r0, r5
 800ffe0:	b003      	add	sp, #12
 800ffe2:	bd30      	pop	{r4, r5, pc}
 800ffe4:	220c      	movs	r2, #12
 800ffe6:	6002      	str	r2, [r0, #0]
 800ffe8:	2500      	movs	r5, #0
 800ffea:	e7f8      	b.n	800ffde <_calloc_r+0x16>
 800ffec:	4621      	mov	r1, r4
 800ffee:	f7fe f9b9 	bl	800e364 <memset>
 800fff2:	e7f4      	b.n	800ffde <_calloc_r+0x16>

0800fff4 <sbrk_aligned>:
 800fff4:	b570      	push	{r4, r5, r6, lr}
 800fff6:	4e0e      	ldr	r6, [pc, #56]	; (8010030 <sbrk_aligned+0x3c>)
 800fff8:	460c      	mov	r4, r1
 800fffa:	6831      	ldr	r1, [r6, #0]
 800fffc:	4605      	mov	r5, r0
 800fffe:	b911      	cbnz	r1, 8010006 <sbrk_aligned+0x12>
 8010000:	f000 f896 	bl	8010130 <_sbrk_r>
 8010004:	6030      	str	r0, [r6, #0]
 8010006:	4621      	mov	r1, r4
 8010008:	4628      	mov	r0, r5
 801000a:	f000 f891 	bl	8010130 <_sbrk_r>
 801000e:	1c43      	adds	r3, r0, #1
 8010010:	d00a      	beq.n	8010028 <sbrk_aligned+0x34>
 8010012:	1cc4      	adds	r4, r0, #3
 8010014:	f024 0403 	bic.w	r4, r4, #3
 8010018:	42a0      	cmp	r0, r4
 801001a:	d007      	beq.n	801002c <sbrk_aligned+0x38>
 801001c:	1a21      	subs	r1, r4, r0
 801001e:	4628      	mov	r0, r5
 8010020:	f000 f886 	bl	8010130 <_sbrk_r>
 8010024:	3001      	adds	r0, #1
 8010026:	d101      	bne.n	801002c <sbrk_aligned+0x38>
 8010028:	f04f 34ff 	mov.w	r4, #4294967295
 801002c:	4620      	mov	r0, r4
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	24000a20 	.word	0x24000a20

08010034 <_malloc_r>:
 8010034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010038:	1ccd      	adds	r5, r1, #3
 801003a:	f025 0503 	bic.w	r5, r5, #3
 801003e:	3508      	adds	r5, #8
 8010040:	2d0c      	cmp	r5, #12
 8010042:	bf38      	it	cc
 8010044:	250c      	movcc	r5, #12
 8010046:	2d00      	cmp	r5, #0
 8010048:	4607      	mov	r7, r0
 801004a:	db01      	blt.n	8010050 <_malloc_r+0x1c>
 801004c:	42a9      	cmp	r1, r5
 801004e:	d905      	bls.n	801005c <_malloc_r+0x28>
 8010050:	230c      	movs	r3, #12
 8010052:	603b      	str	r3, [r7, #0]
 8010054:	2600      	movs	r6, #0
 8010056:	4630      	mov	r0, r6
 8010058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005c:	4e2e      	ldr	r6, [pc, #184]	; (8010118 <_malloc_r+0xe4>)
 801005e:	f000 f8d1 	bl	8010204 <__malloc_lock>
 8010062:	6833      	ldr	r3, [r6, #0]
 8010064:	461c      	mov	r4, r3
 8010066:	bb34      	cbnz	r4, 80100b6 <_malloc_r+0x82>
 8010068:	4629      	mov	r1, r5
 801006a:	4638      	mov	r0, r7
 801006c:	f7ff ffc2 	bl	800fff4 <sbrk_aligned>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	4604      	mov	r4, r0
 8010074:	d14d      	bne.n	8010112 <_malloc_r+0xde>
 8010076:	6834      	ldr	r4, [r6, #0]
 8010078:	4626      	mov	r6, r4
 801007a:	2e00      	cmp	r6, #0
 801007c:	d140      	bne.n	8010100 <_malloc_r+0xcc>
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	4631      	mov	r1, r6
 8010082:	4638      	mov	r0, r7
 8010084:	eb04 0803 	add.w	r8, r4, r3
 8010088:	f000 f852 	bl	8010130 <_sbrk_r>
 801008c:	4580      	cmp	r8, r0
 801008e:	d13a      	bne.n	8010106 <_malloc_r+0xd2>
 8010090:	6821      	ldr	r1, [r4, #0]
 8010092:	3503      	adds	r5, #3
 8010094:	1a6d      	subs	r5, r5, r1
 8010096:	f025 0503 	bic.w	r5, r5, #3
 801009a:	3508      	adds	r5, #8
 801009c:	2d0c      	cmp	r5, #12
 801009e:	bf38      	it	cc
 80100a0:	250c      	movcc	r5, #12
 80100a2:	4629      	mov	r1, r5
 80100a4:	4638      	mov	r0, r7
 80100a6:	f7ff ffa5 	bl	800fff4 <sbrk_aligned>
 80100aa:	3001      	adds	r0, #1
 80100ac:	d02b      	beq.n	8010106 <_malloc_r+0xd2>
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	442b      	add	r3, r5
 80100b2:	6023      	str	r3, [r4, #0]
 80100b4:	e00e      	b.n	80100d4 <_malloc_r+0xa0>
 80100b6:	6822      	ldr	r2, [r4, #0]
 80100b8:	1b52      	subs	r2, r2, r5
 80100ba:	d41e      	bmi.n	80100fa <_malloc_r+0xc6>
 80100bc:	2a0b      	cmp	r2, #11
 80100be:	d916      	bls.n	80100ee <_malloc_r+0xba>
 80100c0:	1961      	adds	r1, r4, r5
 80100c2:	42a3      	cmp	r3, r4
 80100c4:	6025      	str	r5, [r4, #0]
 80100c6:	bf18      	it	ne
 80100c8:	6059      	strne	r1, [r3, #4]
 80100ca:	6863      	ldr	r3, [r4, #4]
 80100cc:	bf08      	it	eq
 80100ce:	6031      	streq	r1, [r6, #0]
 80100d0:	5162      	str	r2, [r4, r5]
 80100d2:	604b      	str	r3, [r1, #4]
 80100d4:	4638      	mov	r0, r7
 80100d6:	f104 060b 	add.w	r6, r4, #11
 80100da:	f000 f899 	bl	8010210 <__malloc_unlock>
 80100de:	f026 0607 	bic.w	r6, r6, #7
 80100e2:	1d23      	adds	r3, r4, #4
 80100e4:	1af2      	subs	r2, r6, r3
 80100e6:	d0b6      	beq.n	8010056 <_malloc_r+0x22>
 80100e8:	1b9b      	subs	r3, r3, r6
 80100ea:	50a3      	str	r3, [r4, r2]
 80100ec:	e7b3      	b.n	8010056 <_malloc_r+0x22>
 80100ee:	6862      	ldr	r2, [r4, #4]
 80100f0:	42a3      	cmp	r3, r4
 80100f2:	bf0c      	ite	eq
 80100f4:	6032      	streq	r2, [r6, #0]
 80100f6:	605a      	strne	r2, [r3, #4]
 80100f8:	e7ec      	b.n	80100d4 <_malloc_r+0xa0>
 80100fa:	4623      	mov	r3, r4
 80100fc:	6864      	ldr	r4, [r4, #4]
 80100fe:	e7b2      	b.n	8010066 <_malloc_r+0x32>
 8010100:	4634      	mov	r4, r6
 8010102:	6876      	ldr	r6, [r6, #4]
 8010104:	e7b9      	b.n	801007a <_malloc_r+0x46>
 8010106:	230c      	movs	r3, #12
 8010108:	603b      	str	r3, [r7, #0]
 801010a:	4638      	mov	r0, r7
 801010c:	f000 f880 	bl	8010210 <__malloc_unlock>
 8010110:	e7a1      	b.n	8010056 <_malloc_r+0x22>
 8010112:	6025      	str	r5, [r4, #0]
 8010114:	e7de      	b.n	80100d4 <_malloc_r+0xa0>
 8010116:	bf00      	nop
 8010118:	24000a1c 	.word	0x24000a1c
 801011c:	00000000 	.word	0x00000000

08010120 <nan>:
 8010120:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010128 <nan+0x8>
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	00000000 	.word	0x00000000
 801012c:	7ff80000 	.word	0x7ff80000

08010130 <_sbrk_r>:
 8010130:	b538      	push	{r3, r4, r5, lr}
 8010132:	4d06      	ldr	r5, [pc, #24]	; (801014c <_sbrk_r+0x1c>)
 8010134:	2300      	movs	r3, #0
 8010136:	4604      	mov	r4, r0
 8010138:	4608      	mov	r0, r1
 801013a:	602b      	str	r3, [r5, #0]
 801013c:	f7f3 fc90 	bl	8003a60 <_sbrk>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_sbrk_r+0x1a>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_sbrk_r+0x1a>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	24000a24 	.word	0x24000a24

08010150 <strncmp>:
 8010150:	b510      	push	{r4, lr}
 8010152:	b17a      	cbz	r2, 8010174 <strncmp+0x24>
 8010154:	4603      	mov	r3, r0
 8010156:	3901      	subs	r1, #1
 8010158:	1884      	adds	r4, r0, r2
 801015a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801015e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010162:	4290      	cmp	r0, r2
 8010164:	d101      	bne.n	801016a <strncmp+0x1a>
 8010166:	42a3      	cmp	r3, r4
 8010168:	d101      	bne.n	801016e <strncmp+0x1e>
 801016a:	1a80      	subs	r0, r0, r2
 801016c:	bd10      	pop	{r4, pc}
 801016e:	2800      	cmp	r0, #0
 8010170:	d1f3      	bne.n	801015a <strncmp+0xa>
 8010172:	e7fa      	b.n	801016a <strncmp+0x1a>
 8010174:	4610      	mov	r0, r2
 8010176:	e7f9      	b.n	801016c <strncmp+0x1c>

08010178 <__ascii_wctomb>:
 8010178:	b149      	cbz	r1, 801018e <__ascii_wctomb+0x16>
 801017a:	2aff      	cmp	r2, #255	; 0xff
 801017c:	bf85      	ittet	hi
 801017e:	238a      	movhi	r3, #138	; 0x8a
 8010180:	6003      	strhi	r3, [r0, #0]
 8010182:	700a      	strbls	r2, [r1, #0]
 8010184:	f04f 30ff 	movhi.w	r0, #4294967295
 8010188:	bf98      	it	ls
 801018a:	2001      	movls	r0, #1
 801018c:	4770      	bx	lr
 801018e:	4608      	mov	r0, r1
 8010190:	4770      	bx	lr
	...

08010194 <__assert_func>:
 8010194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010196:	4614      	mov	r4, r2
 8010198:	461a      	mov	r2, r3
 801019a:	4b09      	ldr	r3, [pc, #36]	; (80101c0 <__assert_func+0x2c>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4605      	mov	r5, r0
 80101a0:	68d8      	ldr	r0, [r3, #12]
 80101a2:	b14c      	cbz	r4, 80101b8 <__assert_func+0x24>
 80101a4:	4b07      	ldr	r3, [pc, #28]	; (80101c4 <__assert_func+0x30>)
 80101a6:	9100      	str	r1, [sp, #0]
 80101a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101ac:	4906      	ldr	r1, [pc, #24]	; (80101c8 <__assert_func+0x34>)
 80101ae:	462b      	mov	r3, r5
 80101b0:	f000 f80e 	bl	80101d0 <fiprintf>
 80101b4:	f000 fc2c 	bl	8010a10 <abort>
 80101b8:	4b04      	ldr	r3, [pc, #16]	; (80101cc <__assert_func+0x38>)
 80101ba:	461c      	mov	r4, r3
 80101bc:	e7f3      	b.n	80101a6 <__assert_func+0x12>
 80101be:	bf00      	nop
 80101c0:	24000084 	.word	0x24000084
 80101c4:	08011bfc 	.word	0x08011bfc
 80101c8:	08011c09 	.word	0x08011c09
 80101cc:	08011c37 	.word	0x08011c37

080101d0 <fiprintf>:
 80101d0:	b40e      	push	{r1, r2, r3}
 80101d2:	b503      	push	{r0, r1, lr}
 80101d4:	4601      	mov	r1, r0
 80101d6:	ab03      	add	r3, sp, #12
 80101d8:	4805      	ldr	r0, [pc, #20]	; (80101f0 <fiprintf+0x20>)
 80101da:	f853 2b04 	ldr.w	r2, [r3], #4
 80101de:	6800      	ldr	r0, [r0, #0]
 80101e0:	9301      	str	r3, [sp, #4]
 80101e2:	f000 f891 	bl	8010308 <_vfiprintf_r>
 80101e6:	b002      	add	sp, #8
 80101e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80101ec:	b003      	add	sp, #12
 80101ee:	4770      	bx	lr
 80101f0:	24000084 	.word	0x24000084

080101f4 <malloc>:
 80101f4:	4b02      	ldr	r3, [pc, #8]	; (8010200 <malloc+0xc>)
 80101f6:	4601      	mov	r1, r0
 80101f8:	6818      	ldr	r0, [r3, #0]
 80101fa:	f7ff bf1b 	b.w	8010034 <_malloc_r>
 80101fe:	bf00      	nop
 8010200:	24000084 	.word	0x24000084

08010204 <__malloc_lock>:
 8010204:	4801      	ldr	r0, [pc, #4]	; (801020c <__malloc_lock+0x8>)
 8010206:	f000 bdc3 	b.w	8010d90 <__retarget_lock_acquire_recursive>
 801020a:	bf00      	nop
 801020c:	24000a28 	.word	0x24000a28

08010210 <__malloc_unlock>:
 8010210:	4801      	ldr	r0, [pc, #4]	; (8010218 <__malloc_unlock+0x8>)
 8010212:	f000 bdbe 	b.w	8010d92 <__retarget_lock_release_recursive>
 8010216:	bf00      	nop
 8010218:	24000a28 	.word	0x24000a28

0801021c <_free_r>:
 801021c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801021e:	2900      	cmp	r1, #0
 8010220:	d044      	beq.n	80102ac <_free_r+0x90>
 8010222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010226:	9001      	str	r0, [sp, #4]
 8010228:	2b00      	cmp	r3, #0
 801022a:	f1a1 0404 	sub.w	r4, r1, #4
 801022e:	bfb8      	it	lt
 8010230:	18e4      	addlt	r4, r4, r3
 8010232:	f7ff ffe7 	bl	8010204 <__malloc_lock>
 8010236:	4a1e      	ldr	r2, [pc, #120]	; (80102b0 <_free_r+0x94>)
 8010238:	9801      	ldr	r0, [sp, #4]
 801023a:	6813      	ldr	r3, [r2, #0]
 801023c:	b933      	cbnz	r3, 801024c <_free_r+0x30>
 801023e:	6063      	str	r3, [r4, #4]
 8010240:	6014      	str	r4, [r2, #0]
 8010242:	b003      	add	sp, #12
 8010244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010248:	f7ff bfe2 	b.w	8010210 <__malloc_unlock>
 801024c:	42a3      	cmp	r3, r4
 801024e:	d908      	bls.n	8010262 <_free_r+0x46>
 8010250:	6825      	ldr	r5, [r4, #0]
 8010252:	1961      	adds	r1, r4, r5
 8010254:	428b      	cmp	r3, r1
 8010256:	bf01      	itttt	eq
 8010258:	6819      	ldreq	r1, [r3, #0]
 801025a:	685b      	ldreq	r3, [r3, #4]
 801025c:	1949      	addeq	r1, r1, r5
 801025e:	6021      	streq	r1, [r4, #0]
 8010260:	e7ed      	b.n	801023e <_free_r+0x22>
 8010262:	461a      	mov	r2, r3
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	b10b      	cbz	r3, 801026c <_free_r+0x50>
 8010268:	42a3      	cmp	r3, r4
 801026a:	d9fa      	bls.n	8010262 <_free_r+0x46>
 801026c:	6811      	ldr	r1, [r2, #0]
 801026e:	1855      	adds	r5, r2, r1
 8010270:	42a5      	cmp	r5, r4
 8010272:	d10b      	bne.n	801028c <_free_r+0x70>
 8010274:	6824      	ldr	r4, [r4, #0]
 8010276:	4421      	add	r1, r4
 8010278:	1854      	adds	r4, r2, r1
 801027a:	42a3      	cmp	r3, r4
 801027c:	6011      	str	r1, [r2, #0]
 801027e:	d1e0      	bne.n	8010242 <_free_r+0x26>
 8010280:	681c      	ldr	r4, [r3, #0]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	6053      	str	r3, [r2, #4]
 8010286:	4421      	add	r1, r4
 8010288:	6011      	str	r1, [r2, #0]
 801028a:	e7da      	b.n	8010242 <_free_r+0x26>
 801028c:	d902      	bls.n	8010294 <_free_r+0x78>
 801028e:	230c      	movs	r3, #12
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	e7d6      	b.n	8010242 <_free_r+0x26>
 8010294:	6825      	ldr	r5, [r4, #0]
 8010296:	1961      	adds	r1, r4, r5
 8010298:	428b      	cmp	r3, r1
 801029a:	bf04      	itt	eq
 801029c:	6819      	ldreq	r1, [r3, #0]
 801029e:	685b      	ldreq	r3, [r3, #4]
 80102a0:	6063      	str	r3, [r4, #4]
 80102a2:	bf04      	itt	eq
 80102a4:	1949      	addeq	r1, r1, r5
 80102a6:	6021      	streq	r1, [r4, #0]
 80102a8:	6054      	str	r4, [r2, #4]
 80102aa:	e7ca      	b.n	8010242 <_free_r+0x26>
 80102ac:	b003      	add	sp, #12
 80102ae:	bd30      	pop	{r4, r5, pc}
 80102b0:	24000a1c 	.word	0x24000a1c

080102b4 <__sfputc_r>:
 80102b4:	6893      	ldr	r3, [r2, #8]
 80102b6:	3b01      	subs	r3, #1
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	b410      	push	{r4}
 80102bc:	6093      	str	r3, [r2, #8]
 80102be:	da08      	bge.n	80102d2 <__sfputc_r+0x1e>
 80102c0:	6994      	ldr	r4, [r2, #24]
 80102c2:	42a3      	cmp	r3, r4
 80102c4:	db01      	blt.n	80102ca <__sfputc_r+0x16>
 80102c6:	290a      	cmp	r1, #10
 80102c8:	d103      	bne.n	80102d2 <__sfputc_r+0x1e>
 80102ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102ce:	f000 badf 	b.w	8010890 <__swbuf_r>
 80102d2:	6813      	ldr	r3, [r2, #0]
 80102d4:	1c58      	adds	r0, r3, #1
 80102d6:	6010      	str	r0, [r2, #0]
 80102d8:	7019      	strb	r1, [r3, #0]
 80102da:	4608      	mov	r0, r1
 80102dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102e0:	4770      	bx	lr

080102e2 <__sfputs_r>:
 80102e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e4:	4606      	mov	r6, r0
 80102e6:	460f      	mov	r7, r1
 80102e8:	4614      	mov	r4, r2
 80102ea:	18d5      	adds	r5, r2, r3
 80102ec:	42ac      	cmp	r4, r5
 80102ee:	d101      	bne.n	80102f4 <__sfputs_r+0x12>
 80102f0:	2000      	movs	r0, #0
 80102f2:	e007      	b.n	8010304 <__sfputs_r+0x22>
 80102f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102f8:	463a      	mov	r2, r7
 80102fa:	4630      	mov	r0, r6
 80102fc:	f7ff ffda 	bl	80102b4 <__sfputc_r>
 8010300:	1c43      	adds	r3, r0, #1
 8010302:	d1f3      	bne.n	80102ec <__sfputs_r+0xa>
 8010304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010308 <_vfiprintf_r>:
 8010308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030c:	460d      	mov	r5, r1
 801030e:	b09d      	sub	sp, #116	; 0x74
 8010310:	4614      	mov	r4, r2
 8010312:	4698      	mov	r8, r3
 8010314:	4606      	mov	r6, r0
 8010316:	b118      	cbz	r0, 8010320 <_vfiprintf_r+0x18>
 8010318:	6983      	ldr	r3, [r0, #24]
 801031a:	b90b      	cbnz	r3, 8010320 <_vfiprintf_r+0x18>
 801031c:	f000 fc9a 	bl	8010c54 <__sinit>
 8010320:	4b89      	ldr	r3, [pc, #548]	; (8010548 <_vfiprintf_r+0x240>)
 8010322:	429d      	cmp	r5, r3
 8010324:	d11b      	bne.n	801035e <_vfiprintf_r+0x56>
 8010326:	6875      	ldr	r5, [r6, #4]
 8010328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801032a:	07d9      	lsls	r1, r3, #31
 801032c:	d405      	bmi.n	801033a <_vfiprintf_r+0x32>
 801032e:	89ab      	ldrh	r3, [r5, #12]
 8010330:	059a      	lsls	r2, r3, #22
 8010332:	d402      	bmi.n	801033a <_vfiprintf_r+0x32>
 8010334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010336:	f000 fd2b 	bl	8010d90 <__retarget_lock_acquire_recursive>
 801033a:	89ab      	ldrh	r3, [r5, #12]
 801033c:	071b      	lsls	r3, r3, #28
 801033e:	d501      	bpl.n	8010344 <_vfiprintf_r+0x3c>
 8010340:	692b      	ldr	r3, [r5, #16]
 8010342:	b9eb      	cbnz	r3, 8010380 <_vfiprintf_r+0x78>
 8010344:	4629      	mov	r1, r5
 8010346:	4630      	mov	r0, r6
 8010348:	f000 faf4 	bl	8010934 <__swsetup_r>
 801034c:	b1c0      	cbz	r0, 8010380 <_vfiprintf_r+0x78>
 801034e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010350:	07dc      	lsls	r4, r3, #31
 8010352:	d50e      	bpl.n	8010372 <_vfiprintf_r+0x6a>
 8010354:	f04f 30ff 	mov.w	r0, #4294967295
 8010358:	b01d      	add	sp, #116	; 0x74
 801035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035e:	4b7b      	ldr	r3, [pc, #492]	; (801054c <_vfiprintf_r+0x244>)
 8010360:	429d      	cmp	r5, r3
 8010362:	d101      	bne.n	8010368 <_vfiprintf_r+0x60>
 8010364:	68b5      	ldr	r5, [r6, #8]
 8010366:	e7df      	b.n	8010328 <_vfiprintf_r+0x20>
 8010368:	4b79      	ldr	r3, [pc, #484]	; (8010550 <_vfiprintf_r+0x248>)
 801036a:	429d      	cmp	r5, r3
 801036c:	bf08      	it	eq
 801036e:	68f5      	ldreq	r5, [r6, #12]
 8010370:	e7da      	b.n	8010328 <_vfiprintf_r+0x20>
 8010372:	89ab      	ldrh	r3, [r5, #12]
 8010374:	0598      	lsls	r0, r3, #22
 8010376:	d4ed      	bmi.n	8010354 <_vfiprintf_r+0x4c>
 8010378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801037a:	f000 fd0a 	bl	8010d92 <__retarget_lock_release_recursive>
 801037e:	e7e9      	b.n	8010354 <_vfiprintf_r+0x4c>
 8010380:	2300      	movs	r3, #0
 8010382:	9309      	str	r3, [sp, #36]	; 0x24
 8010384:	2320      	movs	r3, #32
 8010386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801038a:	f8cd 800c 	str.w	r8, [sp, #12]
 801038e:	2330      	movs	r3, #48	; 0x30
 8010390:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010554 <_vfiprintf_r+0x24c>
 8010394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010398:	f04f 0901 	mov.w	r9, #1
 801039c:	4623      	mov	r3, r4
 801039e:	469a      	mov	sl, r3
 80103a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103a4:	b10a      	cbz	r2, 80103aa <_vfiprintf_r+0xa2>
 80103a6:	2a25      	cmp	r2, #37	; 0x25
 80103a8:	d1f9      	bne.n	801039e <_vfiprintf_r+0x96>
 80103aa:	ebba 0b04 	subs.w	fp, sl, r4
 80103ae:	d00b      	beq.n	80103c8 <_vfiprintf_r+0xc0>
 80103b0:	465b      	mov	r3, fp
 80103b2:	4622      	mov	r2, r4
 80103b4:	4629      	mov	r1, r5
 80103b6:	4630      	mov	r0, r6
 80103b8:	f7ff ff93 	bl	80102e2 <__sfputs_r>
 80103bc:	3001      	adds	r0, #1
 80103be:	f000 80aa 	beq.w	8010516 <_vfiprintf_r+0x20e>
 80103c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103c4:	445a      	add	r2, fp
 80103c6:	9209      	str	r2, [sp, #36]	; 0x24
 80103c8:	f89a 3000 	ldrb.w	r3, [sl]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f000 80a2 	beq.w	8010516 <_vfiprintf_r+0x20e>
 80103d2:	2300      	movs	r3, #0
 80103d4:	f04f 32ff 	mov.w	r2, #4294967295
 80103d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103dc:	f10a 0a01 	add.w	sl, sl, #1
 80103e0:	9304      	str	r3, [sp, #16]
 80103e2:	9307      	str	r3, [sp, #28]
 80103e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103e8:	931a      	str	r3, [sp, #104]	; 0x68
 80103ea:	4654      	mov	r4, sl
 80103ec:	2205      	movs	r2, #5
 80103ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103f2:	4858      	ldr	r0, [pc, #352]	; (8010554 <_vfiprintf_r+0x24c>)
 80103f4:	f7ef ff7c 	bl	80002f0 <memchr>
 80103f8:	9a04      	ldr	r2, [sp, #16]
 80103fa:	b9d8      	cbnz	r0, 8010434 <_vfiprintf_r+0x12c>
 80103fc:	06d1      	lsls	r1, r2, #27
 80103fe:	bf44      	itt	mi
 8010400:	2320      	movmi	r3, #32
 8010402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010406:	0713      	lsls	r3, r2, #28
 8010408:	bf44      	itt	mi
 801040a:	232b      	movmi	r3, #43	; 0x2b
 801040c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010410:	f89a 3000 	ldrb.w	r3, [sl]
 8010414:	2b2a      	cmp	r3, #42	; 0x2a
 8010416:	d015      	beq.n	8010444 <_vfiprintf_r+0x13c>
 8010418:	9a07      	ldr	r2, [sp, #28]
 801041a:	4654      	mov	r4, sl
 801041c:	2000      	movs	r0, #0
 801041e:	f04f 0c0a 	mov.w	ip, #10
 8010422:	4621      	mov	r1, r4
 8010424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010428:	3b30      	subs	r3, #48	; 0x30
 801042a:	2b09      	cmp	r3, #9
 801042c:	d94e      	bls.n	80104cc <_vfiprintf_r+0x1c4>
 801042e:	b1b0      	cbz	r0, 801045e <_vfiprintf_r+0x156>
 8010430:	9207      	str	r2, [sp, #28]
 8010432:	e014      	b.n	801045e <_vfiprintf_r+0x156>
 8010434:	eba0 0308 	sub.w	r3, r0, r8
 8010438:	fa09 f303 	lsl.w	r3, r9, r3
 801043c:	4313      	orrs	r3, r2
 801043e:	9304      	str	r3, [sp, #16]
 8010440:	46a2      	mov	sl, r4
 8010442:	e7d2      	b.n	80103ea <_vfiprintf_r+0xe2>
 8010444:	9b03      	ldr	r3, [sp, #12]
 8010446:	1d19      	adds	r1, r3, #4
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	9103      	str	r1, [sp, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	bfbb      	ittet	lt
 8010450:	425b      	neglt	r3, r3
 8010452:	f042 0202 	orrlt.w	r2, r2, #2
 8010456:	9307      	strge	r3, [sp, #28]
 8010458:	9307      	strlt	r3, [sp, #28]
 801045a:	bfb8      	it	lt
 801045c:	9204      	strlt	r2, [sp, #16]
 801045e:	7823      	ldrb	r3, [r4, #0]
 8010460:	2b2e      	cmp	r3, #46	; 0x2e
 8010462:	d10c      	bne.n	801047e <_vfiprintf_r+0x176>
 8010464:	7863      	ldrb	r3, [r4, #1]
 8010466:	2b2a      	cmp	r3, #42	; 0x2a
 8010468:	d135      	bne.n	80104d6 <_vfiprintf_r+0x1ce>
 801046a:	9b03      	ldr	r3, [sp, #12]
 801046c:	1d1a      	adds	r2, r3, #4
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	9203      	str	r2, [sp, #12]
 8010472:	2b00      	cmp	r3, #0
 8010474:	bfb8      	it	lt
 8010476:	f04f 33ff 	movlt.w	r3, #4294967295
 801047a:	3402      	adds	r4, #2
 801047c:	9305      	str	r3, [sp, #20]
 801047e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010564 <_vfiprintf_r+0x25c>
 8010482:	7821      	ldrb	r1, [r4, #0]
 8010484:	2203      	movs	r2, #3
 8010486:	4650      	mov	r0, sl
 8010488:	f7ef ff32 	bl	80002f0 <memchr>
 801048c:	b140      	cbz	r0, 80104a0 <_vfiprintf_r+0x198>
 801048e:	2340      	movs	r3, #64	; 0x40
 8010490:	eba0 000a 	sub.w	r0, r0, sl
 8010494:	fa03 f000 	lsl.w	r0, r3, r0
 8010498:	9b04      	ldr	r3, [sp, #16]
 801049a:	4303      	orrs	r3, r0
 801049c:	3401      	adds	r4, #1
 801049e:	9304      	str	r3, [sp, #16]
 80104a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a4:	482c      	ldr	r0, [pc, #176]	; (8010558 <_vfiprintf_r+0x250>)
 80104a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104aa:	2206      	movs	r2, #6
 80104ac:	f7ef ff20 	bl	80002f0 <memchr>
 80104b0:	2800      	cmp	r0, #0
 80104b2:	d03f      	beq.n	8010534 <_vfiprintf_r+0x22c>
 80104b4:	4b29      	ldr	r3, [pc, #164]	; (801055c <_vfiprintf_r+0x254>)
 80104b6:	bb1b      	cbnz	r3, 8010500 <_vfiprintf_r+0x1f8>
 80104b8:	9b03      	ldr	r3, [sp, #12]
 80104ba:	3307      	adds	r3, #7
 80104bc:	f023 0307 	bic.w	r3, r3, #7
 80104c0:	3308      	adds	r3, #8
 80104c2:	9303      	str	r3, [sp, #12]
 80104c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c6:	443b      	add	r3, r7
 80104c8:	9309      	str	r3, [sp, #36]	; 0x24
 80104ca:	e767      	b.n	801039c <_vfiprintf_r+0x94>
 80104cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80104d0:	460c      	mov	r4, r1
 80104d2:	2001      	movs	r0, #1
 80104d4:	e7a5      	b.n	8010422 <_vfiprintf_r+0x11a>
 80104d6:	2300      	movs	r3, #0
 80104d8:	3401      	adds	r4, #1
 80104da:	9305      	str	r3, [sp, #20]
 80104dc:	4619      	mov	r1, r3
 80104de:	f04f 0c0a 	mov.w	ip, #10
 80104e2:	4620      	mov	r0, r4
 80104e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104e8:	3a30      	subs	r2, #48	; 0x30
 80104ea:	2a09      	cmp	r2, #9
 80104ec:	d903      	bls.n	80104f6 <_vfiprintf_r+0x1ee>
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d0c5      	beq.n	801047e <_vfiprintf_r+0x176>
 80104f2:	9105      	str	r1, [sp, #20]
 80104f4:	e7c3      	b.n	801047e <_vfiprintf_r+0x176>
 80104f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80104fa:	4604      	mov	r4, r0
 80104fc:	2301      	movs	r3, #1
 80104fe:	e7f0      	b.n	80104e2 <_vfiprintf_r+0x1da>
 8010500:	ab03      	add	r3, sp, #12
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	462a      	mov	r2, r5
 8010506:	4b16      	ldr	r3, [pc, #88]	; (8010560 <_vfiprintf_r+0x258>)
 8010508:	a904      	add	r1, sp, #16
 801050a:	4630      	mov	r0, r6
 801050c:	f3af 8000 	nop.w
 8010510:	4607      	mov	r7, r0
 8010512:	1c78      	adds	r0, r7, #1
 8010514:	d1d6      	bne.n	80104c4 <_vfiprintf_r+0x1bc>
 8010516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010518:	07d9      	lsls	r1, r3, #31
 801051a:	d405      	bmi.n	8010528 <_vfiprintf_r+0x220>
 801051c:	89ab      	ldrh	r3, [r5, #12]
 801051e:	059a      	lsls	r2, r3, #22
 8010520:	d402      	bmi.n	8010528 <_vfiprintf_r+0x220>
 8010522:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010524:	f000 fc35 	bl	8010d92 <__retarget_lock_release_recursive>
 8010528:	89ab      	ldrh	r3, [r5, #12]
 801052a:	065b      	lsls	r3, r3, #25
 801052c:	f53f af12 	bmi.w	8010354 <_vfiprintf_r+0x4c>
 8010530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010532:	e711      	b.n	8010358 <_vfiprintf_r+0x50>
 8010534:	ab03      	add	r3, sp, #12
 8010536:	9300      	str	r3, [sp, #0]
 8010538:	462a      	mov	r2, r5
 801053a:	4b09      	ldr	r3, [pc, #36]	; (8010560 <_vfiprintf_r+0x258>)
 801053c:	a904      	add	r1, sp, #16
 801053e:	4630      	mov	r0, r6
 8010540:	f000 f880 	bl	8010644 <_printf_i>
 8010544:	e7e4      	b.n	8010510 <_vfiprintf_r+0x208>
 8010546:	bf00      	nop
 8010548:	08011d8c 	.word	0x08011d8c
 801054c:	08011dac 	.word	0x08011dac
 8010550:	08011d6c 	.word	0x08011d6c
 8010554:	08011d39 	.word	0x08011d39
 8010558:	08011d43 	.word	0x08011d43
 801055c:	00000000 	.word	0x00000000
 8010560:	080102e3 	.word	0x080102e3
 8010564:	08011d3f 	.word	0x08011d3f

08010568 <_printf_common>:
 8010568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801056c:	4616      	mov	r6, r2
 801056e:	4699      	mov	r9, r3
 8010570:	688a      	ldr	r2, [r1, #8]
 8010572:	690b      	ldr	r3, [r1, #16]
 8010574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010578:	4293      	cmp	r3, r2
 801057a:	bfb8      	it	lt
 801057c:	4613      	movlt	r3, r2
 801057e:	6033      	str	r3, [r6, #0]
 8010580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010584:	4607      	mov	r7, r0
 8010586:	460c      	mov	r4, r1
 8010588:	b10a      	cbz	r2, 801058e <_printf_common+0x26>
 801058a:	3301      	adds	r3, #1
 801058c:	6033      	str	r3, [r6, #0]
 801058e:	6823      	ldr	r3, [r4, #0]
 8010590:	0699      	lsls	r1, r3, #26
 8010592:	bf42      	ittt	mi
 8010594:	6833      	ldrmi	r3, [r6, #0]
 8010596:	3302      	addmi	r3, #2
 8010598:	6033      	strmi	r3, [r6, #0]
 801059a:	6825      	ldr	r5, [r4, #0]
 801059c:	f015 0506 	ands.w	r5, r5, #6
 80105a0:	d106      	bne.n	80105b0 <_printf_common+0x48>
 80105a2:	f104 0a19 	add.w	sl, r4, #25
 80105a6:	68e3      	ldr	r3, [r4, #12]
 80105a8:	6832      	ldr	r2, [r6, #0]
 80105aa:	1a9b      	subs	r3, r3, r2
 80105ac:	42ab      	cmp	r3, r5
 80105ae:	dc26      	bgt.n	80105fe <_printf_common+0x96>
 80105b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80105b4:	1e13      	subs	r3, r2, #0
 80105b6:	6822      	ldr	r2, [r4, #0]
 80105b8:	bf18      	it	ne
 80105ba:	2301      	movne	r3, #1
 80105bc:	0692      	lsls	r2, r2, #26
 80105be:	d42b      	bmi.n	8010618 <_printf_common+0xb0>
 80105c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105c4:	4649      	mov	r1, r9
 80105c6:	4638      	mov	r0, r7
 80105c8:	47c0      	blx	r8
 80105ca:	3001      	adds	r0, #1
 80105cc:	d01e      	beq.n	801060c <_printf_common+0xa4>
 80105ce:	6823      	ldr	r3, [r4, #0]
 80105d0:	68e5      	ldr	r5, [r4, #12]
 80105d2:	6832      	ldr	r2, [r6, #0]
 80105d4:	f003 0306 	and.w	r3, r3, #6
 80105d8:	2b04      	cmp	r3, #4
 80105da:	bf08      	it	eq
 80105dc:	1aad      	subeq	r5, r5, r2
 80105de:	68a3      	ldr	r3, [r4, #8]
 80105e0:	6922      	ldr	r2, [r4, #16]
 80105e2:	bf0c      	ite	eq
 80105e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105e8:	2500      	movne	r5, #0
 80105ea:	4293      	cmp	r3, r2
 80105ec:	bfc4      	itt	gt
 80105ee:	1a9b      	subgt	r3, r3, r2
 80105f0:	18ed      	addgt	r5, r5, r3
 80105f2:	2600      	movs	r6, #0
 80105f4:	341a      	adds	r4, #26
 80105f6:	42b5      	cmp	r5, r6
 80105f8:	d11a      	bne.n	8010630 <_printf_common+0xc8>
 80105fa:	2000      	movs	r0, #0
 80105fc:	e008      	b.n	8010610 <_printf_common+0xa8>
 80105fe:	2301      	movs	r3, #1
 8010600:	4652      	mov	r2, sl
 8010602:	4649      	mov	r1, r9
 8010604:	4638      	mov	r0, r7
 8010606:	47c0      	blx	r8
 8010608:	3001      	adds	r0, #1
 801060a:	d103      	bne.n	8010614 <_printf_common+0xac>
 801060c:	f04f 30ff 	mov.w	r0, #4294967295
 8010610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010614:	3501      	adds	r5, #1
 8010616:	e7c6      	b.n	80105a6 <_printf_common+0x3e>
 8010618:	18e1      	adds	r1, r4, r3
 801061a:	1c5a      	adds	r2, r3, #1
 801061c:	2030      	movs	r0, #48	; 0x30
 801061e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010622:	4422      	add	r2, r4
 8010624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801062c:	3302      	adds	r3, #2
 801062e:	e7c7      	b.n	80105c0 <_printf_common+0x58>
 8010630:	2301      	movs	r3, #1
 8010632:	4622      	mov	r2, r4
 8010634:	4649      	mov	r1, r9
 8010636:	4638      	mov	r0, r7
 8010638:	47c0      	blx	r8
 801063a:	3001      	adds	r0, #1
 801063c:	d0e6      	beq.n	801060c <_printf_common+0xa4>
 801063e:	3601      	adds	r6, #1
 8010640:	e7d9      	b.n	80105f6 <_printf_common+0x8e>
	...

08010644 <_printf_i>:
 8010644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010648:	7e0f      	ldrb	r7, [r1, #24]
 801064a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801064c:	2f78      	cmp	r7, #120	; 0x78
 801064e:	4691      	mov	r9, r2
 8010650:	4680      	mov	r8, r0
 8010652:	460c      	mov	r4, r1
 8010654:	469a      	mov	sl, r3
 8010656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801065a:	d807      	bhi.n	801066c <_printf_i+0x28>
 801065c:	2f62      	cmp	r7, #98	; 0x62
 801065e:	d80a      	bhi.n	8010676 <_printf_i+0x32>
 8010660:	2f00      	cmp	r7, #0
 8010662:	f000 80d8 	beq.w	8010816 <_printf_i+0x1d2>
 8010666:	2f58      	cmp	r7, #88	; 0x58
 8010668:	f000 80a3 	beq.w	80107b2 <_printf_i+0x16e>
 801066c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010674:	e03a      	b.n	80106ec <_printf_i+0xa8>
 8010676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801067a:	2b15      	cmp	r3, #21
 801067c:	d8f6      	bhi.n	801066c <_printf_i+0x28>
 801067e:	a101      	add	r1, pc, #4	; (adr r1, 8010684 <_printf_i+0x40>)
 8010680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010684:	080106dd 	.word	0x080106dd
 8010688:	080106f1 	.word	0x080106f1
 801068c:	0801066d 	.word	0x0801066d
 8010690:	0801066d 	.word	0x0801066d
 8010694:	0801066d 	.word	0x0801066d
 8010698:	0801066d 	.word	0x0801066d
 801069c:	080106f1 	.word	0x080106f1
 80106a0:	0801066d 	.word	0x0801066d
 80106a4:	0801066d 	.word	0x0801066d
 80106a8:	0801066d 	.word	0x0801066d
 80106ac:	0801066d 	.word	0x0801066d
 80106b0:	080107fd 	.word	0x080107fd
 80106b4:	08010721 	.word	0x08010721
 80106b8:	080107df 	.word	0x080107df
 80106bc:	0801066d 	.word	0x0801066d
 80106c0:	0801066d 	.word	0x0801066d
 80106c4:	0801081f 	.word	0x0801081f
 80106c8:	0801066d 	.word	0x0801066d
 80106cc:	08010721 	.word	0x08010721
 80106d0:	0801066d 	.word	0x0801066d
 80106d4:	0801066d 	.word	0x0801066d
 80106d8:	080107e7 	.word	0x080107e7
 80106dc:	682b      	ldr	r3, [r5, #0]
 80106de:	1d1a      	adds	r2, r3, #4
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	602a      	str	r2, [r5, #0]
 80106e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106ec:	2301      	movs	r3, #1
 80106ee:	e0a3      	b.n	8010838 <_printf_i+0x1f4>
 80106f0:	6820      	ldr	r0, [r4, #0]
 80106f2:	6829      	ldr	r1, [r5, #0]
 80106f4:	0606      	lsls	r6, r0, #24
 80106f6:	f101 0304 	add.w	r3, r1, #4
 80106fa:	d50a      	bpl.n	8010712 <_printf_i+0xce>
 80106fc:	680e      	ldr	r6, [r1, #0]
 80106fe:	602b      	str	r3, [r5, #0]
 8010700:	2e00      	cmp	r6, #0
 8010702:	da03      	bge.n	801070c <_printf_i+0xc8>
 8010704:	232d      	movs	r3, #45	; 0x2d
 8010706:	4276      	negs	r6, r6
 8010708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801070c:	485e      	ldr	r0, [pc, #376]	; (8010888 <_printf_i+0x244>)
 801070e:	230a      	movs	r3, #10
 8010710:	e019      	b.n	8010746 <_printf_i+0x102>
 8010712:	680e      	ldr	r6, [r1, #0]
 8010714:	602b      	str	r3, [r5, #0]
 8010716:	f010 0f40 	tst.w	r0, #64	; 0x40
 801071a:	bf18      	it	ne
 801071c:	b236      	sxthne	r6, r6
 801071e:	e7ef      	b.n	8010700 <_printf_i+0xbc>
 8010720:	682b      	ldr	r3, [r5, #0]
 8010722:	6820      	ldr	r0, [r4, #0]
 8010724:	1d19      	adds	r1, r3, #4
 8010726:	6029      	str	r1, [r5, #0]
 8010728:	0601      	lsls	r1, r0, #24
 801072a:	d501      	bpl.n	8010730 <_printf_i+0xec>
 801072c:	681e      	ldr	r6, [r3, #0]
 801072e:	e002      	b.n	8010736 <_printf_i+0xf2>
 8010730:	0646      	lsls	r6, r0, #25
 8010732:	d5fb      	bpl.n	801072c <_printf_i+0xe8>
 8010734:	881e      	ldrh	r6, [r3, #0]
 8010736:	4854      	ldr	r0, [pc, #336]	; (8010888 <_printf_i+0x244>)
 8010738:	2f6f      	cmp	r7, #111	; 0x6f
 801073a:	bf0c      	ite	eq
 801073c:	2308      	moveq	r3, #8
 801073e:	230a      	movne	r3, #10
 8010740:	2100      	movs	r1, #0
 8010742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010746:	6865      	ldr	r5, [r4, #4]
 8010748:	60a5      	str	r5, [r4, #8]
 801074a:	2d00      	cmp	r5, #0
 801074c:	bfa2      	ittt	ge
 801074e:	6821      	ldrge	r1, [r4, #0]
 8010750:	f021 0104 	bicge.w	r1, r1, #4
 8010754:	6021      	strge	r1, [r4, #0]
 8010756:	b90e      	cbnz	r6, 801075c <_printf_i+0x118>
 8010758:	2d00      	cmp	r5, #0
 801075a:	d04d      	beq.n	80107f8 <_printf_i+0x1b4>
 801075c:	4615      	mov	r5, r2
 801075e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010762:	fb03 6711 	mls	r7, r3, r1, r6
 8010766:	5dc7      	ldrb	r7, [r0, r7]
 8010768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801076c:	4637      	mov	r7, r6
 801076e:	42bb      	cmp	r3, r7
 8010770:	460e      	mov	r6, r1
 8010772:	d9f4      	bls.n	801075e <_printf_i+0x11a>
 8010774:	2b08      	cmp	r3, #8
 8010776:	d10b      	bne.n	8010790 <_printf_i+0x14c>
 8010778:	6823      	ldr	r3, [r4, #0]
 801077a:	07de      	lsls	r6, r3, #31
 801077c:	d508      	bpl.n	8010790 <_printf_i+0x14c>
 801077e:	6923      	ldr	r3, [r4, #16]
 8010780:	6861      	ldr	r1, [r4, #4]
 8010782:	4299      	cmp	r1, r3
 8010784:	bfde      	ittt	le
 8010786:	2330      	movle	r3, #48	; 0x30
 8010788:	f805 3c01 	strble.w	r3, [r5, #-1]
 801078c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010790:	1b52      	subs	r2, r2, r5
 8010792:	6122      	str	r2, [r4, #16]
 8010794:	f8cd a000 	str.w	sl, [sp]
 8010798:	464b      	mov	r3, r9
 801079a:	aa03      	add	r2, sp, #12
 801079c:	4621      	mov	r1, r4
 801079e:	4640      	mov	r0, r8
 80107a0:	f7ff fee2 	bl	8010568 <_printf_common>
 80107a4:	3001      	adds	r0, #1
 80107a6:	d14c      	bne.n	8010842 <_printf_i+0x1fe>
 80107a8:	f04f 30ff 	mov.w	r0, #4294967295
 80107ac:	b004      	add	sp, #16
 80107ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b2:	4835      	ldr	r0, [pc, #212]	; (8010888 <_printf_i+0x244>)
 80107b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80107b8:	6829      	ldr	r1, [r5, #0]
 80107ba:	6823      	ldr	r3, [r4, #0]
 80107bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80107c0:	6029      	str	r1, [r5, #0]
 80107c2:	061d      	lsls	r5, r3, #24
 80107c4:	d514      	bpl.n	80107f0 <_printf_i+0x1ac>
 80107c6:	07df      	lsls	r7, r3, #31
 80107c8:	bf44      	itt	mi
 80107ca:	f043 0320 	orrmi.w	r3, r3, #32
 80107ce:	6023      	strmi	r3, [r4, #0]
 80107d0:	b91e      	cbnz	r6, 80107da <_printf_i+0x196>
 80107d2:	6823      	ldr	r3, [r4, #0]
 80107d4:	f023 0320 	bic.w	r3, r3, #32
 80107d8:	6023      	str	r3, [r4, #0]
 80107da:	2310      	movs	r3, #16
 80107dc:	e7b0      	b.n	8010740 <_printf_i+0xfc>
 80107de:	6823      	ldr	r3, [r4, #0]
 80107e0:	f043 0320 	orr.w	r3, r3, #32
 80107e4:	6023      	str	r3, [r4, #0]
 80107e6:	2378      	movs	r3, #120	; 0x78
 80107e8:	4828      	ldr	r0, [pc, #160]	; (801088c <_printf_i+0x248>)
 80107ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107ee:	e7e3      	b.n	80107b8 <_printf_i+0x174>
 80107f0:	0659      	lsls	r1, r3, #25
 80107f2:	bf48      	it	mi
 80107f4:	b2b6      	uxthmi	r6, r6
 80107f6:	e7e6      	b.n	80107c6 <_printf_i+0x182>
 80107f8:	4615      	mov	r5, r2
 80107fa:	e7bb      	b.n	8010774 <_printf_i+0x130>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	6826      	ldr	r6, [r4, #0]
 8010800:	6961      	ldr	r1, [r4, #20]
 8010802:	1d18      	adds	r0, r3, #4
 8010804:	6028      	str	r0, [r5, #0]
 8010806:	0635      	lsls	r5, r6, #24
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	d501      	bpl.n	8010810 <_printf_i+0x1cc>
 801080c:	6019      	str	r1, [r3, #0]
 801080e:	e002      	b.n	8010816 <_printf_i+0x1d2>
 8010810:	0670      	lsls	r0, r6, #25
 8010812:	d5fb      	bpl.n	801080c <_printf_i+0x1c8>
 8010814:	8019      	strh	r1, [r3, #0]
 8010816:	2300      	movs	r3, #0
 8010818:	6123      	str	r3, [r4, #16]
 801081a:	4615      	mov	r5, r2
 801081c:	e7ba      	b.n	8010794 <_printf_i+0x150>
 801081e:	682b      	ldr	r3, [r5, #0]
 8010820:	1d1a      	adds	r2, r3, #4
 8010822:	602a      	str	r2, [r5, #0]
 8010824:	681d      	ldr	r5, [r3, #0]
 8010826:	6862      	ldr	r2, [r4, #4]
 8010828:	2100      	movs	r1, #0
 801082a:	4628      	mov	r0, r5
 801082c:	f7ef fd60 	bl	80002f0 <memchr>
 8010830:	b108      	cbz	r0, 8010836 <_printf_i+0x1f2>
 8010832:	1b40      	subs	r0, r0, r5
 8010834:	6060      	str	r0, [r4, #4]
 8010836:	6863      	ldr	r3, [r4, #4]
 8010838:	6123      	str	r3, [r4, #16]
 801083a:	2300      	movs	r3, #0
 801083c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010840:	e7a8      	b.n	8010794 <_printf_i+0x150>
 8010842:	6923      	ldr	r3, [r4, #16]
 8010844:	462a      	mov	r2, r5
 8010846:	4649      	mov	r1, r9
 8010848:	4640      	mov	r0, r8
 801084a:	47d0      	blx	sl
 801084c:	3001      	adds	r0, #1
 801084e:	d0ab      	beq.n	80107a8 <_printf_i+0x164>
 8010850:	6823      	ldr	r3, [r4, #0]
 8010852:	079b      	lsls	r3, r3, #30
 8010854:	d413      	bmi.n	801087e <_printf_i+0x23a>
 8010856:	68e0      	ldr	r0, [r4, #12]
 8010858:	9b03      	ldr	r3, [sp, #12]
 801085a:	4298      	cmp	r0, r3
 801085c:	bfb8      	it	lt
 801085e:	4618      	movlt	r0, r3
 8010860:	e7a4      	b.n	80107ac <_printf_i+0x168>
 8010862:	2301      	movs	r3, #1
 8010864:	4632      	mov	r2, r6
 8010866:	4649      	mov	r1, r9
 8010868:	4640      	mov	r0, r8
 801086a:	47d0      	blx	sl
 801086c:	3001      	adds	r0, #1
 801086e:	d09b      	beq.n	80107a8 <_printf_i+0x164>
 8010870:	3501      	adds	r5, #1
 8010872:	68e3      	ldr	r3, [r4, #12]
 8010874:	9903      	ldr	r1, [sp, #12]
 8010876:	1a5b      	subs	r3, r3, r1
 8010878:	42ab      	cmp	r3, r5
 801087a:	dcf2      	bgt.n	8010862 <_printf_i+0x21e>
 801087c:	e7eb      	b.n	8010856 <_printf_i+0x212>
 801087e:	2500      	movs	r5, #0
 8010880:	f104 0619 	add.w	r6, r4, #25
 8010884:	e7f5      	b.n	8010872 <_printf_i+0x22e>
 8010886:	bf00      	nop
 8010888:	08011d4a 	.word	0x08011d4a
 801088c:	08011d5b 	.word	0x08011d5b

08010890 <__swbuf_r>:
 8010890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010892:	460e      	mov	r6, r1
 8010894:	4614      	mov	r4, r2
 8010896:	4605      	mov	r5, r0
 8010898:	b118      	cbz	r0, 80108a2 <__swbuf_r+0x12>
 801089a:	6983      	ldr	r3, [r0, #24]
 801089c:	b90b      	cbnz	r3, 80108a2 <__swbuf_r+0x12>
 801089e:	f000 f9d9 	bl	8010c54 <__sinit>
 80108a2:	4b21      	ldr	r3, [pc, #132]	; (8010928 <__swbuf_r+0x98>)
 80108a4:	429c      	cmp	r4, r3
 80108a6:	d12b      	bne.n	8010900 <__swbuf_r+0x70>
 80108a8:	686c      	ldr	r4, [r5, #4]
 80108aa:	69a3      	ldr	r3, [r4, #24]
 80108ac:	60a3      	str	r3, [r4, #8]
 80108ae:	89a3      	ldrh	r3, [r4, #12]
 80108b0:	071a      	lsls	r2, r3, #28
 80108b2:	d52f      	bpl.n	8010914 <__swbuf_r+0x84>
 80108b4:	6923      	ldr	r3, [r4, #16]
 80108b6:	b36b      	cbz	r3, 8010914 <__swbuf_r+0x84>
 80108b8:	6923      	ldr	r3, [r4, #16]
 80108ba:	6820      	ldr	r0, [r4, #0]
 80108bc:	1ac0      	subs	r0, r0, r3
 80108be:	6963      	ldr	r3, [r4, #20]
 80108c0:	b2f6      	uxtb	r6, r6
 80108c2:	4283      	cmp	r3, r0
 80108c4:	4637      	mov	r7, r6
 80108c6:	dc04      	bgt.n	80108d2 <__swbuf_r+0x42>
 80108c8:	4621      	mov	r1, r4
 80108ca:	4628      	mov	r0, r5
 80108cc:	f000 f92e 	bl	8010b2c <_fflush_r>
 80108d0:	bb30      	cbnz	r0, 8010920 <__swbuf_r+0x90>
 80108d2:	68a3      	ldr	r3, [r4, #8]
 80108d4:	3b01      	subs	r3, #1
 80108d6:	60a3      	str	r3, [r4, #8]
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	1c5a      	adds	r2, r3, #1
 80108dc:	6022      	str	r2, [r4, #0]
 80108de:	701e      	strb	r6, [r3, #0]
 80108e0:	6963      	ldr	r3, [r4, #20]
 80108e2:	3001      	adds	r0, #1
 80108e4:	4283      	cmp	r3, r0
 80108e6:	d004      	beq.n	80108f2 <__swbuf_r+0x62>
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	07db      	lsls	r3, r3, #31
 80108ec:	d506      	bpl.n	80108fc <__swbuf_r+0x6c>
 80108ee:	2e0a      	cmp	r6, #10
 80108f0:	d104      	bne.n	80108fc <__swbuf_r+0x6c>
 80108f2:	4621      	mov	r1, r4
 80108f4:	4628      	mov	r0, r5
 80108f6:	f000 f919 	bl	8010b2c <_fflush_r>
 80108fa:	b988      	cbnz	r0, 8010920 <__swbuf_r+0x90>
 80108fc:	4638      	mov	r0, r7
 80108fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010900:	4b0a      	ldr	r3, [pc, #40]	; (801092c <__swbuf_r+0x9c>)
 8010902:	429c      	cmp	r4, r3
 8010904:	d101      	bne.n	801090a <__swbuf_r+0x7a>
 8010906:	68ac      	ldr	r4, [r5, #8]
 8010908:	e7cf      	b.n	80108aa <__swbuf_r+0x1a>
 801090a:	4b09      	ldr	r3, [pc, #36]	; (8010930 <__swbuf_r+0xa0>)
 801090c:	429c      	cmp	r4, r3
 801090e:	bf08      	it	eq
 8010910:	68ec      	ldreq	r4, [r5, #12]
 8010912:	e7ca      	b.n	80108aa <__swbuf_r+0x1a>
 8010914:	4621      	mov	r1, r4
 8010916:	4628      	mov	r0, r5
 8010918:	f000 f80c 	bl	8010934 <__swsetup_r>
 801091c:	2800      	cmp	r0, #0
 801091e:	d0cb      	beq.n	80108b8 <__swbuf_r+0x28>
 8010920:	f04f 37ff 	mov.w	r7, #4294967295
 8010924:	e7ea      	b.n	80108fc <__swbuf_r+0x6c>
 8010926:	bf00      	nop
 8010928:	08011d8c 	.word	0x08011d8c
 801092c:	08011dac 	.word	0x08011dac
 8010930:	08011d6c 	.word	0x08011d6c

08010934 <__swsetup_r>:
 8010934:	4b32      	ldr	r3, [pc, #200]	; (8010a00 <__swsetup_r+0xcc>)
 8010936:	b570      	push	{r4, r5, r6, lr}
 8010938:	681d      	ldr	r5, [r3, #0]
 801093a:	4606      	mov	r6, r0
 801093c:	460c      	mov	r4, r1
 801093e:	b125      	cbz	r5, 801094a <__swsetup_r+0x16>
 8010940:	69ab      	ldr	r3, [r5, #24]
 8010942:	b913      	cbnz	r3, 801094a <__swsetup_r+0x16>
 8010944:	4628      	mov	r0, r5
 8010946:	f000 f985 	bl	8010c54 <__sinit>
 801094a:	4b2e      	ldr	r3, [pc, #184]	; (8010a04 <__swsetup_r+0xd0>)
 801094c:	429c      	cmp	r4, r3
 801094e:	d10f      	bne.n	8010970 <__swsetup_r+0x3c>
 8010950:	686c      	ldr	r4, [r5, #4]
 8010952:	89a3      	ldrh	r3, [r4, #12]
 8010954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010958:	0719      	lsls	r1, r3, #28
 801095a:	d42c      	bmi.n	80109b6 <__swsetup_r+0x82>
 801095c:	06dd      	lsls	r5, r3, #27
 801095e:	d411      	bmi.n	8010984 <__swsetup_r+0x50>
 8010960:	2309      	movs	r3, #9
 8010962:	6033      	str	r3, [r6, #0]
 8010964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010968:	81a3      	strh	r3, [r4, #12]
 801096a:	f04f 30ff 	mov.w	r0, #4294967295
 801096e:	e03e      	b.n	80109ee <__swsetup_r+0xba>
 8010970:	4b25      	ldr	r3, [pc, #148]	; (8010a08 <__swsetup_r+0xd4>)
 8010972:	429c      	cmp	r4, r3
 8010974:	d101      	bne.n	801097a <__swsetup_r+0x46>
 8010976:	68ac      	ldr	r4, [r5, #8]
 8010978:	e7eb      	b.n	8010952 <__swsetup_r+0x1e>
 801097a:	4b24      	ldr	r3, [pc, #144]	; (8010a0c <__swsetup_r+0xd8>)
 801097c:	429c      	cmp	r4, r3
 801097e:	bf08      	it	eq
 8010980:	68ec      	ldreq	r4, [r5, #12]
 8010982:	e7e6      	b.n	8010952 <__swsetup_r+0x1e>
 8010984:	0758      	lsls	r0, r3, #29
 8010986:	d512      	bpl.n	80109ae <__swsetup_r+0x7a>
 8010988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801098a:	b141      	cbz	r1, 801099e <__swsetup_r+0x6a>
 801098c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010990:	4299      	cmp	r1, r3
 8010992:	d002      	beq.n	801099a <__swsetup_r+0x66>
 8010994:	4630      	mov	r0, r6
 8010996:	f7ff fc41 	bl	801021c <_free_r>
 801099a:	2300      	movs	r3, #0
 801099c:	6363      	str	r3, [r4, #52]	; 0x34
 801099e:	89a3      	ldrh	r3, [r4, #12]
 80109a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109a4:	81a3      	strh	r3, [r4, #12]
 80109a6:	2300      	movs	r3, #0
 80109a8:	6063      	str	r3, [r4, #4]
 80109aa:	6923      	ldr	r3, [r4, #16]
 80109ac:	6023      	str	r3, [r4, #0]
 80109ae:	89a3      	ldrh	r3, [r4, #12]
 80109b0:	f043 0308 	orr.w	r3, r3, #8
 80109b4:	81a3      	strh	r3, [r4, #12]
 80109b6:	6923      	ldr	r3, [r4, #16]
 80109b8:	b94b      	cbnz	r3, 80109ce <__swsetup_r+0x9a>
 80109ba:	89a3      	ldrh	r3, [r4, #12]
 80109bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109c4:	d003      	beq.n	80109ce <__swsetup_r+0x9a>
 80109c6:	4621      	mov	r1, r4
 80109c8:	4630      	mov	r0, r6
 80109ca:	f000 fa09 	bl	8010de0 <__smakebuf_r>
 80109ce:	89a0      	ldrh	r0, [r4, #12]
 80109d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109d4:	f010 0301 	ands.w	r3, r0, #1
 80109d8:	d00a      	beq.n	80109f0 <__swsetup_r+0xbc>
 80109da:	2300      	movs	r3, #0
 80109dc:	60a3      	str	r3, [r4, #8]
 80109de:	6963      	ldr	r3, [r4, #20]
 80109e0:	425b      	negs	r3, r3
 80109e2:	61a3      	str	r3, [r4, #24]
 80109e4:	6923      	ldr	r3, [r4, #16]
 80109e6:	b943      	cbnz	r3, 80109fa <__swsetup_r+0xc6>
 80109e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109ec:	d1ba      	bne.n	8010964 <__swsetup_r+0x30>
 80109ee:	bd70      	pop	{r4, r5, r6, pc}
 80109f0:	0781      	lsls	r1, r0, #30
 80109f2:	bf58      	it	pl
 80109f4:	6963      	ldrpl	r3, [r4, #20]
 80109f6:	60a3      	str	r3, [r4, #8]
 80109f8:	e7f4      	b.n	80109e4 <__swsetup_r+0xb0>
 80109fa:	2000      	movs	r0, #0
 80109fc:	e7f7      	b.n	80109ee <__swsetup_r+0xba>
 80109fe:	bf00      	nop
 8010a00:	24000084 	.word	0x24000084
 8010a04:	08011d8c 	.word	0x08011d8c
 8010a08:	08011dac 	.word	0x08011dac
 8010a0c:	08011d6c 	.word	0x08011d6c

08010a10 <abort>:
 8010a10:	b508      	push	{r3, lr}
 8010a12:	2006      	movs	r0, #6
 8010a14:	f000 fa4c 	bl	8010eb0 <raise>
 8010a18:	2001      	movs	r0, #1
 8010a1a:	f7f2 ffa9 	bl	8003970 <_exit>
	...

08010a20 <__sflush_r>:
 8010a20:	898a      	ldrh	r2, [r1, #12]
 8010a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a26:	4605      	mov	r5, r0
 8010a28:	0710      	lsls	r0, r2, #28
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	d458      	bmi.n	8010ae0 <__sflush_r+0xc0>
 8010a2e:	684b      	ldr	r3, [r1, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	dc05      	bgt.n	8010a40 <__sflush_r+0x20>
 8010a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	dc02      	bgt.n	8010a40 <__sflush_r+0x20>
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a42:	2e00      	cmp	r6, #0
 8010a44:	d0f9      	beq.n	8010a3a <__sflush_r+0x1a>
 8010a46:	2300      	movs	r3, #0
 8010a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a4c:	682f      	ldr	r7, [r5, #0]
 8010a4e:	602b      	str	r3, [r5, #0]
 8010a50:	d032      	beq.n	8010ab8 <__sflush_r+0x98>
 8010a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a54:	89a3      	ldrh	r3, [r4, #12]
 8010a56:	075a      	lsls	r2, r3, #29
 8010a58:	d505      	bpl.n	8010a66 <__sflush_r+0x46>
 8010a5a:	6863      	ldr	r3, [r4, #4]
 8010a5c:	1ac0      	subs	r0, r0, r3
 8010a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a60:	b10b      	cbz	r3, 8010a66 <__sflush_r+0x46>
 8010a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a64:	1ac0      	subs	r0, r0, r3
 8010a66:	2300      	movs	r3, #0
 8010a68:	4602      	mov	r2, r0
 8010a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a6c:	6a21      	ldr	r1, [r4, #32]
 8010a6e:	4628      	mov	r0, r5
 8010a70:	47b0      	blx	r6
 8010a72:	1c43      	adds	r3, r0, #1
 8010a74:	89a3      	ldrh	r3, [r4, #12]
 8010a76:	d106      	bne.n	8010a86 <__sflush_r+0x66>
 8010a78:	6829      	ldr	r1, [r5, #0]
 8010a7a:	291d      	cmp	r1, #29
 8010a7c:	d82c      	bhi.n	8010ad8 <__sflush_r+0xb8>
 8010a7e:	4a2a      	ldr	r2, [pc, #168]	; (8010b28 <__sflush_r+0x108>)
 8010a80:	40ca      	lsrs	r2, r1
 8010a82:	07d6      	lsls	r6, r2, #31
 8010a84:	d528      	bpl.n	8010ad8 <__sflush_r+0xb8>
 8010a86:	2200      	movs	r2, #0
 8010a88:	6062      	str	r2, [r4, #4]
 8010a8a:	04d9      	lsls	r1, r3, #19
 8010a8c:	6922      	ldr	r2, [r4, #16]
 8010a8e:	6022      	str	r2, [r4, #0]
 8010a90:	d504      	bpl.n	8010a9c <__sflush_r+0x7c>
 8010a92:	1c42      	adds	r2, r0, #1
 8010a94:	d101      	bne.n	8010a9a <__sflush_r+0x7a>
 8010a96:	682b      	ldr	r3, [r5, #0]
 8010a98:	b903      	cbnz	r3, 8010a9c <__sflush_r+0x7c>
 8010a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8010a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a9e:	602f      	str	r7, [r5, #0]
 8010aa0:	2900      	cmp	r1, #0
 8010aa2:	d0ca      	beq.n	8010a3a <__sflush_r+0x1a>
 8010aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010aa8:	4299      	cmp	r1, r3
 8010aaa:	d002      	beq.n	8010ab2 <__sflush_r+0x92>
 8010aac:	4628      	mov	r0, r5
 8010aae:	f7ff fbb5 	bl	801021c <_free_r>
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8010ab6:	e7c1      	b.n	8010a3c <__sflush_r+0x1c>
 8010ab8:	6a21      	ldr	r1, [r4, #32]
 8010aba:	2301      	movs	r3, #1
 8010abc:	4628      	mov	r0, r5
 8010abe:	47b0      	blx	r6
 8010ac0:	1c41      	adds	r1, r0, #1
 8010ac2:	d1c7      	bne.n	8010a54 <__sflush_r+0x34>
 8010ac4:	682b      	ldr	r3, [r5, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d0c4      	beq.n	8010a54 <__sflush_r+0x34>
 8010aca:	2b1d      	cmp	r3, #29
 8010acc:	d001      	beq.n	8010ad2 <__sflush_r+0xb2>
 8010ace:	2b16      	cmp	r3, #22
 8010ad0:	d101      	bne.n	8010ad6 <__sflush_r+0xb6>
 8010ad2:	602f      	str	r7, [r5, #0]
 8010ad4:	e7b1      	b.n	8010a3a <__sflush_r+0x1a>
 8010ad6:	89a3      	ldrh	r3, [r4, #12]
 8010ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010adc:	81a3      	strh	r3, [r4, #12]
 8010ade:	e7ad      	b.n	8010a3c <__sflush_r+0x1c>
 8010ae0:	690f      	ldr	r7, [r1, #16]
 8010ae2:	2f00      	cmp	r7, #0
 8010ae4:	d0a9      	beq.n	8010a3a <__sflush_r+0x1a>
 8010ae6:	0793      	lsls	r3, r2, #30
 8010ae8:	680e      	ldr	r6, [r1, #0]
 8010aea:	bf08      	it	eq
 8010aec:	694b      	ldreq	r3, [r1, #20]
 8010aee:	600f      	str	r7, [r1, #0]
 8010af0:	bf18      	it	ne
 8010af2:	2300      	movne	r3, #0
 8010af4:	eba6 0807 	sub.w	r8, r6, r7
 8010af8:	608b      	str	r3, [r1, #8]
 8010afa:	f1b8 0f00 	cmp.w	r8, #0
 8010afe:	dd9c      	ble.n	8010a3a <__sflush_r+0x1a>
 8010b00:	6a21      	ldr	r1, [r4, #32]
 8010b02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b04:	4643      	mov	r3, r8
 8010b06:	463a      	mov	r2, r7
 8010b08:	4628      	mov	r0, r5
 8010b0a:	47b0      	blx	r6
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	dc06      	bgt.n	8010b1e <__sflush_r+0xfe>
 8010b10:	89a3      	ldrh	r3, [r4, #12]
 8010b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b16:	81a3      	strh	r3, [r4, #12]
 8010b18:	f04f 30ff 	mov.w	r0, #4294967295
 8010b1c:	e78e      	b.n	8010a3c <__sflush_r+0x1c>
 8010b1e:	4407      	add	r7, r0
 8010b20:	eba8 0800 	sub.w	r8, r8, r0
 8010b24:	e7e9      	b.n	8010afa <__sflush_r+0xda>
 8010b26:	bf00      	nop
 8010b28:	20400001 	.word	0x20400001

08010b2c <_fflush_r>:
 8010b2c:	b538      	push	{r3, r4, r5, lr}
 8010b2e:	690b      	ldr	r3, [r1, #16]
 8010b30:	4605      	mov	r5, r0
 8010b32:	460c      	mov	r4, r1
 8010b34:	b913      	cbnz	r3, 8010b3c <_fflush_r+0x10>
 8010b36:	2500      	movs	r5, #0
 8010b38:	4628      	mov	r0, r5
 8010b3a:	bd38      	pop	{r3, r4, r5, pc}
 8010b3c:	b118      	cbz	r0, 8010b46 <_fflush_r+0x1a>
 8010b3e:	6983      	ldr	r3, [r0, #24]
 8010b40:	b90b      	cbnz	r3, 8010b46 <_fflush_r+0x1a>
 8010b42:	f000 f887 	bl	8010c54 <__sinit>
 8010b46:	4b14      	ldr	r3, [pc, #80]	; (8010b98 <_fflush_r+0x6c>)
 8010b48:	429c      	cmp	r4, r3
 8010b4a:	d11b      	bne.n	8010b84 <_fflush_r+0x58>
 8010b4c:	686c      	ldr	r4, [r5, #4]
 8010b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d0ef      	beq.n	8010b36 <_fflush_r+0xa>
 8010b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b58:	07d0      	lsls	r0, r2, #31
 8010b5a:	d404      	bmi.n	8010b66 <_fflush_r+0x3a>
 8010b5c:	0599      	lsls	r1, r3, #22
 8010b5e:	d402      	bmi.n	8010b66 <_fflush_r+0x3a>
 8010b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b62:	f000 f915 	bl	8010d90 <__retarget_lock_acquire_recursive>
 8010b66:	4628      	mov	r0, r5
 8010b68:	4621      	mov	r1, r4
 8010b6a:	f7ff ff59 	bl	8010a20 <__sflush_r>
 8010b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b70:	07da      	lsls	r2, r3, #31
 8010b72:	4605      	mov	r5, r0
 8010b74:	d4e0      	bmi.n	8010b38 <_fflush_r+0xc>
 8010b76:	89a3      	ldrh	r3, [r4, #12]
 8010b78:	059b      	lsls	r3, r3, #22
 8010b7a:	d4dd      	bmi.n	8010b38 <_fflush_r+0xc>
 8010b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b7e:	f000 f908 	bl	8010d92 <__retarget_lock_release_recursive>
 8010b82:	e7d9      	b.n	8010b38 <_fflush_r+0xc>
 8010b84:	4b05      	ldr	r3, [pc, #20]	; (8010b9c <_fflush_r+0x70>)
 8010b86:	429c      	cmp	r4, r3
 8010b88:	d101      	bne.n	8010b8e <_fflush_r+0x62>
 8010b8a:	68ac      	ldr	r4, [r5, #8]
 8010b8c:	e7df      	b.n	8010b4e <_fflush_r+0x22>
 8010b8e:	4b04      	ldr	r3, [pc, #16]	; (8010ba0 <_fflush_r+0x74>)
 8010b90:	429c      	cmp	r4, r3
 8010b92:	bf08      	it	eq
 8010b94:	68ec      	ldreq	r4, [r5, #12]
 8010b96:	e7da      	b.n	8010b4e <_fflush_r+0x22>
 8010b98:	08011d8c 	.word	0x08011d8c
 8010b9c:	08011dac 	.word	0x08011dac
 8010ba0:	08011d6c 	.word	0x08011d6c

08010ba4 <std>:
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	b510      	push	{r4, lr}
 8010ba8:	4604      	mov	r4, r0
 8010baa:	e9c0 3300 	strd	r3, r3, [r0]
 8010bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bb2:	6083      	str	r3, [r0, #8]
 8010bb4:	8181      	strh	r1, [r0, #12]
 8010bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8010bb8:	81c2      	strh	r2, [r0, #14]
 8010bba:	6183      	str	r3, [r0, #24]
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	2208      	movs	r2, #8
 8010bc0:	305c      	adds	r0, #92	; 0x5c
 8010bc2:	f7fd fbcf 	bl	800e364 <memset>
 8010bc6:	4b05      	ldr	r3, [pc, #20]	; (8010bdc <std+0x38>)
 8010bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8010bca:	4b05      	ldr	r3, [pc, #20]	; (8010be0 <std+0x3c>)
 8010bcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8010bce:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <std+0x40>)
 8010bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010bd2:	4b05      	ldr	r3, [pc, #20]	; (8010be8 <std+0x44>)
 8010bd4:	6224      	str	r4, [r4, #32]
 8010bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8010bd8:	bd10      	pop	{r4, pc}
 8010bda:	bf00      	nop
 8010bdc:	08010ee9 	.word	0x08010ee9
 8010be0:	08010f0b 	.word	0x08010f0b
 8010be4:	08010f43 	.word	0x08010f43
 8010be8:	08010f67 	.word	0x08010f67

08010bec <_cleanup_r>:
 8010bec:	4901      	ldr	r1, [pc, #4]	; (8010bf4 <_cleanup_r+0x8>)
 8010bee:	f000 b8af 	b.w	8010d50 <_fwalk_reent>
 8010bf2:	bf00      	nop
 8010bf4:	08010b2d 	.word	0x08010b2d

08010bf8 <__sfmoreglue>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	2268      	movs	r2, #104	; 0x68
 8010bfc:	1e4d      	subs	r5, r1, #1
 8010bfe:	4355      	muls	r5, r2
 8010c00:	460e      	mov	r6, r1
 8010c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c06:	f7ff fa15 	bl	8010034 <_malloc_r>
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	b140      	cbz	r0, 8010c20 <__sfmoreglue+0x28>
 8010c0e:	2100      	movs	r1, #0
 8010c10:	e9c0 1600 	strd	r1, r6, [r0]
 8010c14:	300c      	adds	r0, #12
 8010c16:	60a0      	str	r0, [r4, #8]
 8010c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010c1c:	f7fd fba2 	bl	800e364 <memset>
 8010c20:	4620      	mov	r0, r4
 8010c22:	bd70      	pop	{r4, r5, r6, pc}

08010c24 <__sfp_lock_acquire>:
 8010c24:	4801      	ldr	r0, [pc, #4]	; (8010c2c <__sfp_lock_acquire+0x8>)
 8010c26:	f000 b8b3 	b.w	8010d90 <__retarget_lock_acquire_recursive>
 8010c2a:	bf00      	nop
 8010c2c:	24000a29 	.word	0x24000a29

08010c30 <__sfp_lock_release>:
 8010c30:	4801      	ldr	r0, [pc, #4]	; (8010c38 <__sfp_lock_release+0x8>)
 8010c32:	f000 b8ae 	b.w	8010d92 <__retarget_lock_release_recursive>
 8010c36:	bf00      	nop
 8010c38:	24000a29 	.word	0x24000a29

08010c3c <__sinit_lock_acquire>:
 8010c3c:	4801      	ldr	r0, [pc, #4]	; (8010c44 <__sinit_lock_acquire+0x8>)
 8010c3e:	f000 b8a7 	b.w	8010d90 <__retarget_lock_acquire_recursive>
 8010c42:	bf00      	nop
 8010c44:	24000a2a 	.word	0x24000a2a

08010c48 <__sinit_lock_release>:
 8010c48:	4801      	ldr	r0, [pc, #4]	; (8010c50 <__sinit_lock_release+0x8>)
 8010c4a:	f000 b8a2 	b.w	8010d92 <__retarget_lock_release_recursive>
 8010c4e:	bf00      	nop
 8010c50:	24000a2a 	.word	0x24000a2a

08010c54 <__sinit>:
 8010c54:	b510      	push	{r4, lr}
 8010c56:	4604      	mov	r4, r0
 8010c58:	f7ff fff0 	bl	8010c3c <__sinit_lock_acquire>
 8010c5c:	69a3      	ldr	r3, [r4, #24]
 8010c5e:	b11b      	cbz	r3, 8010c68 <__sinit+0x14>
 8010c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c64:	f7ff bff0 	b.w	8010c48 <__sinit_lock_release>
 8010c68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c6c:	6523      	str	r3, [r4, #80]	; 0x50
 8010c6e:	4b13      	ldr	r3, [pc, #76]	; (8010cbc <__sinit+0x68>)
 8010c70:	4a13      	ldr	r2, [pc, #76]	; (8010cc0 <__sinit+0x6c>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c76:	42a3      	cmp	r3, r4
 8010c78:	bf04      	itt	eq
 8010c7a:	2301      	moveq	r3, #1
 8010c7c:	61a3      	streq	r3, [r4, #24]
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f000 f820 	bl	8010cc4 <__sfp>
 8010c84:	6060      	str	r0, [r4, #4]
 8010c86:	4620      	mov	r0, r4
 8010c88:	f000 f81c 	bl	8010cc4 <__sfp>
 8010c8c:	60a0      	str	r0, [r4, #8]
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 f818 	bl	8010cc4 <__sfp>
 8010c94:	2200      	movs	r2, #0
 8010c96:	60e0      	str	r0, [r4, #12]
 8010c98:	2104      	movs	r1, #4
 8010c9a:	6860      	ldr	r0, [r4, #4]
 8010c9c:	f7ff ff82 	bl	8010ba4 <std>
 8010ca0:	68a0      	ldr	r0, [r4, #8]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	2109      	movs	r1, #9
 8010ca6:	f7ff ff7d 	bl	8010ba4 <std>
 8010caa:	68e0      	ldr	r0, [r4, #12]
 8010cac:	2202      	movs	r2, #2
 8010cae:	2112      	movs	r1, #18
 8010cb0:	f7ff ff78 	bl	8010ba4 <std>
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	61a3      	str	r3, [r4, #24]
 8010cb8:	e7d2      	b.n	8010c60 <__sinit+0xc>
 8010cba:	bf00      	nop
 8010cbc:	080119a0 	.word	0x080119a0
 8010cc0:	08010bed 	.word	0x08010bed

08010cc4 <__sfp>:
 8010cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc6:	4607      	mov	r7, r0
 8010cc8:	f7ff ffac 	bl	8010c24 <__sfp_lock_acquire>
 8010ccc:	4b1e      	ldr	r3, [pc, #120]	; (8010d48 <__sfp+0x84>)
 8010cce:	681e      	ldr	r6, [r3, #0]
 8010cd0:	69b3      	ldr	r3, [r6, #24]
 8010cd2:	b913      	cbnz	r3, 8010cda <__sfp+0x16>
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	f7ff ffbd 	bl	8010c54 <__sinit>
 8010cda:	3648      	adds	r6, #72	; 0x48
 8010cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	d503      	bpl.n	8010cec <__sfp+0x28>
 8010ce4:	6833      	ldr	r3, [r6, #0]
 8010ce6:	b30b      	cbz	r3, 8010d2c <__sfp+0x68>
 8010ce8:	6836      	ldr	r6, [r6, #0]
 8010cea:	e7f7      	b.n	8010cdc <__sfp+0x18>
 8010cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010cf0:	b9d5      	cbnz	r5, 8010d28 <__sfp+0x64>
 8010cf2:	4b16      	ldr	r3, [pc, #88]	; (8010d4c <__sfp+0x88>)
 8010cf4:	60e3      	str	r3, [r4, #12]
 8010cf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010cfa:	6665      	str	r5, [r4, #100]	; 0x64
 8010cfc:	f000 f847 	bl	8010d8e <__retarget_lock_init_recursive>
 8010d00:	f7ff ff96 	bl	8010c30 <__sfp_lock_release>
 8010d04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010d08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010d0c:	6025      	str	r5, [r4, #0]
 8010d0e:	61a5      	str	r5, [r4, #24]
 8010d10:	2208      	movs	r2, #8
 8010d12:	4629      	mov	r1, r5
 8010d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010d18:	f7fd fb24 	bl	800e364 <memset>
 8010d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010d24:	4620      	mov	r0, r4
 8010d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d28:	3468      	adds	r4, #104	; 0x68
 8010d2a:	e7d9      	b.n	8010ce0 <__sfp+0x1c>
 8010d2c:	2104      	movs	r1, #4
 8010d2e:	4638      	mov	r0, r7
 8010d30:	f7ff ff62 	bl	8010bf8 <__sfmoreglue>
 8010d34:	4604      	mov	r4, r0
 8010d36:	6030      	str	r0, [r6, #0]
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d1d5      	bne.n	8010ce8 <__sfp+0x24>
 8010d3c:	f7ff ff78 	bl	8010c30 <__sfp_lock_release>
 8010d40:	230c      	movs	r3, #12
 8010d42:	603b      	str	r3, [r7, #0]
 8010d44:	e7ee      	b.n	8010d24 <__sfp+0x60>
 8010d46:	bf00      	nop
 8010d48:	080119a0 	.word	0x080119a0
 8010d4c:	ffff0001 	.word	0xffff0001

08010d50 <_fwalk_reent>:
 8010d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d54:	4606      	mov	r6, r0
 8010d56:	4688      	mov	r8, r1
 8010d58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d5c:	2700      	movs	r7, #0
 8010d5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d62:	f1b9 0901 	subs.w	r9, r9, #1
 8010d66:	d505      	bpl.n	8010d74 <_fwalk_reent+0x24>
 8010d68:	6824      	ldr	r4, [r4, #0]
 8010d6a:	2c00      	cmp	r4, #0
 8010d6c:	d1f7      	bne.n	8010d5e <_fwalk_reent+0xe>
 8010d6e:	4638      	mov	r0, r7
 8010d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d74:	89ab      	ldrh	r3, [r5, #12]
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d907      	bls.n	8010d8a <_fwalk_reent+0x3a>
 8010d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d7e:	3301      	adds	r3, #1
 8010d80:	d003      	beq.n	8010d8a <_fwalk_reent+0x3a>
 8010d82:	4629      	mov	r1, r5
 8010d84:	4630      	mov	r0, r6
 8010d86:	47c0      	blx	r8
 8010d88:	4307      	orrs	r7, r0
 8010d8a:	3568      	adds	r5, #104	; 0x68
 8010d8c:	e7e9      	b.n	8010d62 <_fwalk_reent+0x12>

08010d8e <__retarget_lock_init_recursive>:
 8010d8e:	4770      	bx	lr

08010d90 <__retarget_lock_acquire_recursive>:
 8010d90:	4770      	bx	lr

08010d92 <__retarget_lock_release_recursive>:
 8010d92:	4770      	bx	lr

08010d94 <__swhatbuf_r>:
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	460e      	mov	r6, r1
 8010d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d9c:	2900      	cmp	r1, #0
 8010d9e:	b096      	sub	sp, #88	; 0x58
 8010da0:	4614      	mov	r4, r2
 8010da2:	461d      	mov	r5, r3
 8010da4:	da08      	bge.n	8010db8 <__swhatbuf_r+0x24>
 8010da6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010daa:	2200      	movs	r2, #0
 8010dac:	602a      	str	r2, [r5, #0]
 8010dae:	061a      	lsls	r2, r3, #24
 8010db0:	d410      	bmi.n	8010dd4 <__swhatbuf_r+0x40>
 8010db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010db6:	e00e      	b.n	8010dd6 <__swhatbuf_r+0x42>
 8010db8:	466a      	mov	r2, sp
 8010dba:	f000 f8fb 	bl	8010fb4 <_fstat_r>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	dbf1      	blt.n	8010da6 <__swhatbuf_r+0x12>
 8010dc2:	9a01      	ldr	r2, [sp, #4]
 8010dc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010dc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010dcc:	425a      	negs	r2, r3
 8010dce:	415a      	adcs	r2, r3
 8010dd0:	602a      	str	r2, [r5, #0]
 8010dd2:	e7ee      	b.n	8010db2 <__swhatbuf_r+0x1e>
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	b016      	add	sp, #88	; 0x58
 8010ddc:	bd70      	pop	{r4, r5, r6, pc}
	...

08010de0 <__smakebuf_r>:
 8010de0:	898b      	ldrh	r3, [r1, #12]
 8010de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010de4:	079d      	lsls	r5, r3, #30
 8010de6:	4606      	mov	r6, r0
 8010de8:	460c      	mov	r4, r1
 8010dea:	d507      	bpl.n	8010dfc <__smakebuf_r+0x1c>
 8010dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010df0:	6023      	str	r3, [r4, #0]
 8010df2:	6123      	str	r3, [r4, #16]
 8010df4:	2301      	movs	r3, #1
 8010df6:	6163      	str	r3, [r4, #20]
 8010df8:	b002      	add	sp, #8
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	ab01      	add	r3, sp, #4
 8010dfe:	466a      	mov	r2, sp
 8010e00:	f7ff ffc8 	bl	8010d94 <__swhatbuf_r>
 8010e04:	9900      	ldr	r1, [sp, #0]
 8010e06:	4605      	mov	r5, r0
 8010e08:	4630      	mov	r0, r6
 8010e0a:	f7ff f913 	bl	8010034 <_malloc_r>
 8010e0e:	b948      	cbnz	r0, 8010e24 <__smakebuf_r+0x44>
 8010e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e14:	059a      	lsls	r2, r3, #22
 8010e16:	d4ef      	bmi.n	8010df8 <__smakebuf_r+0x18>
 8010e18:	f023 0303 	bic.w	r3, r3, #3
 8010e1c:	f043 0302 	orr.w	r3, r3, #2
 8010e20:	81a3      	strh	r3, [r4, #12]
 8010e22:	e7e3      	b.n	8010dec <__smakebuf_r+0xc>
 8010e24:	4b0d      	ldr	r3, [pc, #52]	; (8010e5c <__smakebuf_r+0x7c>)
 8010e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8010e28:	89a3      	ldrh	r3, [r4, #12]
 8010e2a:	6020      	str	r0, [r4, #0]
 8010e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e30:	81a3      	strh	r3, [r4, #12]
 8010e32:	9b00      	ldr	r3, [sp, #0]
 8010e34:	6163      	str	r3, [r4, #20]
 8010e36:	9b01      	ldr	r3, [sp, #4]
 8010e38:	6120      	str	r0, [r4, #16]
 8010e3a:	b15b      	cbz	r3, 8010e54 <__smakebuf_r+0x74>
 8010e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e40:	4630      	mov	r0, r6
 8010e42:	f000 f8c9 	bl	8010fd8 <_isatty_r>
 8010e46:	b128      	cbz	r0, 8010e54 <__smakebuf_r+0x74>
 8010e48:	89a3      	ldrh	r3, [r4, #12]
 8010e4a:	f023 0303 	bic.w	r3, r3, #3
 8010e4e:	f043 0301 	orr.w	r3, r3, #1
 8010e52:	81a3      	strh	r3, [r4, #12]
 8010e54:	89a0      	ldrh	r0, [r4, #12]
 8010e56:	4305      	orrs	r5, r0
 8010e58:	81a5      	strh	r5, [r4, #12]
 8010e5a:	e7cd      	b.n	8010df8 <__smakebuf_r+0x18>
 8010e5c:	08010bed 	.word	0x08010bed

08010e60 <_raise_r>:
 8010e60:	291f      	cmp	r1, #31
 8010e62:	b538      	push	{r3, r4, r5, lr}
 8010e64:	4604      	mov	r4, r0
 8010e66:	460d      	mov	r5, r1
 8010e68:	d904      	bls.n	8010e74 <_raise_r+0x14>
 8010e6a:	2316      	movs	r3, #22
 8010e6c:	6003      	str	r3, [r0, #0]
 8010e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e72:	bd38      	pop	{r3, r4, r5, pc}
 8010e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e76:	b112      	cbz	r2, 8010e7e <_raise_r+0x1e>
 8010e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e7c:	b94b      	cbnz	r3, 8010e92 <_raise_r+0x32>
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f000 f830 	bl	8010ee4 <_getpid_r>
 8010e84:	462a      	mov	r2, r5
 8010e86:	4601      	mov	r1, r0
 8010e88:	4620      	mov	r0, r4
 8010e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e8e:	f000 b817 	b.w	8010ec0 <_kill_r>
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d00a      	beq.n	8010eac <_raise_r+0x4c>
 8010e96:	1c59      	adds	r1, r3, #1
 8010e98:	d103      	bne.n	8010ea2 <_raise_r+0x42>
 8010e9a:	2316      	movs	r3, #22
 8010e9c:	6003      	str	r3, [r0, #0]
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	e7e7      	b.n	8010e72 <_raise_r+0x12>
 8010ea2:	2400      	movs	r4, #0
 8010ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	4798      	blx	r3
 8010eac:	2000      	movs	r0, #0
 8010eae:	e7e0      	b.n	8010e72 <_raise_r+0x12>

08010eb0 <raise>:
 8010eb0:	4b02      	ldr	r3, [pc, #8]	; (8010ebc <raise+0xc>)
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	6818      	ldr	r0, [r3, #0]
 8010eb6:	f7ff bfd3 	b.w	8010e60 <_raise_r>
 8010eba:	bf00      	nop
 8010ebc:	24000084 	.word	0x24000084

08010ec0 <_kill_r>:
 8010ec0:	b538      	push	{r3, r4, r5, lr}
 8010ec2:	4d07      	ldr	r5, [pc, #28]	; (8010ee0 <_kill_r+0x20>)
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	4608      	mov	r0, r1
 8010eca:	4611      	mov	r1, r2
 8010ecc:	602b      	str	r3, [r5, #0]
 8010ece:	f7f2 fd3f 	bl	8003950 <_kill>
 8010ed2:	1c43      	adds	r3, r0, #1
 8010ed4:	d102      	bne.n	8010edc <_kill_r+0x1c>
 8010ed6:	682b      	ldr	r3, [r5, #0]
 8010ed8:	b103      	cbz	r3, 8010edc <_kill_r+0x1c>
 8010eda:	6023      	str	r3, [r4, #0]
 8010edc:	bd38      	pop	{r3, r4, r5, pc}
 8010ede:	bf00      	nop
 8010ee0:	24000a24 	.word	0x24000a24

08010ee4 <_getpid_r>:
 8010ee4:	f7f2 bd2c 	b.w	8003940 <_getpid>

08010ee8 <__sread>:
 8010ee8:	b510      	push	{r4, lr}
 8010eea:	460c      	mov	r4, r1
 8010eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ef0:	f000 f894 	bl	801101c <_read_r>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	bfab      	itete	ge
 8010ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010efa:	89a3      	ldrhlt	r3, [r4, #12]
 8010efc:	181b      	addge	r3, r3, r0
 8010efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f02:	bfac      	ite	ge
 8010f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f06:	81a3      	strhlt	r3, [r4, #12]
 8010f08:	bd10      	pop	{r4, pc}

08010f0a <__swrite>:
 8010f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f0e:	461f      	mov	r7, r3
 8010f10:	898b      	ldrh	r3, [r1, #12]
 8010f12:	05db      	lsls	r3, r3, #23
 8010f14:	4605      	mov	r5, r0
 8010f16:	460c      	mov	r4, r1
 8010f18:	4616      	mov	r6, r2
 8010f1a:	d505      	bpl.n	8010f28 <__swrite+0x1e>
 8010f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f20:	2302      	movs	r3, #2
 8010f22:	2200      	movs	r2, #0
 8010f24:	f000 f868 	bl	8010ff8 <_lseek_r>
 8010f28:	89a3      	ldrh	r3, [r4, #12]
 8010f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f32:	81a3      	strh	r3, [r4, #12]
 8010f34:	4632      	mov	r2, r6
 8010f36:	463b      	mov	r3, r7
 8010f38:	4628      	mov	r0, r5
 8010f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3e:	f000 b817 	b.w	8010f70 <_write_r>

08010f42 <__sseek>:
 8010f42:	b510      	push	{r4, lr}
 8010f44:	460c      	mov	r4, r1
 8010f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f4a:	f000 f855 	bl	8010ff8 <_lseek_r>
 8010f4e:	1c43      	adds	r3, r0, #1
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	bf15      	itete	ne
 8010f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f5e:	81a3      	strheq	r3, [r4, #12]
 8010f60:	bf18      	it	ne
 8010f62:	81a3      	strhne	r3, [r4, #12]
 8010f64:	bd10      	pop	{r4, pc}

08010f66 <__sclose>:
 8010f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f6a:	f000 b813 	b.w	8010f94 <_close_r>
	...

08010f70 <_write_r>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4d07      	ldr	r5, [pc, #28]	; (8010f90 <_write_r+0x20>)
 8010f74:	4604      	mov	r4, r0
 8010f76:	4608      	mov	r0, r1
 8010f78:	4611      	mov	r1, r2
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	602a      	str	r2, [r5, #0]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	f7f2 fd1d 	bl	80039be <_write>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d102      	bne.n	8010f8e <_write_r+0x1e>
 8010f88:	682b      	ldr	r3, [r5, #0]
 8010f8a:	b103      	cbz	r3, 8010f8e <_write_r+0x1e>
 8010f8c:	6023      	str	r3, [r4, #0]
 8010f8e:	bd38      	pop	{r3, r4, r5, pc}
 8010f90:	24000a24 	.word	0x24000a24

08010f94 <_close_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d06      	ldr	r5, [pc, #24]	; (8010fb0 <_close_r+0x1c>)
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	602b      	str	r3, [r5, #0]
 8010fa0:	f7f2 fd29 	bl	80039f6 <_close>
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	d102      	bne.n	8010fae <_close_r+0x1a>
 8010fa8:	682b      	ldr	r3, [r5, #0]
 8010faa:	b103      	cbz	r3, 8010fae <_close_r+0x1a>
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	bd38      	pop	{r3, r4, r5, pc}
 8010fb0:	24000a24 	.word	0x24000a24

08010fb4 <_fstat_r>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4d07      	ldr	r5, [pc, #28]	; (8010fd4 <_fstat_r+0x20>)
 8010fb8:	2300      	movs	r3, #0
 8010fba:	4604      	mov	r4, r0
 8010fbc:	4608      	mov	r0, r1
 8010fbe:	4611      	mov	r1, r2
 8010fc0:	602b      	str	r3, [r5, #0]
 8010fc2:	f7f2 fd24 	bl	8003a0e <_fstat>
 8010fc6:	1c43      	adds	r3, r0, #1
 8010fc8:	d102      	bne.n	8010fd0 <_fstat_r+0x1c>
 8010fca:	682b      	ldr	r3, [r5, #0]
 8010fcc:	b103      	cbz	r3, 8010fd0 <_fstat_r+0x1c>
 8010fce:	6023      	str	r3, [r4, #0]
 8010fd0:	bd38      	pop	{r3, r4, r5, pc}
 8010fd2:	bf00      	nop
 8010fd4:	24000a24 	.word	0x24000a24

08010fd8 <_isatty_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4d06      	ldr	r5, [pc, #24]	; (8010ff4 <_isatty_r+0x1c>)
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	602b      	str	r3, [r5, #0]
 8010fe4:	f7f2 fd23 	bl	8003a2e <_isatty>
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	d102      	bne.n	8010ff2 <_isatty_r+0x1a>
 8010fec:	682b      	ldr	r3, [r5, #0]
 8010fee:	b103      	cbz	r3, 8010ff2 <_isatty_r+0x1a>
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	24000a24 	.word	0x24000a24

08010ff8 <_lseek_r>:
 8010ff8:	b538      	push	{r3, r4, r5, lr}
 8010ffa:	4d07      	ldr	r5, [pc, #28]	; (8011018 <_lseek_r+0x20>)
 8010ffc:	4604      	mov	r4, r0
 8010ffe:	4608      	mov	r0, r1
 8011000:	4611      	mov	r1, r2
 8011002:	2200      	movs	r2, #0
 8011004:	602a      	str	r2, [r5, #0]
 8011006:	461a      	mov	r2, r3
 8011008:	f7f2 fd1c 	bl	8003a44 <_lseek>
 801100c:	1c43      	adds	r3, r0, #1
 801100e:	d102      	bne.n	8011016 <_lseek_r+0x1e>
 8011010:	682b      	ldr	r3, [r5, #0]
 8011012:	b103      	cbz	r3, 8011016 <_lseek_r+0x1e>
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	bd38      	pop	{r3, r4, r5, pc}
 8011018:	24000a24 	.word	0x24000a24

0801101c <_read_r>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	4d07      	ldr	r5, [pc, #28]	; (801103c <_read_r+0x20>)
 8011020:	4604      	mov	r4, r0
 8011022:	4608      	mov	r0, r1
 8011024:	4611      	mov	r1, r2
 8011026:	2200      	movs	r2, #0
 8011028:	602a      	str	r2, [r5, #0]
 801102a:	461a      	mov	r2, r3
 801102c:	f7f2 fcaa 	bl	8003984 <_read>
 8011030:	1c43      	adds	r3, r0, #1
 8011032:	d102      	bne.n	801103a <_read_r+0x1e>
 8011034:	682b      	ldr	r3, [r5, #0]
 8011036:	b103      	cbz	r3, 801103a <_read_r+0x1e>
 8011038:	6023      	str	r3, [r4, #0]
 801103a:	bd38      	pop	{r3, r4, r5, pc}
 801103c:	24000a24 	.word	0x24000a24

08011040 <checkint>:
 8011040:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011044:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011048:	429a      	cmp	r2, r3
 801104a:	b570      	push	{r4, r5, r6, lr}
 801104c:	dd2a      	ble.n	80110a4 <checkint+0x64>
 801104e:	f240 4333 	movw	r3, #1075	; 0x433
 8011052:	429a      	cmp	r2, r3
 8011054:	dc24      	bgt.n	80110a0 <checkint+0x60>
 8011056:	1a9b      	subs	r3, r3, r2
 8011058:	f1a3 0620 	sub.w	r6, r3, #32
 801105c:	f04f 32ff 	mov.w	r2, #4294967295
 8011060:	fa02 f403 	lsl.w	r4, r2, r3
 8011064:	fa02 f606 	lsl.w	r6, r2, r6
 8011068:	f1c3 0520 	rsb	r5, r3, #32
 801106c:	fa22 f505 	lsr.w	r5, r2, r5
 8011070:	4334      	orrs	r4, r6
 8011072:	432c      	orrs	r4, r5
 8011074:	409a      	lsls	r2, r3
 8011076:	ea20 0202 	bic.w	r2, r0, r2
 801107a:	ea21 0404 	bic.w	r4, r1, r4
 801107e:	4322      	orrs	r2, r4
 8011080:	f1a3 0420 	sub.w	r4, r3, #32
 8011084:	f1c3 0220 	rsb	r2, r3, #32
 8011088:	d10c      	bne.n	80110a4 <checkint+0x64>
 801108a:	40d8      	lsrs	r0, r3
 801108c:	fa01 f302 	lsl.w	r3, r1, r2
 8011090:	4318      	orrs	r0, r3
 8011092:	40e1      	lsrs	r1, r4
 8011094:	4308      	orrs	r0, r1
 8011096:	f000 0001 	and.w	r0, r0, #1
 801109a:	f1d0 0002 	rsbs	r0, r0, #2
 801109e:	bd70      	pop	{r4, r5, r6, pc}
 80110a0:	2002      	movs	r0, #2
 80110a2:	e7fc      	b.n	801109e <checkint+0x5e>
 80110a4:	2000      	movs	r0, #0
 80110a6:	e7fa      	b.n	801109e <checkint+0x5e>

080110a8 <pow>:
 80110a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110ac:	ee10 4a90 	vmov	r4, s1
 80110b0:	ed2d 8b0a 	vpush	{d8-d12}
 80110b4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80110b8:	ee11 7a90 	vmov	r7, s3
 80110bc:	f10a 32ff 	add.w	r2, sl, #4294967295
 80110c0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80110c4:	429a      	cmp	r2, r3
 80110c6:	ee10 6a10 	vmov	r6, s0
 80110ca:	ee11 0a10 	vmov	r0, s2
 80110ce:	b086      	sub	sp, #24
 80110d0:	46d4      	mov	ip, sl
 80110d2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80110d6:	d806      	bhi.n	80110e6 <pow+0x3e>
 80110d8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80110dc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80110e0:	2b7f      	cmp	r3, #127	; 0x7f
 80110e2:	f240 8156 	bls.w	8011392 <pow+0x2ea>
 80110e6:	1802      	adds	r2, r0, r0
 80110e8:	eb47 0107 	adc.w	r1, r7, r7
 80110ec:	f06f 0e01 	mvn.w	lr, #1
 80110f0:	f112 39ff 	adds.w	r9, r2, #4294967295
 80110f4:	f141 38ff 	adc.w	r8, r1, #4294967295
 80110f8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80110fc:	45ce      	cmp	lr, r9
 80110fe:	eb73 0808 	sbcs.w	r8, r3, r8
 8011102:	d23f      	bcs.n	8011184 <pow+0xdc>
 8011104:	ea52 0301 	orrs.w	r3, r2, r1
 8011108:	f04f 0300 	mov.w	r3, #0
 801110c:	d10c      	bne.n	8011128 <pow+0x80>
 801110e:	19b6      	adds	r6, r6, r6
 8011110:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011114:	4164      	adcs	r4, r4
 8011116:	42b3      	cmp	r3, r6
 8011118:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801111c:	41a3      	sbcs	r3, r4
 801111e:	f0c0 808c 	bcc.w	801123a <pow+0x192>
 8011122:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011126:	e028      	b.n	801117a <pow+0xd2>
 8011128:	4da3      	ldr	r5, [pc, #652]	; (80113b8 <pow+0x310>)
 801112a:	42ac      	cmp	r4, r5
 801112c:	bf08      	it	eq
 801112e:	429e      	cmpeq	r6, r3
 8011130:	d107      	bne.n	8011142 <pow+0x9a>
 8011132:	1800      	adds	r0, r0, r0
 8011134:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011138:	417f      	adcs	r7, r7
 801113a:	4283      	cmp	r3, r0
 801113c:	4b9f      	ldr	r3, [pc, #636]	; (80113bc <pow+0x314>)
 801113e:	41bb      	sbcs	r3, r7
 8011140:	e7ed      	b.n	801111e <pow+0x76>
 8011142:	19b6      	adds	r6, r6, r6
 8011144:	489e      	ldr	r0, [pc, #632]	; (80113c0 <pow+0x318>)
 8011146:	4164      	adcs	r4, r4
 8011148:	42b3      	cmp	r3, r6
 801114a:	eb70 0504 	sbcs.w	r5, r0, r4
 801114e:	d374      	bcc.n	801123a <pow+0x192>
 8011150:	4281      	cmp	r1, r0
 8011152:	bf08      	it	eq
 8011154:	429a      	cmpeq	r2, r3
 8011156:	d170      	bne.n	801123a <pow+0x192>
 8011158:	4a9a      	ldr	r2, [pc, #616]	; (80113c4 <pow+0x31c>)
 801115a:	4294      	cmp	r4, r2
 801115c:	bf08      	it	eq
 801115e:	429e      	cmpeq	r6, r3
 8011160:	d0df      	beq.n	8011122 <pow+0x7a>
 8011162:	4294      	cmp	r4, r2
 8011164:	ea6f 0707 	mvn.w	r7, r7
 8011168:	bf34      	ite	cc
 801116a:	2400      	movcc	r4, #0
 801116c:	2401      	movcs	r4, #1
 801116e:	0fff      	lsrs	r7, r7, #31
 8011170:	42bc      	cmp	r4, r7
 8011172:	f040 81d9 	bne.w	8011528 <pow+0x480>
 8011176:	ee21 0b01 	vmul.f64	d0, d1, d1
 801117a:	b006      	add	sp, #24
 801117c:	ecbd 8b0a 	vpop	{d8-d12}
 8011180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011184:	eb16 0806 	adds.w	r8, r6, r6
 8011188:	eb44 0904 	adc.w	r9, r4, r4
 801118c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011190:	f169 0200 	sbc.w	r2, r9, #0
 8011194:	458e      	cmp	lr, r1
 8011196:	4193      	sbcs	r3, r2
 8011198:	d223      	bcs.n	80111e2 <pow+0x13a>
 801119a:	ee20 0b00 	vmul.f64	d0, d0, d0
 801119e:	2c00      	cmp	r4, #0
 80111a0:	da12      	bge.n	80111c8 <pow+0x120>
 80111a2:	4639      	mov	r1, r7
 80111a4:	f7ff ff4c 	bl	8011040 <checkint>
 80111a8:	2801      	cmp	r0, #1
 80111aa:	d10d      	bne.n	80111c8 <pow+0x120>
 80111ac:	eeb1 0b40 	vneg.f64	d0, d0
 80111b0:	ea58 0309 	orrs.w	r3, r8, r9
 80111b4:	d10a      	bne.n	80111cc <pow+0x124>
 80111b6:	2f00      	cmp	r7, #0
 80111b8:	dadf      	bge.n	801117a <pow+0xd2>
 80111ba:	b006      	add	sp, #24
 80111bc:	ecbd 8b0a 	vpop	{d8-d12}
 80111c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c4:	f000 bb50 	b.w	8011868 <__math_divzero>
 80111c8:	2000      	movs	r0, #0
 80111ca:	e7f1      	b.n	80111b0 <pow+0x108>
 80111cc:	2f00      	cmp	r7, #0
 80111ce:	dad4      	bge.n	801117a <pow+0xd2>
 80111d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80111d4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80111d8:	ed8d 7b00 	vstr	d7, [sp]
 80111dc:	ed9d 0b00 	vldr	d0, [sp]
 80111e0:	e7cb      	b.n	801117a <pow+0xd2>
 80111e2:	2c00      	cmp	r4, #0
 80111e4:	da2c      	bge.n	8011240 <pow+0x198>
 80111e6:	4639      	mov	r1, r7
 80111e8:	f7ff ff2a 	bl	8011040 <checkint>
 80111ec:	b930      	cbnz	r0, 80111fc <pow+0x154>
 80111ee:	b006      	add	sp, #24
 80111f0:	ecbd 8b0a 	vpop	{d8-d12}
 80111f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111f8:	f000 bb4e 	b.w	8011898 <__math_invalid>
 80111fc:	2801      	cmp	r0, #1
 80111fe:	bf14      	ite	ne
 8011200:	2000      	movne	r0, #0
 8011202:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011206:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801120a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801120e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011212:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011216:	2b7f      	cmp	r3, #127	; 0x7f
 8011218:	d92d      	bls.n	8011276 <pow+0x1ce>
 801121a:	4b67      	ldr	r3, [pc, #412]	; (80113b8 <pow+0x310>)
 801121c:	2000      	movs	r0, #0
 801121e:	429c      	cmp	r4, r3
 8011220:	bf08      	it	eq
 8011222:	4286      	cmpeq	r6, r0
 8011224:	f43f af7d 	beq.w	8011122 <pow+0x7a>
 8011228:	f240 31bd 	movw	r1, #957	; 0x3bd
 801122c:	428a      	cmp	r2, r1
 801122e:	d80c      	bhi.n	801124a <pow+0x1a2>
 8011230:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011234:	42b0      	cmp	r0, r6
 8011236:	41a3      	sbcs	r3, r4
 8011238:	d204      	bcs.n	8011244 <pow+0x19c>
 801123a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801123e:	e79c      	b.n	801117a <pow+0xd2>
 8011240:	2000      	movs	r0, #0
 8011242:	e7e4      	b.n	801120e <pow+0x166>
 8011244:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011248:	e797      	b.n	801117a <pow+0xd2>
 801124a:	2e01      	cmp	r6, #1
 801124c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011250:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011254:	bf34      	ite	cc
 8011256:	2301      	movcc	r3, #1
 8011258:	2300      	movcs	r3, #0
 801125a:	4295      	cmp	r5, r2
 801125c:	bf8c      	ite	hi
 801125e:	2500      	movhi	r5, #0
 8011260:	2501      	movls	r5, #1
 8011262:	42ab      	cmp	r3, r5
 8011264:	f000 809d 	beq.w	80113a2 <pow+0x2fa>
 8011268:	b006      	add	sp, #24
 801126a:	ecbd 8b0a 	vpop	{d8-d12}
 801126e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011272:	f000 baf1 	b.w	8011858 <__math_oflow>
 8011276:	f1bc 0f00 	cmp.w	ip, #0
 801127a:	d10b      	bne.n	8011294 <pow+0x1ec>
 801127c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80113b0 <pow+0x308>
 8011280:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011284:	ec53 2b17 	vmov	r2, r3, d7
 8011288:	ee17 6a10 	vmov	r6, s14
 801128c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011290:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011294:	4b4c      	ldr	r3, [pc, #304]	; (80113c8 <pow+0x320>)
 8011296:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801129a:	4423      	add	r3, r4
 801129c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80112a0:	1519      	asrs	r1, r3, #20
 80112a2:	0d1b      	lsrs	r3, r3, #20
 80112a4:	051b      	lsls	r3, r3, #20
 80112a6:	eba4 0903 	sub.w	r9, r4, r3
 80112aa:	4b48      	ldr	r3, [pc, #288]	; (80113cc <pow+0x324>)
 80112ac:	ee04 1a10 	vmov	s8, r1
 80112b0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80112b4:	f1b6 0800 	subs.w	r8, r6, #0
 80112b8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80112bc:	ec49 8b15 	vmov	d5, r8, r9
 80112c0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80112c4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80112c8:	ed93 7b00 	vldr	d7, [r3]
 80112cc:	ed93 5b02 	vldr	d5, [r3, #8]
 80112d0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80112d4:	eea4 2b07 	vfma.f64	d2, d4, d7
 80112d8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80112dc:	ee36 ab02 	vadd.f64	d10, d6, d2
 80112e0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80112e4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80112e8:	ed93 5b04 	vldr	d5, [r3, #16]
 80112ec:	ee32 2b06 	vadd.f64	d2, d2, d6
 80112f0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80112f4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80112f8:	ed93 4b08 	vldr	d4, [r3, #32]
 80112fc:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011300:	eeb0 9b40 	vmov.f64	d9, d0
 8011304:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011308:	ed93 5b06 	vldr	d5, [r3, #24]
 801130c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011310:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011314:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011318:	eea6 5b04 	vfma.f64	d5, d6, d4
 801131c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011320:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011324:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011328:	ee3a ab00 	vadd.f64	d10, d10, d0
 801132c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011330:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011334:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011338:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801133c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011340:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011344:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011348:	eeab ab05 	vfma.f64	d10, d11, d5
 801134c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011350:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011354:	ee17 3a90 	vmov	r3, s15
 8011358:	eeb0 5b47 	vmov.f64	d5, d7
 801135c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011360:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011364:	18b2      	adds	r2, r6, r2
 8011366:	2a3e      	cmp	r2, #62	; 0x3e
 8011368:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801136c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011370:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011374:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011378:	d92b      	bls.n	80113d2 <pow+0x32a>
 801137a:	2a00      	cmp	r2, #0
 801137c:	da0b      	bge.n	8011396 <pow+0x2ee>
 801137e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011382:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011386:	2800      	cmp	r0, #0
 8011388:	f43f aef7 	beq.w	801117a <pow+0xd2>
 801138c:	eeb1 0b40 	vneg.f64	d0, d0
 8011390:	e6f3      	b.n	801117a <pow+0xd2>
 8011392:	2000      	movs	r0, #0
 8011394:	e77e      	b.n	8011294 <pow+0x1ec>
 8011396:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801139a:	d919      	bls.n	80113d0 <pow+0x328>
 801139c:	2b00      	cmp	r3, #0
 801139e:	f6bf af63 	bge.w	8011268 <pow+0x1c0>
 80113a2:	b006      	add	sp, #24
 80113a4:	ecbd 8b0a 	vpop	{d8-d12}
 80113a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113ac:	f000 ba4c 	b.w	8011848 <__math_uflow>
 80113b0:	00000000 	.word	0x00000000
 80113b4:	43300000 	.word	0x43300000
 80113b8:	3ff00000 	.word	0x3ff00000
 80113bc:	fff00000 	.word	0xfff00000
 80113c0:	ffe00000 	.word	0xffe00000
 80113c4:	7fe00000 	.word	0x7fe00000
 80113c8:	c0196aab 	.word	0xc0196aab
 80113cc:	08011dd0 	.word	0x08011dd0
 80113d0:	2600      	movs	r6, #0
 80113d2:	495d      	ldr	r1, [pc, #372]	; (8011548 <pow+0x4a0>)
 80113d4:	ed91 4b02 	vldr	d4, [r1, #8]
 80113d8:	ed91 3b00 	vldr	d3, [r1]
 80113dc:	eeb0 6b44 	vmov.f64	d6, d4
 80113e0:	eea7 6b03 	vfma.f64	d6, d7, d3
 80113e4:	ee16 5a10 	vmov	r5, s12
 80113e8:	ee36 6b44 	vsub.f64	d6, d6, d4
 80113ec:	ed91 4b04 	vldr	d4, [r1, #16]
 80113f0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80113f4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80113f8:	eeb0 0b47 	vmov.f64	d0, d7
 80113fc:	ed91 7b06 	vldr	d7, [r1, #24]
 8011400:	18dc      	adds	r4, r3, r3
 8011402:	f104 030f 	add.w	r3, r4, #15
 8011406:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801140a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801140e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011412:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011416:	ee20 6b00 	vmul.f64	d6, d0, d0
 801141a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801141e:	ed91 5b08 	vldr	d5, [r1, #32]
 8011422:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011426:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801142a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801142e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011432:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011436:	ee26 6b06 	vmul.f64	d6, d6, d6
 801143a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801143e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011442:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011446:	eea0 5b04 	vfma.f64	d5, d0, d4
 801144a:	1940      	adds	r0, r0, r5
 801144c:	2700      	movs	r7, #0
 801144e:	eb17 020c 	adds.w	r2, r7, ip
 8011452:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011456:	eea6 7b05 	vfma.f64	d7, d6, d5
 801145a:	2e00      	cmp	r6, #0
 801145c:	d15f      	bne.n	801151e <pow+0x476>
 801145e:	42bd      	cmp	r5, r7
 8011460:	db13      	blt.n	801148a <pow+0x3e2>
 8011462:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011466:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801146a:	4610      	mov	r0, r2
 801146c:	ec41 0b10 	vmov	d0, r0, r1
 8011470:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011474:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011530 <pow+0x488>
 8011478:	ee20 0b07 	vmul.f64	d0, d0, d7
 801147c:	b006      	add	sp, #24
 801147e:	ecbd 8b0a 	vpop	{d8-d12}
 8011482:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011486:	f000 ba1f 	b.w	80118c8 <__math_check_oflow>
 801148a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801148e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011492:	4610      	mov	r0, r2
 8011494:	ec41 0b15 	vmov	d5, r0, r1
 8011498:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801149c:	ee27 6b05 	vmul.f64	d6, d7, d5
 80114a0:	ee35 7b06 	vadd.f64	d7, d5, d6
 80114a4:	eeb0 3bc7 	vabs.f64	d3, d7
 80114a8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80114ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011538 <pow+0x490>
 80114b4:	d52a      	bpl.n	801150c <pow+0x464>
 80114b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80114ba:	ee35 5b47 	vsub.f64	d5, d5, d7
 80114be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80114c6:	ee35 6b06 	vadd.f64	d6, d5, d6
 80114ca:	bf48      	it	mi
 80114cc:	eeb0 4b43 	vmovmi.f64	d4, d3
 80114d0:	ee37 3b04 	vadd.f64	d3, d7, d4
 80114d4:	ee34 5b43 	vsub.f64	d5, d4, d3
 80114d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80114dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80114e0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80114e4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80114e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80114ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f0:	d104      	bne.n	80114fc <pow+0x454>
 80114f2:	4632      	mov	r2, r6
 80114f4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80114f8:	ec43 2b17 	vmov	d7, r2, r3
 80114fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011500:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011504:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011508:	ed8d 6b04 	vstr	d6, [sp, #16]
 801150c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011510:	b006      	add	sp, #24
 8011512:	ecbd 8b0a 	vpop	{d8-d12}
 8011516:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801151a:	f000 b9cc 	b.w	80118b6 <__math_check_uflow>
 801151e:	ec43 2b10 	vmov	d0, r2, r3
 8011522:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011526:	e628      	b.n	801117a <pow+0xd2>
 8011528:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011540 <pow+0x498>
 801152c:	e625      	b.n	801117a <pow+0xd2>
 801152e:	bf00      	nop
 8011530:	00000000 	.word	0x00000000
 8011534:	7f000000 	.word	0x7f000000
 8011538:	00000000 	.word	0x00000000
 801153c:	00100000 	.word	0x00100000
	...
 8011548:	08012e18 	.word	0x08012e18

0801154c <asin>:
 801154c:	b508      	push	{r3, lr}
 801154e:	ed2d 8b04 	vpush	{d8-d9}
 8011552:	eeb0 8b40 	vmov.f64	d8, d0
 8011556:	f000 f847 	bl	80115e8 <__ieee754_asin>
 801155a:	eeb4 8b48 	vcmp.f64	d8, d8
 801155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011562:	eeb0 9b40 	vmov.f64	d9, d0
 8011566:	d615      	bvs.n	8011594 <asin+0x48>
 8011568:	eeb0 0b48 	vmov.f64	d0, d8
 801156c:	f000 f9c0 	bl	80118f0 <fabs>
 8011570:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011574:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801157c:	dd0a      	ble.n	8011594 <asin+0x48>
 801157e:	f7fc fec7 	bl	800e310 <__errno>
 8011582:	ecbd 8b04 	vpop	{d8-d9}
 8011586:	2321      	movs	r3, #33	; 0x21
 8011588:	6003      	str	r3, [r0, #0]
 801158a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801158e:	4804      	ldr	r0, [pc, #16]	; (80115a0 <asin+0x54>)
 8011590:	f7fe bdc6 	b.w	8010120 <nan>
 8011594:	eeb0 0b49 	vmov.f64	d0, d9
 8011598:	ecbd 8b04 	vpop	{d8-d9}
 801159c:	bd08      	pop	{r3, pc}
 801159e:	bf00      	nop
 80115a0:	08011c37 	.word	0x08011c37
 80115a4:	00000000 	.word	0x00000000

080115a8 <sqrt>:
 80115a8:	b508      	push	{r3, lr}
 80115aa:	ed2d 8b04 	vpush	{d8-d9}
 80115ae:	eeb0 8b40 	vmov.f64	d8, d0
 80115b2:	f000 f927 	bl	8011804 <__ieee754_sqrt>
 80115b6:	eeb4 8b48 	vcmp.f64	d8, d8
 80115ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115be:	d60c      	bvs.n	80115da <sqrt+0x32>
 80115c0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80115e0 <sqrt+0x38>
 80115c4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80115c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115cc:	d505      	bpl.n	80115da <sqrt+0x32>
 80115ce:	f7fc fe9f 	bl	800e310 <__errno>
 80115d2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80115d6:	2321      	movs	r3, #33	; 0x21
 80115d8:	6003      	str	r3, [r0, #0]
 80115da:	ecbd 8b04 	vpop	{d8-d9}
 80115de:	bd08      	pop	{r3, pc}
	...

080115e8 <__ieee754_asin>:
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	ee10 5a90 	vmov	r5, s1
 80115ee:	4b82      	ldr	r3, [pc, #520]	; (80117f8 <__ieee754_asin+0x210>)
 80115f0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80115f4:	429c      	cmp	r4, r3
 80115f6:	ed2d 8b06 	vpush	{d8-d10}
 80115fa:	dd19      	ble.n	8011630 <__ieee754_asin+0x48>
 80115fc:	ee10 3a10 	vmov	r3, s0
 8011600:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011604:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011608:	4323      	orrs	r3, r4
 801160a:	d10c      	bne.n	8011626 <__ieee754_asin+0x3e>
 801160c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8011780 <__ieee754_asin+0x198>
 8011610:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8011788 <__ieee754_asin+0x1a0>
 8011614:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011618:	eea0 7b06 	vfma.f64	d7, d0, d6
 801161c:	eeb0 0b47 	vmov.f64	d0, d7
 8011620:	ecbd 8b06 	vpop	{d8-d10}
 8011624:	bd38      	pop	{r3, r4, r5, pc}
 8011626:	ee30 7b40 	vsub.f64	d7, d0, d0
 801162a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801162e:	e7f7      	b.n	8011620 <__ieee754_asin+0x38>
 8011630:	4b72      	ldr	r3, [pc, #456]	; (80117fc <__ieee754_asin+0x214>)
 8011632:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011636:	429c      	cmp	r4, r3
 8011638:	dc0b      	bgt.n	8011652 <__ieee754_asin+0x6a>
 801163a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801163e:	da52      	bge.n	80116e6 <__ieee754_asin+0xfe>
 8011640:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8011790 <__ieee754_asin+0x1a8>
 8011644:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011648:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011650:	dce6      	bgt.n	8011620 <__ieee754_asin+0x38>
 8011652:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011656:	f000 f94b 	bl	80118f0 <fabs>
 801165a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011798 <__ieee754_asin+0x1b0>
 801165e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011662:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011666:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80117a0 <__ieee754_asin+0x1b8>
 801166a:	eeb0 0b48 	vmov.f64	d0, d8
 801166e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011672:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80117a8 <__ieee754_asin+0x1c0>
 8011676:	eea6 7b08 	vfma.f64	d7, d6, d8
 801167a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80117b0 <__ieee754_asin+0x1c8>
 801167e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 80117b8 <__ieee754_asin+0x1d0>
 8011682:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011686:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80117c0 <__ieee754_asin+0x1d8>
 801168a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801168e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80117c8 <__ieee754_asin+0x1e0>
 8011692:	eea7 ab08 	vfma.f64	d10, d7, d8
 8011696:	ee2a ab08 	vmul.f64	d10, d10, d8
 801169a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80117d0 <__ieee754_asin+0x1e8>
 801169e:	eea8 7b06 	vfma.f64	d7, d8, d6
 80116a2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80117d8 <__ieee754_asin+0x1f0>
 80116a6:	eea7 6b08 	vfma.f64	d6, d7, d8
 80116aa:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80117e0 <__ieee754_asin+0x1f8>
 80116ae:	eea6 7b08 	vfma.f64	d7, d6, d8
 80116b2:	eea7 9b08 	vfma.f64	d9, d7, d8
 80116b6:	f000 f8a5 	bl	8011804 <__ieee754_sqrt>
 80116ba:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 80116be:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80116c2:	4b4f      	ldr	r3, [pc, #316]	; (8011800 <__ieee754_asin+0x218>)
 80116c4:	429c      	cmp	r4, r3
 80116c6:	dd3d      	ble.n	8011744 <__ieee754_asin+0x15c>
 80116c8:	eea0 0b05 	vfma.f64	d0, d0, d5
 80116cc:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80117e8 <__ieee754_asin+0x200>
 80116d0:	eea0 7b04 	vfma.f64	d7, d0, d4
 80116d4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8011788 <__ieee754_asin+0x1a0>
 80116d8:	ee30 0b47 	vsub.f64	d0, d0, d7
 80116dc:	2d00      	cmp	r5, #0
 80116de:	bfd8      	it	le
 80116e0:	eeb1 0b40 	vnegle.f64	d0, d0
 80116e4:	e79c      	b.n	8011620 <__ieee754_asin+0x38>
 80116e6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011798 <__ieee754_asin+0x1b0>
 80116ea:	ee20 7b00 	vmul.f64	d7, d0, d0
 80116ee:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80117a0 <__ieee754_asin+0x1b8>
 80116f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80116f6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80117a8 <__ieee754_asin+0x1c0>
 80116fa:	eea6 5b07 	vfma.f64	d5, d6, d7
 80116fe:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80117b0 <__ieee754_asin+0x1c8>
 8011702:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011706:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80117c0 <__ieee754_asin+0x1d8>
 801170a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801170e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80117b8 <__ieee754_asin+0x1d0>
 8011712:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80117c8 <__ieee754_asin+0x1e0>
 8011716:	eea5 6b07 	vfma.f64	d6, d5, d7
 801171a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801171e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80117d0 <__ieee754_asin+0x1e8>
 8011722:	eea7 5b04 	vfma.f64	d5, d7, d4
 8011726:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80117d8 <__ieee754_asin+0x1f0>
 801172a:	eea5 4b07 	vfma.f64	d4, d5, d7
 801172e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80117e0 <__ieee754_asin+0x1f8>
 8011732:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011736:	eea5 9b07 	vfma.f64	d9, d5, d7
 801173a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801173e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8011742:	e76d      	b.n	8011620 <__ieee754_asin+0x38>
 8011744:	ec53 2b10 	vmov	r2, r3, d0
 8011748:	2200      	movs	r2, #0
 801174a:	ec43 2b16 	vmov	d6, r2, r3
 801174e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011752:	eea6 8b46 	vfms.f64	d8, d6, d6
 8011756:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801175a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8011780 <__ieee754_asin+0x198>
 801175e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011762:	eea3 7b44 	vfms.f64	d7, d3, d4
 8011766:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801176a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80117f0 <__ieee754_asin+0x208>
 801176e:	eeb0 0b45 	vmov.f64	d0, d5
 8011772:	eea6 0b44 	vfms.f64	d0, d6, d4
 8011776:	ee37 0b40 	vsub.f64	d0, d7, d0
 801177a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801177e:	e7ad      	b.n	80116dc <__ieee754_asin+0xf4>
 8011780:	33145c07 	.word	0x33145c07
 8011784:	3c91a626 	.word	0x3c91a626
 8011788:	54442d18 	.word	0x54442d18
 801178c:	3ff921fb 	.word	0x3ff921fb
 8011790:	8800759c 	.word	0x8800759c
 8011794:	7e37e43c 	.word	0x7e37e43c
 8011798:	0dfdf709 	.word	0x0dfdf709
 801179c:	3f023de1 	.word	0x3f023de1
 80117a0:	7501b288 	.word	0x7501b288
 80117a4:	3f49efe0 	.word	0x3f49efe0
 80117a8:	b5688f3b 	.word	0xb5688f3b
 80117ac:	bfa48228 	.word	0xbfa48228
 80117b0:	0e884455 	.word	0x0e884455
 80117b4:	3fc9c155 	.word	0x3fc9c155
 80117b8:	55555555 	.word	0x55555555
 80117bc:	3fc55555 	.word	0x3fc55555
 80117c0:	03eb6f7d 	.word	0x03eb6f7d
 80117c4:	bfd4d612 	.word	0xbfd4d612
 80117c8:	b12e9282 	.word	0xb12e9282
 80117cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80117d0:	1b8d0159 	.word	0x1b8d0159
 80117d4:	bfe6066c 	.word	0xbfe6066c
 80117d8:	9c598ac8 	.word	0x9c598ac8
 80117dc:	40002ae5 	.word	0x40002ae5
 80117e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80117e4:	c0033a27 	.word	0xc0033a27
 80117e8:	33145c07 	.word	0x33145c07
 80117ec:	bc91a626 	.word	0xbc91a626
 80117f0:	54442d18 	.word	0x54442d18
 80117f4:	3fe921fb 	.word	0x3fe921fb
 80117f8:	3fefffff 	.word	0x3fefffff
 80117fc:	3fdfffff 	.word	0x3fdfffff
 8011800:	3fef3332 	.word	0x3fef3332

08011804 <__ieee754_sqrt>:
 8011804:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011808:	4770      	bx	lr

0801180a <with_errno>:
 801180a:	b513      	push	{r0, r1, r4, lr}
 801180c:	4604      	mov	r4, r0
 801180e:	ed8d 0b00 	vstr	d0, [sp]
 8011812:	f7fc fd7d 	bl	800e310 <__errno>
 8011816:	ed9d 0b00 	vldr	d0, [sp]
 801181a:	6004      	str	r4, [r0, #0]
 801181c:	b002      	add	sp, #8
 801181e:	bd10      	pop	{r4, pc}

08011820 <xflow>:
 8011820:	b082      	sub	sp, #8
 8011822:	b158      	cbz	r0, 801183c <xflow+0x1c>
 8011824:	eeb1 7b40 	vneg.f64	d7, d0
 8011828:	ed8d 7b00 	vstr	d7, [sp]
 801182c:	ed9d 7b00 	vldr	d7, [sp]
 8011830:	2022      	movs	r0, #34	; 0x22
 8011832:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011836:	b002      	add	sp, #8
 8011838:	f7ff bfe7 	b.w	801180a <with_errno>
 801183c:	eeb0 7b40 	vmov.f64	d7, d0
 8011840:	e7f2      	b.n	8011828 <xflow+0x8>
 8011842:	0000      	movs	r0, r0
 8011844:	0000      	movs	r0, r0
	...

08011848 <__math_uflow>:
 8011848:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011850 <__math_uflow+0x8>
 801184c:	f7ff bfe8 	b.w	8011820 <xflow>
 8011850:	00000000 	.word	0x00000000
 8011854:	10000000 	.word	0x10000000

08011858 <__math_oflow>:
 8011858:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011860 <__math_oflow+0x8>
 801185c:	f7ff bfe0 	b.w	8011820 <xflow>
 8011860:	00000000 	.word	0x00000000
 8011864:	70000000 	.word	0x70000000

08011868 <__math_divzero>:
 8011868:	b082      	sub	sp, #8
 801186a:	2800      	cmp	r0, #0
 801186c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011870:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011874:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011878:	ed8d 7b00 	vstr	d7, [sp]
 801187c:	ed9d 0b00 	vldr	d0, [sp]
 8011880:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011890 <__math_divzero+0x28>
 8011884:	2022      	movs	r0, #34	; 0x22
 8011886:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801188a:	b002      	add	sp, #8
 801188c:	f7ff bfbd 	b.w	801180a <with_errno>
	...

08011898 <__math_invalid>:
 8011898:	eeb0 7b40 	vmov.f64	d7, d0
 801189c:	eeb4 7b47 	vcmp.f64	d7, d7
 80118a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80118a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80118ac:	d602      	bvs.n	80118b4 <__math_invalid+0x1c>
 80118ae:	2021      	movs	r0, #33	; 0x21
 80118b0:	f7ff bfab 	b.w	801180a <with_errno>
 80118b4:	4770      	bx	lr

080118b6 <__math_check_uflow>:
 80118b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80118ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118be:	d102      	bne.n	80118c6 <__math_check_uflow+0x10>
 80118c0:	2022      	movs	r0, #34	; 0x22
 80118c2:	f7ff bfa2 	b.w	801180a <with_errno>
 80118c6:	4770      	bx	lr

080118c8 <__math_check_oflow>:
 80118c8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80118e8 <__math_check_oflow+0x20>
 80118cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80118d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80118d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d8:	dd02      	ble.n	80118e0 <__math_check_oflow+0x18>
 80118da:	2022      	movs	r0, #34	; 0x22
 80118dc:	f7ff bf95 	b.w	801180a <with_errno>
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	f3af 8000 	nop.w
 80118e8:	ffffffff 	.word	0xffffffff
 80118ec:	7fefffff 	.word	0x7fefffff

080118f0 <fabs>:
 80118f0:	ec51 0b10 	vmov	r0, r1, d0
 80118f4:	ee10 2a10 	vmov	r2, s0
 80118f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80118fc:	ec43 2b10 	vmov	d0, r2, r3
 8011900:	4770      	bx	lr
	...

08011904 <_init>:
 8011904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011906:	bf00      	nop
 8011908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801190a:	bc08      	pop	{r3}
 801190c:	469e      	mov	lr, r3
 801190e:	4770      	bx	lr

08011910 <_fini>:
 8011910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011912:	bf00      	nop
 8011914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011916:	bc08      	pop	{r3}
 8011918:	469e      	mov	lr, r3
 801191a:	4770      	bx	lr
